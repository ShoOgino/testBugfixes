{"path":"lucene/core/src/test/org/apache/lucene/index/TestPayloadsOnVectors#testRandomVectors().mjava","commits":[{"id":"eda61b1e90b490cc5837200e04c02639a0d272c7","date":1358795519,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloadsOnVectors#testRandomVectors().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomVectors() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    String[] sampleTerms = new String[RandomInts.randomIntBetween(random(), 20, 50)];\n    for (int i = 0; i < sampleTerms.length; ++i) {\n      sampleTerms[i] = _TestUtil.randomUnicodeString(random());\n    }\n    FieldType ft = randomFieldType();\n    // generate random documents and index them\n    final String[] fieldNames = new String[_TestUtil.nextInt(random(), 1, 200)];\n    for (int i = 0; i < fieldNames.length; ++i) {\n      String fieldName;\n      do {\n        fieldName = _TestUtil.randomSimpleString(random());\n      } while (\"id\".equals(fieldName));\n      fieldNames[i] = fieldName;\n    }\n    final int numDocs = _TestUtil.nextInt(random(), 10, 100);\n    @SuppressWarnings(\"unchecked\")\n    final Map<String, RandomTokenStream>[] fieldValues  = new Map[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      fieldValues[i] = new HashMap<String, RandomTokenStream>();\n      final int numFields = _TestUtil.nextInt(random(), 0, rarely() ? fieldNames.length : 5);\n      for (int j = 0; j < numFields; ++j) {\n        final String fieldName = fieldNames[(i+j*31) % fieldNames.length];\n        final int tokenStreamLen = _TestUtil.nextInt(random(), 1, rarely() ? 300 : 5);\n        fieldValues[i].put(fieldName, new RandomTokenStream(tokenStreamLen, sampleTerms, rarely()));\n      }\n    }\n\n    // index them\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      doc.add(new IntField(\"id\", i, Store.YES));\n      for (Map.Entry<String, RandomTokenStream> entry : fieldValues[i].entrySet()) {\n        doc.add(new Field(entry.getKey(), entry.getValue(), ft));\n      }\n      iw.addDocument(doc);\n    }\n\n    iw.commit();\n    // make sure the format can merge\n    iw.forceMerge(2);\n\n    // read term vectors\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    for (int i = 0; i < 100; ++i) {\n      final int docID = random().nextInt(numDocs);\n      final Map<String, RandomTokenStream> fvs = fieldValues[reader.document(docID).getField(\"id\").numericValue().intValue()];\n      final Fields fields = reader.getTermVectors(docID);\n      if (fvs.isEmpty()) {\n        assertNull(fields);\n      } else {\n        Set<String> fns = new HashSet<String>();\n        for (String field : fields) {\n          fns.add(field);\n        }\n        assertEquals(fields.size(), fns.size());\n        assertEquals(fvs.keySet(), fns);\n        for (String field : fields) {\n          final RandomTokenStream tk = fvs.get(field);\n          assert tk != null;\n          final Terms terms = fields.terms(field);\n          assertEquals(ft.storeTermVectorPositions(), terms.hasPositions());\n          assertEquals(ft.storeTermVectorOffsets(), terms.hasOffsets());\n          assertEquals(1, terms.getDocCount());\n          final TermsEnum termsEnum = terms.iterator(null);\n          while (termsEnum.next() != null) {\n            assertEquals(1, termsEnum.docFreq());\n            final DocsAndPositionsEnum docsAndPositionsEnum = termsEnum.docsAndPositions(null, null);\n            final DocsEnum docsEnum = docsAndPositionsEnum == null ? termsEnum.docs(null, null) : docsAndPositionsEnum;\n            if (ft.storeTermVectorOffsets() || ft.storeTermVectorPositions()) {\n              assertNotNull(docsAndPositionsEnum);\n            }\n            assertEquals(0, docsEnum.nextDoc());\n            if (terms.hasPositions() || terms.hasOffsets()) {\n              final int freq = docsEnum.freq();\n              assertTrue(freq >= 1);\n              if (docsAndPositionsEnum != null) {\n                for (int k = 0; k < freq; ++k) {\n                  final int position = docsAndPositionsEnum.nextPosition();\n                  final Set<Integer> indexes;\n                  if (terms.hasPositions()) {\n                    indexes = tk.positionToTerms.get(position);\n                    assertNotNull(tk.positionToTerms.keySet().toString() + \" does not contain \" + position, indexes);\n                  } else {\n                    indexes = tk.startOffsetToTerms.get(docsAndPositionsEnum.startOffset());\n                    assertNotNull(indexes);\n                  }\n                  if (terms.hasPositions()) {\n                    boolean foundPosition = false;\n                    for (int index : indexes) {\n                      if (new BytesRef(tk.terms[index]).equals(termsEnum.term()) && tk.positions[index] == position) {\n                        foundPosition = true;\n                        break;\n                      }\n                    }\n                    assertTrue(foundPosition);\n                  }\n                  if (terms.hasOffsets()) {\n                    boolean foundOffset = false;\n                    for (int index : indexes) {\n                      if (new BytesRef(tk.terms[index]).equals(termsEnum.term()) && tk.startOffsets[index] == docsAndPositionsEnum.startOffset() && tk.endOffsets[index] == docsAndPositionsEnum.endOffset()) {\n                        foundOffset = true;\n                        break;\n                      }\n                    }\n                    assertTrue(foundOffset);\n                  }\n                  if (terms.hasPayloads()) {\n                    boolean foundPayload = false;\n                    for (int index : indexes) {\n                      if (new BytesRef(tk.terms[index]).equals(termsEnum.term()) && equals(tk.payloads[index], docsAndPositionsEnum.getPayload())) {\n                        foundPayload = true;\n                        break;\n                      }\n                    }\n                    assertTrue(foundPayload);\n                  }\n                }\n              }\n            }\n            assertEquals(DocsEnum.NO_MORE_DOCS, docsEnum.nextDoc());\n          }\n        }\n      }\n    }\n    IOUtils.close(reader, iw, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloadsOnVectors#testRandomVectors().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomVectors() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    String[] sampleTerms = new String[RandomInts.randomIntBetween(random(), 20, 50)];\n    for (int i = 0; i < sampleTerms.length; ++i) {\n      sampleTerms[i] = _TestUtil.randomUnicodeString(random());\n    }\n    FieldType ft = randomFieldType();\n    // generate random documents and index them\n    final String[] fieldNames = new String[_TestUtil.nextInt(random(), 1, 200)];\n    for (int i = 0; i < fieldNames.length; ++i) {\n      String fieldName;\n      do {\n        fieldName = _TestUtil.randomSimpleString(random());\n      } while (\"id\".equals(fieldName));\n      fieldNames[i] = fieldName;\n    }\n    final int numDocs = _TestUtil.nextInt(random(), 10, 100);\n    @SuppressWarnings(\"unchecked\")\n    final Map<String, RandomTokenStream>[] fieldValues  = new Map[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      fieldValues[i] = new HashMap<String, RandomTokenStream>();\n      final int numFields = _TestUtil.nextInt(random(), 0, rarely() ? fieldNames.length : 5);\n      for (int j = 0; j < numFields; ++j) {\n        final String fieldName = fieldNames[(i+j*31) % fieldNames.length];\n        final int tokenStreamLen = _TestUtil.nextInt(random(), 1, rarely() ? 300 : 5);\n        fieldValues[i].put(fieldName, new RandomTokenStream(tokenStreamLen, sampleTerms, rarely()));\n      }\n    }\n\n    // index them\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      doc.add(new IntField(\"id\", i, Store.YES));\n      for (Map.Entry<String, RandomTokenStream> entry : fieldValues[i].entrySet()) {\n        doc.add(new Field(entry.getKey(), entry.getValue(), ft));\n      }\n      iw.addDocument(doc);\n    }\n\n    iw.commit();\n    // make sure the format can merge\n    iw.forceMerge(2);\n\n    // read term vectors\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    for (int i = 0; i < 100; ++i) {\n      final int docID = random().nextInt(numDocs);\n      final Map<String, RandomTokenStream> fvs = fieldValues[reader.document(docID).getField(\"id\").numericValue().intValue()];\n      final Fields fields = reader.getTermVectors(docID);\n      if (fvs.isEmpty()) {\n        assertNull(fields);\n      } else {\n        Set<String> fns = new HashSet<String>();\n        for (String field : fields) {\n          fns.add(field);\n        }\n        assertEquals(fields.size(), fns.size());\n        assertEquals(fvs.keySet(), fns);\n        for (String field : fields) {\n          final RandomTokenStream tk = fvs.get(field);\n          assert tk != null;\n          final Terms terms = fields.terms(field);\n          assertEquals(ft.storeTermVectorPositions(), terms.hasPositions());\n          assertEquals(ft.storeTermVectorOffsets(), terms.hasOffsets());\n          assertEquals(1, terms.getDocCount());\n          final TermsEnum termsEnum = terms.iterator(null);\n          while (termsEnum.next() != null) {\n            assertEquals(1, termsEnum.docFreq());\n            final DocsAndPositionsEnum docsAndPositionsEnum = termsEnum.docsAndPositions(null, null);\n            final DocsEnum docsEnum = docsAndPositionsEnum == null ? termsEnum.docs(null, null) : docsAndPositionsEnum;\n            if (ft.storeTermVectorOffsets() || ft.storeTermVectorPositions()) {\n              assertNotNull(docsAndPositionsEnum);\n            }\n            assertEquals(0, docsEnum.nextDoc());\n            if (terms.hasPositions() || terms.hasOffsets()) {\n              final int freq = docsEnum.freq();\n              assertTrue(freq >= 1);\n              if (docsAndPositionsEnum != null) {\n                for (int k = 0; k < freq; ++k) {\n                  final int position = docsAndPositionsEnum.nextPosition();\n                  final Set<Integer> indexes;\n                  if (terms.hasPositions()) {\n                    indexes = tk.positionToTerms.get(position);\n                    assertNotNull(tk.positionToTerms.keySet().toString() + \" does not contain \" + position, indexes);\n                  } else {\n                    indexes = tk.startOffsetToTerms.get(docsAndPositionsEnum.startOffset());\n                    assertNotNull(indexes);\n                  }\n                  if (terms.hasPositions()) {\n                    boolean foundPosition = false;\n                    for (int index : indexes) {\n                      if (new BytesRef(tk.terms[index]).equals(termsEnum.term()) && tk.positions[index] == position) {\n                        foundPosition = true;\n                        break;\n                      }\n                    }\n                    assertTrue(foundPosition);\n                  }\n                  if (terms.hasOffsets()) {\n                    boolean foundOffset = false;\n                    for (int index : indexes) {\n                      if (new BytesRef(tk.terms[index]).equals(termsEnum.term()) && tk.startOffsets[index] == docsAndPositionsEnum.startOffset() && tk.endOffsets[index] == docsAndPositionsEnum.endOffset()) {\n                        foundOffset = true;\n                        break;\n                      }\n                    }\n                    assertTrue(foundOffset);\n                  }\n                  if (terms.hasPayloads()) {\n                    boolean foundPayload = false;\n                    for (int index : indexes) {\n                      if (new BytesRef(tk.terms[index]).equals(termsEnum.term()) && equals(tk.payloads[index], docsAndPositionsEnum.getPayload())) {\n                        foundPayload = true;\n                        break;\n                      }\n                    }\n                    assertTrue(foundPayload);\n                  }\n                }\n              }\n            }\n            assertEquals(DocsEnum.NO_MORE_DOCS, docsEnum.nextDoc());\n          }\n        }\n      }\n    }\n    IOUtils.close(reader, iw, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f21ce13f410ee015e1ba14687ab4b8518ac52a11","date":1359713213,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloadsOnVectors#testRandomVectors().mjava","sourceNew":null,"sourceOld":"  public void testRandomVectors() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    String[] sampleTerms = new String[RandomInts.randomIntBetween(random(), 20, 50)];\n    for (int i = 0; i < sampleTerms.length; ++i) {\n      sampleTerms[i] = _TestUtil.randomUnicodeString(random());\n    }\n    FieldType ft = randomFieldType();\n    // generate random documents and index them\n    final String[] fieldNames = new String[_TestUtil.nextInt(random(), 1, 200)];\n    for (int i = 0; i < fieldNames.length; ++i) {\n      String fieldName;\n      do {\n        fieldName = _TestUtil.randomSimpleString(random());\n      } while (\"id\".equals(fieldName));\n      fieldNames[i] = fieldName;\n    }\n    final int numDocs = _TestUtil.nextInt(random(), 10, 100);\n    @SuppressWarnings(\"unchecked\")\n    final Map<String, RandomTokenStream>[] fieldValues  = new Map[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      fieldValues[i] = new HashMap<String, RandomTokenStream>();\n      final int numFields = _TestUtil.nextInt(random(), 0, rarely() ? fieldNames.length : 5);\n      for (int j = 0; j < numFields; ++j) {\n        final String fieldName = fieldNames[(i+j*31) % fieldNames.length];\n        final int tokenStreamLen = _TestUtil.nextInt(random(), 1, rarely() ? 300 : 5);\n        fieldValues[i].put(fieldName, new RandomTokenStream(tokenStreamLen, sampleTerms, rarely()));\n      }\n    }\n\n    // index them\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      doc.add(new IntField(\"id\", i, Store.YES));\n      for (Map.Entry<String, RandomTokenStream> entry : fieldValues[i].entrySet()) {\n        doc.add(new Field(entry.getKey(), entry.getValue(), ft));\n      }\n      iw.addDocument(doc);\n    }\n\n    iw.commit();\n    // make sure the format can merge\n    iw.forceMerge(2);\n\n    // read term vectors\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    for (int i = 0; i < 100; ++i) {\n      final int docID = random().nextInt(numDocs);\n      final Map<String, RandomTokenStream> fvs = fieldValues[reader.document(docID).getField(\"id\").numericValue().intValue()];\n      final Fields fields = reader.getTermVectors(docID);\n      if (fvs.isEmpty()) {\n        assertNull(fields);\n      } else {\n        Set<String> fns = new HashSet<String>();\n        for (String field : fields) {\n          fns.add(field);\n        }\n        assertEquals(fields.size(), fns.size());\n        assertEquals(fvs.keySet(), fns);\n        for (String field : fields) {\n          final RandomTokenStream tk = fvs.get(field);\n          assert tk != null;\n          final Terms terms = fields.terms(field);\n          assertEquals(ft.storeTermVectorPositions(), terms.hasPositions());\n          assertEquals(ft.storeTermVectorOffsets(), terms.hasOffsets());\n          assertEquals(1, terms.getDocCount());\n          final TermsEnum termsEnum = terms.iterator(null);\n          while (termsEnum.next() != null) {\n            assertEquals(1, termsEnum.docFreq());\n            final DocsAndPositionsEnum docsAndPositionsEnum = termsEnum.docsAndPositions(null, null);\n            final DocsEnum docsEnum = docsAndPositionsEnum == null ? termsEnum.docs(null, null) : docsAndPositionsEnum;\n            if (ft.storeTermVectorOffsets() || ft.storeTermVectorPositions()) {\n              assertNotNull(docsAndPositionsEnum);\n            }\n            assertEquals(0, docsEnum.nextDoc());\n            if (terms.hasPositions() || terms.hasOffsets()) {\n              final int freq = docsEnum.freq();\n              assertTrue(freq >= 1);\n              if (docsAndPositionsEnum != null) {\n                for (int k = 0; k < freq; ++k) {\n                  final int position = docsAndPositionsEnum.nextPosition();\n                  final Set<Integer> indexes;\n                  if (terms.hasPositions()) {\n                    indexes = tk.positionToTerms.get(position);\n                    assertNotNull(tk.positionToTerms.keySet().toString() + \" does not contain \" + position, indexes);\n                  } else {\n                    indexes = tk.startOffsetToTerms.get(docsAndPositionsEnum.startOffset());\n                    assertNotNull(indexes);\n                  }\n                  if (terms.hasPositions()) {\n                    boolean foundPosition = false;\n                    for (int index : indexes) {\n                      if (new BytesRef(tk.terms[index]).equals(termsEnum.term()) && tk.positions[index] == position) {\n                        foundPosition = true;\n                        break;\n                      }\n                    }\n                    assertTrue(foundPosition);\n                  }\n                  if (terms.hasOffsets()) {\n                    boolean foundOffset = false;\n                    for (int index : indexes) {\n                      if (new BytesRef(tk.terms[index]).equals(termsEnum.term()) && tk.startOffsets[index] == docsAndPositionsEnum.startOffset() && tk.endOffsets[index] == docsAndPositionsEnum.endOffset()) {\n                        foundOffset = true;\n                        break;\n                      }\n                    }\n                    assertTrue(foundOffset);\n                  }\n                  if (terms.hasPayloads()) {\n                    boolean foundPayload = false;\n                    for (int index : indexes) {\n                      if (new BytesRef(tk.terms[index]).equals(termsEnum.term()) && equals(tk.payloads[index], docsAndPositionsEnum.getPayload())) {\n                        foundPayload = true;\n                        break;\n                      }\n                    }\n                    assertTrue(foundPayload);\n                  }\n                }\n              }\n            }\n            assertEquals(DocsEnum.NO_MORE_DOCS, docsEnum.nextDoc());\n          }\n        }\n      }\n    }\n    IOUtils.close(reader, iw, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fa6955ed1b1007ded1349ab72cea4555640432f","date":1359721908,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloadsOnVectors#testRandomVectors().mjava","sourceNew":null,"sourceOld":"  public void testRandomVectors() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    String[] sampleTerms = new String[RandomInts.randomIntBetween(random(), 20, 50)];\n    for (int i = 0; i < sampleTerms.length; ++i) {\n      sampleTerms[i] = _TestUtil.randomUnicodeString(random());\n    }\n    FieldType ft = randomFieldType();\n    // generate random documents and index them\n    final String[] fieldNames = new String[_TestUtil.nextInt(random(), 1, 200)];\n    for (int i = 0; i < fieldNames.length; ++i) {\n      String fieldName;\n      do {\n        fieldName = _TestUtil.randomSimpleString(random());\n      } while (\"id\".equals(fieldName));\n      fieldNames[i] = fieldName;\n    }\n    final int numDocs = _TestUtil.nextInt(random(), 10, 100);\n    @SuppressWarnings(\"unchecked\")\n    final Map<String, RandomTokenStream>[] fieldValues  = new Map[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      fieldValues[i] = new HashMap<String, RandomTokenStream>();\n      final int numFields = _TestUtil.nextInt(random(), 0, rarely() ? fieldNames.length : 5);\n      for (int j = 0; j < numFields; ++j) {\n        final String fieldName = fieldNames[(i+j*31) % fieldNames.length];\n        final int tokenStreamLen = _TestUtil.nextInt(random(), 1, rarely() ? 300 : 5);\n        fieldValues[i].put(fieldName, new RandomTokenStream(tokenStreamLen, sampleTerms, rarely()));\n      }\n    }\n\n    // index them\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      doc.add(new IntField(\"id\", i, Store.YES));\n      for (Map.Entry<String, RandomTokenStream> entry : fieldValues[i].entrySet()) {\n        doc.add(new Field(entry.getKey(), entry.getValue(), ft));\n      }\n      iw.addDocument(doc);\n    }\n\n    iw.commit();\n    // make sure the format can merge\n    iw.forceMerge(2);\n\n    // read term vectors\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    for (int i = 0; i < 100; ++i) {\n      final int docID = random().nextInt(numDocs);\n      final Map<String, RandomTokenStream> fvs = fieldValues[reader.document(docID).getField(\"id\").numericValue().intValue()];\n      final Fields fields = reader.getTermVectors(docID);\n      if (fvs.isEmpty()) {\n        assertNull(fields);\n      } else {\n        Set<String> fns = new HashSet<String>();\n        for (String field : fields) {\n          fns.add(field);\n        }\n        assertEquals(fields.size(), fns.size());\n        assertEquals(fvs.keySet(), fns);\n        for (String field : fields) {\n          final RandomTokenStream tk = fvs.get(field);\n          assert tk != null;\n          final Terms terms = fields.terms(field);\n          assertEquals(ft.storeTermVectorPositions(), terms.hasPositions());\n          assertEquals(ft.storeTermVectorOffsets(), terms.hasOffsets());\n          assertEquals(1, terms.getDocCount());\n          final TermsEnum termsEnum = terms.iterator(null);\n          while (termsEnum.next() != null) {\n            assertEquals(1, termsEnum.docFreq());\n            final DocsAndPositionsEnum docsAndPositionsEnum = termsEnum.docsAndPositions(null, null);\n            final DocsEnum docsEnum = docsAndPositionsEnum == null ? termsEnum.docs(null, null) : docsAndPositionsEnum;\n            if (ft.storeTermVectorOffsets() || ft.storeTermVectorPositions()) {\n              assertNotNull(docsAndPositionsEnum);\n            }\n            assertEquals(0, docsEnum.nextDoc());\n            if (terms.hasPositions() || terms.hasOffsets()) {\n              final int freq = docsEnum.freq();\n              assertTrue(freq >= 1);\n              if (docsAndPositionsEnum != null) {\n                for (int k = 0; k < freq; ++k) {\n                  final int position = docsAndPositionsEnum.nextPosition();\n                  final Set<Integer> indexes;\n                  if (terms.hasPositions()) {\n                    indexes = tk.positionToTerms.get(position);\n                    assertNotNull(tk.positionToTerms.keySet().toString() + \" does not contain \" + position, indexes);\n                  } else {\n                    indexes = tk.startOffsetToTerms.get(docsAndPositionsEnum.startOffset());\n                    assertNotNull(indexes);\n                  }\n                  if (terms.hasPositions()) {\n                    boolean foundPosition = false;\n                    for (int index : indexes) {\n                      if (new BytesRef(tk.terms[index]).equals(termsEnum.term()) && tk.positions[index] == position) {\n                        foundPosition = true;\n                        break;\n                      }\n                    }\n                    assertTrue(foundPosition);\n                  }\n                  if (terms.hasOffsets()) {\n                    boolean foundOffset = false;\n                    for (int index : indexes) {\n                      if (new BytesRef(tk.terms[index]).equals(termsEnum.term()) && tk.startOffsets[index] == docsAndPositionsEnum.startOffset() && tk.endOffsets[index] == docsAndPositionsEnum.endOffset()) {\n                        foundOffset = true;\n                        break;\n                      }\n                    }\n                    assertTrue(foundOffset);\n                  }\n                  if (terms.hasPayloads()) {\n                    boolean foundPayload = false;\n                    for (int index : indexes) {\n                      if (new BytesRef(tk.terms[index]).equals(termsEnum.term()) && equals(tk.payloads[index], docsAndPositionsEnum.getPayload())) {\n                        foundPayload = true;\n                        break;\n                      }\n                    }\n                    assertTrue(foundPayload);\n                  }\n                }\n              }\n            }\n            assertEquals(DocsEnum.NO_MORE_DOCS, docsEnum.nextDoc());\n          }\n        }\n      }\n    }\n    IOUtils.close(reader, iw, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0fa6955ed1b1007ded1349ab72cea4555640432f":["07155cdd910937cdf6877e48884d5782845c8b8b","f21ce13f410ee015e1ba14687ab4b8518ac52a11"],"eda61b1e90b490cc5837200e04c02639a0d272c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f21ce13f410ee015e1ba14687ab4b8518ac52a11":["eda61b1e90b490cc5837200e04c02639a0d272c7"],"07155cdd910937cdf6877e48884d5782845c8b8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eda61b1e90b490cc5837200e04c02639a0d272c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f21ce13f410ee015e1ba14687ab4b8518ac52a11"]},"commit2Childs":{"0fa6955ed1b1007ded1349ab72cea4555640432f":[],"eda61b1e90b490cc5837200e04c02639a0d272c7":["f21ce13f410ee015e1ba14687ab4b8518ac52a11","07155cdd910937cdf6877e48884d5782845c8b8b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eda61b1e90b490cc5837200e04c02639a0d272c7","07155cdd910937cdf6877e48884d5782845c8b8b"],"f21ce13f410ee015e1ba14687ab4b8518ac52a11":["0fa6955ed1b1007ded1349ab72cea4555640432f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"07155cdd910937cdf6877e48884d5782845c8b8b":["0fa6955ed1b1007ded1349ab72cea4555640432f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0fa6955ed1b1007ded1349ab72cea4555640432f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}