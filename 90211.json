{"path":"src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","commits":[{"id":"0feb10cdc38728e18bd11f49da14b22e9141bcdc","date":1201897345,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"/dev/null","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.UN_TOKENIZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, true, new WhitespaceAnalyzer(), true);\n    MyMergeScheduler ms = new MyMergeScheduler();\n    writer.setMergeScheduler(ms);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(writer.DISABLE_AUTO_FLUSH);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ms.sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"939b48b7116e2896b509c3448ad9e7178c9618fa","date":1202209973,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.UN_TOKENIZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, true, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    MyMergeScheduler ms = new MyMergeScheduler();\n    writer.setMergeScheduler(ms);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(writer.DISABLE_AUTO_FLUSH);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ms.sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.UN_TOKENIZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, true, new WhitespaceAnalyzer(), true);\n    MyMergeScheduler ms = new MyMergeScheduler();\n    writer.setMergeScheduler(ms);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(writer.DISABLE_AUTO_FLUSH);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ms.sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, true, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    MyMergeScheduler ms = new MyMergeScheduler();\n    writer.setMergeScheduler(ms);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(writer.DISABLE_AUTO_FLUSH);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ms.sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.UN_TOKENIZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, true, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    MyMergeScheduler ms = new MyMergeScheduler();\n    writer.setMergeScheduler(ms);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(writer.DISABLE_AUTO_FLUSH);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ms.sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    MyMergeScheduler ms = new MyMergeScheduler();\n    writer.setMergeScheduler(ms);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(writer.DISABLE_AUTO_FLUSH);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ms.sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, true, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    MyMergeScheduler ms = new MyMergeScheduler();\n    writer.setMergeScheduler(ms);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(writer.DISABLE_AUTO_FLUSH);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ms.sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    MyMergeScheduler ms = new MyMergeScheduler();\n    writer.setMergeScheduler(ms);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(writer.DISABLE_AUTO_FLUSH);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ms.sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    MyMergeScheduler ms = new MyMergeScheduler();\n    writer.setMergeScheduler(ms);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(writer.DISABLE_AUTO_FLUSH);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ms.sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    MyMergeScheduler ms = new MyMergeScheduler();\n    writer.setMergeScheduler(ms);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(writer.DISABLE_AUTO_FLUSH);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ms.sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    MyMergeScheduler ms = new MyMergeScheduler();\n    writer.setMergeScheduler(ms);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(writer.DISABLE_AUTO_FLUSH);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ms.sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    MyMergeScheduler ms = new MyMergeScheduler();\n    writer.setMergeScheduler(ms);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ms.sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    MyMergeScheduler ms = new MyMergeScheduler();\n    writer.setMergeScheduler(ms);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(writer.DISABLE_AUTO_FLUSH);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ms.sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    MyMergeScheduler ms = new MyMergeScheduler();\n    writer.setMergeScheduler(ms);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ms.sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    MyMergeScheduler ms = new MyMergeScheduler();\n    writer.setMergeScheduler(ms);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ms.sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    MyMergeScheduler ms = new MyMergeScheduler();\n    writer.setMergeScheduler(ms);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ms.sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["939b48b7116e2896b509c3448ad9e7178c9618fa"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0feb10cdc38728e18bd11f49da14b22e9141bcdc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"939b48b7116e2896b509c3448ad9e7178c9618fa":["0feb10cdc38728e18bd11f49da14b22e9141bcdc"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0feb10cdc38728e18bd11f49da14b22e9141bcdc":["939b48b7116e2896b509c3448ad9e7178c9618fa"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0feb10cdc38728e18bd11f49da14b22e9141bcdc"],"939b48b7116e2896b509c3448ad9e7178c9618fa":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}