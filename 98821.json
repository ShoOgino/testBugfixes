{"path":"solr/core/src/java/org/apache/solr/search/DocSetBase[DocSet]#getTopFilter().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase[DocSet]#getTopFilter().mjava","pathOld":"solr/src/java/org/apache/solr/search/DocSetBase[DocSet]#getTopFilter().mjava","sourceNew":"  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n        IndexReader reader = context.reader;\n\n        if (context.isTopLevel) {\n          return bs;\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() throws IOException {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n        };\n      }\n    };\n  }\n\n","sourceOld":"  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n        IndexReader reader = context.reader;\n\n        if (context.isTopLevel) {\n          return bs;\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() throws IOException {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase[DocSet]#getTopFilter().mjava","pathOld":"solr/src/java/org/apache/solr/search/DocSetBase[DocSet]#getTopFilter().mjava","sourceNew":"  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n        IndexReader reader = context.reader;\n\n        if (context.isTopLevel) {\n          return bs;\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() throws IOException {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n        };\n      }\n    };\n  }\n\n","sourceOld":"  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n        IndexReader reader = context.reader;\n\n        if (context.isTopLevel) {\n          return bs;\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() throws IOException {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase[DocSet]#getTopFilter().mjava","pathOld":"solr/src/java/org/apache/solr/search/DocSetBase[DocSet]#getTopFilter().mjava","sourceNew":"  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n        IndexReader reader = context.reader;\n\n        if (context.isTopLevel) {\n          return bs;\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() throws IOException {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n        };\n      }\n    };\n  }\n\n","sourceOld":"  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n        IndexReader reader = context.reader;\n\n        if (context.isTopLevel) {\n          return bs;\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() throws IOException {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase[DocSet]#getTopFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase[DocSet]#getTopFilter().mjava","sourceNew":"  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n        IndexReader reader = context.reader;\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() throws IOException {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() throws IOException {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs);\n      }\n    };\n  }\n\n","sourceOld":"  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n        IndexReader reader = context.reader;\n\n        if (context.isTopLevel) {\n          return bs;\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() throws IOException {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96d207426bd26fa5c1014e26d21d87603aea68b7","date":1327944562,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase[DocSet]#getTopFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase[DocSet]#getTopFilter().mjava","sourceNew":"  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n        IndexReader reader = context.reader();\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() throws IOException {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() throws IOException {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs);\n      }\n    };\n  }\n\n","sourceOld":"  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n        IndexReader reader = context.reader;\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() throws IOException {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() throws IOException {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase[DocSet]#getTopFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase[DocSet]#getTopFilter().mjava","sourceNew":"  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n        IndexReader reader = context.reader();\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() throws IOException {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() throws IOException {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs);\n      }\n    };\n  }\n\n","sourceOld":"  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n        IndexReader reader = context.reader;\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() throws IOException {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() throws IOException {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8e5663809fccfda938d8d46f0106a5301cdd5cf0","date":1328146670,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase[DocSet]#getTopFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase[DocSet]#getTopFilter().mjava","sourceNew":"  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        AtomicReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() throws IOException {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() throws IOException {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","sourceOld":"  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n        IndexReader reader = context.reader();\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() throws IOException {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() throws IOException {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"22e7d2e6a853c3178eccc356ffa07e7ebca55cdd","date":1332689453,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase[DocSet]#getTopFilter().mjava","sourceNew":"  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        AtomicReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() throws IOException {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() throws IOException {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","sourceOld":"  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        AtomicReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() throws IOException {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() throws IOException {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"8e5663809fccfda938d8d46f0106a5301cdd5cf0":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96d207426bd26fa5c1014e26d21d87603aea68b7":["6620df8541b174097b1133a4fc370adb2e570524"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"22e7d2e6a853c3178eccc356ffa07e7ebca55cdd":["8e5663809fccfda938d8d46f0106a5301cdd5cf0"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["6620df8541b174097b1133a4fc370adb2e570524","96d207426bd26fa5c1014e26d21d87603aea68b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22e7d2e6a853c3178eccc356ffa07e7ebca55cdd"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["96d207426bd26fa5c1014e26d21d87603aea68b7","5cab9a86bd67202d20b6adc463008c8e982b070a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["6620df8541b174097b1133a4fc370adb2e570524"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"8e5663809fccfda938d8d46f0106a5301cdd5cf0":["22e7d2e6a853c3178eccc356ffa07e7ebca55cdd"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"22e7d2e6a853c3178eccc356ffa07e7ebca55cdd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["8e5663809fccfda938d8d46f0106a5301cdd5cf0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}