{"path":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#addToMap(PhraseQuery,Term[],int[],int,Map[String,QueryPhraseMap],int).mjava","commits":[{"id":"7327eec6fde8afb35c01f6234cb50c42a7c737d3","date":1374238360,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#addToMap(PhraseQuery,Term[],int[],int,Map[String,QueryPhraseMap],int).mjava","pathOld":"/dev/null","sourceNew":"    private void addToMap(PhraseQuery pq, Term[] terms, int[] positions, int i, Map<String, QueryPhraseMap> map, int slop) {\n      int numTermsAtSamePosition = numTermsAtSamePosition(positions, i);\n      for (int j = 0; j < numTermsAtSamePosition; ++j) {\n        QueryPhraseMap qpm = getOrNewMap(map, terms[i + j].text());\n        if (i + numTermsAtSamePosition == terms.length) {\n          qpm.markTerminal(pq.getSlop(), pq.getBoost(), uniquePositions(positions));\n        } else {\n          addToMap(pq, terms, positions, i + numTermsAtSamePosition, qpm.subMap, slop);\n        }\n      }\n      if (slop > 2 && i + numTermsAtSamePosition < terms.length) {\n        Term[] otherTerms = Arrays.copyOf(terms, terms.length);\n        int[] otherPositions = Arrays.copyOf(positions, positions.length);\n        final int nextTermAtSamePosition = numTermsAtSamePosition(positions, i + numTermsAtSamePosition);\n        System.arraycopy(terms, i + numTermsAtSamePosition, otherTerms, i, nextTermAtSamePosition);\n        System.arraycopy(positions, i + numTermsAtSamePosition, otherPositions, i, nextTermAtSamePosition);\n        System.arraycopy(terms, i, otherTerms, i + nextTermAtSamePosition, numTermsAtSamePosition);\n        System.arraycopy(positions, i, otherPositions, i + nextTermAtSamePosition, numTermsAtSamePosition);\n        addToMap(pq, otherTerms, otherPositions, i, map, slop - 2);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#addToMap(PhraseQuery,Term[],int[],int,Map[String,QueryPhraseMap],int).mjava","pathOld":"/dev/null","sourceNew":"    private void addToMap(PhraseQuery pq, Term[] terms, int[] positions, int i, Map<String, QueryPhraseMap> map, int slop) {\n      int numTermsAtSamePosition = numTermsAtSamePosition(positions, i);\n      for (int j = 0; j < numTermsAtSamePosition; ++j) {\n        QueryPhraseMap qpm = getOrNewMap(map, terms[i + j].text());\n        if (i + numTermsAtSamePosition == terms.length) {\n          qpm.markTerminal(pq.getSlop(), pq.getBoost(), uniquePositions(positions));\n        } else {\n          addToMap(pq, terms, positions, i + numTermsAtSamePosition, qpm.subMap, slop);\n        }\n      }\n      if (slop > 2 && i + numTermsAtSamePosition < terms.length) {\n        Term[] otherTerms = Arrays.copyOf(terms, terms.length);\n        int[] otherPositions = Arrays.copyOf(positions, positions.length);\n        final int nextTermAtSamePosition = numTermsAtSamePosition(positions, i + numTermsAtSamePosition);\n        System.arraycopy(terms, i + numTermsAtSamePosition, otherTerms, i, nextTermAtSamePosition);\n        System.arraycopy(positions, i + numTermsAtSamePosition, otherPositions, i, nextTermAtSamePosition);\n        System.arraycopy(terms, i, otherTerms, i + nextTermAtSamePosition, numTermsAtSamePosition);\n        System.arraycopy(positions, i, otherPositions, i + nextTermAtSamePosition, numTermsAtSamePosition);\n        addToMap(pq, otherTerms, otherPositions, i, map, slop - 2);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08","date":1378464767,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#addToMap(PhraseQuery,Term[],int[],int,Map[String,QueryPhraseMap],int).mjava","sourceNew":null,"sourceOld":"    private void addToMap(PhraseQuery pq, Term[] terms, int[] positions, int i, Map<String, QueryPhraseMap> map, int slop) {\n      int numTermsAtSamePosition = numTermsAtSamePosition(positions, i);\n      for (int j = 0; j < numTermsAtSamePosition; ++j) {\n        QueryPhraseMap qpm = getOrNewMap(map, terms[i + j].text());\n        if (i + numTermsAtSamePosition == terms.length) {\n          qpm.markTerminal(pq.getSlop(), pq.getBoost(), uniquePositions(positions));\n        } else {\n          addToMap(pq, terms, positions, i + numTermsAtSamePosition, qpm.subMap, slop);\n        }\n      }\n      if (slop > 2 && i + numTermsAtSamePosition < terms.length) {\n        Term[] otherTerms = Arrays.copyOf(terms, terms.length);\n        int[] otherPositions = Arrays.copyOf(positions, positions.length);\n        final int nextTermAtSamePosition = numTermsAtSamePosition(positions, i + numTermsAtSamePosition);\n        System.arraycopy(terms, i + numTermsAtSamePosition, otherTerms, i, nextTermAtSamePosition);\n        System.arraycopy(positions, i + numTermsAtSamePosition, otherPositions, i, nextTermAtSamePosition);\n        System.arraycopy(terms, i, otherTerms, i + nextTermAtSamePosition, numTermsAtSamePosition);\n        System.arraycopy(positions, i, otherPositions, i + nextTermAtSamePosition, numTermsAtSamePosition);\n        addToMap(pq, otherTerms, otherPositions, i, map, slop - 2);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7327eec6fde8afb35c01f6234cb50c42a7c737d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08":["7327eec6fde8afb35c01f6234cb50c42a7c737d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","7327eec6fde8afb35c01f6234cb50c42a7c737d3"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"7327eec6fde8afb35c01f6234cb50c42a7c737d3":["cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08"],"cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}