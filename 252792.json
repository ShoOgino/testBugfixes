{"path":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations().mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","sourceNew":"  /**\n   * Take in a JSON command set and execute them. It tries to capture as many errors\n   * as possible instead of failing at the first error it encounters\n   * @return List of errors. If the List is empty then the operation was successful.\n   */\n  public List performOperations() throws Exception {\n    List<CommandOperation> ops = req.getCommands(false);\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (schema instanceof ManagedIndexSchema && schema.isMutable()) {\n      return doOperations(ops);\n    } else {\n      return singletonList(singletonMap(CommandOperation.ERR_MSGS, \"schema is not editable\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Take in a JSON command set and execute them. It tries to capture as many errors\n   * as possible instead of failing at the first error it encounters\n   * @param reader The input as a Reader\n   * @return List of errors. If the List is empty then the operation was successful.\n   */\n  public List performOperations(Reader reader) throws Exception {\n    List<CommandOperation> ops;\n    try {\n      ops = CommandOperation.parse(reader);\n    } catch (Exception e) {\n      String msg = \"Error parsing schema operations \";\n      log.warn(msg, e);\n      return Collections.singletonList(singletonMap(CommandOperation.ERR_MSGS, msg + \":\" + e.getMessage()));\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (schema instanceof ManagedIndexSchema && schema.isMutable()) {\n      return doOperations(ops);\n    } else {\n      return singletonList(singletonMap(CommandOperation.ERR_MSGS, \"schema is not editable\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","sourceNew":"  /**\n   * Take in a JSON command set and execute them. It tries to capture as many errors\n   * as possible instead of failing at the first error it encounters\n   * @return List of errors. If the List is empty then the operation was successful.\n   */\n  public List performOperations() throws Exception {\n    List<CommandOperation> ops = req.getCommands(false);\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (schema instanceof ManagedIndexSchema && schema.isMutable()) {\n      return doOperations(ops);\n    } else {\n      return singletonList(singletonMap(CommandOperation.ERR_MSGS, \"schema is not editable\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Take in a JSON command set and execute them. It tries to capture as many errors\n   * as possible instead of failing at the first error it encounters\n   * @param reader The input as a Reader\n   * @return List of errors. If the List is empty then the operation was successful.\n   */\n  public List performOperations(Reader reader) throws Exception {\n    List<CommandOperation> ops;\n    try {\n      ops = CommandOperation.parse(reader);\n    } catch (Exception e) {\n      String msg = \"Error parsing schema operations \";\n      log.warn(msg, e);\n      return Collections.singletonList(singletonMap(CommandOperation.ERR_MSGS, msg + \":\" + e.getMessage()));\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (schema instanceof ManagedIndexSchema && schema.isMutable()) {\n      return doOperations(ops);\n    } else {\n      return singletonList(singletonMap(CommandOperation.ERR_MSGS, \"schema is not editable\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations().mjava","sourceNew":"  /**\n   * Take in a JSON command set and execute them. It tries to capture as many errors\n   * as possible instead of failing at the first error it encounters\n   * @return List of errors. If the List is empty then the operation was successful.\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  public List performOperations() throws Exception {\n    List<CommandOperation> ops = req.getCommands(false);\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (schema instanceof ManagedIndexSchema && schema.isMutable()) {\n      return doOperations(ops);\n    } else {\n      return singletonList(singletonMap(CommandOperation.ERR_MSGS, \"schema is not editable\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Take in a JSON command set and execute them. It tries to capture as many errors\n   * as possible instead of failing at the first error it encounters\n   * @return List of errors. If the List is empty then the operation was successful.\n   */\n  public List performOperations() throws Exception {\n    List<CommandOperation> ops = req.getCommands(false);\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (schema instanceof ManagedIndexSchema && schema.isMutable()) {\n      return doOperations(ops);\n    } else {\n      return singletonList(singletonMap(CommandOperation.ERR_MSGS, \"schema is not editable\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","06a8891f085f71282bb3ece1b1732b68f07813a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}