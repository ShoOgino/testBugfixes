{"path":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/Fetcher#Fetcher(int,DocumentStorage,LinkStorage,HostManager).mjava","commits":[{"id":"12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e","date":1022957716,"type":1,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/Fetcher#Fetcher(int,DocumentStorage,LinkStorage,HostManager).mjava","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/Fetcher#Fetcher(int,DocumentStorage,HostManager).mjava","sourceNew":"    /**\n     * initializes the fetcher with the given number of threads in the thread\n     * pool and a document storage.\n     *\n     * @param maxThreads   the number of threads in the ThreadPool\n     * @param storage      the storage where all documents are stored\n     * @param hostManager  the host manager\n     */\n    public Fetcher(int maxThreads, DocumentStorage docStorage, LinkStorage linkStorage, HostManager hostManager)\n    {\n        this.storage = storage;\n        FetcherTask.setDocStorage(docStorage);\n        FetcherTask.setLinkStorage(linkStorage);\n        fetcherPool = new ThreadPool(maxThreads, new FetcherThreadFactory(hostManager));\n        fetcherPool.setQueue(new FetcherTaskQueue());\n        docsRead = 0;\n        this.hostManager = hostManager;\n    }\n\n","sourceOld":"    /**\n     * initializes the fetcher with the given number of threads in the thread\n     * pool and a document storage.\n     *\n     * @param maxThreads   the number of threads in the ThreadPool\n     * @param storage      the storage where all documents are stored\n     * @param hostManager  the host manager\n     */\n    public Fetcher(int maxThreads, DocumentStorage storage, HostManager hostManager)\n    {\n        this.storage = storage;\n        FetcherTask.setStorage(storage);\n        fetcherPool = new ThreadPool(maxThreads, new FetcherThreadFactory(hostManager));\n        fetcherPool.setQueue(new FetcherTaskQueue());\n        docsRead = 0;\n        this.hostManager = hostManager;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e56132d241479de027bc013a7094c731e7bb581e","date":1024361110,"type":3,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/Fetcher#Fetcher(int,DocumentStorage,LinkStorage,HostManager).mjava","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/Fetcher#Fetcher(int,DocumentStorage,LinkStorage,HostManager).mjava","sourceNew":"    /**\n     * initializes the fetcher with the given number of threads in the thread\n     * pool and a document storage.\n     *\n     * @param maxThreads   the number of threads in the ThreadPool\n     * @param storage      the storage where all documents are stored\n     * @param hostManager  the host manager\n     */\n    public Fetcher(int maxThreads, DocumentStorage docStorage, LinkStorage linkStorage, HostManager hostManager)\n    {\n        this.storage = storage;\n        this.linkStorage = linkStorage;\n        FetcherTask.setDocStorage(docStorage);\n        FetcherTask.setLinkStorage(linkStorage);\n        fetcherPool = new ThreadPool(maxThreads, new FetcherThreadFactory(hostManager));\n        fetcherPool.setQueue(new FetcherTaskQueue());\n        docsRead = 0;\n        this.hostManager = hostManager;\n    }\n\n","sourceOld":"    /**\n     * initializes the fetcher with the given number of threads in the thread\n     * pool and a document storage.\n     *\n     * @param maxThreads   the number of threads in the ThreadPool\n     * @param storage      the storage where all documents are stored\n     * @param hostManager  the host manager\n     */\n    public Fetcher(int maxThreads, DocumentStorage docStorage, LinkStorage linkStorage, HostManager hostManager)\n    {\n        this.storage = storage;\n        FetcherTask.setDocStorage(docStorage);\n        FetcherTask.setLinkStorage(linkStorage);\n        fetcherPool = new ThreadPool(maxThreads, new FetcherThreadFactory(hostManager));\n        fetcherPool.setQueue(new FetcherTaskQueue());\n        docsRead = 0;\n        this.hostManager = hostManager;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57508c976d31cbef136cd97457e76d36d6330069","date":1035299011,"type":3,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/Fetcher#Fetcher(int,DocumentStorage,LinkStorage,HostManager).mjava","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/Fetcher#Fetcher(int,DocumentStorage,LinkStorage,HostManager).mjava","sourceNew":"    /**\n     * initializes the fetcher with the given number of threads in the thread\n     * pool and a document storage.\n     *\n     * @param maxThreads   the number of threads in the ThreadPool\n     * @param storage      the storage where all documents are stored\n     * @param hostManager  the host manager\n     */\n    public Fetcher(int maxThreads, DocumentStorage docStorage, LinkStorage linkStorage, HostManager hostManager)\n    {\n        this.storage = storage;\n        this.linkStorage = linkStorage;\n        FetcherTask.setDocStorage(docStorage);\n        FetcherTask.setLinkStorage(linkStorage);\n        fetcherPool = new ThreadPool(maxThreads, new FetcherThreadFactory(hostManager));\n        fetcherPool.setQueue(new FetcherTaskQueue(hostManager));\n        docsRead = 0;\n        this.hostManager = hostManager;\n    }\n\n","sourceOld":"    /**\n     * initializes the fetcher with the given number of threads in the thread\n     * pool and a document storage.\n     *\n     * @param maxThreads   the number of threads in the ThreadPool\n     * @param storage      the storage where all documents are stored\n     * @param hostManager  the host manager\n     */\n    public Fetcher(int maxThreads, DocumentStorage docStorage, LinkStorage linkStorage, HostManager hostManager)\n    {\n        this.storage = storage;\n        this.linkStorage = linkStorage;\n        FetcherTask.setDocStorage(docStorage);\n        FetcherTask.setLinkStorage(linkStorage);\n        fetcherPool = new ThreadPool(maxThreads, new FetcherThreadFactory(hostManager));\n        fetcherPool.setQueue(new FetcherTaskQueue());\n        docsRead = 0;\n        this.hostManager = hostManager;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/Fetcher#Fetcher(int,DocumentStorage,LinkStorage,HostManager).mjava","sourceNew":null,"sourceOld":"    /**\n     * initializes the fetcher with the given number of threads in the thread\n     * pool and a document storage.\n     *\n     * @param maxThreads   the number of threads in the ThreadPool\n     * @param storage      the storage where all documents are stored\n     * @param hostManager  the host manager\n     */\n    public Fetcher(int maxThreads, DocumentStorage docStorage, LinkStorage linkStorage, HostManager hostManager)\n    {\n        this.storage = storage;\n        this.linkStorage = linkStorage;\n        FetcherTask.setDocStorage(docStorage);\n        FetcherTask.setLinkStorage(linkStorage);\n        fetcherPool = new ThreadPool(maxThreads, new FetcherThreadFactory(hostManager));\n        fetcherPool.setQueue(new FetcherTaskQueue(hostManager));\n        docsRead = 0;\n        this.hostManager = hostManager;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e56132d241479de027bc013a7094c731e7bb581e":["12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e"],"12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"57508c976d31cbef136cd97457e76d36d6330069":["e56132d241479de027bc013a7094c731e7bb581e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["57508c976d31cbef136cd97457e76d36d6330069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"e56132d241479de027bc013a7094c731e7bb581e":["57508c976d31cbef136cd97457e76d36d6330069"],"12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e":["e56132d241479de027bc013a7094c731e7bb581e"],"57508c976d31cbef136cd97457e76d36d6330069":["afc16d717d9ed1a8e45371668ca6de674164d624"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}