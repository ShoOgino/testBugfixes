{"path":"lucene/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","commits":[{"id":"4963c64955c4dcac8d4067aacd07a97e9308c482","date":1300558381,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","pathOld":"/dev/null","sourceNew":"  // this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly\n  public void testRawIndexInputRead() throws IOException {\n    final RAMDirectory dir = new RAMDirectory();\n    final IndexOutput os = dir.createOutput(\"foo\");\n    os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n    os.close();\n    final IndexInput is = dir.openInput(\"foo\");\n    checkReads(is);\n    is.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","pathOld":"/dev/null","sourceNew":"  // this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly\n  public void testRawIndexInputRead() throws IOException {\n    final RAMDirectory dir = new RAMDirectory();\n    final IndexOutput os = dir.createOutput(\"foo\");\n    os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n    os.close();\n    final IndexInput is = dir.openInput(\"foo\");\n    checkReads(is);\n    is.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","pathOld":"/dev/null","sourceNew":"  // this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly\n  public void testRawIndexInputRead() throws IOException {\n    final RAMDirectory dir = new RAMDirectory();\n    final IndexOutput os = dir.createOutput(\"foo\");\n    os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n    os.close();\n    final IndexInput is = dir.openInput(\"foo\");\n    checkReads(is);\n    is.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","sourceNew":"  // this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly\n  public void testRawIndexInputRead() throws IOException {\n    final RAMDirectory dir = new RAMDirectory();\n    final IndexOutput os = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n    os.close();\n    final IndexInput is = dir.openInput(\"foo\", IOContext.DEFAULT);\n    checkReads(is);\n    is.close();\n    dir.close();\n  }\n\n","sourceOld":"  // this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly\n  public void testRawIndexInputRead() throws IOException {\n    final RAMDirectory dir = new RAMDirectory();\n    final IndexOutput os = dir.createOutput(\"foo\");\n    os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n    os.close();\n    final IndexInput is = dir.openInput(\"foo\");\n    checkReads(is);\n    is.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","sourceNew":"  // this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly\n  public void testRawIndexInputRead() throws IOException {\n    final RAMDirectory dir = new RAMDirectory();\n    final IndexOutput os = dir.createOutput(\"foo\", newIOContext(random));\n    os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n    os.close();\n    final IndexInput is = dir.openInput(\"foo\", newIOContext(random));\n    checkReads(is);\n    is.close();\n    dir.close();\n  }\n\n","sourceOld":"  // this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly\n  public void testRawIndexInputRead() throws IOException {\n    final RAMDirectory dir = new RAMDirectory();\n    final IndexOutput os = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n    os.close();\n    final IndexInput is = dir.openInput(\"foo\", IOContext.DEFAULT);\n    checkReads(is);\n    is.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["d084f7f1be0a54dfb8f954cbb35fb9b045f9a79d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","sourceNew":"  // this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly\n  public void testRawIndexInputRead() throws IOException {\n    final RAMDirectory dir = new RAMDirectory();\n    final IndexOutput os = dir.createOutput(\"foo\", newIOContext(random));\n    os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n    os.close();\n    final IndexInput is = dir.openInput(\"foo\", newIOContext(random));\n    checkReads(is);\n    is.close();\n    dir.close();\n  }\n\n","sourceOld":"  // this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly\n  public void testRawIndexInputRead() throws IOException {\n    final RAMDirectory dir = new RAMDirectory();\n    final IndexOutput os = dir.createOutput(\"foo\");\n    os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n    os.close();\n    final IndexInput is = dir.openInput(\"foo\");\n    checkReads(is);\n    is.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","sourceNew":"  // this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly\n  public void testRawIndexInputRead() throws IOException {\n    final RAMDirectory dir = new RAMDirectory();\n    final IndexOutput os = dir.createOutput(\"foo\", newIOContext(random));\n    os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n    os.close();\n    final IndexInput is = dir.openInput(\"foo\", newIOContext(random));\n    checkReads(is);\n    is.close();\n    dir.close();\n  }\n\n","sourceOld":"  // this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly\n  public void testRawIndexInputRead() throws IOException {\n    final RAMDirectory dir = new RAMDirectory();\n    final IndexOutput os = dir.createOutput(\"foo\");\n    os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n    os.close();\n    final IndexInput is = dir.openInput(\"foo\");\n    checkReads(is);\n    is.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","sourceNew":"  // this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly\n  public void testRawIndexInputRead() throws IOException {\n    final RAMDirectory dir = new RAMDirectory();\n    final IndexOutput os = dir.createOutput(\"foo\", newIOContext(random));\n    os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n    os.close();\n    final IndexInput is = dir.openInput(\"foo\", newIOContext(random));\n    checkReads(is);\n    is.close();\n    dir.close();\n  }\n\n","sourceOld":"  // this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly\n  public void testRawIndexInputRead() throws IOException {\n    final RAMDirectory dir = new RAMDirectory();\n    final IndexOutput os = dir.createOutput(\"foo\", newIOContext(random));\n    os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n    os.close();\n    final IndexInput is = dir.openInput(\"foo\", newIOContext(random));\n    checkReads(is);\n    is.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4963c64955c4dcac8d4067aacd07a97e9308c482":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4963c64955c4dcac8d4067aacd07a97e9308c482"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4963c64955c4dcac8d4067aacd07a97e9308c482"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["4963c64955c4dcac8d4067aacd07a97e9308c482"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["4963c64955c4dcac8d4067aacd07a97e9308c482","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["4963c64955c4dcac8d4067aacd07a97e9308c482","b6f9be74ca7baaef11857ad002cad40419979516"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"4963c64955c4dcac8d4067aacd07a97e9308c482":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4963c64955c4dcac8d4067aacd07a97e9308c482","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"b6f9be74ca7baaef11857ad002cad40419979516":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}