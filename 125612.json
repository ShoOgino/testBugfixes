{"path":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#addSnapshot(NamedList,Snapshot,boolean).mjava","commits":[{"id":"2f7df713a0f1e310d18dd8da91c89a07a13f86f8","date":1483441921,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#addSnapshot(NamedList,Snapshot,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // some snapshots represent time in ns, other snapshots represent raw values (eg. chunk size)\n  static void addSnapshot(NamedList response, Snapshot snapshot, boolean ms) {\n    response.add((ms ? MIN_MS: MIN), nsToMs(ms, snapshot.getMin()));\n    response.add((ms ? MAX_MS: MAX), nsToMs(ms, snapshot.getMax()));\n    response.add((ms ? MEAN_MS : MEAN), nsToMs(ms, snapshot.getMean()));\n    response.add((ms ? MEDIAN_MS: MEDIAN), nsToMs(ms, snapshot.getMedian()));\n    response.add((ms ? STDDEV_MS: STDDEV), nsToMs(ms, snapshot.getStdDev()));\n    response.add((ms ? P75_MS: P75), nsToMs(ms, snapshot.get75thPercentile()));\n    response.add((ms ? P95_MS: P95), nsToMs(ms, snapshot.get95thPercentile()));\n    response.add((ms ? P99_MS: P99), nsToMs(ms, snapshot.get99thPercentile()));\n    response.add((ms ? P999_MS: P999), nsToMs(ms, snapshot.get999thPercentile()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#addSnapshot(NamedList,Snapshot,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // some snapshots represent time in ns, other snapshots represent raw values (eg. chunk size)\n  static void addSnapshot(NamedList response, Snapshot snapshot, boolean ms) {\n    response.add((ms ? MIN_MS: MIN), nsToMs(ms, snapshot.getMin()));\n    response.add((ms ? MAX_MS: MAX), nsToMs(ms, snapshot.getMax()));\n    response.add((ms ? MEAN_MS : MEAN), nsToMs(ms, snapshot.getMean()));\n    response.add((ms ? MEDIAN_MS: MEDIAN), nsToMs(ms, snapshot.getMedian()));\n    response.add((ms ? STDDEV_MS: STDDEV), nsToMs(ms, snapshot.getStdDev()));\n    response.add((ms ? P75_MS: P75), nsToMs(ms, snapshot.get75thPercentile()));\n    response.add((ms ? P95_MS: P95), nsToMs(ms, snapshot.get95thPercentile()));\n    response.add((ms ? P99_MS: P99), nsToMs(ms, snapshot.get99thPercentile()));\n    response.add((ms ? P999_MS: P999), nsToMs(ms, snapshot.get999thPercentile()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#addSnapshot(NamedList,Snapshot,boolean).mjava","sourceNew":null,"sourceOld":"  // some snapshots represent time in ns, other snapshots represent raw values (eg. chunk size)\n  static void addSnapshot(NamedList response, Snapshot snapshot, boolean ms) {\n    response.add((ms ? MIN_MS: MIN), nsToMs(ms, snapshot.getMin()));\n    response.add((ms ? MAX_MS: MAX), nsToMs(ms, snapshot.getMax()));\n    response.add((ms ? MEAN_MS : MEAN), nsToMs(ms, snapshot.getMean()));\n    response.add((ms ? MEDIAN_MS: MEDIAN), nsToMs(ms, snapshot.getMedian()));\n    response.add((ms ? STDDEV_MS: STDDEV), nsToMs(ms, snapshot.getStdDev()));\n    response.add((ms ? P75_MS: P75), nsToMs(ms, snapshot.get75thPercentile()));\n    response.add((ms ? P95_MS: P95), nsToMs(ms, snapshot.get95thPercentile()));\n    response.add((ms ? P99_MS: P99), nsToMs(ms, snapshot.get99thPercentile()));\n    response.add((ms ? P999_MS: P999), nsToMs(ms, snapshot.get999thPercentile()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"2f7df713a0f1e310d18dd8da91c89a07a13f86f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2f7df713a0f1e310d18dd8da91c89a07a13f86f8"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2f7df713a0f1e310d18dd8da91c89a07a13f86f8":["073f1aa70444ec64f3e216816af2a3b43fa38fe7","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}