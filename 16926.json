{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#waitForElapsed(String,long,Map[String,Long]).mjava","commits":[{"id":"3955a9511098c96b652734b2f2d4160d07cc2d63","date":1504780677,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#waitForElapsed(String,long,Map[String,Long]).mjava","pathOld":"/dev/null","sourceNew":"  private boolean waitForElapsed(String name, long now, Map<String, Long> lastEventMap) {\n    Long lastTime = lastEventMap.computeIfAbsent(name, s -> now);\n    long elapsed = TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS);\n    log.info(\"name=\" + name + \", lastTime=\" + lastTime + \", elapsed=\" + elapsed);\n    if (TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS) < getWaitForSecond()) {\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f2ba631afa835c2dfd14555cf19ae7e73663c17","date":1505762504,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#waitForElapsed(String,long,Map[String,Long]).mjava","sourceNew":null,"sourceOld":"  private boolean waitForElapsed(String name, long now, Map<String, Long> lastEventMap) {\n    Long lastTime = lastEventMap.computeIfAbsent(name, s -> now);\n    long elapsed = TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS);\n    log.info(\"name=\" + name + \", lastTime=\" + lastTime + \", elapsed=\" + elapsed);\n    if (TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS) < getWaitForSecond()) {\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3f354f2175f861ee625bb3c9572d53b77cd8545","date":1508405819,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#waitForElapsed(String,long,Map[String,Long]).mjava","pathOld":"/dev/null","sourceNew":"  private boolean waitForElapsed(String name, long now, Map<String, Long> lastEventMap) {\n    Long lastTime = lastEventMap.computeIfAbsent(name, s -> now);\n    long elapsed = TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS);\n    log.info(\"name=\" + name + \", lastTime=\" + lastTime + \", elapsed=\" + elapsed);\n    if (TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS) < getWaitForSecond()) {\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d7cf463e12b13965d63f133adc46a1c673d0c4e","date":1509636749,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#waitForElapsed(String,long,Map[String,Long]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#waitForElapsed(String,long,Map[String,Long]).mjava","sourceNew":"  private boolean waitForElapsed(String name, long now, Map<String, Long> lastEventMap) {\n    Long lastTime = lastEventMap.computeIfAbsent(name, s -> now);\n    long elapsed = TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS);\n    log.debug(\"name=\" + name + \", lastTime=\" + lastTime + \", elapsed=\" + elapsed);\n    if (TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS) < getWaitForSecond()) {\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean waitForElapsed(String name, long now, Map<String, Long> lastEventMap) {\n    Long lastTime = lastEventMap.computeIfAbsent(name, s -> now);\n    long elapsed = TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS);\n    log.info(\"name=\" + name + \", lastTime=\" + lastTime + \", elapsed=\" + elapsed);\n    if (TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS) < getWaitForSecond()) {\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#waitForElapsed(String,long,Map[String,Long]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#waitForElapsed(String,long,Map[String,Long]).mjava","sourceNew":"  private boolean waitForElapsed(String name, long now, Map<String, Long> lastEventMap) {\n    Long lastTime = lastEventMap.computeIfAbsent(name, s -> now);\n    long elapsed = TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS);\n    log.debug(\"name=\" + name + \", lastTime=\" + lastTime + \", elapsed=\" + elapsed);\n    if (TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS) < getWaitForSecond()) {\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean waitForElapsed(String name, long now, Map<String, Long> lastEventMap) {\n    Long lastTime = lastEventMap.computeIfAbsent(name, s -> now);\n    long elapsed = TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS);\n    log.info(\"name=\" + name + \", lastTime=\" + lastTime + \", elapsed=\" + elapsed);\n    if (TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS) < getWaitForSecond()) {\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#waitForElapsed(String,long,Map[String,Long]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#waitForElapsed(String,long,Map[String,Long]).mjava","sourceNew":"  private boolean waitForElapsed(String name, long now, Map<String, Long> lastEventMap) {\n    Long lastTime = lastEventMap.computeIfAbsent(name, s -> now);\n    long elapsed = TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS);\n    log.trace(\"name={}, lastTime={}, elapsed={}\", name, lastTime, elapsed);\n    if (TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS) < getWaitForSecond()) {\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean waitForElapsed(String name, long now, Map<String, Long> lastEventMap) {\n    Long lastTime = lastEventMap.computeIfAbsent(name, s -> now);\n    long elapsed = TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS);\n    log.debug(\"name=\" + name + \", lastTime=\" + lastTime + \", elapsed=\" + elapsed);\n    if (TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS) < getWaitForSecond()) {\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#waitForElapsed(String,long,Map[String,Long]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#waitForElapsed(String,long,Map[String,Long]).mjava","sourceNew":"  private boolean waitForElapsed(String name, long now, Map<String, Long> lastEventMap) {\n    Long lastTime = lastEventMap.computeIfAbsent(name, s -> now);\n    long elapsed = TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS);\n    log.trace(\"name={}, lastTime={}, elapsed={}, waitFor={}\", name, lastTime, elapsed, getWaitForSecond());\n    if (TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS) < getWaitForSecond()) {\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean waitForElapsed(String name, long now, Map<String, Long> lastEventMap) {\n    Long lastTime = lastEventMap.computeIfAbsent(name, s -> now);\n    long elapsed = TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS);\n    log.trace(\"name={}, lastTime={}, elapsed={}\", name, lastTime, elapsed);\n    if (TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS) < getWaitForSecond()) {\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#waitForElapsed(String,long,Map[String,Long]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#waitForElapsed(String,long,Map[String,Long]).mjava","sourceNew":"  private boolean waitForElapsed(String name, long now, Map<String, Long> lastEventMap) {\n    Long lastTime = lastEventMap.computeIfAbsent(name, s -> now);\n    long elapsed = TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS);\n    if (log.isTraceEnabled()) {\n      log.trace(\"name={}, lastTime={}, elapsed={}, waitFor={}\", name, lastTime, elapsed, getWaitForSecond());\n    }\n    if (TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS) < getWaitForSecond()) {\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean waitForElapsed(String name, long now, Map<String, Long> lastEventMap) {\n    Long lastTime = lastEventMap.computeIfAbsent(name, s -> now);\n    long elapsed = TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS);\n    log.trace(\"name={}, lastTime={}, elapsed={}, waitFor={}\", name, lastTime, elapsed, getWaitForSecond());\n    if (TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS) < getWaitForSecond()) {\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#waitForElapsed(String,long,Map[String,Long]).mjava","sourceNew":null,"sourceOld":"  private boolean waitForElapsed(String name, long now, Map<String, Long> lastEventMap) {\n    Long lastTime = lastEventMap.computeIfAbsent(name, s -> now);\n    long elapsed = TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS);\n    if (log.isTraceEnabled()) {\n      log.trace(\"name={}, lastTime={}, elapsed={}, waitFor={}\", name, lastTime, elapsed, getWaitForSecond());\n    }\n    if (TimeUnit.SECONDS.convert(now - lastTime, TimeUnit.NANOSECONDS) < getWaitForSecond()) {\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"c3f354f2175f861ee625bb3c9572d53b77cd8545":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["e35f2dde06b35aa9904949a3a93fabd090371077"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["c3f354f2175f861ee625bb3c9572d53b77cd8545","7d7cf463e12b13965d63f133adc46a1c673d0c4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e35f2dde06b35aa9904949a3a93fabd090371077":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"7d7cf463e12b13965d63f133adc46a1c673d0c4e":["c3f354f2175f861ee625bb3c9572d53b77cd8545"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"4f2ba631afa835c2dfd14555cf19ae7e73663c17":["3955a9511098c96b652734b2f2d4160d07cc2d63"]},"commit2Childs":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["e35f2dde06b35aa9904949a3a93fabd090371077"],"c3f354f2175f861ee625bb3c9572d53b77cd8545":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","7d7cf463e12b13965d63f133adc46a1c673d0c4e"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["4f2ba631afa835c2dfd14555cf19ae7e73663c17"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3f354f2175f861ee625bb3c9572d53b77cd8545","3955a9511098c96b652734b2f2d4160d07cc2d63"],"e35f2dde06b35aa9904949a3a93fabd090371077":["3f504512a03d978990cbff30db0522b354e846db"],"7d7cf463e12b13965d63f133adc46a1c673d0c4e":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"4f2ba631afa835c2dfd14555cf19ae7e73663c17":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","4f2ba631afa835c2dfd14555cf19ae7e73663c17"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}