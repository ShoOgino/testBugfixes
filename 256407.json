{"path":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#assertFilesIdentical(Path,Path).mjava","commits":[{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#assertFilesIdentical(Path,Path).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#assertFilesIdentical(File,File).mjava","sourceNew":"  /**\n   * Make sure two files are byte-byte identical.\n   */\n  private void assertFilesIdentical(Path golden, Path sorted) throws IOException {\n    assertEquals(Files.size(golden), Files.size(sorted));\n\n    byte [] buf1 = new byte [64 * 1024];\n    byte [] buf2 = new byte [64 * 1024];\n    int len;\n    DataInputStream is1 = new DataInputStream(Files.newInputStream(golden));\n    DataInputStream is2 = new DataInputStream(Files.newInputStream(sorted));\n    while ((len = is1.read(buf1)) > 0) {\n      is2.readFully(buf2, 0, len);\n      for (int i = 0; i < len; i++) {\n        assertEquals(buf1[i], buf2[i]);\n      }\n    }\n    IOUtils.close(is1, is2);\n  }\n\n","sourceOld":"  /**\n   * Make sure two files are byte-byte identical.\n   */\n  private void assertFilesIdentical(File golden, File sorted) throws IOException {\n    assertEquals(golden.length(), sorted.length());\n\n    byte [] buf1 = new byte [64 * 1024];\n    byte [] buf2 = new byte [64 * 1024];\n    int len;\n    DataInputStream is1 = new DataInputStream(new FileInputStream(golden));\n    DataInputStream is2 = new DataInputStream(new FileInputStream(sorted));\n    while ((len = is1.read(buf1)) > 0) {\n      is2.readFully(buf2, 0, len);\n      for (int i = 0; i < len; i++) {\n        assertEquals(buf1[i], buf2[i]);\n      }\n    }\n    IOUtils.close(is1, is2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#assertFilesIdentical(Path,Path).mjava","sourceNew":null,"sourceOld":"  /**\n   * Make sure two files are byte-byte identical.\n   */\n  private void assertFilesIdentical(Path golden, Path sorted) throws IOException {\n    assertEquals(Files.size(golden), Files.size(sorted));\n\n    byte [] buf1 = new byte [64 * 1024];\n    byte [] buf2 = new byte [64 * 1024];\n    int len;\n    DataInputStream is1 = new DataInputStream(Files.newInputStream(golden));\n    DataInputStream is2 = new DataInputStream(Files.newInputStream(sorted));\n    while ((len = is1.read(buf1)) > 0) {\n      is2.readFully(buf2, 0, len);\n      for (int i = 0; i < len; i++) {\n        assertEquals(buf1[i], buf2[i]);\n      }\n    }\n    IOUtils.close(is1, is2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["867e3d9153fb761456b54a9dcce566e1545c5ef6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}