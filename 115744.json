{"path":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareTop(int).mjava","commits":[{"id":"7615b855702e008d91a95a2578bf05d27372f599","date":1389802891,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareTop(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int compareTop(int doc) {\n\n      int ord = termsIndex.getOrd(doc);\n\n      if (topSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return topOrd - ord;\n      } else if (ord <= topOrd) {\n        // the equals case always means doc is < value\n        // (because we set lastOrd to the lower bound)\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81530aec3dade54d134a5bbf27fb31a590def317","date":1389812586,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareTop(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareTop(int).mjava","sourceNew":"    @Override\n    public int compareTop(int doc) {\n\n      int ord = termsIndex.getOrd(doc);\n      if (ord == -1) {\n        ord = missingOrd;\n      }\n\n      if (topSameReader) {\n        // ord is precisely comparable, even in the equal\n        // case\n        //System.out.println(\"compareTop doc=\" + doc + \" ord=\" + ord + \" ret=\" + (topOrd-ord));\n        return topOrd - ord;\n      } else if (ord <= topOrd) {\n        // the equals case always means doc is < value\n        // (because we set lastOrd to the lower bound)\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareTop(int doc) {\n\n      int ord = termsIndex.getOrd(doc);\n\n      if (topSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return topOrd - ord;\n      } else if (ord <= topOrd) {\n        // the equals case always means doc is < value\n        // (because we set lastOrd to the lower bound)\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareTop(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int compareTop(int doc) {\n\n      int ord = termsIndex.getOrd(doc);\n      if (ord == -1) {\n        ord = missingOrd;\n      }\n\n      if (topSameReader) {\n        // ord is precisely comparable, even in the equal\n        // case\n        //System.out.println(\"compareTop doc=\" + doc + \" ord=\" + ord + \" ret=\" + (topOrd-ord));\n        return topOrd - ord;\n      } else if (ord <= topOrd) {\n        // the equals case always means doc is < value\n        // (because we set lastOrd to the lower bound)\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareTop(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareTop(int).mjava","sourceNew":"    @Override\n    public int compareTop(int doc) throws IOException {\n\n      int ord = getOrdForDoc(doc);\n      if (ord == -1) {\n        ord = missingOrd;\n      }\n\n      if (topSameReader) {\n        // ord is precisely comparable, even in the equal\n        // case\n        //System.out.println(\"compareTop doc=\" + doc + \" ord=\" + ord + \" ret=\" + (topOrd-ord));\n        return topOrd - ord;\n      } else if (ord <= topOrd) {\n        // the equals case always means doc is < value\n        // (because we set lastOrd to the lower bound)\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareTop(int doc) {\n\n      int ord = termsIndex.getOrd(doc);\n      if (ord == -1) {\n        ord = missingOrd;\n      }\n\n      if (topSameReader) {\n        // ord is precisely comparable, even in the equal\n        // case\n        //System.out.println(\"compareTop doc=\" + doc + \" ord=\" + ord + \" ret=\" + (topOrd-ord));\n        return topOrd - ord;\n      } else if (ord <= topOrd) {\n        // the equals case always means doc is < value\n        // (because we set lastOrd to the lower bound)\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareTop(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareTop(int).mjava","sourceNew":"    @Override\n    public int compareTop(int doc) throws IOException {\n\n      int ord = getOrdForDoc(doc);\n      if (ord == -1) {\n        ord = missingOrd;\n      }\n\n      if (topSameReader) {\n        // ord is precisely comparable, even in the equal\n        // case\n        //System.out.println(\"compareTop doc=\" + doc + \" ord=\" + ord + \" ret=\" + (topOrd-ord));\n        return topOrd - ord;\n      } else if (ord <= topOrd) {\n        // the equals case always means doc is < value\n        // (because we set lastOrd to the lower bound)\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareTop(int doc) {\n\n      int ord = termsIndex.getOrd(doc);\n      if (ord == -1) {\n        ord = missingOrd;\n      }\n\n      if (topSameReader) {\n        // ord is precisely comparable, even in the equal\n        // case\n        //System.out.println(\"compareTop doc=\" + doc + \" ord=\" + ord + \" ret=\" + (topOrd-ord));\n        return topOrd - ord;\n      } else if (ord <= topOrd) {\n        // the equals case always means doc is < value\n        // (because we set lastOrd to the lower bound)\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareTop(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareTop(int).mjava","sourceNew":"    @Override\n    public int compareTop(int doc) throws IOException {\n\n      int ord = getOrdForDoc(doc);\n      if (ord == -1) {\n        ord = missingOrd;\n      }\n\n      if (topSameReader) {\n        // ord is precisely comparable, even in the equal\n        // case\n        //System.out.println(\"compareTop doc=\" + doc + \" ord=\" + ord + \" ret=\" + (topOrd-ord));\n        return topOrd - ord;\n      } else if (ord <= topOrd) {\n        // the equals case always means doc is < value\n        // (because we set lastOrd to the lower bound)\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareTop(int doc) {\n\n      int ord = termsIndex.getOrd(doc);\n      if (ord == -1) {\n        ord = missingOrd;\n      }\n\n      if (topSameReader) {\n        // ord is precisely comparable, even in the equal\n        // case\n        //System.out.println(\"compareTop doc=\" + doc + \" ord=\" + ord + \" ret=\" + (topOrd-ord));\n        return topOrd - ord;\n      } else if (ord <= topOrd) {\n        // the equals case always means doc is < value\n        // (because we set lastOrd to the lower bound)\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"81530aec3dade54d134a5bbf27fb31a590def317":["7615b855702e008d91a95a2578bf05d27372f599"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","81530aec3dade54d134a5bbf27fb31a590def317"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["27ab7b234eab0cbc020836989b96ed430e1065bb","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"7615b855702e008d91a95a2578bf05d27372f599":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["27ab7b234eab0cbc020836989b96ed430e1065bb","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"81530aec3dade54d134a5bbf27fb31a590def317":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27ab7b234eab0cbc020836989b96ed430e1065bb","7615b855702e008d91a95a2578bf05d27372f599"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7615b855702e008d91a95a2578bf05d27372f599":["81530aec3dade54d134a5bbf27fb31a590def317"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}