{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/Utility#compareArray(char[],int,char[],int).mjava","commits":[{"id":"05ff0cc6e864c7d71a48579f2acfca4f58943568","date":1242295762,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/Utility#compareArray(char[],int,char[],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * 比较两个整数数组的大小, 分别从数组的一定位置开始逐个比较, 当依次相等且都到达末尾时, 返回相等, 否则未到达末尾的大于到达末尾的;\n   * 当未到达末尾时有一位不相等, 该位置数值大的数组大于小的\n   * \n   * @param larray\n   * @param lstartIndex larray的起始位置\n   * @param rarray\n   * @param rstartIndex rarray的起始位置\n   * @return 0表示相等，1表示larray > rarray, -1表示larray < rarray\n   */\n  public static int compareArray(char[] larray, int lstartIndex, char[] rarray,\n      int rstartIndex) {\n\n    if (larray == null) {\n      if (rarray == null || rstartIndex >= rarray.length)\n        return 0;\n      else\n        return -1;\n    } else {\n      // larray != null\n      if (rarray == null) {\n        if (lstartIndex >= larray.length)\n          return 0;\n        else\n          return 1;\n      }\n    }\n\n    int li = lstartIndex, ri = rstartIndex;\n    while (li < larray.length && ri < rarray.length && larray[li] == rarray[ri]) {\n      li++;\n      ri++;\n    }\n    if (li == larray.length) {\n      if (ri == rarray.length) {\n        // 两者一直相等到末尾，因此返回相等，也就是结果0\n        return 0;\n      } else {\n        // 此时不可能ri>rarray.length因此只有ri<rarray.length\n        // 表示larray已经结束，rarray没有结束，因此larray < rarray，返回-1\n        return -1;\n      }\n    } else {\n      // 此时不可能li>larray.length因此只有li < larray.length，表示li没有到达larray末尾\n      if (ri == rarray.length) {\n        // larray没有结束，但是rarray已经结束，因此larray > rarray\n        return 1;\n      } else {\n        // 此时不可能ri>rarray.length因此只有ri < rarray.length\n        // 表示larray和rarray都没有结束，因此按下一个数的大小判断\n        if (larray[li] > rarray[ri])\n          return 1;\n        else\n          return -1;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be5ef2f970a6c1141562b06dd26ed04c3dc29d70","date":1246444343,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/Utility#compareArray(char[],int,char[],int).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/Utility#compareArray(char[],int,char[],int).mjava","sourceNew":"  /**\n   * compare two arrays starting at the specified offsets.\n   * \n   * @param larray left array\n   * @param lstartIndex start offset into larray\n   * @param rarray right array\n   * @param rstartIndex start offset into rarray\n   * @return 0 if the arrays are equal，1 if larray > rarray, -1 if larray < rarray\n   */\n  public static int compareArray(char[] larray, int lstartIndex, char[] rarray,\n      int rstartIndex) {\n\n    if (larray == null) {\n      if (rarray == null || rstartIndex >= rarray.length)\n        return 0;\n      else\n        return -1;\n    } else {\n      // larray != null\n      if (rarray == null) {\n        if (lstartIndex >= larray.length)\n          return 0;\n        else\n          return 1;\n      }\n    }\n\n    int li = lstartIndex, ri = rstartIndex;\n    while (li < larray.length && ri < rarray.length && larray[li] == rarray[ri]) {\n      li++;\n      ri++;\n    }\n    if (li == larray.length) {\n      if (ri == rarray.length) {\n        // Both arrays are equivalent, return 0.\n        return 0;\n      } else {\n        // larray < rarray because larray has ended first.\n        return -1;\n      }\n    } else {\n      // differing lengths\n      if (ri == rarray.length) {\n        // larray > rarray because rarray has ended first.\n        return 1;\n      } else {\n        // determine by comparison\n        if (larray[li] > rarray[ri])\n          return 1;\n        else\n          return -1;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * 比较两个整数数组的大小, 分别从数组的一定位置开始逐个比较, 当依次相等且都到达末尾时, 返回相等, 否则未到达末尾的大于到达末尾的;\n   * 当未到达末尾时有一位不相等, 该位置数值大的数组大于小的\n   * \n   * @param larray\n   * @param lstartIndex larray的起始位置\n   * @param rarray\n   * @param rstartIndex rarray的起始位置\n   * @return 0表示相等，1表示larray > rarray, -1表示larray < rarray\n   */\n  public static int compareArray(char[] larray, int lstartIndex, char[] rarray,\n      int rstartIndex) {\n\n    if (larray == null) {\n      if (rarray == null || rstartIndex >= rarray.length)\n        return 0;\n      else\n        return -1;\n    } else {\n      // larray != null\n      if (rarray == null) {\n        if (lstartIndex >= larray.length)\n          return 0;\n        else\n          return 1;\n      }\n    }\n\n    int li = lstartIndex, ri = rstartIndex;\n    while (li < larray.length && ri < rarray.length && larray[li] == rarray[ri]) {\n      li++;\n      ri++;\n    }\n    if (li == larray.length) {\n      if (ri == rarray.length) {\n        // 两者一直相等到末尾，因此返回相等，也就是结果0\n        return 0;\n      } else {\n        // 此时不可能ri>rarray.length因此只有ri<rarray.length\n        // 表示larray已经结束，rarray没有结束，因此larray < rarray，返回-1\n        return -1;\n      }\n    } else {\n      // 此时不可能li>larray.length因此只有li < larray.length，表示li没有到达larray末尾\n      if (ri == rarray.length) {\n        // larray没有结束，但是rarray已经结束，因此larray > rarray\n        return 1;\n      } else {\n        // 此时不可能ri>rarray.length因此只有ri < rarray.length\n        // 表示larray和rarray都没有结束，因此按下一个数的大小判断\n        if (larray[li] > rarray[ri])\n          return 1;\n        else\n          return -1;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/Utility#compareArray(char[],int,char[],int).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/Utility#compareArray(char[],int,char[],int).mjava","sourceNew":"  /**\n   * compare two arrays starting at the specified offsets.\n   * \n   * @param larray left array\n   * @param lstartIndex start offset into larray\n   * @param rarray right array\n   * @param rstartIndex start offset into rarray\n   * @return 0 if the arrays are equal，1 if larray > rarray, -1 if larray < rarray\n   */\n  public static int compareArray(char[] larray, int lstartIndex, char[] rarray,\n      int rstartIndex) {\n\n    if (larray == null) {\n      if (rarray == null || rstartIndex >= rarray.length)\n        return 0;\n      else\n        return -1;\n    } else {\n      // larray != null\n      if (rarray == null) {\n        if (lstartIndex >= larray.length)\n          return 0;\n        else\n          return 1;\n      }\n    }\n\n    int li = lstartIndex, ri = rstartIndex;\n    while (li < larray.length && ri < rarray.length && larray[li] == rarray[ri]) {\n      li++;\n      ri++;\n    }\n    if (li == larray.length) {\n      if (ri == rarray.length) {\n        // Both arrays are equivalent, return 0.\n        return 0;\n      } else {\n        // larray < rarray because larray has ended first.\n        return -1;\n      }\n    } else {\n      // differing lengths\n      if (ri == rarray.length) {\n        // larray > rarray because rarray has ended first.\n        return 1;\n      } else {\n        // determine by comparison\n        if (larray[li] > rarray[ri])\n          return 1;\n        else\n          return -1;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * compare two arrays starting at the specified offsets.\n   * \n   * @param larray left array\n   * @param lstartIndex start offset into larray\n   * @param rarray right array\n   * @param rstartIndex start offset into rarray\n   * @return 0 if the arrays are equal，1 if larray > rarray, -1 if larray < rarray\n   */\n  public static int compareArray(char[] larray, int lstartIndex, char[] rarray,\n      int rstartIndex) {\n\n    if (larray == null) {\n      if (rarray == null || rstartIndex >= rarray.length)\n        return 0;\n      else\n        return -1;\n    } else {\n      // larray != null\n      if (rarray == null) {\n        if (lstartIndex >= larray.length)\n          return 0;\n        else\n          return 1;\n      }\n    }\n\n    int li = lstartIndex, ri = rstartIndex;\n    while (li < larray.length && ri < rarray.length && larray[li] == rarray[ri]) {\n      li++;\n      ri++;\n    }\n    if (li == larray.length) {\n      if (ri == rarray.length) {\n        // Both arrays are equivalent, return 0.\n        return 0;\n      } else {\n        // larray < rarray because larray has ended first.\n        return -1;\n      }\n    } else {\n      // differing lengths\n      if (ri == rarray.length) {\n        // larray > rarray because rarray has ended first.\n        return 1;\n      } else {\n        // determine by comparison\n        if (larray[li] > rarray[ri])\n          return 1;\n        else\n          return -1;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be5ef2f970a6c1141562b06dd26ed04c3dc29d70":["05ff0cc6e864c7d71a48579f2acfca4f58943568"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["be5ef2f970a6c1141562b06dd26ed04c3dc29d70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05ff0cc6e864c7d71a48579f2acfca4f58943568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"be5ef2f970a6c1141562b06dd26ed04c3dc29d70":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05ff0cc6e864c7d71a48579f2acfca4f58943568"],"05ff0cc6e864c7d71a48579f2acfca4f58943568":["be5ef2f970a6c1141562b06dd26ed04c3dc29d70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}