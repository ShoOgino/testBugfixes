{"path":"solr/core/src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","pathOld":"solr/src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","sourceNew":"  /**\n   * Parses a string of commands relative \"now\" are returns the resulting Date.\n   * \n   * @exception ParseException positions in ParseExceptions are token positions, not character positions.\n   */\n  public Date parseMath(String math) throws ParseException {\n\n    Calendar cal = Calendar.getInstance(zone, loc);\n    cal.setTime(getNow());\n\n    /* check for No-Op */\n    if (0==math.length()) {\n      return cal.getTime();\n    }\n    \n    String[] ops = splitter.split(math);\n    int pos = 0;\n    while ( pos < ops.length ) {\n\n      if (1 != ops[pos].length()) {\n        throw new ParseException\n          (\"Multi character command found: \\\"\" + ops[pos] + \"\\\"\", pos);\n      }\n      char command = ops[pos++].charAt(0);\n\n      switch (command) {\n      case '/':\n        if (ops.length < pos + 1) {\n          throw new ParseException\n            (\"Need a unit after command: \\\"\" + command + \"\\\"\", pos);\n        }\n        try {\n          round(cal, ops[pos++]);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      case '+': /* fall through */\n      case '-':\n        if (ops.length < pos + 2) {\n          throw new ParseException\n            (\"Need a value and unit for command: \\\"\" + command + \"\\\"\", pos);\n        }\n        int val = 0;\n        try {\n          val = Integer.valueOf(ops[pos++]);\n        } catch (NumberFormatException e) {\n          throw new ParseException\n            (\"Not a Number: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        if ('-' == command) {\n          val = 0 - val;\n        }\n        try {\n          String unit = ops[pos++];\n          add(cal, val, unit);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      default:\n        throw new ParseException\n          (\"Unrecognized command: \\\"\" + command + \"\\\"\", pos-1);\n      }\n    }\n    \n    return cal.getTime();\n  }\n\n","sourceOld":"  /**\n   * Parses a string of commands relative \"now\" are returns the resulting Date.\n   * \n   * @exception ParseException positions in ParseExceptions are token positions, not character positions.\n   */\n  public Date parseMath(String math) throws ParseException {\n\n    Calendar cal = Calendar.getInstance(zone, loc);\n    cal.setTime(getNow());\n\n    /* check for No-Op */\n    if (0==math.length()) {\n      return cal.getTime();\n    }\n    \n    String[] ops = splitter.split(math);\n    int pos = 0;\n    while ( pos < ops.length ) {\n\n      if (1 != ops[pos].length()) {\n        throw new ParseException\n          (\"Multi character command found: \\\"\" + ops[pos] + \"\\\"\", pos);\n      }\n      char command = ops[pos++].charAt(0);\n\n      switch (command) {\n      case '/':\n        if (ops.length < pos + 1) {\n          throw new ParseException\n            (\"Need a unit after command: \\\"\" + command + \"\\\"\", pos);\n        }\n        try {\n          round(cal, ops[pos++]);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      case '+': /* fall through */\n      case '-':\n        if (ops.length < pos + 2) {\n          throw new ParseException\n            (\"Need a value and unit for command: \\\"\" + command + \"\\\"\", pos);\n        }\n        int val = 0;\n        try {\n          val = Integer.valueOf(ops[pos++]);\n        } catch (NumberFormatException e) {\n          throw new ParseException\n            (\"Not a Number: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        if ('-' == command) {\n          val = 0 - val;\n        }\n        try {\n          String unit = ops[pos++];\n          add(cal, val, unit);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      default:\n        throw new ParseException\n          (\"Unrecognized command: \\\"\" + command + \"\\\"\", pos-1);\n      }\n    }\n    \n    return cal.getTime();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","pathOld":"solr/src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","sourceNew":"  /**\n   * Parses a string of commands relative \"now\" are returns the resulting Date.\n   * \n   * @exception ParseException positions in ParseExceptions are token positions, not character positions.\n   */\n  public Date parseMath(String math) throws ParseException {\n\n    Calendar cal = Calendar.getInstance(zone, loc);\n    cal.setTime(getNow());\n\n    /* check for No-Op */\n    if (0==math.length()) {\n      return cal.getTime();\n    }\n    \n    String[] ops = splitter.split(math);\n    int pos = 0;\n    while ( pos < ops.length ) {\n\n      if (1 != ops[pos].length()) {\n        throw new ParseException\n          (\"Multi character command found: \\\"\" + ops[pos] + \"\\\"\", pos);\n      }\n      char command = ops[pos++].charAt(0);\n\n      switch (command) {\n      case '/':\n        if (ops.length < pos + 1) {\n          throw new ParseException\n            (\"Need a unit after command: \\\"\" + command + \"\\\"\", pos);\n        }\n        try {\n          round(cal, ops[pos++]);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      case '+': /* fall through */\n      case '-':\n        if (ops.length < pos + 2) {\n          throw new ParseException\n            (\"Need a value and unit for command: \\\"\" + command + \"\\\"\", pos);\n        }\n        int val = 0;\n        try {\n          val = Integer.valueOf(ops[pos++]);\n        } catch (NumberFormatException e) {\n          throw new ParseException\n            (\"Not a Number: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        if ('-' == command) {\n          val = 0 - val;\n        }\n        try {\n          String unit = ops[pos++];\n          add(cal, val, unit);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      default:\n        throw new ParseException\n          (\"Unrecognized command: \\\"\" + command + \"\\\"\", pos-1);\n      }\n    }\n    \n    return cal.getTime();\n  }\n\n","sourceOld":"  /**\n   * Parses a string of commands relative \"now\" are returns the resulting Date.\n   * \n   * @exception ParseException positions in ParseExceptions are token positions, not character positions.\n   */\n  public Date parseMath(String math) throws ParseException {\n\n    Calendar cal = Calendar.getInstance(zone, loc);\n    cal.setTime(getNow());\n\n    /* check for No-Op */\n    if (0==math.length()) {\n      return cal.getTime();\n    }\n    \n    String[] ops = splitter.split(math);\n    int pos = 0;\n    while ( pos < ops.length ) {\n\n      if (1 != ops[pos].length()) {\n        throw new ParseException\n          (\"Multi character command found: \\\"\" + ops[pos] + \"\\\"\", pos);\n      }\n      char command = ops[pos++].charAt(0);\n\n      switch (command) {\n      case '/':\n        if (ops.length < pos + 1) {\n          throw new ParseException\n            (\"Need a unit after command: \\\"\" + command + \"\\\"\", pos);\n        }\n        try {\n          round(cal, ops[pos++]);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      case '+': /* fall through */\n      case '-':\n        if (ops.length < pos + 2) {\n          throw new ParseException\n            (\"Need a value and unit for command: \\\"\" + command + \"\\\"\", pos);\n        }\n        int val = 0;\n        try {\n          val = Integer.valueOf(ops[pos++]);\n        } catch (NumberFormatException e) {\n          throw new ParseException\n            (\"Not a Number: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        if ('-' == command) {\n          val = 0 - val;\n        }\n        try {\n          String unit = ops[pos++];\n          add(cal, val, unit);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      default:\n        throw new ParseException\n          (\"Unrecognized command: \\\"\" + command + \"\\\"\", pos-1);\n      }\n    }\n    \n    return cal.getTime();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","pathOld":"solr/src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","sourceNew":"  /**\n   * Parses a string of commands relative \"now\" are returns the resulting Date.\n   * \n   * @exception ParseException positions in ParseExceptions are token positions, not character positions.\n   */\n  public Date parseMath(String math) throws ParseException {\n\n    Calendar cal = Calendar.getInstance(zone, loc);\n    cal.setTime(getNow());\n\n    /* check for No-Op */\n    if (0==math.length()) {\n      return cal.getTime();\n    }\n    \n    String[] ops = splitter.split(math);\n    int pos = 0;\n    while ( pos < ops.length ) {\n\n      if (1 != ops[pos].length()) {\n        throw new ParseException\n          (\"Multi character command found: \\\"\" + ops[pos] + \"\\\"\", pos);\n      }\n      char command = ops[pos++].charAt(0);\n\n      switch (command) {\n      case '/':\n        if (ops.length < pos + 1) {\n          throw new ParseException\n            (\"Need a unit after command: \\\"\" + command + \"\\\"\", pos);\n        }\n        try {\n          round(cal, ops[pos++]);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      case '+': /* fall through */\n      case '-':\n        if (ops.length < pos + 2) {\n          throw new ParseException\n            (\"Need a value and unit for command: \\\"\" + command + \"\\\"\", pos);\n        }\n        int val = 0;\n        try {\n          val = Integer.valueOf(ops[pos++]);\n        } catch (NumberFormatException e) {\n          throw new ParseException\n            (\"Not a Number: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        if ('-' == command) {\n          val = 0 - val;\n        }\n        try {\n          String unit = ops[pos++];\n          add(cal, val, unit);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      default:\n        throw new ParseException\n          (\"Unrecognized command: \\\"\" + command + \"\\\"\", pos-1);\n      }\n    }\n    \n    return cal.getTime();\n  }\n\n","sourceOld":"  /**\n   * Parses a string of commands relative \"now\" are returns the resulting Date.\n   * \n   * @exception ParseException positions in ParseExceptions are token positions, not character positions.\n   */\n  public Date parseMath(String math) throws ParseException {\n\n    Calendar cal = Calendar.getInstance(zone, loc);\n    cal.setTime(getNow());\n\n    /* check for No-Op */\n    if (0==math.length()) {\n      return cal.getTime();\n    }\n    \n    String[] ops = splitter.split(math);\n    int pos = 0;\n    while ( pos < ops.length ) {\n\n      if (1 != ops[pos].length()) {\n        throw new ParseException\n          (\"Multi character command found: \\\"\" + ops[pos] + \"\\\"\", pos);\n      }\n      char command = ops[pos++].charAt(0);\n\n      switch (command) {\n      case '/':\n        if (ops.length < pos + 1) {\n          throw new ParseException\n            (\"Need a unit after command: \\\"\" + command + \"\\\"\", pos);\n        }\n        try {\n          round(cal, ops[pos++]);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      case '+': /* fall through */\n      case '-':\n        if (ops.length < pos + 2) {\n          throw new ParseException\n            (\"Need a value and unit for command: \\\"\" + command + \"\\\"\", pos);\n        }\n        int val = 0;\n        try {\n          val = Integer.valueOf(ops[pos++]);\n        } catch (NumberFormatException e) {\n          throw new ParseException\n            (\"Not a Number: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        if ('-' == command) {\n          val = 0 - val;\n        }\n        try {\n          String unit = ops[pos++];\n          add(cal, val, unit);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      default:\n        throw new ParseException\n          (\"Unrecognized command: \\\"\" + command + \"\\\"\", pos-1);\n      }\n    }\n    \n    return cal.getTime();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29","date":1463148204,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","sourceNew":"  /**\n   * Parses a string of commands relative \"now\" are returns the resulting Date.\n   * \n   * @exception ParseException positions in ParseExceptions are token positions, not character positions.\n   */\n  public Date parseMath(String math) throws ParseException {\n    /* check for No-Op */\n    if (0==math.length()) {\n      return getNow();\n    }\n\n    ZoneId zoneId = zone.toZoneId();\n    // localDateTime is a date and time local to the timezone specified\n    LocalDateTime localDateTime = ZonedDateTime.ofInstant(getNow().toInstant(), zoneId).toLocalDateTime();\n\n    String[] ops = splitter.split(math);\n    int pos = 0;\n    while ( pos < ops.length ) {\n\n      if (1 != ops[pos].length()) {\n        throw new ParseException\n          (\"Multi character command found: \\\"\" + ops[pos] + \"\\\"\", pos);\n      }\n      char command = ops[pos++].charAt(0);\n\n      switch (command) {\n      case '/':\n        if (ops.length < pos + 1) {\n          throw new ParseException\n            (\"Need a unit after command: \\\"\" + command + \"\\\"\", pos);\n        }\n        try {\n          localDateTime = round(localDateTime, ops[pos++]);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      case '+': /* fall through */\n      case '-':\n        if (ops.length < pos + 2) {\n          throw new ParseException\n            (\"Need a value and unit for command: \\\"\" + command + \"\\\"\", pos);\n        }\n        int val = 0;\n        try {\n          val = Integer.valueOf(ops[pos++]);\n        } catch (NumberFormatException e) {\n          throw new ParseException\n            (\"Not a Number: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        if ('-' == command) {\n          val = 0 - val;\n        }\n        try {\n          String unit = ops[pos++];\n          localDateTime = add(localDateTime, val, unit);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      default:\n        throw new ParseException\n          (\"Unrecognized command: \\\"\" + command + \"\\\"\", pos-1);\n      }\n    }\n    \n    return Date.from(ZonedDateTime.of(localDateTime, zoneId).toInstant());\n  }\n\n","sourceOld":"  /**\n   * Parses a string of commands relative \"now\" are returns the resulting Date.\n   * \n   * @exception ParseException positions in ParseExceptions are token positions, not character positions.\n   */\n  public Date parseMath(String math) throws ParseException {\n\n    Calendar cal = Calendar.getInstance(zone, loc);\n    cal.setTime(getNow());\n\n    /* check for No-Op */\n    if (0==math.length()) {\n      return cal.getTime();\n    }\n    \n    String[] ops = splitter.split(math);\n    int pos = 0;\n    while ( pos < ops.length ) {\n\n      if (1 != ops[pos].length()) {\n        throw new ParseException\n          (\"Multi character command found: \\\"\" + ops[pos] + \"\\\"\", pos);\n      }\n      char command = ops[pos++].charAt(0);\n\n      switch (command) {\n      case '/':\n        if (ops.length < pos + 1) {\n          throw new ParseException\n            (\"Need a unit after command: \\\"\" + command + \"\\\"\", pos);\n        }\n        try {\n          round(cal, ops[pos++]);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      case '+': /* fall through */\n      case '-':\n        if (ops.length < pos + 2) {\n          throw new ParseException\n            (\"Need a value and unit for command: \\\"\" + command + \"\\\"\", pos);\n        }\n        int val = 0;\n        try {\n          val = Integer.valueOf(ops[pos++]);\n        } catch (NumberFormatException e) {\n          throw new ParseException\n            (\"Not a Number: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        if ('-' == command) {\n          val = 0 - val;\n        }\n        try {\n          String unit = ops[pos++];\n          add(cal, val, unit);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      default:\n        throw new ParseException\n          (\"Unrecognized command: \\\"\" + command + \"\\\"\", pos-1);\n      }\n    }\n    \n    return cal.getTime();\n  }\n\n","bugFix":["183ba46e9837e95333f35c590df5d02d0071c076"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","sourceNew":"  /**\n   * Parses a string of commands relative \"now\" are returns the resulting Date.\n   * \n   * @exception ParseException positions in ParseExceptions are token positions, not character positions.\n   */\n  public Date parseMath(String math) throws ParseException {\n    /* check for No-Op */\n    if (0==math.length()) {\n      return getNow();\n    }\n\n    ZoneId zoneId = zone.toZoneId();\n    // localDateTime is a date and time local to the timezone specified\n    LocalDateTime localDateTime = ZonedDateTime.ofInstant(getNow().toInstant(), zoneId).toLocalDateTime();\n\n    String[] ops = splitter.split(math);\n    int pos = 0;\n    while ( pos < ops.length ) {\n\n      if (1 != ops[pos].length()) {\n        throw new ParseException\n          (\"Multi character command found: \\\"\" + ops[pos] + \"\\\"\", pos);\n      }\n      char command = ops[pos++].charAt(0);\n\n      switch (command) {\n      case '/':\n        if (ops.length < pos + 1) {\n          throw new ParseException\n            (\"Need a unit after command: \\\"\" + command + \"\\\"\", pos);\n        }\n        try {\n          localDateTime = round(localDateTime, ops[pos++]);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      case '+': /* fall through */\n      case '-':\n        if (ops.length < pos + 2) {\n          throw new ParseException\n            (\"Need a value and unit for command: \\\"\" + command + \"\\\"\", pos);\n        }\n        int val = 0;\n        try {\n          val = Integer.valueOf(ops[pos++]);\n        } catch (NumberFormatException e) {\n          throw new ParseException\n            (\"Not a Number: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        if ('-' == command) {\n          val = 0 - val;\n        }\n        try {\n          String unit = ops[pos++];\n          localDateTime = add(localDateTime, val, unit);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      default:\n        throw new ParseException\n          (\"Unrecognized command: \\\"\" + command + \"\\\"\", pos-1);\n      }\n    }\n    \n    return Date.from(ZonedDateTime.of(localDateTime, zoneId).toInstant());\n  }\n\n","sourceOld":"  /**\n   * Parses a string of commands relative \"now\" are returns the resulting Date.\n   * \n   * @exception ParseException positions in ParseExceptions are token positions, not character positions.\n   */\n  public Date parseMath(String math) throws ParseException {\n\n    Calendar cal = Calendar.getInstance(zone, loc);\n    cal.setTime(getNow());\n\n    /* check for No-Op */\n    if (0==math.length()) {\n      return cal.getTime();\n    }\n    \n    String[] ops = splitter.split(math);\n    int pos = 0;\n    while ( pos < ops.length ) {\n\n      if (1 != ops[pos].length()) {\n        throw new ParseException\n          (\"Multi character command found: \\\"\" + ops[pos] + \"\\\"\", pos);\n      }\n      char command = ops[pos++].charAt(0);\n\n      switch (command) {\n      case '/':\n        if (ops.length < pos + 1) {\n          throw new ParseException\n            (\"Need a unit after command: \\\"\" + command + \"\\\"\", pos);\n        }\n        try {\n          round(cal, ops[pos++]);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      case '+': /* fall through */\n      case '-':\n        if (ops.length < pos + 2) {\n          throw new ParseException\n            (\"Need a value and unit for command: \\\"\" + command + \"\\\"\", pos);\n        }\n        int val = 0;\n        try {\n          val = Integer.valueOf(ops[pos++]);\n        } catch (NumberFormatException e) {\n          throw new ParseException\n            (\"Not a Number: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        if ('-' == command) {\n          val = 0 - val;\n        }\n        try {\n          String unit = ops[pos++];\n          add(cal, val, unit);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      default:\n        throw new ParseException\n          (\"Unrecognized command: \\\"\" + command + \"\\\"\", pos-1);\n      }\n    }\n    \n    return cal.getTime();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","sourceNew":"  /**\n   * Parses a string of commands relative \"now\" are returns the resulting Date.\n   * \n   * @exception ParseException positions in ParseExceptions are token positions, not character positions.\n   */\n  public Date parseMath(String math) throws ParseException {\n    /* check for No-Op */\n    if (0==math.length()) {\n      return getNow();\n    }\n\n    ZoneId zoneId = zone.toZoneId();\n    // localDateTime is a date and time local to the timezone specified\n    LocalDateTime localDateTime = ZonedDateTime.ofInstant(getNow().toInstant(), zoneId).toLocalDateTime();\n\n    String[] ops = splitter.split(math);\n    int pos = 0;\n    while ( pos < ops.length ) {\n\n      if (1 != ops[pos].length()) {\n        throw new ParseException\n          (\"Multi character command found: \\\"\" + ops[pos] + \"\\\"\", pos);\n      }\n      char command = ops[pos++].charAt(0);\n\n      switch (command) {\n      case '/':\n        if (ops.length < pos + 1) {\n          throw new ParseException\n            (\"Need a unit after command: \\\"\" + command + \"\\\"\", pos);\n        }\n        try {\n          localDateTime = round(localDateTime, ops[pos++]);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      case '+': /* fall through */\n      case '-':\n        if (ops.length < pos + 2) {\n          throw new ParseException\n            (\"Need a value and unit for command: \\\"\" + command + \"\\\"\", pos);\n        }\n        int val = 0;\n        try {\n          val = Integer.valueOf(ops[pos++]);\n        } catch (NumberFormatException e) {\n          throw new ParseException\n            (\"Not a Number: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        if ('-' == command) {\n          val = 0 - val;\n        }\n        try {\n          String unit = ops[pos++];\n          localDateTime = add(localDateTime, val, unit);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      default:\n        throw new ParseException\n          (\"Unrecognized command: \\\"\" + command + \"\\\"\", pos-1);\n      }\n    }\n    \n    return Date.from(ZonedDateTime.of(localDateTime, zoneId).toInstant());\n  }\n\n","sourceOld":"  /**\n   * Parses a string of commands relative \"now\" are returns the resulting Date.\n   * \n   * @exception ParseException positions in ParseExceptions are token positions, not character positions.\n   */\n  public Date parseMath(String math) throws ParseException {\n\n    Calendar cal = Calendar.getInstance(zone, loc);\n    cal.setTime(getNow());\n\n    /* check for No-Op */\n    if (0==math.length()) {\n      return cal.getTime();\n    }\n    \n    String[] ops = splitter.split(math);\n    int pos = 0;\n    while ( pos < ops.length ) {\n\n      if (1 != ops[pos].length()) {\n        throw new ParseException\n          (\"Multi character command found: \\\"\" + ops[pos] + \"\\\"\", pos);\n      }\n      char command = ops[pos++].charAt(0);\n\n      switch (command) {\n      case '/':\n        if (ops.length < pos + 1) {\n          throw new ParseException\n            (\"Need a unit after command: \\\"\" + command + \"\\\"\", pos);\n        }\n        try {\n          round(cal, ops[pos++]);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      case '+': /* fall through */\n      case '-':\n        if (ops.length < pos + 2) {\n          throw new ParseException\n            (\"Need a value and unit for command: \\\"\" + command + \"\\\"\", pos);\n        }\n        int val = 0;\n        try {\n          val = Integer.valueOf(ops[pos++]);\n        } catch (NumberFormatException e) {\n          throw new ParseException\n            (\"Not a Number: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        if ('-' == command) {\n          val = 0 - val;\n        }\n        try {\n          String unit = ops[pos++];\n          add(cal, val, unit);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      default:\n        throw new ParseException\n          (\"Unrecognized command: \\\"\" + command + \"\\\"\", pos-1);\n      }\n    }\n    \n    return cal.getTime();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","sourceNew":"  /**\n   * Parses a string of commands relative \"now\" are returns the resulting Date.\n   * \n   * @exception ParseException positions in ParseExceptions are token positions, not character positions.\n   */\n  public Date parseMath(String math) throws ParseException {\n    /* check for No-Op */\n    if (0==math.length()) {\n      return getNow();\n    }\n\n    ZoneId zoneId = zone.toZoneId();\n    // localDateTime is a date and time local to the timezone specified\n    LocalDateTime localDateTime = ZonedDateTime.ofInstant(getNow().toInstant(), zoneId).toLocalDateTime();\n\n    String[] ops = splitter.split(math);\n    int pos = 0;\n    while ( pos < ops.length ) {\n\n      if (1 != ops[pos].length()) {\n        throw new ParseException\n          (\"Multi character command found: \\\"\" + ops[pos] + \"\\\"\", pos);\n      }\n      char command = ops[pos++].charAt(0);\n\n      switch (command) {\n      case '/':\n        if (ops.length < pos + 1) {\n          throw new ParseException\n            (\"Need a unit after command: \\\"\" + command + \"\\\"\", pos);\n        }\n        try {\n          localDateTime = round(localDateTime, ops[pos++]);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      case '+': /* fall through */\n      case '-':\n        if (ops.length < pos + 2) {\n          throw new ParseException\n            (\"Need a value and unit for command: \\\"\" + command + \"\\\"\", pos);\n        }\n        int val = 0;\n        try {\n          val = Integer.valueOf(ops[pos++]);\n        } catch (NumberFormatException e) {\n          throw new ParseException\n            (\"Not a Number: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        if ('-' == command) {\n          val = 0 - val;\n        }\n        try {\n          String unit = ops[pos++];\n          localDateTime = add(localDateTime, val, unit);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      default:\n        throw new ParseException\n          (\"Unrecognized command: \\\"\" + command + \"\\\"\", pos-1);\n      }\n    }\n    \n    return Date.from(ZonedDateTime.of(localDateTime, zoneId).toInstant());\n  }\n\n","sourceOld":"  /**\n   * Parses a string of commands relative \"now\" are returns the resulting Date.\n   * \n   * @exception ParseException positions in ParseExceptions are token positions, not character positions.\n   */\n  public Date parseMath(String math) throws ParseException {\n\n    Calendar cal = Calendar.getInstance(zone, loc);\n    cal.setTime(getNow());\n\n    /* check for No-Op */\n    if (0==math.length()) {\n      return cal.getTime();\n    }\n    \n    String[] ops = splitter.split(math);\n    int pos = 0;\n    while ( pos < ops.length ) {\n\n      if (1 != ops[pos].length()) {\n        throw new ParseException\n          (\"Multi character command found: \\\"\" + ops[pos] + \"\\\"\", pos);\n      }\n      char command = ops[pos++].charAt(0);\n\n      switch (command) {\n      case '/':\n        if (ops.length < pos + 1) {\n          throw new ParseException\n            (\"Need a unit after command: \\\"\" + command + \"\\\"\", pos);\n        }\n        try {\n          round(cal, ops[pos++]);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      case '+': /* fall through */\n      case '-':\n        if (ops.length < pos + 2) {\n          throw new ParseException\n            (\"Need a value and unit for command: \\\"\" + command + \"\\\"\", pos);\n        }\n        int val = 0;\n        try {\n          val = Integer.valueOf(ops[pos++]);\n        } catch (NumberFormatException e) {\n          throw new ParseException\n            (\"Not a Number: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        if ('-' == command) {\n          val = 0 - val;\n        }\n        try {\n          String unit = ops[pos++];\n          add(cal, val, unit);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      default:\n        throw new ParseException\n          (\"Unrecognized command: \\\"\" + command + \"\\\"\", pos-1);\n      }\n    }\n    \n    return cal.getTime();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","date":1489572490,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","sourceNew":"  /**\n   * Parses a string of commands relative \"now\" are returns the resulting Date.\n   * \n   * @exception ParseException positions in ParseExceptions are token positions, not character positions.\n   */\n  public Date parseMath(String math) throws ParseException {\n    /* check for No-Op */\n    if (0==math.length()) {\n      return getNow();\n    }\n\n    ZoneId zoneId = zone.toZoneId();\n    // localDateTime is a date and time local to the timezone specified\n    LocalDateTime localDateTime = ZonedDateTime.ofInstant(getNow().toInstant(), zoneId).toLocalDateTime();\n\n    String[] ops = splitter.split(math);\n    int pos = 0;\n    while ( pos < ops.length ) {\n\n      if (1 != ops[pos].length()) {\n        throw new ParseException\n          (\"Multi character command found: \\\"\" + ops[pos] + \"\\\"\", pos);\n      }\n      char command = ops[pos++].charAt(0);\n\n      switch (command) {\n      case '/':\n        if (ops.length < pos + 1) {\n          throw new ParseException\n            (\"Need a unit after command: \\\"\" + command + \"\\\"\", pos);\n        }\n        try {\n          localDateTime = round(localDateTime, ops[pos++]);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      case '+': /* fall through */\n      case '-':\n        if (ops.length < pos + 2) {\n          throw new ParseException\n            (\"Need a value and unit for command: \\\"\" + command + \"\\\"\", pos);\n        }\n        int val = 0;\n        try {\n          val = Integer.parseInt(ops[pos++]);\n        } catch (NumberFormatException e) {\n          throw new ParseException\n            (\"Not a Number: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        if ('-' == command) {\n          val = 0 - val;\n        }\n        try {\n          String unit = ops[pos++];\n          localDateTime = add(localDateTime, val, unit);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      default:\n        throw new ParseException\n          (\"Unrecognized command: \\\"\" + command + \"\\\"\", pos-1);\n      }\n    }\n    \n    return Date.from(ZonedDateTime.of(localDateTime, zoneId).toInstant());\n  }\n\n","sourceOld":"  /**\n   * Parses a string of commands relative \"now\" are returns the resulting Date.\n   * \n   * @exception ParseException positions in ParseExceptions are token positions, not character positions.\n   */\n  public Date parseMath(String math) throws ParseException {\n    /* check for No-Op */\n    if (0==math.length()) {\n      return getNow();\n    }\n\n    ZoneId zoneId = zone.toZoneId();\n    // localDateTime is a date and time local to the timezone specified\n    LocalDateTime localDateTime = ZonedDateTime.ofInstant(getNow().toInstant(), zoneId).toLocalDateTime();\n\n    String[] ops = splitter.split(math);\n    int pos = 0;\n    while ( pos < ops.length ) {\n\n      if (1 != ops[pos].length()) {\n        throw new ParseException\n          (\"Multi character command found: \\\"\" + ops[pos] + \"\\\"\", pos);\n      }\n      char command = ops[pos++].charAt(0);\n\n      switch (command) {\n      case '/':\n        if (ops.length < pos + 1) {\n          throw new ParseException\n            (\"Need a unit after command: \\\"\" + command + \"\\\"\", pos);\n        }\n        try {\n          localDateTime = round(localDateTime, ops[pos++]);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      case '+': /* fall through */\n      case '-':\n        if (ops.length < pos + 2) {\n          throw new ParseException\n            (\"Need a value and unit for command: \\\"\" + command + \"\\\"\", pos);\n        }\n        int val = 0;\n        try {\n          val = Integer.valueOf(ops[pos++]);\n        } catch (NumberFormatException e) {\n          throw new ParseException\n            (\"Not a Number: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        if ('-' == command) {\n          val = 0 - val;\n        }\n        try {\n          String unit = ops[pos++];\n          localDateTime = add(localDateTime, val, unit);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      default:\n        throw new ParseException\n          (\"Unrecognized command: \\\"\" + command + \"\\\"\", pos-1);\n      }\n    }\n    \n    return Date.from(ZonedDateTime.of(localDateTime, zoneId).toInstant());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55e0b3830b94d1abce4e32e98cfc875d5b14e76f","date":1489651910,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","sourceNew":"  /**\n   * Parses a string of commands relative \"now\" are returns the resulting Date.\n   * \n   * @exception ParseException positions in ParseExceptions are token positions, not character positions.\n   */\n  public Date parseMath(String math) throws ParseException {\n    /* check for No-Op */\n    if (0==math.length()) {\n      return getNow();\n    }\n\n    ZoneId zoneId = zone.toZoneId();\n    // localDateTime is a date and time local to the timezone specified\n    LocalDateTime localDateTime = ZonedDateTime.ofInstant(getNow().toInstant(), zoneId).toLocalDateTime();\n\n    String[] ops = splitter.split(math);\n    int pos = 0;\n    while ( pos < ops.length ) {\n\n      if (1 != ops[pos].length()) {\n        throw new ParseException\n          (\"Multi character command found: \\\"\" + ops[pos] + \"\\\"\", pos);\n      }\n      char command = ops[pos++].charAt(0);\n\n      switch (command) {\n      case '/':\n        if (ops.length < pos + 1) {\n          throw new ParseException\n            (\"Need a unit after command: \\\"\" + command + \"\\\"\", pos);\n        }\n        try {\n          localDateTime = round(localDateTime, ops[pos++]);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      case '+': /* fall through */\n      case '-':\n        if (ops.length < pos + 2) {\n          throw new ParseException\n            (\"Need a value and unit for command: \\\"\" + command + \"\\\"\", pos);\n        }\n        int val = 0;\n        try {\n          val = Integer.parseInt(ops[pos++]);\n        } catch (NumberFormatException e) {\n          throw new ParseException\n            (\"Not a Number: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        if ('-' == command) {\n          val = 0 - val;\n        }\n        try {\n          String unit = ops[pos++];\n          localDateTime = add(localDateTime, val, unit);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      default:\n        throw new ParseException\n          (\"Unrecognized command: \\\"\" + command + \"\\\"\", pos-1);\n      }\n    }\n    \n    return Date.from(ZonedDateTime.of(localDateTime, zoneId).toInstant());\n  }\n\n","sourceOld":"  /**\n   * Parses a string of commands relative \"now\" are returns the resulting Date.\n   * \n   * @exception ParseException positions in ParseExceptions are token positions, not character positions.\n   */\n  public Date parseMath(String math) throws ParseException {\n    /* check for No-Op */\n    if (0==math.length()) {\n      return getNow();\n    }\n\n    ZoneId zoneId = zone.toZoneId();\n    // localDateTime is a date and time local to the timezone specified\n    LocalDateTime localDateTime = ZonedDateTime.ofInstant(getNow().toInstant(), zoneId).toLocalDateTime();\n\n    String[] ops = splitter.split(math);\n    int pos = 0;\n    while ( pos < ops.length ) {\n\n      if (1 != ops[pos].length()) {\n        throw new ParseException\n          (\"Multi character command found: \\\"\" + ops[pos] + \"\\\"\", pos);\n      }\n      char command = ops[pos++].charAt(0);\n\n      switch (command) {\n      case '/':\n        if (ops.length < pos + 1) {\n          throw new ParseException\n            (\"Need a unit after command: \\\"\" + command + \"\\\"\", pos);\n        }\n        try {\n          localDateTime = round(localDateTime, ops[pos++]);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      case '+': /* fall through */\n      case '-':\n        if (ops.length < pos + 2) {\n          throw new ParseException\n            (\"Need a value and unit for command: \\\"\" + command + \"\\\"\", pos);\n        }\n        int val = 0;\n        try {\n          val = Integer.valueOf(ops[pos++]);\n        } catch (NumberFormatException e) {\n          throw new ParseException\n            (\"Not a Number: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        if ('-' == command) {\n          val = 0 - val;\n        }\n        try {\n          String unit = ops[pos++];\n          localDateTime = add(localDateTime, val, unit);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      default:\n        throw new ParseException\n          (\"Unrecognized command: \\\"\" + command + \"\\\"\", pos-1);\n      }\n    }\n    \n    return Date.from(ZonedDateTime.of(localDateTime, zoneId).toInstant());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","sourceNew":"  /**\n   * Parses a string of commands relative \"now\" are returns the resulting Date.\n   * \n   * @exception ParseException positions in ParseExceptions are token positions, not character positions.\n   */\n  public Date parseMath(String math) throws ParseException {\n    /* check for No-Op */\n    if (0==math.length()) {\n      return getNow();\n    }\n\n    ZoneId zoneId = zone.toZoneId();\n    // localDateTime is a date and time local to the timezone specified\n    LocalDateTime localDateTime = ZonedDateTime.ofInstant(getNow().toInstant(), zoneId).toLocalDateTime();\n\n    String[] ops = splitter.split(math);\n    int pos = 0;\n    while ( pos < ops.length ) {\n\n      if (1 != ops[pos].length()) {\n        throw new ParseException\n          (\"Multi character command found: \\\"\" + ops[pos] + \"\\\"\", pos);\n      }\n      char command = ops[pos++].charAt(0);\n\n      switch (command) {\n      case '/':\n        if (ops.length < pos + 1) {\n          throw new ParseException\n            (\"Need a unit after command: \\\"\" + command + \"\\\"\", pos);\n        }\n        try {\n          localDateTime = round(localDateTime, ops[pos++]);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      case '+': /* fall through */\n      case '-':\n        if (ops.length < pos + 2) {\n          throw new ParseException\n            (\"Need a value and unit for command: \\\"\" + command + \"\\\"\", pos);\n        }\n        int val = 0;\n        try {\n          val = Integer.parseInt(ops[pos++]);\n        } catch (NumberFormatException e) {\n          throw new ParseException\n            (\"Not a Number: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        if ('-' == command) {\n          val = 0 - val;\n        }\n        try {\n          String unit = ops[pos++];\n          localDateTime = add(localDateTime, val, unit);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      default:\n        throw new ParseException\n          (\"Unrecognized command: \\\"\" + command + \"\\\"\", pos-1);\n      }\n    }\n    \n    return Date.from(ZonedDateTime.of(localDateTime, zoneId).toInstant());\n  }\n\n","sourceOld":"  /**\n   * Parses a string of commands relative \"now\" are returns the resulting Date.\n   * \n   * @exception ParseException positions in ParseExceptions are token positions, not character positions.\n   */\n  public Date parseMath(String math) throws ParseException {\n    /* check for No-Op */\n    if (0==math.length()) {\n      return getNow();\n    }\n\n    ZoneId zoneId = zone.toZoneId();\n    // localDateTime is a date and time local to the timezone specified\n    LocalDateTime localDateTime = ZonedDateTime.ofInstant(getNow().toInstant(), zoneId).toLocalDateTime();\n\n    String[] ops = splitter.split(math);\n    int pos = 0;\n    while ( pos < ops.length ) {\n\n      if (1 != ops[pos].length()) {\n        throw new ParseException\n          (\"Multi character command found: \\\"\" + ops[pos] + \"\\\"\", pos);\n      }\n      char command = ops[pos++].charAt(0);\n\n      switch (command) {\n      case '/':\n        if (ops.length < pos + 1) {\n          throw new ParseException\n            (\"Need a unit after command: \\\"\" + command + \"\\\"\", pos);\n        }\n        try {\n          localDateTime = round(localDateTime, ops[pos++]);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      case '+': /* fall through */\n      case '-':\n        if (ops.length < pos + 2) {\n          throw new ParseException\n            (\"Need a value and unit for command: \\\"\" + command + \"\\\"\", pos);\n        }\n        int val = 0;\n        try {\n          val = Integer.valueOf(ops[pos++]);\n        } catch (NumberFormatException e) {\n          throw new ParseException\n            (\"Not a Number: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        if ('-' == command) {\n          val = 0 - val;\n        }\n        try {\n          String unit = ops[pos++];\n          localDateTime = add(localDateTime, val, unit);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      default:\n        throw new ParseException\n          (\"Unrecognized command: \\\"\" + command + \"\\\"\", pos-1);\n      }\n    }\n    \n    return Date.from(ZonedDateTime.of(localDateTime, zoneId).toInstant());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29":["c26f00b574427b55127e869b935845554afde1fa"],"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["c26f00b574427b55127e869b935845554afde1fa","ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab68488225b6a6c357dda72ed11dedca9914a192":["d470c8182e92b264680e34081b75e70a9f2b3c89","55e0b3830b94d1abce4e32e98cfc875d5b14e76f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c26f00b574427b55127e869b935845554afde1fa","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["c26f00b574427b55127e869b935845554afde1fa","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29":["0ad30c6a479e764150a3316e57263319775f1df2"],"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["ab68488225b6a6c357dda72ed11dedca9914a192"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29","0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","55e0b3830b94d1abce4e32e98cfc875d5b14e76f","ab68488225b6a6c357dda72ed11dedca9914a192","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","ab68488225b6a6c357dda72ed11dedca9914a192","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}