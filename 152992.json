{"path":"src/java/org/apache/solr/handler/component/QueryComponent#getComparator(SolrIndexReader,SortField).mjava","commits":[{"id":"10845c160c29e7e480692d2e9d7dad15a6de2630","date":1242326245,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#getComparator(SolrIndexReader,SortField).mjava","pathOld":"/dev/null","sourceNew":"  private ScoreDocComparator getComparator(SolrIndexReader reader, SortField sortField) throws IOException {\n    ScoreDocComparator comparator = null;\n    String fieldname = sortField.getField();\n    switch (sortField.getType()) {\n      case SortField.INT:\n        comparator = comparatorInt (reader, fieldname, sortField.getParser());\n        break;\n      case SortField.FLOAT:\n        comparator = comparatorFloat (reader, fieldname, sortField.getParser());\n        break;\n      case SortField.LONG:\n        comparator = comparatorLong(reader, fieldname, sortField.getParser());\n        break;\n      case SortField.DOUBLE:\n        comparator = comparatorDouble(reader, fieldname, sortField.getParser());\n        break;\n      case SortField.STRING:\n        if (sortField.getLocale() != null) comparator = comparatorStringLocale (reader, fieldname, sortField.getLocale());\n        else comparator = comparatorString (reader, fieldname);\n        break;\n      case SortField.CUSTOM:\n        comparator = sortField.getFactory().newComparator (reader, fieldname);\n        break;\n      default:\n        throw new RuntimeException (\"unknown field type: \"+sortField.getType());\n    }\n    return comparator;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae5ba445e353247a42fc0d858c850f65715b0250","date":1249066787,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#getComparator(SolrIndexReader,SortField).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#getComparator(SolrIndexReader,SortField).mjava","sourceNew":"  private ScoreDocComparator getComparator(SolrIndexReader reader, SortField sortField) throws IOException {\n    ScoreDocComparator comparator = null;\n    String fieldname = sortField.getField();\n    switch (sortField.getType()) {\n      case SortField.INT:\n        comparator = comparatorInt (reader, fieldname, sortField.getParser());\n        break;\n      case SortField.FLOAT:\n        comparator = comparatorFloat (reader, fieldname, sortField.getParser());\n        break;\n      case SortField.LONG:\n        comparator = comparatorLong(reader, fieldname, sortField.getParser());\n        break;\n      case SortField.DOUBLE:\n        comparator = comparatorDouble(reader, fieldname, sortField.getParser());\n        break;\n      case SortField.STRING:\n        if (sortField.getLocale() != null) comparator = comparatorStringLocale (reader, fieldname, sortField.getLocale());\n        else comparator = comparatorString (reader, fieldname);\n        break;\n      case SortField.CUSTOM:\n        comparator = sortField.getFactory().newComparator (reader, fieldname);\n        // comparator = sortField.getComparatorSource().newComparator(fieldname,2,1,false);\n        break;\n      default:\n        throw new RuntimeException (\"unknown field type: \"+sortField.getType());\n    }\n    return comparator;\n  }\n\n","sourceOld":"  private ScoreDocComparator getComparator(SolrIndexReader reader, SortField sortField) throws IOException {\n    ScoreDocComparator comparator = null;\n    String fieldname = sortField.getField();\n    switch (sortField.getType()) {\n      case SortField.INT:\n        comparator = comparatorInt (reader, fieldname, sortField.getParser());\n        break;\n      case SortField.FLOAT:\n        comparator = comparatorFloat (reader, fieldname, sortField.getParser());\n        break;\n      case SortField.LONG:\n        comparator = comparatorLong(reader, fieldname, sortField.getParser());\n        break;\n      case SortField.DOUBLE:\n        comparator = comparatorDouble(reader, fieldname, sortField.getParser());\n        break;\n      case SortField.STRING:\n        if (sortField.getLocale() != null) comparator = comparatorStringLocale (reader, fieldname, sortField.getLocale());\n        else comparator = comparatorString (reader, fieldname);\n        break;\n      case SortField.CUSTOM:\n        comparator = sortField.getFactory().newComparator (reader, fieldname);\n        break;\n      default:\n        throw new RuntimeException (\"unknown field type: \"+sortField.getType());\n    }\n    return comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3da65606b2cf2b2357063f779126d1521733034","date":1249401214,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#getComparator(SolrIndexReader,SortField).mjava","sourceNew":null,"sourceOld":"  private ScoreDocComparator getComparator(SolrIndexReader reader, SortField sortField) throws IOException {\n    ScoreDocComparator comparator = null;\n    String fieldname = sortField.getField();\n    switch (sortField.getType()) {\n      case SortField.INT:\n        comparator = comparatorInt (reader, fieldname, sortField.getParser());\n        break;\n      case SortField.FLOAT:\n        comparator = comparatorFloat (reader, fieldname, sortField.getParser());\n        break;\n      case SortField.LONG:\n        comparator = comparatorLong(reader, fieldname, sortField.getParser());\n        break;\n      case SortField.DOUBLE:\n        comparator = comparatorDouble(reader, fieldname, sortField.getParser());\n        break;\n      case SortField.STRING:\n        if (sortField.getLocale() != null) comparator = comparatorStringLocale (reader, fieldname, sortField.getLocale());\n        else comparator = comparatorString (reader, fieldname);\n        break;\n      case SortField.CUSTOM:\n        comparator = sortField.getFactory().newComparator (reader, fieldname);\n        // comparator = sortField.getComparatorSource().newComparator(fieldname,2,1,false);\n        break;\n      default:\n        throw new RuntimeException (\"unknown field type: \"+sortField.getType());\n    }\n    return comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"10845c160c29e7e480692d2e9d7dad15a6de2630":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ae5ba445e353247a42fc0d858c850f65715b0250":["10845c160c29e7e480692d2e9d7dad15a6de2630"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"c3da65606b2cf2b2357063f779126d1521733034":["ae5ba445e353247a42fc0d858c850f65715b0250"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"10845c160c29e7e480692d2e9d7dad15a6de2630":["ae5ba445e353247a42fc0d858c850f65715b0250"],"ae5ba445e353247a42fc0d858c850f65715b0250":["c3da65606b2cf2b2357063f779126d1521733034"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["10845c160c29e7e480692d2e9d7dad15a6de2630"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3da65606b2cf2b2357063f779126d1521733034":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3da65606b2cf2b2357063f779126d1521733034","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}