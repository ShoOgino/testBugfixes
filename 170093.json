{"path":"solr/core/src/java/org/apache/solr/handler/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","commits":[{"id":"cbb7f1f4cf1e9a820364c090bb7e9a590f351339","date":1478603266,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SortingResponseWriter[ExportWriter]#getSortDoc(SolrIndexSearcher,SortField[]).mjava","sourceNew":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for(int i=0; i<sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      if(ft instanceof TrieIntField) {\n        if(reverse) {\n          sortValues[i] = new IntValue(field, new IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntAsc());\n        }\n      } else if(ft instanceof TrieFloatField) {\n        if(reverse) {\n          sortValues[i] = new FloatValue(field, new FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatAsc());\n        }\n      } else if(ft instanceof TrieDoubleField) {\n        if(reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleAsc());\n        }\n      } else if(ft instanceof TrieLongField) {\n        if(reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if(ft instanceof StrField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals =  reader.getSortedDocValues(field);\n        if(reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else if (ft instanceof TrieDateField) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n\n    if(sortValues.length == 1) {\n      return new SingleValueSortDoc(sortValues[0]);\n    } else if(sortValues.length == 2) {\n      return new DoubleValueSortDoc(sortValues[0], sortValues[1]);\n    } else if(sortValues.length == 3) {\n      return new TripleValueSortDoc(sortValues[0], sortValues[1], sortValues[2]);\n    } else if(sortValues.length == 4) {\n      return new QuadValueSortDoc(sortValues[0], sortValues[1], sortValues[2], sortValues[3]);\n    } else {\n      throw new IOException(\"A max of 4 sorts can be specified\");\n    }\n  }\n\n","sourceOld":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for(int i=0; i<sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      if(ft instanceof TrieIntField) {\n        if(reverse) {\n          sortValues[i] = new IntValue(field, new IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntAsc());\n        }\n      } else if(ft instanceof TrieFloatField) {\n        if(reverse) {\n          sortValues[i] = new FloatValue(field, new FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatAsc());\n        }\n      } else if(ft instanceof TrieDoubleField) {\n        if(reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleAsc());\n        }\n      } else if(ft instanceof TrieLongField) {\n        if(reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if(ft instanceof StrField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals =  reader.getSortedDocValues(field);\n        if(reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else if (ft instanceof TrieDateField) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals =  reader.getSortedDocValues(field);\n        if(reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n\n    if(sortValues.length == 1) {\n      return new SingleValueSortDoc(sortValues[0]);\n    } else if(sortValues.length == 2) {\n      return new DoubleValueSortDoc(sortValues[0], sortValues[1]);\n    } else if(sortValues.length == 3) {\n      return new TripleValueSortDoc(sortValues[0], sortValues[1], sortValues[2]);\n    } else if(sortValues.length == 4) {\n      return new QuadValueSortDoc(sortValues[0], sortValues[1], sortValues[2], sortValues[3]);\n    } else {\n      throw new IOException(\"A max of 4 sorts can be specified\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","sourceNew":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for(int i=0; i<sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      if(ft instanceof TrieIntField) {\n        if(reverse) {\n          sortValues[i] = new IntValue(field, new IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntAsc());\n        }\n      } else if(ft instanceof TrieFloatField) {\n        if(reverse) {\n          sortValues[i] = new FloatValue(field, new FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatAsc());\n        }\n      } else if(ft instanceof TrieDoubleField) {\n        if(reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleAsc());\n        }\n      } else if(ft instanceof TrieLongField) {\n        if(reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if(ft instanceof StrField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals =  reader.getSortedDocValues(field);\n        if(reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else if (ft instanceof TrieDateField) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n\n    if(sortValues.length == 1) {\n      return new SingleValueSortDoc(sortValues[0]);\n    } else if(sortValues.length == 2) {\n      return new DoubleValueSortDoc(sortValues[0], sortValues[1]);\n    } else if(sortValues.length == 3) {\n      return new TripleValueSortDoc(sortValues[0], sortValues[1], sortValues[2]);\n    } else if(sortValues.length == 4) {\n      return new QuadValueSortDoc(sortValues[0], sortValues[1], sortValues[2], sortValues[3]);\n    } else {\n      throw new IOException(\"A max of 4 sorts can be specified\");\n    }\n  }\n\n","sourceOld":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for(int i=0; i<sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      if(ft instanceof TrieIntField) {\n        if(reverse) {\n          sortValues[i] = new IntValue(field, new IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntAsc());\n        }\n      } else if(ft instanceof TrieFloatField) {\n        if(reverse) {\n          sortValues[i] = new FloatValue(field, new FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatAsc());\n        }\n      } else if(ft instanceof TrieDoubleField) {\n        if(reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleAsc());\n        }\n      } else if(ft instanceof TrieLongField) {\n        if(reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if(ft instanceof StrField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals =  reader.getSortedDocValues(field);\n        if(reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else if (ft instanceof TrieDateField) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals =  reader.getSortedDocValues(field);\n        if(reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n\n    if(sortValues.length == 1) {\n      return new SingleValueSortDoc(sortValues[0]);\n    } else if(sortValues.length == 2) {\n      return new DoubleValueSortDoc(sortValues[0], sortValues[1]);\n    } else if(sortValues.length == 3) {\n      return new TripleValueSortDoc(sortValues[0], sortValues[1], sortValues[2]);\n    } else if(sortValues.length == 4) {\n      return new QuadValueSortDoc(sortValues[0], sortValues[1], sortValues[2], sortValues[3]);\n    } else {\n      throw new IOException(\"A max of 4 sorts can be specified\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64e822dccd1b346ce9d46853cebd9bc5550e8a55","date":1497302501,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","sourceNew":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for(int i=0; i<sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      if(ft instanceof IntValueFieldType) {\n        if(reverse) {\n          sortValues[i] = new IntValue(field, new IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntAsc());\n        }\n      } else if(ft instanceof FloatValueFieldType) {\n        if(reverse) {\n          sortValues[i] = new FloatValue(field, new FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatAsc());\n        }\n      } else if(ft instanceof DoubleValueFieldType) {\n        if(reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleAsc());\n        }\n      } else if(ft instanceof LongValueFieldType) {\n        if(reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if(ft instanceof StrField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals =  reader.getSortedDocValues(field);\n        if(reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else if (ft instanceof DateValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n\n    if(sortValues.length == 1) {\n      return new SingleValueSortDoc(sortValues[0]);\n    } else if(sortValues.length == 2) {\n      return new DoubleValueSortDoc(sortValues[0], sortValues[1]);\n    } else if(sortValues.length == 3) {\n      return new TripleValueSortDoc(sortValues[0], sortValues[1], sortValues[2]);\n    } else if(sortValues.length == 4) {\n      return new QuadValueSortDoc(sortValues[0], sortValues[1], sortValues[2], sortValues[3]);\n    } else {\n      throw new IOException(\"A max of 4 sorts can be specified\");\n    }\n  }\n\n","sourceOld":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for(int i=0; i<sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      if(ft instanceof TrieIntField) {\n        if(reverse) {\n          sortValues[i] = new IntValue(field, new IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntAsc());\n        }\n      } else if(ft instanceof TrieFloatField) {\n        if(reverse) {\n          sortValues[i] = new FloatValue(field, new FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatAsc());\n        }\n      } else if(ft instanceof TrieDoubleField) {\n        if(reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleAsc());\n        }\n      } else if(ft instanceof TrieLongField) {\n        if(reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if(ft instanceof StrField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals =  reader.getSortedDocValues(field);\n        if(reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else if (ft instanceof TrieDateField) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n\n    if(sortValues.length == 1) {\n      return new SingleValueSortDoc(sortValues[0]);\n    } else if(sortValues.length == 2) {\n      return new DoubleValueSortDoc(sortValues[0], sortValues[1]);\n    } else if(sortValues.length == 3) {\n      return new TripleValueSortDoc(sortValues[0], sortValues[1], sortValues[2]);\n    } else if(sortValues.length == 4) {\n      return new QuadValueSortDoc(sortValues[0], sortValues[1], sortValues[2], sortValues[3]);\n    } else {\n      throw new IOException(\"A max of 4 sorts can be specified\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","sourceNew":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for(int i=0; i<sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      if(ft instanceof IntValueFieldType) {\n        if(reverse) {\n          sortValues[i] = new IntValue(field, new IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntAsc());\n        }\n      } else if(ft instanceof FloatValueFieldType) {\n        if(reverse) {\n          sortValues[i] = new FloatValue(field, new FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatAsc());\n        }\n      } else if(ft instanceof DoubleValueFieldType) {\n        if(reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleAsc());\n        }\n      } else if(ft instanceof LongValueFieldType) {\n        if(reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if(ft instanceof StrField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals =  reader.getSortedDocValues(field);\n        if(reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else if (ft instanceof DateValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n\n    if(sortValues.length == 1) {\n      return new SingleValueSortDoc(sortValues[0]);\n    } else if(sortValues.length == 2) {\n      return new DoubleValueSortDoc(sortValues[0], sortValues[1]);\n    } else if(sortValues.length == 3) {\n      return new TripleValueSortDoc(sortValues[0], sortValues[1], sortValues[2]);\n    } else if(sortValues.length == 4) {\n      return new QuadValueSortDoc(sortValues[0], sortValues[1], sortValues[2], sortValues[3]);\n    } else {\n      throw new IOException(\"A max of 4 sorts can be specified\");\n    }\n  }\n\n","sourceOld":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for(int i=0; i<sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      if(ft instanceof TrieIntField) {\n        if(reverse) {\n          sortValues[i] = new IntValue(field, new IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntAsc());\n        }\n      } else if(ft instanceof TrieFloatField) {\n        if(reverse) {\n          sortValues[i] = new FloatValue(field, new FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatAsc());\n        }\n      } else if(ft instanceof TrieDoubleField) {\n        if(reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleAsc());\n        }\n      } else if(ft instanceof TrieLongField) {\n        if(reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if(ft instanceof StrField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals =  reader.getSortedDocValues(field);\n        if(reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else if (ft instanceof TrieDateField) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n\n    if(sortValues.length == 1) {\n      return new SingleValueSortDoc(sortValues[0]);\n    } else if(sortValues.length == 2) {\n      return new DoubleValueSortDoc(sortValues[0], sortValues[1]);\n    } else if(sortValues.length == 3) {\n      return new TripleValueSortDoc(sortValues[0], sortValues[1], sortValues[2]);\n    } else if(sortValues.length == 4) {\n      return new QuadValueSortDoc(sortValues[0], sortValues[1], sortValues[2], sortValues[3]);\n    } else {\n      throw new IOException(\"A max of 4 sorts can be specified\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","sourceNew":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for(int i=0; i<sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      if(ft instanceof IntValueFieldType) {\n        if(reverse) {\n          sortValues[i] = new IntValue(field, new IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntAsc());\n        }\n      } else if(ft instanceof FloatValueFieldType) {\n        if(reverse) {\n          sortValues[i] = new FloatValue(field, new FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatAsc());\n        }\n      } else if(ft instanceof DoubleValueFieldType) {\n        if(reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleAsc());\n        }\n      } else if(ft instanceof LongValueFieldType) {\n        if(reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if(ft instanceof StrField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals =  reader.getSortedDocValues(field);\n        if(reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else if (ft instanceof DateValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n\n    if(sortValues.length == 1) {\n      return new SingleValueSortDoc(sortValues[0]);\n    } else if(sortValues.length == 2) {\n      return new DoubleValueSortDoc(sortValues[0], sortValues[1]);\n    } else if(sortValues.length == 3) {\n      return new TripleValueSortDoc(sortValues[0], sortValues[1], sortValues[2]);\n    } else if(sortValues.length == 4) {\n      return new QuadValueSortDoc(sortValues[0], sortValues[1], sortValues[2], sortValues[3]);\n    } else {\n      throw new IOException(\"A max of 4 sorts can be specified\");\n    }\n  }\n\n","sourceOld":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for(int i=0; i<sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      if(ft instanceof TrieIntField) {\n        if(reverse) {\n          sortValues[i] = new IntValue(field, new IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntAsc());\n        }\n      } else if(ft instanceof TrieFloatField) {\n        if(reverse) {\n          sortValues[i] = new FloatValue(field, new FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatAsc());\n        }\n      } else if(ft instanceof TrieDoubleField) {\n        if(reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleAsc());\n        }\n      } else if(ft instanceof TrieLongField) {\n        if(reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if(ft instanceof StrField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals =  reader.getSortedDocValues(field);\n        if(reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else if (ft instanceof TrieDateField) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n\n    if(sortValues.length == 1) {\n      return new SingleValueSortDoc(sortValues[0]);\n    } else if(sortValues.length == 2) {\n      return new DoubleValueSortDoc(sortValues[0], sortValues[1]);\n    } else if(sortValues.length == 3) {\n      return new TripleValueSortDoc(sortValues[0], sortValues[1], sortValues[2]);\n    } else if(sortValues.length == 4) {\n      return new QuadValueSortDoc(sortValues[0], sortValues[1], sortValues[2], sortValues[3]);\n    } else {\n      throw new IOException(\"A max of 4 sorts can be specified\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80","date":1532111887,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","sourceNew":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for (int i = 0; i < sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(field + \" must have DocValues to use this feature.\");\n      }\n\n      if (ft instanceof IntValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new IntValue(field, new IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntAsc());\n        }\n      } else if (ft instanceof FloatValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new FloatValue(field, new FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatAsc());\n        }\n      } else if (ft instanceof DoubleValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleAsc());\n        }\n      } else if (ft instanceof LongValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof StrField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else if (ft instanceof DateValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n\n    return new SortDoc(sortValues);\n  }\n\n","sourceOld":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for(int i=0; i<sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      if(ft instanceof IntValueFieldType) {\n        if(reverse) {\n          sortValues[i] = new IntValue(field, new IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntAsc());\n        }\n      } else if(ft instanceof FloatValueFieldType) {\n        if(reverse) {\n          sortValues[i] = new FloatValue(field, new FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatAsc());\n        }\n      } else if(ft instanceof DoubleValueFieldType) {\n        if(reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleAsc());\n        }\n      } else if(ft instanceof LongValueFieldType) {\n        if(reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if(ft instanceof StrField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals =  reader.getSortedDocValues(field);\n        if(reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else if (ft instanceof DateValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n\n    if(sortValues.length == 1) {\n      return new SingleValueSortDoc(sortValues[0]);\n    } else if(sortValues.length == 2) {\n      return new DoubleValueSortDoc(sortValues[0], sortValues[1]);\n    } else if(sortValues.length == 3) {\n      return new TripleValueSortDoc(sortValues[0], sortValues[1], sortValues[2]);\n    } else if(sortValues.length == 4) {\n      return new QuadValueSortDoc(sortValues[0], sortValues[1], sortValues[2], sortValues[3]);\n    } else {\n      throw new IOException(\"A max of 4 sorts can be specified\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"64e822dccd1b346ce9d46853cebd9bc5550e8a55":["cbb7f1f4cf1e9a820364c090bb7e9a590f351339"],"cbb7f1f4cf1e9a820364c090bb7e9a590f351339":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cbb7f1f4cf1e9a820364c090bb7e9a590f351339"],"28288370235ed02234a64753cdbf0c6ec096304a":["cbb7f1f4cf1e9a820364c090bb7e9a590f351339","64e822dccd1b346ce9d46853cebd9bc5550e8a55"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["cbb7f1f4cf1e9a820364c090bb7e9a590f351339","64e822dccd1b346ce9d46853cebd9bc5550e8a55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"]},"commit2Childs":{"64e822dccd1b346ce9d46853cebd9bc5550e8a55":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"cbb7f1f4cf1e9a820364c090bb7e9a590f351339":["64e822dccd1b346ce9d46853cebd9bc5550e8a55","199dfa410f1fdbfd3294106b04096cce5ed34b21","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cbb7f1f4cf1e9a820364c090bb7e9a590f351339","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"28288370235ed02234a64753cdbf0c6ec096304a":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}