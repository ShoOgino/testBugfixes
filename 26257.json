{"path":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#getPackageInstance(String,String).mjava","commits":[{"id":"120bc33d5cbe83eca2e5fce597baf4fef208d579","date":1573735895,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#getPackageInstance(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get the installed instance of a specific version of a package. If version is null, PackageUtils.LATEST or PackagePluginHolder.LATEST,\n   * then it returns the highest version available in the system for the package.\n   */\n  public SolrPackageInstance getPackageInstance(String packageName, String version) {\n    fetchInstalledPackageInstances();\n    List<SolrPackageInstance> versions = packages.get(packageName);\n    SolrPackageInstance latest = null;\n    if (versions != null && !versions.isEmpty()) {\n      latest = versions.get(0);\n      for (int i=0; i<versions.size(); i++) {\n        SolrPackageInstance pkg = versions.get(i);\n        if (pkg.version.equals(version)) {\n          return pkg;\n        }\n        if (PackageUtils.compareVersions(latest.version, pkg.version) <= 0) {\n          latest = pkg;\n        }\n      }\n    }\n    if (version == null || version.equalsIgnoreCase(PackageUtils.LATEST) || version.equalsIgnoreCase(PackagePluginHolder.LATEST)) {\n      return latest;\n    } else return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2ed9b72e5fa27a7bd4857f222ca815341979d4a","date":1594879524,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#getPackageInstance(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#getPackageInstance(String,String).mjava","sourceNew":"  /**\n   * Get the installed instance of a specific version of a package. If version is null, PackageUtils.LATEST or PackagePluginHolder.LATEST,\n   * then it returns the highest version available in the system for the package.\n   */\n  public SolrPackageInstance getPackageInstance(String packageName, String version) {\n    fetchInstalledPackageInstances();\n    List<SolrPackageInstance> versions = packages.get(packageName);\n    SolrPackageInstance latest = null;\n    if (versions != null && !versions.isEmpty()) {\n      latest = versions.get(0);\n      for (int i=0; i<versions.size(); i++) {\n        SolrPackageInstance pkg = versions.get(i);\n        if (pkg.version.equals(version)) {\n          return pkg;\n        }\n        if (PackageUtils.compareVersions(latest.version, pkg.version) <= 0) {\n          latest = pkg;\n        }\n      }\n    }\n    if (version == null || version.equalsIgnoreCase(PackageUtils.LATEST) || version.equalsIgnoreCase(PackageLoader.LATEST)) {\n      return latest;\n    } else return null;\n  }\n\n","sourceOld":"  /**\n   * Get the installed instance of a specific version of a package. If version is null, PackageUtils.LATEST or PackagePluginHolder.LATEST,\n   * then it returns the highest version available in the system for the package.\n   */\n  public SolrPackageInstance getPackageInstance(String packageName, String version) {\n    fetchInstalledPackageInstances();\n    List<SolrPackageInstance> versions = packages.get(packageName);\n    SolrPackageInstance latest = null;\n    if (versions != null && !versions.isEmpty()) {\n      latest = versions.get(0);\n      for (int i=0; i<versions.size(); i++) {\n        SolrPackageInstance pkg = versions.get(i);\n        if (pkg.version.equals(version)) {\n          return pkg;\n        }\n        if (PackageUtils.compareVersions(latest.version, pkg.version) <= 0) {\n          latest = pkg;\n        }\n      }\n    }\n    if (version == null || version.equalsIgnoreCase(PackageUtils.LATEST) || version.equalsIgnoreCase(PackagePluginHolder.LATEST)) {\n      return latest;\n    } else return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30544190fa1b1f7b98cd8e9b84dd86060d89bdcd","date":1596533005,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#getPackageInstance(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#getPackageInstance(String,String).mjava","sourceNew":"  /**\n   * Get the installed instance of a specific version of a package. If version is null, PackageUtils.LATEST or PackagePluginHolder.LATEST,\n   * then it returns the highest version available in the system for the package.\n   */\n  public SolrPackageInstance getPackageInstance(String packageName, String version) {\n    fetchInstalledPackageInstances();\n    List<SolrPackageInstance> versions = packages.get(packageName);\n    SolrPackageInstance latest = null;\n    if (versions != null && !versions.isEmpty()) {\n      latest = versions.get(0);\n      for (int i=0; i < versions.size(); i++) {\n        SolrPackageInstance pkg = versions.get(i);\n        if (pkg.version.equals(version)) {\n          return pkg;\n        }\n        if (PackageUtils.compareVersions(latest.version, pkg.version) <= 0) {\n          latest = pkg;\n        }\n      }\n    }\n    if (version == null || version.equalsIgnoreCase(PackageUtils.LATEST) || version.equalsIgnoreCase(PackageLoader.LATEST)) {\n      return latest;\n    } else return null;\n  }\n\n","sourceOld":"  /**\n   * Get the installed instance of a specific version of a package. If version is null, PackageUtils.LATEST or PackagePluginHolder.LATEST,\n   * then it returns the highest version available in the system for the package.\n   */\n  public SolrPackageInstance getPackageInstance(String packageName, String version) {\n    fetchInstalledPackageInstances();\n    List<SolrPackageInstance> versions = packages.get(packageName);\n    SolrPackageInstance latest = null;\n    if (versions != null && !versions.isEmpty()) {\n      latest = versions.get(0);\n      for (int i=0; i<versions.size(); i++) {\n        SolrPackageInstance pkg = versions.get(i);\n        if (pkg.version.equals(version)) {\n          return pkg;\n        }\n        if (PackageUtils.compareVersions(latest.version, pkg.version) <= 0) {\n          latest = pkg;\n        }\n      }\n    }\n    if (version == null || version.equalsIgnoreCase(PackageUtils.LATEST) || version.equalsIgnoreCase(PackageLoader.LATEST)) {\n      return latest;\n    } else return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30544190fa1b1f7b98cd8e9b84dd86060d89bdcd":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["120bc33d5cbe83eca2e5fce597baf4fef208d579"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"120bc33d5cbe83eca2e5fce597baf4fef208d579":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30544190fa1b1f7b98cd8e9b84dd86060d89bdcd"]},"commit2Childs":{"30544190fa1b1f7b98cd8e9b84dd86060d89bdcd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["30544190fa1b1f7b98cd8e9b84dd86060d89bdcd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["120bc33d5cbe83eca2e5fce597baf4fef208d579"],"120bc33d5cbe83eca2e5fce597baf4fef208d579":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}