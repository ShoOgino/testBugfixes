{"path":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#cleanupOldIndexDirectories(String,String).mjava","commits":[{"id":"e0bbfc7e96e0cf26b51dcefe3b2e4c93fe34e8c0","date":1433439403,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#cleanupOldIndexDirectories(String,String).mjava","pathOld":"/dev/null","sourceNew":"  public void cleanupOldIndexDirectories(final String dataDirPath, final String currentIndexDirPath) {\n    File dataDir = new File(dataDirPath);\n    if (!dataDir.isDirectory()) {\n      log.warn(\"{} does not point to a valid data directory; skipping clean-up of old index directories.\", dataDirPath);\n      return;\n    }\n\n    final File currentIndexDir = new File(currentIndexDirPath);\n    File[] oldIndexDirs = dataDir.listFiles(new FileFilter() {\n      @Override\n      public boolean accept(File file) {\n        String fileName = file.getName();\n        return file.isDirectory() &&\n               !file.equals(currentIndexDir) &&\n               (fileName.equals(\"index\") || fileName.matches(INDEX_W_TIMESTAMP_REGEX));\n      }\n    });\n\n    if (oldIndexDirs == null || oldIndexDirs.length == 0)\n      return; // nothing to do (no log message needed)\n\n    log.info(\"Found {} old index directories to clean-up under {}\", oldIndexDirs.length, dataDirPath);\n    for (File dir : oldIndexDirs) {\n\n      String dirToRmPath = dir.getAbsolutePath();\n      try {\n        if (deleteOldIndexDirectory(dirToRmPath)) {\n          log.info(\"Deleted old index directory: {}\", dirToRmPath);\n        } else {\n          log.warn(\"Delete old index directory {} failed.\", dirToRmPath);\n        }\n      } catch (IOException ioExc) {\n        log.error(\"Failed to delete old directory {} due to: {}\", dir.getAbsolutePath(), ioExc.toString());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d62172dd2fc1195c7e475550ac394a9948a18ae","date":1474974102,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#cleanupOldIndexDirectories(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#cleanupOldIndexDirectories(String,String).mjava","sourceNew":"  public void cleanupOldIndexDirectories(final String dataDirPath, final String currentIndexDirPath) {\n    File dataDir = new File(dataDirPath);\n    if (!dataDir.isDirectory()) {\n      log.debug(\"{} does not point to a valid data directory; skipping clean-up of old index directories.\", dataDirPath);\n      return;\n    }\n\n    final File currentIndexDir = new File(currentIndexDirPath);\n    File[] oldIndexDirs = dataDir.listFiles(new FileFilter() {\n      @Override\n      public boolean accept(File file) {\n        String fileName = file.getName();\n        return file.isDirectory() &&\n               !file.equals(currentIndexDir) &&\n               (fileName.equals(\"index\") || fileName.matches(INDEX_W_TIMESTAMP_REGEX));\n      }\n    });\n\n    if (oldIndexDirs == null || oldIndexDirs.length == 0)\n      return; // nothing to do (no log message needed)\n\n    log.info(\"Found {} old index directories to clean-up under {}\", oldIndexDirs.length, dataDirPath);\n    for (File dir : oldIndexDirs) {\n\n      String dirToRmPath = dir.getAbsolutePath();\n      try {\n        if (deleteOldIndexDirectory(dirToRmPath)) {\n          log.info(\"Deleted old index directory: {}\", dirToRmPath);\n        } else {\n          log.warn(\"Delete old index directory {} failed.\", dirToRmPath);\n        }\n      } catch (IOException ioExc) {\n        log.error(\"Failed to delete old directory {} due to: {}\", dir.getAbsolutePath(), ioExc.toString());\n      }\n    }\n  }\n\n","sourceOld":"  public void cleanupOldIndexDirectories(final String dataDirPath, final String currentIndexDirPath) {\n    File dataDir = new File(dataDirPath);\n    if (!dataDir.isDirectory()) {\n      log.warn(\"{} does not point to a valid data directory; skipping clean-up of old index directories.\", dataDirPath);\n      return;\n    }\n\n    final File currentIndexDir = new File(currentIndexDirPath);\n    File[] oldIndexDirs = dataDir.listFiles(new FileFilter() {\n      @Override\n      public boolean accept(File file) {\n        String fileName = file.getName();\n        return file.isDirectory() &&\n               !file.equals(currentIndexDir) &&\n               (fileName.equals(\"index\") || fileName.matches(INDEX_W_TIMESTAMP_REGEX));\n      }\n    });\n\n    if (oldIndexDirs == null || oldIndexDirs.length == 0)\n      return; // nothing to do (no log message needed)\n\n    log.info(\"Found {} old index directories to clean-up under {}\", oldIndexDirs.length, dataDirPath);\n    for (File dir : oldIndexDirs) {\n\n      String dirToRmPath = dir.getAbsolutePath();\n      try {\n        if (deleteOldIndexDirectory(dirToRmPath)) {\n          log.info(\"Deleted old index directory: {}\", dirToRmPath);\n        } else {\n          log.warn(\"Delete old index directory {} failed.\", dirToRmPath);\n        }\n      } catch (IOException ioExc) {\n        log.error(\"Failed to delete old directory {} due to: {}\", dir.getAbsolutePath(), ioExc.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#cleanupOldIndexDirectories(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#cleanupOldIndexDirectories(String,String).mjava","sourceNew":"  public void cleanupOldIndexDirectories(final String dataDirPath, final String currentIndexDirPath) {\n    File dataDir = new File(dataDirPath);\n    if (!dataDir.isDirectory()) {\n      log.debug(\"{} does not point to a valid data directory; skipping clean-up of old index directories.\", dataDirPath);\n      return;\n    }\n\n    final File currentIndexDir = new File(currentIndexDirPath);\n    File[] oldIndexDirs = dataDir.listFiles(new FileFilter() {\n      @Override\n      public boolean accept(File file) {\n        String fileName = file.getName();\n        return file.isDirectory() &&\n               !file.equals(currentIndexDir) &&\n               (fileName.equals(\"index\") || fileName.matches(INDEX_W_TIMESTAMP_REGEX));\n      }\n    });\n\n    if (oldIndexDirs == null || oldIndexDirs.length == 0)\n      return; // nothing to do (no log message needed)\n\n    log.info(\"Found {} old index directories to clean-up under {}\", oldIndexDirs.length, dataDirPath);\n    for (File dir : oldIndexDirs) {\n\n      String dirToRmPath = dir.getAbsolutePath();\n      try {\n        if (deleteOldIndexDirectory(dirToRmPath)) {\n          log.info(\"Deleted old index directory: {}\", dirToRmPath);\n        } else {\n          log.warn(\"Delete old index directory {} failed.\", dirToRmPath);\n        }\n      } catch (IOException ioExc) {\n        log.error(\"Failed to delete old directory {} due to: {}\", dir.getAbsolutePath(), ioExc.toString());\n      }\n    }\n  }\n\n","sourceOld":"  public void cleanupOldIndexDirectories(final String dataDirPath, final String currentIndexDirPath) {\n    File dataDir = new File(dataDirPath);\n    if (!dataDir.isDirectory()) {\n      log.warn(\"{} does not point to a valid data directory; skipping clean-up of old index directories.\", dataDirPath);\n      return;\n    }\n\n    final File currentIndexDir = new File(currentIndexDirPath);\n    File[] oldIndexDirs = dataDir.listFiles(new FileFilter() {\n      @Override\n      public boolean accept(File file) {\n        String fileName = file.getName();\n        return file.isDirectory() &&\n               !file.equals(currentIndexDir) &&\n               (fileName.equals(\"index\") || fileName.matches(INDEX_W_TIMESTAMP_REGEX));\n      }\n    });\n\n    if (oldIndexDirs == null || oldIndexDirs.length == 0)\n      return; // nothing to do (no log message needed)\n\n    log.info(\"Found {} old index directories to clean-up under {}\", oldIndexDirs.length, dataDirPath);\n    for (File dir : oldIndexDirs) {\n\n      String dirToRmPath = dir.getAbsolutePath();\n      try {\n        if (deleteOldIndexDirectory(dirToRmPath)) {\n          log.info(\"Deleted old index directory: {}\", dirToRmPath);\n        } else {\n          log.warn(\"Delete old index directory {} failed.\", dirToRmPath);\n        }\n      } catch (IOException ioExc) {\n        log.error(\"Failed to delete old directory {} due to: {}\", dir.getAbsolutePath(), ioExc.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#cleanupOldIndexDirectories(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#cleanupOldIndexDirectories(String,String).mjava","sourceNew":"  public void cleanupOldIndexDirectories(final String dataDirPath, final String currentIndexDirPath) {\n    File dataDir = new File(dataDirPath);\n    if (!dataDir.isDirectory()) {\n      log.debug(\"{} does not point to a valid data directory; skipping clean-up of old index directories.\", dataDirPath);\n      return;\n    }\n\n    final File currentIndexDir = new File(currentIndexDirPath);\n    File[] oldIndexDirs = dataDir.listFiles(new FileFilter() {\n      @Override\n      public boolean accept(File file) {\n        String fileName = file.getName();\n        return file.isDirectory() &&\n               !file.equals(currentIndexDir) &&\n               (fileName.equals(\"index\") || fileName.matches(INDEX_W_TIMESTAMP_REGEX));\n      }\n    });\n\n    if (oldIndexDirs == null || oldIndexDirs.length == 0)\n      return; // nothing to do (no log message needed)\n\n    log.info(\"Found {} old index directories to clean-up under {}\", oldIndexDirs.length, dataDirPath);\n    for (File dir : oldIndexDirs) {\n\n      String dirToRmPath = dir.getAbsolutePath();\n      try {\n        if (deleteOldIndexDirectory(dirToRmPath)) {\n          log.info(\"Deleted old index directory: {}\", dirToRmPath);\n        } else {\n          log.warn(\"Delete old index directory {} failed.\", dirToRmPath);\n        }\n      } catch (IOException ioExc) {\n        log.error(\"Failed to delete old directory {} due to: {}\", dir.getAbsolutePath(), ioExc.toString());\n      }\n    }\n  }\n\n","sourceOld":"  public void cleanupOldIndexDirectories(final String dataDirPath, final String currentIndexDirPath) {\n    File dataDir = new File(dataDirPath);\n    if (!dataDir.isDirectory()) {\n      log.warn(\"{} does not point to a valid data directory; skipping clean-up of old index directories.\", dataDirPath);\n      return;\n    }\n\n    final File currentIndexDir = new File(currentIndexDirPath);\n    File[] oldIndexDirs = dataDir.listFiles(new FileFilter() {\n      @Override\n      public boolean accept(File file) {\n        String fileName = file.getName();\n        return file.isDirectory() &&\n               !file.equals(currentIndexDir) &&\n               (fileName.equals(\"index\") || fileName.matches(INDEX_W_TIMESTAMP_REGEX));\n      }\n    });\n\n    if (oldIndexDirs == null || oldIndexDirs.length == 0)\n      return; // nothing to do (no log message needed)\n\n    log.info(\"Found {} old index directories to clean-up under {}\", oldIndexDirs.length, dataDirPath);\n    for (File dir : oldIndexDirs) {\n\n      String dirToRmPath = dir.getAbsolutePath();\n      try {\n        if (deleteOldIndexDirectory(dirToRmPath)) {\n          log.info(\"Deleted old index directory: {}\", dirToRmPath);\n        } else {\n          log.warn(\"Delete old index directory {} failed.\", dirToRmPath);\n        }\n      } catch (IOException ioExc) {\n        log.error(\"Failed to delete old directory {} due to: {}\", dir.getAbsolutePath(), ioExc.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad28156288ac00b91352582904d97e6653205757","date":1486850922,"type":5,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#cleanupOldIndexDirectories(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#cleanupOldIndexDirectories(String,String).mjava","sourceNew":"  public void cleanupOldIndexDirectories(final String dataDirPath, final String currentIndexDirPath, boolean afterCoreReload) {\n    File dataDir = new File(dataDirPath);\n    if (!dataDir.isDirectory()) {\n      log.debug(\"{} does not point to a valid data directory; skipping clean-up of old index directories.\", dataDirPath);\n      return;\n    }\n\n    final File currentIndexDir = new File(currentIndexDirPath);\n    File[] oldIndexDirs = dataDir.listFiles(new FileFilter() {\n      @Override\n      public boolean accept(File file) {\n        String fileName = file.getName();\n        return file.isDirectory() &&\n               !file.equals(currentIndexDir) &&\n               (fileName.equals(\"index\") || fileName.matches(INDEX_W_TIMESTAMP_REGEX));\n      }\n    });\n\n    if (oldIndexDirs == null || oldIndexDirs.length == 0)\n      return; // nothing to do (no log message needed)\n\n    List<File> dirsList = Arrays.asList(oldIndexDirs);\n    Collections.sort(dirsList, Collections.reverseOrder());\n    \n    int i = 0;\n    if (afterCoreReload) {\n      log.info(\"Will not remove most recent old directory after reload {}\", oldIndexDirs[0]);\n      i = 1;\n    }\n    log.info(\"Found {} old index directories to clean-up under {} afterReload={}\", oldIndexDirs.length - i, dataDirPath, afterCoreReload);\n    for (; i < dirsList.size(); i++) {\n      File dir = dirsList.get(i);\n      String dirToRmPath = dir.getAbsolutePath();\n      try {\n        if (deleteOldIndexDirectory(dirToRmPath)) {\n          log.info(\"Deleted old index directory: {}\", dirToRmPath);\n        } else {\n          log.warn(\"Delete old index directory {} failed.\", dirToRmPath);\n        }\n      } catch (IOException ioExc) {\n        log.error(\"Failed to delete old directory {} due to: {}\", dir.getAbsolutePath(), ioExc.toString());\n      }\n    }\n  }\n\n","sourceOld":"  public void cleanupOldIndexDirectories(final String dataDirPath, final String currentIndexDirPath) {\n    File dataDir = new File(dataDirPath);\n    if (!dataDir.isDirectory()) {\n      log.debug(\"{} does not point to a valid data directory; skipping clean-up of old index directories.\", dataDirPath);\n      return;\n    }\n\n    final File currentIndexDir = new File(currentIndexDirPath);\n    File[] oldIndexDirs = dataDir.listFiles(new FileFilter() {\n      @Override\n      public boolean accept(File file) {\n        String fileName = file.getName();\n        return file.isDirectory() &&\n               !file.equals(currentIndexDir) &&\n               (fileName.equals(\"index\") || fileName.matches(INDEX_W_TIMESTAMP_REGEX));\n      }\n    });\n\n    if (oldIndexDirs == null || oldIndexDirs.length == 0)\n      return; // nothing to do (no log message needed)\n\n    log.info(\"Found {} old index directories to clean-up under {}\", oldIndexDirs.length, dataDirPath);\n    for (File dir : oldIndexDirs) {\n\n      String dirToRmPath = dir.getAbsolutePath();\n      try {\n        if (deleteOldIndexDirectory(dirToRmPath)) {\n          log.info(\"Deleted old index directory: {}\", dirToRmPath);\n        } else {\n          log.warn(\"Delete old index directory {} failed.\", dirToRmPath);\n        }\n      } catch (IOException ioExc) {\n        log.error(\"Failed to delete old directory {} due to: {}\", dir.getAbsolutePath(), ioExc.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad28156288ac00b91352582904d97e6653205757":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e0bbfc7e96e0cf26b51dcefe3b2e4c93fe34e8c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d62172dd2fc1195c7e475550ac394a9948a18ae":["e0bbfc7e96e0cf26b51dcefe3b2e4c93fe34e8c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e0bbfc7e96e0cf26b51dcefe3b2e4c93fe34e8c0","0d62172dd2fc1195c7e475550ac394a9948a18ae"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["e0bbfc7e96e0cf26b51dcefe3b2e4c93fe34e8c0","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad28156288ac00b91352582904d97e6653205757"]},"commit2Childs":{"ad28156288ac00b91352582904d97e6653205757":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e0bbfc7e96e0cf26b51dcefe3b2e4c93fe34e8c0":["0d62172dd2fc1195c7e475550ac394a9948a18ae","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"0d62172dd2fc1195c7e475550ac394a9948a18ae":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ad28156288ac00b91352582904d97e6653205757","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0bbfc7e96e0cf26b51dcefe3b2e4c93fe34e8c0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}