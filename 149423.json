{"path":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/DateUtil#parseDate(String).mjava","sourceNew":"  /**\n   * Returns a formatter that can be use by the current thread if needed to\n   * convert Date objects to the Internal representation.\n   *\n   * @param d The input date to parse\n   * @return The parsed {@link java.util.Date}\n   * @throws java.text.ParseException If the input can't be parsed\n   * @throws org.apache.commons.httpclient.util.DateParseException\n   *                                  If the input can't be parsed\n   */\n  public static Date parseDate(String d) throws ParseException {\n    return parseDate(d, DEFAULT_DATE_FORMATS);\n  }\n\n","sourceOld":"  /**\n   * Returns a formatter that can be use by the current thread if needed to\n   * convert Date objects to the Internal representation.\n   *\n   * @param d The input date to parse\n   * @return The parsed {@link java.util.Date}\n   * @throws java.text.ParseException If the input can't be parsed\n   * @throws org.apache.commons.httpclient.util.DateParseException\n   *                                  If the input can't be parsed\n   */\n  public static Date parseDate(String d) throws ParseException {\n    return parseDate(d, DEFAULT_DATE_FORMATS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/DateUtil#parseDate(String).mjava","sourceNew":"  /**\n   * Returns a formatter that can be use by the current thread if needed to\n   * convert Date objects to the Internal representation.\n   *\n   * @param d The input date to parse\n   * @return The parsed {@link java.util.Date}\n   * @throws java.text.ParseException If the input can't be parsed\n   * @throws org.apache.commons.httpclient.util.DateParseException\n   *                                  If the input can't be parsed\n   */\n  public static Date parseDate(String d) throws ParseException {\n    return parseDate(d, DEFAULT_DATE_FORMATS);\n  }\n\n","sourceOld":"  /**\n   * Returns a formatter that can be use by the current thread if needed to\n   * convert Date objects to the Internal representation.\n   *\n   * @param d The input date to parse\n   * @return The parsed {@link java.util.Date}\n   * @throws java.text.ParseException If the input can't be parsed\n   * @throws org.apache.commons.httpclient.util.DateParseException\n   *                                  If the input can't be parsed\n   */\n  public static Date parseDate(String d) throws ParseException {\n    return parseDate(d, DEFAULT_DATE_FORMATS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/DateUtil#parseDate(String).mjava","sourceNew":"  /**\n   * Returns a formatter that can be use by the current thread if needed to\n   * convert Date objects to the Internal representation.\n   *\n   * @param d The input date to parse\n   * @return The parsed {@link java.util.Date}\n   * @throws java.text.ParseException If the input can't be parsed\n   * @throws org.apache.commons.httpclient.util.DateParseException\n   *                                  If the input can't be parsed\n   */\n  public static Date parseDate(String d) throws ParseException {\n    return parseDate(d, DEFAULT_DATE_FORMATS);\n  }\n\n","sourceOld":"  /**\n   * Returns a formatter that can be use by the current thread if needed to\n   * convert Date objects to the Internal representation.\n   *\n   * @param d The input date to parse\n   * @return The parsed {@link java.util.Date}\n   * @throws java.text.ParseException If the input can't be parsed\n   * @throws org.apache.commons.httpclient.util.DateParseException\n   *                                  If the input can't be parsed\n   */\n  public static Date parseDate(String d) throws ParseException {\n    return parseDate(d, DEFAULT_DATE_FORMATS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"578eff0bc5aee20ceab0bb85d2e639e93d68c952","date":1335146102,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String).mjava","sourceNew":"  /**\n   * Returns a formatter that can be use by the current thread if needed to\n   * convert Date objects to the Internal representation.\n   *\n   * @param d The input date to parse\n   * @return The parsed {@link java.util.Date}\n   * @throws java.text.ParseException If the input can't be parsed\n   */\n  public static Date parseDate(String d) throws ParseException {\n    return parseDate(d, DEFAULT_DATE_FORMATS);\n  }\n\n","sourceOld":"  /**\n   * Returns a formatter that can be use by the current thread if needed to\n   * convert Date objects to the Internal representation.\n   *\n   * @param d The input date to parse\n   * @return The parsed {@link java.util.Date}\n   * @throws java.text.ParseException If the input can't be parsed\n   * @throws org.apache.commons.httpclient.util.DateParseException\n   *                                  If the input can't be parsed\n   */\n  public static Date parseDate(String d) throws ParseException {\n    return parseDate(d, DEFAULT_DATE_FORMATS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractionDateUtil#parseDate(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String).mjava","sourceNew":"  /**\n   * Returns a formatter that can be use by the current thread if needed to\n   * convert Date objects to the Internal representation.\n   *\n   * @param d The input date to parse\n   * @return The parsed {@link java.util.Date}\n   * @throws java.text.ParseException If the input can't be parsed\n   */\n  public static Date parseDate(String d) throws ParseException {\n    return parseDate(d, DEFAULT_DATE_FORMATS);\n  }\n\n","sourceOld":"  /**\n   * Returns a formatter that can be use by the current thread if needed to\n   * convert Date objects to the Internal representation.\n   *\n   * @param d The input date to parse\n   * @return The parsed {@link java.util.Date}\n   * @throws java.text.ParseException If the input can't be parsed\n   */\n  public static Date parseDate(String d) throws ParseException {\n    return parseDate(d, DEFAULT_DATE_FORMATS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba","date":1459362686,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String).mjava","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractionDateUtil#parseDate(String).mjava","sourceNew":"  /**\n   * Returns a formatter that can be use by the current thread if needed to\n   * convert Date objects to the Internal representation.\n   *\n   * @param d The input date to parse\n   * @return The parsed {@link java.util.Date}\n   * @throws java.text.ParseException If the input can't be parsed\n   */\n  public static Date parseDate(String d) throws ParseException {\n    return parseDate(d, DEFAULT_DATE_FORMATS);\n  }\n\n","sourceOld":"  /**\n   * Returns a formatter that can be use by the current thread if needed to\n   * convert Date objects to the Internal representation.\n   *\n   * @param d The input date to parse\n   * @return The parsed {@link java.util.Date}\n   * @throws java.text.ParseException If the input can't be parsed\n   */\n  public static Date parseDate(String d) throws ParseException {\n    return parseDate(d, DEFAULT_DATE_FORMATS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69","date":1459364429,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractionDateUtil#parseDate(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String).mjava","sourceNew":"  /**\n   * Returns a formatter that can be use by the current thread if needed to\n   * convert Date objects to the Internal representation.\n   *\n   * @param d The input date to parse\n   * @return The parsed {@link java.util.Date}\n   * @throws java.text.ParseException If the input can't be parsed\n   */\n  public static Date parseDate(String d) throws ParseException {\n    return parseDate(d, DEFAULT_DATE_FORMATS);\n  }\n\n","sourceOld":"  /**\n   * Returns a formatter that can be use by the current thread if needed to\n   * convert Date objects to the Internal representation.\n   *\n   * @param d The input date to parse\n   * @return The parsed {@link java.util.Date}\n   * @throws java.text.ParseException If the input can't be parsed\n   */\n  public static Date parseDate(String d) throws ParseException {\n    return parseDate(d, DEFAULT_DATE_FORMATS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"578eff0bc5aee20ceab0bb85d2e639e93d68c952":["c26f00b574427b55127e869b935845554afde1fa"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["578eff0bc5aee20ceab0bb85d2e639e93d68c952"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69":["7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69"]},"commit2Childs":{"578eff0bc5aee20ceab0bb85d2e639e93d68c952":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["578eff0bc5aee20ceab0bb85d2e639e93d68c952"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba":["7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}