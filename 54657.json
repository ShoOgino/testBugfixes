{"path":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/MinimumShouldMatchIntervalsSource.MinimumShouldMatchIntervalIterator#MinimumShouldMatchIntervalIterator(Collection[IntervalIterator],int).mjava","commits":[{"id":"a0936d9ca6b07dcd85961f5c9734232bc34813d3","date":1546870120,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/MinimumShouldMatchIntervalsSource.MinimumShouldMatchIntervalIterator#MinimumShouldMatchIntervalIterator(Collection[IntervalIterator],int).mjava","pathOld":"/dev/null","sourceNew":"    MinimumShouldMatchIntervalIterator(Collection<IntervalIterator> subs, int minShouldMatch) {\n      this.disiQueue = new DisiPriorityQueue(subs.size());\n      float mc = 0;\n      for (IntervalIterator it : subs) {\n        this.disiQueue.add(new DisiWrapper(it));\n        mc += it.matchCost();\n      }\n      this.approximation = new DisjunctionDISIApproximation(disiQueue);\n      this.matchCost = mc;\n      this.minShouldMatch = minShouldMatch;\n      this.innerPositions = new int[minShouldMatch * 2];\n\n      this.proximityQueue = new PriorityQueue<IntervalIterator>(minShouldMatch) {\n        @Override\n        protected boolean lessThan(IntervalIterator a, IntervalIterator b) {\n          return a.start() < b.start() || (a.start() == b.start() && a.end() >= b.end());\n        }\n      };\n      this.backgroundQueue = new PriorityQueue<IntervalIterator>(subs.size()) {\n        @Override\n        protected boolean lessThan(IntervalIterator a, IntervalIterator b) {\n          return a.end() < b.end() || (a.end() == b.end() && a.start() >= b.start());\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/MinimumShouldMatchIntervalsSource.MinimumShouldMatchIntervalIterator#MinimumShouldMatchIntervalIterator(Collection[IntervalIterator],int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/MinimumShouldMatchIntervalsSource.MinimumShouldMatchIntervalIterator#MinimumShouldMatchIntervalIterator(Collection[IntervalIterator],int).mjava","sourceNew":"    MinimumShouldMatchIntervalIterator(Collection<IntervalIterator> subs, int minShouldMatch) {\n      this.disiQueue = new DisiPriorityQueue(subs.size());\n      float mc = 0;\n      for (IntervalIterator it : subs) {\n        this.disiQueue.add(new DisiWrapper(it));\n        mc += it.matchCost();\n      }\n      this.approximation = new DisjunctionDISIApproximation(disiQueue);\n      this.matchCost = mc;\n      this.minShouldMatch = minShouldMatch;\n      this.innerPositions = new int[minShouldMatch * 2];\n\n      this.proximityQueue = new PriorityQueue<IntervalIterator>(minShouldMatch) {\n        @Override\n        protected boolean lessThan(IntervalIterator a, IntervalIterator b) {\n          return a.start() < b.start() || (a.start() == b.start() && a.end() >= b.end());\n        }\n      };\n      this.backgroundQueue = new PriorityQueue<IntervalIterator>(subs.size()) {\n        @Override\n        protected boolean lessThan(IntervalIterator a, IntervalIterator b) {\n          return a.end() < b.end() || (a.end() == b.end() && a.start() >= b.start());\n        }\n      };\n    }\n\n","sourceOld":"    MinimumShouldMatchIntervalIterator(Collection<IntervalIterator> subs, int minShouldMatch) {\n      this.disiQueue = new DisiPriorityQueue(subs.size());\n      float mc = 0;\n      for (IntervalIterator it : subs) {\n        this.disiQueue.add(new DisiWrapper(it));\n        mc += it.matchCost();\n      }\n      this.approximation = new DisjunctionDISIApproximation(disiQueue);\n      this.matchCost = mc;\n      this.minShouldMatch = minShouldMatch;\n      this.innerPositions = new int[minShouldMatch * 2];\n\n      this.proximityQueue = new PriorityQueue<IntervalIterator>(minShouldMatch) {\n        @Override\n        protected boolean lessThan(IntervalIterator a, IntervalIterator b) {\n          return a.start() < b.start() || (a.start() == b.start() && a.end() >= b.end());\n        }\n      };\n      this.backgroundQueue = new PriorityQueue<IntervalIterator>(subs.size()) {\n        @Override\n        protected boolean lessThan(IntervalIterator a, IntervalIterator b) {\n          return a.end() < b.end() || (a.end() == b.end() && a.start() >= b.start());\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["a0936d9ca6b07dcd85961f5c9734232bc34813d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0936d9ca6b07dcd85961f5c9734232bc34813d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0936d9ca6b07dcd85961f5c9734232bc34813d3"],"a0936d9ca6b07dcd85961f5c9734232bc34813d3":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}