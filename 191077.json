{"path":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,Properties).mjava","commits":[{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,Properties).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * CoreDescriptor - create a core descriptor given default properties from a core.properties file. This will be\n   * used in the \"solr.xml-less (See SOLR-4196) world where there are no &lt;core&gt; &lt;/core&gt; tags at all, thus  much\n   * of the initialization that used to be done when reading solr.xml needs to be done here instead, particularly\n   * setting any defaults (e.g. schema.xml, directories, whatever).\n   *\n   * @param container - the CoreContainer that holds all the information about our cores, loaded, lazy etc.\n   * @param propsIn - A properties structure \"core.properties\" found while walking the file tree to discover cores.\n   *                  Any properties set in this param will overwrite the any defaults.\n   */\n  public CoreDescriptor(CoreContainer container, Properties propsIn) {\n    this(container);\n\n    // Set some default, normalize a directory or two\n    doInit(propsIn.getProperty(CORE_NAME), propsIn.getProperty(CORE_INSTDIR));\n\n    coreProperties.putAll(propsIn);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,Properties).mjava","sourceNew":null,"sourceOld":"  /**\n   * CoreDescriptor - create a core descriptor given default properties from a core.properties file. This will be\n   * used in the \"solr.xml-less (See SOLR-4196) world where there are no &lt;core&gt; &lt;/core&gt; tags at all, thus  much\n   * of the initialization that used to be done when reading solr.xml needs to be done here instead, particularly\n   * setting any defaults (e.g. schema.xml, directories, whatever).\n   *\n   * @param container - the CoreContainer that holds all the information about our cores, loaded, lazy etc.\n   * @param propsIn - A properties structure \"core.properties\" found while walking the file tree to discover cores.\n   *                  Any properties set in this param will overwrite the any defaults.\n   */\n  public CoreDescriptor(CoreContainer container, Properties propsIn) {\n    this(container);\n\n    // Set some default, normalize a directory or two\n    doInit(propsIn.getProperty(CORE_NAME), propsIn.getProperty(CORE_INSTDIR));\n\n    coreProperties.putAll(propsIn);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,Properties).mjava","sourceNew":null,"sourceOld":"  /**\n   * CoreDescriptor - create a core descriptor given default properties from a core.properties file. This will be\n   * used in the \"solr.xml-less (See SOLR-4196) world where there are no &lt;core&gt; &lt;/core&gt; tags at all, thus  much\n   * of the initialization that used to be done when reading solr.xml needs to be done here instead, particularly\n   * setting any defaults (e.g. schema.xml, directories, whatever).\n   *\n   * @param container - the CoreContainer that holds all the information about our cores, loaded, lazy etc.\n   * @param propsIn - A properties structure \"core.properties\" found while walking the file tree to discover cores.\n   *                  Any properties set in this param will overwrite the any defaults.\n   */\n  public CoreDescriptor(CoreContainer container, Properties propsIn) {\n    this(container);\n\n    // Set some default, normalize a directory or two\n    doInit(propsIn.getProperty(CORE_NAME), propsIn.getProperty(CORE_INSTDIR));\n\n    coreProperties.putAll(propsIn);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a837c064b67fa63a9394136e31218b908cdcf783","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["a837c064b67fa63a9394136e31218b908cdcf783"],"a837c064b67fa63a9394136e31218b908cdcf783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a837c064b67fa63a9394136e31218b908cdcf783"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a837c064b67fa63a9394136e31218b908cdcf783":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}