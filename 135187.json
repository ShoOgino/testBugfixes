{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/FiniteStringsIterator#FiniteStringsIterator(Automaton,int,int).mjava","commits":[{"id":"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db","date":1486463279,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/FiniteStringsIterator#FiniteStringsIterator(Automaton,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructor.\n   *\n   * @param a Automaton to create finite string from.\n   * @param startState The starting state for each path.\n   * @param endState The state where each path should stop or -1 if only accepted states should be final.\n   */\n  public FiniteStringsIterator(Automaton a, int startState, int endState) {\n    this.a = a;\n    this.endState = endState;\n    this.nodes = new PathNode[16];\n    for (int i = 0, end = nodes.length; i < end; i++) {\n      nodes[i] = new PathNode();\n    }\n    this.string = new IntsRefBuilder();\n    this.pathStates = new BitSet(a.getNumStates());\n    this.string.setLength(0);\n    this.emitEmptyString = a.isAccept(0);\n\n    // Start iteration with node startState.\n    if (a.getNumTransitions(startState) > 0) {\n      pathStates.set(startState);\n      nodes[0].resetState(a, startState);\n      string.append(startState);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e0d75d7d3cda2b33e79d0eb0e716169cebec4db"],"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e0d75d7d3cda2b33e79d0eb0e716169cebec4db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}