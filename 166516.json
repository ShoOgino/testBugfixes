{"path":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,boolean,boolean).mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,boolean,boolean).mjava","pathOld":"lucene/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,boolean,boolean).mjava","sourceNew":"  FieldQuery( Query query, boolean phraseHighlight, boolean fieldMatch ){\n    this.fieldMatch = fieldMatch;\n    Set<Query> flatQueries = new HashSet<Query>();\n    flatten( query, flatQueries );\n    saveTerms( flatQueries );\n    Collection<Query> expandQueries = expand( flatQueries );\n\n    for( Query flatQuery : expandQueries ){\n      QueryPhraseMap rootMap = getRootMap( flatQuery );\n      rootMap.add( flatQuery );\n      if( !phraseHighlight && flatQuery instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)flatQuery;\n        if( pq.getTerms().length > 1 ){\n          for( Term term : pq.getTerms() )\n            rootMap.addTerm( term, flatQuery.getBoost() );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  FieldQuery( Query query, boolean phraseHighlight, boolean fieldMatch ){\n    this.fieldMatch = fieldMatch;\n    Set<Query> flatQueries = new HashSet<Query>();\n    flatten( query, flatQueries );\n    saveTerms( flatQueries );\n    Collection<Query> expandQueries = expand( flatQueries );\n\n    for( Query flatQuery : expandQueries ){\n      QueryPhraseMap rootMap = getRootMap( flatQuery );\n      rootMap.add( flatQuery );\n      if( !phraseHighlight && flatQuery instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)flatQuery;\n        if( pq.getTerms().length > 1 ){\n          for( Term term : pq.getTerms() )\n            rootMap.addTerm( term, flatQuery.getBoost() );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b77dee084743b07be452cf7c07c992a225b11146","date":1315532213,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,boolean,boolean).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,boolean,boolean).mjava","sourceNew":"  /** For backwards compatibility you can initialize FieldQuery without\n   * an IndexReader, which is only required to support MultiTermQuery\n   */\n  FieldQuery( Query query, boolean phraseHighlight, boolean fieldMatch ) throws IOException {\n    this (query, null, phraseHighlight, fieldMatch);\n  }\n\n","sourceOld":"  FieldQuery( Query query, boolean phraseHighlight, boolean fieldMatch ){\n    this.fieldMatch = fieldMatch;\n    Set<Query> flatQueries = new HashSet<Query>();\n    flatten( query, flatQueries );\n    saveTerms( flatQueries );\n    Collection<Query> expandQueries = expand( flatQueries );\n\n    for( Query flatQuery : expandQueries ){\n      QueryPhraseMap rootMap = getRootMap( flatQuery );\n      rootMap.add( flatQuery );\n      if( !phraseHighlight && flatQuery instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)flatQuery;\n        if( pq.getTerms().length > 1 ){\n          for( Term term : pq.getTerms() )\n            rootMap.addTerm( term, flatQuery.getBoost() );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,boolean,boolean).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,boolean,boolean).mjava","sourceNew":"  /** For backwards compatibility you can initialize FieldQuery without\n   * an IndexReader, which is only required to support MultiTermQuery\n   */\n  FieldQuery( Query query, boolean phraseHighlight, boolean fieldMatch ) throws IOException {\n    this (query, null, phraseHighlight, fieldMatch);\n  }\n\n","sourceOld":"  /** For backwards compatibility you can initialize FieldQuery without\n   * an IndexReader, which is only required to support MultiTermQuery\n   */\n  FieldQuery( Query query, boolean phraseHighlight, boolean fieldMatch ) throws IOException {\n    this (query, null, phraseHighlight, fieldMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b77dee084743b07be452cf7c07c992a225b11146"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b77dee084743b07be452cf7c07c992a225b11146":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["b77dee084743b07be452cf7c07c992a225b11146"],"b77dee084743b07be452cf7c07c992a225b11146":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}