{"path":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#persistToFile(ByteBuffer,ByteBuffer).mjava","commits":[{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#persistToFile(ByteBuffer,ByteBuffer).mjava","pathOld":"/dev/null","sourceNew":"    private void persistToFile(ByteBuffer data, ByteBuffer meta) throws IOException {\n      synchronized (DistribPackageStore.this) {\n        this.metaData = meta;\n        this.fileData = data;\n        Path realpath = getRealpath(path);\n        File file = realpath.toFile();\n        File parent = file.getParentFile();\n        if (!parent.exists()) {\n          parent.mkdirs();\n        }\n        Map m = (Map) Utils.fromJSON(meta.array());\n        if (m == null || m.isEmpty()) {\n          throw new SolrException(SERVER_ERROR, \"invalid metadata , discarding : \" + path);\n        }\n\n\n        File metdataFile = getRealpath(getMetaPath()).toFile();\n\n        try (FileOutputStream fos = new FileOutputStream(metdataFile)) {\n          fos.write(meta.array(), 0, meta.limit());\n        }\n        IOUtils.fsync(metdataFile.toPath(), false);\n\n        try (FileOutputStream fos = new FileOutputStream(file)) {\n          fos.write(data.array(), 0, data.limit());\n        }\n        log.info(\"persisted a file {} and metadata. sizes {} {}\", path, data.limit(), meta.limit());\n        IOUtils.fsync(file.toPath(), false);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d218decf811b7a0a4d86218c54c79c74a962374b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#persistToFile(ByteBuffer,ByteBuffer).mjava","pathOld":"/dev/null","sourceNew":"    private void persistToFile(ByteBuffer data, ByteBuffer meta) throws IOException {\n      synchronized (DistribPackageStore.this) {\n        this.metaData = meta;\n        this.fileData = data;\n        Path realpath = getRealpath(path);\n        File file = realpath.toFile();\n        File parent = file.getParentFile();\n        if (!parent.exists()) {\n          parent.mkdirs();\n        }\n        Map m = (Map) Utils.fromJSON(meta.array());\n        if (m == null || m.isEmpty()) {\n          throw new SolrException(SERVER_ERROR, \"invalid metadata , discarding : \" + path);\n        }\n\n\n        File metdataFile = getRealpath(getMetaPath()).toFile();\n\n        try (FileOutputStream fos = new FileOutputStream(metdataFile)) {\n          fos.write(meta.array(), 0, meta.limit());\n        }\n        IOUtils.fsync(metdataFile.toPath(), false);\n\n        try (FileOutputStream fos = new FileOutputStream(file)) {\n          fos.write(data.array(), 0, data.limit());\n        }\n        log.info(\"persisted a file {} and metadata. sizes {} {}\", path, data.limit(), meta.limit());\n        IOUtils.fsync(file.toPath(), false);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61f55b4999c3f858f4f4acc9c6dc57af2c1acf99","date":1571689506,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#persistToFile(ByteBuffer,ByteBuffer).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#persistToFile(ByteBuffer,ByteBuffer).mjava","sourceNew":"    private void persistToFile(ByteBuffer data, ByteBuffer meta) throws IOException {\n      synchronized (DistribPackageStore.this) {\n        this.metaData = meta;\n        this.fileData = data;\n        Path realpath = getRealpath(path);\n        File file = realpath.toFile();\n        File parent = file.getParentFile();\n        if (!parent.exists()) {\n          parent.mkdirs();\n        }\n        Map m = (Map) Utils.fromJSON(meta.array(), meta.arrayOffset(), meta.limit());\n        if (m == null || m.isEmpty()) {\n          throw new SolrException(SERVER_ERROR, \"invalid metadata , discarding : \" + path);\n        }\n\n\n        File metdataFile = getRealpath(getMetaPath()).toFile();\n\n        try (FileOutputStream fos = new FileOutputStream(metdataFile)) {\n          fos.write(meta.array(), 0, meta.limit());\n        }\n        IOUtils.fsync(metdataFile.toPath(), false);\n\n        try (FileOutputStream fos = new FileOutputStream(file)) {\n          fos.write(data.array(), 0, data.limit());\n        }\n        log.info(\"persisted a file {} and metadata. sizes {} {}\", path, data.limit(), meta.limit());\n        IOUtils.fsync(file.toPath(), false);\n      }\n    }\n\n","sourceOld":"    private void persistToFile(ByteBuffer data, ByteBuffer meta) throws IOException {\n      synchronized (DistribPackageStore.this) {\n        this.metaData = meta;\n        this.fileData = data;\n        Path realpath = getRealpath(path);\n        File file = realpath.toFile();\n        File parent = file.getParentFile();\n        if (!parent.exists()) {\n          parent.mkdirs();\n        }\n        Map m = (Map) Utils.fromJSON(meta.array());\n        if (m == null || m.isEmpty()) {\n          throw new SolrException(SERVER_ERROR, \"invalid metadata , discarding : \" + path);\n        }\n\n\n        File metdataFile = getRealpath(getMetaPath()).toFile();\n\n        try (FileOutputStream fos = new FileOutputStream(metdataFile)) {\n          fos.write(meta.array(), 0, meta.limit());\n        }\n        IOUtils.fsync(metdataFile.toPath(), false);\n\n        try (FileOutputStream fos = new FileOutputStream(file)) {\n          fos.write(data.array(), 0, data.limit());\n        }\n        log.info(\"persisted a file {} and metadata. sizes {} {}\", path, data.limit(), meta.limit());\n        IOUtils.fsync(file.toPath(), false);\n      }\n    }\n\n","bugFix":null,"bugIntro":["d218decf811b7a0a4d86218c54c79c74a962374b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d218decf811b7a0a4d86218c54c79c74a962374b","date":1578632144,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#persistToFile(ByteBuffer,ByteBuffer).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#persistToFile(ByteBuffer,ByteBuffer).mjava","sourceNew":"    private void persistToFile(ByteBuffer data, ByteBuffer meta) throws IOException {\n      synchronized (DistribPackageStore.this) {\n        this.metaData = meta;\n        this.fileData = data;\n        _persistToFile(solrhome, path, data, meta);\n        log.info(\"persisted a file {} and metadata. sizes {} {}\", path, data.limit(), meta.limit());\n\n      }\n    }\n\n","sourceOld":"    private void persistToFile(ByteBuffer data, ByteBuffer meta) throws IOException {\n      synchronized (DistribPackageStore.this) {\n        this.metaData = meta;\n        this.fileData = data;\n        Path realpath = getRealpath(path);\n        File file = realpath.toFile();\n        File parent = file.getParentFile();\n        if (!parent.exists()) {\n          parent.mkdirs();\n        }\n        Map m = (Map) Utils.fromJSON(meta.array(), meta.arrayOffset(), meta.limit());\n        if (m == null || m.isEmpty()) {\n          throw new SolrException(SERVER_ERROR, \"invalid metadata , discarding : \" + path);\n        }\n\n\n        File metdataFile = getRealpath(getMetaPath()).toFile();\n\n        try (FileOutputStream fos = new FileOutputStream(metdataFile)) {\n          fos.write(meta.array(), 0, meta.limit());\n        }\n        IOUtils.fsync(metdataFile.toPath(), false);\n\n        try (FileOutputStream fos = new FileOutputStream(file)) {\n          fos.write(data.array(), 0, data.limit());\n        }\n        log.info(\"persisted a file {} and metadata. sizes {} {}\", path, data.limit(), meta.limit());\n        IOUtils.fsync(file.toPath(), false);\n      }\n    }\n\n","bugFix":["8476949555f799dff381770c01cfad051a264487","61f55b4999c3f858f4f4acc9c6dc57af2c1acf99"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8f0a7504661c8e51be5c63e87f9d79a36d9116c","date":1578657638,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#persistToFile(ByteBuffer,ByteBuffer).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#persistToFile(ByteBuffer,ByteBuffer).mjava","sourceNew":"    private void persistToFile(ByteBuffer data, ByteBuffer meta) throws IOException {\n      synchronized (DistribPackageStore.this) {\n        this.metaData = meta;\n        this.fileData = data;\n        _persistToFile(solrhome, path, data, meta);\n        log.info(\"persisted a file {} and metadata. sizes {} {}\", path, data.limit(), meta.limit());\n\n      }\n    }\n\n","sourceOld":"    private void persistToFile(ByteBuffer data, ByteBuffer meta) throws IOException {\n      synchronized (DistribPackageStore.this) {\n        this.metaData = meta;\n        this.fileData = data;\n        Path realpath = getRealpath(path);\n        File file = realpath.toFile();\n        File parent = file.getParentFile();\n        if (!parent.exists()) {\n          parent.mkdirs();\n        }\n        Map m = (Map) Utils.fromJSON(meta.array(), meta.arrayOffset(), meta.limit());\n        if (m == null || m.isEmpty()) {\n          throw new SolrException(SERVER_ERROR, \"invalid metadata , discarding : \" + path);\n        }\n\n\n        File metdataFile = getRealpath(getMetaPath()).toFile();\n\n        try (FileOutputStream fos = new FileOutputStream(metdataFile)) {\n          fos.write(meta.array(), 0, meta.limit());\n        }\n        IOUtils.fsync(metdataFile.toPath(), false);\n\n        try (FileOutputStream fos = new FileOutputStream(file)) {\n          fos.write(data.array(), 0, data.limit());\n        }\n        log.info(\"persisted a file {} and metadata. sizes {} {}\", path, data.limit(), meta.limit());\n        IOUtils.fsync(file.toPath(), false);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#persistToFile(ByteBuffer,ByteBuffer).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#persistToFile(ByteBuffer,ByteBuffer).mjava","sourceNew":"    private void persistToFile(ByteBuffer data, ByteBuffer meta) throws IOException {\n      synchronized (DistribPackageStore.this) {\n        this.metaData = meta;\n        this.fileData = data;\n        _persistToFile(solrhome, path, data, meta);\n        if (log.isInfoEnabled()) {\n          log.info(\"persisted a file {} and metadata. sizes {} {}\", path, data.limit(), meta.limit());\n        }\n\n      }\n    }\n\n","sourceOld":"    private void persistToFile(ByteBuffer data, ByteBuffer meta) throws IOException {\n      synchronized (DistribPackageStore.this) {\n        this.metaData = meta;\n        this.fileData = data;\n        _persistToFile(solrhome, path, data, meta);\n        log.info(\"persisted a file {} and metadata. sizes {} {}\", path, data.limit(), meta.limit());\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":["61f55b4999c3f858f4f4acc9c6dc57af2c1acf99","d218decf811b7a0a4d86218c54c79c74a962374b"],"61f55b4999c3f858f4f4acc9c6dc57af2c1acf99":["8476949555f799dff381770c01cfad051a264487"],"140be51d03394488536f4aacedace29f9b318347":["d218decf811b7a0a4d86218c54c79c74a962374b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d218decf811b7a0a4d86218c54c79c74a962374b":["61f55b4999c3f858f4f4acc9c6dc57af2c1acf99"],"8476949555f799dff381770c01cfad051a264487":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140be51d03394488536f4aacedace29f9b318347"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8476949555f799dff381770c01cfad051a264487"]},"commit2Childs":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":[],"61f55b4999c3f858f4f4acc9c6dc57af2c1acf99":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","d218decf811b7a0a4d86218c54c79c74a962374b"],"140be51d03394488536f4aacedace29f9b318347":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8476949555f799dff381770c01cfad051a264487","b0b597c65628ca9e73913a07e81691f8229bae35"],"d218decf811b7a0a4d86218c54c79c74a962374b":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","140be51d03394488536f4aacedace29f9b318347"],"8476949555f799dff381770c01cfad051a264487":["61f55b4999c3f858f4f4acc9c6dc57af2c1acf99","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}