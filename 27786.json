{"path":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetFields#addFields(Document,Iterable[CategoryPath]).mjava","commits":[{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetFields#addFields(Document,Iterable[CategoryPath]).mjava","pathOld":"/dev/null","sourceNew":"  /** Adds the needed facet fields to the document. */\n  public void addFields(Document doc, Iterable<CategoryPath> categories) throws IOException {\n    if (categories == null) {\n      throw new IllegalArgumentException(\"categories should not be null\");\n    }\n\n    // TODO: add reuse capabilities to this class, per CLP objects:\n    // - drill-down field\n    // - counting list field\n    // - DrillDownStream\n    // - CountingListStream\n\n    final Map<CategoryListParams,Iterable<CategoryPath>> categoryLists = createCategoryListMapping(categories);\n\n    // for each CLP we add a different field for drill-down terms as well as for\n    // counting list data.\n    for (Entry<CategoryListParams, Iterable<CategoryPath>> e : categoryLists.entrySet()) {\n      final CategoryListParams clp = e.getKey();\n      final String field = clp.getTerm().field();\n\n      // add the counting list data\n      CategoryListBuilder categoriesPayloadBuilder = getCategoryListBuilder(clp, e.getValue());\n      for (CategoryPath cp : e.getValue()) {\n        int ordinal = taxonomyWriter.addCategory(cp);\n        categoriesPayloadBuilder.handle(ordinal , cp);\n      }\n      HashMap<String,BytesRef> categoriesData = categoriesPayloadBuilder.finish();\n      CountingListStream ts = new CountingListStream();\n      ts.setCategoriesData(categoriesData);\n      doc.add(new Field(field, ts, COUNTING_LIST_PAYLOAD_TYPE));\n      \n      // add the drill-down field\n      DrillDownStream drillDownStream = getDrillDownStream(e.getValue());\n      Field drillDown = new Field(field, drillDownStream, fieldType());\n      doc.add(drillDown);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetFields#addFields(Document,Iterable[CategoryPath]).mjava","pathOld":"/dev/null","sourceNew":"  /** Adds the needed facet fields to the document. */\n  public void addFields(Document doc, Iterable<CategoryPath> categories) throws IOException {\n    if (categories == null) {\n      throw new IllegalArgumentException(\"categories should not be null\");\n    }\n\n    // TODO: add reuse capabilities to this class, per CLP objects:\n    // - drill-down field\n    // - counting list field\n    // - DrillDownStream\n    // - CountingListStream\n\n    final Map<CategoryListParams,Iterable<CategoryPath>> categoryLists = createCategoryListMapping(categories);\n\n    // for each CLP we add a different field for drill-down terms as well as for\n    // counting list data.\n    for (Entry<CategoryListParams, Iterable<CategoryPath>> e : categoryLists.entrySet()) {\n      final CategoryListParams clp = e.getKey();\n      final String field = clp.getTerm().field();\n\n      // add the counting list data\n      CategoryListBuilder categoriesPayloadBuilder = getCategoryListBuilder(clp, e.getValue());\n      for (CategoryPath cp : e.getValue()) {\n        int ordinal = taxonomyWriter.addCategory(cp);\n        categoriesPayloadBuilder.handle(ordinal , cp);\n      }\n      HashMap<String,BytesRef> categoriesData = categoriesPayloadBuilder.finish();\n      CountingListStream ts = new CountingListStream();\n      ts.setCategoriesData(categoriesData);\n      doc.add(new Field(field, ts, COUNTING_LIST_PAYLOAD_TYPE));\n      \n      // add the drill-down field\n      DrillDownStream drillDownStream = getDrillDownStream(e.getValue());\n      Field drillDown = new Field(field, drillDownStream, fieldType());\n      doc.add(drillDown);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetFields#addFields(Document,Iterable[CategoryPath]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetFields#addFields(Document,Iterable[CategoryPath]).mjava","sourceNew":"  /** Adds the needed facet fields to the document. */\n  public void addFields(Document doc, Iterable<CategoryPath> categories) throws IOException {\n    if (categories == null) {\n      throw new IllegalArgumentException(\"categories should not be null\");\n    }\n\n    // TODO: add reuse capabilities to this class, per CLP objects:\n    // - drill-down field\n    // - counting list field\n    // - DrillDownStream\n    // - CountingListStream\n\n    final Map<CategoryListParams,Iterable<CategoryPath>> categoryLists = createCategoryListMapping(categories);\n\n    // for each CLP we add a different field for drill-down terms as well as for\n    // counting list data.\n    IntsRef ordinals = new IntsRef(32); // should be enough for most common applications\n    for (Entry<CategoryListParams, Iterable<CategoryPath>> e : categoryLists.entrySet()) {\n      final CategoryListParams clp = e.getKey();\n      final String field = clp.getTerm().field();\n\n      // build category list data\n      ordinals.length = 0; // reset\n      int maxNumOrds = 0;\n      for (CategoryPath cp : e.getValue()) {\n        int ordinal = taxonomyWriter.addCategory(cp);\n        maxNumOrds += cp.length; // ordinal and potentially all parents\n        if (ordinals.ints.length < maxNumOrds) {\n          ordinals.grow(maxNumOrds);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n      }\n      Map<String,BytesRef> categoriesData = getCategoryListData(clp, ordinals, e.getValue());\n      \n      // add the counting list data\n      CountingListStream ts = new CountingListStream();\n      ts.setCategoriesData(categoriesData);\n      doc.add(new Field(field, ts, COUNTING_LIST_PAYLOAD_TYPE));\n      \n      // add the drill-down field\n      DrillDownStream drillDownStream = getDrillDownStream(e.getValue());\n      Field drillDown = new Field(field, drillDownStream, fieldType());\n      doc.add(drillDown);\n    }\n  }\n\n","sourceOld":"  /** Adds the needed facet fields to the document. */\n  public void addFields(Document doc, Iterable<CategoryPath> categories) throws IOException {\n    if (categories == null) {\n      throw new IllegalArgumentException(\"categories should not be null\");\n    }\n\n    // TODO: add reuse capabilities to this class, per CLP objects:\n    // - drill-down field\n    // - counting list field\n    // - DrillDownStream\n    // - CountingListStream\n\n    final Map<CategoryListParams,Iterable<CategoryPath>> categoryLists = createCategoryListMapping(categories);\n\n    // for each CLP we add a different field for drill-down terms as well as for\n    // counting list data.\n    for (Entry<CategoryListParams, Iterable<CategoryPath>> e : categoryLists.entrySet()) {\n      final CategoryListParams clp = e.getKey();\n      final String field = clp.getTerm().field();\n\n      // add the counting list data\n      CategoryListBuilder categoriesPayloadBuilder = getCategoryListBuilder(clp, e.getValue());\n      for (CategoryPath cp : e.getValue()) {\n        int ordinal = taxonomyWriter.addCategory(cp);\n        categoriesPayloadBuilder.handle(ordinal , cp);\n      }\n      HashMap<String,BytesRef> categoriesData = categoriesPayloadBuilder.finish();\n      CountingListStream ts = new CountingListStream();\n      ts.setCategoriesData(categoriesData);\n      doc.add(new Field(field, ts, COUNTING_LIST_PAYLOAD_TYPE));\n      \n      // add the drill-down field\n      DrillDownStream drillDownStream = getDrillDownStream(e.getValue());\n      Field drillDown = new Field(field, drillDownStream, fieldType());\n      doc.add(drillDown);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetFields#addFields(Document,Iterable[CategoryPath]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetFields#addFields(Document,Iterable[CategoryPath]).mjava","sourceNew":"  /** Adds the needed facet fields to the document. */\n  public void addFields(Document doc, Iterable<CategoryPath> categories) throws IOException {\n    if (categories == null) {\n      throw new IllegalArgumentException(\"categories should not be null\");\n    }\n\n    // TODO: add reuse capabilities to this class, per CLP objects:\n    // - drill-down field\n    // - counting list field\n    // - DrillDownStream\n    // - CountingListStream\n\n    final Map<CategoryListParams,Iterable<CategoryPath>> categoryLists = createCategoryListMapping(categories);\n\n    // for each CLP we add a different field for drill-down terms as well as for\n    // counting list data.\n    IntsRef ordinals = new IntsRef(32); // should be enough for most common applications\n    for (Entry<CategoryListParams, Iterable<CategoryPath>> e : categoryLists.entrySet()) {\n      final CategoryListParams clp = e.getKey();\n      final String field = clp.getTerm().field();\n\n      // build category list data\n      ordinals.length = 0; // reset\n      int maxNumOrds = 0;\n      for (CategoryPath cp : e.getValue()) {\n        int ordinal = taxonomyWriter.addCategory(cp);\n        maxNumOrds += cp.length; // ordinal and potentially all parents\n        if (ordinals.ints.length < maxNumOrds) {\n          ordinals.grow(maxNumOrds);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n      }\n      Map<String,BytesRef> categoriesData = getCategoryListData(clp, ordinals, e.getValue());\n      \n      // add the counting list data\n      CountingListStream ts = new CountingListStream();\n      ts.setCategoriesData(categoriesData);\n      doc.add(new Field(field, ts, COUNTING_LIST_PAYLOAD_TYPE));\n      \n      // add the drill-down field\n      DrillDownStream drillDownStream = getDrillDownStream(e.getValue());\n      Field drillDown = new Field(field, drillDownStream, fieldType());\n      doc.add(drillDown);\n    }\n  }\n\n","sourceOld":"  /** Adds the needed facet fields to the document. */\n  public void addFields(Document doc, Iterable<CategoryPath> categories) throws IOException {\n    if (categories == null) {\n      throw new IllegalArgumentException(\"categories should not be null\");\n    }\n\n    // TODO: add reuse capabilities to this class, per CLP objects:\n    // - drill-down field\n    // - counting list field\n    // - DrillDownStream\n    // - CountingListStream\n\n    final Map<CategoryListParams,Iterable<CategoryPath>> categoryLists = createCategoryListMapping(categories);\n\n    // for each CLP we add a different field for drill-down terms as well as for\n    // counting list data.\n    for (Entry<CategoryListParams, Iterable<CategoryPath>> e : categoryLists.entrySet()) {\n      final CategoryListParams clp = e.getKey();\n      final String field = clp.getTerm().field();\n\n      // add the counting list data\n      CategoryListBuilder categoriesPayloadBuilder = getCategoryListBuilder(clp, e.getValue());\n      for (CategoryPath cp : e.getValue()) {\n        int ordinal = taxonomyWriter.addCategory(cp);\n        categoriesPayloadBuilder.handle(ordinal , cp);\n      }\n      HashMap<String,BytesRef> categoriesData = categoriesPayloadBuilder.finish();\n      CountingListStream ts = new CountingListStream();\n      ts.setCategoriesData(categoriesData);\n      doc.add(new Field(field, ts, COUNTING_LIST_PAYLOAD_TYPE));\n      \n      // add the drill-down field\n      DrillDownStream drillDownStream = getDrillDownStream(e.getValue());\n      Field drillDown = new Field(field, drillDownStream, fieldType());\n      doc.add(drillDown);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetFields#addFields(Document,Iterable[CategoryPath]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetFields#addFields(Document,Iterable[CategoryPath]).mjava","sourceNew":"  /** Adds the needed facet fields to the document. */\n  public void addFields(Document doc, Iterable<CategoryPath> categories) throws IOException {\n    if (categories == null) {\n      throw new IllegalArgumentException(\"categories should not be null\");\n    }\n\n    // TODO: add reuse capabilities to this class, per CLP objects:\n    // - drill-down field\n    // - counting list field\n    // - DrillDownStream\n    // - CountingListStream\n\n    final Map<CategoryListParams,Iterable<CategoryPath>> categoryLists = createCategoryListMapping(categories);\n\n    // for each CLP we add a different field for drill-down terms as well as for\n    // counting list data.\n    IntsRef ordinals = new IntsRef(32); // should be enough for most common applications\n    for (Entry<CategoryListParams, Iterable<CategoryPath>> e : categoryLists.entrySet()) {\n      final CategoryListParams clp = e.getKey();\n      final String field = clp.field;\n\n      // build category list data\n      ordinals.length = 0; // reset\n      int maxNumOrds = 0;\n      for (CategoryPath cp : e.getValue()) {\n        int ordinal = taxonomyWriter.addCategory(cp);\n        maxNumOrds += cp.length; // ordinal and potentially all parents\n        if (ordinals.ints.length < maxNumOrds) {\n          ordinals.grow(maxNumOrds);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n      }\n      Map<String,BytesRef> categoriesData = getCategoryListData(clp, ordinals, e.getValue());\n      \n      // add the counting list data\n      addCountingListData(doc, categoriesData, field);\n      \n      // add the drill-down field\n      DrillDownStream drillDownStream = getDrillDownStream(e.getValue());\n      Field drillDown = new Field(field, drillDownStream, drillDownFieldType());\n      doc.add(drillDown);\n    }\n  }\n\n","sourceOld":"  /** Adds the needed facet fields to the document. */\n  public void addFields(Document doc, Iterable<CategoryPath> categories) throws IOException {\n    if (categories == null) {\n      throw new IllegalArgumentException(\"categories should not be null\");\n    }\n\n    // TODO: add reuse capabilities to this class, per CLP objects:\n    // - drill-down field\n    // - counting list field\n    // - DrillDownStream\n    // - CountingListStream\n\n    final Map<CategoryListParams,Iterable<CategoryPath>> categoryLists = createCategoryListMapping(categories);\n\n    // for each CLP we add a different field for drill-down terms as well as for\n    // counting list data.\n    IntsRef ordinals = new IntsRef(32); // should be enough for most common applications\n    for (Entry<CategoryListParams, Iterable<CategoryPath>> e : categoryLists.entrySet()) {\n      final CategoryListParams clp = e.getKey();\n      final String field = clp.getTerm().field();\n\n      // build category list data\n      ordinals.length = 0; // reset\n      int maxNumOrds = 0;\n      for (CategoryPath cp : e.getValue()) {\n        int ordinal = taxonomyWriter.addCategory(cp);\n        maxNumOrds += cp.length; // ordinal and potentially all parents\n        if (ordinals.ints.length < maxNumOrds) {\n          ordinals.grow(maxNumOrds);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n      }\n      Map<String,BytesRef> categoriesData = getCategoryListData(clp, ordinals, e.getValue());\n      \n      // add the counting list data\n      CountingListStream ts = new CountingListStream();\n      ts.setCategoriesData(categoriesData);\n      doc.add(new Field(field, ts, COUNTING_LIST_PAYLOAD_TYPE));\n      \n      // add the drill-down field\n      DrillDownStream drillDownStream = getDrillDownStream(e.getValue());\n      Field drillDown = new Field(field, drillDownStream, fieldType());\n      doc.add(drillDown);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetFields#addFields(Document,Iterable[CategoryPath]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetFields#addFields(Document,Iterable[CategoryPath]).mjava","sourceNew":"  /** Adds the needed facet fields to the document. */\n  public void addFields(Document doc, Iterable<CategoryPath> categories) throws IOException {\n    if (categories == null) {\n      throw new IllegalArgumentException(\"categories should not be null\");\n    }\n\n    // TODO: add reuse capabilities to this class, per CLP objects:\n    // - drill-down field\n    // - counting list field\n    // - DrillDownStream\n    // - CountingListStream\n\n    final Map<CategoryListParams,Iterable<CategoryPath>> categoryLists = createCategoryListMapping(categories);\n\n    // for each CLP we add a different field for drill-down terms as well as for\n    // counting list data.\n    IntsRef ordinals = new IntsRef(32); // should be enough for most common applications\n    for (Entry<CategoryListParams, Iterable<CategoryPath>> e : categoryLists.entrySet()) {\n      final CategoryListParams clp = e.getKey();\n      final String field = clp.field;\n\n      // build category list data\n      ordinals.length = 0; // reset\n      int maxNumOrds = 0;\n      for (CategoryPath cp : e.getValue()) {\n        int ordinal = taxonomyWriter.addCategory(cp);\n        maxNumOrds += cp.length; // ordinal and potentially all parents\n        if (ordinals.ints.length < maxNumOrds) {\n          ordinals.grow(maxNumOrds);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n      }\n      Map<String,BytesRef> categoriesData = getCategoryListData(clp, ordinals, e.getValue());\n      \n      // add the counting list data\n      addCountingListData(doc, categoriesData, field);\n      \n      // add the drill-down field\n      DrillDownStream drillDownStream = getDrillDownStream(e.getValue());\n      Field drillDown = new Field(field, drillDownStream, drillDownFieldType());\n      doc.add(drillDown);\n    }\n  }\n\n","sourceOld":"  /** Adds the needed facet fields to the document. */\n  public void addFields(Document doc, Iterable<CategoryPath> categories) throws IOException {\n    if (categories == null) {\n      throw new IllegalArgumentException(\"categories should not be null\");\n    }\n\n    // TODO: add reuse capabilities to this class, per CLP objects:\n    // - drill-down field\n    // - counting list field\n    // - DrillDownStream\n    // - CountingListStream\n\n    final Map<CategoryListParams,Iterable<CategoryPath>> categoryLists = createCategoryListMapping(categories);\n\n    // for each CLP we add a different field for drill-down terms as well as for\n    // counting list data.\n    IntsRef ordinals = new IntsRef(32); // should be enough for most common applications\n    for (Entry<CategoryListParams, Iterable<CategoryPath>> e : categoryLists.entrySet()) {\n      final CategoryListParams clp = e.getKey();\n      final String field = clp.getTerm().field();\n\n      // build category list data\n      ordinals.length = 0; // reset\n      int maxNumOrds = 0;\n      for (CategoryPath cp : e.getValue()) {\n        int ordinal = taxonomyWriter.addCategory(cp);\n        maxNumOrds += cp.length; // ordinal and potentially all parents\n        if (ordinals.ints.length < maxNumOrds) {\n          ordinals.grow(maxNumOrds);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n      }\n      Map<String,BytesRef> categoriesData = getCategoryListData(clp, ordinals, e.getValue());\n      \n      // add the counting list data\n      CountingListStream ts = new CountingListStream();\n      ts.setCategoriesData(categoriesData);\n      doc.add(new Field(field, ts, COUNTING_LIST_PAYLOAD_TYPE));\n      \n      // add the drill-down field\n      DrillDownStream drillDownStream = getDrillDownStream(e.getValue());\n      Field drillDown = new Field(field, drillDownStream, fieldType());\n      doc.add(drillDown);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetFields#addFields(Document,Iterable[FacetLabel]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetFields#addFields(Document,Iterable[CategoryPath]).mjava","sourceNew":"  /** Adds the needed facet fields to the document. */\n  public void addFields(Document doc, Iterable<FacetLabel> categories) throws IOException {\n    if (categories == null) {\n      throw new IllegalArgumentException(\"categories should not be null\");\n    }\n\n    // TODO: add reuse capabilities to this class, per CLP objects:\n    // - drill-down field\n    // - counting list field\n    // - DrillDownStream\n    // - CountingListStream\n\n    final Map<CategoryListParams,Iterable<FacetLabel>> categoryLists = createCategoryListMapping(categories);\n\n    // for each CLP we add a different field for drill-down terms as well as for\n    // counting list data.\n    IntsRef ordinals = new IntsRef(32); // should be enough for most common applications\n    for (Entry<CategoryListParams, Iterable<FacetLabel>> e : categoryLists.entrySet()) {\n      final CategoryListParams clp = e.getKey();\n      final String field = clp.field;\n\n      // build category list data\n      ordinals.length = 0; // reset\n      int maxNumOrds = 0;\n      for (FacetLabel cp : e.getValue()) {\n        int ordinal = taxonomyWriter.addCategory(cp);\n        maxNumOrds += cp.length; // ordinal and potentially all parents\n        if (ordinals.ints.length < maxNumOrds) {\n          ordinals.grow(maxNumOrds);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n      }\n      Map<String,BytesRef> categoriesData = getCategoryListData(clp, ordinals, e.getValue());\n      \n      // add the counting list data\n      addCountingListData(doc, categoriesData, field);\n      \n      // add the drill-down field\n      DrillDownStream drillDownStream = getDrillDownStream(e.getValue());\n      Field drillDown = new Field(field, drillDownStream, drillDownFieldType());\n      doc.add(drillDown);\n    }\n  }\n\n","sourceOld":"  /** Adds the needed facet fields to the document. */\n  public void addFields(Document doc, Iterable<CategoryPath> categories) throws IOException {\n    if (categories == null) {\n      throw new IllegalArgumentException(\"categories should not be null\");\n    }\n\n    // TODO: add reuse capabilities to this class, per CLP objects:\n    // - drill-down field\n    // - counting list field\n    // - DrillDownStream\n    // - CountingListStream\n\n    final Map<CategoryListParams,Iterable<CategoryPath>> categoryLists = createCategoryListMapping(categories);\n\n    // for each CLP we add a different field for drill-down terms as well as for\n    // counting list data.\n    IntsRef ordinals = new IntsRef(32); // should be enough for most common applications\n    for (Entry<CategoryListParams, Iterable<CategoryPath>> e : categoryLists.entrySet()) {\n      final CategoryListParams clp = e.getKey();\n      final String field = clp.field;\n\n      // build category list data\n      ordinals.length = 0; // reset\n      int maxNumOrds = 0;\n      for (CategoryPath cp : e.getValue()) {\n        int ordinal = taxonomyWriter.addCategory(cp);\n        maxNumOrds += cp.length; // ordinal and potentially all parents\n        if (ordinals.ints.length < maxNumOrds) {\n          ordinals.grow(maxNumOrds);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n      }\n      Map<String,BytesRef> categoriesData = getCategoryListData(clp, ordinals, e.getValue());\n      \n      // add the counting list data\n      addCountingListData(doc, categoriesData, field);\n      \n      // add the drill-down field\n      DrillDownStream drillDownStream = getDrillDownStream(e.getValue());\n      Field drillDown = new Field(field, drillDownStream, drillDownFieldType());\n      doc.add(drillDown);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetFields#addFields(Document,Iterable[CategoryPath]).mjava","sourceNew":null,"sourceOld":"  /** Adds the needed facet fields to the document. */\n  public void addFields(Document doc, Iterable<CategoryPath> categories) throws IOException {\n    if (categories == null) {\n      throw new IllegalArgumentException(\"categories should not be null\");\n    }\n\n    // TODO: add reuse capabilities to this class, per CLP objects:\n    // - drill-down field\n    // - counting list field\n    // - DrillDownStream\n    // - CountingListStream\n\n    final Map<CategoryListParams,Iterable<CategoryPath>> categoryLists = createCategoryListMapping(categories);\n\n    // for each CLP we add a different field for drill-down terms as well as for\n    // counting list data.\n    IntsRef ordinals = new IntsRef(32); // should be enough for most common applications\n    for (Entry<CategoryListParams, Iterable<CategoryPath>> e : categoryLists.entrySet()) {\n      final CategoryListParams clp = e.getKey();\n      final String field = clp.field;\n\n      // build category list data\n      ordinals.length = 0; // reset\n      int maxNumOrds = 0;\n      for (CategoryPath cp : e.getValue()) {\n        int ordinal = taxonomyWriter.addCategory(cp);\n        maxNumOrds += cp.length; // ordinal and potentially all parents\n        if (ordinals.ints.length < maxNumOrds) {\n          ordinals.grow(maxNumOrds);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n      }\n      Map<String,BytesRef> categoriesData = getCategoryListData(clp, ordinals, e.getValue());\n      \n      // add the counting list data\n      addCountingListData(doc, categoriesData, field);\n      \n      // add the drill-down field\n      DrillDownStream drillDownStream = getDrillDownStream(e.getValue());\n      Field drillDown = new Field(field, drillDownStream, drillDownFieldType());\n      doc.add(drillDown);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["4e6354dd7c71fe122926fc53d7d29f715b1283db","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["c4015cd39dff8d4dec562d909f9766debac53aa6","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}