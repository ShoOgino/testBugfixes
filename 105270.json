{"path":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrSection(NodeConfig.NodeConfigBuilder,NamedList[Object]).mjava","commits":[{"id":"e15199583d3635cb940942caed05132dd6c4c7c6","date":1424875551,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrSection(NodeConfig.NodeConfigBuilder,NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  private static NodeConfig fillSolrSection(NodeConfig.NodeConfigBuilder builder, NamedList<Object> nl) {\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"adminHandler\":\n          builder.setCoreAdminHandlerClass(value);\n          break;\n        case \"collectionsHandler\":\n          builder.setCollectionsAdminHandlerClass(value);\n          break;\n        case \"infoHandler\":\n          builder.setInfoHandlerClass(value);\n          break;\n        case \"coreRootDirectory\":\n          builder.setCoreRootDirectory(value);\n          break;\n        case \"managementPath\":\n          builder.setManagementPath(value);\n          break;\n        case \"sharedLib\":\n          builder.setSharedLibDirectory(value);\n          break;\n        case \"configSetBaseDir\":\n          builder.setConfigSetBaseDirectory(value);\n          break;\n        case \"shareSchema\":\n          builder.setUseSchemaCache(Boolean.parseBoolean(value));\n          break;\n        case \"coreLoadThreads\":\n          builder.setCoreLoadThreads(parseInt(name, value));\n          break;\n        case \"transientCacheSize\":\n          builder.setTransientCacheSize(parseInt(name, value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration value in solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrSection(NodeConfig.NodeConfigBuilder,NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  private static NodeConfig fillSolrSection(NodeConfig.NodeConfigBuilder builder, NamedList<Object> nl) {\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"adminHandler\":\n          builder.setCoreAdminHandlerClass(value);\n          break;\n        case \"collectionsHandler\":\n          builder.setCollectionsAdminHandlerClass(value);\n          break;\n        case \"infoHandler\":\n          builder.setInfoHandlerClass(value);\n          break;\n        case \"coreRootDirectory\":\n          builder.setCoreRootDirectory(value);\n          break;\n        case \"managementPath\":\n          builder.setManagementPath(value);\n          break;\n        case \"sharedLib\":\n          builder.setSharedLibDirectory(value);\n          break;\n        case \"configSetBaseDir\":\n          builder.setConfigSetBaseDirectory(value);\n          break;\n        case \"shareSchema\":\n          builder.setUseSchemaCache(Boolean.parseBoolean(value));\n          break;\n        case \"coreLoadThreads\":\n          builder.setCoreLoadThreads(parseInt(name, value));\n          break;\n        case \"transientCacheSize\":\n          builder.setTransientCacheSize(parseInt(name, value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration value in solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrSection(NodeConfig.NodeConfigBuilder,NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrSection(NodeConfig.NodeConfigBuilder,NamedList[Object]).mjava","sourceNew":"  private static NodeConfig fillSolrSection(NodeConfig.NodeConfigBuilder builder, NamedList<Object> nl) {\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"adminHandler\":\n          builder.setCoreAdminHandlerClass(value);\n          break;\n        case \"collectionsHandler\":\n          builder.setCollectionsAdminHandlerClass(value);\n          break;\n        case \"infoHandler\":\n          builder.setInfoHandlerClass(value);\n          break;\n        case \"configSetsHandler\":\n          builder.setConfigSetsHandlerClass(value);\n          break;\n        case \"coreRootDirectory\":\n          builder.setCoreRootDirectory(value);\n          break;\n        case \"managementPath\":\n          builder.setManagementPath(value);\n          break;\n        case \"sharedLib\":\n          builder.setSharedLibDirectory(value);\n          break;\n        case \"configSetBaseDir\":\n          builder.setConfigSetBaseDirectory(value);\n          break;\n        case \"shareSchema\":\n          builder.setUseSchemaCache(Boolean.parseBoolean(value));\n          break;\n        case \"coreLoadThreads\":\n          builder.setCoreLoadThreads(parseInt(name, value));\n          break;\n        case \"transientCacheSize\":\n          builder.setTransientCacheSize(parseInt(name, value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration value in solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  private static NodeConfig fillSolrSection(NodeConfig.NodeConfigBuilder builder, NamedList<Object> nl) {\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"adminHandler\":\n          builder.setCoreAdminHandlerClass(value);\n          break;\n        case \"collectionsHandler\":\n          builder.setCollectionsAdminHandlerClass(value);\n          break;\n        case \"infoHandler\":\n          builder.setInfoHandlerClass(value);\n          break;\n        case \"coreRootDirectory\":\n          builder.setCoreRootDirectory(value);\n          break;\n        case \"managementPath\":\n          builder.setManagementPath(value);\n          break;\n        case \"sharedLib\":\n          builder.setSharedLibDirectory(value);\n          break;\n        case \"configSetBaseDir\":\n          builder.setConfigSetBaseDirectory(value);\n          break;\n        case \"shareSchema\":\n          builder.setUseSchemaCache(Boolean.parseBoolean(value));\n          break;\n        case \"coreLoadThreads\":\n          builder.setCoreLoadThreads(parseInt(name, value));\n          break;\n        case \"transientCacheSize\":\n          builder.setTransientCacheSize(parseInt(name, value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration value in solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76ee69c1ab922a45b03e3f1f9989847f66c269bc","date":1500448164,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrSection(NodeConfig.NodeConfigBuilder,NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrSection(NodeConfig.NodeConfigBuilder,NamedList[Object]).mjava","sourceNew":"  private static NodeConfig fillSolrSection(NodeConfig.NodeConfigBuilder builder, NamedList<Object> nl) {\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"adminHandler\":\n          builder.setCoreAdminHandlerClass(value);\n          break;\n        case \"collectionsHandler\":\n          builder.setCollectionsAdminHandlerClass(value);\n          break;\n        case \"infoHandler\":\n          builder.setInfoHandlerClass(value);\n          break;\n        case \"configSetsHandler\":\n          builder.setConfigSetsHandlerClass(value);\n          break;\n        case \"coreRootDirectory\":\n          builder.setCoreRootDirectory(value);\n          break;\n        case \"solrDataHome\":\n          builder.setSolrDataHome(value);\n          break;\n        case \"managementPath\":\n          builder.setManagementPath(value);\n          break;\n        case \"sharedLib\":\n          builder.setSharedLibDirectory(value);\n          break;\n        case \"configSetBaseDir\":\n          builder.setConfigSetBaseDirectory(value);\n          break;\n        case \"shareSchema\":\n          builder.setUseSchemaCache(Boolean.parseBoolean(value));\n          break;\n        case \"coreLoadThreads\":\n          builder.setCoreLoadThreads(parseInt(name, value));\n          break;\n        case \"transientCacheSize\":\n          builder.setTransientCacheSize(parseInt(name, value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration value in solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  private static NodeConfig fillSolrSection(NodeConfig.NodeConfigBuilder builder, NamedList<Object> nl) {\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"adminHandler\":\n          builder.setCoreAdminHandlerClass(value);\n          break;\n        case \"collectionsHandler\":\n          builder.setCollectionsAdminHandlerClass(value);\n          break;\n        case \"infoHandler\":\n          builder.setInfoHandlerClass(value);\n          break;\n        case \"configSetsHandler\":\n          builder.setConfigSetsHandlerClass(value);\n          break;\n        case \"coreRootDirectory\":\n          builder.setCoreRootDirectory(value);\n          break;\n        case \"managementPath\":\n          builder.setManagementPath(value);\n          break;\n        case \"sharedLib\":\n          builder.setSharedLibDirectory(value);\n          break;\n        case \"configSetBaseDir\":\n          builder.setConfigSetBaseDirectory(value);\n          break;\n        case \"shareSchema\":\n          builder.setUseSchemaCache(Boolean.parseBoolean(value));\n          break;\n        case \"coreLoadThreads\":\n          builder.setCoreLoadThreads(parseInt(name, value));\n          break;\n        case \"transientCacheSize\":\n          builder.setTransientCacheSize(parseInt(name, value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration value in solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrSection(NodeConfig.NodeConfigBuilder,NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrSection(NodeConfig.NodeConfigBuilder,NamedList[Object]).mjava","sourceNew":"  private static NodeConfig fillSolrSection(NodeConfig.NodeConfigBuilder builder, NamedList<Object> nl) {\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"adminHandler\":\n          builder.setCoreAdminHandlerClass(value);\n          break;\n        case \"collectionsHandler\":\n          builder.setCollectionsAdminHandlerClass(value);\n          break;\n        case \"infoHandler\":\n          builder.setInfoHandlerClass(value);\n          break;\n        case \"configSetsHandler\":\n          builder.setConfigSetsHandlerClass(value);\n          break;\n        case \"coreRootDirectory\":\n          builder.setCoreRootDirectory(value);\n          break;\n        case \"solrDataHome\":\n          builder.setSolrDataHome(value);\n          break;\n        case \"managementPath\":\n          builder.setManagementPath(value);\n          break;\n        case \"sharedLib\":\n          builder.setSharedLibDirectory(value);\n          break;\n        case \"configSetBaseDir\":\n          builder.setConfigSetBaseDirectory(value);\n          break;\n        case \"shareSchema\":\n          builder.setUseSchemaCache(Boolean.parseBoolean(value));\n          break;\n        case \"coreLoadThreads\":\n          builder.setCoreLoadThreads(parseInt(name, value));\n          break;\n        case \"transientCacheSize\":\n          builder.setTransientCacheSize(parseInt(name, value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration value in solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  private static NodeConfig fillSolrSection(NodeConfig.NodeConfigBuilder builder, NamedList<Object> nl) {\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"adminHandler\":\n          builder.setCoreAdminHandlerClass(value);\n          break;\n        case \"collectionsHandler\":\n          builder.setCollectionsAdminHandlerClass(value);\n          break;\n        case \"infoHandler\":\n          builder.setInfoHandlerClass(value);\n          break;\n        case \"configSetsHandler\":\n          builder.setConfigSetsHandlerClass(value);\n          break;\n        case \"coreRootDirectory\":\n          builder.setCoreRootDirectory(value);\n          break;\n        case \"managementPath\":\n          builder.setManagementPath(value);\n          break;\n        case \"sharedLib\":\n          builder.setSharedLibDirectory(value);\n          break;\n        case \"configSetBaseDir\":\n          builder.setConfigSetBaseDirectory(value);\n          break;\n        case \"shareSchema\":\n          builder.setUseSchemaCache(Boolean.parseBoolean(value));\n          break;\n        case \"coreLoadThreads\":\n          builder.setCoreLoadThreads(parseInt(name, value));\n          break;\n        case \"transientCacheSize\":\n          builder.setTransientCacheSize(parseInt(name, value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration value in solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f472c757c161e228505e389efda705e2cf3c09e","date":1501700089,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrSection(NodeConfig.NodeConfigBuilder,NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrSection(NodeConfig.NodeConfigBuilder,NamedList[Object]).mjava","sourceNew":"  private static NodeConfig fillSolrSection(NodeConfig.NodeConfigBuilder builder, NamedList<Object> nl) {\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"adminHandler\":\n          builder.setCoreAdminHandlerClass(value);\n          break;\n        case \"collectionsHandler\":\n          builder.setCollectionsAdminHandlerClass(value);\n          break;\n        case \"healthCheckHandler\":\n          builder.setHealthCheckHandlerClass(value);\n          break;\n        case \"infoHandler\":\n          builder.setInfoHandlerClass(value);\n          break;\n        case \"configSetsHandler\":\n          builder.setConfigSetsHandlerClass(value);\n          break;\n        case \"coreRootDirectory\":\n          builder.setCoreRootDirectory(value);\n          break;\n        case \"solrDataHome\":\n          builder.setSolrDataHome(value);\n          break;\n        case \"managementPath\":\n          builder.setManagementPath(value);\n          break;\n        case \"sharedLib\":\n          builder.setSharedLibDirectory(value);\n          break;\n        case \"configSetBaseDir\":\n          builder.setConfigSetBaseDirectory(value);\n          break;\n        case \"shareSchema\":\n          builder.setUseSchemaCache(Boolean.parseBoolean(value));\n          break;\n        case \"coreLoadThreads\":\n          builder.setCoreLoadThreads(parseInt(name, value));\n          break;\n        case \"transientCacheSize\":\n          builder.setTransientCacheSize(parseInt(name, value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration value in solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  private static NodeConfig fillSolrSection(NodeConfig.NodeConfigBuilder builder, NamedList<Object> nl) {\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"adminHandler\":\n          builder.setCoreAdminHandlerClass(value);\n          break;\n        case \"collectionsHandler\":\n          builder.setCollectionsAdminHandlerClass(value);\n          break;\n        case \"infoHandler\":\n          builder.setInfoHandlerClass(value);\n          break;\n        case \"configSetsHandler\":\n          builder.setConfigSetsHandlerClass(value);\n          break;\n        case \"coreRootDirectory\":\n          builder.setCoreRootDirectory(value);\n          break;\n        case \"solrDataHome\":\n          builder.setSolrDataHome(value);\n          break;\n        case \"managementPath\":\n          builder.setManagementPath(value);\n          break;\n        case \"sharedLib\":\n          builder.setSharedLibDirectory(value);\n          break;\n        case \"configSetBaseDir\":\n          builder.setConfigSetBaseDirectory(value);\n          break;\n        case \"shareSchema\":\n          builder.setUseSchemaCache(Boolean.parseBoolean(value));\n          break;\n        case \"coreLoadThreads\":\n          builder.setCoreLoadThreads(parseInt(name, value));\n          break;\n        case \"transientCacheSize\":\n          builder.setTransientCacheSize(parseInt(name, value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration value in solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrSection(NodeConfig.NodeConfigBuilder,NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrSection(NodeConfig.NodeConfigBuilder,NamedList[Object]).mjava","sourceNew":"  private static NodeConfig fillSolrSection(NodeConfig.NodeConfigBuilder builder, NamedList<Object> nl) {\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"adminHandler\":\n          builder.setCoreAdminHandlerClass(value);\n          break;\n        case \"collectionsHandler\":\n          builder.setCollectionsAdminHandlerClass(value);\n          break;\n        case \"healthCheckHandler\":\n          builder.setHealthCheckHandlerClass(value);\n          break;\n        case \"infoHandler\":\n          builder.setInfoHandlerClass(value);\n          break;\n        case \"configSetsHandler\":\n          builder.setConfigSetsHandlerClass(value);\n          break;\n        case \"coreRootDirectory\":\n          builder.setCoreRootDirectory(value);\n          break;\n        case \"solrDataHome\":\n          builder.setSolrDataHome(value);\n          break;\n        case \"managementPath\":\n          builder.setManagementPath(value);\n          break;\n        case \"sharedLib\":\n          builder.setSharedLibDirectory(value);\n          break;\n        case \"configSetBaseDir\":\n          builder.setConfigSetBaseDirectory(value);\n          break;\n        case \"shareSchema\":\n          builder.setUseSchemaCache(Boolean.parseBoolean(value));\n          break;\n        case \"coreLoadThreads\":\n          builder.setCoreLoadThreads(parseInt(name, value));\n          break;\n        case \"transientCacheSize\":\n          builder.setTransientCacheSize(parseInt(name, value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration value in solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  private static NodeConfig fillSolrSection(NodeConfig.NodeConfigBuilder builder, NamedList<Object> nl) {\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"adminHandler\":\n          builder.setCoreAdminHandlerClass(value);\n          break;\n        case \"collectionsHandler\":\n          builder.setCollectionsAdminHandlerClass(value);\n          break;\n        case \"infoHandler\":\n          builder.setInfoHandlerClass(value);\n          break;\n        case \"configSetsHandler\":\n          builder.setConfigSetsHandlerClass(value);\n          break;\n        case \"coreRootDirectory\":\n          builder.setCoreRootDirectory(value);\n          break;\n        case \"solrDataHome\":\n          builder.setSolrDataHome(value);\n          break;\n        case \"managementPath\":\n          builder.setManagementPath(value);\n          break;\n        case \"sharedLib\":\n          builder.setSharedLibDirectory(value);\n          break;\n        case \"configSetBaseDir\":\n          builder.setConfigSetBaseDirectory(value);\n          break;\n        case \"shareSchema\":\n          builder.setUseSchemaCache(Boolean.parseBoolean(value));\n          break;\n        case \"coreLoadThreads\":\n          builder.setCoreLoadThreads(parseInt(name, value));\n          break;\n        case \"transientCacheSize\":\n          builder.setTransientCacheSize(parseInt(name, value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration value in solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"defa11d88d50ec356d5e7428f1ebc89623e840ac","date":1527653148,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrSection(NodeConfig.NodeConfigBuilder,NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrSection(NodeConfig.NodeConfigBuilder,NamedList[Object]).mjava","sourceNew":"  private static NodeConfig fillSolrSection(NodeConfig.NodeConfigBuilder builder, NamedList<Object> nl) {\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"adminHandler\":\n          builder.setCoreAdminHandlerClass(value);\n          break;\n        case \"collectionsHandler\":\n          builder.setCollectionsAdminHandlerClass(value);\n          break;\n        case \"healthCheckHandler\":\n          builder.setHealthCheckHandlerClass(value);\n          break;\n        case \"infoHandler\":\n          builder.setInfoHandlerClass(value);\n          break;\n        case \"configSetsHandler\":\n          builder.setConfigSetsHandlerClass(value);\n          break;\n        case \"coreRootDirectory\":\n          builder.setCoreRootDirectory(value);\n          break;\n        case \"solrDataHome\":\n          builder.setSolrDataHome(value);\n          break;\n        case \"managementPath\":\n          builder.setManagementPath(value);\n          break;\n        case \"sharedLib\":\n          builder.setSharedLibDirectory(value);\n          break;\n        case \"configSetBaseDir\":\n          builder.setConfigSetBaseDirectory(value);\n          break;\n        case \"shareSchema\":\n          builder.setUseSchemaCache(Boolean.parseBoolean(value));\n          break;\n        case \"coreLoadThreads\":\n          builder.setCoreLoadThreads(parseInt(name, value));\n          break;\n        case \"replayUpdatesThreads\":\n          builder.setReplayUpdatesThreads(parseInt(name, value));\n          break;\n        case \"transientCacheSize\":\n          builder.setTransientCacheSize(parseInt(name, value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration value in solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  private static NodeConfig fillSolrSection(NodeConfig.NodeConfigBuilder builder, NamedList<Object> nl) {\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"adminHandler\":\n          builder.setCoreAdminHandlerClass(value);\n          break;\n        case \"collectionsHandler\":\n          builder.setCollectionsAdminHandlerClass(value);\n          break;\n        case \"healthCheckHandler\":\n          builder.setHealthCheckHandlerClass(value);\n          break;\n        case \"infoHandler\":\n          builder.setInfoHandlerClass(value);\n          break;\n        case \"configSetsHandler\":\n          builder.setConfigSetsHandlerClass(value);\n          break;\n        case \"coreRootDirectory\":\n          builder.setCoreRootDirectory(value);\n          break;\n        case \"solrDataHome\":\n          builder.setSolrDataHome(value);\n          break;\n        case \"managementPath\":\n          builder.setManagementPath(value);\n          break;\n        case \"sharedLib\":\n          builder.setSharedLibDirectory(value);\n          break;\n        case \"configSetBaseDir\":\n          builder.setConfigSetBaseDirectory(value);\n          break;\n        case \"shareSchema\":\n          builder.setUseSchemaCache(Boolean.parseBoolean(value));\n          break;\n        case \"coreLoadThreads\":\n          builder.setCoreLoadThreads(parseInt(name, value));\n          break;\n        case \"transientCacheSize\":\n          builder.setTransientCacheSize(parseInt(name, value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration value in solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2be0a2886c76942ff986465eabde7b858895dc9","date":1555349228,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrSection(NodeConfig.NodeConfigBuilder,NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrSection(NodeConfig.NodeConfigBuilder,NamedList[Object]).mjava","sourceNew":"  private static NodeConfig fillSolrSection(NodeConfig.NodeConfigBuilder builder, NamedList<Object> nl) {\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"adminHandler\":\n          builder.setCoreAdminHandlerClass(value);\n          break;\n        case \"collectionsHandler\":\n          builder.setCollectionsAdminHandlerClass(value);\n          break;\n        case \"healthCheckHandler\":\n          builder.setHealthCheckHandlerClass(value);\n          break;\n        case \"infoHandler\":\n          builder.setInfoHandlerClass(value);\n          break;\n        case \"configSetsHandler\":\n          builder.setConfigSetsHandlerClass(value);\n          break;\n        case \"coreRootDirectory\":\n          builder.setCoreRootDirectory(value);\n          break;\n        case \"solrDataHome\":\n          builder.setSolrDataHome(value);\n          break;\n        case \"maxBooleanClauses\":\n          builder.setBooleanQueryMaxClauseCount(parseInt(name, value));\n          break;\n        case \"managementPath\":\n          builder.setManagementPath(value);\n          break;\n        case \"sharedLib\":\n          builder.setSharedLibDirectory(value);\n          break;\n        case \"configSetBaseDir\":\n          builder.setConfigSetBaseDirectory(value);\n          break;\n        case \"shareSchema\":\n          builder.setUseSchemaCache(Boolean.parseBoolean(value));\n          break;\n        case \"coreLoadThreads\":\n          builder.setCoreLoadThreads(parseInt(name, value));\n          break;\n        case \"replayUpdatesThreads\":\n          builder.setReplayUpdatesThreads(parseInt(name, value));\n          break;\n        case \"transientCacheSize\":\n          builder.setTransientCacheSize(parseInt(name, value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration value in solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  private static NodeConfig fillSolrSection(NodeConfig.NodeConfigBuilder builder, NamedList<Object> nl) {\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"adminHandler\":\n          builder.setCoreAdminHandlerClass(value);\n          break;\n        case \"collectionsHandler\":\n          builder.setCollectionsAdminHandlerClass(value);\n          break;\n        case \"healthCheckHandler\":\n          builder.setHealthCheckHandlerClass(value);\n          break;\n        case \"infoHandler\":\n          builder.setInfoHandlerClass(value);\n          break;\n        case \"configSetsHandler\":\n          builder.setConfigSetsHandlerClass(value);\n          break;\n        case \"coreRootDirectory\":\n          builder.setCoreRootDirectory(value);\n          break;\n        case \"solrDataHome\":\n          builder.setSolrDataHome(value);\n          break;\n        case \"managementPath\":\n          builder.setManagementPath(value);\n          break;\n        case \"sharedLib\":\n          builder.setSharedLibDirectory(value);\n          break;\n        case \"configSetBaseDir\":\n          builder.setConfigSetBaseDirectory(value);\n          break;\n        case \"shareSchema\":\n          builder.setUseSchemaCache(Boolean.parseBoolean(value));\n          break;\n        case \"coreLoadThreads\":\n          builder.setCoreLoadThreads(parseInt(name, value));\n          break;\n        case \"replayUpdatesThreads\":\n          builder.setReplayUpdatesThreads(parseInt(name, value));\n          break;\n        case \"transientCacheSize\":\n          builder.setTransientCacheSize(parseInt(name, value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration value in solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373","date":1592489632,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrSection(NodeConfig.NodeConfigBuilder,NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fillSolrSection(NodeConfig.NodeConfigBuilder,NamedList[Object]).mjava","sourceNew":"  private static NodeConfig fillSolrSection(NodeConfig.NodeConfigBuilder builder, NamedList<Object> nl) {\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"adminHandler\":\n          builder.setCoreAdminHandlerClass(value);\n          break;\n        case \"collectionsHandler\":\n          builder.setCollectionsAdminHandlerClass(value);\n          break;\n        case \"healthCheckHandler\":\n          builder.setHealthCheckHandlerClass(value);\n          break;\n        case \"infoHandler\":\n          builder.setInfoHandlerClass(value);\n          break;\n        case \"configSetsHandler\":\n          builder.setConfigSetsHandlerClass(value);\n          break;\n        case \"coreRootDirectory\":\n          builder.setCoreRootDirectory(value);\n          break;\n        case \"solrDataHome\":\n          builder.setSolrDataHome(value);\n          break;\n        case \"maxBooleanClauses\":\n          builder.setBooleanQueryMaxClauseCount(parseInt(name, value));\n          break;\n        case \"managementPath\":\n          builder.setManagementPath(value);\n          break;\n        case \"sharedLib\":\n          builder.setSharedLibDirectory(value);\n          break;\n        case \"allowPaths\":\n          builder.setAllowPaths(stringToPaths(value));\n          break;\n        case \"configSetBaseDir\":\n          builder.setConfigSetBaseDirectory(value);\n          break;\n        case \"shareSchema\":\n          builder.setUseSchemaCache(Boolean.parseBoolean(value));\n          break;\n        case \"coreLoadThreads\":\n          builder.setCoreLoadThreads(parseInt(name, value));\n          break;\n        case \"replayUpdatesThreads\":\n          builder.setReplayUpdatesThreads(parseInt(name, value));\n          break;\n        case \"transientCacheSize\":\n          builder.setTransientCacheSize(parseInt(name, value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration value in solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  private static NodeConfig fillSolrSection(NodeConfig.NodeConfigBuilder builder, NamedList<Object> nl) {\n\n    for (Map.Entry<String, Object> entry : nl) {\n      String name = entry.getKey();\n      if (entry.getValue() == null)\n        continue;\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"adminHandler\":\n          builder.setCoreAdminHandlerClass(value);\n          break;\n        case \"collectionsHandler\":\n          builder.setCollectionsAdminHandlerClass(value);\n          break;\n        case \"healthCheckHandler\":\n          builder.setHealthCheckHandlerClass(value);\n          break;\n        case \"infoHandler\":\n          builder.setInfoHandlerClass(value);\n          break;\n        case \"configSetsHandler\":\n          builder.setConfigSetsHandlerClass(value);\n          break;\n        case \"coreRootDirectory\":\n          builder.setCoreRootDirectory(value);\n          break;\n        case \"solrDataHome\":\n          builder.setSolrDataHome(value);\n          break;\n        case \"maxBooleanClauses\":\n          builder.setBooleanQueryMaxClauseCount(parseInt(name, value));\n          break;\n        case \"managementPath\":\n          builder.setManagementPath(value);\n          break;\n        case \"sharedLib\":\n          builder.setSharedLibDirectory(value);\n          break;\n        case \"configSetBaseDir\":\n          builder.setConfigSetBaseDirectory(value);\n          break;\n        case \"shareSchema\":\n          builder.setUseSchemaCache(Boolean.parseBoolean(value));\n          break;\n        case \"coreLoadThreads\":\n          builder.setCoreLoadThreads(parseInt(name, value));\n          break;\n        case \"replayUpdatesThreads\":\n          builder.setReplayUpdatesThreads(parseInt(name, value));\n          break;\n        case \"transientCacheSize\":\n          builder.setTransientCacheSize(parseInt(name, value));\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown configuration value in solr.xml: \" + name);\n      }\n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373":["a2be0a2886c76942ff986465eabde7b858895dc9"],"a2be0a2886c76942ff986465eabde7b858895dc9":["defa11d88d50ec356d5e7428f1ebc89623e840ac"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e15199583d3635cb940942caed05132dd6c4c7c6"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["936cdd5882761db3b844afd6f84ab81cbb011a75","2f472c757c161e228505e389efda705e2cf3c09e"],"defa11d88d50ec356d5e7428f1ebc89623e840ac":["2f472c757c161e228505e389efda705e2cf3c09e"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["e15199583d3635cb940942caed05132dd6c4c7c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["2209af2c265d2258ec4b29c8cc78622d36994a15","76ee69c1ab922a45b03e3f1f9989847f66c269bc"],"76ee69c1ab922a45b03e3f1f9989847f66c269bc":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"2f472c757c161e228505e389efda705e2cf3c09e":["76ee69c1ab922a45b03e3f1f9989847f66c269bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c75c0fad5a9b6633e919ce2e9f96e1f0c496d373"],"e15199583d3635cb940942caed05132dd6c4c7c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a2be0a2886c76942ff986465eabde7b858895dc9":["c75c0fad5a9b6633e919ce2e9f96e1f0c496d373"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"defa11d88d50ec356d5e7428f1ebc89623e840ac":["a2be0a2886c76942ff986465eabde7b858895dc9"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["936cdd5882761db3b844afd6f84ab81cbb011a75","76ee69c1ab922a45b03e3f1f9989847f66c269bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e15199583d3635cb940942caed05132dd6c4c7c6"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"76ee69c1ab922a45b03e3f1f9989847f66c269bc":["936cdd5882761db3b844afd6f84ab81cbb011a75","2f472c757c161e228505e389efda705e2cf3c09e"],"2f472c757c161e228505e389efda705e2cf3c09e":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","defa11d88d50ec356d5e7428f1ebc89623e840ac"],"e15199583d3635cb940942caed05132dd6c4c7c6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2209af2c265d2258ec4b29c8cc78622d36994a15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}