{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#getRecentUpdates().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#getRecentUpdates().mjava","pathOld":"/dev/null","sourceNew":"  public RecentUpdates getRecentUpdates() {\n    Deque<TransactionLog> logList;\n    synchronized (this) {\n      logList = new LinkedList<TransactionLog>(logs);\n      for (TransactionLog log : logList) {\n        log.incref();\n      }\n      if (prevTlog != null) {\n        prevTlog.incref();\n        logList.addFirst(prevTlog);\n      }\n      if (tlog != null) {\n        tlog.incref();\n        logList.addFirst(tlog);\n      }\n    }\n\n    // TODO: what if I hand out a list of updates, then do an update, then hand out another list (and\n    // one of the updates I originally handed out fell off the list).  Over-request?\n    RecentUpdates recentUpdates = new RecentUpdates();\n    recentUpdates.logList = logList;\n    recentUpdates.update();\n\n    return recentUpdates;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6198e18a87837d41cdd5df8c554e124619d99e4c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#getRecentUpdates().mjava","pathOld":"/dev/null","sourceNew":"  public RecentUpdates getRecentUpdates() {\n    Deque<TransactionLog> logList;\n    synchronized (this) {\n      logList = new LinkedList<TransactionLog>(logs);\n      for (TransactionLog log : logList) {\n        log.incref();\n      }\n      if (prevTlog != null) {\n        prevTlog.incref();\n        logList.addFirst(prevTlog);\n      }\n      if (tlog != null) {\n        tlog.incref();\n        logList.addFirst(tlog);\n      }\n    }\n\n    // TODO: what if I hand out a list of updates, then do an update, then hand out another list (and\n    // one of the updates I originally handed out fell off the list).  Over-request?\n    RecentUpdates recentUpdates = new RecentUpdates();\n    recentUpdates.logList = logList;\n    recentUpdates.update();\n\n    return recentUpdates;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#getRecentUpdates().mjava","pathOld":"/dev/null","sourceNew":"  public RecentUpdates getRecentUpdates() {\n    Deque<TransactionLog> logList;\n    synchronized (this) {\n      logList = new LinkedList<TransactionLog>(logs);\n      for (TransactionLog log : logList) {\n        log.incref();\n      }\n      if (prevTlog != null) {\n        prevTlog.incref();\n        logList.addFirst(prevTlog);\n      }\n      if (tlog != null) {\n        tlog.incref();\n        logList.addFirst(tlog);\n      }\n    }\n\n    // TODO: what if I hand out a list of updates, then do an update, then hand out another list (and\n    // one of the updates I originally handed out fell off the list).  Over-request?\n    RecentUpdates recentUpdates = new RecentUpdates();\n    recentUpdates.logList = logList;\n    recentUpdates.update();\n\n    return recentUpdates;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6198e18a87837d41cdd5df8c554e124619d99e4c","date":1368737399,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#getRecentUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#getRecentUpdates().mjava","sourceNew":"  /** The RecentUpdates object returned must be closed after use */\n  public RecentUpdates getRecentUpdates() {\n    Deque<TransactionLog> logList;\n    synchronized (this) {\n      logList = new LinkedList<TransactionLog>(logs);\n      for (TransactionLog log : logList) {\n        log.incref();\n      }\n      if (prevTlog != null) {\n        prevTlog.incref();\n        logList.addFirst(prevTlog);\n      }\n      if (tlog != null) {\n        tlog.incref();\n        logList.addFirst(tlog);\n      }\n    }\n\n    // TODO: what if I hand out a list of updates, then do an update, then hand out another list (and\n    // one of the updates I originally handed out fell off the list).  Over-request?\n\n    boolean success = false;\n    RecentUpdates recentUpdates = null;\n    try {\n      recentUpdates = new RecentUpdates();\n      recentUpdates.logList = logList;\n      recentUpdates.update();\n      success = true;\n    } finally {\n      // defensive: if some unknown exception is thrown,\n      // make sure we close so that the tlogs are decref'd\n      if (!success && recentUpdates != null) {\n        recentUpdates.close();\n      }\n    }\n\n    return recentUpdates;\n  }\n\n","sourceOld":"  public RecentUpdates getRecentUpdates() {\n    Deque<TransactionLog> logList;\n    synchronized (this) {\n      logList = new LinkedList<TransactionLog>(logs);\n      for (TransactionLog log : logList) {\n        log.incref();\n      }\n      if (prevTlog != null) {\n        prevTlog.incref();\n        logList.addFirst(prevTlog);\n      }\n      if (tlog != null) {\n        tlog.incref();\n        logList.addFirst(tlog);\n      }\n    }\n\n    // TODO: what if I hand out a list of updates, then do an update, then hand out another list (and\n    // one of the updates I originally handed out fell off the list).  Over-request?\n    RecentUpdates recentUpdates = new RecentUpdates();\n    recentUpdates.logList = logList;\n    recentUpdates.update();\n\n    return recentUpdates;\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#getRecentUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#getRecentUpdates().mjava","sourceNew":"  /** The RecentUpdates object returned must be closed after use */\n  public RecentUpdates getRecentUpdates() {\n    Deque<TransactionLog> logList;\n    synchronized (this) {\n      logList = new LinkedList<>(logs);\n      for (TransactionLog log : logList) {\n        log.incref();\n      }\n      if (prevTlog != null) {\n        prevTlog.incref();\n        logList.addFirst(prevTlog);\n      }\n      if (tlog != null) {\n        tlog.incref();\n        logList.addFirst(tlog);\n      }\n    }\n\n    // TODO: what if I hand out a list of updates, then do an update, then hand out another list (and\n    // one of the updates I originally handed out fell off the list).  Over-request?\n\n    boolean success = false;\n    RecentUpdates recentUpdates = null;\n    try {\n      recentUpdates = new RecentUpdates();\n      recentUpdates.logList = logList;\n      recentUpdates.update();\n      success = true;\n    } finally {\n      // defensive: if some unknown exception is thrown,\n      // make sure we close so that the tlogs are decref'd\n      if (!success && recentUpdates != null) {\n        recentUpdates.close();\n      }\n    }\n\n    return recentUpdates;\n  }\n\n","sourceOld":"  /** The RecentUpdates object returned must be closed after use */\n  public RecentUpdates getRecentUpdates() {\n    Deque<TransactionLog> logList;\n    synchronized (this) {\n      logList = new LinkedList<TransactionLog>(logs);\n      for (TransactionLog log : logList) {\n        log.incref();\n      }\n      if (prevTlog != null) {\n        prevTlog.incref();\n        logList.addFirst(prevTlog);\n      }\n      if (tlog != null) {\n        tlog.incref();\n        logList.addFirst(tlog);\n      }\n    }\n\n    // TODO: what if I hand out a list of updates, then do an update, then hand out another list (and\n    // one of the updates I originally handed out fell off the list).  Over-request?\n\n    boolean success = false;\n    RecentUpdates recentUpdates = null;\n    try {\n      recentUpdates = new RecentUpdates();\n      recentUpdates.logList = logList;\n      recentUpdates.update();\n      success = true;\n    } finally {\n      // defensive: if some unknown exception is thrown,\n      // make sure we close so that the tlogs are decref'd\n      if (!success && recentUpdates != null) {\n        recentUpdates.close();\n      }\n    }\n\n    return recentUpdates;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9186bf60d7c6f504d4d5b01cfee95dc4bd15e53","date":1449051812,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#getRecentUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#getRecentUpdates().mjava","sourceNew":"  /** The RecentUpdates object returned must be closed after use */\n  public RecentUpdates getRecentUpdates() {\n    Deque<TransactionLog> logList;\n    synchronized (this) {\n      logList = new LinkedList<>(logs);\n      for (TransactionLog log : logList) {\n        log.incref();\n      }\n      if (prevTlog != null) {\n        prevTlog.incref();\n        logList.addFirst(prevTlog);\n      }\n      if (tlog != null) {\n        tlog.incref();\n        logList.addFirst(tlog);\n      }\n    }\n\n    // TODO: what if I hand out a list of updates, then do an update, then hand out another list (and\n    // one of the updates I originally handed out fell off the list).  Over-request?\n    return new RecentUpdates(logList);\n\n  }\n\n","sourceOld":"  /** The RecentUpdates object returned must be closed after use */\n  public RecentUpdates getRecentUpdates() {\n    Deque<TransactionLog> logList;\n    synchronized (this) {\n      logList = new LinkedList<>(logs);\n      for (TransactionLog log : logList) {\n        log.incref();\n      }\n      if (prevTlog != null) {\n        prevTlog.incref();\n        logList.addFirst(prevTlog);\n      }\n      if (tlog != null) {\n        tlog.incref();\n        logList.addFirst(tlog);\n      }\n    }\n\n    // TODO: what if I hand out a list of updates, then do an update, then hand out another list (and\n    // one of the updates I originally handed out fell off the list).  Over-request?\n\n    boolean success = false;\n    RecentUpdates recentUpdates = null;\n    try {\n      recentUpdates = new RecentUpdates();\n      recentUpdates.logList = logList;\n      recentUpdates.update();\n      success = true;\n    } finally {\n      // defensive: if some unknown exception is thrown,\n      // make sure we close so that the tlogs are decref'd\n      if (!success && recentUpdates != null) {\n        recentUpdates.close();\n      }\n    }\n\n    return recentUpdates;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1455c941cc4ce652efc776fc23471b0e499246f6","date":1528086751,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#getRecentUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#getRecentUpdates().mjava","sourceNew":"  /** The RecentUpdates object returned must be closed after use */\n  public RecentUpdates getRecentUpdates() {\n    Deque<TransactionLog> logList;\n    synchronized (this) {\n      logList = new LinkedList<>(logs);\n      for (TransactionLog log : logList) {\n        log.incref();\n      }\n      if (prevTlog != null) {\n        prevTlog.incref();\n        logList.addFirst(prevTlog);\n      }\n      if (tlog != null) {\n        tlog.incref();\n        logList.addFirst(tlog);\n      }\n      if (bufferTlog != null) {\n        bufferTlog.incref();\n        logList.addFirst(bufferTlog);\n      }\n    }\n\n    // TODO: what if I hand out a list of updates, then do an update, then hand out another list (and\n    // one of the updates I originally handed out fell off the list).  Over-request?\n    return new RecentUpdates(logList);\n\n  }\n\n","sourceOld":"  /** The RecentUpdates object returned must be closed after use */\n  public RecentUpdates getRecentUpdates() {\n    Deque<TransactionLog> logList;\n    synchronized (this) {\n      logList = new LinkedList<>(logs);\n      for (TransactionLog log : logList) {\n        log.incref();\n      }\n      if (prevTlog != null) {\n        prevTlog.incref();\n        logList.addFirst(prevTlog);\n      }\n      if (tlog != null) {\n        tlog.incref();\n        logList.addFirst(tlog);\n      }\n    }\n\n    // TODO: what if I hand out a list of updates, then do an update, then hand out another list (and\n    // one of the updates I originally handed out fell off the list).  Over-request?\n    return new RecentUpdates(logList);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#getRecentUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#getRecentUpdates().mjava","sourceNew":"  /** The RecentUpdates object returned must be closed after use */\n  public RecentUpdates getRecentUpdates() {\n    Deque<TransactionLog> logList;\n    synchronized (this) {\n      logList = new LinkedList<>(logs);\n      for (TransactionLog log : logList) {\n        log.incref();\n      }\n      if (prevTlog != null) {\n        prevTlog.incref();\n        logList.addFirst(prevTlog);\n      }\n      if (tlog != null) {\n        tlog.incref();\n        logList.addFirst(tlog);\n      }\n      if (bufferTlog != null) {\n        bufferTlog.incref();\n        logList.addFirst(bufferTlog);\n      }\n    }\n\n    // TODO: what if I hand out a list of updates, then do an update, then hand out another list (and\n    // one of the updates I originally handed out fell off the list).  Over-request?\n    return new RecentUpdates(logList);\n\n  }\n\n","sourceOld":"  /** The RecentUpdates object returned must be closed after use */\n  public RecentUpdates getRecentUpdates() {\n    Deque<TransactionLog> logList;\n    synchronized (this) {\n      logList = new LinkedList<>(logs);\n      for (TransactionLog log : logList) {\n        log.incref();\n      }\n      if (prevTlog != null) {\n        prevTlog.incref();\n        logList.addFirst(prevTlog);\n      }\n      if (tlog != null) {\n        tlog.incref();\n        logList.addFirst(tlog);\n      }\n    }\n\n    // TODO: what if I hand out a list of updates, then do an update, then hand out another list (and\n    // one of the updates I originally handed out fell off the list).  Over-request?\n    return new RecentUpdates(logList);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#getRecentUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#getRecentUpdates().mjava","sourceNew":"  /** The RecentUpdates object returned must be closed after use */\n  public RecentUpdates getRecentUpdates() {\n    Deque<TransactionLog> logList;\n    synchronized (this) {\n      logList = new LinkedList<>(logs);\n      for (TransactionLog log : logList) {\n        log.incref();\n      }\n      if (prevTlog != null) {\n        prevTlog.incref();\n        logList.addFirst(prevTlog);\n      }\n      if (tlog != null) {\n        tlog.incref();\n        logList.addFirst(tlog);\n      }\n      if (bufferTlog != null) {\n        bufferTlog.incref();\n        logList.addFirst(bufferTlog);\n      }\n    }\n\n    // TODO: what if I hand out a list of updates, then do an update, then hand out another list (and\n    // one of the updates I originally handed out fell off the list).  Over-request?\n    return new RecentUpdates(logList);\n\n  }\n\n","sourceOld":"  /** The RecentUpdates object returned must be closed after use */\n  public RecentUpdates getRecentUpdates() {\n    Deque<TransactionLog> logList;\n    synchronized (this) {\n      logList = new LinkedList<>(logs);\n      for (TransactionLog log : logList) {\n        log.incref();\n      }\n      if (prevTlog != null) {\n        prevTlog.incref();\n        logList.addFirst(prevTlog);\n      }\n      if (tlog != null) {\n        tlog.incref();\n        logList.addFirst(tlog);\n      }\n    }\n\n    // TODO: what if I hand out a list of updates, then do an update, then hand out another list (and\n    // one of the updates I originally handed out fell off the list).  Over-request?\n    return new RecentUpdates(logList);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6198e18a87837d41cdd5df8c554e124619d99e4c"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"6198e18a87837d41cdd5df8c554e124619d99e4c":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a9186bf60d7c6f504d4d5b01cfee95dc4bd15e53","1455c941cc4ce652efc776fc23471b0e499246f6"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9186bf60d7c6f504d4d5b01cfee95dc4bd15e53":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"f592209545c71895260367152601e9200399776d":["a9186bf60d7c6f504d4d5b01cfee95dc4bd15e53","1455c941cc4ce652efc776fc23471b0e499246f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1455c941cc4ce652efc776fc23471b0e499246f6"],"1455c941cc4ce652efc776fc23471b0e499246f6":["a9186bf60d7c6f504d4d5b01cfee95dc4bd15e53"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a9186bf60d7c6f504d4d5b01cfee95dc4bd15e53"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"6198e18a87837d41cdd5df8c554e124619d99e4c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","6198e18a87837d41cdd5df8c554e124619d99e4c","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"a9186bf60d7c6f504d4d5b01cfee95dc4bd15e53":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","1455c941cc4ce652efc776fc23471b0e499246f6"],"f592209545c71895260367152601e9200399776d":[],"1455c941cc4ce652efc776fc23471b0e499246f6":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","b70042a8a492f7054d480ccdd2be9796510d4327","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}