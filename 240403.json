{"path":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns an IndexReader reading the index in the given Directory. */\n  public static IndexReader open(Directory directory) throws IOException {\n    synchronized (directory) {\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(directory);\n      if (infos.size() == 1)\t\t\t  // index is optimized\n\treturn new SegmentReader(infos.info(0), true);\n      \n      SegmentReader[] readers = new SegmentReader[infos.size()];\n      for (int i = 0; i < infos.size(); i++)\n\treaders[i] = new SegmentReader(infos.info(i), i == infos.size() - 1);\n      return new SegmentsReader(readers);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a10198efba39d45c46f8714efe9a15616f9c79d","date":1001608022,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","sourceNew":"  /** Returns an IndexReader reading the index in the given Directory. */\n  public static IndexReader open(final Directory directory) throws IOException{\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      return (IndexReader)new Lock.With(directory.makeLock(\"commit.lock\")) {\n\t  public Object doBody() throws IOException {\n\t    SegmentInfos infos = new SegmentInfos();\n\t    infos.read(directory);\n\t    if (infos.size() == 1)\t\t  // index is optimized\n\t      return new SegmentReader(infos.info(0), true);\n\n\t    SegmentReader[] readers = new SegmentReader[infos.size()];\n\t    for (int i = 0; i < infos.size(); i++)\n\t      readers[i] = new SegmentReader(infos.info(i), i==infos.size()-1);\n\t    return new SegmentsReader(readers);\n\t  }\n\t}.run();\n    }\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in the given Directory. */\n  public static IndexReader open(Directory directory) throws IOException {\n    synchronized (directory) {\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(directory);\n      if (infos.size() == 1)\t\t\t  // index is optimized\n\treturn new SegmentReader(infos.info(0), true);\n      \n      SegmentReader[] readers = new SegmentReader[infos.size()];\n      for (int i = 0; i < infos.size(); i++)\n\treaders[i] = new SegmentReader(infos.info(i), i == infos.size() - 1);\n      return new SegmentsReader(readers);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3fb2e14da294a8c919c6356cbbc8049158c368a7","date":1013197182,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","sourceNew":"  /** Returns an IndexReader reading the index in the given Directory. */\n  public static IndexReader open(final Directory directory) throws IOException{\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      return (IndexReader)new Lock.With(directory.makeLock(\"commit.lock\")) {\n\t  public Object doBody() throws IOException {\n\t    SegmentInfos infos = new SegmentInfos();\n\t    infos.read(directory);\n\t    if (infos.size() == 1)\t\t  // index is optimized\n\t      return new SegmentReader(infos.info(0), true);\n\n\t    SegmentReader[] readers = new SegmentReader[infos.size()];\n\t    for (int i = 0; i < infos.size(); i++)\n\t      readers[i] = new SegmentReader(infos.info(i), i==infos.size()-1);\n\t    return new SegmentsReader(directory, readers);\n\t  }\n\t}.run();\n    }\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in the given Directory. */\n  public static IndexReader open(final Directory directory) throws IOException{\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      return (IndexReader)new Lock.With(directory.makeLock(\"commit.lock\")) {\n\t  public Object doBody() throws IOException {\n\t    SegmentInfos infos = new SegmentInfos();\n\t    infos.read(directory);\n\t    if (infos.size() == 1)\t\t  // index is optimized\n\t      return new SegmentReader(infos.info(0), true);\n\n\t    SegmentReader[] readers = new SegmentReader[infos.size()];\n\t    for (int i = 0; i < infos.size(); i++)\n\t      readers[i] = new SegmentReader(infos.info(i), i==infos.size()-1);\n\t    return new SegmentsReader(readers);\n\t  }\n\t}.run();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"693a4c06f749274d170a2e87d4afb2709a810f46","date":1060700703,"type":3,"author":"Scott Ganyo","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","sourceNew":"  /** Returns an IndexReader reading the index in the given Directory. */\n  public static IndexReader open(final Directory directory) throws IOException{\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      return (IndexReader)new Lock.With(directory.makeLock(\"commit.lock\"), IndexWriter.COMMIT_LOCK_TIMEOUT) {\n\t  public Object doBody() throws IOException {\n\t    SegmentInfos infos = new SegmentInfos();\n\t    infos.read(directory);\n\t    if (infos.size() == 1)\t\t  // index is optimized\n\t      return new SegmentReader(infos.info(0), true);\n\n\t    SegmentReader[] readers = new SegmentReader[infos.size()];\n\t    for (int i = 0; i < infos.size(); i++)\n\t      readers[i] = new SegmentReader(infos.info(i), i==infos.size()-1);\n\t    return new SegmentsReader(directory, readers);\n\t  }\n\t}.run();\n    }\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in the given Directory. */\n  public static IndexReader open(final Directory directory) throws IOException{\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      return (IndexReader)new Lock.With(directory.makeLock(\"commit.lock\")) {\n\t  public Object doBody() throws IOException {\n\t    SegmentInfos infos = new SegmentInfos();\n\t    infos.read(directory);\n\t    if (infos.size() == 1)\t\t  // index is optimized\n\t      return new SegmentReader(infos.info(0), true);\n\n\t    SegmentReader[] readers = new SegmentReader[infos.size()];\n\t    for (int i = 0; i < infos.size(); i++)\n\t      readers[i] = new SegmentReader(infos.info(i), i==infos.size()-1);\n\t    return new SegmentsReader(directory, readers);\n\t  }\n\t}.run();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"47f3057137fcb91417c83b50600b934bd0f34c68","date":1064526111,"type":3,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","sourceNew":"  /** Returns an IndexReader reading the index in the given Directory. */\n  public static IndexReader open(final Directory directory) throws IOException{\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      return (IndexReader)new Lock.With(directory.makeLock(\"commit.lock\"), IndexWriter.COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            IndexReader result = null;\n            \n            SegmentInfos infos = new SegmentInfos();\n            infos.read(directory);\n            if (infos.size() == 1) {\t\t  // index is optimized\n                result = new SegmentReader(infos.info(0), true);\n            } else {\n                SegmentReader[] readers = new SegmentReader[infos.size()];\n                for (int i = 0; i < infos.size(); i++)\n                  readers[i] = new SegmentReader(infos.info(i), i==infos.size()-1);\n                result =  new SegmentsReader(directory, readers);\n            }\n        \n            result.segmentInfosAge = lastModified(directory);\n            return result;\n          }\n        }.run();\n    }\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in the given Directory. */\n  public static IndexReader open(final Directory directory) throws IOException{\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      return (IndexReader)new Lock.With(directory.makeLock(\"commit.lock\"), IndexWriter.COMMIT_LOCK_TIMEOUT) {\n\t  public Object doBody() throws IOException {\n\t    SegmentInfos infos = new SegmentInfos();\n\t    infos.read(directory);\n\t    if (infos.size() == 1)\t\t  // index is optimized\n\t      return new SegmentReader(infos.info(0), true);\n\n\t    SegmentReader[] readers = new SegmentReader[infos.size()];\n\t    for (int i = 0; i < infos.size(); i++)\n\t      readers[i] = new SegmentReader(infos.info(i), i==infos.size()-1);\n\t    return new SegmentsReader(directory, readers);\n\t  }\n\t}.run();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"18a2a015b86d022024b2b712bd8b607afccbb881","date":1066054947,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","sourceNew":"  /** Returns an IndexReader reading the index in the given Directory. */\n  public static IndexReader open(final Directory directory) throws IOException{\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      return (IndexReader)new Lock.With(\n          directory.makeLock(\"IndexWriter.COMMIT_LOCK_NAME\"),\n          IndexWriter.COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            IndexReader result = null;\n            \n            SegmentInfos infos = new SegmentInfos();\n            infos.read(directory);\n            if (infos.size() == 1) {\t\t  // index is optimized\n                result = new SegmentReader(infos.info(0), true);\n            } else {\n                SegmentReader[] readers = new SegmentReader[infos.size()];\n                for (int i = 0; i < infos.size(); i++)\n                  readers[i] = new SegmentReader(infos.info(i), i==infos.size()-1);\n                result =  new SegmentsReader(directory, readers);\n            }\n        \n            result.segmentInfosAge = lastModified(directory);\n            return result;\n          }\n        }.run();\n    }\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in the given Directory. */\n  public static IndexReader open(final Directory directory) throws IOException{\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      return (IndexReader)new Lock.With(directory.makeLock(\"commit.lock\"), IndexWriter.COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            IndexReader result = null;\n            \n            SegmentInfos infos = new SegmentInfos();\n            infos.read(directory);\n            if (infos.size() == 1) {\t\t  // index is optimized\n                result = new SegmentReader(infos.info(0), true);\n            } else {\n                SegmentReader[] readers = new SegmentReader[infos.size()];\n                for (int i = 0; i < infos.size(); i++)\n                  readers[i] = new SegmentReader(infos.info(i), i==infos.size()-1);\n                result =  new SegmentsReader(directory, readers);\n            }\n        \n            result.segmentInfosAge = lastModified(directory);\n            return result;\n          }\n        }.run();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc97c3750bb1acfa4dc8d7289e664ac0210c4f93","date":1066387782,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","sourceNew":"  /** Returns an IndexReader reading the index in the given Directory. */\n  public static IndexReader open(final Directory directory) throws IOException{\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      return (IndexReader)new Lock.With(\n          directory.makeLock(IndexWriter.COMMIT_LOCK_NAME),\n          IndexWriter.COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            IndexReader result = null;\n            \n            SegmentInfos infos = new SegmentInfos();\n            infos.read(directory);\n            if (infos.size() == 1) {\t\t  // index is optimized\n                result = new SegmentReader(infos.info(0), true);\n            } else {\n                SegmentReader[] readers = new SegmentReader[infos.size()];\n                for (int i = 0; i < infos.size(); i++)\n                  readers[i] = new SegmentReader(infos.info(i), i==infos.size()-1);\n                result =  new SegmentsReader(directory, readers);\n            }\n        \n            result.segmentInfosAge = lastModified(directory);\n            return result;\n          }\n        }.run();\n    }\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in the given Directory. */\n  public static IndexReader open(final Directory directory) throws IOException{\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      return (IndexReader)new Lock.With(\n          directory.makeLock(\"IndexWriter.COMMIT_LOCK_NAME\"),\n          IndexWriter.COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            IndexReader result = null;\n            \n            SegmentInfos infos = new SegmentInfos();\n            infos.read(directory);\n            if (infos.size() == 1) {\t\t  // index is optimized\n                result = new SegmentReader(infos.info(0), true);\n            } else {\n                SegmentReader[] readers = new SegmentReader[infos.size()];\n                for (int i = 0; i < infos.size(); i++)\n                  readers[i] = new SegmentReader(infos.info(i), i==infos.size()-1);\n                result =  new SegmentsReader(directory, readers);\n            }\n        \n            result.segmentInfosAge = lastModified(directory);\n            return result;\n          }\n        }.run();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6","date":1069355441,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","sourceNew":"  /** Returns an IndexReader reading the index in the given Directory. */\n  public static IndexReader open(final Directory directory) throws IOException{\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      return (IndexReader)new Lock.With(\n          directory.makeLock(IndexWriter.COMMIT_LOCK_NAME),\n          IndexWriter.COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            SegmentInfos infos = new SegmentInfos();\n            infos.read(directory);\n            if (infos.size() == 1) {\t\t  // index is optimized\n              return new SegmentReader(infos, infos.info(0), true);\n            } else {\n                SegmentReader[] readers = new SegmentReader[infos.size()];\n                for (int i = 0; i < infos.size(); i++)\n                  readers[i] = new SegmentReader(infos, infos.info(i), i==infos.size()-1);\n                return new SegmentsReader(infos, directory, readers);\n            }\n          }\n        }.run();\n    }\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in the given Directory. */\n  public static IndexReader open(final Directory directory) throws IOException{\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      return (IndexReader)new Lock.With(\n          directory.makeLock(IndexWriter.COMMIT_LOCK_NAME),\n          IndexWriter.COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            IndexReader result = null;\n            \n            SegmentInfos infos = new SegmentInfos();\n            infos.read(directory);\n            if (infos.size() == 1) {\t\t  // index is optimized\n                result = new SegmentReader(infos.info(0), true);\n            } else {\n                SegmentReader[] readers = new SegmentReader[infos.size()];\n                for (int i = 0; i < infos.size(); i++)\n                  readers[i] = new SegmentReader(infos.info(i), i==infos.size()-1);\n                result =  new SegmentsReader(directory, readers);\n            }\n        \n            result.segmentInfosAge = lastModified(directory);\n            return result;\n          }\n        }.run();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ad07cf326135fbb108f766a0798c8ee00b17dcb","date":1077215339,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","sourceNew":"  /** Returns an IndexReader reading the index in the given Directory. */\n  public static IndexReader open(final Directory directory) throws IOException{\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      return (IndexReader)new Lock.With(\n          directory.makeLock(IndexWriter.COMMIT_LOCK_NAME),\n          IndexWriter.COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            SegmentInfos infos = new SegmentInfos();\n            infos.read(directory);\n            if (infos.size() == 1) {\t\t  // index is optimized\n              return new SegmentReader(infos, infos.info(0), true);\n            } else {\n                IndexReader[] readers = new IndexReader[infos.size()];\n                for (int i = 0; i < infos.size(); i++)\n                  readers[i] = new SegmentReader(infos, infos.info(i), i==infos.size()-1);\n                return new MultiReader(directory, readers);\n            }\n          }\n        }.run();\n    }\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in the given Directory. */\n  public static IndexReader open(final Directory directory) throws IOException{\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      return (IndexReader)new Lock.With(\n          directory.makeLock(IndexWriter.COMMIT_LOCK_NAME),\n          IndexWriter.COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            SegmentInfos infos = new SegmentInfos();\n            infos.read(directory);\n            if (infos.size() == 1) {\t\t  // index is optimized\n              return new SegmentReader(infos, infos.info(0), true);\n            } else {\n                SegmentReader[] readers = new SegmentReader[infos.size()];\n                for (int i = 0; i < infos.size(); i++)\n                  readers[i] = new SegmentReader(infos, infos.info(i), i==infos.size()-1);\n                return new SegmentsReader(infos, directory, readers);\n            }\n          }\n        }.run();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","sourceNew":"  /** Returns an IndexReader reading the index in the given Directory. */\n  public static IndexReader open(final Directory directory) throws IOException {\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      return (IndexReader)new Lock.With(\n          directory.makeLock(IndexWriter.COMMIT_LOCK_NAME),\n          IndexWriter.COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            SegmentInfos infos = new SegmentInfos();\n            infos.read(directory);\n            if (infos.size() == 1) {\t\t  // index is optimized\n              return new SegmentReader(infos, infos.info(0), true);\n            } else {\n              IndexReader[] readers = new IndexReader[infos.size()];\n              for (int i = 0; i < infos.size(); i++)\n                readers[i] = new SegmentReader(infos, infos.info(i), i==infos.size()-1);\n              return new MultiReader(directory, readers);\n            }\n          }\n        }.run();\n    }\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in the given Directory. */\n  public static IndexReader open(final Directory directory) throws IOException{\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      return (IndexReader)new Lock.With(\n          directory.makeLock(IndexWriter.COMMIT_LOCK_NAME),\n          IndexWriter.COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            SegmentInfos infos = new SegmentInfos();\n            infos.read(directory);\n            if (infos.size() == 1) {\t\t  // index is optimized\n              return new SegmentReader(infos, infos.info(0), true);\n            } else {\n                IndexReader[] readers = new IndexReader[infos.size()];\n                for (int i = 0; i < infos.size(); i++)\n                  readers[i] = new SegmentReader(infos, infos.info(i), i==infos.size()-1);\n                return new MultiReader(directory, readers);\n            }\n          }\n        }.run();\n    }\n  }\n\n","bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f653aecb322b74d99e6ecdb93765e453a3d7aa71","date":1082107025,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","sourceNew":"  /** Returns an IndexReader reading the index in the given Directory. */\n  public static IndexReader open(final Directory directory) throws IOException {\n    return open(directory, false);\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in the given Directory. */\n  public static IndexReader open(final Directory directory) throws IOException {\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      return (IndexReader)new Lock.With(\n          directory.makeLock(IndexWriter.COMMIT_LOCK_NAME),\n          IndexWriter.COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            SegmentInfos infos = new SegmentInfos();\n            infos.read(directory);\n            if (infos.size() == 1) {\t\t  // index is optimized\n              return new SegmentReader(infos, infos.info(0), true);\n            } else {\n              IndexReader[] readers = new IndexReader[infos.size()];\n              for (int i = 0; i < infos.size(); i++)\n                readers[i] = new SegmentReader(infos, infos.info(i), i==infos.size()-1);\n              return new MultiReader(directory, readers);\n            }\n          }\n        }.run();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","sourceNew":"  /** Returns an IndexReader reading the index in the given Directory.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory) throws CorruptIndexException, IOException {\n    return open(directory, false);\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in the given Directory. */\n  public static IndexReader open(final Directory directory) throws IOException {\n    return open(directory, false);\n  }\n\n","bugFix":["91109046a59c58ee0ee5d0d2767b08d1f30d6702","770281b8a8459cafcdd2354b6a06078fea2d83c9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","sourceNew":"  /** Returns an IndexReader reading the index in the given Directory.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @param directory the index directory\n   */\n  public static IndexReader open(final Directory directory) throws CorruptIndexException, IOException {\n    return open(directory, false, null);\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in the given Directory.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory) throws CorruptIndexException, IOException {\n    return open(directory, false);\n  }\n\n","bugFix":null,"bugIntro":["de22c0c6b3dde31afbdade8602e737031c76cf8f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"de22c0c6b3dde31afbdade8602e737031c76cf8f","date":1180732736,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","sourceNew":"  /** Returns an IndexReader reading the index in the given Directory.\n   * @param directory the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory) throws CorruptIndexException, IOException {\n    return open(directory, false, null);\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in the given Directory.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @param directory the index directory\n   */\n  public static IndexReader open(final Directory directory) throws CorruptIndexException, IOException {\n    return open(directory, false, null);\n  }\n\n","bugFix":["8b6187898fc4413ccd18229711786550a280383c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac785906c92e4048ffc28f7c23a45541d3cca9bf","date":1214322066,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","sourceNew":"  /** Returns an IndexReader reading the index in the given Directory.\n   * @param directory the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory) throws CorruptIndexException, IOException {\n    return open(directory, false, null, null);\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in the given Directory.\n   * @param directory the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory) throws CorruptIndexException, IOException {\n    return open(directory, false, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5712975970a595c28f1988efd007e1b8a617a92f","date":1219499238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","sourceNew":"  /** Returns a read/write IndexReader reading the index in\n   * the given Directory. <b>NOTE</b>: starting in 3.0 this\n   * will return a readOnly IndexReader.\n   * @param directory the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory) throws CorruptIndexException, IOException {\n    return open(directory, false, null, null, READ_ONLY_DEFAULT);\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in the given Directory.\n   * @param directory the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory) throws CorruptIndexException, IOException {\n    return open(directory, false, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dabcca520e81aeff96f5c937b7ffb5617ee69d1","date":1243458018,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","sourceNew":"  /** Returns a read/write IndexReader reading the index in\n   *  the given Directory.\n   * @param directory the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use {@link #open(Directory, boolean)} instead\n   */\n  public static IndexReader open(final Directory directory) throws CorruptIndexException, IOException {\n    return open(directory, false, null, null, false);\n  }\n\n","sourceOld":"  /** Returns a read/write IndexReader reading the index in\n   * the given Directory. <b>NOTE</b>: starting in 3.0 this\n   * will return a readOnly IndexReader.\n   * @param directory the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory) throws CorruptIndexException, IOException {\n    return open(directory, false, null, null, READ_ONLY_DEFAULT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba712167ee848727018d8b77aa0c273839fbe15c","date":1244411561,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","sourceNew":"  /** Returns a read/write IndexReader reading the index in\n   *  the given Directory.\n   * @param directory the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(Directory, boolean)} instead\n   */\n  public static IndexReader open(final Directory directory) throws CorruptIndexException, IOException {\n    return open(directory, false, null, null, false);\n  }\n\n","sourceOld":"  /** Returns a read/write IndexReader reading the index in\n   *  the given Directory.\n   * @param directory the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use {@link #open(Directory, boolean)} instead\n   */\n  public static IndexReader open(final Directory directory) throws CorruptIndexException, IOException {\n    return open(directory, false, null, null, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e54e4a9a2442944e55f58e835877841cdac1271","date":1244628560,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","sourceNew":"  /** Returns a read/write IndexReader reading the index in\n   *  the given Directory.\n   * @param directory the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(Directory, boolean)} instead\n   */\n  public static IndexReader open(final Directory directory) throws CorruptIndexException, IOException {\n    return open(directory, null, null, false);\n  }\n\n","sourceOld":"  /** Returns a read/write IndexReader reading the index in\n   *  the given Directory.\n   * @param directory the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(Directory, boolean)} instead\n   */\n  public static IndexReader open(final Directory directory) throws CorruptIndexException, IOException {\n    return open(directory, false, null, null, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"961159f13aece73fbb30aea720e77a2237e8bafd","date":1247258916,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","sourceNew":"  /** Returns a read/write IndexReader reading the index in\n   *  the given Directory.\n   * @param directory the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(Directory, boolean)} instead\n   */\n  public static IndexReader open(final Directory directory) throws CorruptIndexException, IOException {\n    return open(directory, null, null, false, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","sourceOld":"  /** Returns a read/write IndexReader reading the index in\n   *  the given Directory.\n   * @param directory the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(Directory, boolean)} instead\n   */\n  public static IndexReader open(final Directory directory) throws CorruptIndexException, IOException {\n    return open(directory, null, null, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"082ab1b8bb93767e8e870fda3638b79d67035d3f","date":1251223359,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","sourceNew":"  /** Returns a read/write IndexReader reading the index in\n   *  the given Directory.\n   * @param directory the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use {@link #open(Directory, boolean)} instead\n   *             This method will be removed in the 3.0 release.\n   * \n   */\n  public static IndexReader open(final Directory directory) throws CorruptIndexException, IOException {\n    return open(directory, null, null, false, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","sourceOld":"  /** Returns a read/write IndexReader reading the index in\n   *  the given Directory.\n   * @param directory the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(Directory, boolean)} instead\n   */\n  public static IndexReader open(final Directory directory) throws CorruptIndexException, IOException {\n    return open(directory, null, null, false, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","sourceNew":null,"sourceOld":"  /** Returns a read/write IndexReader reading the index in\n   *  the given Directory.\n   * @param directory the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use {@link #open(Directory, boolean)} instead\n   *             This method will be removed in the 3.0 release.\n   * \n   */\n  public static IndexReader open(final Directory directory) throws CorruptIndexException, IOException {\n    return open(directory, null, null, false, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39a470b4b315091ba7fd0f20d586faba3bb8ef25","date":1258310849,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a IndexReader reading the index in the given\n   *  Directory, with readOnly=true.\n   * @param directory the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory) throws CorruptIndexException, IOException {\n    return open(directory, null, null, true, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory).mjava","sourceNew":"  /** Returns a IndexReader reading the index in the given\n   *  Directory, with readOnly=true.\n   * @param directory the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory) throws CorruptIndexException, IOException {\n    return open(directory, null, null, true, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","sourceOld":"  /** Returns a IndexReader reading the index in the given\n   *  Directory, with readOnly=true.\n   * @param directory the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory) throws CorruptIndexException, IOException {\n    return open(directory, null, null, true, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["082ab1b8bb93767e8e870fda3638b79d67035d3f"],"18a2a015b86d022024b2b712bd8b607afccbb881":["47f3057137fcb91417c83b50600b934bd0f34c68"],"5712975970a595c28f1988efd007e1b8a617a92f":["ac785906c92e4048ffc28f7c23a45541d3cca9bf"],"082ab1b8bb93767e8e870fda3638b79d67035d3f":["961159f13aece73fbb30aea720e77a2237e8bafd"],"4e54e4a9a2442944e55f58e835877841cdac1271":["ba712167ee848727018d8b77aa0c273839fbe15c"],"de22c0c6b3dde31afbdade8602e737031c76cf8f":["8b6187898fc4413ccd18229711786550a280383c"],"fc97c3750bb1acfa4dc8d7289e664ac0210c4f93":["18a2a015b86d022024b2b712bd8b607afccbb881"],"ba712167ee848727018d8b77aa0c273839fbe15c":["0dabcca520e81aeff96f5c937b7ffb5617ee69d1"],"3fb2e14da294a8c919c6356cbbc8049158c368a7":["3a10198efba39d45c46f8714efe9a15616f9c79d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b6187898fc4413ccd18229711786550a280383c":["1b54a9bc667895a2095a886184bf69a3179e63df"],"6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6":["fc97c3750bb1acfa4dc8d7289e664ac0210c4f93"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["39a470b4b315091ba7fd0f20d586faba3bb8ef25"],"39a470b4b315091ba7fd0f20d586faba3bb8ef25":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"3a10198efba39d45c46f8714efe9a15616f9c79d":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"693a4c06f749274d170a2e87d4afb2709a810f46":["3fb2e14da294a8c919c6356cbbc8049158c368a7"],"1b54a9bc667895a2095a886184bf69a3179e63df":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"47f3057137fcb91417c83b50600b934bd0f34c68":["693a4c06f749274d170a2e87d4afb2709a810f46"],"9ad07cf326135fbb108f766a0798c8ee00b17dcb":["6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6"],"0dabcca520e81aeff96f5c937b7ffb5617ee69d1":["5712975970a595c28f1988efd007e1b8a617a92f"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["9ad07cf326135fbb108f766a0798c8ee00b17dcb"],"961159f13aece73fbb30aea720e77a2237e8bafd":["4e54e4a9a2442944e55f58e835877841cdac1271"],"ac785906c92e4048ffc28f7c23a45541d3cca9bf":["de22c0c6b3dde31afbdade8602e737031c76cf8f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["39a470b4b315091ba7fd0f20d586faba3bb8ef25"],"18a2a015b86d022024b2b712bd8b607afccbb881":["fc97c3750bb1acfa4dc8d7289e664ac0210c4f93"],"5712975970a595c28f1988efd007e1b8a617a92f":["0dabcca520e81aeff96f5c937b7ffb5617ee69d1"],"082ab1b8bb93767e8e870fda3638b79d67035d3f":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"4e54e4a9a2442944e55f58e835877841cdac1271":["961159f13aece73fbb30aea720e77a2237e8bafd"],"de22c0c6b3dde31afbdade8602e737031c76cf8f":["ac785906c92e4048ffc28f7c23a45541d3cca9bf"],"fc97c3750bb1acfa4dc8d7289e664ac0210c4f93":["6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6"],"ba712167ee848727018d8b77aa0c273839fbe15c":["4e54e4a9a2442944e55f58e835877841cdac1271"],"3fb2e14da294a8c919c6356cbbc8049158c368a7":["693a4c06f749274d170a2e87d4afb2709a810f46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"8b6187898fc4413ccd18229711786550a280383c":["de22c0c6b3dde31afbdade8602e737031c76cf8f"],"6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6":["9ad07cf326135fbb108f766a0798c8ee00b17dcb"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"39a470b4b315091ba7fd0f20d586faba3bb8ef25":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a10198efba39d45c46f8714efe9a15616f9c79d":["3fb2e14da294a8c919c6356cbbc8049158c368a7"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["3a10198efba39d45c46f8714efe9a15616f9c79d"],"693a4c06f749274d170a2e87d4afb2709a810f46":["47f3057137fcb91417c83b50600b934bd0f34c68"],"1b54a9bc667895a2095a886184bf69a3179e63df":["8b6187898fc4413ccd18229711786550a280383c"],"47f3057137fcb91417c83b50600b934bd0f34c68":["18a2a015b86d022024b2b712bd8b607afccbb881"],"9ad07cf326135fbb108f766a0798c8ee00b17dcb":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"0dabcca520e81aeff96f5c937b7ffb5617ee69d1":["ba712167ee848727018d8b77aa0c273839fbe15c"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["1b54a9bc667895a2095a886184bf69a3179e63df"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"961159f13aece73fbb30aea720e77a2237e8bafd":["082ab1b8bb93767e8e870fda3638b79d67035d3f"],"ac785906c92e4048ffc28f7c23a45541d3cca9bf":["5712975970a595c28f1988efd007e1b8a617a92f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}