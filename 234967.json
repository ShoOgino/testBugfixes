{"path":"contrib/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","commits":[{"id":"aa8dcd4adc562c6e8da67c42872ef9194f8598fa","date":1108145465,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"sandbox/contributions/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"    /**\n     * Find words for a more-like-this query former.\n     *\n     * @param docNum the id of the lucene document from which to find terms\n     */\n    private PriorityQueue retrieveTerms(int docNum) throws IOException {\n        Map termFreqMap = new HashMap();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n            TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n            // field does not store term vector info\n            if (vector == null) {\n            \tDocument d=ir.document(docNum);\n            \tString text=d.get(fieldName);\n            \tif(text!=null)\n            \t{\n\t\t\t\t\taddTermFrequencies(new StringReader(text), termFreqMap, fieldName);\n            \t}\n            }\n            else {\n\t\t\t\taddTermFrequencies(termFreqMap, vector);\n            }\n\n        }\n\n        return createQueue(termFreqMap);\n    }\n\n","sourceOld":"    /**\n     * Find words for a more-like-this query former.\n     *\n     * @param docNum the id of the lucene document from which to find terms\n     */\n    private PriorityQueue retrieveTerms(int docNum) throws IOException {\n        Map termFreqMap = new HashMap();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n            TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n            // field does not store term vector info\n            if (vector == null) {\n            \tDocument d=ir.document(docNum);\n            \tString text=d.get(fieldName);\n            \tif(text!=null)\n            \t{\n\t\t\t\t\taddTermFrequencies(new StringReader(text), termFreqMap, fieldName);\n            \t}\n            }\n            else {\n\t\t\t\taddTermFrequencies(termFreqMap, vector);\n            }\n\n        }\n\n        return createQueue(termFreqMap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed4c30f2791af233adf660445f2e0ddd6e30ba7d","date":1111158180,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"contrib/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"    /**\n     * Find words for a more-like-this query former.\n     *\n     * @param docNum the id of the lucene document from which to find terms\n     */\n    private PriorityQueue retrieveTerms(int docNum) throws IOException {\n        Map termFreqMap = new HashMap();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n            TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n            // field does not store term vector info\n            if (vector == null) {\n            \tDocument d=ir.document(docNum);\n            \tString text[]=d.getValues(fieldName);\n            \tif(text!=null)\n            \t{\n                for (int j = 0; j < text.length; j++) {\n                  addTermFrequencies(new StringReader(text[j]), termFreqMap, fieldName);\n                }\n            \t}\n            }\n            else {\n\t\t\t\taddTermFrequencies(termFreqMap, vector);\n            }\n\n        }\n\n        return createQueue(termFreqMap);\n    }\n\n","sourceOld":"    /**\n     * Find words for a more-like-this query former.\n     *\n     * @param docNum the id of the lucene document from which to find terms\n     */\n    private PriorityQueue retrieveTerms(int docNum) throws IOException {\n        Map termFreqMap = new HashMap();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n            TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n            // field does not store term vector info\n            if (vector == null) {\n            \tDocument d=ir.document(docNum);\n            \tString text=d.get(fieldName);\n            \tif(text!=null)\n            \t{\n\t\t\t\t\taddTermFrequencies(new StringReader(text), termFreqMap, fieldName);\n            \t}\n            }\n            else {\n\t\t\t\taddTermFrequencies(termFreqMap, vector);\n            }\n\n        }\n\n        return createQueue(termFreqMap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f49ac1854a94b947e36bbdaffa355cb7707aa768","date":1164746802,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":null,"sourceOld":"    /**\n     * Find words for a more-like-this query former.\n     *\n     * @param docNum the id of the lucene document from which to find terms\n     */\n    private PriorityQueue retrieveTerms(int docNum) throws IOException {\n        Map termFreqMap = new HashMap();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n            TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n            // field does not store term vector info\n            if (vector == null) {\n            \tDocument d=ir.document(docNum);\n            \tString text[]=d.getValues(fieldName);\n            \tif(text!=null)\n            \t{\n                for (int j = 0; j < text.length; j++) {\n                  addTermFrequencies(new StringReader(text[j]), termFreqMap, fieldName);\n                }\n            \t}\n            }\n            else {\n\t\t\t\taddTermFrequencies(termFreqMap, vector);\n            }\n\n        }\n\n        return createQueue(termFreqMap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ed4c30f2791af233adf660445f2e0ddd6e30ba7d":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"f49ac1854a94b947e36bbdaffa355cb7707aa768":["ed4c30f2791af233adf660445f2e0ddd6e30ba7d"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f49ac1854a94b947e36bbdaffa355cb7707aa768"]},"commit2Childs":{"ed4c30f2791af233adf660445f2e0ddd6e30ba7d":["f49ac1854a94b947e36bbdaffa355cb7707aa768"],"f49ac1854a94b947e36bbdaffa355cb7707aa768":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["ed4c30f2791af233adf660445f2e0ddd6e30ba7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}