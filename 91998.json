{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#doTestAllSingleJump(BitSet,Directory).mjava","commits":[{"id":"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b","date":1583461779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#doTestAllSingleJump(BitSet,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#doTestAllSingleJump(FixedBitSet,Directory).mjava","sourceNew":"  private void doTestAllSingleJump(BitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    final byte denseRankPower = rarely() ? -1 : (byte) (random().nextInt(7)+7); // sane + chance of disable\n    long length;\n    int jumpTableentryCount;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      jumpTableentryCount = IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out, denseRankPower);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      for (int i = 0; i < set.length(); i++) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, jumpTableentryCount, denseRankPower, cardinality);\n        assertEquals(\"The bit at \" + i + \" should be correct with advanceExact\", set.get(i), disi.advanceExact(i));\n\n        IndexedDISI disi2 = new IndexedDISI(in, 0L, length, jumpTableentryCount, denseRankPower, cardinality);\n        disi2.advance(i);\n        // Proper sanity check with jump tables as an error could make them seek backwards\n        assertTrue(\"The docID should at least be \" + i + \" after advance(\" + i + \") but was \" + disi2.docID(),\n            i <= disi2.docID());\n        if (set.get(i)) {\n          assertEquals(\"The docID should be present with advance\", i, disi2.docID());\n        } else {\n          assertNotSame(\"The docID should not be present with advance\", i, disi2.docID());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestAllSingleJump(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    final byte denseRankPower = rarely() ? -1 : (byte) (random().nextInt(7)+7); // sane + chance of disable\n    long length;\n    int jumpTableentryCount;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      jumpTableentryCount = IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out, denseRankPower);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      for (int i = 0; i < set.length(); i++) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, jumpTableentryCount, denseRankPower, cardinality);\n        assertEquals(\"The bit at \" + i + \" should be correct with advanceExact\", set.get(i), disi.advanceExact(i));\n\n        IndexedDISI disi2 = new IndexedDISI(in, 0L, length, jumpTableentryCount, denseRankPower, cardinality);\n        disi2.advance(i);\n        // Proper sanity check with jump tables as an error could make them seek backwards\n        assertTrue(\"The docID should at least be \" + i + \" after advance(\" + i + \") but was \" + disi2.docID(),\n            i <= disi2.docID());\n        if (set.get(i)) {\n          assertEquals(\"The docID should be present with advance\", i, disi2.docID());\n        } else {\n          assertNotSame(\"The docID should not be present with advance\", i, disi2.docID());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}