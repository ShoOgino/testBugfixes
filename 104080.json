{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testDefaults().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testDefaults().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testDefaults().mjava","sourceNew":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    stream.reset();\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.toString()));\n    }\n  }\n\n","sourceOld":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    stream.reset();\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.toString()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testDefaults().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testDefaults().mjava","sourceNew":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    TokenStream stream = stop.tokenStream(\"test\", \"This is a test of the english stop analyzer\");\n    assertTrue(stream != null);\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    stream.reset();\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.toString()));\n    }\n  }\n\n","sourceOld":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    stream.reset();\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.toString()));\n    }\n  }\n\n","bugFix":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c","69e043c521d4e8db770cc140c63f5ef51f03426a"],"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testDefaults().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testDefaults().mjava","sourceNew":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    TokenStream stream = stop.tokenStream(\"test\", \"This is a test of the english stop analyzer\");\n    assertTrue(stream != null);\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    stream.reset();\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.toString()));\n    }\n  }\n\n","sourceOld":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    stream.reset();\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.toString()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"782ed6a4b4ba50ec19734fc8db4e570ee193d627","date":1381127065,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testDefaults().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testDefaults().mjava","sourceNew":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    try (TokenStream stream = stop.tokenStream(\"test\", \"This is a test of the english stop analyzer\")) {\n      assertTrue(stream != null);\n      CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n      stream.reset();\n    \n      while (stream.incrementToken()) {\n        assertFalse(inValidTokens.contains(termAtt.toString()));\n      }\n      stream.end();\n    }\n  }\n\n","sourceOld":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    TokenStream stream = stop.tokenStream(\"test\", \"This is a test of the english stop analyzer\");\n    assertTrue(stream != null);\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    stream.reset();\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.toString()));\n    }\n  }\n\n","bugFix":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c","a775c547c3519b47efd41c09cb47100ddb9604c7","cf7efd82433f3f64684711c16edfd149db6af111","c83d6c4335f31cae14f625a222bc842f20073dcd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}