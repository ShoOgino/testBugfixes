{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testParallelMergeStream().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testParallelMergeStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelMergeStream().mjava","sourceNew":"  @Test\n  public void testParallelMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory streamFactory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, zkHost)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", ReducerStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      //Test ascending\n      ParallelStream pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", merge(search(\" + COLLECTIONORALIAS + \", q=\\\"id:(4 1 8 7 9)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"), search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 2 3 6)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"), on=\\\"a_i asc\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n\n      assert (tuples.size() == 9);\n      assertOrder(tuples, 0, 1, 2, 3, 4, 7, 6, 8, 9);\n\n      //Test descending\n\n      pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", merge(search(\" + COLLECTIONORALIAS + \", q=\\\"id:(4 1 8 9)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i desc\\\", partitionKeys=\\\"a_i\\\"), search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 2 3 6)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i desc\\\", partitionKeys=\\\"a_i\\\"), on=\\\"a_i desc\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i desc\\\")\");\n      pstream.setStreamContext(streamContext);\n      tuples = getTuples(pstream);\n\n      assert (tuples.size() == 8);\n      assertOrder(tuples, 9, 8, 6, 4, 3, 2, 1, 0);\n    } finally {\n      solrClientCache.close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testParallelMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory streamFactory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, zkHost)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", ReducerStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      //Test ascending\n      ParallelStream pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", merge(search(\" + COLLECTIONORALIAS + \", q=\\\"id:(4 1 8 7 9)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"), search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 2 3 6)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"), on=\\\"a_i asc\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n\n      assert (tuples.size() == 9);\n      assertOrder(tuples, 0, 1, 2, 3, 4, 7, 6, 8, 9);\n\n      //Test descending\n\n      pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", merge(search(\" + COLLECTIONORALIAS + \", q=\\\"id:(4 1 8 9)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i desc\\\", partitionKeys=\\\"a_i\\\"), search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 2 3 6)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i desc\\\", partitionKeys=\\\"a_i\\\"), on=\\\"a_i desc\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i desc\\\")\");\n      pstream.setStreamContext(streamContext);\n      tuples = getTuples(pstream);\n\n      assert (tuples.size() == 8);\n      assertOrder(tuples, 9, 8, 6, 4, 3, 2, 1, 0);\n    } finally {\n      solrClientCache.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","date":1533256859,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testParallelMergeStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testParallelMergeStream().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testParallelMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory streamFactory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, zkHost)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", ReducerStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      //Test ascending\n      ParallelStream pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", merge(search(\" + COLLECTIONORALIAS + \", q=\\\"id:(4 1 8 7 9)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"), search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 2 3 6)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"), on=\\\"a_i asc\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n\n      assert (tuples.size() == 9);\n      assertOrder(tuples, 0, 1, 2, 3, 4, 7, 6, 8, 9);\n\n      //Test descending\n\n      pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", merge(search(\" + COLLECTIONORALIAS + \", q=\\\"id:(4 1 8 9)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i desc\\\", partitionKeys=\\\"a_i\\\"), search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 2 3 6)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i desc\\\", partitionKeys=\\\"a_i\\\"), on=\\\"a_i desc\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i desc\\\")\");\n      pstream.setStreamContext(streamContext);\n      tuples = getTuples(pstream);\n\n      assert (tuples.size() == 8);\n      assertOrder(tuples, 9, 8, 6, 4, 3, 2, 1, 0);\n    } finally {\n      solrClientCache.close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testParallelMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory streamFactory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, zkHost)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", ReducerStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      //Test ascending\n      ParallelStream pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", merge(search(\" + COLLECTIONORALIAS + \", q=\\\"id:(4 1 8 7 9)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"), search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 2 3 6)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"), on=\\\"a_i asc\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n\n      assert (tuples.size() == 9);\n      assertOrder(tuples, 0, 1, 2, 3, 4, 7, 6, 8, 9);\n\n      //Test descending\n\n      pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", merge(search(\" + COLLECTIONORALIAS + \", q=\\\"id:(4 1 8 9)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i desc\\\", partitionKeys=\\\"a_i\\\"), search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 2 3 6)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i desc\\\", partitionKeys=\\\"a_i\\\"), on=\\\"a_i desc\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i desc\\\")\");\n      pstream.setStreamContext(streamContext);\n      tuples = getTuples(pstream);\n\n      assert (tuples.size() == 8);\n      assertOrder(tuples, 9, 8, 6, 4, 3, 2, 1, 0);\n    } finally {\n      solrClientCache.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233","date":1543335722,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testParallelMergeStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testParallelMergeStream().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testParallelMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory streamFactory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, zkHost)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", ReducerStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      //Test ascending\n      ParallelStream pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", merge(search(\" + COLLECTIONORALIAS + \", q=\\\"id:(4 1 8 7 9)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\", qt=\\\"/export\\\"), search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 2 3 6)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\", qt=\\\"/export\\\"), on=\\\"a_i asc\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n\n      assert (tuples.size() == 9);\n      assertOrder(tuples, 0, 1, 2, 3, 4, 7, 6, 8, 9);\n\n      //Test descending\n\n      pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", merge(search(\" + COLLECTIONORALIAS + \", q=\\\"id:(4 1 8 9)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i desc\\\", partitionKeys=\\\"a_i\\\", qt=\\\"/export\\\"), search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 2 3 6)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i desc\\\", partitionKeys=\\\"a_i\\\", qt=\\\"/export\\\"), on=\\\"a_i desc\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i desc\\\")\");\n      pstream.setStreamContext(streamContext);\n      tuples = getTuples(pstream);\n\n      assert (tuples.size() == 8);\n      assertOrder(tuples, 9, 8, 6, 4, 3, 2, 1, 0);\n    } finally {\n      solrClientCache.close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testParallelMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory streamFactory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, zkHost)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", ReducerStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      //Test ascending\n      ParallelStream pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", merge(search(\" + COLLECTIONORALIAS + \", q=\\\"id:(4 1 8 7 9)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"), search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 2 3 6)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"), on=\\\"a_i asc\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n\n      assert (tuples.size() == 9);\n      assertOrder(tuples, 0, 1, 2, 3, 4, 7, 6, 8, 9);\n\n      //Test descending\n\n      pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", merge(search(\" + COLLECTIONORALIAS + \", q=\\\"id:(4 1 8 9)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i desc\\\", partitionKeys=\\\"a_i\\\"), search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 2 3 6)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i desc\\\", partitionKeys=\\\"a_i\\\"), on=\\\"a_i desc\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i desc\\\")\");\n      pstream.setStreamContext(streamContext);\n      tuples = getTuples(pstream);\n\n      assert (tuples.size() == 8);\n      assertOrder(tuples, 9, 8, 6, 4, 3, 2, 1, 0);\n    } finally {\n      solrClientCache.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testParallelMergeStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testParallelMergeStream().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testParallelMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory streamFactory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, zkHost)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", ReducerStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      //Test ascending\n      ParallelStream pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", merge(search(\" + COLLECTIONORALIAS + \", q=\\\"id:(4 1 8 7 9)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\", qt=\\\"/export\\\"), search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 2 3 6)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\", qt=\\\"/export\\\"), on=\\\"a_i asc\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n\n      assert (tuples.size() == 9);\n      assertOrder(tuples, 0, 1, 2, 3, 4, 7, 6, 8, 9);\n\n      //Test descending\n\n      pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", merge(search(\" + COLLECTIONORALIAS + \", q=\\\"id:(4 1 8 9)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i desc\\\", partitionKeys=\\\"a_i\\\", qt=\\\"/export\\\"), search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 2 3 6)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i desc\\\", partitionKeys=\\\"a_i\\\", qt=\\\"/export\\\"), on=\\\"a_i desc\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i desc\\\")\");\n      pstream.setStreamContext(streamContext);\n      tuples = getTuples(pstream);\n\n      assert (tuples.size() == 8);\n      assertOrder(tuples, 9, 8, 6, 4, 3, 2, 1, 0);\n    } finally {\n      solrClientCache.close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testParallelMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory streamFactory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, zkHost)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", ReducerStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      //Test ascending\n      ParallelStream pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", merge(search(\" + COLLECTIONORALIAS + \", q=\\\"id:(4 1 8 7 9)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\", qt=\\\"/export\\\"), search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 2 3 6)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\", qt=\\\"/export\\\"), on=\\\"a_i asc\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n\n      assert (tuples.size() == 9);\n      assertOrder(tuples, 0, 1, 2, 3, 4, 7, 6, 8, 9);\n\n      //Test descending\n\n      pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", merge(search(\" + COLLECTIONORALIAS + \", q=\\\"id:(4 1 8 9)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i desc\\\", partitionKeys=\\\"a_i\\\", qt=\\\"/export\\\"), search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 2 3 6)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i desc\\\", partitionKeys=\\\"a_i\\\", qt=\\\"/export\\\"), on=\\\"a_i desc\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i desc\\\")\");\n      pstream.setStreamContext(streamContext);\n      tuples = getTuples(pstream);\n\n      assert (tuples.size() == 8);\n      assertOrder(tuples, 9, 8, 6, 4, 3, 2, 1, 0);\n    } finally {\n      solrClientCache.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a1cae9aea470e88146567017129e8280d21ca76","date":1563504024,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testParallelMergeStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testParallelMergeStream().mjava","sourceNew":"  @Test\n  public void testParallelMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory streamFactory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, zkHost)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", ReducerStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      //Test ascending\n      ParallelStream pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", merge(search(\" + COLLECTIONORALIAS + \", q=\\\"id:(4 1 8 7 9)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\", qt=\\\"/export\\\"), search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 2 3 6)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\", qt=\\\"/export\\\"), on=\\\"a_i asc\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n\n      assert (tuples.size() == 9);\n      assertOrder(tuples, 0, 1, 2, 3, 4, 7, 6, 8, 9);\n\n      //Test descending\n\n      pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", merge(search(\" + COLLECTIONORALIAS + \", q=\\\"id:(4 1 8 9)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i desc\\\", partitionKeys=\\\"a_i\\\", qt=\\\"/export\\\"), search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 2 3 6)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i desc\\\", partitionKeys=\\\"a_i\\\", qt=\\\"/export\\\"), on=\\\"a_i desc\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i desc\\\")\");\n      pstream.setStreamContext(streamContext);\n      tuples = getTuples(pstream);\n\n      assert (tuples.size() == 8);\n      assertOrder(tuples, 9, 8, 6, 4, 3, 2, 1, 0);\n    } finally {\n      solrClientCache.close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 24-Dec-2018   @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testParallelMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory streamFactory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, zkHost)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", ReducerStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      //Test ascending\n      ParallelStream pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", merge(search(\" + COLLECTIONORALIAS + \", q=\\\"id:(4 1 8 7 9)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\", qt=\\\"/export\\\"), search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 2 3 6)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\", qt=\\\"/export\\\"), on=\\\"a_i asc\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n\n      assert (tuples.size() == 9);\n      assertOrder(tuples, 0, 1, 2, 3, 4, 7, 6, 8, 9);\n\n      //Test descending\n\n      pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", merge(search(\" + COLLECTIONORALIAS + \", q=\\\"id:(4 1 8 9)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i desc\\\", partitionKeys=\\\"a_i\\\", qt=\\\"/export\\\"), search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 2 3 6)\\\", fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i desc\\\", partitionKeys=\\\"a_i\\\", qt=\\\"/export\\\"), on=\\\"a_i desc\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i desc\\\")\");\n      pstream.setStreamContext(streamContext);\n      tuples = getTuples(pstream);\n\n      assert (tuples.size() == 8);\n      assertOrder(tuples, 9, 8, 6, 4, 3, 2, 1, 0);\n    } finally {\n      solrClientCache.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a1cae9aea470e88146567017129e8280d21ca76":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a1cae9aea470e88146567017129e8280d21ca76"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233"],"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8a1cae9aea470e88146567017129e8280d21ca76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["8a1cae9aea470e88146567017129e8280d21ca76"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233":["8d35c84fdef07284c122012ca4000d3b7285a66e"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}