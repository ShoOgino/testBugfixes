{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","sourceNew":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2);\n    searcher = setUpSearcher(analyzer);\n\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"test sentence\"));\n    \n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    \n    while (ts.incrementToken()) {\n      String termText =  termAtt.term();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2);\n    searcher = setUpSearcher(analyzer);\n\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"test sentence\"));\n    \n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    \n    while (ts.incrementToken()) {\n      String termText =  termAtt.term();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","sourceNew":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2);\n    searcher = setUpSearcher(analyzer);\n\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"test sentence\"));\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2);\n    searcher = setUpSearcher(analyzer);\n\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"test sentence\"));\n    \n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    \n    while (ts.incrementToken()) {\n      String termText =  termAtt.term();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fcbc12aa8147f5203ca283e7252ba4280d6ffd16","date":1305663400,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","sourceNew":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), 2);\n    searcher = setUpSearcher(analyzer);\n\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"test sentence\"));\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    ts.reset();\n\n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2);\n    searcher = setUpSearcher(analyzer);\n\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"test sentence\"));\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","sourceNew":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), 2);\n    searcher = setUpSearcher(analyzer);\n\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"test sentence\"));\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    ts.reset();\n\n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2);\n    searcher = setUpSearcher(analyzer);\n\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"test sentence\"));\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","sourceNew":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), 2);\n    searcher = setUpSearcher(analyzer);\n\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"test sentence\"));\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    ts.reset();\n\n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2);\n    searcher = setUpSearcher(analyzer);\n\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"test sentence\"));\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfd4d352ddf04b37253ad97ce1aad1448253f0f7","date":1310173878,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","sourceNew":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), 2);\n    searcher = setUpSearcher(analyzer);\n\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\", new StringReader(\"test sentence\"));\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    ts.reset();\n\n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), 2);\n    searcher = setUpSearcher(analyzer);\n\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"test sentence\"));\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    ts.reset();\n\n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","sourceNew":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), 2);\n    searcher = setUpSearcher(analyzer);\n\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\", new StringReader(\"test sentence\"));\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    ts.reset();\n\n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), 2);\n    searcher = setUpSearcher(analyzer);\n\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"test sentence\"));\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    ts.reset();\n\n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf7efd82433f3f64684711c16edfd149db6af111","date":1317013128,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","sourceNew":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), 2);\n    searcher = setUpSearcher(analyzer);\n\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.reusableTokenStream(\"content\", new StringReader(\"test sentence\"));\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    ts.reset();\n\n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), 2);\n    searcher = setUpSearcher(analyzer);\n\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\", new StringReader(\"test sentence\"));\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    ts.reset();\n\n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","sourceNew":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), 2);\n    searcher = setUpSearcher(analyzer);\n\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\", new StringReader(\"test sentence\"));\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    ts.reset();\n\n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), 2);\n    searcher = setUpSearcher(analyzer);\n\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.reusableTokenStream(\"content\", new StringReader(\"test sentence\"));\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    ts.reset();\n\n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","sourceNew":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\", new StringReader(\"test sentence\"));\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    ts.reset();\n\n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), 2);\n    searcher = setUpSearcher(analyzer);\n\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\", new StringReader(\"test sentence\"));\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    ts.reset();\n\n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","sourceNew":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\", new StringReader(\"test sentence\"));\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    ts.reset();\n\n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\", new StringReader(\"test sentence\"));\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    ts.reset();\n\n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf7efd82433f3f64684711c16edfd149db6af111":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["a3776dccca01c11e7046323cfad46a3b4a471233","dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a7347509fad0711ac30cb15a746e9a3830a38ebd","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a7347509fad0711ac30cb15a746e9a3830a38ebd","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["cf7efd82433f3f64684711c16edfd149db6af111"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["cf7efd82433f3f64684711c16edfd149db6af111","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"cf7efd82433f3f64684711c16edfd149db6af111":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["63639dd66fd5bd9b90bc24dd596ae01575f27cc4","c3a8a449466c1ff7ce2274fe73dab487256964b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}