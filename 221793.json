{"path":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestQPHelper#testPositionIncrement().mjava","commits":[{"id":"b955a87bc7c5daeda1ed56821ec0bec2e8789e44","date":1249270724,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestQPHelper#testPositionIncrement().mjava","pathOld":"/dev/null","sourceNew":"  public void testPositionIncrement() throws Exception {\n    boolean dflt = StopFilter.getEnablePositionIncrementsDefault();\n    StopFilter.setEnablePositionIncrementsDefault(true);\n    try {\n      OriginalQueryParserHelper qp = new OriginalQueryParserHelper();\n      qp.setAnalyzer(\n          new StopAnalyzer(new String[] { \"the\", \"in\", \"are\", \"this\" }));\n\n      qp.setEnablePositionIncrements(true);\n\n      String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n      // 0 2 5 7 8\n      int expectedPositions[] = { 1, 3, 4, 6, 9 };\n      PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n      // System.out.println(\"Query text: \"+qtxt);\n      // System.out.println(\"Result: \"+pq);\n      Term t[] = pq.getTerms();\n      int pos[] = pq.getPositions();\n      for (int i = 0; i < t.length; i++) {\n        // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n        assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n            expectedPositions[i], pos[i]);\n      }\n\n    } finally {\n      StopFilter.setEnablePositionIncrementsDefault(dflt);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestQPHelper#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    boolean dflt = StopFilter.getEnablePositionIncrementsDefault();\n    StopFilter.setEnablePositionIncrementsDefault(true);\n    try {\n      StandardQueryParser qp = new StandardQueryParser();\n      qp.setAnalyzer(\n          new StopAnalyzer(new String[] { \"the\", \"in\", \"are\", \"this\" }));\n\n      qp.setEnablePositionIncrements(true);\n\n      String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n      // 0 2 5 7 8\n      int expectedPositions[] = { 1, 3, 4, 6, 9 };\n      PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n      // System.out.println(\"Query text: \"+qtxt);\n      // System.out.println(\"Result: \"+pq);\n      Term t[] = pq.getTerms();\n      int pos[] = pq.getPositions();\n      for (int i = 0; i < t.length; i++) {\n        // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n        assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n            expectedPositions[i], pos[i]);\n      }\n\n    } finally {\n      StopFilter.setEnablePositionIncrementsDefault(dflt);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    boolean dflt = StopFilter.getEnablePositionIncrementsDefault();\n    StopFilter.setEnablePositionIncrementsDefault(true);\n    try {\n      OriginalQueryParserHelper qp = new OriginalQueryParserHelper();\n      qp.setAnalyzer(\n          new StopAnalyzer(new String[] { \"the\", \"in\", \"are\", \"this\" }));\n\n      qp.setEnablePositionIncrements(true);\n\n      String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n      // 0 2 5 7 8\n      int expectedPositions[] = { 1, 3, 4, 6, 9 };\n      PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n      // System.out.println(\"Query text: \"+qtxt);\n      // System.out.println(\"Result: \"+pq);\n      Term t[] = pq.getTerms();\n      int pos[] = pq.getPositions();\n      for (int i = 0; i < t.length; i++) {\n        // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n        assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n            expectedPositions[i], pos[i]);\n      }\n\n    } finally {\n      StopFilter.setEnablePositionIncrementsDefault(dflt);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8a848e758754282137f42bf85793c278e250390"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}