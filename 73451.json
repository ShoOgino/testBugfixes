{"path":"src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","commits":[{"id":"c28792ff7d1774c306e16afbd44ded91a417049b","date":1219072108,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#register(CoreDescriptor).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry.\n   * @return a previous core having the same name if it existed and returnPrev==true\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrev) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      core.setName(name);\n    }\n\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrev) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  // ---------------- CoreDescriptor related methods --------------- \n  /**\n   * Registers a SolrCore descriptor in the registry.\n   * @param descr the Solr core descriptor\n   * @return a previous descriptor having the same name if it existed, null otherwise\n   */\n  public CoreDescriptor register( CoreDescriptor descr ) {\n    if( descr == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    String name = descr.getName();\n    if( name == null || \n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    CoreDescriptor old = null;    \n    synchronized (cores) {\n      old = cores.put(name, descr);\n    }\n    if( old == null ) {\n      log.info( \"registering core: \"+name );\n      return null;\n    } \n    else {\n      log.info( \"replacing core: \"+name );\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe6c486a839ce47cb00a1a65551ba6dbda33c1ed","date":1223034022,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   *\n   * If returnPrev==false, the old core, if different, is closed.\n   *\n   * @return a previous core having the same name if it existed and returnPrev==true\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrev) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      core.setName(name);\n    }\n\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrev) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry.\n   * @return a previous core having the same name if it existed and returnPrev==true\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrev) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      core.setName(name);\n    }\n\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrev) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9461e73044620303559dcdda9e3cde6fa9b708e4","date":1246425616,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrev==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrev) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      core.setName(name);\n    }\n\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrev) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   *\n   * If returnPrev==false, the old core, if different, is closed.\n   *\n   * @return a previous core having the same name if it existed and returnPrev==true\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrev) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      core.setName(name);\n    }\n\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrev) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e43b690e2bf0bb7169677a1c5cd7469a74d05ca","date":1246425870,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      core.setName(name);\n    }\n\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrev==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrev) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      core.setName(name);\n    }\n\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrev) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      core.setName(name);\n    }\n\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      core.setName(name);\n    }\n\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe6c486a839ce47cb00a1a65551ba6dbda33c1ed":["c28792ff7d1774c306e16afbd44ded91a417049b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9461e73044620303559dcdda9e3cde6fa9b708e4":["fe6c486a839ce47cb00a1a65551ba6dbda33c1ed"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"c28792ff7d1774c306e16afbd44ded91a417049b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["5e43b690e2bf0bb7169677a1c5cd7469a74d05ca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5e43b690e2bf0bb7169677a1c5cd7469a74d05ca":["9461e73044620303559dcdda9e3cde6fa9b708e4"]},"commit2Childs":{"fe6c486a839ce47cb00a1a65551ba6dbda33c1ed":["9461e73044620303559dcdda9e3cde6fa9b708e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9461e73044620303559dcdda9e3cde6fa9b708e4":["5e43b690e2bf0bb7169677a1c5cd7469a74d05ca"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["c28792ff7d1774c306e16afbd44ded91a417049b"],"c28792ff7d1774c306e16afbd44ded91a417049b":["fe6c486a839ce47cb00a1a65551ba6dbda33c1ed"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"5e43b690e2bf0bb7169677a1c5cd7469a74d05ca":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}