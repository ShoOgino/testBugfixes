{"path":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#assertExists(ValueSource,ValueSource).mjava","commits":[{"id":"a701a7aab388afa1412a3dc23b4115c321f478c4","date":1413486320,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#assertExists(ValueSource,ValueSource).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Asserts that for every doc, the {@link FunctionValues#exists} value from the \n   * <code>actual</code> {@link ValueSource} matches the {@link FunctionValues#exists} \n   * value from the <code>expected</code> {@link ValueSource}\n   */\n  void assertExists(ValueSource expected, ValueSource actual) {\n    Map context = ValueSource.newContext(searcher);\n    try {\n      expected.createWeight(context, searcher);\n      actual.createWeight(context, searcher);\n\n      for (org.apache.lucene.index.LeafReaderContext leaf : reader.leaves()) {\n        final FunctionValues expectedVals = expected.getValues(context, leaf);\n        final FunctionValues actualVals = actual.getValues(context, leaf);\n        \n        String msg = expected.toString() + \" ?= \" + actual.toString() + \" -> \";\n        for (int i = 0; i < leaf.reader().maxDoc(); ++i) {\n          assertEquals(msg + i, expectedVals.exists(i), actualVals.exists(i));\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(actual.toString(), e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5132ed7492455ab92d26486037983253997f6c65"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5132ed7492455ab92d26486037983253997f6c65","date":1413792495,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#assertExists(ValueSource,ValueSource).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#assertExists(ValueSource,ValueSource).mjava","sourceNew":"  /**\n   * Asserts that for every doc, the {@link FunctionValues#exists} value from the \n   * <code>actual</code> {@link ValueSource} matches the {@link FunctionValues#exists} \n   * value from the <code>expected</code> {@link ValueSource}\n   */\n  void assertExists(ValueSource expected, ValueSource actual) {\n    Map context = ValueSource.newContext(searcher);\n    try {\n      expected.createWeight(context, searcher);\n      actual.createWeight(context, searcher);\n\n      for (org.apache.lucene.index.LeafReaderContext leaf : searcher.getIndexReader().leaves()) {\n        final FunctionValues expectedVals = expected.getValues(context, leaf);\n        final FunctionValues actualVals = actual.getValues(context, leaf);\n        \n        String msg = expected.toString() + \" ?= \" + actual.toString() + \" -> \";\n        for (int i = 0; i < leaf.reader().maxDoc(); ++i) {\n          assertEquals(msg + i, expectedVals.exists(i), actualVals.exists(i));\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(actual.toString(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that for every doc, the {@link FunctionValues#exists} value from the \n   * <code>actual</code> {@link ValueSource} matches the {@link FunctionValues#exists} \n   * value from the <code>expected</code> {@link ValueSource}\n   */\n  void assertExists(ValueSource expected, ValueSource actual) {\n    Map context = ValueSource.newContext(searcher);\n    try {\n      expected.createWeight(context, searcher);\n      actual.createWeight(context, searcher);\n\n      for (org.apache.lucene.index.LeafReaderContext leaf : reader.leaves()) {\n        final FunctionValues expectedVals = expected.getValues(context, leaf);\n        final FunctionValues actualVals = actual.getValues(context, leaf);\n        \n        String msg = expected.toString() + \" ?= \" + actual.toString() + \" -> \";\n        for (int i = 0; i < leaf.reader().maxDoc(); ++i) {\n          assertEquals(msg + i, expectedVals.exists(i), actualVals.exists(i));\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(actual.toString(), e);\n    }\n  }\n\n","bugFix":["a701a7aab388afa1412a3dc23b4115c321f478c4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#assertExists(ValueSource,ValueSource).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Asserts that for every doc, the {@link FunctionValues#exists} value from the \n   * <code>actual</code> {@link ValueSource} matches the {@link FunctionValues#exists} \n   * value from the <code>expected</code> {@link ValueSource}\n   */\n  void assertExists(ValueSource expected, ValueSource actual) {\n    Map context = ValueSource.newContext(searcher);\n    try {\n      expected.createWeight(context, searcher);\n      actual.createWeight(context, searcher);\n\n      for (org.apache.lucene.index.LeafReaderContext leaf : searcher.getIndexReader().leaves()) {\n        final FunctionValues expectedVals = expected.getValues(context, leaf);\n        final FunctionValues actualVals = actual.getValues(context, leaf);\n        \n        String msg = expected.toString() + \" ?= \" + actual.toString() + \" -> \";\n        for (int i = 0; i < leaf.reader().maxDoc(); ++i) {\n          assertEquals(msg + i, expectedVals.exists(i), actualVals.exists(i));\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(actual.toString(), e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#assertExists(ValueSource,ValueSource).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#assertExists(ValueSource,ValueSource).mjava","sourceNew":"  /**\n   * Asserts that for every doc, the {@link FunctionValues#exists} value from the\n   * <code>actual</code> {@link ValueSource} matches the {@link FunctionValues#exists}\n   * value from the <code>expected</code> {@link ValueSource}\n   */\n  void assertExists(ValueSource expected, ValueSource actual) {\n    Map<Object, Object> context = ValueSource.newContext(searcher);\n    try {\n      expected.createWeight(context, searcher);\n      actual.createWeight(context, searcher);\n\n      for (org.apache.lucene.index.LeafReaderContext leaf : searcher.getIndexReader().leaves()) {\n        final FunctionValues expectedVals = expected.getValues(context, leaf);\n        final FunctionValues actualVals = actual.getValues(context, leaf);\n        \n        String msg = expected.toString() + \" ?= \" + actual.toString() + \" -> \";\n        for (int i = 0; i < leaf.reader().maxDoc(); ++i) {\n          assertEquals(msg + i, expectedVals.exists(i), actualVals.exists(i));\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(actual.toString(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that for every doc, the {@link FunctionValues#exists} value from the \n   * <code>actual</code> {@link ValueSource} matches the {@link FunctionValues#exists} \n   * value from the <code>expected</code> {@link ValueSource}\n   */\n  void assertExists(ValueSource expected, ValueSource actual) {\n    Map context = ValueSource.newContext(searcher);\n    try {\n      expected.createWeight(context, searcher);\n      actual.createWeight(context, searcher);\n\n      for (org.apache.lucene.index.LeafReaderContext leaf : searcher.getIndexReader().leaves()) {\n        final FunctionValues expectedVals = expected.getValues(context, leaf);\n        final FunctionValues actualVals = actual.getValues(context, leaf);\n        \n        String msg = expected.toString() + \" ?= \" + actual.toString() + \" -> \";\n        for (int i = 0; i < leaf.reader().maxDoc(); ++i) {\n          assertEquals(msg + i, expectedVals.exists(i), actualVals.exists(i));\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(actual.toString(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5132ed7492455ab92d26486037983253997f6c65":["a701a7aab388afa1412a3dc23b4115c321f478c4"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5132ed7492455ab92d26486037983253997f6c65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["5132ed7492455ab92d26486037983253997f6c65"],"a701a7aab388afa1412a3dc23b4115c321f478c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"5132ed7492455ab92d26486037983253997f6c65":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","a701a7aab388afa1412a3dc23b4115c321f478c4"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a701a7aab388afa1412a3dc23b4115c321f478c4":["5132ed7492455ab92d26486037983253997f6c65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}