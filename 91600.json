{"path":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLogMergePolicyConfig().mjava","commits":[{"id":"bb79e9d21cd02f5118615fa9df1ac079d1327196","date":1377721131,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLogMergePolicyConfig().mjava","pathOld":"/dev/null","sourceNew":"  public void testLogMergePolicyConfig() throws Exception {\n    \n    final Class<? extends LogMergePolicy> mpClass = random().nextBoolean()\n      ? LogByteSizeMergePolicy.class : LogDocMergePolicy.class;\n\n    System.setProperty(\"solr.test.log.merge.policy\", mpClass.getName());\n\n    initCore(\"solrconfig-logmergepolicy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n\n    // verify some props set to -1 get lucene internal defaults\n    assertEquals(-1, solrConfig.indexConfig.maxBufferedDocs);\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, \n                 iwc.getMaxBufferedDocs());\n    assertEquals(-1, solrConfig.indexConfig.maxIndexingThreads);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, \n                 iwc.getMaxThreadStates());\n    assertEquals(-1, solrConfig.indexConfig.ramBufferSizeMB, 0.0D);\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, \n                 iwc.getRAMBufferSizeMB(), 0.0D);\n\n\n    LogMergePolicy logMP = assertAndCast(mpClass, iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(11, logMP.getMergeFactor());\n    // set by legacy <maxMergeDocs> setting\n    assertEquals(456, logMP.getMaxMergeDocs());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLogMergePolicyConfig().mjava","pathOld":"/dev/null","sourceNew":"  public void testLogMergePolicyConfig() throws Exception {\n    \n    final Class<? extends LogMergePolicy> mpClass = random().nextBoolean()\n      ? LogByteSizeMergePolicy.class : LogDocMergePolicy.class;\n\n    System.setProperty(\"solr.test.log.merge.policy\", mpClass.getName());\n\n    initCore(\"solrconfig-logmergepolicy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n\n    // verify some props set to -1 get lucene internal defaults\n    assertEquals(-1, solrConfig.indexConfig.maxBufferedDocs);\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, \n                 iwc.getMaxBufferedDocs());\n    assertEquals(-1, solrConfig.indexConfig.maxIndexingThreads);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, \n                 iwc.getMaxThreadStates());\n    assertEquals(-1, solrConfig.indexConfig.ramBufferSizeMB, 0.0D);\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, \n                 iwc.getRAMBufferSizeMB(), 0.0D);\n\n\n    LogMergePolicy logMP = assertAndCast(mpClass, iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(11, logMP.getMergeFactor());\n    // set by legacy <maxMergeDocs> setting\n    assertEquals(456, logMP.getMaxMergeDocs());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0","date":1422781929,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLogMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLogMergePolicyConfig().mjava","sourceNew":"  public void testLogMergePolicyConfig() throws Exception {\n    \n    final Class<? extends LogMergePolicy> mpClass = random().nextBoolean()\n      ? LogByteSizeMergePolicy.class : LogDocMergePolicy.class;\n\n    System.setProperty(\"solr.test.log.merge.policy\", mpClass.getName());\n\n    initCore(\"solrconfig-logmergepolicy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n\n    // verify some props set to -1 get lucene internal defaults\n    assertEquals(-1, solrConfig.indexConfig.maxBufferedDocs);\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, \n                 iwc.getMaxBufferedDocs());\n    assertEquals(-1, solrConfig.indexConfig.maxIndexingThreads);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, \n                 iwc.getMaxThreadStates());\n    assertEquals(-1, solrConfig.indexConfig.ramBufferSizeMB, 0.0D);\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, \n                 iwc.getRAMBufferSizeMB(), 0.0D);\n\n\n    LogMergePolicy logMP = assertAndCast(mpClass, iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(11, logMP.getMergeFactor());\n    // set by legacy <maxMergeDocs> setting\n    assertEquals(456, logMP.getMaxMergeDocs());\n\n  }\n\n","sourceOld":"  public void testLogMergePolicyConfig() throws Exception {\n    \n    final Class<? extends LogMergePolicy> mpClass = random().nextBoolean()\n      ? LogByteSizeMergePolicy.class : LogDocMergePolicy.class;\n\n    System.setProperty(\"solr.test.log.merge.policy\", mpClass.getName());\n\n    initCore(\"solrconfig-logmergepolicy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n\n    // verify some props set to -1 get lucene internal defaults\n    assertEquals(-1, solrConfig.indexConfig.maxBufferedDocs);\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, \n                 iwc.getMaxBufferedDocs());\n    assertEquals(-1, solrConfig.indexConfig.maxIndexingThreads);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, \n                 iwc.getMaxThreadStates());\n    assertEquals(-1, solrConfig.indexConfig.ramBufferSizeMB, 0.0D);\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, \n                 iwc.getRAMBufferSizeMB(), 0.0D);\n\n\n    LogMergePolicy logMP = assertAndCast(mpClass, iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(11, logMP.getMergeFactor());\n    // set by legacy <maxMergeDocs> setting\n    assertEquals(456, logMP.getMaxMergeDocs());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c02b804ab16489b95429791a2d8fb0e0728354d4","date":1436551798,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLogMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLogMergePolicyConfig().mjava","sourceNew":"  public void testLogMergePolicyConfig() throws Exception {\n    \n    final Class<? extends LogMergePolicy> mpClass = random().nextBoolean()\n      ? LogByteSizeMergePolicy.class : LogDocMergePolicy.class;\n\n    System.setProperty(\"solr.test.log.merge.policy\", mpClass.getName());\n\n    initCore(\"solrconfig-logmergepolicy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n\n    // verify some props set to -1 get lucene internal defaults\n    assertEquals(-1, solrConfig.indexConfig.maxBufferedDocs);\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, \n                 iwc.getMaxBufferedDocs());\n    assertEquals(-1, solrConfig.indexConfig.ramBufferSizeMB, 0.0D);\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, \n                 iwc.getRAMBufferSizeMB(), 0.0D);\n\n\n    LogMergePolicy logMP = assertAndCast(mpClass, iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(11, logMP.getMergeFactor());\n    // set by legacy <maxMergeDocs> setting\n    assertEquals(456, logMP.getMaxMergeDocs());\n\n  }\n\n","sourceOld":"  public void testLogMergePolicyConfig() throws Exception {\n    \n    final Class<? extends LogMergePolicy> mpClass = random().nextBoolean()\n      ? LogByteSizeMergePolicy.class : LogDocMergePolicy.class;\n\n    System.setProperty(\"solr.test.log.merge.policy\", mpClass.getName());\n\n    initCore(\"solrconfig-logmergepolicy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n\n    // verify some props set to -1 get lucene internal defaults\n    assertEquals(-1, solrConfig.indexConfig.maxBufferedDocs);\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, \n                 iwc.getMaxBufferedDocs());\n    assertEquals(-1, solrConfig.indexConfig.maxIndexingThreads);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, \n                 iwc.getMaxThreadStates());\n    assertEquals(-1, solrConfig.indexConfig.ramBufferSizeMB, 0.0D);\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, \n                 iwc.getRAMBufferSizeMB(), 0.0D);\n\n\n    LogMergePolicy logMP = assertAndCast(mpClass, iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(11, logMP.getMergeFactor());\n    // set by legacy <maxMergeDocs> setting\n    assertEquals(456, logMP.getMaxMergeDocs());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ea771da4621a28e1340bdaeb615d8553e4d7c9d","date":1455040025,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLogMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLogMergePolicyConfig().mjava","sourceNew":"  public void testLogMergePolicyConfig() throws Exception {\n    \n    final Class<? extends LogMergePolicy> mpClass = random().nextBoolean()\n      ? LogByteSizeMergePolicy.class : LogDocMergePolicy.class;\n\n    System.setProperty(\"solr.test.log.merge.policy\", mpClass.getName());\n\n    implTestLogMergePolicyConfig(\"solrconfig-logmergepolicy.xml\", mpClass);\n  }\n\n","sourceOld":"  public void testLogMergePolicyConfig() throws Exception {\n    \n    final Class<? extends LogMergePolicy> mpClass = random().nextBoolean()\n      ? LogByteSizeMergePolicy.class : LogDocMergePolicy.class;\n\n    System.setProperty(\"solr.test.log.merge.policy\", mpClass.getName());\n\n    initCore(\"solrconfig-logmergepolicy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n\n    // verify some props set to -1 get lucene internal defaults\n    assertEquals(-1, solrConfig.indexConfig.maxBufferedDocs);\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, \n                 iwc.getMaxBufferedDocs());\n    assertEquals(-1, solrConfig.indexConfig.ramBufferSizeMB, 0.0D);\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, \n                 iwc.getRAMBufferSizeMB(), 0.0D);\n\n\n    LogMergePolicy logMP = assertAndCast(mpClass, iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(11, logMP.getMergeFactor());\n    // set by legacy <maxMergeDocs> setting\n    assertEquals(456, logMP.getMaxMergeDocs());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d848516a5d0b23d183a2ceb4f4fb8634205956","date":1496408348,"type":4,"author":"Christine Poerschke","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLogMergePolicyConfig().mjava","sourceNew":null,"sourceOld":"  public void testLogMergePolicyConfig() throws Exception {\n    \n    final Class<? extends LogMergePolicy> mpClass = random().nextBoolean()\n      ? LogByteSizeMergePolicy.class : LogDocMergePolicy.class;\n\n    System.setProperty(\"solr.test.log.merge.policy\", mpClass.getName());\n\n    implTestLogMergePolicyConfig(\"solrconfig-logmergepolicy.xml\", mpClass);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLogMergePolicyConfig().mjava","sourceNew":null,"sourceOld":"  public void testLogMergePolicyConfig() throws Exception {\n    \n    final Class<? extends LogMergePolicy> mpClass = random().nextBoolean()\n      ? LogByteSizeMergePolicy.class : LogDocMergePolicy.class;\n\n    System.setProperty(\"solr.test.log.merge.policy\", mpClass.getName());\n\n    implTestLogMergePolicyConfig(\"solrconfig-logmergepolicy.xml\", mpClass);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLogMergePolicyConfig().mjava","sourceNew":null,"sourceOld":"  public void testLogMergePolicyConfig() throws Exception {\n    \n    final Class<? extends LogMergePolicy> mpClass = random().nextBoolean()\n      ? LogByteSizeMergePolicy.class : LogDocMergePolicy.class;\n\n    System.setProperty(\"solr.test.log.merge.policy\", mpClass.getName());\n\n    implTestLogMergePolicyConfig(\"solrconfig-logmergepolicy.xml\", mpClass);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1ea771da4621a28e1340bdaeb615d8553e4d7c9d":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["1ea771da4621a28e1340bdaeb615d8553e4d7c9d","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bb79e9d21cd02f5118615fa9df1ac079d1327196"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["1ea771da4621a28e1340bdaeb615d8553e4d7c9d"],"bb79e9d21cd02f5118615fa9df1ac079d1327196":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["1ea771da4621a28e1340bdaeb615d8553e4d7c9d","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["bb79e9d21cd02f5118615fa9df1ac079d1327196"]},"commit2Childs":{"1ea771da4621a28e1340bdaeb615d8553e4d7c9d":["e9017cf144952056066919f1ebc7897ff9bd71b1","70d848516a5d0b23d183a2ceb4f4fb8634205956","28288370235ed02234a64753cdbf0c6ec096304a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","bb79e9d21cd02f5118615fa9df1ac079d1327196"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"bb79e9d21cd02f5118615fa9df1ac079d1327196":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["1ea771da4621a28e1340bdaeb615d8553e4d7c9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["c02b804ab16489b95429791a2d8fb0e0728354d4"]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}