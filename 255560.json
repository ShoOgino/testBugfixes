{"path":"lucene/src/java/org/apache/lucene/store/RateLimiter#pause(long).mjava","commits":[{"id":"b14fe3e39e307a3142473ce571df73c1624ddfcb","date":1309114104,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/RateLimiter#pause(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Pauses, if necessary, to keep the instantaneous IO\n   *  rate at or below the target. NOTE: multiple threads\n   *  may safely use this, however the implementation is\n   *  not perfectly thread safe but likely in practice this\n   *  is harmless (just means in some rare cases the rate\n   *  might exceed the target).  It's best to call this\n   *  with a biggish count, not one byte at a time. */\n  public void pause(long bytes) {\n\n    // TODO: this is purely instantenous rate; maybe we\n    // should also offer decayed recent history one?\n    final long targetNS = lastNS = lastNS + ((long) (bytes * nsPerByte));\n    long curNS = System.nanoTime();\n    if (lastNS < curNS) {\n      lastNS = curNS;\n    }\n\n    // While loop because Thread.sleep doesn't alway sleep\n    // enough:\n    while(true) {\n      final long pauseNS = targetNS - curNS;\n      if (pauseNS > 0) {\n        try {\n          Thread.sleep((int) (pauseNS/1000000), (int) (pauseNS % 1000000));\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n        curNS = System.nanoTime();\n        continue;\n      }\n      break;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/RateLimiter#pause(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Pauses, if necessary, to keep the instantaneous IO\n   *  rate at or below the target. NOTE: multiple threads\n   *  may safely use this, however the implementation is\n   *  not perfectly thread safe but likely in practice this\n   *  is harmless (just means in some rare cases the rate\n   *  might exceed the target).  It's best to call this\n   *  with a biggish count, not one byte at a time. */\n  public void pause(long bytes) {\n\n    // TODO: this is purely instantenous rate; maybe we\n    // should also offer decayed recent history one?\n    final long targetNS = lastNS = lastNS + ((long) (bytes * nsPerByte));\n    long curNS = System.nanoTime();\n    if (lastNS < curNS) {\n      lastNS = curNS;\n    }\n\n    // While loop because Thread.sleep doesn't alway sleep\n    // enough:\n    while(true) {\n      final long pauseNS = targetNS - curNS;\n      if (pauseNS > 0) {\n        try {\n          Thread.sleep((int) (pauseNS/1000000), (int) (pauseNS % 1000000));\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n        curNS = System.nanoTime();\n        continue;\n      }\n      break;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/RateLimiter#pause(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Pauses, if necessary, to keep the instantaneous IO\n   *  rate at or below the target. NOTE: multiple threads\n   *  may safely use this, however the implementation is\n   *  not perfectly thread safe but likely in practice this\n   *  is harmless (just means in some rare cases the rate\n   *  might exceed the target).  It's best to call this\n   *  with a biggish count, not one byte at a time. */\n  public void pause(long bytes) {\n\n    // TODO: this is purely instantenous rate; maybe we\n    // should also offer decayed recent history one?\n    final long targetNS = lastNS = lastNS + ((long) (bytes * nsPerByte));\n    long curNS = System.nanoTime();\n    if (lastNS < curNS) {\n      lastNS = curNS;\n    }\n\n    // While loop because Thread.sleep doesn't alway sleep\n    // enough:\n    while(true) {\n      final long pauseNS = targetNS - curNS;\n      if (pauseNS > 0) {\n        try {\n          Thread.sleep((int) (pauseNS/1000000), (int) (pauseNS % 1000000));\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n        curNS = System.nanoTime();\n        continue;\n      }\n      break;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6adfdb3f33dbaf27203539f573faac3966cc55f","date":1318443641,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/RateLimiter#pause(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/RateLimiter#pause(long).mjava","sourceNew":"  /** Pauses, if necessary, to keep the instantaneous IO\n   *  rate at or below the target. NOTE: multiple threads\n   *  may safely use this, however the implementation is\n   *  not perfectly thread safe but likely in practice this\n   *  is harmless (just means in some rare cases the rate\n   *  might exceed the target).  It's best to call this\n   *  with a biggish count, not one byte at a time. */\n  public void pause(long bytes) {\n\n    // TODO: this is purely instantaneous rate; maybe we\n    // should also offer decayed recent history one?\n    final long targetNS = lastNS = lastNS + ((long) (bytes * nsPerByte));\n    long curNS = System.nanoTime();\n    if (lastNS < curNS) {\n      lastNS = curNS;\n    }\n\n    // While loop because Thread.sleep doesn't always sleep\n    // enough:\n    while(true) {\n      final long pauseNS = targetNS - curNS;\n      if (pauseNS > 0) {\n        try {\n          Thread.sleep((int) (pauseNS/1000000), (int) (pauseNS % 1000000));\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n        curNS = System.nanoTime();\n        continue;\n      }\n      break;\n    }\n  }\n\n","sourceOld":"  /** Pauses, if necessary, to keep the instantaneous IO\n   *  rate at or below the target. NOTE: multiple threads\n   *  may safely use this, however the implementation is\n   *  not perfectly thread safe but likely in practice this\n   *  is harmless (just means in some rare cases the rate\n   *  might exceed the target).  It's best to call this\n   *  with a biggish count, not one byte at a time. */\n  public void pause(long bytes) {\n\n    // TODO: this is purely instantenous rate; maybe we\n    // should also offer decayed recent history one?\n    final long targetNS = lastNS = lastNS + ((long) (bytes * nsPerByte));\n    long curNS = System.nanoTime();\n    if (lastNS < curNS) {\n      lastNS = curNS;\n    }\n\n    // While loop because Thread.sleep doesn't alway sleep\n    // enough:\n    while(true) {\n      final long pauseNS = targetNS - curNS;\n      if (pauseNS > 0) {\n        try {\n          Thread.sleep((int) (pauseNS/1000000), (int) (pauseNS % 1000000));\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n        curNS = System.nanoTime();\n        continue;\n      }\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RateLimiter#pause(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/RateLimiter#pause(long).mjava","sourceNew":"  /** Pauses, if necessary, to keep the instantaneous IO\n   *  rate at or below the target. NOTE: multiple threads\n   *  may safely use this, however the implementation is\n   *  not perfectly thread safe but likely in practice this\n   *  is harmless (just means in some rare cases the rate\n   *  might exceed the target).  It's best to call this\n   *  with a biggish count, not one byte at a time. */\n  public void pause(long bytes) {\n\n    // TODO: this is purely instantaneous rate; maybe we\n    // should also offer decayed recent history one?\n    final long targetNS = lastNS = lastNS + ((long) (bytes * nsPerByte));\n    long curNS = System.nanoTime();\n    if (lastNS < curNS) {\n      lastNS = curNS;\n    }\n\n    // While loop because Thread.sleep doesn't always sleep\n    // enough:\n    while(true) {\n      final long pauseNS = targetNS - curNS;\n      if (pauseNS > 0) {\n        try {\n          Thread.sleep((int) (pauseNS/1000000), (int) (pauseNS % 1000000));\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n        curNS = System.nanoTime();\n        continue;\n      }\n      break;\n    }\n  }\n\n","sourceOld":"  /** Pauses, if necessary, to keep the instantaneous IO\n   *  rate at or below the target. NOTE: multiple threads\n   *  may safely use this, however the implementation is\n   *  not perfectly thread safe but likely in practice this\n   *  is harmless (just means in some rare cases the rate\n   *  might exceed the target).  It's best to call this\n   *  with a biggish count, not one byte at a time. */\n  public void pause(long bytes) {\n\n    // TODO: this is purely instantaneous rate; maybe we\n    // should also offer decayed recent history one?\n    final long targetNS = lastNS = lastNS + ((long) (bytes * nsPerByte));\n    long curNS = System.nanoTime();\n    if (lastNS < curNS) {\n      lastNS = curNS;\n    }\n\n    // While loop because Thread.sleep doesn't always sleep\n    // enough:\n    while(true) {\n      final long pauseNS = targetNS - curNS;\n      if (pauseNS > 0) {\n        try {\n          Thread.sleep((int) (pauseNS/1000000), (int) (pauseNS % 1000000));\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n        curNS = System.nanoTime();\n        continue;\n      }\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a6adfdb3f33dbaf27203539f573faac3966cc55f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b14fe3e39e307a3142473ce571df73c1624ddfcb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a6adfdb3f33dbaf27203539f573faac3966cc55f":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b14fe3e39e307a3142473ce571df73c1624ddfcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b14fe3e39e307a3142473ce571df73c1624ddfcb","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"b14fe3e39e307a3142473ce571df73c1624ddfcb":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"a6adfdb3f33dbaf27203539f573faac3966cc55f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5d004d0e0b3f65bb40da76d476d659d7888270e8","a6adfdb3f33dbaf27203539f573faac3966cc55f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}