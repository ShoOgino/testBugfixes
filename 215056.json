{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#createTempFile(String,String,File).mjava","commits":[{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":1,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#createTempFile(String,String,File).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#createTempFile(String,String,File).mjava","sourceNew":"  /** \n   * insecure, fast version of File.createTempFile\n   * uses Random instead of SecureRandom.\n   */\n  public static File createTempFile(String prefix, String suffix, File directory)\n      throws IOException {\n    if (prefix.length() < 3) {\n      throw new IllegalArgumentException(\"prefix must be at least 3 characters\");\n    }\n    String newSuffix = suffix == null ? \".tmp\" : suffix;\n    // always pull a long from master random. that way, the randomness of the test\n    // is not affected by whether it initialized the counter (in genTempFile) or not.\n    // note that the Random used by genTempFile is *not* the master Random, and therefore\n    // does not affect the randomness of the test.\n    final Random random = new Random(RandomizedContext.current().getRandom().nextLong());\n    File result;\n    do {\n      result = genTempFile(random, prefix, newSuffix, directory);\n    } while (!result.createNewFile());\n    return result;\n  }\n\n","sourceOld":"  /** \n   * insecure, fast version of File.createTempFile\n   * uses Random instead of SecureRandom.\n   */\n  public static File createTempFile(String prefix, String suffix, File directory)\n      throws IOException {\n    if (prefix.length() < 3) {\n      throw new IllegalArgumentException(\"prefix must be at least 3 characters\");\n    }\n    String newSuffix = suffix == null ? \".tmp\" : suffix;\n    // always pull a long from master random. that way, the randomness of the test\n    // is not affected by whether it initialized the counter (in genTempFile) or not.\n    // note that the Random used by genTempFile is *not* the master Random, and therefore\n    // does not affect the randomness of the test.\n    final Random random = new Random(RandomizedContext.current().getRandom().nextLong());\n    File result;\n    do {\n      result = genTempFile(random, prefix, newSuffix, directory);\n    } while (!result.createNewFile());\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#createTempFile(String,String,File).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#createTempFile(String,String,File).mjava","sourceNew":"  /** \n   * Insecure, fast version of {@link File#createTempFile(String, String)}, uses \n   * Random instead of SecureRandom.\n   */\n  public static File createTempFile(String prefix, String suffix, File directory)\n      throws IOException {\n    if (prefix.length() < 3) {\n      throw new IllegalArgumentException(\"prefix must be at least 3 characters\");\n    }\n    String newSuffix = suffix == null ? \".tmp\" : suffix;\n    // always pull a long from master random. that way, the randomness of the test\n    // is not affected by whether it initialized the counter (in genTempFile) or not.\n    // note that the Random used by genTempFile is *not* the master Random, and therefore\n    // does not affect the randomness of the test.\n    final Random random = new Random(RandomizedContext.current().getRandom().nextLong());\n    File result;\n    do {\n      result = genTempFile(random, prefix, newSuffix, directory);\n    } while (!result.createNewFile());\n    LuceneTestCase.closeAfterSuite(new CloseableFile(result, LuceneTestCase.suiteFailureMarker));\n    return result;\n  }\n\n","sourceOld":"  /** \n   * insecure, fast version of File.createTempFile\n   * uses Random instead of SecureRandom.\n   */\n  public static File createTempFile(String prefix, String suffix, File directory)\n      throws IOException {\n    if (prefix.length() < 3) {\n      throw new IllegalArgumentException(\"prefix must be at least 3 characters\");\n    }\n    String newSuffix = suffix == null ? \".tmp\" : suffix;\n    // always pull a long from master random. that way, the randomness of the test\n    // is not affected by whether it initialized the counter (in genTempFile) or not.\n    // note that the Random used by genTempFile is *not* the master Random, and therefore\n    // does not affect the randomness of the test.\n    final Random random = new Random(RandomizedContext.current().getRandom().nextLong());\n    File result;\n    do {\n      result = genTempFile(random, prefix, newSuffix, directory);\n    } while (!result.createNewFile());\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be04a7534a8a0679382542b62556ea5fba6cfb7f","date":1396613089,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#createTempFile(String,String,File).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#createTempFile(String,String,File).mjava","sourceNew":"  /** \n   * Insecure, fast version of {@link File#createTempFile(String, String)}, uses \n   * Random instead of SecureRandom.\n   */\n  public static File createTempFile(String prefix, String suffix, File directory) throws IOException {\n    if (prefix.length() < 3) {\n      throw new IllegalArgumentException(\"prefix must be at least 3 characters\");\n    }\n    String newSuffix = suffix == null ? \".tmp\" : suffix;\n    File result;\n    do {\n      result = genTempFile(prefix, newSuffix, directory);\n    } while (!result.createNewFile());\n    return maybeRemoveAfterSuite(result);\n  }\n\n","sourceOld":"  /** \n   * Insecure, fast version of {@link File#createTempFile(String, String)}, uses \n   * Random instead of SecureRandom.\n   */\n  public static File createTempFile(String prefix, String suffix, File directory)\n      throws IOException {\n    if (prefix.length() < 3) {\n      throw new IllegalArgumentException(\"prefix must be at least 3 characters\");\n    }\n    String newSuffix = suffix == null ? \".tmp\" : suffix;\n    // always pull a long from master random. that way, the randomness of the test\n    // is not affected by whether it initialized the counter (in genTempFile) or not.\n    // note that the Random used by genTempFile is *not* the master Random, and therefore\n    // does not affect the randomness of the test.\n    final Random random = new Random(RandomizedContext.current().getRandom().nextLong());\n    File result;\n    do {\n      result = genTempFile(random, prefix, newSuffix, directory);\n    } while (!result.createNewFile());\n    LuceneTestCase.closeAfterSuite(new CloseableFile(result, LuceneTestCase.suiteFailureMarker));\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#createTempFile(String,String,File).mjava","sourceNew":null,"sourceOld":"  /** \n   * Insecure, fast version of {@link File#createTempFile(String, String)}, uses \n   * Random instead of SecureRandom.\n   */\n  public static File createTempFile(String prefix, String suffix, File directory) throws IOException {\n    if (prefix.length() < 3) {\n      throw new IllegalArgumentException(\"prefix must be at least 3 characters\");\n    }\n    String newSuffix = suffix == null ? \".tmp\" : suffix;\n    File result;\n    do {\n      result = genTempFile(prefix, newSuffix, directory);\n    } while (!result.createNewFile());\n    return maybeRemoveAfterSuite(result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#createTempFile(String,String,File).mjava","sourceNew":null,"sourceOld":"  /** \n   * insecure, fast version of File.createTempFile\n   * uses Random instead of SecureRandom.\n   */\n  public static File createTempFile(String prefix, String suffix, File directory)\n      throws IOException {\n    if (prefix.length() < 3) {\n      throw new IllegalArgumentException(\"prefix must be at least 3 characters\");\n    }\n    String newSuffix = suffix == null ? \".tmp\" : suffix;\n    // always pull a long from master random. that way, the randomness of the test\n    // is not affected by whether it initialized the counter (in genTempFile) or not.\n    // note that the Random used by genTempFile is *not* the master Random, and therefore\n    // does not affect the randomness of the test.\n    final Random random = new Random(RandomizedContext.current().getRandom().nextLong());\n    File result;\n    do {\n      result = genTempFile(random, prefix, newSuffix, directory);\n    } while (!result.createNewFile());\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["be04a7534a8a0679382542b62556ea5fba6cfb7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"be04a7534a8a0679382542b62556ea5fba6cfb7f":["d0d579490a72f2e6297eaa648940611234c57cf1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"]},"commit2Childs":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6613659748fe4411a7dcf85266e55db1f95f7315"],"d0d579490a72f2e6297eaa648940611234c57cf1":["be04a7534a8a0679382542b62556ea5fba6cfb7f"],"be04a7534a8a0679382542b62556ea5fba6cfb7f":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}