{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#closeReporters(String).mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#closeReporters(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Close and unregister all {@link SolrMetricReporter}-s for a registry.\n   * @param registry registry name\n   * @return names of closed reporters\n   */\n  public Set<String> closeReporters(String registry) {\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        log.warn(\"Could not obtain lock to modify reporters registry: \" + registry);\n        return Collections.emptySet();\n      }\n    } catch (InterruptedException e) {\n      log.warn(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n      return Collections.emptySet();\n    }\n    log.info(\"Closing metric reporters for: \" + registry);\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.remove(registry);\n      if (perRegistry != null) {\n        for (SolrMetricReporter reporter : perRegistry.values()) {\n          try {\n            reporter.close();\n          } catch (IOException ioe) {\n            log.warn(\"Exception closing reporter \" + reporter, ioe);\n          }\n        }\n        return perRegistry.keySet();\n      } else {\n        return Collections.emptySet();\n      }\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#closeReporters(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Close and unregister all {@link SolrMetricReporter}-s for a registry.\n   * @param registry registry name\n   * @return names of closed reporters\n   */\n  public Set<String> closeReporters(String registry) {\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        log.warn(\"Could not obtain lock to modify reporters registry: \" + registry);\n        return Collections.emptySet();\n      }\n    } catch (InterruptedException e) {\n      log.warn(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n      return Collections.emptySet();\n    }\n    log.info(\"Closing metric reporters for: \" + registry);\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.remove(registry);\n      if (perRegistry != null) {\n        for (SolrMetricReporter reporter : perRegistry.values()) {\n          try {\n            reporter.close();\n          } catch (IOException ioe) {\n            log.warn(\"Exception closing reporter \" + reporter, ioe);\n          }\n        }\n        return perRegistry.keySet();\n      } else {\n        return Collections.emptySet();\n      }\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#closeReporters(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#closeReporters(String).mjava","sourceNew":"  /**\n   * Close and unregister all {@link SolrMetricReporter}-s for a registry.\n   * @param registry registry name\n   * @return names of closed reporters\n   */\n  public Set<String> closeReporters(String registry) {\n    return closeReporters(registry, null);\n  }\n\n","sourceOld":"  /**\n   * Close and unregister all {@link SolrMetricReporter}-s for a registry.\n   * @param registry registry name\n   * @return names of closed reporters\n   */\n  public Set<String> closeReporters(String registry) {\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        log.warn(\"Could not obtain lock to modify reporters registry: \" + registry);\n        return Collections.emptySet();\n      }\n    } catch (InterruptedException e) {\n      log.warn(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n      return Collections.emptySet();\n    }\n    log.info(\"Closing metric reporters for: \" + registry);\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.remove(registry);\n      if (perRegistry != null) {\n        for (SolrMetricReporter reporter : perRegistry.values()) {\n          try {\n            reporter.close();\n          } catch (IOException ioe) {\n            log.warn(\"Exception closing reporter \" + reporter, ioe);\n          }\n        }\n        return perRegistry.keySet();\n      } else {\n        return Collections.emptySet();\n      }\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6224f40fcf60b05c62a88f50925c1bbae324bdfd","date":1565402430,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#closeReporters(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#closeReporters(String).mjava","sourceNew":"  /**\n   * Close and unregister all {@link SolrMetricReporter}-s for a registry.\n   *\n   * @param registry registry name\n   * @return names of closed reporters\n   */\n  public Set<String> closeReporters(String registry) {\n    return closeReporters(registry, null);\n  }\n\n","sourceOld":"  /**\n   * Close and unregister all {@link SolrMetricReporter}-s for a registry.\n   * @param registry registry name\n   * @return names of closed reporters\n   */\n  public Set<String> closeReporters(String registry) {\n    return closeReporters(registry, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["0265144286422ad99682a00904cc2536b79c8535"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"]},"commit2Childs":{"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}