{"path":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#getAttributeInterfaces(Class[#-extends-AttributeImpl]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#getAttributeInterfaces(Class[#-extends-AttributeImpl]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/AttributeSource#getAttributeInterfaces(Class[#-extends-AttributeImpl]).mjava","sourceNew":"  static LinkedList<WeakReference<Class<? extends Attribute>>> getAttributeInterfaces(final Class<? extends AttributeImpl> clazz) {\n    LinkedList<WeakReference<Class<? extends Attribute>>> foundInterfaces = knownImplClasses.get(clazz);\n    if (foundInterfaces == null) {\n      // we have the slight chance that another thread may do the same, but who cares?\n      foundInterfaces = new LinkedList<WeakReference<Class<? extends Attribute>>>();\n      // find all interfaces that this attribute instance implements\n      // and that extend the Attribute interface\n      Class<?> actClazz = clazz;\n      do {\n        for (Class<?> curInterface : actClazz.getInterfaces()) {\n          if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n            foundInterfaces.add(new WeakReference<Class<? extends Attribute>>(curInterface.asSubclass(Attribute.class)));\n          }\n        }\n        actClazz = actClazz.getSuperclass();\n      } while (actClazz != null);\n      knownImplClasses.put(clazz, foundInterfaces);\n    }\n    return foundInterfaces;\n  }\n\n","sourceOld":"  static LinkedList<WeakReference<Class<? extends Attribute>>> getAttributeInterfaces(final Class<? extends AttributeImpl> clazz) {\n    LinkedList<WeakReference<Class<? extends Attribute>>> foundInterfaces = knownImplClasses.get(clazz);\n    if (foundInterfaces == null) {\n      // we have the slight chance that another thread may do the same, but who cares?\n      foundInterfaces = new LinkedList<WeakReference<Class<? extends Attribute>>>();\n      // find all interfaces that this attribute instance implements\n      // and that extend the Attribute interface\n      Class<?> actClazz = clazz;\n      do {\n        for (Class<?> curInterface : actClazz.getInterfaces()) {\n          if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n            foundInterfaces.add(new WeakReference<Class<? extends Attribute>>(curInterface.asSubclass(Attribute.class)));\n          }\n        }\n        actClazz = actClazz.getSuperclass();\n      } while (actClazz != null);\n      knownImplClasses.put(clazz, foundInterfaces);\n    }\n    return foundInterfaces;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#getAttributeInterfaces(Class[#-extends-AttributeImpl]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#getAttributeInterfaces(Class[#-extends-AttributeImpl]).mjava","sourceNew":"  static LinkedList<WeakReference<Class<? extends Attribute>>> getAttributeInterfaces(final Class<? extends AttributeImpl> clazz) {\n    LinkedList<WeakReference<Class<? extends Attribute>>> foundInterfaces = knownImplClasses.get(clazz);\n    if (foundInterfaces == null) {\n      // we have the slight chance that another thread may do the same, but who cares?\n      foundInterfaces = new LinkedList<>();\n      // find all interfaces that this attribute instance implements\n      // and that extend the Attribute interface\n      Class<?> actClazz = clazz;\n      do {\n        for (Class<?> curInterface : actClazz.getInterfaces()) {\n          if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n            foundInterfaces.add(new WeakReference<Class<? extends Attribute>>(curInterface.asSubclass(Attribute.class)));\n          }\n        }\n        actClazz = actClazz.getSuperclass();\n      } while (actClazz != null);\n      knownImplClasses.put(clazz, foundInterfaces);\n    }\n    return foundInterfaces;\n  }\n\n","sourceOld":"  static LinkedList<WeakReference<Class<? extends Attribute>>> getAttributeInterfaces(final Class<? extends AttributeImpl> clazz) {\n    LinkedList<WeakReference<Class<? extends Attribute>>> foundInterfaces = knownImplClasses.get(clazz);\n    if (foundInterfaces == null) {\n      // we have the slight chance that another thread may do the same, but who cares?\n      foundInterfaces = new LinkedList<WeakReference<Class<? extends Attribute>>>();\n      // find all interfaces that this attribute instance implements\n      // and that extend the Attribute interface\n      Class<?> actClazz = clazz;\n      do {\n        for (Class<?> curInterface : actClazz.getInterfaces()) {\n          if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n            foundInterfaces.add(new WeakReference<Class<? extends Attribute>>(curInterface.asSubclass(Attribute.class)));\n          }\n        }\n        actClazz = actClazz.getSuperclass();\n      } while (actClazz != null);\n      knownImplClasses.put(clazz, foundInterfaces);\n    }\n    return foundInterfaces;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93124590c6e2a8b45898cbae46f96c3a05d9bce0","date":1399415098,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#getAttributeInterfaces(Class[#-extends-AttributeImpl]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#getAttributeInterfaces(Class[#-extends-AttributeImpl]).mjava","sourceNew":"  static Reference<Class<? extends Attribute>>[] getAttributeInterfaces(final Class<? extends AttributeImpl> clazz) {\n    Reference<Class<? extends Attribute>>[] foundInterfaces = knownImplClasses.get(clazz);\n    if (foundInterfaces == null) {\n      // we have the slight chance that another thread may do the same, but who cares?\n      final List<Reference<Class<? extends Attribute>>> intfList = new ArrayList<>();\n      // find all interfaces that this attribute instance implements\n      // and that extend the Attribute interface\n      Class<?> actClazz = clazz;\n      do {\n        for (Class<?> curInterface : actClazz.getInterfaces()) {\n          if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n            intfList.add(new WeakReference<Class<? extends Attribute>>(curInterface.asSubclass(Attribute.class)));\n          }\n        }\n        actClazz = actClazz.getSuperclass();\n      } while (actClazz != null);\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"}) final Reference<Class<? extends Attribute>>[] a =\n          intfList.toArray(new Reference[intfList.size()]);\n      knownImplClasses.put(clazz, foundInterfaces = a);\n    }\n    return foundInterfaces;\n  }\n\n","sourceOld":"  static LinkedList<WeakReference<Class<? extends Attribute>>> getAttributeInterfaces(final Class<? extends AttributeImpl> clazz) {\n    LinkedList<WeakReference<Class<? extends Attribute>>> foundInterfaces = knownImplClasses.get(clazz);\n    if (foundInterfaces == null) {\n      // we have the slight chance that another thread may do the same, but who cares?\n      foundInterfaces = new LinkedList<>();\n      // find all interfaces that this attribute instance implements\n      // and that extend the Attribute interface\n      Class<?> actClazz = clazz;\n      do {\n        for (Class<?> curInterface : actClazz.getInterfaces()) {\n          if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n            foundInterfaces.add(new WeakReference<Class<? extends Attribute>>(curInterface.asSubclass(Attribute.class)));\n          }\n        }\n        actClazz = actClazz.getSuperclass();\n      } while (actClazz != null);\n      knownImplClasses.put(clazz, foundInterfaces);\n    }\n    return foundInterfaces;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38fce186d877ee988f82c708a92d9e21343e3bfe","date":1408099813,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#getAttributeInterfaces(Class[#-extends-AttributeImpl]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#getAttributeInterfaces(Class[#-extends-AttributeImpl]).mjava","sourceNew":"  static Class<? extends Attribute>[] getAttributeInterfaces(final Class<? extends AttributeImpl> clazz) {\n    return implInterfaces.get(clazz);\n  }\n\n","sourceOld":"  static Reference<Class<? extends Attribute>>[] getAttributeInterfaces(final Class<? extends AttributeImpl> clazz) {\n    Reference<Class<? extends Attribute>>[] foundInterfaces = knownImplClasses.get(clazz);\n    if (foundInterfaces == null) {\n      // we have the slight chance that another thread may do the same, but who cares?\n      final List<Reference<Class<? extends Attribute>>> intfList = new ArrayList<>();\n      // find all interfaces that this attribute instance implements\n      // and that extend the Attribute interface\n      Class<?> actClazz = clazz;\n      do {\n        for (Class<?> curInterface : actClazz.getInterfaces()) {\n          if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n            intfList.add(new WeakReference<Class<? extends Attribute>>(curInterface.asSubclass(Attribute.class)));\n          }\n        }\n        actClazz = actClazz.getSuperclass();\n      } while (actClazz != null);\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"}) final Reference<Class<? extends Attribute>>[] a =\n          intfList.toArray(new Reference[intfList.size()]);\n      knownImplClasses.put(clazz, foundInterfaces = a);\n    }\n    return foundInterfaces;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93124590c6e2a8b45898cbae46f96c3a05d9bce0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38fce186d877ee988f82c708a92d9e21343e3bfe":["93124590c6e2a8b45898cbae46f96c3a05d9bce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["38fce186d877ee988f82c708a92d9e21343e3bfe"]},"commit2Childs":{"93124590c6e2a8b45898cbae46f96c3a05d9bce0":["38fce186d877ee988f82c708a92d9e21343e3bfe"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["93124590c6e2a8b45898cbae46f96c3a05d9bce0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"38fce186d877ee988f82c708a92d9e21343e3bfe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}