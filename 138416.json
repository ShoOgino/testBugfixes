{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#refresh().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#refresh().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#refresh().mjava","sourceNew":"  /**\n   * refresh() re-reads the taxonomy information if there were any changes to\n   * the taxonomy since this instance was opened or last refreshed. Calling\n   * refresh() is more efficient than close()ing the old instance and opening a\n   * new one.\n   * <P>\n   * If there were no changes since this instance was opened or last refreshed,\n   * then this call does nothing. Note, however, that this is still a relatively\n   * slow method (as it needs to verify whether there have been any changes on\n   * disk to the taxonomy), so it should not be called too often needlessly. In\n   * faceted search, the taxonomy reader's refresh() should be called only after\n   * a reopen() of the main index.\n   * <P>\n   * Refreshing the taxonomy might fail in some cases, for example \n   * if the taxonomy was recreated since this instance was opened or last refreshed.\n   * In this case an {@link InconsistentTaxonomyException} is thrown,\n   * suggesting that in order to obtain up-to-date taxonomy data a new\n   * {@link TaxonomyReader} should be opened. Note: This {@link TaxonomyReader} \n   * instance remains unchanged and usable in this case, and the application can\n   * continue to use it, and should still {@link #close()} when no longer needed.  \n   * <P>\n   * It should be noted that refresh() is similar in purpose to\n   * IndexReader.reopen(), but the two methods behave differently. refresh()\n   * refreshes the existing TaxonomyReader object, rather than opening a new one\n   * in addition to the old one as reopen() does. The reason is that in a\n   * taxonomy, one can only add new categories and cannot modify or delete\n   * existing categories; Therefore, there is no reason to keep an old snapshot\n   * of the taxonomy open - refreshing the taxonomy to the newest data and using\n   * this new snapshots in all threads (whether new or old) is fine. This saves\n   * us needing to keep multiple copies of the taxonomy open in memory.\n   * @return true if anything has changed, false otherwise. \n   */\n  public boolean refresh() throws IOException, InconsistentTaxonomyException;\n\n","sourceOld":"  /**\n   * refresh() re-reads the taxonomy information if there were any changes to\n   * the taxonomy since this instance was opened or last refreshed. Calling\n   * refresh() is more efficient than close()ing the old instance and opening a\n   * new one.\n   * <P>\n   * If there were no changes since this instance was opened or last refreshed,\n   * then this call does nothing. Note, however, that this is still a relatively\n   * slow method (as it needs to verify whether there have been any changes on\n   * disk to the taxonomy), so it should not be called too often needlessly. In\n   * faceted search, the taxonomy reader's refresh() should be called only after\n   * a reopen() of the main index.\n   * <P>\n   * Refreshing the taxonomy might fail in some cases, for example \n   * if the taxonomy was recreated since this instance was opened or last refreshed.\n   * In this case an {@link InconsistentTaxonomyException} is thrown,\n   * suggesting that in order to obtain up-to-date taxonomy data a new\n   * {@link TaxonomyReader} should be opened. Note: This {@link TaxonomyReader} \n   * instance remains unchanged and usable in this case, and the application can\n   * continue to use it, and should still {@link #close()} when no longer needed.  \n   * <P>\n   * It should be noted that refresh() is similar in purpose to\n   * IndexReader.reopen(), but the two methods behave differently. refresh()\n   * refreshes the existing TaxonomyReader object, rather than opening a new one\n   * in addition to the old one as reopen() does. The reason is that in a\n   * taxonomy, one can only add new categories and cannot modify or delete\n   * existing categories; Therefore, there is no reason to keep an old snapshot\n   * of the taxonomy open - refreshing the taxonomy to the newest data and using\n   * this new snapshots in all threads (whether new or old) is fine. This saves\n   * us needing to keep multiple copies of the taxonomy open in memory.\n   * @return true if anything has changed, false otherwise. \n   */\n  public boolean refresh() throws IOException, InconsistentTaxonomyException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1","date":1353511594,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#refresh().mjava","sourceNew":null,"sourceOld":"  /**\n   * refresh() re-reads the taxonomy information if there were any changes to\n   * the taxonomy since this instance was opened or last refreshed. Calling\n   * refresh() is more efficient than close()ing the old instance and opening a\n   * new one.\n   * <P>\n   * If there were no changes since this instance was opened or last refreshed,\n   * then this call does nothing. Note, however, that this is still a relatively\n   * slow method (as it needs to verify whether there have been any changes on\n   * disk to the taxonomy), so it should not be called too often needlessly. In\n   * faceted search, the taxonomy reader's refresh() should be called only after\n   * a reopen() of the main index.\n   * <P>\n   * Refreshing the taxonomy might fail in some cases, for example \n   * if the taxonomy was recreated since this instance was opened or last refreshed.\n   * In this case an {@link InconsistentTaxonomyException} is thrown,\n   * suggesting that in order to obtain up-to-date taxonomy data a new\n   * {@link TaxonomyReader} should be opened. Note: This {@link TaxonomyReader} \n   * instance remains unchanged and usable in this case, and the application can\n   * continue to use it, and should still {@link #close()} when no longer needed.  \n   * <P>\n   * It should be noted that refresh() is similar in purpose to\n   * IndexReader.reopen(), but the two methods behave differently. refresh()\n   * refreshes the existing TaxonomyReader object, rather than opening a new one\n   * in addition to the old one as reopen() does. The reason is that in a\n   * taxonomy, one can only add new categories and cannot modify or delete\n   * existing categories; Therefore, there is no reason to keep an old snapshot\n   * of the taxonomy open - refreshing the taxonomy to the newest data and using\n   * this new snapshots in all threads (whether new or old) is fine. This saves\n   * us needing to keep multiple copies of the taxonomy open in memory.\n   * @return true if anything has changed, false otherwise. \n   */\n  public boolean refresh() throws IOException, InconsistentTaxonomyException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#refresh().mjava","sourceNew":null,"sourceOld":"  /**\n   * refresh() re-reads the taxonomy information if there were any changes to\n   * the taxonomy since this instance was opened or last refreshed. Calling\n   * refresh() is more efficient than close()ing the old instance and opening a\n   * new one.\n   * <P>\n   * If there were no changes since this instance was opened or last refreshed,\n   * then this call does nothing. Note, however, that this is still a relatively\n   * slow method (as it needs to verify whether there have been any changes on\n   * disk to the taxonomy), so it should not be called too often needlessly. In\n   * faceted search, the taxonomy reader's refresh() should be called only after\n   * a reopen() of the main index.\n   * <P>\n   * Refreshing the taxonomy might fail in some cases, for example \n   * if the taxonomy was recreated since this instance was opened or last refreshed.\n   * In this case an {@link InconsistentTaxonomyException} is thrown,\n   * suggesting that in order to obtain up-to-date taxonomy data a new\n   * {@link TaxonomyReader} should be opened. Note: This {@link TaxonomyReader} \n   * instance remains unchanged and usable in this case, and the application can\n   * continue to use it, and should still {@link #close()} when no longer needed.  \n   * <P>\n   * It should be noted that refresh() is similar in purpose to\n   * IndexReader.reopen(), but the two methods behave differently. refresh()\n   * refreshes the existing TaxonomyReader object, rather than opening a new one\n   * in addition to the old one as reopen() does. The reason is that in a\n   * taxonomy, one can only add new categories and cannot modify or delete\n   * existing categories; Therefore, there is no reason to keep an old snapshot\n   * of the taxonomy open - refreshing the taxonomy to the newest data and using\n   * this new snapshots in all threads (whether new or old) is fine. This saves\n   * us needing to keep multiple copies of the taxonomy open in memory.\n   * @return true if anything has changed, false otherwise. \n   */\n  public boolean refresh() throws IOException, InconsistentTaxonomyException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["b89678825b68eccaf09e6ab71675fc0b0af1e099","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["407687e67faf6e1f02a211ca078d8e3eed631027","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}