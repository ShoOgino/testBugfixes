{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Collector).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link IndexSearcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(AtomicReaderContext[] leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (int i = 0; i < leaves.length; i++) { // search each subreader\n      collector.setNextReader(leaves[i]);\n      Scorer scorer = weight.scorer(leaves[i], !collector.acceptsDocsOutOfOrder(), true, leaves[i].reader().getLiveDocs());\n      if (scorer != null) {\n        scorer.score(collector);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link IndexSearcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(AtomicReaderContext[] leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (int i = 0; i < leaves.length; i++) { // search each subreader\n      collector.setNextReader(leaves[i]);\n      Scorer scorer = weight.scorer(leaves[i], !collector.acceptsDocsOutOfOrder(), true, leaves[i].reader().getLiveDocs());\n      if (scorer != null) {\n        scorer.score(collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c461bb2c9e7d6d7309c180dc77d98e0fd15f5f6","date":1339237657,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(AtomicReaderContext[] leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (int i = 0; i < leaves.length; i++) { // search each subreader\n      collector.setNextReader(leaves[i]);\n      Scorer scorer = weight.scorer(leaves[i], !collector.acceptsDocsOutOfOrder(), true, leaves[i].reader().getLiveDocs());\n      if (scorer != null) {\n        scorer.score(collector);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link IndexSearcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(AtomicReaderContext[] leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (int i = 0; i < leaves.length; i++) { // search each subreader\n      collector.setNextReader(leaves[i]);\n      Scorer scorer = weight.scorer(leaves[i], !collector.acceptsDocsOutOfOrder(), true, leaves[i].reader().getLiveDocs());\n      if (scorer != null) {\n        scorer.score(collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (AtomicReaderContext ctx : leaves) { // search each subreader\n      collector.setNextReader(ctx);\n      Scorer scorer = weight.scorer(ctx, !collector.acceptsDocsOutOfOrder(), true, ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        scorer.score(collector);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(AtomicReaderContext[] leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (int i = 0; i < leaves.length; i++) { // search each subreader\n      collector.setNextReader(leaves[i]);\n      Scorer scorer = weight.scorer(leaves[i], !collector.acceptsDocsOutOfOrder(), true, leaves[i].reader().getLiveDocs());\n      if (scorer != null) {\n        scorer.score(collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["3c461bb2c9e7d6d7309c180dc77d98e0fd15f5f6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3c461bb2c9e7d6d7309c180dc77d98e0fd15f5f6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"]},"commit2Childs":{"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3c461bb2c9e7d6d7309c180dc77d98e0fd15f5f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3c461bb2c9e7d6d7309c180dc77d98e0fd15f5f6":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}