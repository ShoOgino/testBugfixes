{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#subtract(TempMetaData,TempMetaData).mjava","commits":[{"id":"232252bc7056b698c1e1c550f4b97a9a3c00e520","date":1372943634,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#subtract(TempMetaData,TempMetaData).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  // nocommit: \n  // this *actually* always assume that t2 <= t1 before calling the method\n  public TempMetaData subtract(TempMetaData t1, TempMetaData t2) {\n    if (DEBUG) System.out.print(\"subtract(\"+t1+\", \"+t2+\") = \");\n    if (t2 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs != null;\n    assert t2.longs != null;\n\n    int pos = 0;\n    long diff = 0;\n    long[] share = new long[longsSize];  // nocommit: reuse\n\n    while (pos < longsSize) {\n      share[pos] = t1.longs[pos] - t2.longs[pos];\n      diff += share[pos];\n      pos++;\n    }\n\n    TempMetaData ret;\n    if (diff == 0 && (t1.bytes == null || t1.bytes.length == 0)) {\n      ret = NO_OUTPUT;\n    } else {\n      ret = new TempMetaData(share, t1.bytes);\n    }\n    if (DEBUG) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a509b6df968a74c38a0528f5bf6ea26f503b756","date":1373188457,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#subtract(TempMetaData,TempMetaData).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#subtract(TempMetaData,TempMetaData).mjava","sourceNew":"  @Override\n  // nocommit: \n  // this *actually* always assume that t2 <= t1 before calling the method\n  public TempMetaData subtract(TempMetaData t1, TempMetaData t2) {\n    if (DEBUG) System.out.print(\"subtract(\"+t1+\", \"+t2+\") = \");\n    if (t2 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs != null;\n    assert t2.longs != null;\n\n    int pos = 0;\n    long diff = 0;\n    long[] share = new long[longsSize];  // nocommit: reuse\n\n    while (pos < longsSize) {\n      share[pos] = t1.longs[pos] - t2.longs[pos];\n      diff += share[pos];\n      pos++;\n    }\n\n    TempMetaData ret;\n    if (diff == 0 && bytesEqual(t1, t2) && statsEqual(t1, t2)) {\n      ret = NO_OUTPUT;\n    } else {\n      ret = new TempMetaData(share, t1.bytes, t1.docFreq, t1.totalTermFreq);\n    }\n    if (DEBUG) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","sourceOld":"  @Override\n  // nocommit: \n  // this *actually* always assume that t2 <= t1 before calling the method\n  public TempMetaData subtract(TempMetaData t1, TempMetaData t2) {\n    if (DEBUG) System.out.print(\"subtract(\"+t1+\", \"+t2+\") = \");\n    if (t2 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs != null;\n    assert t2.longs != null;\n\n    int pos = 0;\n    long diff = 0;\n    long[] share = new long[longsSize];  // nocommit: reuse\n\n    while (pos < longsSize) {\n      share[pos] = t1.longs[pos] - t2.longs[pos];\n      diff += share[pos];\n      pos++;\n    }\n\n    TempMetaData ret;\n    if (diff == 0 && (t1.bytes == null || t1.bytes.length == 0)) {\n      ret = NO_OUTPUT;\n    } else {\n      ret = new TempMetaData(share, t1.bytes);\n    }\n    if (DEBUG) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f962e7e670c8f2b5f205969d2ab166dd92d4a5ce","date":1373299712,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#subtract(TempMetaData,TempMetaData).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#subtract(TempMetaData,TempMetaData).mjava","sourceNew":"  @Override\n  public TempMetaData subtract(TempMetaData t1, TempMetaData t2) {\n    if (DEBUG) System.out.print(\"subtract(\"+t1+\", \"+t2+\") = \");\n    if (t2 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs.length == t2.longs.length;\n\n    int pos = 0;\n    long diff = 0;\n    long[] share = new long[longsSize];\n\n    while (pos < longsSize) {\n      share[pos] = t1.longs[pos] - t2.longs[pos];\n      diff += share[pos];\n      pos++;\n    }\n\n    TempMetaData ret;\n    if (diff == 0 && statsEqual(t1, t2) && bytesEqual(t1, t2)) {\n      ret = NO_OUTPUT;\n    } else {\n      ret = new TempMetaData(share, t1.bytes, t1.docFreq, t1.totalTermFreq);\n    }\n    if (DEBUG) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","sourceOld":"  @Override\n  // nocommit: \n  // this *actually* always assume that t2 <= t1 before calling the method\n  public TempMetaData subtract(TempMetaData t1, TempMetaData t2) {\n    if (DEBUG) System.out.print(\"subtract(\"+t1+\", \"+t2+\") = \");\n    if (t2 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs != null;\n    assert t2.longs != null;\n\n    int pos = 0;\n    long diff = 0;\n    long[] share = new long[longsSize];  // nocommit: reuse\n\n    while (pos < longsSize) {\n      share[pos] = t1.longs[pos] - t2.longs[pos];\n      diff += share[pos];\n      pos++;\n    }\n\n    TempMetaData ret;\n    if (diff == 0 && bytesEqual(t1, t2) && statsEqual(t1, t2)) {\n      ret = NO_OUTPUT;\n    } else {\n      ret = new TempMetaData(share, t1.bytes, t1.docFreq, t1.totalTermFreq);\n    }\n    if (DEBUG) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#subtract(TempMetaData,TempMetaData).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#subtract(TempMetaData,TempMetaData).mjava","sourceNew":"  @Override\n  public TempMetaData subtract(TempMetaData t1, TempMetaData t2) {\n    if (DEBUG) System.out.print(\"subtract(\"+t1+\", \"+t2+\") = \");\n    if (t2 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs.length == t2.longs.length;\n\n    int pos = 0;\n    long diff = 0;\n    long[] share = new long[longsSize];\n\n    while (pos < longsSize) {\n      share[pos] = t1.longs[pos] - t2.longs[pos];\n      diff += share[pos];\n      pos++;\n    }\n\n    TempMetaData ret;\n    if (diff == 0 && statsEqual(t1, t2) && bytesEqual(t1, t2)) {\n      ret = NO_OUTPUT;\n    } else {\n      ret = new TempMetaData(share, t1.bytes, t1.docFreq, t1.totalTermFreq);\n    }\n    if (DEBUG) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","sourceOld":"  @Override\n  public TempMetaData subtract(TempMetaData t1, TempMetaData t2) {\n    if (DEBUG) System.out.print(\"subtract(\"+t1+\", \"+t2+\") = \");\n    if (t2 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs.length == t2.longs.length;\n\n    int pos = 0;\n    long diff = 0;\n    long[] share = new long[longsSize];\n\n    while (pos < longsSize) {\n      share[pos] = t1.longs[pos] - t2.longs[pos];\n      diff += share[pos];\n      pos++;\n    }\n\n    TempMetaData ret;\n    if (diff == 0 && statsEqual(t1, t2) && bytesEqual(t1, t2)) {\n      ret = NO_OUTPUT;\n    } else {\n      ret = new TempMetaData(share, t1.bytes, t1.docFreq, t1.totalTermFreq);\n    }\n    if (DEBUG) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f962e7e670c8f2b5f205969d2ab166dd92d4a5ce":["3a509b6df968a74c38a0528f5bf6ea26f503b756"],"232252bc7056b698c1e1c550f4b97a9a3c00e520":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["f962e7e670c8f2b5f205969d2ab166dd92d4a5ce"],"3a509b6df968a74c38a0528f5bf6ea26f503b756":["232252bc7056b698c1e1c550f4b97a9a3c00e520"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["232252bc7056b698c1e1c550f4b97a9a3c00e520","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f962e7e670c8f2b5f205969d2ab166dd92d4a5ce":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"232252bc7056b698c1e1c550f4b97a9a3c00e520":["3a509b6df968a74c38a0528f5bf6ea26f503b756"],"3a509b6df968a74c38a0528f5bf6ea26f503b756":["f962e7e670c8f2b5f205969d2ab166dd92d4a5ce"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}