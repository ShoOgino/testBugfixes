{"path":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#performTestsWithExceptionInReopen(TestReopen).mjava","commits":[{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#performTestsWithExceptionInReopen(TestReopen).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#performTestsWithExceptionInReopen(TestReopen).mjava","sourceNew":"  private void performTestsWithExceptionInReopen(TestReopen test) throws Exception {\n    DirectoryReader index1 = test.openReader();\n    DirectoryReader index2 = test.openReader();\n\n    TestDirectoryReader.assertIndexEquals(index1, index2);\n    \n    try {\n      refreshReader(index1, test, 0, true);\n      fail(\"Expected exception not thrown.\");\n    } catch (Exception e) {\n      // expected exception\n    }\n    \n    // index2 should still be usable and unaffected by the failed reopen() call\n    TestDirectoryReader.assertIndexEquals(index1, index2);\n\n    index1.close();\n    index2.close();\n  }\n\n","sourceOld":"  private void performTestsWithExceptionInReopen(TestReopen test) throws Exception {\n    DirectoryReader index1 = test.openReader();\n    DirectoryReader index2 = test.openReader();\n\n    TestIndexReader.assertIndexEquals(index1, index2);\n    \n    try {\n      refreshReader(index1, test, 0, true);\n      fail(\"Expected exception not thrown.\");\n    } catch (Exception e) {\n      // expected exception\n    }\n    \n    // index2 should still be usable and unaffected by the failed reopen() call\n    TestIndexReader.assertIndexEquals(index1, index2);\n\n    index1.close();\n    index2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ced66195b26fdb1f77ee00e2a77ec6918dedd766","date":1344948886,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#performTestsWithExceptionInReopen(TestReopen).mjava","sourceNew":null,"sourceOld":"  private void performTestsWithExceptionInReopen(TestReopen test) throws Exception {\n    DirectoryReader index1 = test.openReader();\n    DirectoryReader index2 = test.openReader();\n\n    TestDirectoryReader.assertIndexEquals(index1, index2);\n    \n    try {\n      refreshReader(index1, test, 0, true);\n      fail(\"Expected exception not thrown.\");\n    } catch (Exception e) {\n      // expected exception\n    }\n    \n    // index2 should still be usable and unaffected by the failed reopen() call\n    TestDirectoryReader.assertIndexEquals(index1, index2);\n\n    index1.close();\n    index2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#performTestsWithExceptionInReopen(TestReopen).mjava","sourceNew":null,"sourceOld":"  private void performTestsWithExceptionInReopen(TestReopen test) throws Exception {\n    DirectoryReader index1 = test.openReader();\n    DirectoryReader index2 = test.openReader();\n\n    TestDirectoryReader.assertIndexEquals(index1, index2);\n    \n    try {\n      refreshReader(index1, test, 0, true);\n      fail(\"Expected exception not thrown.\");\n    } catch (Exception e) {\n      // expected exception\n    }\n    \n    // index2 should still be usable and unaffected by the failed reopen() call\n    TestDirectoryReader.assertIndexEquals(index1, index2);\n\n    index1.close();\n    index2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#performTestsWithExceptionInReopen(TestReopen).mjava","sourceNew":null,"sourceOld":"  private void performTestsWithExceptionInReopen(TestReopen test) throws Exception {\n    DirectoryReader index1 = test.openReader();\n    DirectoryReader index2 = test.openReader();\n\n    TestDirectoryReader.assertIndexEquals(index1, index2);\n    \n    try {\n      refreshReader(index1, test, 0, true);\n      fail(\"Expected exception not thrown.\");\n    } catch (Exception e) {\n      // expected exception\n    }\n    \n    // index2 should still be usable and unaffected by the failed reopen() call\n    TestDirectoryReader.assertIndexEquals(index1, index2);\n\n    index1.close();\n    index2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#performTestsWithExceptionInReopen(TestReopen).mjava","pathOld":"/dev/null","sourceNew":"  private void performTestsWithExceptionInReopen(TestReopen test) throws Exception {\n    DirectoryReader index1 = test.openReader();\n    DirectoryReader index2 = test.openReader();\n\n    TestDirectoryReader.assertIndexEquals(index1, index2);\n    \n    try {\n      refreshReader(index1, test, 0, true);\n      fail(\"Expected exception not thrown.\");\n    } catch (Exception e) {\n      // expected exception\n    }\n    \n    // index2 should still be usable and unaffected by the failed reopen() call\n    TestDirectoryReader.assertIndexEquals(index1, index2);\n\n    index1.close();\n    index2.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#performTestsWithExceptionInReopen(TestReopen).mjava","sourceNew":null,"sourceOld":"  private void performTestsWithExceptionInReopen(TestReopen test) throws Exception {\n    DirectoryReader index1 = test.openReader();\n    DirectoryReader index2 = test.openReader();\n\n    TestDirectoryReader.assertIndexEquals(index1, index2);\n    \n    try {\n      refreshReader(index1, test, 0, true);\n      fail(\"Expected exception not thrown.\");\n    } catch (Exception e) {\n      // expected exception\n    }\n    \n    // index2 should still be usable and unaffected by the failed reopen() call\n    TestDirectoryReader.assertIndexEquals(index1, index2);\n\n    index1.close();\n    index2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"]},"commit2Childs":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["3c188105a9aae04f56c24996f98f8333fc825d2e","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}