{"path":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/ConnectionCostsBuilder#build(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/ConnectionCostsBuilder#build(String).mjava","pathOld":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/ConnectionCostsBuilder#build(String).mjava","sourceNew":"  public static ConnectionCostsWriter build(String filename) throws IOException {\n    FileInputStream inputStream = new FileInputStream(filename);\n    Charset cs = Charset.forName(\"US-ASCII\");\n    CharsetDecoder decoder = cs.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    String line = lineReader.readLine();\n    String[] dimensions = line.split(\"\\\\s+\");\n    \n    assert dimensions.length == 2;\n    \n    int forwardSize = Integer.parseInt(dimensions[0]);\n    int backwardSize = Integer.parseInt(dimensions[1]);\n    \n    assert forwardSize > 0 && backwardSize > 0;\n    \n    ConnectionCostsWriter costs = new ConnectionCostsWriter(forwardSize, backwardSize);\n    \n    while ((line = lineReader.readLine()) != null) {\n      String[] fields = line.split(\"\\\\s+\");\n      \n      assert fields.length == 3;\n      \n      int forwardId = Integer.parseInt(fields[0]);\n      int backwardId = Integer.parseInt(fields[1]);\n      int cost = Integer.parseInt(fields[2]);\n      \n      costs.add(forwardId, backwardId, cost);\n    }\n    return costs;\n  }\n\n","sourceOld":"  public static ConnectionCostsWriter build(String filename) throws IOException {\n    FileInputStream inputStream = new FileInputStream(filename);\n    Charset cs = Charset.forName(\"US-ASCII\");\n    CharsetDecoder decoder = cs.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    String line = lineReader.readLine();\n    String[] dimensions = line.split(\"\\\\s+\");\n    \n    assert dimensions.length == 2;\n    \n    int forwardSize = Integer.parseInt(dimensions[0]);\n    int backwardSize = Integer.parseInt(dimensions[1]);\n    \n    assert forwardSize > 0 && backwardSize > 0;\n    \n    ConnectionCostsWriter costs = new ConnectionCostsWriter(forwardSize, backwardSize);\n    \n    while ((line = lineReader.readLine()) != null) {\n      String[] fields = line.split(\"\\\\s+\");\n      \n      assert fields.length == 3;\n      \n      int forwardId = Integer.parseInt(fields[0]);\n      int backwardId = Integer.parseInt(fields[1]);\n      int cost = Integer.parseInt(fields[2]);\n      \n      costs.add(forwardId, backwardId, cost);\n    }\n    return costs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/ConnectionCostsBuilder#build(String).mjava","pathOld":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/ConnectionCostsBuilder#build(String).mjava","sourceNew":"  public static ConnectionCostsWriter build(String filename) throws IOException {\n    FileInputStream inputStream = new FileInputStream(filename);\n    Charset cs = StandardCharsets.US_ASCII;\n    CharsetDecoder decoder = cs.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    String line = lineReader.readLine();\n    String[] dimensions = line.split(\"\\\\s+\");\n    \n    assert dimensions.length == 2;\n    \n    int forwardSize = Integer.parseInt(dimensions[0]);\n    int backwardSize = Integer.parseInt(dimensions[1]);\n    \n    assert forwardSize > 0 && backwardSize > 0;\n    \n    ConnectionCostsWriter costs = new ConnectionCostsWriter(forwardSize, backwardSize);\n    \n    while ((line = lineReader.readLine()) != null) {\n      String[] fields = line.split(\"\\\\s+\");\n      \n      assert fields.length == 3;\n      \n      int forwardId = Integer.parseInt(fields[0]);\n      int backwardId = Integer.parseInt(fields[1]);\n      int cost = Integer.parseInt(fields[2]);\n      \n      costs.add(forwardId, backwardId, cost);\n    }\n    return costs;\n  }\n\n","sourceOld":"  public static ConnectionCostsWriter build(String filename) throws IOException {\n    FileInputStream inputStream = new FileInputStream(filename);\n    Charset cs = Charset.forName(\"US-ASCII\");\n    CharsetDecoder decoder = cs.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    String line = lineReader.readLine();\n    String[] dimensions = line.split(\"\\\\s+\");\n    \n    assert dimensions.length == 2;\n    \n    int forwardSize = Integer.parseInt(dimensions[0]);\n    int backwardSize = Integer.parseInt(dimensions[1]);\n    \n    assert forwardSize > 0 && backwardSize > 0;\n    \n    ConnectionCostsWriter costs = new ConnectionCostsWriter(forwardSize, backwardSize);\n    \n    while ((line = lineReader.readLine()) != null) {\n      String[] fields = line.split(\"\\\\s+\");\n      \n      assert fields.length == 3;\n      \n      int forwardId = Integer.parseInt(fields[0]);\n      int backwardId = Integer.parseInt(fields[1]);\n      int cost = Integer.parseInt(fields[2]);\n      \n      costs.add(forwardId, backwardId, cost);\n    }\n    return costs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/ConnectionCostsBuilder#build(String).mjava","pathOld":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/ConnectionCostsBuilder#build(String).mjava","sourceNew":"  public static ConnectionCostsWriter build(String filename) throws IOException {\n    FileInputStream inputStream = new FileInputStream(filename);\n    Charset cs = StandardCharsets.US_ASCII;\n    CharsetDecoder decoder = cs.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    String line = lineReader.readLine();\n    String[] dimensions = line.split(\"\\\\s+\");\n    \n    assert dimensions.length == 2;\n    \n    int forwardSize = Integer.parseInt(dimensions[0]);\n    int backwardSize = Integer.parseInt(dimensions[1]);\n    \n    assert forwardSize > 0 && backwardSize > 0;\n    \n    ConnectionCostsWriter costs = new ConnectionCostsWriter(forwardSize, backwardSize);\n    \n    while ((line = lineReader.readLine()) != null) {\n      String[] fields = line.split(\"\\\\s+\");\n      \n      assert fields.length == 3;\n      \n      int forwardId = Integer.parseInt(fields[0]);\n      int backwardId = Integer.parseInt(fields[1]);\n      int cost = Integer.parseInt(fields[2]);\n      \n      costs.add(forwardId, backwardId, cost);\n    }\n    return costs;\n  }\n\n","sourceOld":"  public static ConnectionCostsWriter build(String filename) throws IOException {\n    FileInputStream inputStream = new FileInputStream(filename);\n    Charset cs = Charset.forName(\"US-ASCII\");\n    CharsetDecoder decoder = cs.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    String line = lineReader.readLine();\n    String[] dimensions = line.split(\"\\\\s+\");\n    \n    assert dimensions.length == 2;\n    \n    int forwardSize = Integer.parseInt(dimensions[0]);\n    int backwardSize = Integer.parseInt(dimensions[1]);\n    \n    assert forwardSize > 0 && backwardSize > 0;\n    \n    ConnectionCostsWriter costs = new ConnectionCostsWriter(forwardSize, backwardSize);\n    \n    while ((line = lineReader.readLine()) != null) {\n      String[] fields = line.split(\"\\\\s+\");\n      \n      assert fields.length == 3;\n      \n      int forwardId = Integer.parseInt(fields[0]);\n      int backwardId = Integer.parseInt(fields[1]);\n      int cost = Integer.parseInt(fields[2]);\n      \n      costs.add(forwardId, backwardId, cost);\n    }\n    return costs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05feb7eb5e91cb64742ce32b2ca3f02433530446","date":1561602840,"type":4,"author":"Michael Sokolov","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/ConnectionCostsBuilder#build(String).mjava","sourceNew":null,"sourceOld":"  public static ConnectionCostsWriter build(String filename) throws IOException {\n    FileInputStream inputStream = new FileInputStream(filename);\n    Charset cs = StandardCharsets.US_ASCII;\n    CharsetDecoder decoder = cs.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    String line = lineReader.readLine();\n    String[] dimensions = line.split(\"\\\\s+\");\n    \n    assert dimensions.length == 2;\n    \n    int forwardSize = Integer.parseInt(dimensions[0]);\n    int backwardSize = Integer.parseInt(dimensions[1]);\n    \n    assert forwardSize > 0 && backwardSize > 0;\n    \n    ConnectionCostsWriter costs = new ConnectionCostsWriter(forwardSize, backwardSize);\n    \n    while ((line = lineReader.readLine()) != null) {\n      String[] fields = line.split(\"\\\\s+\");\n      \n      assert fields.length == 3;\n      \n      int forwardId = Integer.parseInt(fields[0]);\n      int backwardId = Integer.parseInt(fields[1]);\n      int cost = Integer.parseInt(fields[2]);\n      \n      costs.add(forwardId, backwardId, cost);\n    }\n    return costs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7d89d7e4e5101347833eea558851bf4209218619"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"05feb7eb5e91cb64742ce32b2ca3f02433530446":["7d89d7e4e5101347833eea558851bf4209218619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d89d7e4e5101347833eea558851bf4209218619":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05feb7eb5e91cb64742ce32b2ca3f02433530446"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"05feb7eb5e91cb64742ce32b2ca3f02433530446":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","05feb7eb5e91cb64742ce32b2ca3f02433530446"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}