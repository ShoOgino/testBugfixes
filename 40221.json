{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readScriptString().mjava","commits":[{"id":"9b31138e7b06f84b96de212b2102103cb629ee68","date":1272962032,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readScriptString().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#readScriptString().mjava","sourceNew":"  // read a string escaped by backslashes\n  private int readScriptString() throws IOException {\n    int quoteChar = next();\n    if (quoteChar!='\\'' && quoteChar!='\"') return MISMATCH;\n\n    while((numRead - lastMark) < safeReadAheadLimit) {\n      int ch = next();\n      if (ch==quoteChar) return MATCH;\n      else if (ch=='\\\\') {\n        ch=next();\n      } else if (ch<0) {\n        return MISMATCH;\n      } else if (ch=='<') {\n        eatSSI();\n      }\n\n    }\n    return MISMATCH;\n  }\n\n","sourceOld":"  // read a string escaped by backslashes\n  private int readScriptString() throws IOException {\n    int quoteChar = next();\n    if (quoteChar!='\\'' && quoteChar!='\"') return MISMATCH;\n\n    while((numRead - lastMark) < safeReadAheadLimit) {\n      int ch = next();\n      if (ch==quoteChar) return MATCH;\n      else if (ch=='\\\\') {\n        ch=next();\n      } else if (ch<0) {\n        return MISMATCH;\n      } else if (ch=='<') {\n        eatSSI();\n      }\n\n    }\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readScriptString().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readScriptString().mjava","sourceNew":"  // read a string escaped by backslashes\n  private int readScriptString() throws IOException {\n    int quoteChar = next();\n    if (quoteChar!='\\'' && quoteChar!='\"') return MISMATCH;\n\n    while((numRead - lastMark) < safeReadAheadLimit) {\n      int ch = next();\n      if (ch==quoteChar) return MATCH;\n      else if (ch=='\\\\') {\n        ch=next();\n      } else if (ch<0) {\n        return MISMATCH;\n      } else if (ch=='<') {\n        eatSSI();\n      }\n\n    }\n    return MISMATCH;\n  }\n\n","sourceOld":"  // read a string escaped by backslashes\n  private int readScriptString() throws IOException {\n    int quoteChar = next();\n    if (quoteChar!='\\'' && quoteChar!='\"') return MISMATCH;\n\n    while((numRead - lastMark) < safeReadAheadLimit) {\n      int ch = next();\n      if (ch==quoteChar) return MATCH;\n      else if (ch=='\\\\') {\n        ch=next();\n      } else if (ch<0) {\n        return MISMATCH;\n      } else if (ch=='<') {\n        eatSSI();\n      }\n\n    }\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b31138e7b06f84b96de212b2102103cb629ee68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9b31138e7b06f84b96de212b2102103cb629ee68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"9b31138e7b06f84b96de212b2102103cb629ee68":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b31138e7b06f84b96de212b2102103cb629ee68"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}