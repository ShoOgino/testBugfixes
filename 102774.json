{"path":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#maybeReopen(boolean).mjava","commits":[{"id":"606baff722a317c76a92b111d183b54b6e6e5741","date":1317974711,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#maybeReopen(boolean).mjava","pathOld":"/dev/null","sourceNew":"  public boolean maybeReopen(boolean applyAllDeletes) throws IOException {\n    if (reopenLock.tryLock()) {\n      try {\n        final SearcherManagerRef reference = applyAllDeletes ? withDeletes : withoutDeletes;\n        // Mark gen as of when reopen started:\n        final long newSearcherGen = indexingGen.getAndIncrement();\n        boolean setSearchGen = false;\n        if (!(setSearchGen = reference.manager.isSearcherCurrent())) {\n          setSearchGen = reference.manager.maybeReopen();\n        }\n        if (setSearchGen) {\n          reference.generation = newSearcherGen;// update searcher gen\n          newGeneration.signalAll(); // wake up threads if we have a new generation\n        }\n        return setSearchGen;\n      } finally {\n        reopenLock.unlock();\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84d8c6d0287478d53558b573bf767214e0813c47","date":1320696863,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#maybeReopen(boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#maybeReopen(boolean).mjava","sourceNew":"  public boolean maybeReopen(boolean applyAllDeletes) throws IOException {\n    if (reopenLock.tryLock()) {\n      try {\n        final SearcherManagerRef reference = applyAllDeletes ? withDeletes : withoutDeletes;\n        // Mark gen as of when reopen started:\n        final long newSearcherGen = indexingGen.getAndIncrement();\n        boolean setSearchGen = false;\n        if (reference.generation == MAX_SEARCHER_GEN) {\n          newGeneration.signalAll(); // wake up threads if we have a new generation\n          return false;\n        }\n        if (!(setSearchGen = reference.manager.isSearcherCurrent())) {\n          setSearchGen = reference.manager.maybeReopen();\n        }\n        if (setSearchGen) {\n          reference.generation = newSearcherGen;// update searcher gen\n          newGeneration.signalAll(); // wake up threads if we have a new generation\n        }\n        return setSearchGen;\n      } finally {\n        reopenLock.unlock();\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean maybeReopen(boolean applyAllDeletes) throws IOException {\n    if (reopenLock.tryLock()) {\n      try {\n        final SearcherManagerRef reference = applyAllDeletes ? withDeletes : withoutDeletes;\n        // Mark gen as of when reopen started:\n        final long newSearcherGen = indexingGen.getAndIncrement();\n        boolean setSearchGen = false;\n        if (!(setSearchGen = reference.manager.isSearcherCurrent())) {\n          setSearchGen = reference.manager.maybeReopen();\n        }\n        if (setSearchGen) {\n          reference.generation = newSearcherGen;// update searcher gen\n          newGeneration.signalAll(); // wake up threads if we have a new generation\n        }\n        return setSearchGen;\n      } finally {\n        reopenLock.unlock();\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/NRTManager#maybeReopen(boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#maybeReopen(boolean).mjava","sourceNew":"  public boolean maybeReopen(boolean applyAllDeletes) throws IOException {\n    if (reopenLock.tryLock()) {\n      try {\n        final SearcherManagerRef reference = applyAllDeletes ? withDeletes : withoutDeletes;\n        // Mark gen as of when reopen started:\n        final long newSearcherGen = indexingGen.getAndIncrement();\n        boolean setSearchGen = false;\n        if (reference.generation == MAX_SEARCHER_GEN) {\n          newGeneration.signalAll(); // wake up threads if we have a new generation\n          return false;\n        }\n        if (!(setSearchGen = reference.manager.isSearcherCurrent())) {\n          setSearchGen = reference.manager.maybeReopen();\n        }\n        if (setSearchGen) {\n          reference.generation = newSearcherGen;// update searcher gen\n          newGeneration.signalAll(); // wake up threads if we have a new generation\n        }\n        return setSearchGen;\n      } finally {\n        reopenLock.unlock();\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean maybeReopen(boolean applyAllDeletes) throws IOException {\n    if (reopenLock.tryLock()) {\n      try {\n        final SearcherManagerRef reference = applyAllDeletes ? withDeletes : withoutDeletes;\n        // Mark gen as of when reopen started:\n        final long newSearcherGen = indexingGen.getAndIncrement();\n        boolean setSearchGen = false;\n        if (reference.generation == MAX_SEARCHER_GEN) {\n          newGeneration.signalAll(); // wake up threads if we have a new generation\n          return false;\n        }\n        if (!(setSearchGen = reference.manager.isSearcherCurrent())) {\n          setSearchGen = reference.manager.maybeReopen();\n        }\n        if (setSearchGen) {\n          reference.generation = newSearcherGen;// update searcher gen\n          newGeneration.signalAll(); // wake up threads if we have a new generation\n        }\n        return setSearchGen;\n      } finally {\n        reopenLock.unlock();\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["84d8c6d0287478d53558b573bf767214e0813c47"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"606baff722a317c76a92b111d183b54b6e6e5741":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84d8c6d0287478d53558b573bf767214e0813c47":["606baff722a317c76a92b111d183b54b6e6e5741"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df16fc2e9b615e0138edac46655ae628f5d098ad"]},"commit2Childs":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["606baff722a317c76a92b111d183b54b6e6e5741"],"606baff722a317c76a92b111d183b54b6e6e5741":["84d8c6d0287478d53558b573bf767214e0813c47"],"84d8c6d0287478d53558b573bf767214e0813c47":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}