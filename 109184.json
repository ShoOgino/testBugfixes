{"path":"src/test/org/apache/solr/analysis/CommonGramsFilterTest#initQueryMap().mjava","commits":[{"id":"8f8f5dd9e0322b913c47628300753239d0d5ef7e","date":1253656557,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/CommonGramsFilterTest#initQueryMap().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  private static Map<String, String> initQueryMap() {\n    Map<String, String> input2expected = new LinkedHashMap<String, String>();\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    input2expected.put(\"brown fox\", \"/brown/fox\");\n    input2expected.put(\"the fox\", \"/the_fox\");\n    input2expected.put(\"fox of\", \"/fox_of\");\n    input2expected.put(\"of the\", \"/of_the\");\n    \n    // one word queries\n    input2expected.put(\"the\", \"/the\");\n    input2expected.put(\"foo\", \"/foo\");\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    input2expected.put(\"n n n\", \"/n/n/n\");\n    input2expected.put(\"quick brown fox\", \"/quick/brown/fox\");\n\n    input2expected.put(\"n n s\", \"/n/n_s\");\n    input2expected.put(\"quick brown the\", \"/quick/brown_the\");\n\n    input2expected.put(\"n s n\", \"/n_s/s_n\");\n    input2expected.put(\"quick the brown\", \"/quick_the/the_brown\");\n\n    input2expected.put(\"n s s\", \"/n_s/s_s\");\n    input2expected.put(\"fox of the\", \"/fox_of/of_the\");\n\n    input2expected.put(\"s n n\", \"/s_n/n/n\");\n    input2expected.put(\"the quick brown\", \"/the_quick/quick/brown\");\n\n    input2expected.put(\"s n s\", \"/s_n/n_s\");\n    input2expected.put(\"the fox of\", \"/the_fox/fox_of\");\n\n    input2expected.put(\"s s n\", \"/s_s/s_n\");\n    input2expected.put(\"of the fox\", \"/of_the/the_fox\");\n\n    input2expected.put(\"s s s\", \"/s_s/s_s\");\n    input2expected.put(\"of the of\", \"/of_the/the_of\");\n\n    return input2expected;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fd023a662cc25ae7e0ad0f33d71c476a16d0579","date":1261403630,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/solr/analysis/CommonGramsFilterTest#initQueryMap().mjava","sourceNew":null,"sourceOld":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  private static Map<String, String> initQueryMap() {\n    Map<String, String> input2expected = new LinkedHashMap<String, String>();\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    input2expected.put(\"brown fox\", \"/brown/fox\");\n    input2expected.put(\"the fox\", \"/the_fox\");\n    input2expected.put(\"fox of\", \"/fox_of\");\n    input2expected.put(\"of the\", \"/of_the\");\n    \n    // one word queries\n    input2expected.put(\"the\", \"/the\");\n    input2expected.put(\"foo\", \"/foo\");\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    input2expected.put(\"n n n\", \"/n/n/n\");\n    input2expected.put(\"quick brown fox\", \"/quick/brown/fox\");\n\n    input2expected.put(\"n n s\", \"/n/n_s\");\n    input2expected.put(\"quick brown the\", \"/quick/brown_the\");\n\n    input2expected.put(\"n s n\", \"/n_s/s_n\");\n    input2expected.put(\"quick the brown\", \"/quick_the/the_brown\");\n\n    input2expected.put(\"n s s\", \"/n_s/s_s\");\n    input2expected.put(\"fox of the\", \"/fox_of/of_the\");\n\n    input2expected.put(\"s n n\", \"/s_n/n/n\");\n    input2expected.put(\"the quick brown\", \"/the_quick/quick/brown\");\n\n    input2expected.put(\"s n s\", \"/s_n/n_s\");\n    input2expected.put(\"the fox of\", \"/the_fox/fox_of\");\n\n    input2expected.put(\"s s n\", \"/s_s/s_n\");\n    input2expected.put(\"of the fox\", \"/of_the/the_fox\");\n\n    input2expected.put(\"s s s\", \"/s_s/s_s\");\n    input2expected.put(\"of the of\", \"/of_the/the_of\");\n\n    return input2expected;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8f8f5dd9e0322b913c47628300753239d0d5ef7e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["8f8f5dd9e0322b913c47628300753239d0d5ef7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["8f8f5dd9e0322b913c47628300753239d0d5ef7e"],"8f8f5dd9e0322b913c47628300753239d0d5ef7e":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}