{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrServer).mjava","commits":[{"id":"34efe37e5314525b1f3e373269e95bcdec2ceb2f","date":1357610514,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrServer).mjava","pathOld":"/dev/null","sourceNew":"  private void checkForBackupSuccess(final HttpSolrServer client)\n      throws InterruptedException, IOException {\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      final Pattern p = Pattern\n          .compile(\"<str name=\\\"snapshotCompletedAt\\\">(.*?)</str>\");\n      \n      CheckStatus() {}\n      \n      @Override\n      public void run() {\n        String masterUrl = client.getBaseURL() + \"/replication?command=\"\n            + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if (response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            Matcher m = p.matcher(response);\n            if (!m.find()) {\n              fail(\"could not find the completed timestamp in response.\");\n            }\n            \n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          e.printStackTrace();\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n        \n      };\n    }\n    ;\n    SolrCore core = ((SolrDispatchFilter) shardToJetty.get(SHARD2).get(0).jetty\n        .getDispatchFilter().getFilter()).getCores().getCore(\"collection1\");\n    String ddir;\n    try {\n      ddir = core.getDataDir(); \n    } finally {\n      core.close();\n    }\n    File dataDir = new File(ddir);\n    \n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while (true) {\n      checkStatus.run();\n      if (checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if (checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if (waitCnt == 20) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      @Override\n      public boolean accept(File dir, String name) {\n        if (name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(Arrays.asList(files).toString(), 1, files.length);\n    File snapDir = files[0];\n    \n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrServer).mjava","pathOld":"/dev/null","sourceNew":"  private void checkForBackupSuccess(final HttpSolrServer client)\n      throws InterruptedException, IOException {\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      final Pattern p = Pattern\n          .compile(\"<str name=\\\"snapshotCompletedAt\\\">(.*?)</str>\");\n      \n      CheckStatus() {}\n      \n      @Override\n      public void run() {\n        String masterUrl = client.getBaseURL() + \"/replication?command=\"\n            + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if (response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            Matcher m = p.matcher(response);\n            if (!m.find()) {\n              fail(\"could not find the completed timestamp in response.\");\n            }\n            \n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          e.printStackTrace();\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n        \n      };\n    }\n    ;\n    SolrCore core = ((SolrDispatchFilter) shardToJetty.get(SHARD2).get(0).jetty\n        .getDispatchFilter().getFilter()).getCores().getCore(\"collection1\");\n    String ddir;\n    try {\n      ddir = core.getDataDir(); \n    } finally {\n      core.close();\n    }\n    File dataDir = new File(ddir);\n    \n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while (true) {\n      checkStatus.run();\n      if (checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if (checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if (waitCnt == 20) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      @Override\n      public boolean accept(File dir, String name) {\n        if (name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(Arrays.asList(files).toString(), 1, files.length);\n    File snapDir = files[0];\n    \n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrServer,File).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrServer).mjava","sourceNew":"  private void checkForBackupSuccess(final HttpSolrServer client, File location)\n      throws InterruptedException, IOException {\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      final Pattern p = Pattern\n          .compile(\"<str name=\\\"snapshotCompletedAt\\\">(.*?)</str>\");\n      \n      CheckStatus() {}\n      \n      @Override\n      public void run() {\n        String masterUrl = client.getBaseURL() + \"/replication?command=\"\n            + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if (response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            Matcher m = p.matcher(response);\n            if (!m.find()) {\n              fail(\"could not find the completed timestamp in response.\");\n            }\n            \n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          e.printStackTrace();\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n        \n      };\n    }\n    \n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while (true) {\n      checkStatus.run();\n      if (checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if (checkStatus.success) {\n        break;\n      }\n      Thread.sleep(500);\n      if (waitCnt == 90) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    File[] files = location.listFiles(new FilenameFilter() {\n      \n      @Override\n      public boolean accept(File dir, String name) {\n        if (name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(Arrays.asList(files).toString(), 1, files.length);\n    File snapDir = files[0];\n    \n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","sourceOld":"  private void checkForBackupSuccess(final HttpSolrServer client)\n      throws InterruptedException, IOException {\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      final Pattern p = Pattern\n          .compile(\"<str name=\\\"snapshotCompletedAt\\\">(.*?)</str>\");\n      \n      CheckStatus() {}\n      \n      @Override\n      public void run() {\n        String masterUrl = client.getBaseURL() + \"/replication?command=\"\n            + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if (response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            Matcher m = p.matcher(response);\n            if (!m.find()) {\n              fail(\"could not find the completed timestamp in response.\");\n            }\n            \n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          e.printStackTrace();\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n        \n      };\n    }\n    ;\n    SolrCore core = ((SolrDispatchFilter) shardToJetty.get(SHARD2).get(0).jetty\n        .getDispatchFilter().getFilter()).getCores().getCore(\"collection1\");\n    String ddir;\n    try {\n      ddir = core.getDataDir(); \n    } finally {\n      core.close();\n    }\n    File dataDir = new File(ddir);\n    \n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while (true) {\n      checkStatus.run();\n      if (checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if (checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if (waitCnt == 20) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      @Override\n      public boolean accept(File dir, String name) {\n        if (name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(Arrays.asList(files).toString(), 1, files.length);\n    File snapDir = files[0];\n    \n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrServer).mjava","sourceNew":null,"sourceOld":"  private void checkForBackupSuccess(final HttpSolrServer client)\n      throws InterruptedException, IOException {\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      final Pattern p = Pattern\n          .compile(\"<str name=\\\"snapshotCompletedAt\\\">(.*?)</str>\");\n      \n      CheckStatus() {}\n      \n      @Override\n      public void run() {\n        String masterUrl = client.getBaseURL() + \"/replication?command=\"\n            + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if (response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            Matcher m = p.matcher(response);\n            if (!m.find()) {\n              fail(\"could not find the completed timestamp in response.\");\n            }\n            \n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          e.printStackTrace();\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n        \n      };\n    }\n    ;\n    SolrCore core = ((SolrDispatchFilter) shardToJetty.get(SHARD2).get(0).jetty\n        .getDispatchFilter().getFilter()).getCores().getCore(\"collection1\");\n    String ddir;\n    try {\n      ddir = core.getDataDir(); \n    } finally {\n      core.close();\n    }\n    File dataDir = new File(ddir);\n    \n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while (true) {\n      checkStatus.run();\n      if (checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if (checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if (waitCnt == 20) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      @Override\n      public boolean accept(File dir, String name) {\n        if (name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(Arrays.asList(files).toString(), 1, files.length);\n    File snapDir = files[0];\n    \n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["34efe37e5314525b1f3e373269e95bcdec2ceb2f"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","34efe37e5314525b1f3e373269e95bcdec2ceb2f"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["34efe37e5314525b1f3e373269e95bcdec2ceb2f","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34efe37e5314525b1f3e373269e95bcdec2ceb2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["849494cf2f3a96af5c8c84995108ddd8456fcd04"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","34efe37e5314525b1f3e373269e95bcdec2ceb2f"],"34efe37e5314525b1f3e373269e95bcdec2ceb2f":["849494cf2f3a96af5c8c84995108ddd8456fcd04","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}