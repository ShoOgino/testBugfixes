{"path":"solr/core/src/java/org/apache/solr/core/SolrCores#persistCores(Config,Properties,Map[String,String],Map[String,String],File,File,SolrResourceLoader).mjava","commits":[{"id":"9409650933cc688e77e565092a25e58adfc2e18d","date":1366663164,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#persistCores(Config,Properties,Map[String,String],Map[String,String],File,File,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps#persistCores(Config,Properties,Map[String,String],Map[String,String],File,File,SolrResourceLoader).mjava","sourceNew":"  // Irrepressably ugly bit of the transition in SOLR-4196, but there as at least one test case that follows\n  // this path, presumably it's there for a reason.\n  // This is really perverse, but all we need the here is to call a couple of static methods that for back-compat\n  // purposes\n  public void persistCores(Config cfg, Properties containerProperties,\n      Map<String,String> rootSolrAttribs, Map<String,String> coresAttribs,\n      File file, File configFile, SolrResourceLoader loader) throws XPathExpressionException {\n    // This is expensive in the maximal case, but I think necessary. It should\n    // keep a reference open to all of the\n    // current cores while they are saved. Remember that especially the\n    // transient core can come and go.\n    //\n    // TODO: 5.0. remove the possibility of storing core descriptors in\n    // solr.xml?\n    //\n    \n    List<SolrXMLSerializer.SolrCoreXMLDef> solrCoreXMLDefs = new ArrayList<SolrXMLSerializer.SolrCoreXMLDef>();\n    synchronized (modifyLock) {\n      \n      persistCores(cfg, cores, loader, solrCoreXMLDefs);\n      persistCores(cfg, transientCores, loader, solrCoreXMLDefs);\n      // add back all the cores that aren't loaded, either in cores or transient\n      // cores\n      for (Map.Entry<String,CoreDescriptor> ent : dynamicDescriptors.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())) {\n          addCoreToPersistList(cfg, loader, ent.getValue(), null, solrCoreXMLDefs);\n        }\n      }\n      for (Map.Entry<String,SolrCore> ent : createdCores.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())\n            && !dynamicDescriptors.containsKey(ent.getKey())) {\n          addCoreToPersistList(cfg, loader, ent.getValue().getCoreDescriptor(),\n              null, solrCoreXMLDefs);\n        }\n      }\n\n      SolrXMLSerializer.SolrXMLDef solrXMLDef = new SolrXMLSerializer.SolrXMLDef();\n      solrXMLDef.coresDefs = solrCoreXMLDefs;\n      solrXMLDef.containerProperties = containerProperties;\n      solrXMLDef.solrAttribs = rootSolrAttribs;\n      solrXMLDef.coresAttribs = coresAttribs;\n      SOLR_XML_SERIALIZER.persistFile(file, solrXMLDef);\n    }\n    \n  }\n\n","sourceOld":"  // Irrepressably ugly bit of the transition in SOLR-4196, but there as at least one test case that follows\n  // this path, presumably it's there for a reason.\n  // This is really perverse, but all we need the here is to call a couple of static methods that for back-compat\n  // purposes\n  public void persistCores(Config cfg, Properties containerProperties,\n      Map<String,String> rootSolrAttribs, Map<String,String> coresAttribs,\n      File file, File configFile, SolrResourceLoader loader) throws XPathExpressionException {\n    // This is expensive in the maximal case, but I think necessary. It should\n    // keep a reference open to all of the\n    // current cores while they are saved. Remember that especially the\n    // transient core can come and go.\n    //\n    // TODO: 5.0. remove the possibility of storing core descriptors in\n    // solr.xml?\n    //\n    \n    List<SolrXMLSerializer.SolrCoreXMLDef> solrCoreXMLDefs = new ArrayList<SolrXMLSerializer.SolrCoreXMLDef>();\n    synchronized (locker) {\n      \n      persistCores(cfg, cores, loader, solrCoreXMLDefs);\n      persistCores(cfg, transientCores, loader, solrCoreXMLDefs);\n      // add back all the cores that aren't loaded, either in cores or transient\n      // cores\n      for (Map.Entry<String,CoreDescriptor> ent : dynamicDescriptors.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())) {\n          addPersistOneCore(cfg, loader, ent.getValue(), null, solrCoreXMLDefs);\n        }\n      }\n      for (Map.Entry<String,SolrCore> ent : createdCores.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())\n            && !dynamicDescriptors.containsKey(ent.getKey())) {\n          addPersistOneCore(cfg, loader, ent.getValue().getCoreDescriptor(),\n              null, solrCoreXMLDefs);\n        }\n      }\n\n      SolrXMLSerializer.SolrXMLDef solrXMLDef = new SolrXMLSerializer.SolrXMLDef();\n      solrXMLDef.coresDefs = solrCoreXMLDefs;\n      solrXMLDef.containerProperties = containerProperties;\n      solrXMLDef.solrAttribs = rootSolrAttribs;\n      solrXMLDef.coresAttribs = coresAttribs;\n      SOLR_XML_SERIALIZER.persistFile(file, solrXMLDef);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b29abed5661c7911e4b45d5a3d79a186268e28c4","date":1366675770,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#persistCores(Config,Properties,Map[String,String],Map[String,String],File,File,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#persistCores(Config,Properties,Map[String,String],Map[String,String],File,File,SolrResourceLoader).mjava","sourceNew":"  public void persistCores(Config cfg, Properties containerProperties,\n      Map<String,String> rootSolrAttribs, Map<String,String> coresAttribs,\n      File file, File configFile, SolrResourceLoader loader) throws XPathExpressionException {\n\n    \n    List<SolrXMLSerializer.SolrCoreXMLDef> solrCoreXMLDefs = new ArrayList<SolrXMLSerializer.SolrCoreXMLDef>();\n    synchronized (modifyLock) {\n      \n      persistCores(cfg, cores, loader, solrCoreXMLDefs);\n      persistCores(cfg, transientCores, loader, solrCoreXMLDefs);\n      // add back all the cores that aren't loaded, either in cores or transient\n      // cores\n      for (Map.Entry<String,CoreDescriptor> ent : dynamicDescriptors.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())) {\n          addCoreToPersistList(cfg, loader, ent.getValue(), null, solrCoreXMLDefs);\n        }\n      }\n      for (Map.Entry<String,SolrCore> ent : createdCores.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())\n            && !dynamicDescriptors.containsKey(ent.getKey())) {\n          addCoreToPersistList(cfg, loader, ent.getValue().getCoreDescriptor(),\n              null, solrCoreXMLDefs);\n        }\n      }\n\n      SolrXMLSerializer.SolrXMLDef solrXMLDef = new SolrXMLSerializer.SolrXMLDef();\n      solrXMLDef.coresDefs = solrCoreXMLDefs;\n      solrXMLDef.containerProperties = containerProperties;\n      solrXMLDef.solrAttribs = rootSolrAttribs;\n      solrXMLDef.coresAttribs = coresAttribs;\n      SOLR_XML_SERIALIZER.persistFile(file, solrXMLDef);\n    }\n    \n  }\n\n","sourceOld":"  // Irrepressably ugly bit of the transition in SOLR-4196, but there as at least one test case that follows\n  // this path, presumably it's there for a reason.\n  // This is really perverse, but all we need the here is to call a couple of static methods that for back-compat\n  // purposes\n  public void persistCores(Config cfg, Properties containerProperties,\n      Map<String,String> rootSolrAttribs, Map<String,String> coresAttribs,\n      File file, File configFile, SolrResourceLoader loader) throws XPathExpressionException {\n    // This is expensive in the maximal case, but I think necessary. It should\n    // keep a reference open to all of the\n    // current cores while they are saved. Remember that especially the\n    // transient core can come and go.\n    //\n    // TODO: 5.0. remove the possibility of storing core descriptors in\n    // solr.xml?\n    //\n    \n    List<SolrXMLSerializer.SolrCoreXMLDef> solrCoreXMLDefs = new ArrayList<SolrXMLSerializer.SolrCoreXMLDef>();\n    synchronized (modifyLock) {\n      \n      persistCores(cfg, cores, loader, solrCoreXMLDefs);\n      persistCores(cfg, transientCores, loader, solrCoreXMLDefs);\n      // add back all the cores that aren't loaded, either in cores or transient\n      // cores\n      for (Map.Entry<String,CoreDescriptor> ent : dynamicDescriptors.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())) {\n          addCoreToPersistList(cfg, loader, ent.getValue(), null, solrCoreXMLDefs);\n        }\n      }\n      for (Map.Entry<String,SolrCore> ent : createdCores.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())\n            && !dynamicDescriptors.containsKey(ent.getKey())) {\n          addCoreToPersistList(cfg, loader, ent.getValue().getCoreDescriptor(),\n              null, solrCoreXMLDefs);\n        }\n      }\n\n      SolrXMLSerializer.SolrXMLDef solrXMLDef = new SolrXMLSerializer.SolrXMLDef();\n      solrXMLDef.coresDefs = solrCoreXMLDefs;\n      solrXMLDef.containerProperties = containerProperties;\n      solrXMLDef.solrAttribs = rootSolrAttribs;\n      solrXMLDef.coresAttribs = coresAttribs;\n      SOLR_XML_SERIALIZER.persistFile(file, solrXMLDef);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc6e48afbb50ae0a22fa76e226f04fd585532938","date":1371429211,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#persistCores(Config,Properties,Map[String,String],Map[String,String],Map[String,String],Map[String,String],Map[String,String],Map[String,String],File,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#persistCores(Config,Properties,Map[String,String],Map[String,String],File,File,SolrResourceLoader).mjava","sourceNew":"  public void persistCores(Config cfg, Properties containerProperties,\n      Map<String,String> rootSolrAttribs, Map<String,String> coresAttribs,\n      Map<String, String> loggingAttribs, Map<String,String> watcherAttribs,\n      Map<String, String> shardHandlerAttrib, Map<String,String> shardHandlerProps,\n      File file, SolrResourceLoader loader) throws XPathExpressionException {\n\n\n    List<SolrXMLSerializer.SolrCoreXMLDef> solrCoreXMLDefs = new ArrayList<SolrXMLSerializer.SolrCoreXMLDef>();\n    synchronized (modifyLock) {\n\n      persistCores(cfg, cores, loader, solrCoreXMLDefs);\n      persistCores(cfg, transientCores, loader, solrCoreXMLDefs);\n      // add back all the cores that aren't loaded, either in cores or transient\n      // cores\n      for (Map.Entry<String,CoreDescriptor> ent : dynamicDescriptors.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())) {\n          addCoreToPersistList(cfg, loader, ent.getValue(), null, solrCoreXMLDefs);\n        }\n      }\n      for (Map.Entry<String,SolrCore> ent : createdCores.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())\n            && !dynamicDescriptors.containsKey(ent.getKey())) {\n          addCoreToPersistList(cfg, loader, ent.getValue().getCoreDescriptor(),\n              null, solrCoreXMLDefs);\n        }\n      }\n\n      SolrXMLSerializer.SolrXMLDef solrXMLDef = new SolrXMLSerializer.SolrXMLDef();\n      solrXMLDef.coresDefs = solrCoreXMLDefs;\n      solrXMLDef.containerProperties = containerProperties;\n      solrXMLDef.solrAttribs = rootSolrAttribs;\n      solrXMLDef.coresAttribs = coresAttribs;\n      solrXMLDef.loggingAttribs = loggingAttribs;\n      solrXMLDef.watcherAttribs = watcherAttribs;\n      solrXMLDef.shardHandlerAttribs = shardHandlerAttrib;\n      solrXMLDef.shardHandlerProps = shardHandlerProps;\n      SOLR_XML_SERIALIZER.persistFile(file, solrXMLDef);\n    }\n\n  }\n\n","sourceOld":"  public void persistCores(Config cfg, Properties containerProperties,\n      Map<String,String> rootSolrAttribs, Map<String,String> coresAttribs,\n      File file, File configFile, SolrResourceLoader loader) throws XPathExpressionException {\n\n    \n    List<SolrXMLSerializer.SolrCoreXMLDef> solrCoreXMLDefs = new ArrayList<SolrXMLSerializer.SolrCoreXMLDef>();\n    synchronized (modifyLock) {\n      \n      persistCores(cfg, cores, loader, solrCoreXMLDefs);\n      persistCores(cfg, transientCores, loader, solrCoreXMLDefs);\n      // add back all the cores that aren't loaded, either in cores or transient\n      // cores\n      for (Map.Entry<String,CoreDescriptor> ent : dynamicDescriptors.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())) {\n          addCoreToPersistList(cfg, loader, ent.getValue(), null, solrCoreXMLDefs);\n        }\n      }\n      for (Map.Entry<String,SolrCore> ent : createdCores.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())\n            && !dynamicDescriptors.containsKey(ent.getKey())) {\n          addCoreToPersistList(cfg, loader, ent.getValue().getCoreDescriptor(),\n              null, solrCoreXMLDefs);\n        }\n      }\n\n      SolrXMLSerializer.SolrXMLDef solrXMLDef = new SolrXMLSerializer.SolrXMLDef();\n      solrXMLDef.coresDefs = solrCoreXMLDefs;\n      solrXMLDef.containerProperties = containerProperties;\n      solrXMLDef.solrAttribs = rootSolrAttribs;\n      solrXMLDef.coresAttribs = coresAttribs;\n      SOLR_XML_SERIALIZER.persistFile(file, solrXMLDef);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#persistCores(Config,Properties,Map[String,String],Map[String,String],File,File,SolrResourceLoader).mjava","sourceNew":null,"sourceOld":"  public void persistCores(Config cfg, Properties containerProperties,\n      Map<String,String> rootSolrAttribs, Map<String,String> coresAttribs,\n      File file, File configFile, SolrResourceLoader loader) throws XPathExpressionException {\n\n    \n    List<SolrXMLSerializer.SolrCoreXMLDef> solrCoreXMLDefs = new ArrayList<SolrXMLSerializer.SolrCoreXMLDef>();\n    synchronized (modifyLock) {\n      \n      persistCores(cfg, cores, loader, solrCoreXMLDefs);\n      persistCores(cfg, transientCores, loader, solrCoreXMLDefs);\n      // add back all the cores that aren't loaded, either in cores or transient\n      // cores\n      for (Map.Entry<String,CoreDescriptor> ent : dynamicDescriptors.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())) {\n          addCoreToPersistList(cfg, loader, ent.getValue(), null, solrCoreXMLDefs);\n        }\n      }\n      for (Map.Entry<String,SolrCore> ent : createdCores.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())\n            && !dynamicDescriptors.containsKey(ent.getKey())) {\n          addCoreToPersistList(cfg, loader, ent.getValue().getCoreDescriptor(),\n              null, solrCoreXMLDefs);\n        }\n      }\n\n      SolrXMLSerializer.SolrXMLDef solrXMLDef = new SolrXMLSerializer.SolrXMLDef();\n      solrXMLDef.coresDefs = solrCoreXMLDefs;\n      solrXMLDef.containerProperties = containerProperties;\n      solrXMLDef.solrAttribs = rootSolrAttribs;\n      solrXMLDef.coresAttribs = coresAttribs;\n      SOLR_XML_SERIALIZER.persistFile(file, solrXMLDef);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc6e48afbb50ae0a22fa76e226f04fd585532938":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["9409650933cc688e77e565092a25e58adfc2e18d"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["b29abed5661c7911e4b45d5a3d79a186268e28c4","dc6e48afbb50ae0a22fa76e226f04fd585532938"],"9409650933cc688e77e565092a25e58adfc2e18d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dc6e48afbb50ae0a22fa76e226f04fd585532938"]},"commit2Childs":{"dc6e48afbb50ae0a22fa76e226f04fd585532938":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["dc6e48afbb50ae0a22fa76e226f04fd585532938","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9409650933cc688e77e565092a25e58adfc2e18d":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9409650933cc688e77e565092a25e58adfc2e18d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}