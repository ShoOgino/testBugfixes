{"path":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#testNextVaryingNumberOfTerms().mjava","commits":[{"id":"7a64e93bc1feffac85dcc3907934278ff8214ad8","date":1363964145,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#testNextVaryingNumberOfTerms().mjava","pathOld":"/dev/null","sourceNew":"  /** test next with varying numbers of terms with varying minShouldMatch */\n  public void testNextVaryingNumberOfTerms() throws Exception {\n    List<String> termsList = new ArrayList<String>();\n    termsList.addAll(Arrays.asList(commonTerms));\n    termsList.addAll(Arrays.asList(mediumTerms));\n    termsList.addAll(Arrays.asList(rareTerms));\n    Collections.shuffle(termsList, random());\n    for (int numTerms = 2; numTerms <= termsList.size(); numTerms++) {\n      String terms[] = termsList.subList(0, numTerms).toArray(new String[0]);\n      for (int minNrShouldMatch = 1; minNrShouldMatch <= terms.length; minNrShouldMatch++) {\n        Scorer expected = scorer(terms, minNrShouldMatch, true);\n        Scorer actual = scorer(terms, minNrShouldMatch, false);\n        assertNext(expected, actual);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#testNextVaryingNumberOfTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#testNextVaryingNumberOfTerms().mjava","sourceNew":"  /** test next with varying numbers of terms with varying minShouldMatch */\n  public void testNextVaryingNumberOfTerms() throws Exception {\n    List<String> termsList = new ArrayList<>();\n    termsList.addAll(Arrays.asList(commonTerms));\n    termsList.addAll(Arrays.asList(mediumTerms));\n    termsList.addAll(Arrays.asList(rareTerms));\n    Collections.shuffle(termsList, random());\n    for (int numTerms = 2; numTerms <= termsList.size(); numTerms++) {\n      String terms[] = termsList.subList(0, numTerms).toArray(new String[0]);\n      for (int minNrShouldMatch = 1; minNrShouldMatch <= terms.length; minNrShouldMatch++) {\n        Scorer expected = scorer(terms, minNrShouldMatch, true);\n        Scorer actual = scorer(terms, minNrShouldMatch, false);\n        assertNext(expected, actual);\n      }\n    }\n  }\n\n","sourceOld":"  /** test next with varying numbers of terms with varying minShouldMatch */\n  public void testNextVaryingNumberOfTerms() throws Exception {\n    List<String> termsList = new ArrayList<String>();\n    termsList.addAll(Arrays.asList(commonTerms));\n    termsList.addAll(Arrays.asList(mediumTerms));\n    termsList.addAll(Arrays.asList(rareTerms));\n    Collections.shuffle(termsList, random());\n    for (int numTerms = 2; numTerms <= termsList.size(); numTerms++) {\n      String terms[] = termsList.subList(0, numTerms).toArray(new String[0]);\n      for (int minNrShouldMatch = 1; minNrShouldMatch <= terms.length; minNrShouldMatch++) {\n        Scorer expected = scorer(terms, minNrShouldMatch, true);\n        Scorer actual = scorer(terms, minNrShouldMatch, false);\n        assertNext(expected, actual);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251e6911800e3a02e1da3bfd4dc49a914aef9778","date":1423063783,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#testNextVaryingNumberOfTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#testNextVaryingNumberOfTerms().mjava","sourceNew":"  /** test next with varying numbers of terms with varying minShouldMatch */\n  public void testNextVaryingNumberOfTerms() throws Exception {\n    List<String> termsList = new ArrayList<>();\n    termsList.addAll(Arrays.asList(commonTerms));\n    termsList.addAll(Arrays.asList(mediumTerms));\n    termsList.addAll(Arrays.asList(rareTerms));\n    Collections.shuffle(termsList, random());\n    for (int numTerms = 2; numTerms <= termsList.size(); numTerms++) {\n      String terms[] = termsList.subList(0, numTerms).toArray(new String[0]);\n      for (int minNrShouldMatch = 1; minNrShouldMatch <= terms.length; minNrShouldMatch++) {\n        Scorer expected = scorer(terms, minNrShouldMatch, Mode.DOC_VALUES);\n        Scorer actual = scorer(terms, minNrShouldMatch, Mode.SCORER);\n        assertNext(expected, actual);\n\n        expected = scorer(terms, minNrShouldMatch, Mode.DOC_VALUES);\n        actual = scorer(terms, minNrShouldMatch, Mode.BULK_SCORER);\n        assertNext(expected, actual);\n      }\n    }\n  }\n\n","sourceOld":"  /** test next with varying numbers of terms with varying minShouldMatch */\n  public void testNextVaryingNumberOfTerms() throws Exception {\n    List<String> termsList = new ArrayList<>();\n    termsList.addAll(Arrays.asList(commonTerms));\n    termsList.addAll(Arrays.asList(mediumTerms));\n    termsList.addAll(Arrays.asList(rareTerms));\n    Collections.shuffle(termsList, random());\n    for (int numTerms = 2; numTerms <= termsList.size(); numTerms++) {\n      String terms[] = termsList.subList(0, numTerms).toArray(new String[0]);\n      for (int minNrShouldMatch = 1; minNrShouldMatch <= terms.length; minNrShouldMatch++) {\n        Scorer expected = scorer(terms, minNrShouldMatch, true);\n        Scorer actual = scorer(terms, minNrShouldMatch, false);\n        assertNext(expected, actual);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7a64e93bc1feffac85dcc3907934278ff8214ad8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7a64e93bc1feffac85dcc3907934278ff8214ad8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["251e6911800e3a02e1da3bfd4dc49a914aef9778"]},"commit2Childs":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a64e93bc1feffac85dcc3907934278ff8214ad8"],"7a64e93bc1feffac85dcc3907934278ff8214ad8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}