{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testDeleteFieldTypeAccuracy().mjava","commits":[{"id":"c6ff97491f7791aa98e90d71c4c7fee58688c37b","date":1434817448,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testDeleteFieldTypeAccuracy().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeleteFieldTypeAccuracy() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"delInt\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TrieIntField\");\n    fieldTypeAttributes.put(\"precisionStep\", 0);\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse initialFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldTypeResponse);\n    FieldTypeRepresentation responseFieldTypeRepresentation = initialFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(responseFieldTypeRepresentation.getAttributes().get(\"name\"))));\n\n    SchemaRequest.DeleteFieldType deleteFieldTypeRequest =\n        new SchemaRequest.DeleteFieldType(fieldTypeName);\n    SchemaResponse.UpdateResponse deleteFieldTypeResponse = deleteFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(deleteFieldTypeResponse);\n\n    try {\n      fieldTypeRequest.process(getSolrClient());\n      fail(String.format(Locale.ROOT, \"after removal, the field type %s shouldn't be anymore available over Schema API\",\n          fieldTypeName));\n    } catch (SolrException e) {\n      //success\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testDeleteFieldTypeAccuracy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testDeleteFieldTypeAccuracy().mjava","sourceNew":"  @Test\n  public void testDeleteFieldTypeAccuracy() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"delInt\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TrieIntField\");\n    fieldTypeAttributes.put(\"precisionStep\", 0);\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SolrClient c = getSolrClient();\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(c);\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse initialFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldTypeResponse);\n    FieldTypeRepresentation responseFieldTypeRepresentation = initialFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(responseFieldTypeRepresentation.getAttributes().get(\"name\"))));\n\n    SchemaRequest.DeleteFieldType deleteFieldTypeRequest =\n        new SchemaRequest.DeleteFieldType(fieldTypeName);\n    SchemaResponse.UpdateResponse deleteFieldTypeResponse = deleteFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(deleteFieldTypeResponse);\n\n    try {\n      fieldTypeRequest.process(getSolrClient());\n      fail(String.format(Locale.ROOT, \"after removal, the field type %s shouldn't be anymore available over Schema API\",\n          fieldTypeName));\n    } catch (SolrException e) {\n      //success\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteFieldTypeAccuracy() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"delInt\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TrieIntField\");\n    fieldTypeAttributes.put(\"precisionStep\", 0);\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse initialFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldTypeResponse);\n    FieldTypeRepresentation responseFieldTypeRepresentation = initialFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(responseFieldTypeRepresentation.getAttributes().get(\"name\"))));\n\n    SchemaRequest.DeleteFieldType deleteFieldTypeRequest =\n        new SchemaRequest.DeleteFieldType(fieldTypeName);\n    SchemaResponse.UpdateResponse deleteFieldTypeResponse = deleteFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(deleteFieldTypeResponse);\n\n    try {\n      fieldTypeRequest.process(getSolrClient());\n      fail(String.format(Locale.ROOT, \"after removal, the field type %s shouldn't be anymore available over Schema API\",\n          fieldTypeName));\n    } catch (SolrException e) {\n      //success\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf91b76bbc05503ac96589cc801c8e65dff0e564","date":1498517395,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testDeleteFieldTypeAccuracy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testDeleteFieldTypeAccuracy().mjava","sourceNew":"  @Test\n  public void testDeleteFieldTypeAccuracy() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"delInt\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\",  RANDOMIZED_NUMERIC_FIELDTYPES.get(Integer.class));\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SolrClient c = getSolrClient();\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(c);\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse initialFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldTypeResponse);\n    FieldTypeRepresentation responseFieldTypeRepresentation = initialFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(responseFieldTypeRepresentation.getAttributes().get(\"name\"))));\n\n    SchemaRequest.DeleteFieldType deleteFieldTypeRequest =\n        new SchemaRequest.DeleteFieldType(fieldTypeName);\n    SchemaResponse.UpdateResponse deleteFieldTypeResponse = deleteFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(deleteFieldTypeResponse);\n\n    try {\n      fieldTypeRequest.process(getSolrClient());\n      fail(String.format(Locale.ROOT, \"after removal, the field type %s shouldn't be anymore available over Schema API\",\n          fieldTypeName));\n    } catch (SolrException e) {\n      //success\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteFieldTypeAccuracy() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"delInt\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TrieIntField\");\n    fieldTypeAttributes.put(\"precisionStep\", 0);\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SolrClient c = getSolrClient();\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(c);\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse initialFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldTypeResponse);\n    FieldTypeRepresentation responseFieldTypeRepresentation = initialFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(responseFieldTypeRepresentation.getAttributes().get(\"name\"))));\n\n    SchemaRequest.DeleteFieldType deleteFieldTypeRequest =\n        new SchemaRequest.DeleteFieldType(fieldTypeName);\n    SchemaResponse.UpdateResponse deleteFieldTypeResponse = deleteFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(deleteFieldTypeResponse);\n\n    try {\n      fieldTypeRequest.process(getSolrClient());\n      fail(String.format(Locale.ROOT, \"after removal, the field type %s shouldn't be anymore available over Schema API\",\n          fieldTypeName));\n    } catch (SolrException e) {\n      //success\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testDeleteFieldTypeAccuracy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testDeleteFieldTypeAccuracy().mjava","sourceNew":"  @Test\n  public void testDeleteFieldTypeAccuracy() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"delInt\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\",  RANDOMIZED_NUMERIC_FIELDTYPES.get(Integer.class));\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SolrClient c = getSolrClient();\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(c);\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse initialFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldTypeResponse);\n    FieldTypeRepresentation responseFieldTypeRepresentation = initialFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(responseFieldTypeRepresentation.getAttributes().get(\"name\"))));\n\n    SchemaRequest.DeleteFieldType deleteFieldTypeRequest =\n        new SchemaRequest.DeleteFieldType(fieldTypeName);\n    SchemaResponse.UpdateResponse deleteFieldTypeResponse = deleteFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(deleteFieldTypeResponse);\n\n    try {\n      fieldTypeRequest.process(getSolrClient());\n      fail(String.format(Locale.ROOT, \"after removal, the field type %s shouldn't be anymore available over Schema API\",\n          fieldTypeName));\n    } catch (SolrException e) {\n      //success\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteFieldTypeAccuracy() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"delInt\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TrieIntField\");\n    fieldTypeAttributes.put(\"precisionStep\", 0);\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SolrClient c = getSolrClient();\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(c);\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse initialFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldTypeResponse);\n    FieldTypeRepresentation responseFieldTypeRepresentation = initialFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(responseFieldTypeRepresentation.getAttributes().get(\"name\"))));\n\n    SchemaRequest.DeleteFieldType deleteFieldTypeRequest =\n        new SchemaRequest.DeleteFieldType(fieldTypeName);\n    SchemaResponse.UpdateResponse deleteFieldTypeResponse = deleteFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(deleteFieldTypeResponse);\n\n    try {\n      fieldTypeRequest.process(getSolrClient());\n      fail(String.format(Locale.ROOT, \"after removal, the field type %s shouldn't be anymore available over Schema API\",\n          fieldTypeName));\n    } catch (SolrException e) {\n      //success\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testDeleteFieldTypeAccuracy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testDeleteFieldTypeAccuracy().mjava","sourceNew":"  @Test\n  public void testDeleteFieldTypeAccuracy() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"delInt\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\",  RANDOMIZED_NUMERIC_FIELDTYPES.get(Integer.class));\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SolrClient c = getSolrClient();\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(c);\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse initialFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldTypeResponse);\n    FieldTypeRepresentation responseFieldTypeRepresentation = initialFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(responseFieldTypeRepresentation.getAttributes().get(\"name\"))));\n\n    SchemaRequest.DeleteFieldType deleteFieldTypeRequest =\n        new SchemaRequest.DeleteFieldType(fieldTypeName);\n    SchemaResponse.UpdateResponse deleteFieldTypeResponse = deleteFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(deleteFieldTypeResponse);\n\n    try {\n      fieldTypeRequest.process(getSolrClient());\n      fail(String.format(Locale.ROOT, \"after removal, the field type %s shouldn't be anymore available over Schema API\",\n          fieldTypeName));\n    } catch (SolrException e) {\n      //success\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteFieldTypeAccuracy() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"delInt\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TrieIntField\");\n    fieldTypeAttributes.put(\"precisionStep\", 0);\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SolrClient c = getSolrClient();\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(c);\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse initialFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldTypeResponse);\n    FieldTypeRepresentation responseFieldTypeRepresentation = initialFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(responseFieldTypeRepresentation.getAttributes().get(\"name\"))));\n\n    SchemaRequest.DeleteFieldType deleteFieldTypeRequest =\n        new SchemaRequest.DeleteFieldType(fieldTypeName);\n    SchemaResponse.UpdateResponse deleteFieldTypeResponse = deleteFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(deleteFieldTypeResponse);\n\n    try {\n      fieldTypeRequest.process(getSolrClient());\n      fail(String.format(Locale.ROOT, \"after removal, the field type %s shouldn't be anymore available over Schema API\",\n          fieldTypeName));\n    } catch (SolrException e) {\n      //success\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"859081acf00749f5dd462772c571d611d4a4d2db":["c6ff97491f7791aa98e90d71c4c7fee58688c37b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf91b76bbc05503ac96589cc801c8e65dff0e564":["859081acf00749f5dd462772c571d611d4a4d2db"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["859081acf00749f5dd462772c571d611d4a4d2db","cf91b76bbc05503ac96589cc801c8e65dff0e564"],"c6ff97491f7791aa98e90d71c4c7fee58688c37b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["859081acf00749f5dd462772c571d611d4a4d2db","cf91b76bbc05503ac96589cc801c8e65dff0e564"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"859081acf00749f5dd462772c571d611d4a4d2db":["cf91b76bbc05503ac96589cc801c8e65dff0e564","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6ff97491f7791aa98e90d71c4c7fee58688c37b"],"cf91b76bbc05503ac96589cc801c8e65dff0e564":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"c6ff97491f7791aa98e90d71c4c7fee58688c37b":["859081acf00749f5dd462772c571d611d4a4d2db"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}