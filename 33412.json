{"path":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    indexDoc(sdoc(id, \"1\", \"lowerfilt\", \"toyota\"));\n    indexDoc(sdoc(id, \"2\", \"lowerfilt\", \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", \"lowerfilt\", \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", \"lowerfilt\", \"ford\"));\n    indexDoc(sdoc(id, \"5\", \"lowerfilt\", \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", \"lowerfilt\", \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", \"lowerfilt\", \"sonata\"));\n    indexDoc(sdoc(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", \"lowerfilt\", \"blue\"));\n    indexDoc(sdoc(id, \"12\", \"lowerfilt\", \"glue\"));\n    indexDoc(sdoc(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", \"lowerfilt\", \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", \"lowerfilt\", \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", \"lowerfilt\", \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", \"lowerfilt\", \"bmw 750Li\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{17, 13, 14, 20, 22, 15, 16, 24, 18, 23};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}3\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{3, 27, 26, 28};\n    actualIds = new int[4];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}20\");\n    params.set(\"debug\" , \"query\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{18, 23, 13, 14, 20, 22, 19, 21, 15, 16};\n    actualIds = new int[10];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String expectedQueryString = \"lowerfilt:over lowerfilt:fox lowerfilt:lazy lowerfilt:brown \"\n        + \"lowerfilt:jumped lowerfilt:red lowerfilt:dogs. lowerfilt:quote lowerfilt:the\";\n    \n    try {\n      ArrayList<String> actualParsedQueries = (ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\");\n\n      for (int counter = 0; counter < actualParsedQueries.size(); counter++) {\n        assertTrue(\"Parsed queries aren't equal\",\n            compareParsedQueryStrings(expectedQueryString,\n                actualParsedQueries.get(counter)));\n      }\n    } catch (ClassCastException ex) {\n      // TODO: Adding this to just track a rare test failure.\n      // Once SOLR-6755 is resolved, this should be removed.\n      log.info(\"QueryResponse.debugMap: {}\", queryResponse.getDebugMap().toString());\n      log.info(\"ClusterState: {}\", cloudClient.getZkStateReader().getClusterState().toString());\n    }\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{18, 23, 13, 14, 20, 22, 19, 21, 15, 16};\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    indexDoc(sdoc(id, \"1\", \"lowerfilt\", \"toyota\"));\n    indexDoc(sdoc(id, \"2\", \"lowerfilt\", \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", \"lowerfilt\", \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", \"lowerfilt\", \"ford\"));\n    indexDoc(sdoc(id, \"5\", \"lowerfilt\", \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", \"lowerfilt\", \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", \"lowerfilt\", \"sonata\"));\n    indexDoc(sdoc(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", \"lowerfilt\", \"blue\"));\n    indexDoc(sdoc(id, \"12\", \"lowerfilt\", \"glue\"));\n    indexDoc(sdoc(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", \"lowerfilt\", \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", \"lowerfilt\", \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", \"lowerfilt\", \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", \"lowerfilt\", \"bmw 750Li\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{17, 13, 14, 20, 22, 15, 16, 24, 18, 23};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}3\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{3, 27, 26, 28};\n    actualIds = new int[4];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}20\");\n    params.set(\"debug\" , \"query\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{18, 23, 13, 14, 20, 22, 19, 21, 15, 16};\n    actualIds = new int[10];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String expectedQueryString = \"lowerfilt:over lowerfilt:fox lowerfilt:lazy lowerfilt:brown \"\n        + \"lowerfilt:jumped lowerfilt:red lowerfilt:dogs. lowerfilt:quote lowerfilt:the\";\n    \n    try {\n      ArrayList<String> actualParsedQueries = (ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\");\n\n      for (int counter = 0; counter < actualParsedQueries.size(); counter++) {\n        assertTrue(\"Parsed queries aren't equal\",\n            compareParsedQueryStrings(expectedQueryString,\n                actualParsedQueries.get(counter)));\n      }\n    } catch (ClassCastException ex) {\n      // TODO: Adding this to just track a rare test failure.\n      // Once SOLR-6755 is resolved, this should be removed.\n      log.info(\"QueryResponse.debugMap: {}\", queryResponse.getDebugMap().toString());\n      log.info(\"ClusterState: {}\", cloudClient.getZkStateReader().getClusterState().toString());\n    }\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{18, 23, 13, 14, 20, 22, 19, 21, 15, 16};\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19d28b1683d6453ee94a9205e2d32206d2dde868","date":1429661373,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    String FIELD1 = \"lowerfilt\" ;\n    \n    indexDoc(sdoc(id, \"1\", FIELD1, \"toyota\"));\n    indexDoc(sdoc(id, \"2\", FIELD1, \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", FIELD1, \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", FIELD1, \"ford\"));\n    indexDoc(sdoc(id, \"5\", FIELD1, \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", FIELD1, \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", FIELD1, \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", FIELD1, \"sonata\"));\n    indexDoc(sdoc(id, \"9\", FIELD1, \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", FIELD1, \"blue\"));\n    indexDoc(sdoc(id, \"12\", FIELD1, \"glue\"));\n    indexDoc(sdoc(id, \"13\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", FIELD1, \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", FIELD1, \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", FIELD1, \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", FIELD1, \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", FIELD1, \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", FIELD1, \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", FIELD1, \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", FIELD1, \"bmw 750Li\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{17, 13, 14, 20, 22, 15, 16, 24, 18, 23};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}3\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{3, 27, 26, 28};\n    actualIds = new int[4];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}20\");\n    params.set(\"debug\" , \"query\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{18, 23, 13, 14, 20, 22, 19, 21, 15, 16};\n    actualIds = new int[10];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String expectedQueryString = \"lowerfilt:over lowerfilt:fox lowerfilt:lazy lowerfilt:brown \"\n        + \"lowerfilt:jumped lowerfilt:red lowerfilt:dogs. lowerfilt:quote lowerfilt:the\";\n    \n    ArrayList<String> actualParsedQueries = (ArrayList<String>) queryResponse\n        .getDebugMap().get(\"parsedquery\");\n\n    for (int counter = 0; counter < actualParsedQueries.size(); counter++) {\n      assertTrue(\"Parsed queries aren't equal\",\n          compareParsedQueryStrings(expectedQueryString,\n              actualParsedQueries.get(counter)));\n    }\n  \n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{18, 23, 13, 14, 20, 22, 19, 21, 15, 16};\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    indexDoc(sdoc(id, \"1\", \"lowerfilt\", \"toyota\"));\n    indexDoc(sdoc(id, \"2\", \"lowerfilt\", \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", \"lowerfilt\", \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", \"lowerfilt\", \"ford\"));\n    indexDoc(sdoc(id, \"5\", \"lowerfilt\", \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", \"lowerfilt\", \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", \"lowerfilt\", \"sonata\"));\n    indexDoc(sdoc(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", \"lowerfilt\", \"blue\"));\n    indexDoc(sdoc(id, \"12\", \"lowerfilt\", \"glue\"));\n    indexDoc(sdoc(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", \"lowerfilt\", \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", \"lowerfilt\", \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", \"lowerfilt\", \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", \"lowerfilt\", \"bmw 750Li\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{17, 13, 14, 20, 22, 15, 16, 24, 18, 23};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}3\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{3, 27, 26, 28};\n    actualIds = new int[4];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}20\");\n    params.set(\"debug\" , \"query\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{18, 23, 13, 14, 20, 22, 19, 21, 15, 16};\n    actualIds = new int[10];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String expectedQueryString = \"lowerfilt:over lowerfilt:fox lowerfilt:lazy lowerfilt:brown \"\n        + \"lowerfilt:jumped lowerfilt:red lowerfilt:dogs. lowerfilt:quote lowerfilt:the\";\n    \n    try {\n      ArrayList<String> actualParsedQueries = (ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\");\n\n      for (int counter = 0; counter < actualParsedQueries.size(); counter++) {\n        assertTrue(\"Parsed queries aren't equal\",\n            compareParsedQueryStrings(expectedQueryString,\n                actualParsedQueries.get(counter)));\n      }\n    } catch (ClassCastException ex) {\n      // TODO: Adding this to just track a rare test failure.\n      // Once SOLR-6755 is resolved, this should be removed.\n      log.info(\"QueryResponse.debugMap: {}\", queryResponse.getDebugMap().toString());\n      log.info(\"ClusterState: {}\", cloudClient.getZkStateReader().getClusterState().toString());\n    }\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{18, 23, 13, 14, 20, 22, 19, 21, 15, 16};\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","bugFix":["fa407daeae15bf17b168f3ddaae52b80e6b29962","07d695a14a1938b01a5d4ab68b3c815eb061da94","eb55f624eb53f26cfb7f9614b862fb7657633358"],"bugIntro":["96ff9085dd3a7ec77459ebe4c8d945e5c74168fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"776417a20af3930a363a226c989867f65e93ee91","date":1434582735,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    String FIELD1 = \"lowerfilt\" ;\n    \n    indexDoc(sdoc(id, \"1\", FIELD1, \"toyota\"));\n    indexDoc(sdoc(id, \"2\", FIELD1, \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", FIELD1, \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", FIELD1, \"ford\"));\n    indexDoc(sdoc(id, \"5\", FIELD1, \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", FIELD1, \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", FIELD1, \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", FIELD1, \"sonata\"));\n    indexDoc(sdoc(id, \"9\", FIELD1, \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", FIELD1, \"blue\"));\n    indexDoc(sdoc(id, \"12\", FIELD1, \"glue\"));\n    indexDoc(sdoc(id, \"13\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", FIELD1, \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", FIELD1, \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", FIELD1, \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", FIELD1, \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", FIELD1, \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", FIELD1, \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", FIELD1, \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", FIELD1, \"bmw 750Li\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{17, 7, 13, 14, 15, 16, 20, 22, 24, 9};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=0 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{3, 27, 26, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String expectedQueryString = \"lowerfilt:bmw lowerfilt:usa\";\n    \n    ArrayList<String> actualParsedQueries = (ArrayList<String>) queryResponse\n        .getDebugMap().get(\"parsedquery\");\n\n    for (int counter = 0; counter < actualParsedQueries.size(); counter++) {\n      assertTrue(\"Parsed queries aren't equal\",\n          compareParsedQueryStrings(expectedQueryString,\n              actualParsedQueries.get(counter)));\n    }\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of df and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=20 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a mindf of 20 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of wl and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=4 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a minwl of 4 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a low enough value of minwl and make sure we get the expected matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=3 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 4 documents with a minwl of 3 but found more\", solrDocuments.size(), 4);\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    actualIds = new int[solrDocuments.size()];\n    expectedIds = new int[]{13, 14, 15, 16, 20, 22, 24, 18, 19, 21};\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    String FIELD1 = \"lowerfilt\" ;\n    \n    indexDoc(sdoc(id, \"1\", FIELD1, \"toyota\"));\n    indexDoc(sdoc(id, \"2\", FIELD1, \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", FIELD1, \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", FIELD1, \"ford\"));\n    indexDoc(sdoc(id, \"5\", FIELD1, \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", FIELD1, \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", FIELD1, \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", FIELD1, \"sonata\"));\n    indexDoc(sdoc(id, \"9\", FIELD1, \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", FIELD1, \"blue\"));\n    indexDoc(sdoc(id, \"12\", FIELD1, \"glue\"));\n    indexDoc(sdoc(id, \"13\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", FIELD1, \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", FIELD1, \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", FIELD1, \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", FIELD1, \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", FIELD1, \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", FIELD1, \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", FIELD1, \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", FIELD1, \"bmw 750Li\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{17, 13, 14, 20, 22, 15, 16, 24, 18, 23};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}3\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{3, 27, 26, 28};\n    actualIds = new int[4];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}20\");\n    params.set(\"debug\" , \"query\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{18, 23, 13, 14, 20, 22, 19, 21, 15, 16};\n    actualIds = new int[10];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String expectedQueryString = \"lowerfilt:over lowerfilt:fox lowerfilt:lazy lowerfilt:brown \"\n        + \"lowerfilt:jumped lowerfilt:red lowerfilt:dogs. lowerfilt:quote lowerfilt:the\";\n    \n    ArrayList<String> actualParsedQueries = (ArrayList<String>) queryResponse\n        .getDebugMap().get(\"parsedquery\");\n\n    for (int counter = 0; counter < actualParsedQueries.size(); counter++) {\n      assertTrue(\"Parsed queries aren't equal\",\n          compareParsedQueryStrings(expectedQueryString,\n              actualParsedQueries.get(counter)));\n    }\n  \n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{18, 23, 13, 14, 20, 22, 19, 21, 15, 16};\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","bugFix":null,"bugIntro":["655260340014c640e7d0f9a7a7ea1f00f36f65e5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96ff9085dd3a7ec77459ebe4c8d945e5c74168fb","date":1435080672,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    String FIELD1 = \"lowerfilt\" ;\n    \n    indexDoc(sdoc(id, \"1\", FIELD1, \"toyota\"));\n    indexDoc(sdoc(id, \"2\", FIELD1, \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", FIELD1, \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", FIELD1, \"ford\"));\n    indexDoc(sdoc(id, \"5\", FIELD1, \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", FIELD1, \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", FIELD1, \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", FIELD1, \"sonata\"));\n    indexDoc(sdoc(id, \"9\", FIELD1, \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", FIELD1, \"blue\"));\n    indexDoc(sdoc(id, \"12\", FIELD1, \"glue\"));\n    indexDoc(sdoc(id, \"13\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", FIELD1, \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", FIELD1, \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", FIELD1, \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", FIELD1, \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", FIELD1, \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", FIELD1, \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", FIELD1, \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", FIELD1, \"bmw 750Li\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{17, 7, 13, 14, 15, 16, 20, 22, 24, 9};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=0 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{3, 27, 26, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String expectedQueryString = \"lowerfilt:bmw lowerfilt:usa\";\n\n    ArrayList<String> actualParsedQueries;\n    \n    if(queryResponse.getDebugMap().get(\"parsedquery\") instanceof  String) {\n      actualParsedQueries = new ArrayList();\n      actualParsedQueries.add((String) queryResponse.getDebugMap().get(\"parsedquery\"));\n    } else {\n      actualParsedQueries = (ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\");\n    }\n      \n    for (int counter = 0; counter < actualParsedQueries.size(); counter++) {\n      assertTrue(\"Parsed queries aren't equal\",\n          compareParsedQueryStrings(expectedQueryString,\n              actualParsedQueries.get(counter)));\n    }\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of df and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=20 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a mindf of 20 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of wl and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=4 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a minwl of 4 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a low enough value of minwl and make sure we get the expected matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=3 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 4 documents with a minwl of 3 but found more\", solrDocuments.size(), 4);\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    actualIds = new int[solrDocuments.size()];\n    expectedIds = new int[]{13, 14, 15, 16, 20, 22, 24, 18, 19, 21};\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    String FIELD1 = \"lowerfilt\" ;\n    \n    indexDoc(sdoc(id, \"1\", FIELD1, \"toyota\"));\n    indexDoc(sdoc(id, \"2\", FIELD1, \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", FIELD1, \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", FIELD1, \"ford\"));\n    indexDoc(sdoc(id, \"5\", FIELD1, \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", FIELD1, \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", FIELD1, \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", FIELD1, \"sonata\"));\n    indexDoc(sdoc(id, \"9\", FIELD1, \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", FIELD1, \"blue\"));\n    indexDoc(sdoc(id, \"12\", FIELD1, \"glue\"));\n    indexDoc(sdoc(id, \"13\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", FIELD1, \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", FIELD1, \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", FIELD1, \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", FIELD1, \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", FIELD1, \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", FIELD1, \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", FIELD1, \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", FIELD1, \"bmw 750Li\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{17, 7, 13, 14, 15, 16, 20, 22, 24, 9};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=0 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{3, 27, 26, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String expectedQueryString = \"lowerfilt:bmw lowerfilt:usa\";\n    \n    ArrayList<String> actualParsedQueries = (ArrayList<String>) queryResponse\n        .getDebugMap().get(\"parsedquery\");\n\n    for (int counter = 0; counter < actualParsedQueries.size(); counter++) {\n      assertTrue(\"Parsed queries aren't equal\",\n          compareParsedQueryStrings(expectedQueryString,\n              actualParsedQueries.get(counter)));\n    }\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of df and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=20 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a mindf of 20 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of wl and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=4 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a minwl of 4 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a low enough value of minwl and make sure we get the expected matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=3 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 4 documents with a minwl of 3 but found more\", solrDocuments.size(), 4);\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    actualIds = new int[solrDocuments.size()];\n    expectedIds = new int[]{13, 14, 15, 16, 20, 22, 24, 18, 19, 21};\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","bugFix":["19d28b1683d6453ee94a9205e2d32206d2dde868","eb55f624eb53f26cfb7f9614b862fb7657633358"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"655260340014c640e7d0f9a7a7ea1f00f36f65e5","date":1436227523,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    String FIELD1 = \"lowerfilt\" ;\n    String FIELD2 = \"lowerfilt1\" ;\n    \n    indexDoc(sdoc(id, \"1\", FIELD1, \"toyota\"));\n    indexDoc(sdoc(id, \"2\", FIELD1, \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", FIELD1, \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", FIELD1, \"ford\"));\n    indexDoc(sdoc(id, \"5\", FIELD1, \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", FIELD1, \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", FIELD1, \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", FIELD1, \"sonata\"));\n    indexDoc(sdoc(id, \"9\", FIELD1, \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", FIELD1, \"blue\"));\n    indexDoc(sdoc(id, \"12\", FIELD1, \"glue\"));\n    indexDoc(sdoc(id, \"13\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", FIELD1, \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", FIELD1, \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", FIELD1, \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", FIELD1, \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", FIELD1, \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", FIELD1, \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", FIELD1, \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", FIELD1, \"bmw 750Li\"));\n    indexDoc(sdoc(id, \"29\", FIELD1, \"bmw usa\",\n        FIELD2, \"red green blue\"));\n    indexDoc(sdoc(id, \"30\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"red green yellow\"));\n    indexDoc(sdoc(id, \"31\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"green blue yellow\"));\n    indexDoc(sdoc(id, \"32\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"yellow white black\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{17, 7, 13, 14, 15, 16, 20, 22, 24, 32};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=0 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{3, 29, 27, 26, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String expectedQueryString = \"lowerfilt:bmw lowerfilt:usa\";\n\n    ArrayList<String> actualParsedQueries;\n    \n    if(queryResponse.getDebugMap().get(\"parsedquery\") instanceof  String) {\n      actualParsedQueries = new ArrayList();\n      actualParsedQueries.add((String) queryResponse.getDebugMap().get(\"parsedquery\"));\n    } else {\n      actualParsedQueries = (ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\");\n    }\n      \n    for (int counter = 0; counter < actualParsedQueries.size(); counter++) {\n      assertTrue(\"Parsed queries aren't equal\",\n          compareParsedQueryStrings(expectedQueryString,\n              actualParsedQueries.get(counter)));\n    }\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt,lowerfilt1 mindf=0 mintf=1}26\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{26, 27, 3, 29, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    \n    assertArrayEquals(expectedIds, actualIds);\n\n    expectedQueryString = \"lowerfilt:bmw lowerfilt:usa lowerfilt:328i\";\n\n    if(queryResponse.getDebugMap().get(\"parsedquery\") instanceof  String) {\n      actualParsedQueries = new ArrayList();\n      actualParsedQueries.add((String) queryResponse.getDebugMap().get(\"parsedquery\"));\n    } else {\n      actualParsedQueries = (ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\");\n    }\n      \n    for (int counter = 0; counter < actualParsedQueries.size(); counter++) {\n      assertTrue(\"Parsed queries aren't equal\",\n          compareParsedQueryStrings(expectedQueryString,\n              actualParsedQueries.get(counter)));\n    }\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of df and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=20 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a mindf of 20 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of wl and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=4 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a minwl of 4 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a low enough value of minwl and make sure we get the expected matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=3 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 4 documents with a minwl of 3 but found more\", 5, solrDocuments.size());\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    actualIds = new int[solrDocuments.size()];\n    expectedIds = new int[]{13, 14, 15, 16, 20, 22, 24, 32, 18, 19};\n    i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    String FIELD1 = \"lowerfilt\" ;\n    \n    indexDoc(sdoc(id, \"1\", FIELD1, \"toyota\"));\n    indexDoc(sdoc(id, \"2\", FIELD1, \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", FIELD1, \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", FIELD1, \"ford\"));\n    indexDoc(sdoc(id, \"5\", FIELD1, \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", FIELD1, \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", FIELD1, \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", FIELD1, \"sonata\"));\n    indexDoc(sdoc(id, \"9\", FIELD1, \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", FIELD1, \"blue\"));\n    indexDoc(sdoc(id, \"12\", FIELD1, \"glue\"));\n    indexDoc(sdoc(id, \"13\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", FIELD1, \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", FIELD1, \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", FIELD1, \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", FIELD1, \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", FIELD1, \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", FIELD1, \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", FIELD1, \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", FIELD1, \"bmw 750Li\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{17, 7, 13, 14, 15, 16, 20, 22, 24, 9};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=0 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{3, 27, 26, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String expectedQueryString = \"lowerfilt:bmw lowerfilt:usa\";\n\n    ArrayList<String> actualParsedQueries;\n    \n    if(queryResponse.getDebugMap().get(\"parsedquery\") instanceof  String) {\n      actualParsedQueries = new ArrayList();\n      actualParsedQueries.add((String) queryResponse.getDebugMap().get(\"parsedquery\"));\n    } else {\n      actualParsedQueries = (ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\");\n    }\n      \n    for (int counter = 0; counter < actualParsedQueries.size(); counter++) {\n      assertTrue(\"Parsed queries aren't equal\",\n          compareParsedQueryStrings(expectedQueryString,\n              actualParsedQueries.get(counter)));\n    }\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of df and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=20 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a mindf of 20 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of wl and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=4 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a minwl of 4 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a low enough value of minwl and make sure we get the expected matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=3 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 4 documents with a minwl of 3 but found more\", solrDocuments.size(), 4);\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    actualIds = new int[solrDocuments.size()];\n    expectedIds = new int[]{13, 14, 15, 16, 20, 22, 24, 18, 19, 21};\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","bugFix":["776417a20af3930a363a226c989867f65e93ee91","eb55f624eb53f26cfb7f9614b862fb7657633358"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed95a777f3860385e015fb8a082e4b66a5aa6bb8","date":1448307668,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    String FIELD1 = \"lowerfilt\" ;\n    String FIELD2 = \"lowerfilt1\" ;\n    \n    indexDoc(sdoc(id, \"1\", FIELD1, \"toyota\"));\n    indexDoc(sdoc(id, \"2\", FIELD1, \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", FIELD1, \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", FIELD1, \"ford\"));\n    indexDoc(sdoc(id, \"5\", FIELD1, \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", FIELD1, \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", FIELD1, \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", FIELD1, \"sonata\"));\n    indexDoc(sdoc(id, \"9\", FIELD1, \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", FIELD1, \"blue\"));\n    indexDoc(sdoc(id, \"12\", FIELD1, \"glue\"));\n    indexDoc(sdoc(id, \"13\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", FIELD1, \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", FIELD1, \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", FIELD1, \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", FIELD1, \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", FIELD1, \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", FIELD1, \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", FIELD1, \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", FIELD1, \"bmw 750Li\"));\n    indexDoc(sdoc(id, \"29\", FIELD1, \"bmw usa\",\n        FIELD2, \"red green blue\"));\n    indexDoc(sdoc(id, \"30\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"red green yellow\"));\n    indexDoc(sdoc(id, \"31\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"green blue yellow\"));\n    indexDoc(sdoc(id, \"32\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"yellow white black\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{7, 13, 14, 15, 16, 20, 22, 24, 32, 9};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=0 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{29, 27, 26, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String[] expectedQueryStrings = new String[]{\n      \"(+(lowerfilt:bmw lowerfilt:usa) -id:3)/no_coord\",\n      \"(+(lowerfilt:usa lowerfilt:bmw) -id:3)/no_coord\"};\n\n    String[] actualParsedQueries;\n    \n    if(queryResponse.getDebugMap().get(\"parsedquery\") instanceof  String) {\n      actualParsedQueries = new String[]{(String) queryResponse.getDebugMap().get(\"parsedquery\")};\n    } else {\n      actualParsedQueries = ((ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\")).toArray(new String[0]);\n      Arrays.sort(actualParsedQueries);\n    }\n    assertArrayEquals(expectedQueryStrings, actualParsedQueries);\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt,lowerfilt1 mindf=0 mintf=1}26\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{27, 3, 29, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    \n    assertArrayEquals(expectedIds, actualIds);\n\n    expectedQueryStrings = new String[]{\n      \"(+(lowerfilt:bmw lowerfilt:usa) -id:26)/no_coord\",\n      \"(+(lowerfilt:usa lowerfilt:bmw lowerfilt:328i) -id:26)/no_coord\"};\n\n    if(queryResponse.getDebugMap().get(\"parsedquery\") instanceof  String) {\n      actualParsedQueries = new String[]{(String) queryResponse.getDebugMap().get(\"parsedquery\")};\n    } else {\n      actualParsedQueries = ((ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\")).toArray(new String[0]);\n      Arrays.sort(actualParsedQueries);\n    }\n    assertArrayEquals(expectedQueryStrings, actualParsedQueries);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of df and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=20 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a mindf of 20 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of wl and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=4 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a minwl of 4 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a low enough value of minwl and make sure we get the expected matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=3 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 4 documents with a minwl of 3 but found more\", 4, solrDocuments.size());\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    actualIds = new int[solrDocuments.size()];\n    expectedIds = new int[]{13, 14, 15, 16, 22, 24, 32, 18, 19, 21};\n    i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    String FIELD1 = \"lowerfilt\" ;\n    String FIELD2 = \"lowerfilt1\" ;\n    \n    indexDoc(sdoc(id, \"1\", FIELD1, \"toyota\"));\n    indexDoc(sdoc(id, \"2\", FIELD1, \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", FIELD1, \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", FIELD1, \"ford\"));\n    indexDoc(sdoc(id, \"5\", FIELD1, \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", FIELD1, \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", FIELD1, \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", FIELD1, \"sonata\"));\n    indexDoc(sdoc(id, \"9\", FIELD1, \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", FIELD1, \"blue\"));\n    indexDoc(sdoc(id, \"12\", FIELD1, \"glue\"));\n    indexDoc(sdoc(id, \"13\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", FIELD1, \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", FIELD1, \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", FIELD1, \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", FIELD1, \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", FIELD1, \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", FIELD1, \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", FIELD1, \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", FIELD1, \"bmw 750Li\"));\n    indexDoc(sdoc(id, \"29\", FIELD1, \"bmw usa\",\n        FIELD2, \"red green blue\"));\n    indexDoc(sdoc(id, \"30\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"red green yellow\"));\n    indexDoc(sdoc(id, \"31\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"green blue yellow\"));\n    indexDoc(sdoc(id, \"32\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"yellow white black\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{17, 7, 13, 14, 15, 16, 20, 22, 24, 32};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=0 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{3, 29, 27, 26, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String expectedQueryString = \"lowerfilt:bmw lowerfilt:usa\";\n\n    ArrayList<String> actualParsedQueries;\n    \n    if(queryResponse.getDebugMap().get(\"parsedquery\") instanceof  String) {\n      actualParsedQueries = new ArrayList();\n      actualParsedQueries.add((String) queryResponse.getDebugMap().get(\"parsedquery\"));\n    } else {\n      actualParsedQueries = (ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\");\n    }\n      \n    for (int counter = 0; counter < actualParsedQueries.size(); counter++) {\n      assertTrue(\"Parsed queries aren't equal\",\n          compareParsedQueryStrings(expectedQueryString,\n              actualParsedQueries.get(counter)));\n    }\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt,lowerfilt1 mindf=0 mintf=1}26\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{26, 27, 3, 29, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    \n    assertArrayEquals(expectedIds, actualIds);\n\n    expectedQueryString = \"lowerfilt:bmw lowerfilt:usa lowerfilt:328i\";\n\n    if(queryResponse.getDebugMap().get(\"parsedquery\") instanceof  String) {\n      actualParsedQueries = new ArrayList();\n      actualParsedQueries.add((String) queryResponse.getDebugMap().get(\"parsedquery\"));\n    } else {\n      actualParsedQueries = (ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\");\n    }\n      \n    for (int counter = 0; counter < actualParsedQueries.size(); counter++) {\n      assertTrue(\"Parsed queries aren't equal\",\n          compareParsedQueryStrings(expectedQueryString,\n              actualParsedQueries.get(counter)));\n    }\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of df and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=20 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a mindf of 20 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of wl and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=4 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a minwl of 4 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a low enough value of minwl and make sure we get the expected matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=3 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 4 documents with a minwl of 3 but found more\", 5, solrDocuments.size());\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    actualIds = new int[solrDocuments.size()];\n    expectedIds = new int[]{13, 14, 15, 16, 20, 22, 24, 32, 18, 19};\n    i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa3705c34a7293d3c3662f1735625576a24e33d9","date":1448341430,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    String FIELD1 = \"lowerfilt\" ;\n    String FIELD2 = \"lowerfilt1\" ;\n    \n    indexDoc(sdoc(id, \"1\", FIELD1, \"toyota\"));\n    indexDoc(sdoc(id, \"2\", FIELD1, \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", FIELD1, \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", FIELD1, \"ford\"));\n    indexDoc(sdoc(id, \"5\", FIELD1, \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", FIELD1, \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", FIELD1, \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", FIELD1, \"sonata\"));\n    indexDoc(sdoc(id, \"9\", FIELD1, \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", FIELD1, \"blue\"));\n    indexDoc(sdoc(id, \"12\", FIELD1, \"glue\"));\n    indexDoc(sdoc(id, \"13\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", FIELD1, \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", FIELD1, \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", FIELD1, \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", FIELD1, \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", FIELD1, \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", FIELD1, \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", FIELD1, \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", FIELD1, \"bmw 750Li\"));\n    indexDoc(sdoc(id, \"29\", FIELD1, \"bmw usa\",\n        FIELD2, \"red green blue\"));\n    indexDoc(sdoc(id, \"30\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"red green yellow\"));\n    indexDoc(sdoc(id, \"31\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"green blue yellow\"));\n    indexDoc(sdoc(id, \"32\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"yellow white black\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{7, 13, 14, 15, 16, 20, 22, 24, 32, 9};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=0 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{29, 27, 26, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String[] expectedQueryStrings = new String[]{\n      \"(+(lowerfilt:bmw lowerfilt:usa) -id:3)/no_coord\",\n      \"(+(lowerfilt:usa lowerfilt:bmw) -id:3)/no_coord\"};\n\n    String[] actualParsedQueries;\n    if(queryResponse.getDebugMap().get(\"parsedquery\") instanceof  String) {\n      String parsedQueryString = (String) queryResponse.getDebugMap().get(\"parsedquery\");\n      assertTrue(parsedQueryString.equals(expectedQueryStrings[0]) || parsedQueryString.equals(expectedQueryStrings[1]));\n    } else {\n      actualParsedQueries = ((ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\")).toArray(new String[0]);\n      Arrays.sort(actualParsedQueries);\n      assertArrayEquals(expectedQueryStrings, actualParsedQueries);\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt,lowerfilt1 mindf=0 mintf=1}26\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{27, 3, 29, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    \n    assertArrayEquals(expectedIds, actualIds);\n\n    expectedQueryStrings = new String[]{\n      \"(+(lowerfilt:bmw lowerfilt:usa) -id:26)/no_coord\",\n      \"(+(lowerfilt:usa lowerfilt:bmw lowerfilt:328i) -id:26)/no_coord\"};\n\n    if(queryResponse.getDebugMap().get(\"parsedquery\") instanceof  String) {\n      // todo: We might run into issues here. Should think about a better way to test this.\n      actualParsedQueries = new String[]{(String) queryResponse.getDebugMap().get(\"parsedquery\")};\n    } else {\n      actualParsedQueries = ((ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\")).toArray(new String[0]);\n      Arrays.sort(actualParsedQueries);\n    }\n    assertArrayEquals(expectedQueryStrings, actualParsedQueries);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of df and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=20 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a mindf of 20 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of wl and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=4 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a minwl of 4 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a low enough value of minwl and make sure we get the expected matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=3 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 4 documents with a minwl of 3 but found more\", 4, solrDocuments.size());\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    actualIds = new int[solrDocuments.size()];\n    expectedIds = new int[]{13, 14, 15, 16, 22, 24, 32, 18, 19, 21};\n    i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    String FIELD1 = \"lowerfilt\" ;\n    String FIELD2 = \"lowerfilt1\" ;\n    \n    indexDoc(sdoc(id, \"1\", FIELD1, \"toyota\"));\n    indexDoc(sdoc(id, \"2\", FIELD1, \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", FIELD1, \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", FIELD1, \"ford\"));\n    indexDoc(sdoc(id, \"5\", FIELD1, \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", FIELD1, \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", FIELD1, \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", FIELD1, \"sonata\"));\n    indexDoc(sdoc(id, \"9\", FIELD1, \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", FIELD1, \"blue\"));\n    indexDoc(sdoc(id, \"12\", FIELD1, \"glue\"));\n    indexDoc(sdoc(id, \"13\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", FIELD1, \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", FIELD1, \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", FIELD1, \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", FIELD1, \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", FIELD1, \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", FIELD1, \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", FIELD1, \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", FIELD1, \"bmw 750Li\"));\n    indexDoc(sdoc(id, \"29\", FIELD1, \"bmw usa\",\n        FIELD2, \"red green blue\"));\n    indexDoc(sdoc(id, \"30\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"red green yellow\"));\n    indexDoc(sdoc(id, \"31\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"green blue yellow\"));\n    indexDoc(sdoc(id, \"32\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"yellow white black\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{7, 13, 14, 15, 16, 20, 22, 24, 32, 9};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=0 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{29, 27, 26, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String[] expectedQueryStrings = new String[]{\n      \"(+(lowerfilt:bmw lowerfilt:usa) -id:3)/no_coord\",\n      \"(+(lowerfilt:usa lowerfilt:bmw) -id:3)/no_coord\"};\n\n    String[] actualParsedQueries;\n    \n    if(queryResponse.getDebugMap().get(\"parsedquery\") instanceof  String) {\n      actualParsedQueries = new String[]{(String) queryResponse.getDebugMap().get(\"parsedquery\")};\n    } else {\n      actualParsedQueries = ((ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\")).toArray(new String[0]);\n      Arrays.sort(actualParsedQueries);\n    }\n    assertArrayEquals(expectedQueryStrings, actualParsedQueries);\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt,lowerfilt1 mindf=0 mintf=1}26\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{27, 3, 29, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    \n    assertArrayEquals(expectedIds, actualIds);\n\n    expectedQueryStrings = new String[]{\n      \"(+(lowerfilt:bmw lowerfilt:usa) -id:26)/no_coord\",\n      \"(+(lowerfilt:usa lowerfilt:bmw lowerfilt:328i) -id:26)/no_coord\"};\n\n    if(queryResponse.getDebugMap().get(\"parsedquery\") instanceof  String) {\n      actualParsedQueries = new String[]{(String) queryResponse.getDebugMap().get(\"parsedquery\")};\n    } else {\n      actualParsedQueries = ((ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\")).toArray(new String[0]);\n      Arrays.sort(actualParsedQueries);\n    }\n    assertArrayEquals(expectedQueryStrings, actualParsedQueries);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of df and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=20 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a mindf of 20 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of wl and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=4 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a minwl of 4 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a low enough value of minwl and make sure we get the expected matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=3 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 4 documents with a minwl of 3 but found more\", 4, solrDocuments.size());\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    actualIds = new int[solrDocuments.size()];\n    expectedIds = new int[]{13, 14, 15, 16, 22, 24, 32, 18, 19, 21};\n    i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41add67cd1a766b8f699799116bd97da1d052dc1","date":1448341966,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    String FIELD1 = \"lowerfilt\" ;\n    String FIELD2 = \"lowerfilt1\" ;\n    \n    indexDoc(sdoc(id, \"1\", FIELD1, \"toyota\"));\n    indexDoc(sdoc(id, \"2\", FIELD1, \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", FIELD1, \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", FIELD1, \"ford\"));\n    indexDoc(sdoc(id, \"5\", FIELD1, \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", FIELD1, \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", FIELD1, \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", FIELD1, \"sonata\"));\n    indexDoc(sdoc(id, \"9\", FIELD1, \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", FIELD1, \"blue\"));\n    indexDoc(sdoc(id, \"12\", FIELD1, \"glue\"));\n    indexDoc(sdoc(id, \"13\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", FIELD1, \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", FIELD1, \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", FIELD1, \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", FIELD1, \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", FIELD1, \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", FIELD1, \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", FIELD1, \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", FIELD1, \"bmw 750Li\"));\n    indexDoc(sdoc(id, \"29\", FIELD1, \"bmw usa\",\n        FIELD2, \"red green blue\"));\n    indexDoc(sdoc(id, \"30\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"red green yellow\"));\n    indexDoc(sdoc(id, \"31\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"green blue yellow\"));\n    indexDoc(sdoc(id, \"32\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"yellow white black\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{7, 13, 14, 15, 16, 20, 22, 24, 32, 9};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=0 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{29, 27, 26, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String[] expectedQueryStrings = new String[]{\n      \"(+(lowerfilt:bmw lowerfilt:usa) -id:3)/no_coord\",\n      \"(+(lowerfilt:usa lowerfilt:bmw) -id:3)/no_coord\"};\n\n    String[] actualParsedQueries;\n    if(queryResponse.getDebugMap().get(\"parsedquery\") instanceof  String) {\n      String parsedQueryString = (String) queryResponse.getDebugMap().get(\"parsedquery\");\n      assertTrue(parsedQueryString.equals(expectedQueryStrings[0]) || parsedQueryString.equals(expectedQueryStrings[1]));\n    } else {\n      actualParsedQueries = ((ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\")).toArray(new String[0]);\n      Arrays.sort(actualParsedQueries);\n      assertArrayEquals(expectedQueryStrings, actualParsedQueries);\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt,lowerfilt1 mindf=0 mintf=1}26\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{27, 3, 29, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    \n    assertArrayEquals(expectedIds, actualIds);\n\n    expectedQueryStrings = new String[]{\n      \"(+(lowerfilt:bmw lowerfilt:usa) -id:26)/no_coord\",\n      \"(+(lowerfilt:usa lowerfilt:bmw lowerfilt:328i) -id:26)/no_coord\"};\n\n    if(queryResponse.getDebugMap().get(\"parsedquery\") instanceof  String) {\n      // todo: We might run into issues here. Should think about a better way to test this.\n      // Skipping testing in this case for now.\n      // actualParsedQueries = new String[]{(String) queryResponse.getDebugMap().get(\"parsedquery\")};\n    } else {\n      actualParsedQueries = ((ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\")).toArray(new String[0]);\n      Arrays.sort(actualParsedQueries);\n      assertArrayEquals(expectedQueryStrings, actualParsedQueries);\n    }\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of df and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=20 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a mindf of 20 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of wl and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=4 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a minwl of 4 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a low enough value of minwl and make sure we get the expected matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=3 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 4 documents with a minwl of 3 but found more\", 4, solrDocuments.size());\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    actualIds = new int[solrDocuments.size()];\n    expectedIds = new int[]{13, 14, 15, 16, 22, 24, 32, 18, 19, 21};\n    i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    String FIELD1 = \"lowerfilt\" ;\n    String FIELD2 = \"lowerfilt1\" ;\n    \n    indexDoc(sdoc(id, \"1\", FIELD1, \"toyota\"));\n    indexDoc(sdoc(id, \"2\", FIELD1, \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", FIELD1, \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", FIELD1, \"ford\"));\n    indexDoc(sdoc(id, \"5\", FIELD1, \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", FIELD1, \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", FIELD1, \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", FIELD1, \"sonata\"));\n    indexDoc(sdoc(id, \"9\", FIELD1, \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", FIELD1, \"blue\"));\n    indexDoc(sdoc(id, \"12\", FIELD1, \"glue\"));\n    indexDoc(sdoc(id, \"13\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", FIELD1, \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", FIELD1, \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", FIELD1, \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", FIELD1, \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", FIELD1, \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", FIELD1, \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", FIELD1, \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", FIELD1, \"bmw 750Li\"));\n    indexDoc(sdoc(id, \"29\", FIELD1, \"bmw usa\",\n        FIELD2, \"red green blue\"));\n    indexDoc(sdoc(id, \"30\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"red green yellow\"));\n    indexDoc(sdoc(id, \"31\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"green blue yellow\"));\n    indexDoc(sdoc(id, \"32\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"yellow white black\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{7, 13, 14, 15, 16, 20, 22, 24, 32, 9};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=0 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{29, 27, 26, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String[] expectedQueryStrings = new String[]{\n      \"(+(lowerfilt:bmw lowerfilt:usa) -id:3)/no_coord\",\n      \"(+(lowerfilt:usa lowerfilt:bmw) -id:3)/no_coord\"};\n\n    String[] actualParsedQueries;\n    if(queryResponse.getDebugMap().get(\"parsedquery\") instanceof  String) {\n      String parsedQueryString = (String) queryResponse.getDebugMap().get(\"parsedquery\");\n      assertTrue(parsedQueryString.equals(expectedQueryStrings[0]) || parsedQueryString.equals(expectedQueryStrings[1]));\n    } else {\n      actualParsedQueries = ((ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\")).toArray(new String[0]);\n      Arrays.sort(actualParsedQueries);\n      assertArrayEquals(expectedQueryStrings, actualParsedQueries);\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt,lowerfilt1 mindf=0 mintf=1}26\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{27, 3, 29, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    \n    assertArrayEquals(expectedIds, actualIds);\n\n    expectedQueryStrings = new String[]{\n      \"(+(lowerfilt:bmw lowerfilt:usa) -id:26)/no_coord\",\n      \"(+(lowerfilt:usa lowerfilt:bmw lowerfilt:328i) -id:26)/no_coord\"};\n\n    if(queryResponse.getDebugMap().get(\"parsedquery\") instanceof  String) {\n      // todo: We might run into issues here. Should think about a better way to test this.\n      actualParsedQueries = new String[]{(String) queryResponse.getDebugMap().get(\"parsedquery\")};\n    } else {\n      actualParsedQueries = ((ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\")).toArray(new String[0]);\n      Arrays.sort(actualParsedQueries);\n    }\n    assertArrayEquals(expectedQueryStrings, actualParsedQueries);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of df and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=20 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a mindf of 20 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of wl and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=4 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a minwl of 4 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a low enough value of minwl and make sure we get the expected matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=3 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 4 documents with a minwl of 3 but found more\", 4, solrDocuments.size());\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    actualIds = new int[solrDocuments.size()];\n    expectedIds = new int[]{13, 14, 15, 16, 22, 24, 32, 18, 19, 21};\n    i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f2da60849d476a5d89377ab401c4d7b30bb1450","date":1448378358,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    String FIELD1 = \"lowerfilt\" ;\n    String FIELD2 = \"lowerfilt1\" ;\n    \n    indexDoc(sdoc(id, \"1\", FIELD1, \"toyota\"));\n    indexDoc(sdoc(id, \"2\", FIELD1, \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", FIELD1, \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", FIELD1, \"ford\"));\n    indexDoc(sdoc(id, \"5\", FIELD1, \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", FIELD1, \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", FIELD1, \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", FIELD1, \"sonata\"));\n    indexDoc(sdoc(id, \"9\", FIELD1, \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", FIELD1, \"blue\"));\n    indexDoc(sdoc(id, \"12\", FIELD1, \"glue\"));\n    indexDoc(sdoc(id, \"13\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", FIELD1, \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", FIELD1, \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", FIELD1, \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", FIELD1, \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", FIELD1, \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", FIELD1, \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", FIELD1, \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", FIELD1, \"bmw 750Li\"));\n    indexDoc(sdoc(id, \"29\", FIELD1, \"bmw usa\",\n        FIELD2, \"red green blue\"));\n    indexDoc(sdoc(id, \"30\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"red green yellow\"));\n    indexDoc(sdoc(id, \"31\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"green blue yellow\"));\n    indexDoc(sdoc(id, \"32\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"yellow white black\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{7, 13, 14, 15, 16, 20, 22, 24, 32, 9};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=0 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{29, 27, 26, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String[] expectedQueryStrings = new String[]{\n      \"(+(lowerfilt:bmw lowerfilt:usa) -id:3)/no_coord\",\n      \"(+(lowerfilt:usa lowerfilt:bmw) -id:3)/no_coord\"};\n\n    String[] actualParsedQueries;\n    if(queryResponse.getDebugMap().get(\"parsedquery\") instanceof  String) {\n      String parsedQueryString = (String) queryResponse.getDebugMap().get(\"parsedquery\");\n      assertTrue(parsedQueryString.equals(expectedQueryStrings[0]) || parsedQueryString.equals(expectedQueryStrings[1]));\n    } else {\n      actualParsedQueries = ((ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\")).toArray(new String[0]);\n      Arrays.sort(actualParsedQueries);\n      assertArrayEquals(expectedQueryStrings, actualParsedQueries);\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt,lowerfilt1 mindf=0 mintf=1}26\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{27, 3, 29, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    \n    assertArrayEquals(expectedIds, actualIds);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of df and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=20 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a mindf of 20 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of wl and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=4 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a minwl of 4 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a low enough value of minwl and make sure we get the expected matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=3 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 4 documents with a minwl of 3 but found more\", 4, solrDocuments.size());\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    actualIds = new int[solrDocuments.size()];\n    expectedIds = new int[]{13, 14, 15, 16, 22, 24, 32, 18, 19, 21};\n    i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    String FIELD1 = \"lowerfilt\" ;\n    String FIELD2 = \"lowerfilt1\" ;\n    \n    indexDoc(sdoc(id, \"1\", FIELD1, \"toyota\"));\n    indexDoc(sdoc(id, \"2\", FIELD1, \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", FIELD1, \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", FIELD1, \"ford\"));\n    indexDoc(sdoc(id, \"5\", FIELD1, \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", FIELD1, \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", FIELD1, \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", FIELD1, \"sonata\"));\n    indexDoc(sdoc(id, \"9\", FIELD1, \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", FIELD1, \"blue\"));\n    indexDoc(sdoc(id, \"12\", FIELD1, \"glue\"));\n    indexDoc(sdoc(id, \"13\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", FIELD1, \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", FIELD1, \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", FIELD1, \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", FIELD1, \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", FIELD1, \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", FIELD1, \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", FIELD1, \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", FIELD1, \"bmw 750Li\"));\n    indexDoc(sdoc(id, \"29\", FIELD1, \"bmw usa\",\n        FIELD2, \"red green blue\"));\n    indexDoc(sdoc(id, \"30\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"red green yellow\"));\n    indexDoc(sdoc(id, \"31\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"green blue yellow\"));\n    indexDoc(sdoc(id, \"32\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"yellow white black\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{7, 13, 14, 15, 16, 20, 22, 24, 32, 9};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=0 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{29, 27, 26, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String[] expectedQueryStrings = new String[]{\n      \"(+(lowerfilt:bmw lowerfilt:usa) -id:3)/no_coord\",\n      \"(+(lowerfilt:usa lowerfilt:bmw) -id:3)/no_coord\"};\n\n    String[] actualParsedQueries;\n    if(queryResponse.getDebugMap().get(\"parsedquery\") instanceof  String) {\n      String parsedQueryString = (String) queryResponse.getDebugMap().get(\"parsedquery\");\n      assertTrue(parsedQueryString.equals(expectedQueryStrings[0]) || parsedQueryString.equals(expectedQueryStrings[1]));\n    } else {\n      actualParsedQueries = ((ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\")).toArray(new String[0]);\n      Arrays.sort(actualParsedQueries);\n      assertArrayEquals(expectedQueryStrings, actualParsedQueries);\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt,lowerfilt1 mindf=0 mintf=1}26\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{27, 3, 29, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    \n    assertArrayEquals(expectedIds, actualIds);\n\n    expectedQueryStrings = new String[]{\n      \"(+(lowerfilt:bmw lowerfilt:usa) -id:26)/no_coord\",\n      \"(+(lowerfilt:usa lowerfilt:bmw lowerfilt:328i) -id:26)/no_coord\"};\n\n    if(queryResponse.getDebugMap().get(\"parsedquery\") instanceof  String) {\n      // todo: We might run into issues here. Should think about a better way to test this.\n      // Skipping testing in this case for now.\n      // actualParsedQueries = new String[]{(String) queryResponse.getDebugMap().get(\"parsedquery\")};\n    } else {\n      actualParsedQueries = ((ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\")).toArray(new String[0]);\n      Arrays.sort(actualParsedQueries);\n      assertArrayEquals(expectedQueryStrings, actualParsedQueries);\n    }\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of df and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=20 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a mindf of 20 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of wl and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=4 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a minwl of 4 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a low enough value of minwl and make sure we get the expected matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=3 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 4 documents with a minwl of 3 but found more\", 4, solrDocuments.size());\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    actualIds = new int[solrDocuments.size()];\n    expectedIds = new int[]{13, 14, 15, 16, 22, 24, 32, 18, 19, 21};\n    i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1","date":1451604685,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    String FIELD1 = \"lowerfilt\" ;\n    String FIELD2 = \"lowerfilt1\" ;\n    \n    indexDoc(sdoc(id, \"1\", FIELD1, \"toyota\"));\n    indexDoc(sdoc(id, \"2\", FIELD1, \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", FIELD1, \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", FIELD1, \"ford\"));\n    indexDoc(sdoc(id, \"5\", FIELD1, \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", FIELD1, \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", FIELD1, \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", FIELD1, \"sonata\"));\n    indexDoc(sdoc(id, \"9\", FIELD1, \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", FIELD1, \"blue\"));\n    indexDoc(sdoc(id, \"12\", FIELD1, \"glue\"));\n    indexDoc(sdoc(id, \"13\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", FIELD1, \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", FIELD1, \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", FIELD1, \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", FIELD1, \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", FIELD1, \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", FIELD1, \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", FIELD1, \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", FIELD1, \"bmw 750Li\"));\n    indexDoc(sdoc(id, \"29\", FIELD1, \"bmw usa\",\n        FIELD2, \"red green blue\"));\n    indexDoc(sdoc(id, \"30\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"red green yellow\"));\n    indexDoc(sdoc(id, \"31\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"green blue yellow\"));\n    indexDoc(sdoc(id, \"32\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"yellow white black\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{7, 13, 14, 15, 16, 20, 22, 24, 32, 9};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt boost=true}17\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{7, 13, 14, 15, 16, 20, 22, 24, 32, 9};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=0 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{29, 27, 26, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String[] expectedQueryStrings = new String[]{\n      \"(+(lowerfilt:bmw lowerfilt:usa) -id:3)/no_coord\",\n      \"(+(lowerfilt:usa lowerfilt:bmw) -id:3)/no_coord\"};\n\n    String[] actualParsedQueries;\n    if(queryResponse.getDebugMap().get(\"parsedquery\") instanceof  String) {\n      String parsedQueryString = (String) queryResponse.getDebugMap().get(\"parsedquery\");\n      assertTrue(parsedQueryString.equals(expectedQueryStrings[0]) || parsedQueryString.equals(expectedQueryStrings[1]));\n    } else {\n      actualParsedQueries = ((ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\")).toArray(new String[0]);\n      Arrays.sort(actualParsedQueries);\n      assertArrayEquals(expectedQueryStrings, actualParsedQueries);\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt,lowerfilt1 mindf=0 mintf=1}26\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{27, 3, 29, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    \n    assertArrayEquals(expectedIds, actualIds);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of df and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=20 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a mindf of 20 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of wl and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=4 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a minwl of 4 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a low enough value of minwl and make sure we get the expected matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=3 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 4 documents with a minwl of 3 but found more\", 4, solrDocuments.size());\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    actualIds = new int[solrDocuments.size()];\n    expectedIds = new int[]{13, 14, 15, 16, 22, 24, 32, 18, 19, 21};\n    i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    String FIELD1 = \"lowerfilt\" ;\n    String FIELD2 = \"lowerfilt1\" ;\n    \n    indexDoc(sdoc(id, \"1\", FIELD1, \"toyota\"));\n    indexDoc(sdoc(id, \"2\", FIELD1, \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", FIELD1, \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", FIELD1, \"ford\"));\n    indexDoc(sdoc(id, \"5\", FIELD1, \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", FIELD1, \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", FIELD1, \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", FIELD1, \"sonata\"));\n    indexDoc(sdoc(id, \"9\", FIELD1, \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", FIELD1, \"blue\"));\n    indexDoc(sdoc(id, \"12\", FIELD1, \"glue\"));\n    indexDoc(sdoc(id, \"13\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", FIELD1, \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", FIELD1, \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", FIELD1, \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", FIELD1, \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", FIELD1, \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", FIELD1, \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", FIELD1, \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", FIELD1, \"bmw 750Li\"));\n    indexDoc(sdoc(id, \"29\", FIELD1, \"bmw usa\",\n        FIELD2, \"red green blue\"));\n    indexDoc(sdoc(id, \"30\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"red green yellow\"));\n    indexDoc(sdoc(id, \"31\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"green blue yellow\"));\n    indexDoc(sdoc(id, \"32\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"yellow white black\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{7, 13, 14, 15, 16, 20, 22, 24, 32, 9};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=0 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{29, 27, 26, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String[] expectedQueryStrings = new String[]{\n      \"(+(lowerfilt:bmw lowerfilt:usa) -id:3)/no_coord\",\n      \"(+(lowerfilt:usa lowerfilt:bmw) -id:3)/no_coord\"};\n\n    String[] actualParsedQueries;\n    if(queryResponse.getDebugMap().get(\"parsedquery\") instanceof  String) {\n      String parsedQueryString = (String) queryResponse.getDebugMap().get(\"parsedquery\");\n      assertTrue(parsedQueryString.equals(expectedQueryStrings[0]) || parsedQueryString.equals(expectedQueryStrings[1]));\n    } else {\n      actualParsedQueries = ((ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\")).toArray(new String[0]);\n      Arrays.sort(actualParsedQueries);\n      assertArrayEquals(expectedQueryStrings, actualParsedQueries);\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt,lowerfilt1 mindf=0 mintf=1}26\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{27, 3, 29, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    \n    assertArrayEquals(expectedIds, actualIds);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of df and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=20 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a mindf of 20 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of wl and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=4 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a minwl of 4 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a low enough value of minwl and make sure we get the expected matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=3 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 4 documents with a minwl of 3 but found more\", 4, solrDocuments.size());\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    actualIds = new int[solrDocuments.size()];\n    expectedIds = new int[]{13, 14, 15, 16, 22, 24, 32, 18, 19, 21};\n    i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ebf70dabe6279454c5ff460bdea3f0dc2814a86","date":1463672611,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#test().mjava","sourceNew":null,"sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    String FIELD1 = \"lowerfilt\" ;\n    String FIELD2 = \"lowerfilt1\" ;\n    \n    indexDoc(sdoc(id, \"1\", FIELD1, \"toyota\"));\n    indexDoc(sdoc(id, \"2\", FIELD1, \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", FIELD1, \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", FIELD1, \"ford\"));\n    indexDoc(sdoc(id, \"5\", FIELD1, \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", FIELD1, \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", FIELD1, \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", FIELD1, \"sonata\"));\n    indexDoc(sdoc(id, \"9\", FIELD1, \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", FIELD1, \"blue\"));\n    indexDoc(sdoc(id, \"12\", FIELD1, \"glue\"));\n    indexDoc(sdoc(id, \"13\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", FIELD1, \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", FIELD1, \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", FIELD1, \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", FIELD1, \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", FIELD1, \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", FIELD1, \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", FIELD1, \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", FIELD1, \"bmw 750Li\"));\n    indexDoc(sdoc(id, \"29\", FIELD1, \"bmw usa\",\n        FIELD2, \"red green blue\"));\n    indexDoc(sdoc(id, \"30\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"red green yellow\"));\n    indexDoc(sdoc(id, \"31\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"green blue yellow\"));\n    indexDoc(sdoc(id, \"32\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"yellow white black\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{7, 13, 14, 15, 16, 20, 22, 24, 32, 9};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt boost=true}17\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{7, 13, 14, 15, 16, 20, 22, 24, 32, 9};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=0 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{29, 27, 26, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String[] expectedQueryStrings = new String[]{\n      \"(+(lowerfilt:bmw lowerfilt:usa) -id:3)/no_coord\",\n      \"(+(lowerfilt:usa lowerfilt:bmw) -id:3)/no_coord\"};\n\n    String[] actualParsedQueries;\n    if(queryResponse.getDebugMap().get(\"parsedquery\") instanceof  String) {\n      String parsedQueryString = (String) queryResponse.getDebugMap().get(\"parsedquery\");\n      assertTrue(parsedQueryString.equals(expectedQueryStrings[0]) || parsedQueryString.equals(expectedQueryStrings[1]));\n    } else {\n      actualParsedQueries = ((ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\")).toArray(new String[0]);\n      Arrays.sort(actualParsedQueries);\n      assertArrayEquals(expectedQueryStrings, actualParsedQueries);\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt,lowerfilt1 mindf=0 mintf=1}26\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{27, 3, 29, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    \n    assertArrayEquals(expectedIds, actualIds);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of df and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=20 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a mindf of 20 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of wl and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=4 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a minwl of 4 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a low enough value of minwl and make sure we get the expected matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=3 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 4 documents with a minwl of 3 but found more\", 4, solrDocuments.size());\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    actualIds = new int[solrDocuments.size()];\n    expectedIds = new int[]{13, 14, 15, 16, 22, 24, 32, 18, 19, 21};\n    i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#test().mjava","sourceNew":null,"sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    String FIELD1 = \"lowerfilt\" ;\n    String FIELD2 = \"lowerfilt1\" ;\n    \n    indexDoc(sdoc(id, \"1\", FIELD1, \"toyota\"));\n    indexDoc(sdoc(id, \"2\", FIELD1, \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", FIELD1, \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", FIELD1, \"ford\"));\n    indexDoc(sdoc(id, \"5\", FIELD1, \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", FIELD1, \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", FIELD1, \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", FIELD1, \"sonata\"));\n    indexDoc(sdoc(id, \"9\", FIELD1, \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", FIELD1, \"blue\"));\n    indexDoc(sdoc(id, \"12\", FIELD1, \"glue\"));\n    indexDoc(sdoc(id, \"13\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", FIELD1, \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", FIELD1, \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", FIELD1, \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", FIELD1, \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", FIELD1, \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", FIELD1, \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", FIELD1, \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", FIELD1, \"bmw 750Li\"));\n    indexDoc(sdoc(id, \"29\", FIELD1, \"bmw usa\",\n        FIELD2, \"red green blue\"));\n    indexDoc(sdoc(id, \"30\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"red green yellow\"));\n    indexDoc(sdoc(id, \"31\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"green blue yellow\"));\n    indexDoc(sdoc(id, \"32\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"yellow white black\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{7, 13, 14, 15, 16, 20, 22, 24, 32, 9};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt boost=true}17\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{7, 13, 14, 15, 16, 20, 22, 24, 32, 9};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=0 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{29, 27, 26, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String[] expectedQueryStrings = new String[]{\n      \"(+(lowerfilt:bmw lowerfilt:usa) -id:3)/no_coord\",\n      \"(+(lowerfilt:usa lowerfilt:bmw) -id:3)/no_coord\"};\n\n    String[] actualParsedQueries;\n    if(queryResponse.getDebugMap().get(\"parsedquery\") instanceof  String) {\n      String parsedQueryString = (String) queryResponse.getDebugMap().get(\"parsedquery\");\n      assertTrue(parsedQueryString.equals(expectedQueryStrings[0]) || parsedQueryString.equals(expectedQueryStrings[1]));\n    } else {\n      actualParsedQueries = ((ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\")).toArray(new String[0]);\n      Arrays.sort(actualParsedQueries);\n      assertArrayEquals(expectedQueryStrings, actualParsedQueries);\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt,lowerfilt1 mindf=0 mintf=1}26\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{27, 3, 29, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    \n    assertArrayEquals(expectedIds, actualIds);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of df and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=20 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a mindf of 20 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of wl and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=4 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a minwl of 4 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a low enough value of minwl and make sure we get the expected matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=3 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 4 documents with a minwl of 3 but found more\", 4, solrDocuments.size());\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    actualIds = new int[solrDocuments.size()];\n    expectedIds = new int[]{13, 14, 15, 16, 22, 24, 32, 18, 19, 21};\n    i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#test().mjava","sourceNew":null,"sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    String FIELD1 = \"lowerfilt\" ;\n    String FIELD2 = \"lowerfilt1\" ;\n    \n    indexDoc(sdoc(id, \"1\", FIELD1, \"toyota\"));\n    indexDoc(sdoc(id, \"2\", FIELD1, \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", FIELD1, \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", FIELD1, \"ford\"));\n    indexDoc(sdoc(id, \"5\", FIELD1, \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", FIELD1, \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", FIELD1, \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", FIELD1, \"sonata\"));\n    indexDoc(sdoc(id, \"9\", FIELD1, \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", FIELD1, \"blue\"));\n    indexDoc(sdoc(id, \"12\", FIELD1, \"glue\"));\n    indexDoc(sdoc(id, \"13\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", FIELD1, \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", FIELD1, \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", FIELD1, \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", FIELD1, \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", FIELD1, \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", FIELD1, \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", FIELD1, \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", FIELD1, \"bmw 750Li\"));\n    indexDoc(sdoc(id, \"29\", FIELD1, \"bmw usa\",\n        FIELD2, \"red green blue\"));\n    indexDoc(sdoc(id, \"30\", FIELD1, \"The quote red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"red green yellow\"));\n    indexDoc(sdoc(id, \"31\", FIELD1, \"The fat red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"green blue yellow\"));\n    indexDoc(sdoc(id, \"32\", FIELD1, \"The slim red fox jumped over the lazy brown dogs.\",\n        FIELD2, \"yellow white black\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{7, 13, 14, 15, 16, 20, 22, 24, 32, 9};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt boost=true}17\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{7, 13, 14, 15, 16, 20, 22, 24, 32, 9};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=0 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{29, 27, 26, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String[] expectedQueryStrings = new String[]{\n      \"(+(lowerfilt:bmw lowerfilt:usa) -id:3)/no_coord\",\n      \"(+(lowerfilt:usa lowerfilt:bmw) -id:3)/no_coord\"};\n\n    String[] actualParsedQueries;\n    if(queryResponse.getDebugMap().get(\"parsedquery\") instanceof  String) {\n      String parsedQueryString = (String) queryResponse.getDebugMap().get(\"parsedquery\");\n      assertTrue(parsedQueryString.equals(expectedQueryStrings[0]) || parsedQueryString.equals(expectedQueryStrings[1]));\n    } else {\n      actualParsedQueries = ((ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\")).toArray(new String[0]);\n      Arrays.sort(actualParsedQueries);\n      assertArrayEquals(expectedQueryStrings, actualParsedQueries);\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt,lowerfilt1 mindf=0 mintf=1}26\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{27, 3, 29, 28};\n    actualIds = new int[solrDocuments.size()];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    \n    assertArrayEquals(expectedIds, actualIds);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of df and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt mindf=20 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a mindf of 20 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a high value of wl and make sure nothing matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=4 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 0 documents with a minwl of 4 but found more\", solrDocuments.size(), 0);\n\n    params = new ModifiableSolrParams();\n    // Test out a low enough value of minwl and make sure we get the expected matches.\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt minwl=3 mintf=1}3\");\n    params.set(CommonParams.DEBUG, \"true\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    assertEquals(\"Expected to match 4 documents with a minwl of 3 but found more\", 4, solrDocuments.size());\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    actualIds = new int[solrDocuments.size()];\n    expectedIds = new int[]{13, 14, 15, 16, 22, 24, 32, 18, 19, 21};\n    i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19d28b1683d6453ee94a9205e2d32206d2dde868":["abb23fcc2461782ab204e61213240feb77d355aa"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ed95a777f3860385e015fb8a082e4b66a5aa6bb8":["655260340014c640e7d0f9a7a7ea1f00f36f65e5"],"2f2da60849d476a5d89377ab401c4d7b30bb1450":["41add67cd1a766b8f699799116bd97da1d052dc1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1","5ebf70dabe6279454c5ff460bdea3f0dc2814a86"],"41add67cd1a766b8f699799116bd97da1d052dc1":["fa3705c34a7293d3c3662f1735625576a24e33d9"],"19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1":["2f2da60849d476a5d89377ab401c4d7b30bb1450"],"fa3705c34a7293d3c3662f1735625576a24e33d9":["ed95a777f3860385e015fb8a082e4b66a5aa6bb8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"776417a20af3930a363a226c989867f65e93ee91":["19d28b1683d6453ee94a9205e2d32206d2dde868"],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1"],"96ff9085dd3a7ec77459ebe4c8d945e5c74168fb":["776417a20af3930a363a226c989867f65e93ee91"],"655260340014c640e7d0f9a7a7ea1f00f36f65e5":["96ff9085dd3a7ec77459ebe4c8d945e5c74168fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"commit2Childs":{"19d28b1683d6453ee94a9205e2d32206d2dde868":["776417a20af3930a363a226c989867f65e93ee91"],"abb23fcc2461782ab204e61213240feb77d355aa":["19d28b1683d6453ee94a9205e2d32206d2dde868"],"ed95a777f3860385e015fb8a082e4b66a5aa6bb8":["fa3705c34a7293d3c3662f1735625576a24e33d9"],"2f2da60849d476a5d89377ab401c4d7b30bb1450":["19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"41add67cd1a766b8f699799116bd97da1d052dc1":["2f2da60849d476a5d89377ab401c4d7b30bb1450"],"19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","5ebf70dabe6279454c5ff460bdea3f0dc2814a86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"fa3705c34a7293d3c3662f1735625576a24e33d9":["41add67cd1a766b8f699799116bd97da1d052dc1"],"776417a20af3930a363a226c989867f65e93ee91":["96ff9085dd3a7ec77459ebe4c8d945e5c74168fb"],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"96ff9085dd3a7ec77459ebe4c8d945e5c74168fb":["655260340014c640e7d0f9a7a7ea1f00f36f65e5"],"655260340014c640e7d0f9a7a7ea1f00f36f65e5":["ed95a777f3860385e015fb8a082e4b66a5aa6bb8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}