{"path":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#init(Map[String,Object]).mjava","commits":[{"id":"12ddd922ea96c1d0ea68a68506b6984a246cfb22","date":1554385731,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#init(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Initialize the plugin from security.json.\n   * This method removes parameters from config object after consuming, so subclasses can check for config errors.\n   * @param pluginConfig the config for the plugin\n   */\n  public void init(Map<String, Object> pluginConfig) {\n    formatter = new JSONAuditEventFormatter();\n    if (pluginConfig.containsKey(PARAM_EVENT_TYPES)) {\n      eventTypes = (List<String>) pluginConfig.get(PARAM_EVENT_TYPES);\n    }\n    pluginConfig.remove(PARAM_EVENT_TYPES);\n    \n    async = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_ASYNC, true)));\n    blockAsync = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_BLOCKASYNC, false)));\n    blockingQueueSize = async ? Integer.parseInt(String.valueOf(pluginConfig.getOrDefault(PARAM_QUEUE_SIZE, DEFAULT_QUEUE_SIZE))) : 1;\n    int numThreads = async ? Integer.parseInt(String.valueOf(pluginConfig.getOrDefault(PARAM_NUM_THREADS, DEFAULT_NUM_THREADS))) : 1;\n    muteRules = new MuteRules(pluginConfig.remove(PARAM_MUTE_RULES));\n    pluginConfig.remove(PARAM_ASYNC);\n    pluginConfig.remove(PARAM_BLOCKASYNC);\n    pluginConfig.remove(PARAM_QUEUE_SIZE);\n    pluginConfig.remove(PARAM_NUM_THREADS);\n    if (async) {\n      queue = new ArrayBlockingQueue<>(blockingQueueSize);\n      executorService = ExecutorUtil.newMDCAwareFixedThreadPool(numThreads, new SolrjNamedThreadFactory(\"audit\"));\n      executorService.submit(this);\n    }\n    pluginConfig.remove(\"class\");\n    log.debug(\"AuditLogger initialized in {} mode with event types {}\", async?\"async\":\"syncronous\", eventTypes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#init(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#init(Map[String,Object]).mjava","sourceNew":"  /**\n   * Initialize the plugin from security.json.\n   * This method removes parameters from config object after consuming, so subclasses can check for config errors.\n   * @param pluginConfig the config for the plugin\n   */\n  public void init(Map<String, Object> pluginConfig) {\n    formatter = new JSONAuditEventFormatter();\n    if (pluginConfig.containsKey(PARAM_EVENT_TYPES)) {\n      eventTypes = (List<String>) pluginConfig.get(PARAM_EVENT_TYPES);\n    }\n    pluginConfig.remove(PARAM_EVENT_TYPES);\n    \n    async = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_ASYNC, true)));\n    blockAsync = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_BLOCKASYNC, false)));\n    blockingQueueSize = async ? Integer.parseInt(String.valueOf(pluginConfig.getOrDefault(PARAM_QUEUE_SIZE, DEFAULT_QUEUE_SIZE))) : 1;\n    int numThreads = async ? Integer.parseInt(String.valueOf(pluginConfig.getOrDefault(PARAM_NUM_THREADS, DEFAULT_NUM_THREADS))) : 1;\n    muteRules = new MuteRules(pluginConfig.remove(PARAM_MUTE_RULES));\n    pluginConfig.remove(PARAM_ASYNC);\n    pluginConfig.remove(PARAM_BLOCKASYNC);\n    pluginConfig.remove(PARAM_QUEUE_SIZE);\n    pluginConfig.remove(PARAM_NUM_THREADS);\n    if (async) {\n      queue = new ArrayBlockingQueue<>(blockingQueueSize);\n      executorService = ExecutorUtil.newMDCAwareFixedThreadPool(numThreads, new SolrNamedThreadFactory(\"audit\"));\n      executorService.submit(this);\n    }\n    pluginConfig.remove(\"class\");\n    log.debug(\"AuditLogger initialized in {} mode with event types {}\", async?\"async\":\"syncronous\", eventTypes);\n  }\n\n","sourceOld":"  /**\n   * Initialize the plugin from security.json.\n   * This method removes parameters from config object after consuming, so subclasses can check for config errors.\n   * @param pluginConfig the config for the plugin\n   */\n  public void init(Map<String, Object> pluginConfig) {\n    formatter = new JSONAuditEventFormatter();\n    if (pluginConfig.containsKey(PARAM_EVENT_TYPES)) {\n      eventTypes = (List<String>) pluginConfig.get(PARAM_EVENT_TYPES);\n    }\n    pluginConfig.remove(PARAM_EVENT_TYPES);\n    \n    async = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_ASYNC, true)));\n    blockAsync = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_BLOCKASYNC, false)));\n    blockingQueueSize = async ? Integer.parseInt(String.valueOf(pluginConfig.getOrDefault(PARAM_QUEUE_SIZE, DEFAULT_QUEUE_SIZE))) : 1;\n    int numThreads = async ? Integer.parseInt(String.valueOf(pluginConfig.getOrDefault(PARAM_NUM_THREADS, DEFAULT_NUM_THREADS))) : 1;\n    muteRules = new MuteRules(pluginConfig.remove(PARAM_MUTE_RULES));\n    pluginConfig.remove(PARAM_ASYNC);\n    pluginConfig.remove(PARAM_BLOCKASYNC);\n    pluginConfig.remove(PARAM_QUEUE_SIZE);\n    pluginConfig.remove(PARAM_NUM_THREADS);\n    if (async) {\n      queue = new ArrayBlockingQueue<>(blockingQueueSize);\n      executorService = ExecutorUtil.newMDCAwareFixedThreadPool(numThreads, new SolrjNamedThreadFactory(\"audit\"));\n      executorService.submit(this);\n    }\n    pluginConfig.remove(\"class\");\n    log.debug(\"AuditLogger initialized in {} mode with event types {}\", async?\"async\":\"syncronous\", eventTypes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#init(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#init(Map[String,Object]).mjava","sourceNew":"  /**\n   * Initialize the plugin from security.json.\n   * This method removes parameters from config object after consuming, so subclasses can check for config errors.\n   * @param pluginConfig the config for the plugin\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public void init(Map<String, Object> pluginConfig) {\n    formatter = new JSONAuditEventFormatter();\n    if (pluginConfig.containsKey(PARAM_EVENT_TYPES)) {\n      eventTypes = (List<String>) pluginConfig.get(PARAM_EVENT_TYPES);\n    }\n    pluginConfig.remove(PARAM_EVENT_TYPES);\n    \n    async = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_ASYNC, true)));\n    blockAsync = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_BLOCKASYNC, false)));\n    blockingQueueSize = async ? Integer.parseInt(String.valueOf(pluginConfig.getOrDefault(PARAM_QUEUE_SIZE, DEFAULT_QUEUE_SIZE))) : 1;\n    int numThreads = async ? Integer.parseInt(String.valueOf(pluginConfig.getOrDefault(PARAM_NUM_THREADS, DEFAULT_NUM_THREADS))) : 1;\n    muteRules = new MuteRules(pluginConfig.remove(PARAM_MUTE_RULES));\n    pluginConfig.remove(PARAM_ASYNC);\n    pluginConfig.remove(PARAM_BLOCKASYNC);\n    pluginConfig.remove(PARAM_QUEUE_SIZE);\n    pluginConfig.remove(PARAM_NUM_THREADS);\n    if (async) {\n      queue = new ArrayBlockingQueue<>(blockingQueueSize);\n      executorService = ExecutorUtil.newMDCAwareFixedThreadPool(numThreads, new SolrNamedThreadFactory(\"audit\"));\n      executorService.submit(this);\n    }\n    pluginConfig.remove(\"class\");\n    log.debug(\"AuditLogger initialized in {} mode with event types {}\", async?\"async\":\"syncronous\", eventTypes);\n  }\n\n","sourceOld":"  /**\n   * Initialize the plugin from security.json.\n   * This method removes parameters from config object after consuming, so subclasses can check for config errors.\n   * @param pluginConfig the config for the plugin\n   */\n  public void init(Map<String, Object> pluginConfig) {\n    formatter = new JSONAuditEventFormatter();\n    if (pluginConfig.containsKey(PARAM_EVENT_TYPES)) {\n      eventTypes = (List<String>) pluginConfig.get(PARAM_EVENT_TYPES);\n    }\n    pluginConfig.remove(PARAM_EVENT_TYPES);\n    \n    async = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_ASYNC, true)));\n    blockAsync = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_BLOCKASYNC, false)));\n    blockingQueueSize = async ? Integer.parseInt(String.valueOf(pluginConfig.getOrDefault(PARAM_QUEUE_SIZE, DEFAULT_QUEUE_SIZE))) : 1;\n    int numThreads = async ? Integer.parseInt(String.valueOf(pluginConfig.getOrDefault(PARAM_NUM_THREADS, DEFAULT_NUM_THREADS))) : 1;\n    muteRules = new MuteRules(pluginConfig.remove(PARAM_MUTE_RULES));\n    pluginConfig.remove(PARAM_ASYNC);\n    pluginConfig.remove(PARAM_BLOCKASYNC);\n    pluginConfig.remove(PARAM_QUEUE_SIZE);\n    pluginConfig.remove(PARAM_NUM_THREADS);\n    if (async) {\n      queue = new ArrayBlockingQueue<>(blockingQueueSize);\n      executorService = ExecutorUtil.newMDCAwareFixedThreadPool(numThreads, new SolrNamedThreadFactory(\"audit\"));\n      executorService.submit(this);\n    }\n    pluginConfig.remove(\"class\");\n    log.debug(\"AuditLogger initialized in {} mode with event types {}\", async?\"async\":\"syncronous\", eventTypes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}