{"path":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest.ExtendedCommonTermsQuery#newTermQuery(Term,TermContext).mjava","commits":[{"id":"58b6341c01680bddb99b9aa4697c800f1b1f3c02","date":1393514086,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest.ExtendedCommonTermsQuery#newTermQuery(Term,TermContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected Query newTermQuery(Term term, TermContext context) {\n      Query query = super.newTermQuery(term, context);\n      if (term.text().equals(\"universe\")) {\n        query.setBoost(100f);\n      }\n      return query;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest.ExtendedCommonTermsQuery#newTermQuery(Term,TermContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected Query newTermQuery(Term term, TermContext context) {\n      Query query = super.newTermQuery(term, context);\n      if (term.text().equals(\"universe\")) {\n        query.setBoost(100f);\n      }\n      return query;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest.ExtendedCommonTermsQuery#newTermQuery(Term,TermContext).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest.ExtendedCommonTermsQuery#newTermQuery(Term,TermContext).mjava","sourceNew":"    @Override\n    protected Query newTermQuery(Term term, TermContext context) {\n      Query query = super.newTermQuery(term, context);\n      if (term.text().equals(\"universe\")) {\n        query = new BoostQuery(query, 100f);\n      }\n      return query;\n    }\n\n","sourceOld":"    @Override\n    protected Query newTermQuery(Term term, TermContext context) {\n      Query query = super.newTermQuery(term, context);\n      if (term.text().equals(\"universe\")) {\n        query.setBoost(100f);\n      }\n      return query;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest.ExtendedCommonTermsQuery#newTermQuery(Term,TermStates).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest.ExtendedCommonTermsQuery#newTermQuery(Term,TermContext).mjava","sourceNew":"    @Override\n    protected Query newTermQuery(Term term, TermStates termStates) {\n      Query query = super.newTermQuery(term, termStates);\n      if (term.text().equals(\"universe\")) {\n        query = new BoostQuery(query, 100f);\n      }\n      return query;\n    }\n\n","sourceOld":"    @Override\n    protected Query newTermQuery(Term term, TermContext context) {\n      Query query = super.newTermQuery(term, context);\n      if (term.text().equals(\"universe\")) {\n        query = new BoostQuery(query, 100f);\n      }\n      return query;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest.ExtendedCommonTermsQuery#newTermQuery(Term,TermContext).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected Query newTermQuery(Term term, TermContext context) {\n      Query query = super.newTermQuery(term, context);\n      if (term.text().equals(\"universe\")) {\n        query = new BoostQuery(query, 100f);\n      }\n      return query;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["2dfdf766e55e943d942055d7de53c7ad6bc45283","a6e9f769521480a623f897c0d59089b919fa4239"],"58b6341c01680bddb99b9aa4697c800f1b1f3c02":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a6e9f769521480a623f897c0d59089b919fa4239":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["58b6341c01680bddb99b9aa4697c800f1b1f3c02"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58b6341c01680bddb99b9aa4697c800f1b1f3c02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"58b6341c01680bddb99b9aa4697c800f1b1f3c02":["2dfdf766e55e943d942055d7de53c7ad6bc45283","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58b6341c01680bddb99b9aa4697c800f1b1f3c02","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}