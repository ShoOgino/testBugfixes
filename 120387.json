{"path":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#createRandomIndex(int,RandomIndexWriter,long).mjava","commits":[{"id":"a194d3ac4639a7909ea614667b9a7632a6aa14d1","date":1355475351,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#createRandomIndex(int,RandomIndexWriter,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * populates a writer with random stuff. this must be fully reproducable with\n   * the seed!\n   */\n  public static void createRandomIndex(int numdocs, RandomIndexWriter writer,\n      long seed) throws IOException {\n    Random random = new Random(seed);\n    // primary source for our data is from linefiledocs, its realistic.\n    LineFileDocs lineFileDocs = new LineFileDocs(random);\n    \n    // TODO: we should add other fields that use things like docs&freqs but omit\n    // positions,\n    // because linefiledocs doesn't cover all the possibilities.\n    for (int i = 0; i < numdocs; i++) {\n      writer.addDocument(lineFileDocs.nextDoc());\n    }\n    \n    lineFileDocs.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#createRandomIndex(int,RandomIndexWriter,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * populates a writer with random stuff. this must be fully reproducable with\n   * the seed!\n   */\n  public static void createRandomIndex(int numdocs, RandomIndexWriter writer,\n      long seed) throws IOException {\n    Random random = new Random(seed);\n    // primary source for our data is from linefiledocs, its realistic.\n    LineFileDocs lineFileDocs = new LineFileDocs(random);\n    \n    // TODO: we should add other fields that use things like docs&freqs but omit\n    // positions,\n    // because linefiledocs doesn't cover all the possibilities.\n    for (int i = 0; i < numdocs; i++) {\n      writer.addDocument(lineFileDocs.nextDoc());\n    }\n    \n    lineFileDocs.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#createRandomIndex(int,RandomIndexWriter,long).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#createRandomIndex(int,RandomIndexWriter,long).mjava","sourceNew":"  /**\n   * populates a writer with random stuff. this must be fully reproducable with\n   * the seed!\n   */\n  public static void createRandomIndex(int numdocs, RandomIndexWriter writer,\n      long seed) throws IOException {\n    Random random = new Random(seed);\n    // primary source for our data is from linefiledocs, it's realistic.\n    LineFileDocs lineFileDocs = new LineFileDocs(random);\n    \n    // TODO: we should add other fields that use things like docs&freqs but omit\n    // positions,\n    // because linefiledocs doesn't cover all the possibilities.\n    for (int i = 0; i < numdocs; i++) {\n      writer.addDocument(lineFileDocs.nextDoc());\n    }\n    \n    lineFileDocs.close();\n  }\n\n","sourceOld":"  /**\n   * populates a writer with random stuff. this must be fully reproducable with\n   * the seed!\n   */\n  public static void createRandomIndex(int numdocs, RandomIndexWriter writer,\n      long seed) throws IOException {\n    Random random = new Random(seed);\n    // primary source for our data is from linefiledocs, its realistic.\n    LineFileDocs lineFileDocs = new LineFileDocs(random);\n    \n    // TODO: we should add other fields that use things like docs&freqs but omit\n    // positions,\n    // because linefiledocs doesn't cover all the possibilities.\n    for (int i = 0; i < numdocs; i++) {\n      writer.addDocument(lineFileDocs.nextDoc());\n    }\n    \n    lineFileDocs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a194d3ac4639a7909ea614667b9a7632a6aa14d1"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["a194d3ac4639a7909ea614667b9a7632a6aa14d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a194d3ac4639a7909ea614667b9a7632a6aa14d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a194d3ac4639a7909ea614667b9a7632a6aa14d1"],"a194d3ac4639a7909ea614667b9a7632a6aa14d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}