{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeMerge().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeMerge().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#maybeMerge().mjava","sourceNew":"  /**\n   * Expert: asks the mergePolicy whether any merges are\n   * necessary now and if so, runs the requested merges and\n   * then iterate (test again if merges are needed) until no\n   * more merges are returned by the mergePolicy.\n   *\n   * Explicit calls to maybeMerge() are usually not\n   * necessary. The most common case is when merge policy\n   * parameters have changed.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public final void maybeMerge() throws CorruptIndexException, IOException {\n    maybeMerge(-1);\n  }\n\n","sourceOld":"  /**\n   * Expert: asks the mergePolicy whether any merges are\n   * necessary now and if so, runs the requested merges and\n   * then iterate (test again if merges are needed) until no\n   * more merges are returned by the mergePolicy.\n   *\n   * Explicit calls to maybeMerge() are usually not\n   * necessary. The most common case is when merge policy\n   * parameters have changed.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public final void maybeMerge() throws CorruptIndexException, IOException {\n    maybeMerge(-1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeMerge().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeMerge().mjava","sourceNew":"  /**\n   * Expert: asks the mergePolicy whether any merges are\n   * necessary now and if so, runs the requested merges and\n   * then iterate (test again if merges are needed) until no\n   * more merges are returned by the mergePolicy.\n   *\n   * Explicit calls to maybeMerge() are usually not\n   * necessary. The most common case is when merge policy\n   * parameters have changed.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public final void maybeMerge() throws IOException {\n    maybeMerge(-1);\n  }\n\n","sourceOld":"  /**\n   * Expert: asks the mergePolicy whether any merges are\n   * necessary now and if so, runs the requested merges and\n   * then iterate (test again if merges are needed) until no\n   * more merges are returned by the mergePolicy.\n   *\n   * Explicit calls to maybeMerge() are usually not\n   * necessary. The most common case is when merge policy\n   * parameters have changed.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public final void maybeMerge() throws CorruptIndexException, IOException {\n    maybeMerge(-1);\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeMerge().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeMerge().mjava","sourceNew":"  /**\n   * Expert: asks the mergePolicy whether any merges are\n   * necessary now and if so, runs the requested merges and\n   * then iterate (test again if merges are needed) until no\n   * more merges are returned by the mergePolicy.\n   *\n   * Explicit calls to maybeMerge() are usually not\n   * necessary. The most common case is when merge policy\n   * parameters have changed.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public final void maybeMerge() throws IOException {\n    maybeMerge(-1);\n  }\n\n","sourceOld":"  /**\n   * Expert: asks the mergePolicy whether any merges are\n   * necessary now and if so, runs the requested merges and\n   * then iterate (test again if merges are needed) until no\n   * more merges are returned by the mergePolicy.\n   *\n   * Explicit calls to maybeMerge() are usually not\n   * necessary. The most common case is when merge policy\n   * parameters have changed.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public final void maybeMerge() throws CorruptIndexException, IOException {\n    maybeMerge(-1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"181b1aa5a99534972fbfd5595cdbb38bba5f39ee","date":1350576187,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeMerge().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeMerge().mjava","sourceNew":"  /**\n   * Expert: asks the mergePolicy whether any merges are\n   * necessary now and if so, runs the requested merges and\n   * then iterate (test again if merges are needed) until no\n   * more merges are returned by the mergePolicy.\n   *\n   * Explicit calls to maybeMerge() are usually not\n   * necessary. The most common case is when merge policy\n   * parameters have changed.\n   * \n   * This method will call the {@link MergePolicy} with\n   * {@link MergeTrigger#EXPLICIT}.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public final void maybeMerge() throws IOException {\n    maybeMerge(MergeTrigger.EXPLICIT, UNBOUNDED_MAX_MERGE_SEGMENTS);\n  }\n\n","sourceOld":"  /**\n   * Expert: asks the mergePolicy whether any merges are\n   * necessary now and if so, runs the requested merges and\n   * then iterate (test again if merges are needed) until no\n   * more merges are returned by the mergePolicy.\n   *\n   * Explicit calls to maybeMerge() are usually not\n   * necessary. The most common case is when merge policy\n   * parameters have changed.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public final void maybeMerge() throws IOException {\n    maybeMerge(-1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeMerge().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeMerge().mjava","sourceNew":"  /**\n   * Expert: asks the mergePolicy whether any merges are\n   * necessary now and if so, runs the requested merges and\n   * then iterate (test again if merges are needed) until no\n   * more merges are returned by the mergePolicy.\n   *\n   * Explicit calls to maybeMerge() are usually not\n   * necessary. The most common case is when merge policy\n   * parameters have changed.\n   * \n   * This method will call the {@link MergePolicy} with\n   * {@link MergeTrigger#EXPLICIT}.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public final void maybeMerge() throws IOException {\n    maybeMerge(MergeTrigger.EXPLICIT, UNBOUNDED_MAX_MERGE_SEGMENTS);\n  }\n\n","sourceOld":"  /**\n   * Expert: asks the mergePolicy whether any merges are\n   * necessary now and if so, runs the requested merges and\n   * then iterate (test again if merges are needed) until no\n   * more merges are returned by the mergePolicy.\n   *\n   * Explicit calls to maybeMerge() are usually not\n   * necessary. The most common case is when merge policy\n   * parameters have changed.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public final void maybeMerge() throws IOException {\n    maybeMerge(-1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee59f646cf24586a449cad77391a60a3ac8d8959","date":1408015131,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeMerge().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeMerge().mjava","sourceNew":"  /**\n   * Expert: asks the mergePolicy whether any merges are\n   * necessary now and if so, runs the requested merges and\n   * then iterate (test again if merges are needed) until no\n   * more merges are returned by the mergePolicy.\n   *\n   * Explicit calls to maybeMerge() are usually not\n   * necessary. The most common case is when merge policy\n   * parameters have changed.\n   * \n   * This method will call the {@link MergePolicy} with\n   * {@link MergeTrigger#EXPLICIT}.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public final void maybeMerge() throws IOException {\n    maybeMerge(config.getMergePolicy(), MergeTrigger.EXPLICIT, UNBOUNDED_MAX_MERGE_SEGMENTS);\n  }\n\n","sourceOld":"  /**\n   * Expert: asks the mergePolicy whether any merges are\n   * necessary now and if so, runs the requested merges and\n   * then iterate (test again if merges are needed) until no\n   * more merges are returned by the mergePolicy.\n   *\n   * Explicit calls to maybeMerge() are usually not\n   * necessary. The most common case is when merge policy\n   * parameters have changed.\n   * \n   * This method will call the {@link MergePolicy} with\n   * {@link MergeTrigger#EXPLICIT}.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public final void maybeMerge() throws IOException {\n    maybeMerge(MergeTrigger.EXPLICIT, UNBOUNDED_MAX_MERGE_SEGMENTS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"949847c0040cd70a68222d526cb0da7bf6cbb3c2","date":1410997182,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeMerge().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeMerge().mjava","sourceNew":"  /**\n   * Expert: asks the mergePolicy whether any merges are\n   * necessary now and if so, runs the requested merges and\n   * then iterate (test again if merges are needed) until no\n   * more merges are returned by the mergePolicy.\n   *\n   * Explicit calls to maybeMerge() are usually not\n   * necessary. The most common case is when merge policy\n   * parameters have changed.\n   * \n   * This method will call the {@link MergePolicy} with\n   * {@link MergeTrigger#EXPLICIT}.\n   */\n  public final void maybeMerge() throws IOException {\n    maybeMerge(config.getMergePolicy(), MergeTrigger.EXPLICIT, UNBOUNDED_MAX_MERGE_SEGMENTS);\n  }\n\n","sourceOld":"  /**\n   * Expert: asks the mergePolicy whether any merges are\n   * necessary now and if so, runs the requested merges and\n   * then iterate (test again if merges are needed) until no\n   * more merges are returned by the mergePolicy.\n   *\n   * Explicit calls to maybeMerge() are usually not\n   * necessary. The most common case is when merge policy\n   * parameters have changed.\n   * \n   * This method will call the {@link MergePolicy} with\n   * {@link MergeTrigger#EXPLICIT}.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public final void maybeMerge() throws IOException {\n    maybeMerge(config.getMergePolicy(), MergeTrigger.EXPLICIT, UNBOUNDED_MAX_MERGE_SEGMENTS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"62e52115b56781006682fd92c6938efaf174304d":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"ee59f646cf24586a449cad77391a60a3ac8d8959":["181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"181b1aa5a99534972fbfd5595cdbb38bba5f39ee":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"949847c0040cd70a68222d526cb0da7bf6cbb3c2":["ee59f646cf24586a449cad77391a60a3ac8d8959"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["949847c0040cd70a68222d526cb0da7bf6cbb3c2"]},"commit2Childs":{"62e52115b56781006682fd92c6938efaf174304d":[],"ee59f646cf24586a449cad77391a60a3ac8d8959":["949847c0040cd70a68222d526cb0da7bf6cbb3c2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"181b1aa5a99534972fbfd5595cdbb38bba5f39ee":["62e52115b56781006682fd92c6938efaf174304d","ee59f646cf24586a449cad77391a60a3ac8d8959"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["62e52115b56781006682fd92c6938efaf174304d","fe33227f6805edab2036cbb80645cc4e2d1fa424","181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"949847c0040cd70a68222d526cb0da7bf6cbb3c2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e52115b56781006682fd92c6938efaf174304d","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}