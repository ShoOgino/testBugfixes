{"path":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testDanish().mjava","commits":[{"id":"7cf50d425f7279e262a8d6be16253e72b8d898c2","date":1226483019,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testDanish().mjava","pathOld":"/dev/null","sourceNew":"  public void testDanish() throws Exception {\n\n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(danishIndex, new SimpleAnalyzer(), T,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], \n                        Field.Store.YES, Field.Index.UN_TOKENIZED));\n      doc.add(new Field(\"body\", \"body\",\n                        Field.Store.YES, Field.Index.UN_TOKENIZED));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(danishIndex);\n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    Collator c = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    ScoreDoc[] result = search.search\n      (csrq(\"content\", \"H\\u00D8T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    result = search.search\n      (csrq(\"content\", \"H\\u00C5T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n    search.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testDanish().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testDanish().mjava","sourceNew":"  public void testDanish() throws Exception {\n\n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(danishIndex, new SimpleAnalyzer(), T,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], \n                        Field.Store.YES, Field.Index.UN_TOKENIZED));\n      doc.add(new Field(\"body\", \"body\",\n                        Field.Store.YES, Field.Index.UN_TOKENIZED));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(danishIndex);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    Collator c = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    ScoreDoc[] result = search.search\n      (csrq(\"content\", \"H\\u00D8T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    result = search.search\n      (csrq(\"content\", \"H\\u00C5T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testDanish() throws Exception {\n\n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(danishIndex, new SimpleAnalyzer(), T,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], \n                        Field.Store.YES, Field.Index.UN_TOKENIZED));\n      doc.add(new Field(\"body\", \"body\",\n                        Field.Store.YES, Field.Index.UN_TOKENIZED));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(danishIndex);\n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    Collator c = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    ScoreDoc[] result = search.search\n      (csrq(\"content\", \"H\\u00D8T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    result = search.search\n      (csrq(\"content\", \"H\\u00C5T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testDanish().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testDanish().mjava","sourceNew":"  public void testDanish() throws Exception {\n\n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(danishIndex, new SimpleAnalyzer(), T,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], \n                        Field.Store.YES, Field.Index.UN_TOKENIZED));\n      doc.add(new Field(\"body\", \"body\",\n                        Field.Store.YES, Field.Index.UN_TOKENIZED));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(danishIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    Collator c = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    ScoreDoc[] result = search.search\n      (csrq(\"content\", \"H\\u00D8T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    result = search.search\n      (csrq(\"content\", \"H\\u00C5T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testDanish() throws Exception {\n\n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(danishIndex, new SimpleAnalyzer(), T,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], \n                        Field.Store.YES, Field.Index.UN_TOKENIZED));\n      doc.add(new Field(\"body\", \"body\",\n                        Field.Store.YES, Field.Index.UN_TOKENIZED));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(danishIndex);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    Collator c = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    ScoreDoc[] result = search.search\n      (csrq(\"content\", \"H\\u00D8T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    result = search.search\n      (csrq(\"content\", \"H\\u00C5T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testDanish().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testDanish().mjava","sourceNew":"  public void testDanish() throws Exception {\n\n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(danishIndex, new SimpleAnalyzer(), T,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], \n                        Field.Store.YES, Field.Index.UN_TOKENIZED));\n      doc.add(new Field(\"body\", \"body\",\n                        Field.Store.YES, Field.Index.UN_TOKENIZED));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(danishIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    Collator c = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    ScoreDoc[] result = search.search\n      (csrq(\"content\", \"H\\u00D8T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    result = search.search\n      (csrq(\"content\", \"H\\u00C5T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testDanish() throws Exception {\n\n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(danishIndex, new SimpleAnalyzer(), T,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], \n                        Field.Store.YES, Field.Index.UN_TOKENIZED));\n      doc.add(new Field(\"body\", \"body\",\n                        Field.Store.YES, Field.Index.UN_TOKENIZED));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(danishIndex);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    Collator c = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    ScoreDoc[] result = search.search\n      (csrq(\"content\", \"H\\u00D8T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    result = search.search\n      (csrq(\"content\", \"H\\u00C5T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f44f07aa147c21735d6c43bafa4fde560d0362e1","date":1255024926,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testDanish().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testDanish().mjava","sourceNew":"  public void testDanish() throws Exception {\n\n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(danishIndex, new SimpleAnalyzer(), T,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], \n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\",\n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(danishIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    Collator c = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    ScoreDoc[] result = search.search\n      (csrq(\"content\", \"H\\u00D8T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    result = search.search\n      (csrq(\"content\", \"H\\u00C5T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testDanish() throws Exception {\n\n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(danishIndex, new SimpleAnalyzer(), T,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], \n                        Field.Store.YES, Field.Index.UN_TOKENIZED));\n      doc.add(new Field(\"body\", \"body\",\n                        Field.Store.YES, Field.Index.UN_TOKENIZED));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(danishIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    Collator c = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    ScoreDoc[] result = search.search\n      (csrq(\"content\", \"H\\u00D8T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    result = search.search\n      (csrq(\"content\", \"H\\u00C5T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testDanish().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testDanish().mjava","sourceNew":"  public void testDanish() throws Exception {\n\n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(danishIndex, new SimpleAnalyzer(Version.LUCENE_CURRENT), T,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], \n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\",\n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(danishIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    Collator c = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    ScoreDoc[] result = search.search\n      (csrq(\"content\", \"H\\u00D8T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    result = search.search\n      (csrq(\"content\", \"H\\u00C5T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testDanish() throws Exception {\n\n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(danishIndex, new SimpleAnalyzer(), T,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], \n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\",\n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(danishIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    Collator c = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    ScoreDoc[] result = search.search\n      (csrq(\"content\", \"H\\u00D8T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    result = search.search\n      (csrq(\"content\", \"H\\u00C5T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testDanish().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testDanish().mjava","sourceNew":"  public void testDanish() throws Exception {\n\n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(danishIndex, new SimpleAnalyzer(TEST_VERSION_CURRENT), T,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], \n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\",\n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(danishIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    Collator c = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    ScoreDoc[] result = search.search\n      (csrq(\"content\", \"H\\u00D8T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    result = search.search\n      (csrq(\"content\", \"H\\u00C5T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testDanish() throws Exception {\n\n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(danishIndex, new SimpleAnalyzer(Version.LUCENE_CURRENT), T,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], \n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\",\n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(danishIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    Collator c = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    ScoreDoc[] result = search.search\n      (csrq(\"content\", \"H\\u00D8T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    result = search.search\n      (csrq(\"content\", \"H\\u00C5T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testDanish().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testDanish().mjava","sourceNew":"  public void testDanish() throws Exception {\n\n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(danishIndex, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], \n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\",\n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(danishIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    Collator c = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    ScoreDoc[] result = search.search\n      (csrq(\"content\", \"H\\u00D8T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    result = search.search\n      (csrq(\"content\", \"H\\u00C5T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testDanish() throws Exception {\n\n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(danishIndex, new SimpleAnalyzer(TEST_VERSION_CURRENT), T,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], \n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\",\n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(danishIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    Collator c = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    ScoreDoc[] result = search.search\n      (csrq(\"content\", \"H\\u00D8T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    result = search.search\n      (csrq(\"content\", \"H\\u00C5T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testDanish().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testDanish().mjava","sourceNew":"  public void testDanish() throws Exception {\n\n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(danishIndex, new SimpleAnalyzer(TEST_VERSION_CURRENT), T,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], \n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\",\n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(danishIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    Collator c = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    ScoreDoc[] result = search.search\n      (csrq(\"content\", \"H\\u00D8T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    result = search.search\n      (csrq(\"content\", \"H\\u00C5T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testDanish() throws Exception {\n\n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(danishIndex, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], \n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\",\n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(danishIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    Collator c = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    ScoreDoc[] result = search.search\n      (csrq(\"content\", \"H\\u00D8T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    result = search.search\n      (csrq(\"content\", \"H\\u00C5T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testDanish().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testDanish().mjava","sourceNew":"  public void testDanish() throws Exception {\n\n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(danishIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], \n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\",\n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(danishIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    Collator c = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    ScoreDoc[] result = search.search\n      (csrq(\"content\", \"H\\u00D8T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    result = search.search\n      (csrq(\"content\", \"H\\u00C5T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testDanish() throws Exception {\n\n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(danishIndex, new SimpleAnalyzer(TEST_VERSION_CURRENT), T,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], \n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\",\n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(danishIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    Collator c = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    ScoreDoc[] result = search.search\n      (csrq(\"content\", \"H\\u00D8T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    result = search.search\n      (csrq(\"content\", \"H\\u00C5T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testDanish().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testDanish().mjava","sourceNew":"  public void testDanish() throws Exception {\n\n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(danishIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], \n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\",\n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(danishIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    Collator c = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    ScoreDoc[] result = search.search\n      (csrq(\"content\", \"H\\u00D8T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    result = search.search\n      (csrq(\"content\", \"H\\u00C5T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testDanish() throws Exception {\n\n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(danishIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], \n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\",\n                        Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(danishIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    Collator c = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    ScoreDoc[] result = search.search\n      (csrq(\"content\", \"H\\u00D8T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    result = search.search\n      (csrq(\"content\", \"H\\u00C5T\", \"MAND\", F, F, c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f44f07aa147c21735d6c43bafa4fde560d0362e1":["0a046c0c310bc77931fc8441bd920053b607dd14"],"7cf50d425f7279e262a8d6be16253e72b8d898c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["63bc3238545c6012bd44f5d294077997f236bc4e","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"63bc3238545c6012bd44f5d294077997f236bc4e":["7cf50d425f7279e262a8d6be16253e72b8d898c2"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["63bc3238545c6012bd44f5d294077997f236bc4e"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["f44f07aa147c21735d6c43bafa4fde560d0362e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"f44f07aa147c21735d6c43bafa4fde560d0362e1":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"7cf50d425f7279e262a8d6be16253e72b8d898c2":["63bc3238545c6012bd44f5d294077997f236bc4e"],"0a046c0c310bc77931fc8441bd920053b607dd14":["f44f07aa147c21735d6c43bafa4fde560d0362e1"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"63bc3238545c6012bd44f5d294077997f236bc4e":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7cf50d425f7279e262a8d6be16253e72b8d898c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}