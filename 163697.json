{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndex.MemoryDocFieldsIndexReader#MemoryDocFieldsIndexReader(IndexInput,SegmentInfo).mjava","commits":[{"id":"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa","date":1349450075,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndex.MemoryDocFieldsIndexReader#MemoryDocFieldsIndexReader(IndexInput,SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"    MemoryDocFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n      super(fieldsIndexIn);\n      final int numChunks = fieldsIndexIn.readVInt();\n      final int bitsPerStartPointer = fieldsIndexIn.readByte() & 0xFF;\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n\n      final PackedInts.Reader chunkDocs = PackedInts.getReader(fieldsIndexIn);\n      if (chunkDocs.size() != numChunks) {\n        throw new CorruptIndexException(\"Expected \" + numChunks + \" chunks, but got \" + chunkDocs.size());\n      }\n\n      final PackedInts.ReaderIterator startPointerDeltas = PackedInts.getReaderIterator(fieldsIndexIn, PackedInts.DEFAULT_BUFFER_SIZE);\n      if (startPointerDeltas.size() != numChunks) {\n        throw new CorruptIndexException(\"Expected \" + numChunks + \" chunks, but got \" + startPointerDeltas.size());\n      }\n      final PackedInts.Mutable startPointers = PackedInts.getMutable(si.getDocCount(), bitsPerStartPointer, PackedInts.COMPACT);\n      int docID = 0;\n      long startPointer = 0;\n      for (int i = 0; i < numChunks; ++i) {\n        startPointer += startPointerDeltas.next();\n        final int chunkDocCount = (int) chunkDocs.get(i);\n        for (int j = 0; j < chunkDocCount; ++j) {\n          startPointers.set(docID++, startPointer);\n        }\n      }\n      if (docID != si.getDocCount()) {\n        throw new CorruptIndexException(\"Expected \" + si.getDocCount() + \" docs, got \" + docID);\n      }\n\n      this.startPointers = startPointers;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccd8ff5675189c84a504cdee7da185e2c3ca3164","date":1351698863,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndex.MemoryDocFieldsIndexReader#MemoryDocFieldsIndexReader(IndexInput,SegmentInfo).mjava","sourceNew":null,"sourceOld":"    MemoryDocFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n      super(fieldsIndexIn);\n      final int numChunks = fieldsIndexIn.readVInt();\n      final int bitsPerStartPointer = fieldsIndexIn.readByte() & 0xFF;\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n\n      final PackedInts.Reader chunkDocs = PackedInts.getReader(fieldsIndexIn);\n      if (chunkDocs.size() != numChunks) {\n        throw new CorruptIndexException(\"Expected \" + numChunks + \" chunks, but got \" + chunkDocs.size());\n      }\n\n      final PackedInts.ReaderIterator startPointerDeltas = PackedInts.getReaderIterator(fieldsIndexIn, PackedInts.DEFAULT_BUFFER_SIZE);\n      if (startPointerDeltas.size() != numChunks) {\n        throw new CorruptIndexException(\"Expected \" + numChunks + \" chunks, but got \" + startPointerDeltas.size());\n      }\n      final PackedInts.Mutable startPointers = PackedInts.getMutable(si.getDocCount(), bitsPerStartPointer, PackedInts.COMPACT);\n      int docID = 0;\n      long startPointer = 0;\n      for (int i = 0; i < numChunks; ++i) {\n        startPointer += startPointerDeltas.next();\n        final int chunkDocCount = (int) chunkDocs.get(i);\n        for (int j = 0; j < chunkDocCount; ++j) {\n          startPointers.set(docID++, startPointer);\n        }\n      }\n      if (docID != si.getDocCount()) {\n        throw new CorruptIndexException(\"Expected \" + si.getDocCount() + \" docs, got \" + docID);\n      }\n\n      this.startPointers = startPointers;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ccd8ff5675189c84a504cdee7da185e2c3ca3164":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ccd8ff5675189c84a504cdee7da185e2c3ca3164"]},"commit2Childs":{"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["ccd8ff5675189c84a504cdee7da185e2c3ca3164"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"ccd8ff5675189c84a504cdee7da185e2c3ca3164":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}