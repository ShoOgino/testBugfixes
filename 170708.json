{"path":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(7));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(7));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(7);\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(7));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(7);\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(7);\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(7);\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(7);\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(7);\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(7);\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(7);\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(7);\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(7);\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(7);\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(7);\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(7);\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(7);\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(7);\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(7);\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(7);\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), StringField.TYPE_STORED));\n      d.add(newField(\"contents\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), StringField.TYPE_STORED));\n      d.add(newField(\"contents\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), StringField.TYPE_STORED));\n      d.add(newField(\"contents\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), StringField.TYPE_STORED));\n      d.add(newField(\"contents\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), StringField.TYPE_STORED));\n      d.add(newField(\"contents\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), StringField.TYPE_STORED));\n      d.add(newField(\"contents\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), StringField.TYPE_STORED));\n      d.add(newField(\"contents\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), StringField.TYPE_STORED));\n      d.add(newField(\"contents\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), StringField.TYPE_STORED));\n      d.add(newField(\"contents\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), StringField.TYPE_STORED));\n      d.add(newField(\"contents\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), StringField.TYPE_STORED));\n      d.add(newField(\"contents\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["06584e6e98d592b34e1329b384182f368d2025e8","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["06584e6e98d592b34e1329b384182f368d2025e8"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["d572389229127c297dd1fa5ce4758e1cec41e799"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","132903c28af3aa6f67284b78de91c0f0a99488c2"],"c19f985e36a65cc969e8e564fe337a0d41512075":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["c19f985e36a65cc969e8e564fe337a0d41512075"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["132903c28af3aa6f67284b78de91c0f0a99488c2","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["06584e6e98d592b34e1329b384182f368d2025e8","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"06584e6e98d592b34e1329b384182f368d2025e8":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["132903c28af3aa6f67284b78de91c0f0a99488c2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","29ef99d61cda9641b6250bf9567329a6e65f901d"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["01e5948db9a07144112d2f08f28ca2e3cd880348","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}