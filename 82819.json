{"path":"solr/core/src/test/org/apache/solr/core/TestSolrDiscoveryProperties#testPropertiesFile().mjava","commits":[{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrDiscoveryProperties#testPropertiesFile().mjava","pathOld":"/dev/null","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but no solr.xml (a solr.properties\n  // instead) and insure that we find all the cores and can load them.\n  @Test\n  public void testPropertiesFile() throws Exception {\n    setMeUp();\n    addSolrPropertiesFile();\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(makeCorePropFile(\"core2\", false, false));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(makeCorePropFile(\"lazy1\", true, false));\n\n    CoreContainer cc = init();\n    try {\n      Properties props = cc.containerProperties;\n\n      assertEquals(\"/admin/cores/props\", props.getProperty(\"cores.adminPath\"));\n      assertEquals(\"/admin/cores/props\", cc.getAdminPath());\n      assertEquals(\"defcore\", props.getProperty(\"cores.defaultCoreName\"));\n      assertEquals(\"defcore\", cc.getDefaultCoreName());\n      assertEquals(\"222.333.444.555\", props.getProperty(\"host\"));\n      assertEquals(\"6000\", props.getProperty(\"port\")); // getProperty actually looks at original props.\n      assertEquals(\"/solrprop\", props.getProperty(\"cores.hostContext\"));\n      assertEquals(\"20\", props.getProperty(\"cores.zkClientTimeout\"));\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ca7b346301e4b516701df57860db765f0cc5cc9","date":1363273911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrDiscoveryProperties#testPropertiesFile().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrDiscoveryProperties#testPropertiesFile().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but no solr.xml (a solr.properties\n  // instead) and insure that we find all the cores and can load them.\n  @Test\n  public void testPropertiesFile() throws Exception {\n    setMeUp();\n    addSolrPropertiesFile();\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(makeCorePropFile(\"core2\", false, false));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(makeCorePropFile(\"lazy1\", true, false));\n\n    CoreContainer cc = init();\n    try {\n      Properties props = cc.containerProperties;\n\n      assertEquals(\"/admin/cores/props\", props.getProperty(\"cores.adminPath\"));\n      assertEquals(\"/admin/cores/props\", cc.getAdminPath());\n      assertEquals(\"defcore\", props.getProperty(\"cores.defaultCoreName\"));\n      assertEquals(\"defcore\", cc.getDefaultCoreName());\n      assertEquals(\"222.333.444.555\", props.getProperty(\"host\"));\n      assertEquals(\"6000\", props.getProperty(\"port\")); // getProperty actually looks at original props.\n      assertEquals(\"/solrprop\", props.getProperty(\"cores.hostContext\"));\n      assertEquals(\"20\", props.getProperty(\"cores.zkClientTimeout\"));\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.name\"));\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getProperty(\"solr.core.instanceDir\"));\n\n      assertEquals(\"stuffandnonsense\", desc.getProperty(\"solr.core.dataDir\"));\n      assertEquals(\"solrconfig-minimal.xml\", desc.getProperty(\"solr.core.configName\"));\n      assertEquals(\"schema-tiny.xml\", desc.getProperty(\"solr.core.schemaName\"));\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but no solr.xml (a solr.properties\n  // instead) and insure that we find all the cores and can load them.\n  @Test\n  public void testPropertiesFile() throws Exception {\n    setMeUp();\n    addSolrPropertiesFile();\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(makeCorePropFile(\"core2\", false, false));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(makeCorePropFile(\"lazy1\", true, false));\n\n    CoreContainer cc = init();\n    try {\n      Properties props = cc.containerProperties;\n\n      assertEquals(\"/admin/cores/props\", props.getProperty(\"cores.adminPath\"));\n      assertEquals(\"/admin/cores/props\", cc.getAdminPath());\n      assertEquals(\"defcore\", props.getProperty(\"cores.defaultCoreName\"));\n      assertEquals(\"defcore\", cc.getDefaultCoreName());\n      assertEquals(\"222.333.444.555\", props.getProperty(\"host\"));\n      assertEquals(\"6000\", props.getProperty(\"port\")); // getProperty actually looks at original props.\n      assertEquals(\"/solrprop\", props.getProperty(\"cores.hostContext\"));\n      assertEquals(\"20\", props.getProperty(\"cores.zkClientTimeout\"));\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9818efa55563ddfecdecafbdd43f4bee9f252e7d","date":1364853872,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testPropertiesFile().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrDiscoveryProperties#testPropertiesFile().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testPropertiesFile() throws Exception {\n    setMeUp();\n    addSolrXml();\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(makeCorePropFile(\"core2\", false, false));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(makeCorePropFile(\"lazy1\", true, false));\n\n    CoreContainer cc = init();\n    try {\n      Properties props = cc.containerProperties;\n\n      assertEquals(\"/admin/cores\", cc.getAdminPath());\n      assertEquals(\"defcore\", cc.getDefaultCoreName());\n      assertEquals(\"222.333.444.555\", cc.getHost());\n      assertEquals(\"6000\", cc.getHostPort());\n      assertEquals(\"solrprop\", cc.getHostContext());\n      assertEquals(20, cc.getZkClientTimeout());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.name\"));\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getProperty(\"solr.core.instanceDir\"));\n\n      assertEquals(\"stuffandnonsense\", desc.getProperty(\"solr.core.dataDir\"));\n      assertEquals(\"solrconfig-minimal.xml\", desc.getProperty(\"solr.core.configName\"));\n      assertEquals(\"schema-tiny.xml\", desc.getProperty(\"solr.core.schemaName\"));\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but no solr.xml (a solr.properties\n  // instead) and insure that we find all the cores and can load them.\n  @Test\n  public void testPropertiesFile() throws Exception {\n    setMeUp();\n    addSolrPropertiesFile();\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(makeCorePropFile(\"core2\", false, false));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(makeCorePropFile(\"lazy1\", true, false));\n\n    CoreContainer cc = init();\n    try {\n      Properties props = cc.containerProperties;\n\n      assertEquals(\"/admin/cores/props\", props.getProperty(\"cores.adminPath\"));\n      assertEquals(\"/admin/cores/props\", cc.getAdminPath());\n      assertEquals(\"defcore\", props.getProperty(\"cores.defaultCoreName\"));\n      assertEquals(\"defcore\", cc.getDefaultCoreName());\n      assertEquals(\"222.333.444.555\", props.getProperty(\"host\"));\n      assertEquals(\"6000\", props.getProperty(\"port\")); // getProperty actually looks at original props.\n      assertEquals(\"/solrprop\", props.getProperty(\"cores.hostContext\"));\n      assertEquals(\"20\", props.getProperty(\"cores.zkClientTimeout\"));\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.name\"));\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getProperty(\"solr.core.instanceDir\"));\n\n      assertEquals(\"stuffandnonsense\", desc.getProperty(\"solr.core.dataDir\"));\n      assertEquals(\"solrconfig-minimal.xml\", desc.getProperty(\"solr.core.configName\"));\n      assertEquals(\"schema-tiny.xml\", desc.getProperty(\"solr.core.schemaName\"));\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["6ca7b346301e4b516701df57860db765f0cc5cc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ca7b346301e4b516701df57860db765f0cc5cc9":["a837c064b67fa63a9394136e31218b908cdcf783"],"a837c064b67fa63a9394136e31218b908cdcf783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"]},"commit2Childs":{"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a837c064b67fa63a9394136e31218b908cdcf783"],"6ca7b346301e4b516701df57860db765f0cc5cc9":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"a837c064b67fa63a9394136e31218b908cdcf783":["6ca7b346301e4b516701df57860db765f0cc5cc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}