{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/PorterStemmer#main(String[]).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/PorterStemmer#main(String[]).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/en/PorterStemmer#main(String[]).mjava","sourceNew":"  /** Test program for demonstrating the Stemmer.  It reads a file and\n   * stems each word, writing the result to standard out.\n   * Usage: Stemmer file-name\n   */\n  public static void main(String[] args) {\n    PorterStemmer s = new PorterStemmer();\n\n    for (int i = 0; i < args.length; i++) {\n      try {\n        InputStream in = new FileInputStream(args[i]);\n        byte[] buffer = new byte[1024];\n        int bufferLen, offset, ch;\n\n        bufferLen = in.read(buffer);\n        offset = 0;\n        s.reset();\n\n        while(true) {\n          if (offset < bufferLen)\n            ch = buffer[offset++];\n          else {\n            bufferLen = in.read(buffer);\n            offset = 0;\n            if (bufferLen < 0)\n              ch = -1;\n            else\n              ch = buffer[offset++];\n          }\n\n          if (Character.isLetter((char) ch)) {\n            s.add(Character.toLowerCase((char) ch));\n          }\n          else {\n             s.stem();\n             System.out.print(s.toString());\n             s.reset();\n             if (ch < 0)\n               break;\n             else {\n               System.out.print((char) ch);\n             }\n           }\n        }\n\n        in.close();\n      }\n      catch (IOException e) {\n        System.out.println(\"error reading \" + args[i]);\n      }\n    }\n  }\n\n","sourceOld":"  /** Test program for demonstrating the Stemmer.  It reads a file and\n   * stems each word, writing the result to standard out.\n   * Usage: Stemmer file-name\n   */\n  public static void main(String[] args) {\n    PorterStemmer s = new PorterStemmer();\n\n    for (int i = 0; i < args.length; i++) {\n      try {\n        InputStream in = new FileInputStream(args[i]);\n        byte[] buffer = new byte[1024];\n        int bufferLen, offset, ch;\n\n        bufferLen = in.read(buffer);\n        offset = 0;\n        s.reset();\n\n        while(true) {\n          if (offset < bufferLen)\n            ch = buffer[offset++];\n          else {\n            bufferLen = in.read(buffer);\n            offset = 0;\n            if (bufferLen < 0)\n              ch = -1;\n            else\n              ch = buffer[offset++];\n          }\n\n          if (Character.isLetter((char) ch)) {\n            s.add(Character.toLowerCase((char) ch));\n          }\n          else {\n             s.stem();\n             System.out.print(s.toString());\n             s.reset();\n             if (ch < 0)\n               break;\n             else {\n               System.out.print((char) ch);\n             }\n           }\n        }\n\n        in.close();\n      }\n      catch (IOException e) {\n        System.out.println(\"error reading \" + args[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/en/PorterStemmer#main(String[]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/PorterStemmer#main(String[]).mjava","sourceNew":"  /** Test program for demonstrating the Stemmer.  It reads a file and\n   * stems each word, writing the result to standard out.\n   * Usage: Stemmer file-name\n   */\n  public static void main(String[] args) {\n    PorterStemmer s = new PorterStemmer();\n\n    for (int i = 0; i < args.length; i++) {\n      try {\n        InputStream in = new FileInputStream(args[i]);\n        byte[] buffer = new byte[1024];\n        int bufferLen, offset, ch;\n\n        bufferLen = in.read(buffer);\n        offset = 0;\n        s.reset();\n\n        while(true) {\n          if (offset < bufferLen)\n            ch = buffer[offset++];\n          else {\n            bufferLen = in.read(buffer);\n            offset = 0;\n            if (bufferLen < 0)\n              ch = -1;\n            else\n              ch = buffer[offset++];\n          }\n\n          if (Character.isLetter((char) ch)) {\n            s.add(Character.toLowerCase((char) ch));\n          }\n          else {\n             s.stem();\n             System.out.print(s.toString());\n             s.reset();\n             if (ch < 0)\n               break;\n             else {\n               System.out.print((char) ch);\n             }\n           }\n        }\n\n        in.close();\n      }\n      catch (IOException e) {\n        System.out.println(\"error reading \" + args[i]);\n      }\n    }\n  }\n\n","sourceOld":"  /** Test program for demonstrating the Stemmer.  It reads a file and\n   * stems each word, writing the result to standard out.\n   * Usage: Stemmer file-name\n   */\n  public static void main(String[] args) {\n    PorterStemmer s = new PorterStemmer();\n\n    for (int i = 0; i < args.length; i++) {\n      try {\n        InputStream in = new FileInputStream(args[i]);\n        byte[] buffer = new byte[1024];\n        int bufferLen, offset, ch;\n\n        bufferLen = in.read(buffer);\n        offset = 0;\n        s.reset();\n\n        while(true) {\n          if (offset < bufferLen)\n            ch = buffer[offset++];\n          else {\n            bufferLen = in.read(buffer);\n            offset = 0;\n            if (bufferLen < 0)\n              ch = -1;\n            else\n              ch = buffer[offset++];\n          }\n\n          if (Character.isLetter((char) ch)) {\n            s.add(Character.toLowerCase((char) ch));\n          }\n          else {\n             s.stem();\n             System.out.print(s.toString());\n             s.reset();\n             if (ch < 0)\n               break;\n             else {\n               System.out.print((char) ch);\n             }\n           }\n        }\n\n        in.close();\n      }\n      catch (IOException e) {\n        System.out.println(\"error reading \" + args[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}