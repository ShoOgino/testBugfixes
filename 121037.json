{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testSort().mjava","commits":[{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testSort().mjava","pathOld":"/dev/null","sourceNew":"  /** Test sort */\n  public void testSort() throws IOException {\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      Sort sort;\n      if (i == 0) {\n        sort = null;\n      } else {\n        final int numSortFields = TestUtil.nextInt(random(), 1, 3);\n        SortField[] sortFields = new SortField[numSortFields];\n        for (int j = 0; j < numSortFields; ++j) {\n          sortFields[j] = new SortField(\n              TestUtil.randomSimpleString(random()),\n              random().nextBoolean() ? SortField.Type.LONG : SortField.Type.STRING,\n              random().nextBoolean());\n          if (random().nextBoolean()) {\n            switch (sortFields[j].getType()) {\n              case LONG:\n                sortFields[j].setMissingValue(random().nextLong());\n                break;\n              case STRING:\n                sortFields[j].setMissingValue(random().nextBoolean() ? SortField.STRING_FIRST : SortField.STRING_LAST);\n                break;\n              default:\n                fail();\n            }\n          }\n        }\n        sort = new Sort(sortFields);\n      }\n\n      Directory dir = newDirectory();\n      Codec codec = getCodec();\n      byte id[] = StringHelper.randomId();\n      SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n          Collections.<String,String>emptyMap(), id, new HashMap<>(), sort);\n      info.setFiles(Collections.<String>emptySet());\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n      assertEquals(sort, info2.getIndexSort());\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8","date":1462567286,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testSort().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testSort().mjava","sourceNew":"  /** Test sort */\n  public void testSort() throws IOException {\n    assumeTrue(\"test requires a codec that can read/write index sort\", supportsIndexSort());\n\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      Sort sort;\n      if (i == 0) {\n        sort = null;\n      } else {\n        final int numSortFields = TestUtil.nextInt(random(), 1, 3);\n        SortField[] sortFields = new SortField[numSortFields];\n        for (int j = 0; j < numSortFields; ++j) {\n          sortFields[j] = new SortField(\n              TestUtil.randomSimpleString(random()),\n              random().nextBoolean() ? SortField.Type.LONG : SortField.Type.STRING,\n              random().nextBoolean());\n          if (random().nextBoolean()) {\n            switch (sortFields[j].getType()) {\n              case LONG:\n                sortFields[j].setMissingValue(random().nextLong());\n                break;\n              case STRING:\n                sortFields[j].setMissingValue(random().nextBoolean() ? SortField.STRING_FIRST : SortField.STRING_LAST);\n                break;\n              default:\n                fail();\n            }\n          }\n        }\n        sort = new Sort(sortFields);\n      }\n\n      Directory dir = newDirectory();\n      Codec codec = getCodec();\n      byte id[] = StringHelper.randomId();\n      SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n          Collections.<String,String>emptyMap(), id, new HashMap<>(), sort);\n      info.setFiles(Collections.<String>emptySet());\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n      assertEquals(sort, info2.getIndexSort());\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /** Test sort */\n  public void testSort() throws IOException {\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      Sort sort;\n      if (i == 0) {\n        sort = null;\n      } else {\n        final int numSortFields = TestUtil.nextInt(random(), 1, 3);\n        SortField[] sortFields = new SortField[numSortFields];\n        for (int j = 0; j < numSortFields; ++j) {\n          sortFields[j] = new SortField(\n              TestUtil.randomSimpleString(random()),\n              random().nextBoolean() ? SortField.Type.LONG : SortField.Type.STRING,\n              random().nextBoolean());\n          if (random().nextBoolean()) {\n            switch (sortFields[j].getType()) {\n              case LONG:\n                sortFields[j].setMissingValue(random().nextLong());\n                break;\n              case STRING:\n                sortFields[j].setMissingValue(random().nextBoolean() ? SortField.STRING_FIRST : SortField.STRING_LAST);\n                break;\n              default:\n                fail();\n            }\n          }\n        }\n        sort = new Sort(sortFields);\n      }\n\n      Directory dir = newDirectory();\n      Codec codec = getCodec();\n      byte id[] = StringHelper.randomId();\n      SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n          Collections.<String,String>emptyMap(), id, new HashMap<>(), sort);\n      info.setFiles(Collections.<String>emptySet());\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n      assertEquals(sort, info2.getIndexSort());\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testSort().mjava","pathOld":"/dev/null","sourceNew":"  /** Test sort */\n  public void testSort() throws IOException {\n    assumeTrue(\"test requires a codec that can read/write index sort\", supportsIndexSort());\n\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      Sort sort;\n      if (i == 0) {\n        sort = null;\n      } else {\n        final int numSortFields = TestUtil.nextInt(random(), 1, 3);\n        SortField[] sortFields = new SortField[numSortFields];\n        for (int j = 0; j < numSortFields; ++j) {\n          sortFields[j] = new SortField(\n              TestUtil.randomSimpleString(random()),\n              random().nextBoolean() ? SortField.Type.LONG : SortField.Type.STRING,\n              random().nextBoolean());\n          if (random().nextBoolean()) {\n            switch (sortFields[j].getType()) {\n              case LONG:\n                sortFields[j].setMissingValue(random().nextLong());\n                break;\n              case STRING:\n                sortFields[j].setMissingValue(random().nextBoolean() ? SortField.STRING_FIRST : SortField.STRING_LAST);\n                break;\n              default:\n                fail();\n            }\n          }\n        }\n        sort = new Sort(sortFields);\n      }\n\n      Directory dir = newDirectory();\n      Codec codec = getCodec();\n      byte id[] = StringHelper.randomId();\n      SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n          Collections.<String,String>emptyMap(), id, new HashMap<>(), sort);\n      info.setFiles(Collections.<String>emptySet());\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n      assertEquals(sort, info2.getIndexSort());\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testSort().mjava","pathOld":"/dev/null","sourceNew":"  /** Test sort */\n  public void testSort() throws IOException {\n    assumeTrue(\"test requires a codec that can read/write index sort\", supportsIndexSort());\n\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      Sort sort;\n      if (i == 0) {\n        sort = null;\n      } else {\n        final int numSortFields = TestUtil.nextInt(random(), 1, 3);\n        SortField[] sortFields = new SortField[numSortFields];\n        for (int j = 0; j < numSortFields; ++j) {\n          sortFields[j] = new SortField(\n              TestUtil.randomSimpleString(random()),\n              random().nextBoolean() ? SortField.Type.LONG : SortField.Type.STRING,\n              random().nextBoolean());\n          if (random().nextBoolean()) {\n            switch (sortFields[j].getType()) {\n              case LONG:\n                sortFields[j].setMissingValue(random().nextLong());\n                break;\n              case STRING:\n                sortFields[j].setMissingValue(random().nextBoolean() ? SortField.STRING_FIRST : SortField.STRING_LAST);\n                break;\n              default:\n                fail();\n            }\n          }\n        }\n        sort = new Sort(sortFields);\n      }\n\n      Directory dir = newDirectory();\n      Codec codec = getCodec();\n      byte id[] = StringHelper.randomId();\n      SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n          Collections.<String,String>emptyMap(), id, new HashMap<>(), sort);\n      info.setFiles(Collections.<String>emptySet());\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n      assertEquals(sort, info2.getIndexSort());\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testSort().mjava","pathOld":"/dev/null","sourceNew":"  /** Test sort */\n  public void testSort() throws IOException {\n    assumeTrue(\"test requires a codec that can read/write index sort\", supportsIndexSort());\n\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      Sort sort;\n      if (i == 0) {\n        sort = null;\n      } else {\n        final int numSortFields = TestUtil.nextInt(random(), 1, 3);\n        SortField[] sortFields = new SortField[numSortFields];\n        for (int j = 0; j < numSortFields; ++j) {\n          sortFields[j] = new SortField(\n              TestUtil.randomSimpleString(random()),\n              random().nextBoolean() ? SortField.Type.LONG : SortField.Type.STRING,\n              random().nextBoolean());\n          if (random().nextBoolean()) {\n            switch (sortFields[j].getType()) {\n              case LONG:\n                sortFields[j].setMissingValue(random().nextLong());\n                break;\n              case STRING:\n                sortFields[j].setMissingValue(random().nextBoolean() ? SortField.STRING_FIRST : SortField.STRING_LAST);\n                break;\n              default:\n                fail();\n            }\n          }\n        }\n        sort = new Sort(sortFields);\n      }\n\n      Directory dir = newDirectory();\n      Codec codec = getCodec();\n      byte id[] = StringHelper.randomId();\n      SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n          Collections.<String,String>emptyMap(), id, new HashMap<>(), sort);\n      info.setFiles(Collections.<String>emptySet());\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n      assertEquals(sort, info2.getIndexSort());\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testSort().mjava","pathOld":"/dev/null","sourceNew":"  /** Test sort */\n  public void testSort() throws IOException {\n    assumeTrue(\"test requires a codec that can read/write index sort\", supportsIndexSort());\n\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      Sort sort;\n      if (i == 0) {\n        sort = null;\n      } else {\n        final int numSortFields = TestUtil.nextInt(random(), 1, 3);\n        SortField[] sortFields = new SortField[numSortFields];\n        for (int j = 0; j < numSortFields; ++j) {\n          sortFields[j] = new SortField(\n              TestUtil.randomSimpleString(random()),\n              random().nextBoolean() ? SortField.Type.LONG : SortField.Type.STRING,\n              random().nextBoolean());\n          if (random().nextBoolean()) {\n            switch (sortFields[j].getType()) {\n              case LONG:\n                sortFields[j].setMissingValue(random().nextLong());\n                break;\n              case STRING:\n                sortFields[j].setMissingValue(random().nextBoolean() ? SortField.STRING_FIRST : SortField.STRING_LAST);\n                break;\n              default:\n                fail();\n            }\n          }\n        }\n        sort = new Sort(sortFields);\n      }\n\n      Directory dir = newDirectory();\n      Codec codec = getCodec();\n      byte id[] = StringHelper.randomId();\n      SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n          Collections.<String,String>emptyMap(), id, new HashMap<>(), sort);\n      info.setFiles(Collections.<String>emptySet());\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n      assertEquals(sort, info2.getIndexSort());\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e065cebbdee472a02bde38052717a8cd7ee8ab3b","date":1479244971,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testSort().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testSort().mjava","sourceNew":"  /** Test sort */\n  public void testSort() throws IOException {\n    assumeTrue(\"test requires a codec that can read/write index sort\", supportsIndexSort());\n\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      Sort sort;\n      if (i == 0) {\n        sort = null;\n      } else {\n        final int numSortFields = TestUtil.nextInt(random(), 1, 3);\n        SortField[] sortFields = new SortField[numSortFields];\n        for (int j = 0; j < numSortFields; ++j) {\n          sortFields[j] = randomIndexSortField();\n        }\n        sort = new Sort(sortFields);\n      }\n\n      Directory dir = newDirectory();\n      Codec codec = getCodec();\n      byte id[] = StringHelper.randomId();\n      SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n          Collections.<String,String>emptyMap(), id, new HashMap<>(), sort);\n      info.setFiles(Collections.<String>emptySet());\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n      assertEquals(sort, info2.getIndexSort());\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /** Test sort */\n  public void testSort() throws IOException {\n    assumeTrue(\"test requires a codec that can read/write index sort\", supportsIndexSort());\n\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      Sort sort;\n      if (i == 0) {\n        sort = null;\n      } else {\n        final int numSortFields = TestUtil.nextInt(random(), 1, 3);\n        SortField[] sortFields = new SortField[numSortFields];\n        for (int j = 0; j < numSortFields; ++j) {\n          sortFields[j] = new SortField(\n              TestUtil.randomSimpleString(random()),\n              random().nextBoolean() ? SortField.Type.LONG : SortField.Type.STRING,\n              random().nextBoolean());\n          if (random().nextBoolean()) {\n            switch (sortFields[j].getType()) {\n              case LONG:\n                sortFields[j].setMissingValue(random().nextLong());\n                break;\n              case STRING:\n                sortFields[j].setMissingValue(random().nextBoolean() ? SortField.STRING_FIRST : SortField.STRING_LAST);\n                break;\n              default:\n                fail();\n            }\n          }\n        }\n        sort = new Sort(sortFields);\n      }\n\n      Directory dir = newDirectory();\n      Codec codec = getCodec();\n      byte id[] = StringHelper.randomId();\n      SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n          Collections.<String,String>emptyMap(), id, new HashMap<>(), sort);\n      info.setFiles(Collections.<String>emptySet());\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n      assertEquals(sort, info2.getIndexSort());\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testSort().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testSort().mjava","sourceNew":"  /** Test sort */\n  public void testSort() throws IOException {\n    assumeTrue(\"test requires a codec that can read/write index sort\", supportsIndexSort());\n\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      Sort sort;\n      if (i == 0) {\n        sort = null;\n      } else {\n        final int numSortFields = TestUtil.nextInt(random(), 1, 3);\n        SortField[] sortFields = new SortField[numSortFields];\n        for (int j = 0; j < numSortFields; ++j) {\n          sortFields[j] = randomIndexSortField();\n        }\n        sort = new Sort(sortFields);\n      }\n\n      Directory dir = newDirectory();\n      Codec codec = getCodec();\n      byte id[] = StringHelper.randomId();\n      SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n          Collections.<String,String>emptyMap(), id, new HashMap<>(), sort);\n      info.setFiles(Collections.<String>emptySet());\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n      assertEquals(sort, info2.getIndexSort());\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /** Test sort */\n  public void testSort() throws IOException {\n    assumeTrue(\"test requires a codec that can read/write index sort\", supportsIndexSort());\n\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      Sort sort;\n      if (i == 0) {\n        sort = null;\n      } else {\n        final int numSortFields = TestUtil.nextInt(random(), 1, 3);\n        SortField[] sortFields = new SortField[numSortFields];\n        for (int j = 0; j < numSortFields; ++j) {\n          sortFields[j] = new SortField(\n              TestUtil.randomSimpleString(random()),\n              random().nextBoolean() ? SortField.Type.LONG : SortField.Type.STRING,\n              random().nextBoolean());\n          if (random().nextBoolean()) {\n            switch (sortFields[j].getType()) {\n              case LONG:\n                sortFields[j].setMissingValue(random().nextLong());\n                break;\n              case STRING:\n                sortFields[j].setMissingValue(random().nextBoolean() ? SortField.STRING_FIRST : SortField.STRING_LAST);\n                break;\n              default:\n                fail();\n            }\n          }\n        }\n        sort = new Sort(sortFields);\n      }\n\n      Directory dir = newDirectory();\n      Codec codec = getCodec();\n      byte id[] = StringHelper.randomId();\n      SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n          Collections.<String,String>emptyMap(), id, new HashMap<>(), sort);\n      info.setFiles(Collections.<String>emptySet());\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n      assertEquals(sort, info2.getIndexSort());\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testSort().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testSort().mjava","sourceNew":"  /** Test sort */\n  public void testSort() throws IOException {\n    assumeTrue(\"test requires a codec that can read/write index sort\", supportsIndexSort());\n\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      Sort sort;\n      if (i == 0) {\n        sort = null;\n      } else {\n        final int numSortFields = TestUtil.nextInt(random(), 1, 3);\n        SortField[] sortFields = new SortField[numSortFields];\n        for (int j = 0; j < numSortFields; ++j) {\n          sortFields[j] = randomIndexSortField();\n        }\n        sort = new Sort(sortFields);\n      }\n\n      Directory dir = newDirectory();\n      Codec codec = getCodec();\n      byte id[] = StringHelper.randomId();\n      SegmentInfo info = new SegmentInfo(dir, getVersions()[0], getVersions()[0], \"_123\", 1, false, codec, \n          Collections.<String,String>emptyMap(), id, new HashMap<>(), sort);\n      info.setFiles(Collections.<String>emptySet());\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n      assertEquals(sort, info2.getIndexSort());\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /** Test sort */\n  public void testSort() throws IOException {\n    assumeTrue(\"test requires a codec that can read/write index sort\", supportsIndexSort());\n\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      Sort sort;\n      if (i == 0) {\n        sort = null;\n      } else {\n        final int numSortFields = TestUtil.nextInt(random(), 1, 3);\n        SortField[] sortFields = new SortField[numSortFields];\n        for (int j = 0; j < numSortFields; ++j) {\n          sortFields[j] = randomIndexSortField();\n        }\n        sort = new Sort(sortFields);\n      }\n\n      Directory dir = newDirectory();\n      Codec codec = getCodec();\n      byte id[] = StringHelper.randomId();\n      SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n          Collections.<String,String>emptyMap(), id, new HashMap<>(), sort);\n      info.setFiles(Collections.<String>emptySet());\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n      assertEquals(sort, info2.getIndexSort());\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testSort().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testSort().mjava","sourceNew":"  /** Test sort */\n  public void testSort() throws IOException {\n    assumeTrue(\"test requires a codec that can read/write index sort\", supportsIndexSort());\n\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      Sort sort;\n      if (i == 0) {\n        sort = null;\n      } else {\n        final int numSortFields = TestUtil.nextInt(random(), 1, 3);\n        SortField[] sortFields = new SortField[numSortFields];\n        for (int j = 0; j < numSortFields; ++j) {\n          sortFields[j] = randomIndexSortField();\n        }\n        sort = new Sort(sortFields);\n      }\n\n      Directory dir = newDirectory();\n      Codec codec = getCodec();\n      byte id[] = StringHelper.randomId();\n      SegmentInfo info = new SegmentInfo(dir, getVersions()[0], getVersions()[0], \"_123\", 1, false, codec, \n          Collections.<String,String>emptyMap(), id, new HashMap<>(), sort);\n      info.setFiles(Collections.<String>emptySet());\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n      assertEquals(sort, info2.getIndexSort());\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /** Test sort */\n  public void testSort() throws IOException {\n    assumeTrue(\"test requires a codec that can read/write index sort\", supportsIndexSort());\n\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      Sort sort;\n      if (i == 0) {\n        sort = null;\n      } else {\n        final int numSortFields = TestUtil.nextInt(random(), 1, 3);\n        SortField[] sortFields = new SortField[numSortFields];\n        for (int j = 0; j < numSortFields; ++j) {\n          sortFields[j] = randomIndexSortField();\n        }\n        sort = new Sort(sortFields);\n      }\n\n      Directory dir = newDirectory();\n      Codec codec = getCodec();\n      byte id[] = StringHelper.randomId();\n      SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n          Collections.<String,String>emptyMap(), id, new HashMap<>(), sort);\n      info.setFiles(Collections.<String>emptySet());\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n      assertEquals(sort, info2.getIndexSort());\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68ba24d6f9380e2463dbe5130d27502647f64904","date":1554881362,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testSort().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testSort().mjava","sourceNew":"  /** Test sort */\n  public void testSort() throws IOException {\n    assumeTrue(\"test requires a codec that can read/write index sort\", supportsIndexSort());\n\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      Sort sort;\n      if (i == 0) {\n        sort = null;\n      } else {\n        final int numSortFields = TestUtil.nextInt(random(), 1, 3);\n        SortField[] sortFields = new SortField[numSortFields];\n        for (int j = 0; j < numSortFields; ++j) {\n          sortFields[j] = randomIndexSortField();\n        }\n        sort = new Sort(sortFields);\n      }\n\n      Directory dir = newDirectory();\n      Codec codec = getCodec();\n      byte id[] = StringHelper.randomId();\n      SegmentInfo info = new SegmentInfo(dir, getVersions()[0], getVersions()[0], \"_123\", 1, false, codec, \n          Collections.<String,String>emptyMap(), id, Collections.emptyMap(), sort);\n      info.setFiles(Collections.<String>emptySet());\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n      assertEquals(sort, info2.getIndexSort());\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /** Test sort */\n  public void testSort() throws IOException {\n    assumeTrue(\"test requires a codec that can read/write index sort\", supportsIndexSort());\n\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      Sort sort;\n      if (i == 0) {\n        sort = null;\n      } else {\n        final int numSortFields = TestUtil.nextInt(random(), 1, 3);\n        SortField[] sortFields = new SortField[numSortFields];\n        for (int j = 0; j < numSortFields; ++j) {\n          sortFields[j] = randomIndexSortField();\n        }\n        sort = new Sort(sortFields);\n      }\n\n      Directory dir = newDirectory();\n      Codec codec = getCodec();\n      byte id[] = StringHelper.randomId();\n      SegmentInfo info = new SegmentInfo(dir, getVersions()[0], getVersions()[0], \"_123\", 1, false, codec, \n          Collections.<String,String>emptyMap(), id, new HashMap<>(), sort);\n      info.setFiles(Collections.<String>emptySet());\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n      assertEquals(sort, info2.getIndexSort());\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d33e731a93d4b57e662ff094f64f94a745422d4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"68ba24d6f9380e2463dbe5130d27502647f64904":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8"],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68ba24d6f9380e2463dbe5130d27502647f64904"]},"commit2Childs":{"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["31741cf1390044e38a2ec3127cf302ba841bfd75","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","92212fd254551a0b1156aafc3a1a6ed1a43932ad"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["e065cebbdee472a02bde38052717a8cd7ee8ab3b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["68ba24d6f9380e2463dbe5130d27502647f64904"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8"],"68ba24d6f9380e2463dbe5130d27502647f64904":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","ceaef6cfc68c8ab22a684192e469a8280f9e6e70","3d33e731a93d4b57e662ff094f64f94a745422d4"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":[],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","92212fd254551a0b1156aafc3a1a6ed1a43932ad","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}