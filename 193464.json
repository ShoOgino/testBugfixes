{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#swapRegistries(String,String).mjava","commits":[{"id":"a30bfa174128ad6cb3bcf568080886729e347fe9","date":1485967817,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#swapRegistries(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Swap registries. This is useful eg. during\n   * {@link org.apache.solr.core.SolrCore} rename or swap operations. NOTE:\n   * this operation is not supported for shared registries.\n   * @param registry1 source registry\n   * @param registry2 target registry. Note: when used after core rename the target registry doesn't\n   *                  exist, so the swap operation will only rename the existing registry without creating\n   *                  an empty one under the previous name.\n   */\n  public void swapRegistries(String registry1, String registry2) {\n    registry1 = overridableRegistryName(registry1);\n    registry2 = overridableRegistryName(registry2);\n    if (isSharedRegistry(registry1) || isSharedRegistry(registry2)) {\n      throw new UnsupportedOperationException(\"Cannot swap shared registry: \" + registry1 + \", \" + registry2);\n    }\n    swapLock.lock();\n    try {\n      MetricRegistry from = registries.get(registry1);\n      MetricRegistry to = registries.get(registry2);\n      if (from == to) {\n        return;\n      }\n      MetricRegistry reg1 = registries.remove(registry1);\n      MetricRegistry reg2 = registries.remove(registry2);\n      if (reg2 != null) {\n        registries.put(registry1, reg2);\n      }\n      if (reg1 != null) {\n        registries.put(registry2, reg1);\n      }\n    } finally {\n      swapLock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#swapRegistries(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Swap registries. This is useful eg. during\n   * {@link org.apache.solr.core.SolrCore} rename or swap operations. NOTE:\n   * this operation is not supported for shared registries.\n   * @param registry1 source registry\n   * @param registry2 target registry. Note: when used after core rename the target registry doesn't\n   *                  exist, so the swap operation will only rename the existing registry without creating\n   *                  an empty one under the previous name.\n   */\n  public void swapRegistries(String registry1, String registry2) {\n    registry1 = overridableRegistryName(registry1);\n    registry2 = overridableRegistryName(registry2);\n    if (isSharedRegistry(registry1) || isSharedRegistry(registry2)) {\n      throw new UnsupportedOperationException(\"Cannot swap shared registry: \" + registry1 + \", \" + registry2);\n    }\n    swapLock.lock();\n    try {\n      MetricRegistry from = registries.get(registry1);\n      MetricRegistry to = registries.get(registry2);\n      if (from == to) {\n        return;\n      }\n      MetricRegistry reg1 = registries.remove(registry1);\n      MetricRegistry reg2 = registries.remove(registry2);\n      if (reg2 != null) {\n        registries.put(registry1, reg2);\n      }\n      if (reg1 != null) {\n        registries.put(registry2, reg1);\n      }\n    } finally {\n      swapLock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c","date":1538077195,"type":3,"author":"Peter Somogyi","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#swapRegistries(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#swapRegistries(String,String).mjava","sourceNew":"  /**\n   * Swap registries. This is useful eg. during\n   * {@link org.apache.solr.core.SolrCore} rename or swap operations. NOTE:\n   * this operation is not supported for shared registries.\n   * @param registry1 source registry\n   * @param registry2 target registry. Note: when used after core rename the target registry doesn't\n   *                  exist, so the swap operation will only rename the existing registry without creating\n   *                  an empty one under the previous name.\n   */\n  public void swapRegistries(String registry1, String registry2) {\n    registry1 = enforcePrefix(registry1);\n    registry2 = enforcePrefix(registry2);\n    if (isSharedRegistry(registry1) || isSharedRegistry(registry2)) {\n      throw new UnsupportedOperationException(\"Cannot swap shared registry: \" + registry1 + \", \" + registry2);\n    }\n    swapLock.lock();\n    try {\n      MetricRegistry from = registries.get(registry1);\n      MetricRegistry to = registries.get(registry2);\n      if (from == to) {\n        return;\n      }\n      MetricRegistry reg1 = registries.remove(registry1);\n      MetricRegistry reg2 = registries.remove(registry2);\n      if (reg2 != null) {\n        registries.put(registry1, reg2);\n      }\n      if (reg1 != null) {\n        registries.put(registry2, reg1);\n      }\n    } finally {\n      swapLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Swap registries. This is useful eg. during\n   * {@link org.apache.solr.core.SolrCore} rename or swap operations. NOTE:\n   * this operation is not supported for shared registries.\n   * @param registry1 source registry\n   * @param registry2 target registry. Note: when used after core rename the target registry doesn't\n   *                  exist, so the swap operation will only rename the existing registry without creating\n   *                  an empty one under the previous name.\n   */\n  public void swapRegistries(String registry1, String registry2) {\n    registry1 = overridableRegistryName(registry1);\n    registry2 = overridableRegistryName(registry2);\n    if (isSharedRegistry(registry1) || isSharedRegistry(registry2)) {\n      throw new UnsupportedOperationException(\"Cannot swap shared registry: \" + registry1 + \", \" + registry2);\n    }\n    swapLock.lock();\n    try {\n      MetricRegistry from = registries.get(registry1);\n      MetricRegistry to = registries.get(registry2);\n      if (from == to) {\n        return;\n      }\n      MetricRegistry reg1 = registries.remove(registry1);\n      MetricRegistry reg2 = registries.remove(registry2);\n      if (reg2 != null) {\n        registries.put(registry1, reg2);\n      }\n      if (reg1 != null) {\n        registries.put(registry2, reg1);\n      }\n    } finally {\n      swapLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6224f40fcf60b05c62a88f50925c1bbae324bdfd","date":1565402430,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#swapRegistries(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#swapRegistries(String,String).mjava","sourceNew":"  /**\n   * Swap registries. This is useful eg. during\n   * {@link org.apache.solr.core.SolrCore} rename or swap operations. NOTE:\n   * this operation is not supported for shared registries.\n   *\n   * @param registry1 source registry\n   * @param registry2 target registry. Note: when used after core rename the target registry doesn't\n   *                  exist, so the swap operation will only rename the existing registry without creating\n   *                  an empty one under the previous name.\n   */\n  public void swapRegistries(String registry1, String registry2) {\n    registry1 = enforcePrefix(registry1);\n    registry2 = enforcePrefix(registry2);\n    if (isSharedRegistry(registry1) || isSharedRegistry(registry2)) {\n      throw new UnsupportedOperationException(\"Cannot swap shared registry: \" + registry1 + \", \" + registry2);\n    }\n    swapLock.lock();\n    try {\n      MetricRegistry from = registries.get(registry1);\n      MetricRegistry to = registries.get(registry2);\n      if (from == to) {\n        return;\n      }\n      MetricRegistry reg1 = registries.remove(registry1);\n      MetricRegistry reg2 = registries.remove(registry2);\n      if (reg2 != null) {\n        registries.put(registry1, reg2);\n      }\n      if (reg1 != null) {\n        registries.put(registry2, reg1);\n      }\n    } finally {\n      swapLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Swap registries. This is useful eg. during\n   * {@link org.apache.solr.core.SolrCore} rename or swap operations. NOTE:\n   * this operation is not supported for shared registries.\n   * @param registry1 source registry\n   * @param registry2 target registry. Note: when used after core rename the target registry doesn't\n   *                  exist, so the swap operation will only rename the existing registry without creating\n   *                  an empty one under the previous name.\n   */\n  public void swapRegistries(String registry1, String registry2) {\n    registry1 = enforcePrefix(registry1);\n    registry2 = enforcePrefix(registry2);\n    if (isSharedRegistry(registry1) || isSharedRegistry(registry2)) {\n      throw new UnsupportedOperationException(\"Cannot swap shared registry: \" + registry1 + \", \" + registry2);\n    }\n    swapLock.lock();\n    try {\n      MetricRegistry from = registries.get(registry1);\n      MetricRegistry to = registries.get(registry2);\n      if (from == to) {\n        return;\n      }\n      MetricRegistry reg1 = registries.remove(registry1);\n      MetricRegistry reg2 = registries.remove(registry2);\n      if (reg2 != null) {\n        registries.put(registry1, reg2);\n      }\n      if (reg1 != null) {\n        registries.put(registry2, reg1);\n      }\n    } finally {\n      swapLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a30bfa174128ad6cb3bcf568080886729e347fe9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a30bfa174128ad6cb3bcf568080886729e347fe9"],"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c":["a30bfa174128ad6cb3bcf568080886729e347fe9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c"]},"commit2Childs":{"a30bfa174128ad6cb3bcf568080886729e347fe9":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a30bfa174128ad6cb3bcf568080886729e347fe9","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}