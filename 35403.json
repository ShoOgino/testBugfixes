{"path":"lucene/src/test/org/apache/lucene/document/TestNumberTools#subtestTwoLongs(long,long).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":2,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestNumberTools#subtestTwoLongs(long,long).mjava","pathOld":"backwards/src/test/org/apache/lucene/document/TestNumberTools#subtestTwoLongs(long,long).mjava","sourceNew":"    private static void subtestTwoLongs(long i, long j) {\n        // convert to strings\n        String a = NumberTools.longToString(i);\n        String b = NumberTools.longToString(j);\n\n        // are they the right length?\n        assertEquals(NumberTools.STR_SIZE, a.length());\n        assertEquals(NumberTools.STR_SIZE, b.length());\n\n        // are they the right order?\n        if (i < j) {\n            assertTrue(a.compareTo(b) < 0);\n        } else if (i > j) {\n            assertTrue(a.compareTo(b) > 0);\n        } else {\n            assertEquals(a, b);\n        }\n\n        // can we convert them back to longs?\n        long i2 = NumberTools.stringToLong(a);\n        long j2 = NumberTools.stringToLong(b);\n\n        assertEquals(i, i2);\n        assertEquals(j, j2);\n    }\n\n","sourceOld":"    private static void subtestTwoLongs(long i, long j) {\n        // convert to strings\n        String a = NumberTools.longToString(i);\n        String b = NumberTools.longToString(j);\n\n        // are they the right length?\n        assertEquals(NumberTools.STR_SIZE, a.length());\n        assertEquals(NumberTools.STR_SIZE, b.length());\n\n        // are they the right order?\n        if (i < j) {\n            assertTrue(a.compareTo(b) < 0);\n        } else if (i > j) {\n            assertTrue(a.compareTo(b) > 0);\n        } else {\n            assertEquals(a, b);\n        }\n\n        // can we convert them back to longs?\n        long i2 = NumberTools.stringToLong(a);\n        long j2 = NumberTools.stringToLong(b);\n\n        assertEquals(i, i2);\n        assertEquals(j, j2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/document/TestNumberTools#subtestTwoLongs(long,long).mjava","sourceNew":null,"sourceOld":"    private static void subtestTwoLongs(long i, long j) {\n        // convert to strings\n        String a = NumberTools.longToString(i);\n        String b = NumberTools.longToString(j);\n\n        // are they the right length?\n        assertEquals(NumberTools.STR_SIZE, a.length());\n        assertEquals(NumberTools.STR_SIZE, b.length());\n\n        // are they the right order?\n        if (i < j) {\n            assertTrue(a.compareTo(b) < 0);\n        } else if (i > j) {\n            assertTrue(a.compareTo(b) > 0);\n        } else {\n            assertEquals(a, b);\n        }\n\n        // can we convert them back to longs?\n        long i2 = NumberTools.stringToLong(a);\n        long j2 = NumberTools.stringToLong(b);\n\n        assertEquals(i, i2);\n        assertEquals(j, j2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/document/TestNumberTools#subtestTwoLongs(long,long).mjava","sourceNew":null,"sourceOld":"    private static void subtestTwoLongs(long i, long j) {\n        // convert to strings\n        String a = NumberTools.longToString(i);\n        String b = NumberTools.longToString(j);\n\n        // are they the right length?\n        assertEquals(NumberTools.STR_SIZE, a.length());\n        assertEquals(NumberTools.STR_SIZE, b.length());\n\n        // are they the right order?\n        if (i < j) {\n            assertTrue(a.compareTo(b) < 0);\n        } else if (i > j) {\n            assertTrue(a.compareTo(b) > 0);\n        } else {\n            assertEquals(a, b);\n        }\n\n        // can we convert them back to longs?\n        long i2 = NumberTools.stringToLong(a);\n        long j2 = NumberTools.stringToLong(b);\n\n        assertEquals(i, i2);\n        assertEquals(j, j2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/document/TestNumberTools#subtestTwoLongs(long,long).mjava","sourceNew":null,"sourceOld":"    private static void subtestTwoLongs(long i, long j) {\n        // convert to strings\n        String a = NumberTools.longToString(i);\n        String b = NumberTools.longToString(j);\n\n        // are they the right length?\n        assertEquals(NumberTools.STR_SIZE, a.length());\n        assertEquals(NumberTools.STR_SIZE, b.length());\n\n        // are they the right order?\n        if (i < j) {\n            assertTrue(a.compareTo(b) < 0);\n        } else if (i > j) {\n            assertTrue(a.compareTo(b) > 0);\n        } else {\n            assertEquals(a, b);\n        }\n\n        // can we convert them back to longs?\n        long i2 = NumberTools.stringToLong(a);\n        long j2 = NumberTools.stringToLong(b);\n\n        assertEquals(i, i2);\n        assertEquals(j, j2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}