{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerTest#getNumRequests(String,String).mjava","commits":[{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerTest#getNumRequests(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerTest#getNumRequests(HttpSolrServer).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    HttpSolrServer server = new HttpSolrServer(baseUrl + \"/\"+ collectionName);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/admin/mbeans\");\n    params.set(\"stats\", \"true\");\n    params.set(\"key\", \"org.apache.solr.handler.StandardRequestHandler\");\n    params.set(\"cat\", \"QUERYHANDLER\");\n    // use generic request to avoid extra processing of queries\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = server.request(req);\n    NamedList mbeans = (NamedList) resp.get(\"solr-mbeans\");\n    NamedList queryHandler = (NamedList) mbeans.get(\"QUERYHANDLER\");\n    NamedList select = (NamedList) queryHandler.get(\"org.apache.solr.handler.StandardRequestHandler\");\n    NamedList stats = (NamedList) select.get(\"stats\");\n    return (Long) stats.get(\"requests\");\n  }\n\n","sourceOld":"  private Long getNumRequests(HttpSolrServer solrServer) throws\n      SolrServerException, IOException {\n    HttpSolrServer server = new HttpSolrServer(solrServer.getBaseURL());\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/admin/mbeans\");\n    params.set(\"stats\", \"true\");\n    params.set(\"key\", \"org.apache.solr.handler.StandardRequestHandler\");\n    params.set(\"cat\", \"QUERYHANDLER\");\n    // use generic request to avoid extra processing of queries\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = server.request(req);\n    NamedList mbeans = (NamedList) resp.get(\"solr-mbeans\");\n    NamedList queryHandler = (NamedList) mbeans.get(\"QUERYHANDLER\");\n    NamedList select = (NamedList) queryHandler.get(\"org.apache.solr.handler.StandardRequestHandler\");\n    NamedList stats = (NamedList) select.get(\"stats\");\n    return (Long) stats.get(\"requests\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"471d806b28fa8f148222eb0c300dcab1047a391d","date":1413210204,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerTest#getNumRequests(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerTest#getNumRequests(String,String).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    HttpSolrServer server = new HttpSolrServer(baseUrl + \"/\"+ collectionName);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/admin/mbeans\");\n    params.set(\"stats\", \"true\");\n    params.set(\"key\", \"org.apache.solr.handler.StandardRequestHandler\");\n    params.set(\"cat\", \"QUERYHANDLER\");\n    // use generic request to avoid extra processing of queries\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = server.request(req);\n    return (Long) resp.findRecursive(\"solr-mbeans\", \"QUERYHANDLER\",\n        \"org.apache.solr.handler.StandardRequestHandler\", \"stats\", \"requests\");\n  }\n\n","sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    HttpSolrServer server = new HttpSolrServer(baseUrl + \"/\"+ collectionName);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/admin/mbeans\");\n    params.set(\"stats\", \"true\");\n    params.set(\"key\", \"org.apache.solr.handler.StandardRequestHandler\");\n    params.set(\"cat\", \"QUERYHANDLER\");\n    // use generic request to avoid extra processing of queries\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = server.request(req);\n    NamedList mbeans = (NamedList) resp.get(\"solr-mbeans\");\n    NamedList queryHandler = (NamedList) mbeans.get(\"QUERYHANDLER\");\n    NamedList select = (NamedList) queryHandler.get(\"org.apache.solr.handler.StandardRequestHandler\");\n    NamedList stats = (NamedList) select.get(\"stats\");\n    return (Long) stats.get(\"requests\");\n  }\n\n","bugFix":null,"bugIntro":["ce0869149ac7db00681b2dfa4a47463d3f73d01a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerTest#getNumRequests(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerTest#getNumRequests(String,String).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    HttpSolrServer server = new HttpSolrServer(baseUrl + \"/\"+ collectionName);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/admin/mbeans\");\n    params.set(\"stats\", \"true\");\n    params.set(\"key\", \"org.apache.solr.handler.StandardRequestHandler\");\n    params.set(\"cat\", \"QUERYHANDLER\");\n    // use generic request to avoid extra processing of queries\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = server.request(req);\n    return (Long) resp.findRecursive(\"solr-mbeans\", \"QUERYHANDLER\",\n        \"org.apache.solr.handler.StandardRequestHandler\", \"stats\", \"requests\");\n  }\n\n","sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    HttpSolrServer server = new HttpSolrServer(baseUrl + \"/\"+ collectionName);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/admin/mbeans\");\n    params.set(\"stats\", \"true\");\n    params.set(\"key\", \"org.apache.solr.handler.StandardRequestHandler\");\n    params.set(\"cat\", \"QUERYHANDLER\");\n    // use generic request to avoid extra processing of queries\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = server.request(req);\n    NamedList mbeans = (NamedList) resp.get(\"solr-mbeans\");\n    NamedList queryHandler = (NamedList) mbeans.get(\"QUERYHANDLER\");\n    NamedList select = (NamedList) queryHandler.get(\"org.apache.solr.handler.StandardRequestHandler\");\n    NamedList stats = (NamedList) select.get(\"stats\");\n    return (Long) stats.get(\"requests\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce0869149ac7db00681b2dfa4a47463d3f73d01a","date":1416497142,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerTest#getNumRequests(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerTest#getNumRequests(String,String).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    HttpSolrServer server = new HttpSolrServer(baseUrl + \"/\"+ collectionName);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/admin/mbeans\");\n    params.set(\"stats\", \"true\");\n    params.set(\"key\", \"standard\");\n    params.set(\"cat\", \"QUERYHANDLER\");\n    // use generic request to avoid extra processing of queries\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = server.request(req);\n    return (Long) resp.findRecursive(\"solr-mbeans\", \"QUERYHANDLER\",\n        \"standard\", \"stats\", \"requests\");\n  }\n\n","sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    HttpSolrServer server = new HttpSolrServer(baseUrl + \"/\"+ collectionName);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/admin/mbeans\");\n    params.set(\"stats\", \"true\");\n    params.set(\"key\", \"org.apache.solr.handler.StandardRequestHandler\");\n    params.set(\"cat\", \"QUERYHANDLER\");\n    // use generic request to avoid extra processing of queries\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = server.request(req);\n    return (Long) resp.findRecursive(\"solr-mbeans\", \"QUERYHANDLER\",\n        \"org.apache.solr.handler.StandardRequestHandler\", \"stats\", \"requests\");\n  }\n\n","bugFix":["14f5fb047085ab89f16696609c848b225b51b482","471d806b28fa8f148222eb0c300dcab1047a391d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerTest#getNumRequests(String,String).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    HttpSolrClient client = new HttpSolrClient(baseUrl + \"/\"+ collectionName);\n    client.setConnectionTimeout(15000);\n    client.setSoTimeout(60000);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/admin/mbeans\");\n    params.set(\"stats\", \"true\");\n    params.set(\"key\", \"standard\");\n    params.set(\"cat\", \"QUERYHANDLER\");\n    // use generic request to avoid extra processing of queries\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = client.request(req);\n    return (Long) resp.findRecursive(\"solr-mbeans\", \"QUERYHANDLER\",\n        \"standard\", \"stats\", \"requests\");\n  }\n\n","sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    HttpSolrServer server = new HttpSolrServer(baseUrl + \"/\"+ collectionName);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/admin/mbeans\");\n    params.set(\"stats\", \"true\");\n    params.set(\"key\", \"standard\");\n    params.set(\"cat\", \"QUERYHANDLER\");\n    // use generic request to avoid extra processing of queries\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = server.request(req);\n    return (Long) resp.findRecursive(\"solr-mbeans\", \"QUERYHANDLER\",\n        \"standard\", \"stats\", \"requests\");\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ce0869149ac7db00681b2dfa4a47463d3f73d01a":["471d806b28fa8f148222eb0c300dcab1047a391d"],"55980207f1977bd1463465de1659b821347e2fa8":["0622fbd990643ae4cacb693db6a0c82cf8916ae2","471d806b28fa8f148222eb0c300dcab1047a391d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["ce0869149ac7db00681b2dfa4a47463d3f73d01a"],"471d806b28fa8f148222eb0c300dcab1047a391d":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"ce0869149ac7db00681b2dfa4a47463d3f73d01a":["bafca15d8e408346a67f4282ad1143b88023893b"],"55980207f1977bd1463465de1659b821347e2fa8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"471d806b28fa8f148222eb0c300dcab1047a391d":["ce0869149ac7db00681b2dfa4a47463d3f73d01a","55980207f1977bd1463465de1659b821347e2fa8"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["55980207f1977bd1463465de1659b821347e2fa8","471d806b28fa8f148222eb0c300dcab1047a391d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}