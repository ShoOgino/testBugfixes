{"path":"solr/solrj/src/java/org/apache/solr/recipe/RuleSorter.Preference#compare(Row,Row,boolean).mjava","commits":[{"id":"0cf93ce8d2bc0210731dd8d840f40b183df2c804","date":1489476316,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/RuleSorter.Preference#compare(Row,Row,boolean).mjava","pathOld":"/dev/null","sourceNew":"    // there are 2 modes of compare.\n    // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n    // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n    int compare(Row r1, Row r2, boolean recursive) {\n      Object o1 = recursive ? r1.cells[idx].val_ : r1.cells[idx].val;\n      Object o2 = recursive ? r2.cells[idx].val_ : r2.cells[idx].val;\n      int result = 0;\n      if (o1 instanceof Integer && o2 instanceof Integer) result = ((Integer) o1).compareTo((Integer) o2);\n      if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n      if (o1 instanceof Float && o2 instanceof Float) result = ((Float) o1).compareTo((Float) o2);\n      if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n      return result == 0 ? next == null ? 0 : next.compare(r1, r2, recursive) : sort.sortval * result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"226b3bf77af5749a90c81edd3d4168fd6e276a24","date":1490013063,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/RuleSorter.Preference#compare(Row,Row,boolean).mjava","sourceNew":null,"sourceOld":"    // there are 2 modes of compare.\n    // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n    // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n    int compare(Row r1, Row r2, boolean recursive) {\n      Object o1 = recursive ? r1.cells[idx].val_ : r1.cells[idx].val;\n      Object o2 = recursive ? r2.cells[idx].val_ : r2.cells[idx].val;\n      int result = 0;\n      if (o1 instanceof Integer && o2 instanceof Integer) result = ((Integer) o1).compareTo((Integer) o2);\n      if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n      if (o1 instanceof Float && o2 instanceof Float) result = ((Float) o1).compareTo((Float) o2);\n      if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n      return result == 0 ? next == null ? 0 : next.compare(r1, r2, recursive) : sort.sortval * result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"226b3bf77af5749a90c81edd3d4168fd6e276a24":["0cf93ce8d2bc0210731dd8d840f40b183df2c804"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0cf93ce8d2bc0210731dd8d840f40b183df2c804":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"226b3bf77af5749a90c81edd3d4168fd6e276a24":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cf93ce8d2bc0210731dd8d840f40b183df2c804","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0cf93ce8d2bc0210731dd8d840f40b183df2c804":["226b3bf77af5749a90c81edd3d4168fd6e276a24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["226b3bf77af5749a90c81edd3d4168fd6e276a24","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}