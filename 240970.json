{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterFloats().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterFloats().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterFloats().mjava","sourceNew":"  public void testFieldCacheRangeFilterFloats() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Float minIdO = Float.valueOf(minId + .5f);\n    Float medIdO = Float.valueOf(minIdO.floatValue() + ((float) (maxId-minId))/2.0f);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",Float.valueOf(Float.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",null,Float.valueOf(Float.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","sourceOld":"  public void testFieldCacheRangeFilterFloats() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Float minIdO = Float.valueOf(minId + .5f);\n    Float medIdO = Float.valueOf(minIdO.floatValue() + ((float) (maxId-minId))/2.0f);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",Float.valueOf(Float.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",null,Float.valueOf(Float.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterFloats().mjava","sourceNew":null,"sourceOld":"  public void testFieldCacheRangeFilterFloats() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Float minIdO = Float.valueOf(minId + .5f);\n    Float medIdO = Float.valueOf(minIdO.floatValue() + ((float) (maxId-minId))/2.0f);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",Float.valueOf(Float.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",null,Float.valueOf(Float.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}