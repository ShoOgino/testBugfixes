{"path":"solr/core/src/test/org/apache/solr/cloud/TestWaitForStateWithJettyShutdowns#testWaitForStateBeforeShutDown().mjava","commits":[{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWaitForStateWithJettyShutdowns#testWaitForStateBeforeShutDown().mjava","pathOld":"/dev/null","sourceNew":"  public void testWaitForStateBeforeShutDown() throws Exception {\n    final String col_name = \"test_col\";\n    final ExecutorService executor = ExecutorUtil.newMDCAwareFixedThreadPool\n      (1, new DefaultSolrThreadFactory(\"background_executor\"));\n    final MiniSolrCloudCluster cluster = new MiniSolrCloudCluster\n      (1, createTempDir(), JettyConfig.builder().build());\n    try {\n      log.info(\"Create our collection\");\n      CollectionAdminRequest.createCollection(col_name, \"_default\", 1, 1).process(cluster.getSolrClient());\n      \n      log.info(\"Sanity check that our collection has come online\");\n      cluster.getSolrClient().waitForState(col_name, 30, TimeUnit.SECONDS,\n                                           SolrCloudTestCase.clusterShape(1, 1));\n\n\n      // HACK implementation detail...\n      //\n      // we know that in the current implementation, waitForState invokes the predicate twice\n      // independently of the current state of the collection and/or wether the predicate succeeds.\n      // If this implementation detail changes, (ie: so that it's only invoked once)\n      // then this number needs to change -- but the test fundementally depends on the implementation\n      // calling the predicate at least once, which should also be neccessary for any future impl\n      // (to verify that it didn't \"miss\" the state change when creating the watcher)\n      final CountDownLatch latch = new CountDownLatch(2);\n      \n      final Future<?> backgroundWaitForState = executor.submit\n        (() -> {\n          try {\n            cluster.getSolrClient().waitForState(col_name, 180, TimeUnit.SECONDS,\n                                                 new LatchCountingPredicateWrapper(latch,\n                                                                                   clusterShape(1, 0)));\n          } catch (Exception e) {\n            log.error(\"background thread got exception\", e);\n            throw new RuntimeException(e);\n          }\n          return;\n        }, null);\n      \n      log.info(\"Awaiting latch...\");\n      if (! latch.await(120, TimeUnit.SECONDS)) {\n        fail(\"timed out Waiting a ridiculous amount of time for the waitForState latch -- did impl change?\");\n      }\n\n      log.info(\"Shutdown 1 node\");\n      final JettySolrRunner nodeToStop = cluster.getJettySolrRunner(0);\n      nodeToStop.stop();\n      log.info(\"Wait to confirm our node is fully shutdown\");\n      cluster.waitForJettyToStop(nodeToStop);\n\n      // now that we're confident that node has stoped, check if a waitForState\n      // call will detect the missing replica -- shouldn't need long wait times...\n      log.info(\"Checking Future result to see if waitForState finished successfully\");\n      try {\n        backgroundWaitForState.get();\n      } catch (ExecutionException e) {\n        log.error(\"background waitForState exception\", e);\n        throw e;\n      }\n      \n    } finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executor);\n      cluster.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cbf41d546781f95bb27d7f00a6c7c65570ee84ce"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbf41d546781f95bb27d7f00a6c7c65570ee84ce","date":1560810854,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWaitForStateWithJettyShutdowns#testWaitForStateBeforeShutDown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWaitForStateWithJettyShutdowns#testWaitForStateBeforeShutDown().mjava","sourceNew":"  public void testWaitForStateBeforeShutDown() throws Exception {\n    final String col_name = \"test_col\";\n    final ExecutorService executor = ExecutorUtil.newMDCAwareFixedThreadPool\n      (1, new DefaultSolrThreadFactory(\"background_executor\"));\n    final MiniSolrCloudCluster cluster = new MiniSolrCloudCluster\n      (1, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n      log.info(\"Create our collection\");\n      CollectionAdminRequest.createCollection(col_name, \"_default\", 1, 1).process(cluster.getSolrClient());\n      \n      log.info(\"Sanity check that our collection has come online\");\n      cluster.getSolrClient().waitForState(col_name, 30, TimeUnit.SECONDS,\n                                           SolrCloudTestCase.clusterShape(1, 1));\n\n\n      // HACK implementation detail...\n      //\n      // we know that in the current implementation, waitForState invokes the predicate twice\n      // independently of the current state of the collection and/or wether the predicate succeeds.\n      // If this implementation detail changes, (ie: so that it's only invoked once)\n      // then this number needs to change -- but the test fundementally depends on the implementation\n      // calling the predicate at least once, which should also be neccessary for any future impl\n      // (to verify that it didn't \"miss\" the state change when creating the watcher)\n      final CountDownLatch latch = new CountDownLatch(2);\n      \n      final Future<?> backgroundWaitForState = executor.submit\n        (() -> {\n          try {\n            cluster.getSolrClient().waitForState(col_name, 180, TimeUnit.SECONDS,\n                                                 new LatchCountingPredicateWrapper(latch,\n                                                                                   clusterShape(1, 0)));\n          } catch (Exception e) {\n            log.error(\"background thread got exception\", e);\n            throw new RuntimeException(e);\n          }\n          return;\n        }, null);\n      \n      log.info(\"Awaiting latch...\");\n      if (! latch.await(120, TimeUnit.SECONDS)) {\n        fail(\"timed out Waiting a ridiculous amount of time for the waitForState latch -- did impl change?\");\n      }\n\n      log.info(\"Shutdown 1 node\");\n      final JettySolrRunner nodeToStop = cluster.getJettySolrRunner(0);\n      nodeToStop.stop();\n      log.info(\"Wait to confirm our node is fully shutdown\");\n      cluster.waitForJettyToStop(nodeToStop);\n\n      // now that we're confident that node has stoped, check if a waitForState\n      // call will detect the missing replica -- shouldn't need long wait times...\n      log.info(\"Checking Future result to see if waitForState finished successfully\");\n      try {\n        backgroundWaitForState.get();\n      } catch (ExecutionException e) {\n        log.error(\"background waitForState exception\", e);\n        throw e;\n      }\n      \n    } finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executor);\n      cluster.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testWaitForStateBeforeShutDown() throws Exception {\n    final String col_name = \"test_col\";\n    final ExecutorService executor = ExecutorUtil.newMDCAwareFixedThreadPool\n      (1, new DefaultSolrThreadFactory(\"background_executor\"));\n    final MiniSolrCloudCluster cluster = new MiniSolrCloudCluster\n      (1, createTempDir(), JettyConfig.builder().build());\n    try {\n      log.info(\"Create our collection\");\n      CollectionAdminRequest.createCollection(col_name, \"_default\", 1, 1).process(cluster.getSolrClient());\n      \n      log.info(\"Sanity check that our collection has come online\");\n      cluster.getSolrClient().waitForState(col_name, 30, TimeUnit.SECONDS,\n                                           SolrCloudTestCase.clusterShape(1, 1));\n\n\n      // HACK implementation detail...\n      //\n      // we know that in the current implementation, waitForState invokes the predicate twice\n      // independently of the current state of the collection and/or wether the predicate succeeds.\n      // If this implementation detail changes, (ie: so that it's only invoked once)\n      // then this number needs to change -- but the test fundementally depends on the implementation\n      // calling the predicate at least once, which should also be neccessary for any future impl\n      // (to verify that it didn't \"miss\" the state change when creating the watcher)\n      final CountDownLatch latch = new CountDownLatch(2);\n      \n      final Future<?> backgroundWaitForState = executor.submit\n        (() -> {\n          try {\n            cluster.getSolrClient().waitForState(col_name, 180, TimeUnit.SECONDS,\n                                                 new LatchCountingPredicateWrapper(latch,\n                                                                                   clusterShape(1, 0)));\n          } catch (Exception e) {\n            log.error(\"background thread got exception\", e);\n            throw new RuntimeException(e);\n          }\n          return;\n        }, null);\n      \n      log.info(\"Awaiting latch...\");\n      if (! latch.await(120, TimeUnit.SECONDS)) {\n        fail(\"timed out Waiting a ridiculous amount of time for the waitForState latch -- did impl change?\");\n      }\n\n      log.info(\"Shutdown 1 node\");\n      final JettySolrRunner nodeToStop = cluster.getJettySolrRunner(0);\n      nodeToStop.stop();\n      log.info(\"Wait to confirm our node is fully shutdown\");\n      cluster.waitForJettyToStop(nodeToStop);\n\n      // now that we're confident that node has stoped, check if a waitForState\n      // call will detect the missing replica -- shouldn't need long wait times...\n      log.info(\"Checking Future result to see if waitForState finished successfully\");\n      try {\n        backgroundWaitForState.get();\n      } catch (ExecutionException e) {\n        log.error(\"background waitForState exception\", e);\n        throw e;\n      }\n      \n    } finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executor);\n      cluster.shutdown();\n    }\n  }\n\n","bugFix":["7b366e7dd3172289251a86be96031af4002cd19c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWaitForStateWithJettyShutdowns#testWaitForStateBeforeShutDown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWaitForStateWithJettyShutdowns#testWaitForStateBeforeShutDown().mjava","sourceNew":"  public void testWaitForStateBeforeShutDown() throws Exception {\n    final String col_name = \"test_col\";\n    final ExecutorService executor = ExecutorUtil.newMDCAwareFixedThreadPool\n      (1, new SolrNamedThreadFactory(\"background_executor\"));\n    final MiniSolrCloudCluster cluster = new MiniSolrCloudCluster\n      (1, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n      log.info(\"Create our collection\");\n      CollectionAdminRequest.createCollection(col_name, \"_default\", 1, 1).process(cluster.getSolrClient());\n      \n      log.info(\"Sanity check that our collection has come online\");\n      cluster.getSolrClient().waitForState(col_name, 30, TimeUnit.SECONDS,\n                                           SolrCloudTestCase.clusterShape(1, 1));\n\n\n      // HACK implementation detail...\n      //\n      // we know that in the current implementation, waitForState invokes the predicate twice\n      // independently of the current state of the collection and/or wether the predicate succeeds.\n      // If this implementation detail changes, (ie: so that it's only invoked once)\n      // then this number needs to change -- but the test fundementally depends on the implementation\n      // calling the predicate at least once, which should also be neccessary for any future impl\n      // (to verify that it didn't \"miss\" the state change when creating the watcher)\n      final CountDownLatch latch = new CountDownLatch(2);\n      \n      final Future<?> backgroundWaitForState = executor.submit\n        (() -> {\n          try {\n            cluster.getSolrClient().waitForState(col_name, 180, TimeUnit.SECONDS,\n                                                 new LatchCountingPredicateWrapper(latch,\n                                                                                   clusterShape(1, 0)));\n          } catch (Exception e) {\n            log.error(\"background thread got exception\", e);\n            throw new RuntimeException(e);\n          }\n          return;\n        }, null);\n      \n      log.info(\"Awaiting latch...\");\n      if (! latch.await(120, TimeUnit.SECONDS)) {\n        fail(\"timed out Waiting a ridiculous amount of time for the waitForState latch -- did impl change?\");\n      }\n\n      log.info(\"Shutdown 1 node\");\n      final JettySolrRunner nodeToStop = cluster.getJettySolrRunner(0);\n      nodeToStop.stop();\n      log.info(\"Wait to confirm our node is fully shutdown\");\n      cluster.waitForJettyToStop(nodeToStop);\n\n      // now that we're confident that node has stoped, check if a waitForState\n      // call will detect the missing replica -- shouldn't need long wait times...\n      log.info(\"Checking Future result to see if waitForState finished successfully\");\n      try {\n        backgroundWaitForState.get();\n      } catch (ExecutionException e) {\n        log.error(\"background waitForState exception\", e);\n        throw e;\n      }\n      \n    } finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executor);\n      cluster.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testWaitForStateBeforeShutDown() throws Exception {\n    final String col_name = \"test_col\";\n    final ExecutorService executor = ExecutorUtil.newMDCAwareFixedThreadPool\n      (1, new DefaultSolrThreadFactory(\"background_executor\"));\n    final MiniSolrCloudCluster cluster = new MiniSolrCloudCluster\n      (1, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n      log.info(\"Create our collection\");\n      CollectionAdminRequest.createCollection(col_name, \"_default\", 1, 1).process(cluster.getSolrClient());\n      \n      log.info(\"Sanity check that our collection has come online\");\n      cluster.getSolrClient().waitForState(col_name, 30, TimeUnit.SECONDS,\n                                           SolrCloudTestCase.clusterShape(1, 1));\n\n\n      // HACK implementation detail...\n      //\n      // we know that in the current implementation, waitForState invokes the predicate twice\n      // independently of the current state of the collection and/or wether the predicate succeeds.\n      // If this implementation detail changes, (ie: so that it's only invoked once)\n      // then this number needs to change -- but the test fundementally depends on the implementation\n      // calling the predicate at least once, which should also be neccessary for any future impl\n      // (to verify that it didn't \"miss\" the state change when creating the watcher)\n      final CountDownLatch latch = new CountDownLatch(2);\n      \n      final Future<?> backgroundWaitForState = executor.submit\n        (() -> {\n          try {\n            cluster.getSolrClient().waitForState(col_name, 180, TimeUnit.SECONDS,\n                                                 new LatchCountingPredicateWrapper(latch,\n                                                                                   clusterShape(1, 0)));\n          } catch (Exception e) {\n            log.error(\"background thread got exception\", e);\n            throw new RuntimeException(e);\n          }\n          return;\n        }, null);\n      \n      log.info(\"Awaiting latch...\");\n      if (! latch.await(120, TimeUnit.SECONDS)) {\n        fail(\"timed out Waiting a ridiculous amount of time for the waitForState latch -- did impl change?\");\n      }\n\n      log.info(\"Shutdown 1 node\");\n      final JettySolrRunner nodeToStop = cluster.getJettySolrRunner(0);\n      nodeToStop.stop();\n      log.info(\"Wait to confirm our node is fully shutdown\");\n      cluster.waitForJettyToStop(nodeToStop);\n\n      // now that we're confident that node has stoped, check if a waitForState\n      // call will detect the missing replica -- shouldn't need long wait times...\n      log.info(\"Checking Future result to see if waitForState finished successfully\");\n      try {\n        backgroundWaitForState.get();\n      } catch (ExecutionException e) {\n        log.error(\"background waitForState exception\", e);\n        throw e;\n      }\n      \n    } finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executor);\n      cluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cbf41d546781f95bb27d7f00a6c7c65570ee84ce":["7b366e7dd3172289251a86be96031af4002cd19c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["cbf41d546781f95bb27d7f00a6c7c65570ee84ce"],"7b366e7dd3172289251a86be96031af4002cd19c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"]},"commit2Childs":{"cbf41d546781f95bb27d7f00a6c7c65570ee84ce":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b366e7dd3172289251a86be96031af4002cd19c"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7b366e7dd3172289251a86be96031af4002cd19c":["cbf41d546781f95bb27d7f00a6c7c65570ee84ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}