{"path":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#verify(double[],double[]).mjava","commits":[{"id":"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96","date":1433340999,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#verify(double[],double[]).mjava","pathOld":"/dev/null","sourceNew":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), maxPointsInLeaf, 1024*1024);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = new BKDTreeDocValuesFormat(maxPointsInLeaf, maxPointsSortInHeap);\n    Codec codec = new Lucene50Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = newFSDirectory(createTempDir(\"TestBKDTree\"));\n    } else {\n      dir = newDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new BKDPointField(\"point\", lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters;iter++) {\n              double lat0 = randomLat();\n              double lat1 = randomLat();\n              double lon0 = randomLon();\n              double lon1 = randomLon();\n\n              if (lat1 < lat0) {\n                double x = lat0;\n                lat0 = lat1;\n                lat1 = x;\n              }\n\n              if (lon1 < lon0) {\n                double x = lon0;\n                lon0 = lon1;\n                lon1 = x;\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"\\nTEST: iter=\" + iter + \" lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1);\n              }\n\n              Query query;\n              if (random().nextBoolean()) {\n                query = new BKDPointInBBoxQuery(\"point\", lat0, lat1, lon0, lon1);\n              } else {\n                double[] lats = new double[5];\n                double[] lons = new double[5];\n                lats[0] = lat0;\n                lons[0] = lon0;\n                lats[1] = lat1;\n                lons[1] = lon0;\n                lats[2] = lat1;\n                lons[2] = lon1;\n                lats[3] = lat0;\n                lons[3] = lon1;\n                lats[4] = lat0;\n                lons[4] = lon0;\n                query = new BKDPointInPolygonQuery(\"point\", lats, lons);\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.out.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                boolean expected = deleted.contains(id) == false && rectContainsPointEnc(lat0, lat1, lon0, lon1, lats[id], lons[id]);\n                if (hits.get(docID) != expected) {\n                  fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (bbox: lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1 + \") expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \" query=\" + query);\n                }\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"791520c00f0e9d64d4099584ec4a9b826662c6da","date":1433377732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#verify(double[],double[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#verify(double[],double[]).mjava","sourceNew":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), maxPointsInLeaf, 1024*1024);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = new BKDTreeDocValuesFormat(maxPointsInLeaf, maxPointsSortInHeap);\n    Codec codec = new Lucene50Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = newFSDirectory(createTempDir(\"TestBKDTree\"));\n    } else {\n      dir = newDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new BKDPointField(\"point\", lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n              double lat0 = randomLat();\n              double lat1 = randomLat();\n              double lon0 = randomLon();\n              double lon1 = randomLon();\n\n              if (lat1 < lat0) {\n                double x = lat0;\n                lat0 = lat1;\n                lat1 = x;\n              }\n\n              if (lon1 < lon0) {\n                double x = lon0;\n                lon0 = lon1;\n                lon1 = x;\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"\\nTEST: iter=\" + iter + \" lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1);\n              }\n\n              Query query;\n              if (random().nextBoolean()) {\n                query = new BKDPointInBBoxQuery(\"point\", lat0, lat1, lon0, lon1);\n              } else {\n                double[] lats = new double[5];\n                double[] lons = new double[5];\n                lats[0] = lat0;\n                lons[0] = lon0;\n                lats[1] = lat1;\n                lons[1] = lon0;\n                lats[2] = lat1;\n                lons[2] = lon1;\n                lats[3] = lat0;\n                lons[3] = lon1;\n                lats[4] = lat0;\n                lons[4] = lon0;\n                query = new BKDPointInPolygonQuery(\"point\", lats, lons);\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.out.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                boolean expected = deleted.contains(id) == false && rectContainsPointEnc(lat0, lat1, lon0, lon1, lats[id], lons[id]);\n                if (hits.get(docID) != expected) {\n                  if (query instanceof BKDPointInPolygonQuery &&\n                      (Math.abs(lat0-lats[id]) < TOLERANCE ||\n                       Math.abs(lat1-lats[id]) < TOLERANCE ||\n                       Math.abs(lon0-lons[id]) < TOLERANCE ||\n                       Math.abs(lon1-lons[id]) < TOLERANCE)) {\n                    // The poly check quantizes slightly differently, so we allow for boundary cases to disagree\n                  } else {\n                    // We do exact quantized comparison so the bbox query should never disagree:\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (bbox: lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1 + \") expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \" query=\" + query);\n                  }\n                }\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), maxPointsInLeaf, 1024*1024);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = new BKDTreeDocValuesFormat(maxPointsInLeaf, maxPointsSortInHeap);\n    Codec codec = new Lucene50Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = newFSDirectory(createTempDir(\"TestBKDTree\"));\n    } else {\n      dir = newDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new BKDPointField(\"point\", lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters;iter++) {\n              double lat0 = randomLat();\n              double lat1 = randomLat();\n              double lon0 = randomLon();\n              double lon1 = randomLon();\n\n              if (lat1 < lat0) {\n                double x = lat0;\n                lat0 = lat1;\n                lat1 = x;\n              }\n\n              if (lon1 < lon0) {\n                double x = lon0;\n                lon0 = lon1;\n                lon1 = x;\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"\\nTEST: iter=\" + iter + \" lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1);\n              }\n\n              Query query;\n              if (random().nextBoolean()) {\n                query = new BKDPointInBBoxQuery(\"point\", lat0, lat1, lon0, lon1);\n              } else {\n                double[] lats = new double[5];\n                double[] lons = new double[5];\n                lats[0] = lat0;\n                lons[0] = lon0;\n                lats[1] = lat1;\n                lons[1] = lon0;\n                lats[2] = lat1;\n                lons[2] = lon1;\n                lats[3] = lat0;\n                lons[3] = lon1;\n                lats[4] = lat0;\n                lons[4] = lon0;\n                query = new BKDPointInPolygonQuery(\"point\", lats, lons);\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.out.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                boolean expected = deleted.contains(id) == false && rectContainsPointEnc(lat0, lat1, lon0, lon1, lats[id], lons[id]);\n                if (hits.get(docID) != expected) {\n                  fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (bbox: lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1 + \") expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \" query=\" + query);\n                }\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#verify(double[],double[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#verify(double[],double[]).mjava","sourceNew":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), maxPointsInLeaf, 1024*1024);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = new BKDTreeDocValuesFormat(maxPointsInLeaf, maxPointsSortInHeap);\n    Codec codec = new Lucene53Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = newFSDirectory(createTempDir(\"TestBKDTree\"));\n    } else {\n      dir = newDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new BKDPointField(\"point\", lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n              double lat0 = randomLat();\n              double lat1 = randomLat();\n              double lon0 = randomLon();\n              double lon1 = randomLon();\n\n              if (lat1 < lat0) {\n                double x = lat0;\n                lat0 = lat1;\n                lat1 = x;\n              }\n\n              if (lon1 < lon0) {\n                double x = lon0;\n                lon0 = lon1;\n                lon1 = x;\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"\\nTEST: iter=\" + iter + \" lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1);\n              }\n\n              Query query;\n              if (random().nextBoolean()) {\n                query = new BKDPointInBBoxQuery(\"point\", lat0, lat1, lon0, lon1);\n              } else {\n                double[] lats = new double[5];\n                double[] lons = new double[5];\n                lats[0] = lat0;\n                lons[0] = lon0;\n                lats[1] = lat1;\n                lons[1] = lon0;\n                lats[2] = lat1;\n                lons[2] = lon1;\n                lats[3] = lat0;\n                lons[3] = lon1;\n                lats[4] = lat0;\n                lons[4] = lon0;\n                query = new BKDPointInPolygonQuery(\"point\", lats, lons);\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.out.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                boolean expected = deleted.contains(id) == false && rectContainsPointEnc(lat0, lat1, lon0, lon1, lats[id], lons[id]);\n                if (hits.get(docID) != expected) {\n                  if (query instanceof BKDPointInPolygonQuery &&\n                      (Math.abs(lat0-lats[id]) < TOLERANCE ||\n                       Math.abs(lat1-lats[id]) < TOLERANCE ||\n                       Math.abs(lon0-lons[id]) < TOLERANCE ||\n                       Math.abs(lon1-lons[id]) < TOLERANCE)) {\n                    // The poly check quantizes slightly differently, so we allow for boundary cases to disagree\n                  } else {\n                    // We do exact quantized comparison so the bbox query should never disagree:\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (bbox: lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1 + \") expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \" query=\" + query);\n                  }\n                }\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), maxPointsInLeaf, 1024*1024);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = new BKDTreeDocValuesFormat(maxPointsInLeaf, maxPointsSortInHeap);\n    Codec codec = new Lucene50Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = newFSDirectory(createTempDir(\"TestBKDTree\"));\n    } else {\n      dir = newDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new BKDPointField(\"point\", lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n              double lat0 = randomLat();\n              double lat1 = randomLat();\n              double lon0 = randomLon();\n              double lon1 = randomLon();\n\n              if (lat1 < lat0) {\n                double x = lat0;\n                lat0 = lat1;\n                lat1 = x;\n              }\n\n              if (lon1 < lon0) {\n                double x = lon0;\n                lon0 = lon1;\n                lon1 = x;\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"\\nTEST: iter=\" + iter + \" lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1);\n              }\n\n              Query query;\n              if (random().nextBoolean()) {\n                query = new BKDPointInBBoxQuery(\"point\", lat0, lat1, lon0, lon1);\n              } else {\n                double[] lats = new double[5];\n                double[] lons = new double[5];\n                lats[0] = lat0;\n                lons[0] = lon0;\n                lats[1] = lat1;\n                lons[1] = lon0;\n                lats[2] = lat1;\n                lons[2] = lon1;\n                lats[3] = lat0;\n                lons[3] = lon1;\n                lats[4] = lat0;\n                lons[4] = lon0;\n                query = new BKDPointInPolygonQuery(\"point\", lats, lons);\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.out.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                boolean expected = deleted.contains(id) == false && rectContainsPointEnc(lat0, lat1, lon0, lon1, lats[id], lons[id]);\n                if (hits.get(docID) != expected) {\n                  if (query instanceof BKDPointInPolygonQuery &&\n                      (Math.abs(lat0-lats[id]) < TOLERANCE ||\n                       Math.abs(lat1-lats[id]) < TOLERANCE ||\n                       Math.abs(lon0-lons[id]) < TOLERANCE ||\n                       Math.abs(lon1-lons[id]) < TOLERANCE)) {\n                    // The poly check quantizes slightly differently, so we allow for boundary cases to disagree\n                  } else {\n                    // We do exact quantized comparison so the bbox query should never disagree:\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (bbox: lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1 + \") expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \" query=\" + query);\n                  }\n                }\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2949cf6bcf4a8cb192de03ca4f43f301131f1c80","date":1434363736,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#verify(double[],double[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#verify(double[],double[]).mjava","sourceNew":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), maxPointsInLeaf, 1024*1024);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = new BKDTreeDocValuesFormat(maxPointsInLeaf, maxPointsSortInHeap);\n    Codec codec = new Lucene53Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = newFSDirectory(createTempDir(\"TestBKDTree\"));\n    } else {\n      dir = newDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new BKDPointField(\"point\", lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n              double lat0 = randomLat();\n              double lat1 = randomLat();\n              double lon0 = randomLon();\n              double lon1 = randomLon();\n\n              if (lat1 < lat0) {\n                double x = lat0;\n                lat0 = lat1;\n                lat1 = x;\n              }\n\n              boolean crossesDateLine;\n              if (lon1 < lon0) {\n                if (random().nextBoolean()) {\n                  double x = lon0;\n                  lon0 = lon1;\n                  lon1 = x;\n                  crossesDateLine = false;\n                } else {\n                  crossesDateLine = true;\n                }\n              } else {\n                crossesDateLine = false;\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"\\nTEST: iter=\" + iter + \" lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1 + \" crossesDateLine=\" + crossesDateLine);\n              }\n\n              Query query;\n              // TODO: get poly query working with dateline crossing too (how?)!\n              if (crossesDateLine || random().nextBoolean()) {\n                query = new BKDPointInBBoxQuery(\"point\", lat0, lat1, lon0, lon1);\n              } else {\n                double[] lats = new double[5];\n                double[] lons = new double[5];\n                lats[0] = lat0;\n                lons[0] = lon0;\n                lats[1] = lat1;\n                lons[1] = lon0;\n                lats[2] = lat1;\n                lons[2] = lon1;\n                lats[3] = lat0;\n                lons[3] = lon1;\n                lats[4] = lat0;\n                lons[4] = lon0;\n                query = new BKDPointInPolygonQuery(\"point\", lats, lons);\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.out.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                boolean expected = deleted.contains(id) == false && rectContainsPointEnc(lat0, lat1, lon0, lon1, lats[id], lons[id]);\n                if (hits.get(docID) != expected) {\n                  if (query instanceof BKDPointInPolygonQuery &&\n                      (Math.abs(lat0-lats[id]) < TOLERANCE ||\n                       Math.abs(lat1-lats[id]) < TOLERANCE ||\n                       Math.abs(lon0-lons[id]) < TOLERANCE ||\n                       Math.abs(lon1-lons[id]) < TOLERANCE)) {\n                    // The poly check quantizes slightly differently, so we allow for boundary cases to disagree\n                  } else {\n                    // We do exact quantized comparison so the bbox query should never disagree:\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (bbox: lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1 + \") expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \" query=\" + query + \" crossesDateLine=\" + crossesDateLine);\n                  }\n                }\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), maxPointsInLeaf, 1024*1024);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = new BKDTreeDocValuesFormat(maxPointsInLeaf, maxPointsSortInHeap);\n    Codec codec = new Lucene53Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = newFSDirectory(createTempDir(\"TestBKDTree\"));\n    } else {\n      dir = newDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new BKDPointField(\"point\", lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n              double lat0 = randomLat();\n              double lat1 = randomLat();\n              double lon0 = randomLon();\n              double lon1 = randomLon();\n\n              if (lat1 < lat0) {\n                double x = lat0;\n                lat0 = lat1;\n                lat1 = x;\n              }\n\n              if (lon1 < lon0) {\n                double x = lon0;\n                lon0 = lon1;\n                lon1 = x;\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"\\nTEST: iter=\" + iter + \" lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1);\n              }\n\n              Query query;\n              if (random().nextBoolean()) {\n                query = new BKDPointInBBoxQuery(\"point\", lat0, lat1, lon0, lon1);\n              } else {\n                double[] lats = new double[5];\n                double[] lons = new double[5];\n                lats[0] = lat0;\n                lons[0] = lon0;\n                lats[1] = lat1;\n                lons[1] = lon0;\n                lats[2] = lat1;\n                lons[2] = lon1;\n                lats[3] = lat0;\n                lons[3] = lon1;\n                lats[4] = lat0;\n                lons[4] = lon0;\n                query = new BKDPointInPolygonQuery(\"point\", lats, lons);\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.out.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                boolean expected = deleted.contains(id) == false && rectContainsPointEnc(lat0, lat1, lon0, lon1, lats[id], lons[id]);\n                if (hits.get(docID) != expected) {\n                  if (query instanceof BKDPointInPolygonQuery &&\n                      (Math.abs(lat0-lats[id]) < TOLERANCE ||\n                       Math.abs(lat1-lats[id]) < TOLERANCE ||\n                       Math.abs(lon0-lons[id]) < TOLERANCE ||\n                       Math.abs(lon1-lons[id]) < TOLERANCE)) {\n                    // The poly check quantizes slightly differently, so we allow for boundary cases to disagree\n                  } else {\n                    // We do exact quantized comparison so the bbox query should never disagree:\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (bbox: lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1 + \") expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \" query=\" + query);\n                  }\n                }\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89a0e70ecaf27e127004b7fbfad2e02d52ea1f8f","date":1439766922,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#verify(double[],double[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#verify(double[],double[]).mjava","sourceNew":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = getDocValuesFormat();\n    Codec codec = new Lucene53Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = newFSDirectory(createTempDir(\"TestBKDTree\"));\n    } else {\n      dir = newDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new BKDPointField(\"point\", lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n              double lat0 = randomLat();\n              double lat1 = randomLat();\n              double lon0 = randomLon();\n              double lon1 = randomLon();\n\n              if (lat1 < lat0) {\n                double x = lat0;\n                lat0 = lat1;\n                lat1 = x;\n              }\n\n              boolean crossesDateLine;\n              if (lon1 < lon0) {\n                if (random().nextBoolean()) {\n                  double x = lon0;\n                  lon0 = lon1;\n                  lon1 = x;\n                  crossesDateLine = false;\n                } else {\n                  crossesDateLine = true;\n                }\n              } else {\n                crossesDateLine = false;\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"\\nTEST: iter=\" + iter + \" lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1 + \" crossesDateLine=\" + crossesDateLine);\n              }\n\n              Query query;\n              // TODO: get poly query working with dateline crossing too (how?)!\n              if (crossesDateLine || random().nextBoolean()) {\n                query = new BKDPointInBBoxQuery(\"point\", lat0, lat1, lon0, lon1);\n              } else {\n                double[] lats = new double[5];\n                double[] lons = new double[5];\n                lats[0] = lat0;\n                lons[0] = lon0;\n                lats[1] = lat1;\n                lons[1] = lon0;\n                lats[2] = lat1;\n                lons[2] = lon1;\n                lats[3] = lat0;\n                lons[3] = lon1;\n                lats[4] = lat0;\n                lons[4] = lon0;\n                query = new BKDPointInPolygonQuery(\"point\", lats, lons);\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.out.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                boolean expected = deleted.contains(id) == false && rectContainsPointEnc(lat0, lat1, lon0, lon1, lats[id], lons[id]);\n                if (hits.get(docID) != expected) {\n                  if (query instanceof BKDPointInPolygonQuery &&\n                      (Math.abs(lat0-lats[id]) < TOLERANCE ||\n                       Math.abs(lat1-lats[id]) < TOLERANCE ||\n                       Math.abs(lon0-lons[id]) < TOLERANCE ||\n                       Math.abs(lon1-lons[id]) < TOLERANCE)) {\n                    // The poly check quantizes slightly differently, so we allow for boundary cases to disagree\n                  } else {\n                    // We do exact quantized comparison so the bbox query should never disagree:\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (bbox: lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1 + \") expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \" query=\" + query + \" crossesDateLine=\" + crossesDateLine);\n                  }\n                }\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), maxPointsInLeaf, 1024*1024);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = new BKDTreeDocValuesFormat(maxPointsInLeaf, maxPointsSortInHeap);\n    Codec codec = new Lucene53Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = newFSDirectory(createTempDir(\"TestBKDTree\"));\n    } else {\n      dir = newDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new BKDPointField(\"point\", lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n              double lat0 = randomLat();\n              double lat1 = randomLat();\n              double lon0 = randomLon();\n              double lon1 = randomLon();\n\n              if (lat1 < lat0) {\n                double x = lat0;\n                lat0 = lat1;\n                lat1 = x;\n              }\n\n              boolean crossesDateLine;\n              if (lon1 < lon0) {\n                if (random().nextBoolean()) {\n                  double x = lon0;\n                  lon0 = lon1;\n                  lon1 = x;\n                  crossesDateLine = false;\n                } else {\n                  crossesDateLine = true;\n                }\n              } else {\n                crossesDateLine = false;\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"\\nTEST: iter=\" + iter + \" lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1 + \" crossesDateLine=\" + crossesDateLine);\n              }\n\n              Query query;\n              // TODO: get poly query working with dateline crossing too (how?)!\n              if (crossesDateLine || random().nextBoolean()) {\n                query = new BKDPointInBBoxQuery(\"point\", lat0, lat1, lon0, lon1);\n              } else {\n                double[] lats = new double[5];\n                double[] lons = new double[5];\n                lats[0] = lat0;\n                lons[0] = lon0;\n                lats[1] = lat1;\n                lons[1] = lon0;\n                lats[2] = lat1;\n                lons[2] = lon1;\n                lats[3] = lat0;\n                lons[3] = lon1;\n                lats[4] = lat0;\n                lons[4] = lon0;\n                query = new BKDPointInPolygonQuery(\"point\", lats, lons);\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.out.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                boolean expected = deleted.contains(id) == false && rectContainsPointEnc(lat0, lat1, lon0, lon1, lats[id], lons[id]);\n                if (hits.get(docID) != expected) {\n                  if (query instanceof BKDPointInPolygonQuery &&\n                      (Math.abs(lat0-lats[id]) < TOLERANCE ||\n                       Math.abs(lat1-lats[id]) < TOLERANCE ||\n                       Math.abs(lon0-lons[id]) < TOLERANCE ||\n                       Math.abs(lon1-lons[id]) < TOLERANCE)) {\n                    // The poly check quantizes slightly differently, so we allow for boundary cases to disagree\n                  } else {\n                    // We do exact quantized comparison so the bbox query should never disagree:\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (bbox: lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1 + \") expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \" query=\" + query + \" crossesDateLine=\" + crossesDateLine);\n                  }\n                }\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#verify(double[],double[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#verify(double[],double[]).mjava","sourceNew":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = getDocValuesFormat();\n    Codec codec = new Lucene53Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = newFSDirectory(createTempDir(\"TestBKDTree\"));\n    } else {\n      dir = getDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new BKDPointField(\"point\", lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n              double lat0 = randomLat();\n              double lat1 = randomLat();\n              double lon0 = randomLon();\n              double lon1 = randomLon();\n\n              if (lat1 < lat0) {\n                double x = lat0;\n                lat0 = lat1;\n                lat1 = x;\n              }\n\n              boolean crossesDateLine;\n              if (lon1 < lon0) {\n                if (random().nextBoolean()) {\n                  double x = lon0;\n                  lon0 = lon1;\n                  lon1 = x;\n                  crossesDateLine = false;\n                } else {\n                  crossesDateLine = true;\n                }\n              } else {\n                crossesDateLine = false;\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"\\nTEST: iter=\" + iter + \" lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1 + \" crossesDateLine=\" + crossesDateLine);\n              }\n\n              Query query;\n              // TODO: get poly query working with dateline crossing too (how?)!\n              if (crossesDateLine || random().nextBoolean()) {\n                query = new BKDPointInBBoxQuery(\"point\", lat0, lat1, lon0, lon1);\n              } else {\n                double[] lats = new double[5];\n                double[] lons = new double[5];\n                lats[0] = lat0;\n                lons[0] = lon0;\n                lats[1] = lat1;\n                lons[1] = lon0;\n                lats[2] = lat1;\n                lons[2] = lon1;\n                lats[3] = lat0;\n                lons[3] = lon1;\n                lats[4] = lat0;\n                lons[4] = lon0;\n                query = new BKDPointInPolygonQuery(\"point\", lats, lons);\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.out.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                boolean expected = deleted.contains(id) == false && rectContainsPointEnc(lat0, lat1, lon0, lon1, lats[id], lons[id]);\n                if (hits.get(docID) != expected) {\n                  if (query instanceof BKDPointInPolygonQuery &&\n                      (Math.abs(lat0-lats[id]) < TOLERANCE ||\n                       Math.abs(lat1-lats[id]) < TOLERANCE ||\n                       Math.abs(lon0-lons[id]) < TOLERANCE ||\n                       Math.abs(lon1-lons[id]) < TOLERANCE)) {\n                    // The poly check quantizes slightly differently, so we allow for boundary cases to disagree\n                  } else {\n                    // We do exact quantized comparison so the bbox query should never disagree:\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (bbox: lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1 + \") expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \" query=\" + query + \" crossesDateLine=\" + crossesDateLine);\n                  }\n                }\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = getDocValuesFormat();\n    Codec codec = new Lucene53Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = newFSDirectory(createTempDir(\"TestBKDTree\"));\n    } else {\n      dir = newDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new BKDPointField(\"point\", lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n              double lat0 = randomLat();\n              double lat1 = randomLat();\n              double lon0 = randomLon();\n              double lon1 = randomLon();\n\n              if (lat1 < lat0) {\n                double x = lat0;\n                lat0 = lat1;\n                lat1 = x;\n              }\n\n              boolean crossesDateLine;\n              if (lon1 < lon0) {\n                if (random().nextBoolean()) {\n                  double x = lon0;\n                  lon0 = lon1;\n                  lon1 = x;\n                  crossesDateLine = false;\n                } else {\n                  crossesDateLine = true;\n                }\n              } else {\n                crossesDateLine = false;\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"\\nTEST: iter=\" + iter + \" lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1 + \" crossesDateLine=\" + crossesDateLine);\n              }\n\n              Query query;\n              // TODO: get poly query working with dateline crossing too (how?)!\n              if (crossesDateLine || random().nextBoolean()) {\n                query = new BKDPointInBBoxQuery(\"point\", lat0, lat1, lon0, lon1);\n              } else {\n                double[] lats = new double[5];\n                double[] lons = new double[5];\n                lats[0] = lat0;\n                lons[0] = lon0;\n                lats[1] = lat1;\n                lons[1] = lon0;\n                lats[2] = lat1;\n                lons[2] = lon1;\n                lats[3] = lat0;\n                lons[3] = lon1;\n                lats[4] = lat0;\n                lons[4] = lon0;\n                query = new BKDPointInPolygonQuery(\"point\", lats, lons);\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.out.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                boolean expected = deleted.contains(id) == false && rectContainsPointEnc(lat0, lat1, lon0, lon1, lats[id], lons[id]);\n                if (hits.get(docID) != expected) {\n                  if (query instanceof BKDPointInPolygonQuery &&\n                      (Math.abs(lat0-lats[id]) < TOLERANCE ||\n                       Math.abs(lat1-lats[id]) < TOLERANCE ||\n                       Math.abs(lon0-lons[id]) < TOLERANCE ||\n                       Math.abs(lon1-lons[id]) < TOLERANCE)) {\n                    // The poly check quantizes slightly differently, so we allow for boundary cases to disagree\n                  } else {\n                    // We do exact quantized comparison so the bbox query should never disagree:\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (bbox: lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1 + \") expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \" query=\" + query + \" crossesDateLine=\" + crossesDateLine);\n                  }\n                }\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a6fe0cad9503f2c3eaca4de8c4f80a9eb14f0","date":1445351343,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#verify(double[],double[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#verify(double[],double[]).mjava","sourceNew":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = getDocValuesFormat();\n    Codec codec = new Lucene53Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = noVirusChecker(newFSDirectory(createTempDir(\"TestBKDTree\")));\n    } else {\n      dir = getDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new BKDPointField(\"point\", lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n              double lat0 = randomLat();\n              double lat1 = randomLat();\n              double lon0 = randomLon();\n              double lon1 = randomLon();\n\n              if (lat1 < lat0) {\n                double x = lat0;\n                lat0 = lat1;\n                lat1 = x;\n              }\n\n              boolean crossesDateLine;\n              if (lon1 < lon0) {\n                if (random().nextBoolean()) {\n                  double x = lon0;\n                  lon0 = lon1;\n                  lon1 = x;\n                  crossesDateLine = false;\n                } else {\n                  crossesDateLine = true;\n                }\n              } else {\n                crossesDateLine = false;\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"\\nTEST: iter=\" + iter + \" lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1 + \" crossesDateLine=\" + crossesDateLine);\n              }\n\n              Query query;\n              // TODO: get poly query working with dateline crossing too (how?)!\n              if (crossesDateLine || random().nextBoolean()) {\n                query = new BKDPointInBBoxQuery(\"point\", lat0, lat1, lon0, lon1);\n              } else {\n                double[] lats = new double[5];\n                double[] lons = new double[5];\n                lats[0] = lat0;\n                lons[0] = lon0;\n                lats[1] = lat1;\n                lons[1] = lon0;\n                lats[2] = lat1;\n                lons[2] = lon1;\n                lats[3] = lat0;\n                lons[3] = lon1;\n                lats[4] = lat0;\n                lons[4] = lon0;\n                query = new BKDPointInPolygonQuery(\"point\", lats, lons);\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.out.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                boolean expected = deleted.contains(id) == false && rectContainsPointEnc(lat0, lat1, lon0, lon1, lats[id], lons[id]);\n                if (hits.get(docID) != expected) {\n                  if (query instanceof BKDPointInPolygonQuery &&\n                      (Math.abs(lat0-lats[id]) < TOLERANCE ||\n                       Math.abs(lat1-lats[id]) < TOLERANCE ||\n                       Math.abs(lon0-lons[id]) < TOLERANCE ||\n                       Math.abs(lon1-lons[id]) < TOLERANCE)) {\n                    // The poly check quantizes slightly differently, so we allow for boundary cases to disagree\n                  } else {\n                    // We do exact quantized comparison so the bbox query should never disagree:\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (bbox: lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1 + \") expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \" query=\" + query + \" crossesDateLine=\" + crossesDateLine);\n                  }\n                }\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = getDocValuesFormat();\n    Codec codec = new Lucene53Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = newFSDirectory(createTempDir(\"TestBKDTree\"));\n    } else {\n      dir = getDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new BKDPointField(\"point\", lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n              double lat0 = randomLat();\n              double lat1 = randomLat();\n              double lon0 = randomLon();\n              double lon1 = randomLon();\n\n              if (lat1 < lat0) {\n                double x = lat0;\n                lat0 = lat1;\n                lat1 = x;\n              }\n\n              boolean crossesDateLine;\n              if (lon1 < lon0) {\n                if (random().nextBoolean()) {\n                  double x = lon0;\n                  lon0 = lon1;\n                  lon1 = x;\n                  crossesDateLine = false;\n                } else {\n                  crossesDateLine = true;\n                }\n              } else {\n                crossesDateLine = false;\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"\\nTEST: iter=\" + iter + \" lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1 + \" crossesDateLine=\" + crossesDateLine);\n              }\n\n              Query query;\n              // TODO: get poly query working with dateline crossing too (how?)!\n              if (crossesDateLine || random().nextBoolean()) {\n                query = new BKDPointInBBoxQuery(\"point\", lat0, lat1, lon0, lon1);\n              } else {\n                double[] lats = new double[5];\n                double[] lons = new double[5];\n                lats[0] = lat0;\n                lons[0] = lon0;\n                lats[1] = lat1;\n                lons[1] = lon0;\n                lats[2] = lat1;\n                lons[2] = lon1;\n                lats[3] = lat0;\n                lons[3] = lon1;\n                lats[4] = lat0;\n                lons[4] = lon0;\n                query = new BKDPointInPolygonQuery(\"point\", lats, lons);\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.out.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                boolean expected = deleted.contains(id) == false && rectContainsPointEnc(lat0, lat1, lon0, lon1, lats[id], lons[id]);\n                if (hits.get(docID) != expected) {\n                  if (query instanceof BKDPointInPolygonQuery &&\n                      (Math.abs(lat0-lats[id]) < TOLERANCE ||\n                       Math.abs(lat1-lats[id]) < TOLERANCE ||\n                       Math.abs(lon0-lons[id]) < TOLERANCE ||\n                       Math.abs(lon1-lons[id]) < TOLERANCE)) {\n                    // The poly check quantizes slightly differently, so we allow for boundary cases to disagree\n                  } else {\n                    // We do exact quantized comparison so the bbox query should never disagree:\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (bbox: lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1 + \") expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \" query=\" + query + \" crossesDateLine=\" + crossesDateLine);\n                  }\n                }\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07c50cb1eca5629cac5b6702dd0f5e06157af61a","date":1445464748,"type":4,"author":"Nick Knize","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#verify(double[],double[]).mjava","sourceNew":null,"sourceOld":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = getDocValuesFormat();\n    Codec codec = new Lucene53Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = noVirusChecker(newFSDirectory(createTempDir(\"TestBKDTree\")));\n    } else {\n      dir = getDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new BKDPointField(\"point\", lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n              double lat0 = randomLat();\n              double lat1 = randomLat();\n              double lon0 = randomLon();\n              double lon1 = randomLon();\n\n              if (lat1 < lat0) {\n                double x = lat0;\n                lat0 = lat1;\n                lat1 = x;\n              }\n\n              boolean crossesDateLine;\n              if (lon1 < lon0) {\n                if (random().nextBoolean()) {\n                  double x = lon0;\n                  lon0 = lon1;\n                  lon1 = x;\n                  crossesDateLine = false;\n                } else {\n                  crossesDateLine = true;\n                }\n              } else {\n                crossesDateLine = false;\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"\\nTEST: iter=\" + iter + \" lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1 + \" crossesDateLine=\" + crossesDateLine);\n              }\n\n              Query query;\n              // TODO: get poly query working with dateline crossing too (how?)!\n              if (crossesDateLine || random().nextBoolean()) {\n                query = new BKDPointInBBoxQuery(\"point\", lat0, lat1, lon0, lon1);\n              } else {\n                double[] lats = new double[5];\n                double[] lons = new double[5];\n                lats[0] = lat0;\n                lons[0] = lon0;\n                lats[1] = lat1;\n                lons[1] = lon0;\n                lats[2] = lat1;\n                lons[2] = lon1;\n                lats[3] = lat0;\n                lons[3] = lon1;\n                lats[4] = lat0;\n                lons[4] = lon0;\n                query = new BKDPointInPolygonQuery(\"point\", lats, lons);\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.out.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                boolean expected = deleted.contains(id) == false && rectContainsPointEnc(lat0, lat1, lon0, lon1, lats[id], lons[id]);\n                if (hits.get(docID) != expected) {\n                  if (query instanceof BKDPointInPolygonQuery &&\n                      (Math.abs(lat0-lats[id]) < TOLERANCE ||\n                       Math.abs(lat1-lats[id]) < TOLERANCE ||\n                       Math.abs(lon0-lons[id]) < TOLERANCE ||\n                       Math.abs(lon1-lons[id]) < TOLERANCE)) {\n                    // The poly check quantizes slightly differently, so we allow for boundary cases to disagree\n                  } else {\n                    // We do exact quantized comparison so the bbox query should never disagree:\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (bbox: lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1 + \") expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \" query=\" + query + \" crossesDateLine=\" + crossesDateLine);\n                  }\n                }\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["791520c00f0e9d64d4099584ec4a9b826662c6da"],"2949cf6bcf4a8cb192de03ca4f43f301131f1c80":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["cf1a6fe0cad9503f2c3eaca4de8c4f80a9eb14f0"],"791520c00f0e9d64d4099584ec4a9b826662c6da":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["89a0e70ecaf27e127004b7fbfad2e02d52ea1f8f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"cf1a6fe0cad9503f2c3eaca4de8c4f80a9eb14f0":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"89a0e70ecaf27e127004b7fbfad2e02d52ea1f8f":["2949cf6bcf4a8cb192de03ca4f43f301131f1c80"],"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["2949cf6bcf4a8cb192de03ca4f43f301131f1c80"],"2949cf6bcf4a8cb192de03ca4f43f301131f1c80":["89a0e70ecaf27e127004b7fbfad2e02d52ea1f8f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"791520c00f0e9d64d4099584ec4a9b826662c6da":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cf1a6fe0cad9503f2c3eaca4de8c4f80a9eb14f0"],"cf1a6fe0cad9503f2c3eaca4de8c4f80a9eb14f0":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96":["791520c00f0e9d64d4099584ec4a9b826662c6da"],"89a0e70ecaf27e127004b7fbfad2e02d52ea1f8f":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}