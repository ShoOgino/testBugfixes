{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FloatMagic#floatBitsToUnsignedOrdered(int).mjava","commits":[{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FloatMagic#floatBitsToUnsignedOrdered(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convert float bits to directly sortable bits. \n   * Normalizes all NaNs to canonical form.\n   */\n  static int floatBitsToUnsignedOrdered(int v) {\n    // Canonicalize NaN ranges. I assume this check will be faster here than \n    // (v == v) == false on the FPU? We don't distinguish between different\n    // flavors of NaNs here (see http://en.wikipedia.org/wiki/NaN). I guess\n    // in Java this doesn't matter much anyway.\n    if ((v & 0x7fffffff) > 0x7f800000) {\n      // Apply the logic below to a canonical \"quiet NaN\"\n      return 0x7fc00000 ^ 0x80000000;\n    }\n\n    if (v < 0) {\n      // Reverse the order of negative values and push them before positive values.\n      return ~v;\n    } else {\n      // Shift positive values after negative, but before NaNs, they're sorted already.\n      return v ^ 0x80000000;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3c850c5222a1ce7d619563f67bf047a11b32b6","date":1330703995,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FloatMagic#floatBitsToUnsignedOrdered(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Convert float bits to directly sortable bits. \n   * Normalizes all NaNs to canonical form.\n   */\n  static int floatBitsToUnsignedOrdered(int v) {\n    // Canonicalize NaN ranges. I assume this check will be faster here than \n    // (v == v) == false on the FPU? We don't distinguish between different\n    // flavors of NaNs here (see http://en.wikipedia.org/wiki/NaN). I guess\n    // in Java this doesn't matter much anyway.\n    if ((v & 0x7fffffff) > 0x7f800000) {\n      // Apply the logic below to a canonical \"quiet NaN\"\n      return 0x7fc00000 ^ 0x80000000;\n    }\n\n    if (v < 0) {\n      // Reverse the order of negative values and push them before positive values.\n      return ~v;\n    } else {\n      // Shift positive values after negative, but before NaNs, they're sorted already.\n      return v ^ 0x80000000;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FloatMagic#floatBitsToUnsignedOrdered(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Convert float bits to directly sortable bits. \n   * Normalizes all NaNs to canonical form.\n   */\n  static int floatBitsToUnsignedOrdered(int v) {\n    // Canonicalize NaN ranges. I assume this check will be faster here than \n    // (v == v) == false on the FPU? We don't distinguish between different\n    // flavors of NaNs here (see http://en.wikipedia.org/wiki/NaN). I guess\n    // in Java this doesn't matter much anyway.\n    if ((v & 0x7fffffff) > 0x7f800000) {\n      // Apply the logic below to a canonical \"quiet NaN\"\n      return 0x7fc00000 ^ 0x80000000;\n    }\n\n    if (v < 0) {\n      // Reverse the order of negative values and push them before positive values.\n      return ~v;\n    } else {\n      // Shift positive values after negative, but before NaNs, they're sorted already.\n      return v ^ 0x80000000;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7bf07f4ebadc7539de83a531e64678350d78ca26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["7bf07f4ebadc7539de83a531e64678350d78ca26","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"]},"commit2Childs":{"7bf07f4ebadc7539de83a531e64678350d78ca26":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}