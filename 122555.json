{"path":"lucene/core/src/java/org/apache/lucene/util/BitSet#and(DocIdSetIterator).mjava","commits":[{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BitSet#and(DocIdSetIterator).mjava","pathOld":"/dev/null","sourceNew":"  /** Does in-place AND of the bits provided by the\n   *  iterator. */\n  public void and(DocIdSetIterator iter) throws IOException {\n    final int length = length();\n    if (length == 0) {\n      return;\n    }\n    int disiDoc, bitSetDoc = nextSetBit(0);\n    while (bitSetDoc != DocIdSetIterator.NO_MORE_DOCS && (disiDoc = iter.advance(bitSetDoc)) < length) {\n      clear(bitSetDoc, disiDoc);\n      disiDoc++;\n      bitSetDoc = (disiDoc < length) ? nextSetBit(disiDoc) : DocIdSetIterator.NO_MORE_DOCS;\n    }\n    if (bitSetDoc != DocIdSetIterator.NO_MORE_DOCS) {\n      clear(bitSetDoc, length);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b","date":1414400081,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BitSet#and(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BitSet#and(DocIdSetIterator).mjava","sourceNew":"  /** Does in-place AND of the bits provided by the iterator. The state of the\n   *  iterator after this operation terminates is undefined. */\n  public void and(DocIdSetIterator iter) throws IOException {\n    assertUnpositioned(iter);\n    leapFrog(iter, new LeapFrogCallBack() {\n      int previous = -1;\n\n      @Override\n      public void onMatch(int doc) {\n        clear(previous + 1, doc);\n        previous = doc;\n      }\n\n      @Override\n      public void finish() {\n        if (previous + 1 < length()) {\n          clear(previous + 1, length());\n        }\n      }\n\n    });\n  }\n\n","sourceOld":"  /** Does in-place AND of the bits provided by the\n   *  iterator. */\n  public void and(DocIdSetIterator iter) throws IOException {\n    final int length = length();\n    if (length == 0) {\n      return;\n    }\n    int disiDoc, bitSetDoc = nextSetBit(0);\n    while (bitSetDoc != DocIdSetIterator.NO_MORE_DOCS && (disiDoc = iter.advance(bitSetDoc)) < length) {\n      clear(bitSetDoc, disiDoc);\n      disiDoc++;\n      bitSetDoc = (disiDoc < length) ? nextSetBit(disiDoc) : DocIdSetIterator.NO_MORE_DOCS;\n    }\n    if (bitSetDoc != DocIdSetIterator.NO_MORE_DOCS) {\n      clear(bitSetDoc, length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"099c774ddd27f4ad437ca5df14d153bab0a3affe","date":1424527689,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/BitSet#and(DocIdSetIterator).mjava","sourceNew":null,"sourceOld":"  /** Does in-place AND of the bits provided by the iterator. The state of the\n   *  iterator after this operation terminates is undefined. */\n  public void and(DocIdSetIterator iter) throws IOException {\n    assertUnpositioned(iter);\n    leapFrog(iter, new LeapFrogCallBack() {\n      int previous = -1;\n\n      @Override\n      public void onMatch(int doc) {\n        clear(previous + 1, doc);\n        previous = doc;\n      }\n\n      @Override\n      public void finish() {\n        if (previous + 1 < length()) {\n          clear(previous + 1, length());\n        }\n      }\n\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"099c774ddd27f4ad437ca5df14d153bab0a3affe":["22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b"],"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["099c774ddd27f4ad437ca5df14d153bab0a3affe"]},"commit2Childs":{"099c774ddd27f4ad437ca5df14d153bab0a3affe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b":["099c774ddd27f4ad437ca5df14d153bab0a3affe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}