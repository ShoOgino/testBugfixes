{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","sourceNew":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tollerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","sourceOld":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tollerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","sourceNew":"  /** \n   * Validates a query matches some JSON test expressions and closes the \n   * query. The text expression is of the form path:JSON.  To facilitate \n   * easy embedding in Java strings, the JSON can have double quotes \n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete \n   * structures, but doing so can result in fragile tests if you are \n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tollerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","sourceOld":"  /** \n   * Validates a query matches some JSON test expressions and closes the \n   * query. The text expression is of the form path:JSON.  To facilitate \n   * easy embedding in Java strings, the JSON can have double quotes \n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete \n   * structures, but doing so can result in fragile tests if you are \n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tollerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","sourceNew":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tollerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","sourceOld":"  /** \n   * Validates a query matches some JSON test expressions and closes the \n   * query. The text expression is of the form path:JSON.  To facilitate \n   * easy embedding in Java strings, the JSON can have double quotes \n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete \n   * structures, but doing so can result in fragile tests if you are \n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tollerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","sourceNew":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","sourceOld":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tollerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","sourceNew":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","sourceOld":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tollerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","sourceNew":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","sourceOld":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tollerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3e6b016ec9c0f86928264457cd5a4e62864858b","date":1373471675,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","sourceNew":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON tests can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = json(test);\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","sourceOld":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","sourceNew":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON tests can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = json(test);\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","sourceOld":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","sourceNew":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON tests can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = json(test);\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","sourceOld":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON tests can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = json(test);\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","sourceNew":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON tests can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = json(test);\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","sourceOld":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON tests can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = json(test);\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","sourceNew":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON tests can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   * @return The request response as a JSON String if all test patterns pass\n   */\n  public static String assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = json(test);\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n      return response;\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","sourceOld":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON tests can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = json(test);\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0127d456461e4d0abe73bede6f4920d9b9dcbe85","date":1426164450,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","sourceNew":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  The Noggit JSON\n   * parser used accepts single quoted strings and bare strings to allow\n   * easy embedding in Java Strings.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   * @return The request response as a JSON String if all test patterns pass\n   */\n  public static String assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = json(test);\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n      return response;\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","sourceOld":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON tests can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   * @return The request response as a JSON String if all test patterns pass\n   */\n  public static String assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = json(test);\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n      return response;\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","sourceNew":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  The Noggit JSON\n   * parser used accepts single quoted strings and bare strings to allow\n   * easy embedding in Java Strings.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   * @return The request response as a JSON String if all test patterns pass\n   */\n  public static String assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = json(test);\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n      return response;\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","sourceOld":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON tests can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   * @return The request response as a JSON String if all test patterns pass\n   */\n  public static String assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = json(test);\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n      return response;\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","sourceNew":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  The Noggit JSON\n   * parser used accepts single quoted strings and bare strings to allow\n   * easy embedding in Java Strings.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   * @return The request response as a JSON String if all test patterns pass\n   */\n  public static String assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: {}\", req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = json(test);\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error={}\\n expected ={}\\n response = {}\\n request = {}\"\n                , err, testJSON, response, req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\\n expected ={} \\n response = {}\\n request = {}\"\n                , testJSON, response, req.getParamString()\n            );\n          }\n        }\n      }\n      return response;\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","sourceOld":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  The Noggit JSON\n   * parser used accepts single quoted strings and bare strings to allow\n   * easy embedding in Java Strings.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   * @return The request response as a JSON String if all test patterns pass\n   */\n  public static String assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = json(test);\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n      return response;\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["37a0f60745e53927c4c876cfe5b5a58170f0646c","19275ba31e621f6da1b83bf13af75233876fd3d4"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","d3e6b016ec9c0f86928264457cd5a4e62864858b"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["d3e6b016ec9c0f86928264457cd5a4e62864858b"],"0127d456461e4d0abe73bede6f4920d9b9dcbe85":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["0127d456461e4d0abe73bede6f4920d9b9dcbe85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2","0127d456461e4d0abe73bede6f4920d9b9dcbe85"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d3e6b016ec9c0f86928264457cd5a4e62864858b":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"c26f00b574427b55127e869b935845554afde1fa":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["0127d456461e4d0abe73bede6f4920d9b9dcbe85","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"0127d456461e4d0abe73bede6f4920d9b9dcbe85":["a966532d92cf9ba2856f15a8140151bb6b518e4b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"d3e6b016ec9c0f86928264457cd5a4e62864858b":["37a0f60745e53927c4c876cfe5b5a58170f0646c","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","d3e6b016ec9c0f86928264457cd5a4e62864858b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d22ac6a4146774c1bc8400160fc0b6150294e92","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}