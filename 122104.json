{"path":"solr/contrib/uima/src/test/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessorTest#testMultiMap().mjava","commits":[{"id":"e32373bc887cf6f807e6cee6580c2867e296fba6","date":1304738580,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/uima/src/test/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessorTest#testMultiMap().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultiMap() {\n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(\"uima-multi-map\");\n    assertNotNull(chained);\n    UIMAUpdateRequestProcessorFactory factory = (UIMAUpdateRequestProcessorFactory) chained\n            .getFactories()[0];\n    assertNotNull(factory);\n    UpdateRequestProcessor processor = factory.getInstance(req(), null, null);\n    assertTrue(processor instanceof UIMAUpdateRequestProcessor);\n    SolrUIMAConfiguration conf = ((UIMAUpdateRequestProcessor)processor).solrUIMAConfiguration;\n    Map<String, Map<String, String>> map = conf.getTypesFeaturesFieldsMapping();\n    Map<String, String> subMap = map.get(\"a-type-which-can-have-multiple-features\");\n    assertEquals(2, subMap.size());\n    assertEquals(\"1\", subMap.get(\"A\"));\n    assertEquals(\"2\", subMap.get(\"B\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7af39ddfe08efa20e4c56e454a0d5935a085c53","date":1304952961,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/uima/src/test/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessorTest#testMultiMap().mjava","pathOld":"solr/contrib/uima/src/test/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessorTest#testMultiMap().mjava","sourceNew":"  @Test\n  public void testMultiMap() {\n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(\"uima-multi-map\");\n    assertNotNull(chained);\n    UIMAUpdateRequestProcessorFactory factory = (UIMAUpdateRequestProcessorFactory) chained\n            .getFactories()[0];\n    assertNotNull(factory);\n    UpdateRequestProcessor processor = factory.getInstance(req(), null, null);\n    assertTrue(processor instanceof UIMAUpdateRequestProcessor);\n    SolrUIMAConfiguration conf = ((UIMAUpdateRequestProcessor)processor).solrUIMAConfiguration;\n    Map<String, Map<String, MapField>> map = conf.getTypesFeaturesFieldsMapping();\n    Map<String, MapField> subMap = map.get(\"a-type-which-can-have-multiple-features\");\n    assertEquals(2, subMap.size());\n    assertEquals(\"1\", subMap.get(\"A\").getFieldName(null));\n    assertEquals(\"2\", subMap.get(\"B\").getFieldName(null));\n  }\n\n","sourceOld":"  @Test\n  public void testMultiMap() {\n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(\"uima-multi-map\");\n    assertNotNull(chained);\n    UIMAUpdateRequestProcessorFactory factory = (UIMAUpdateRequestProcessorFactory) chained\n            .getFactories()[0];\n    assertNotNull(factory);\n    UpdateRequestProcessor processor = factory.getInstance(req(), null, null);\n    assertTrue(processor instanceof UIMAUpdateRequestProcessor);\n    SolrUIMAConfiguration conf = ((UIMAUpdateRequestProcessor)processor).solrUIMAConfiguration;\n    Map<String, Map<String, String>> map = conf.getTypesFeaturesFieldsMapping();\n    Map<String, String> subMap = map.get(\"a-type-which-can-have-multiple-features\");\n    assertEquals(2, subMap.size());\n    assertEquals(\"1\", subMap.get(\"A\"));\n    assertEquals(\"2\", subMap.get(\"B\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/uima/src/test/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessorTest#testMultiMap().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultiMap() {\n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(\"uima-multi-map\");\n    assertNotNull(chained);\n    UIMAUpdateRequestProcessorFactory factory = (UIMAUpdateRequestProcessorFactory) chained\n            .getFactories()[0];\n    assertNotNull(factory);\n    UpdateRequestProcessor processor = factory.getInstance(req(), null, null);\n    assertTrue(processor instanceof UIMAUpdateRequestProcessor);\n    SolrUIMAConfiguration conf = ((UIMAUpdateRequestProcessor)processor).solrUIMAConfiguration;\n    Map<String, Map<String, MapField>> map = conf.getTypesFeaturesFieldsMapping();\n    Map<String, MapField> subMap = map.get(\"a-type-which-can-have-multiple-features\");\n    assertEquals(2, subMap.size());\n    assertEquals(\"1\", subMap.get(\"A\").getFieldName(null));\n    assertEquals(\"2\", subMap.get(\"B\").getFieldName(null));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/test/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessorTest#testMultiMap().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultiMap() {\n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(\"uima-multi-map\");\n    assertNotNull(chained);\n    UIMAUpdateRequestProcessorFactory factory = (UIMAUpdateRequestProcessorFactory) chained\n            .getFactories()[0];\n    assertNotNull(factory);\n    UpdateRequestProcessor processor = factory.getInstance(req(), null, null);\n    assertTrue(processor instanceof UIMAUpdateRequestProcessor);\n    SolrUIMAConfiguration conf = ((UIMAUpdateRequestProcessor)processor).solrUIMAConfiguration;\n    Map<String, Map<String, MapField>> map = conf.getTypesFeaturesFieldsMapping();\n    Map<String, MapField> subMap = map.get(\"a-type-which-can-have-multiple-features\");\n    assertEquals(2, subMap.size());\n    assertEquals(\"1\", subMap.get(\"A\").getFieldName(null));\n    assertEquals(\"2\", subMap.get(\"B\").getFieldName(null));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/test/org/apache/solr/uima/processor/UIMAUpdateRequestProcessorTest#testMultiMap().mjava","pathOld":"solr/contrib/uima/src/test/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessorTest#testMultiMap().mjava","sourceNew":"  @Test\n  public void testMultiMap() {\n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(\"uima-multi-map\");\n    assertNotNull(chained);\n    UIMAUpdateRequestProcessorFactory factory = (UIMAUpdateRequestProcessorFactory) chained\n            .getFactories()[0];\n    assertNotNull(factory);\n    UpdateRequestProcessor processor = factory.getInstance(req(), null, null);\n    assertTrue(processor instanceof UIMAUpdateRequestProcessor);\n    SolrUIMAConfiguration conf = ((UIMAUpdateRequestProcessor)processor).solrUIMAConfiguration;\n    Map<String, Map<String, MapField>> map = conf.getTypesFeaturesFieldsMapping();\n    Map<String, MapField> subMap = map.get(\"a-type-which-can-have-multiple-features\");\n    assertEquals(2, subMap.size());\n    assertEquals(\"1\", subMap.get(\"A\").getFieldName(null));\n    assertEquals(\"2\", subMap.get(\"B\").getFieldName(null));\n  }\n\n","sourceOld":"  @Test\n  public void testMultiMap() {\n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(\"uima-multi-map\");\n    assertNotNull(chained);\n    UIMAUpdateRequestProcessorFactory factory = (UIMAUpdateRequestProcessorFactory) chained\n            .getFactories()[0];\n    assertNotNull(factory);\n    UpdateRequestProcessor processor = factory.getInstance(req(), null, null);\n    assertTrue(processor instanceof UIMAUpdateRequestProcessor);\n    SolrUIMAConfiguration conf = ((UIMAUpdateRequestProcessor)processor).solrUIMAConfiguration;\n    Map<String, Map<String, MapField>> map = conf.getTypesFeaturesFieldsMapping();\n    Map<String, MapField> subMap = map.get(\"a-type-which-can-have-multiple-features\");\n    assertEquals(2, subMap.size());\n    assertEquals(\"1\", subMap.get(\"A\").getFieldName(null));\n    assertEquals(\"2\", subMap.get(\"B\").getFieldName(null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/test/org/apache/solr/uima/processor/UIMAUpdateRequestProcessorTest#testMultiMap().mjava","pathOld":"solr/contrib/uima/src/test/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessorTest#testMultiMap().mjava","sourceNew":"  @Test\n  public void testMultiMap() {\n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(\"uima-multi-map\");\n    assertNotNull(chained);\n    UIMAUpdateRequestProcessorFactory factory = (UIMAUpdateRequestProcessorFactory) chained\n            .getFactories()[0];\n    assertNotNull(factory);\n    UpdateRequestProcessor processor = factory.getInstance(req(), null, null);\n    assertTrue(processor instanceof UIMAUpdateRequestProcessor);\n    SolrUIMAConfiguration conf = ((UIMAUpdateRequestProcessor)processor).solrUIMAConfiguration;\n    Map<String, Map<String, MapField>> map = conf.getTypesFeaturesFieldsMapping();\n    Map<String, MapField> subMap = map.get(\"a-type-which-can-have-multiple-features\");\n    assertEquals(2, subMap.size());\n    assertEquals(\"1\", subMap.get(\"A\").getFieldName(null));\n    assertEquals(\"2\", subMap.get(\"B\").getFieldName(null));\n  }\n\n","sourceOld":"  @Test\n  public void testMultiMap() {\n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(\"uima-multi-map\");\n    assertNotNull(chained);\n    UIMAUpdateRequestProcessorFactory factory = (UIMAUpdateRequestProcessorFactory) chained\n            .getFactories()[0];\n    assertNotNull(factory);\n    UpdateRequestProcessor processor = factory.getInstance(req(), null, null);\n    assertTrue(processor instanceof UIMAUpdateRequestProcessor);\n    SolrUIMAConfiguration conf = ((UIMAUpdateRequestProcessor)processor).solrUIMAConfiguration;\n    Map<String, Map<String, MapField>> map = conf.getTypesFeaturesFieldsMapping();\n    Map<String, MapField> subMap = map.get(\"a-type-which-can-have-multiple-features\");\n    assertEquals(2, subMap.size());\n    assertEquals(\"1\", subMap.get(\"A\").getFieldName(null));\n    assertEquals(\"2\", subMap.get(\"B\").getFieldName(null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a7af39ddfe08efa20e4c56e454a0d5935a085c53":["e32373bc887cf6f807e6cee6580c2867e296fba6"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","a7af39ddfe08efa20e4c56e454a0d5935a085c53"],"c26f00b574427b55127e869b935845554afde1fa":["a7af39ddfe08efa20e4c56e454a0d5935a085c53","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a7af39ddfe08efa20e4c56e454a0d5935a085c53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e32373bc887cf6f807e6cee6580c2867e296fba6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a7af39ddfe08efa20e4c56e454a0d5935a085c53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"a7af39ddfe08efa20e4c56e454a0d5935a085c53":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","e32373bc887cf6f807e6cee6580c2867e296fba6","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"e32373bc887cf6f807e6cee6580c2867e296fba6":["a7af39ddfe08efa20e4c56e454a0d5935a085c53"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}