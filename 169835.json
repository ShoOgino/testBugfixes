{"path":"src/java/org/apache/lucene/index/MultiLevelSkipListReader#skipTo(int).mjava","commits":[{"id":"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709","date":1180597733,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiLevelSkipListReader#skipTo(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Skips entries to the first beyond the current whose document number is\r\n   *  greater than or equal to <i>target</i>. Returns the current doc count. \r\n   */\r\n  int skipTo(int target) throws IOException {\r\n    if (!haveSkipped) {\r\n      // first time, load skip levels\r\n      loadSkipLevels();\r\n      haveSkipped = true;\r\n    }\r\n  \r\n    // walk up the levels until highest level is found that has a skip\r\n    // for this target\r\n    int level = 0;\r\n    while (level < numberOfSkipLevels - 1 && target > skipDoc[level + 1]) {\r\n      level++;\r\n    }    \r\n\r\n    while (level >= 0) {\r\n      if (target > skipDoc[level]) {\r\n        if (!loadNextSkip(level)) {\r\n          continue;\r\n        }\r\n      } else {\r\n        // no more skips on this level, go down one level\r\n        if (level > 0 && lastChildPointer > skipStream[level - 1].getFilePointer()) {\r\n          seekChild(level - 1);\r\n        } \r\n        level--;\r\n      }\r\n    }\r\n    \r\n    return numSkipped[0] - skipInterval[0] - 1;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiLevelSkipListReader#skipTo(int).mjava","pathOld":"src/java/org/apache/lucene/index/MultiLevelSkipListReader#skipTo(int).mjava","sourceNew":"  /** Skips entries to the first beyond the current whose document number is\n   *  greater than or equal to <i>target</i>. Returns the current doc count. \n   */\n  int skipTo(int target) throws IOException {\n    if (!haveSkipped) {\n      // first time, load skip levels\n      loadSkipLevels();\n      haveSkipped = true;\n    }\n  \n    // walk up the levels until highest level is found that has a skip\n    // for this target\n    int level = 0;\n    while (level < numberOfSkipLevels - 1 && target > skipDoc[level + 1]) {\n      level++;\n    }    \n\n    while (level >= 0) {\n      if (target > skipDoc[level]) {\n        if (!loadNextSkip(level)) {\n          continue;\n        }\n      } else {\n        // no more skips on this level, go down one level\n        if (level > 0 && lastChildPointer > skipStream[level - 1].getFilePointer()) {\n          seekChild(level - 1);\n        } \n        level--;\n      }\n    }\n    \n    return numSkipped[0] - skipInterval[0] - 1;\n  }\n\n","sourceOld":"  /** Skips entries to the first beyond the current whose document number is\r\n   *  greater than or equal to <i>target</i>. Returns the current doc count. \r\n   */\r\n  int skipTo(int target) throws IOException {\r\n    if (!haveSkipped) {\r\n      // first time, load skip levels\r\n      loadSkipLevels();\r\n      haveSkipped = true;\r\n    }\r\n  \r\n    // walk up the levels until highest level is found that has a skip\r\n    // for this target\r\n    int level = 0;\r\n    while (level < numberOfSkipLevels - 1 && target > skipDoc[level + 1]) {\r\n      level++;\r\n    }    \r\n\r\n    while (level >= 0) {\r\n      if (target > skipDoc[level]) {\r\n        if (!loadNextSkip(level)) {\r\n          continue;\r\n        }\r\n      } else {\r\n        // no more skips on this level, go down one level\r\n        if (level > 0 && lastChildPointer > skipStream[level - 1].getFilePointer()) {\r\n          seekChild(level - 1);\r\n        } \r\n        level--;\r\n      }\r\n    }\r\n    \r\n    return numSkipped[0] - skipInterval[0] - 1;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiLevelSkipListReader#skipTo(int).mjava","pathOld":"src/java/org/apache/lucene/index/MultiLevelSkipListReader#skipTo(int).mjava","sourceNew":"  /** Skips entries to the first beyond the current whose document number is\n   *  greater than or equal to <i>target</i>. Returns the current doc count. \n   */\n  int skipTo(int target) throws IOException {\n    if (!haveSkipped) {\n      // first time, load skip levels\n      loadSkipLevels();\n      haveSkipped = true;\n    }\n  \n    // walk up the levels until highest level is found that has a skip\n    // for this target\n    int level = 0;\n    while (level < numberOfSkipLevels - 1 && target > skipDoc[level + 1]) {\n      level++;\n    }    \n\n    while (level >= 0) {\n      if (target > skipDoc[level]) {\n        if (!loadNextSkip(level)) {\n          continue;\n        }\n      } else {\n        // no more skips on this level, go down one level\n        if (level > 0 && lastChildPointer > skipStream[level - 1].getFilePointer()) {\n          seekChild(level - 1);\n        } \n        level--;\n      }\n    }\n    \n    return numSkipped[0] - skipInterval[0] - 1;\n  }\n\n","sourceOld":"  /** Skips entries to the first beyond the current whose document number is\n   *  greater than or equal to <i>target</i>. Returns the current doc count. \n   */\n  int skipTo(int target) throws IOException {\n    if (!haveSkipped) {\n      // first time, load skip levels\n      loadSkipLevels();\n      haveSkipped = true;\n    }\n  \n    // walk up the levels until highest level is found that has a skip\n    // for this target\n    int level = 0;\n    while (level < numberOfSkipLevels - 1 && target > skipDoc[level + 1]) {\n      level++;\n    }    \n\n    while (level >= 0) {\n      if (target > skipDoc[level]) {\n        if (!loadNextSkip(level)) {\n          continue;\n        }\n      } else {\n        // no more skips on this level, go down one level\n        if (level > 0 && lastChildPointer > skipStream[level - 1].getFilePointer()) {\n          seekChild(level - 1);\n        } \n        level--;\n      }\n    }\n    \n    return numSkipped[0] - skipInterval[0] - 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["08d1ee9808e270c86ce5c9be08b8bd7a19d0a709"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2123bddbd65dea198cac380540636ce43a880403"],"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08d1ee9808e270c86ce5c9be08b8bd7a19d0a709"],"2123bddbd65dea198cac380540636ce43a880403":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709":["2123bddbd65dea198cac380540636ce43a880403"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}