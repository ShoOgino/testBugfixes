{"path":"solr/core/src/java/org/apache/solr/response/transform/DocTransformer#transform(SolrDocument,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/DocTransformer#transform(SolrDocument,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/transform/DocTransformer#transform(SolrDocument,int).mjava","sourceNew":"  public abstract void transform(SolrDocument doc, int docid) throws IOException;\n\n","sourceOld":"  public abstract void transform(SolrDocument doc, int docid) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/DocTransformer#transform(SolrDocument,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/transform/DocTransformer#transform(SolrDocument,int).mjava","sourceNew":"  public abstract void transform(SolrDocument doc, int docid) throws IOException;\n\n","sourceOld":"  public abstract void transform(SolrDocument doc, int docid) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/DocTransformer#transform(SolrDocument,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/transform/DocTransformer#transform(SolrDocument,int).mjava","sourceNew":"  public abstract void transform(SolrDocument doc, int docid) throws IOException;\n\n","sourceOld":"  public abstract void transform(SolrDocument doc, int docid) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b68df8b95f3ea758a8dc21cb20a50a01db973e8e","date":1321650433,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/DocTransformer#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/DocTransformer#transform(SolrDocument,int).mjava","sourceNew":"  /**\n   * This is where implementations do the actual work\n   *\n   *\n   * @param doc The document to alter\n   * @param docid The Lucene internal doc id\n   * @throws IOException\n   */\n  public abstract void transform(SolrDocument doc, int docid) throws IOException;\n\n","sourceOld":"  public abstract void transform(SolrDocument doc, int docid) throws IOException;\n\n","bugFix":null,"bugIntro":["136796946c32863f11b97ebec6b4091cdfe3a20b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/DocTransformer#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/DocTransformer#transform(SolrDocument,int).mjava","sourceNew":"  /**\n   * This is where implementations do the actual work\n   *\n   *\n   * @param doc The document to alter\n   * @param docid The Lucene internal doc id\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract void transform(SolrDocument doc, int docid) throws IOException;\n\n","sourceOld":"  /**\n   * This is where implementations do the actual work\n   *\n   *\n   * @param doc The document to alter\n   * @param docid The Lucene internal doc id\n   * @throws IOException\n   */\n  public abstract void transform(SolrDocument doc, int docid) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","date":1440797084,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/DocTransformer#transform(SolrDocument,int,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/DocTransformer#transform(SolrDocument,int).mjava","sourceNew":"  /**\n   * This is where implementations do the actual work\n   *\n   *\n   * @param doc The document to alter\n   * @param docid The Lucene internal doc id\n   * @param score\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract void transform(SolrDocument doc, int docid, float score) throws IOException;\n\n","sourceOld":"  /**\n   * This is where implementations do the actual work\n   *\n   *\n   * @param doc The document to alter\n   * @param docid The Lucene internal doc id\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract void transform(SolrDocument doc, int docid) throws IOException;\n\n","bugFix":null,"bugIntro":["17473eb131f5386a57f9c926a4dbc4c176807f04"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"320eec6599df6f97f2461a5d1ad49cd93b324a14","date":1503502574,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/DocTransformer#transform(SolrDocument,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This is where implementations do the actual work.\n   * If implementations require a valid docId and index access, the {@link #needsSolrIndexSearcher} \n   * method must return true\n   *\n   * @param doc The document to alter\n   * @param docid The Lucene internal doc id, or -1 in cases where the <code>doc</code> did not come from the index\n   * @throws IOException If there is a low-level I/O error.\n   * @see #needsSolrIndexSearcher\n   */\n  public abstract void transform(SolrDocument doc, int docid) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182384b20c064aa16998ddebe9f36e649279c5a6","date":1503596494,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/DocTransformer#transform(SolrDocument,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This is where implementations do the actual work.\n   * If implementations require a valid docId and index access, the {@link #needsSolrIndexSearcher} \n   * method must return true\n   *\n   * @param doc The document to alter\n   * @param docid The Lucene internal doc id, or -1 in cases where the <code>doc</code> did not come from the index\n   * @throws IOException If there is a low-level I/O error.\n   * @see #needsSolrIndexSearcher\n   */\n  public abstract void transform(SolrDocument doc, int docid) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/DocTransformer#transform(SolrDocument,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This is where implementations do the actual work.\n   * If implementations require a valid docId and index access, the {@link #needsSolrIndexSearcher} \n   * method must return true\n   *\n   * @param doc The document to alter\n   * @param docid The Lucene internal doc id, or -1 in cases where the <code>doc</code> did not come from the index\n   * @throws IOException If there is a low-level I/O error.\n   * @see #needsSolrIndexSearcher\n   */\n  public abstract void transform(SolrDocument doc, int docid) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["b68df8b95f3ea758a8dc21cb20a50a01db973e8e"],"b68df8b95f3ea758a8dc21cb20a50a01db973e8e":["c26f00b574427b55127e869b935845554afde1fa"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","182384b20c064aa16998ddebe9f36e649279c5a6"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"320eec6599df6f97f2461a5d1ad49cd93b324a14":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"182384b20c064aa16998ddebe9f36e649279c5a6":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","320eec6599df6f97f2461a5d1ad49cd93b324a14"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["182384b20c064aa16998ddebe9f36e649279c5a6"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"b68df8b95f3ea758a8dc21cb20a50a01db973e8e":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["b68df8b95f3ea758a8dc21cb20a50a01db973e8e"],"320eec6599df6f97f2461a5d1ad49cd93b324a14":["182384b20c064aa16998ddebe9f36e649279c5a6"],"182384b20c064aa16998ddebe9f36e649279c5a6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","320eec6599df6f97f2461a5d1ad49cd93b324a14","182384b20c064aa16998ddebe9f36e649279c5a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}