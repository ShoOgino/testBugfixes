{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#pointFromLonLatBearingGreatCircle(double,double,double,double,double[]).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#pointFromLonLatBearingGreatCircle(double,double,double,double,double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoProjectionUtils#pointFromLonLatBearingGreatCircle(double,double,double,double,double[]).mjava","sourceNew":"  /**\n   * Finds a point along a bearing from a given lon,lat geolocation using great circle arc\n   *\n   * @param lon origin longitude in degrees\n   * @param lat origin latitude in degrees\n   * @param bearing azimuthal bearing in degrees\n   * @param dist distance in meters\n   * @param pt resulting point\n   * @return the point along a bearing at a given distance in meters\n   */\n  public static final double[] pointFromLonLatBearingGreatCircle(double lon, double lat, double bearing, double dist, double[] pt) {\n\n    if (pt == null) {\n      pt = new double[2];\n    }\n\n    lon *= TO_RADIANS;\n    lat *= TO_RADIANS;\n    bearing *= TO_RADIANS;\n\n    final double cLat = cos(lat);\n    final double sLat = sin(lat);\n    final double sinDoR = sin(dist / GeoProjectionUtils.SEMIMAJOR_AXIS);\n    final double cosDoR = cos(dist / GeoProjectionUtils.SEMIMAJOR_AXIS);\n\n    pt[1] = asin(sLat*cosDoR + cLat * sinDoR * cos(bearing));\n    pt[0] = TO_DEGREES * (lon + Math.atan2(sin(bearing) * sinDoR * cLat, cosDoR - sLat * sin(pt[1])));\n    pt[1] *= TO_DEGREES;\n\n    return pt;\n  }\n\n","sourceOld":"  /**\n   * Finds a point along a bearing from a given lon,lat geolocation using great circle arc\n   *\n   * @param lon origin longitude in degrees\n   * @param lat origin latitude in degrees\n   * @param bearing azimuthal bearing in degrees\n   * @param dist distance in meters\n   * @param pt resulting point\n   * @return the point along a bearing at a given distance in meters\n   */\n  public static final double[] pointFromLonLatBearingGreatCircle(double lon, double lat, double bearing, double dist, double[] pt) {\n\n    if (pt == null) {\n      pt = new double[2];\n    }\n\n    lon *= TO_RADIANS;\n    lat *= TO_RADIANS;\n    bearing *= TO_RADIANS;\n\n    final double cLat = SloppyMath.cos(lat);\n    final double sLat = SloppyMath.sin(lat);\n    final double sinDoR = SloppyMath.sin(dist / GeoProjectionUtils.SEMIMAJOR_AXIS);\n    final double cosDoR = SloppyMath.cos(dist / GeoProjectionUtils.SEMIMAJOR_AXIS);\n\n    pt[1] = SloppyMath.asin(sLat*cosDoR + cLat * sinDoR * SloppyMath.cos(bearing));\n    pt[0] = TO_DEGREES * (lon + Math.atan2(SloppyMath.sin(bearing) * sinDoR * cLat, cosDoR - sLat * SloppyMath.sin(pt[1])));\n    pt[1] *= TO_DEGREES;\n\n    return pt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#pointFromLonLatBearingGreatCircle(double,double,double,double,double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoProjectionUtils#pointFromLonLatBearingGreatCircle(double,double,double,double,double[]).mjava","sourceNew":"  /**\n   * Finds a point along a bearing from a given lon,lat geolocation using great circle arc\n   *\n   * @param lon origin longitude in degrees\n   * @param lat origin latitude in degrees\n   * @param bearing azimuthal bearing in degrees\n   * @param dist distance in meters\n   * @param pt resulting point\n   * @return the point along a bearing at a given distance in meters\n   */\n  public static final double[] pointFromLonLatBearingGreatCircle(double lon, double lat, double bearing, double dist, double[] pt) {\n\n    if (pt == null) {\n      pt = new double[2];\n    }\n\n    lon *= TO_RADIANS;\n    lat *= TO_RADIANS;\n    bearing *= TO_RADIANS;\n\n    final double cLat = cos(lat);\n    final double sLat = sin(lat);\n    final double sinDoR = sin(dist / GeoProjectionUtils.SEMIMAJOR_AXIS);\n    final double cosDoR = cos(dist / GeoProjectionUtils.SEMIMAJOR_AXIS);\n\n    pt[1] = asin(sLat*cosDoR + cLat * sinDoR * cos(bearing));\n    pt[0] = TO_DEGREES * (lon + Math.atan2(sin(bearing) * sinDoR * cLat, cosDoR - sLat * sin(pt[1])));\n    pt[1] *= TO_DEGREES;\n\n    return pt;\n  }\n\n","sourceOld":"  /**\n   * Finds a point along a bearing from a given lon,lat geolocation using great circle arc\n   *\n   * @param lon origin longitude in degrees\n   * @param lat origin latitude in degrees\n   * @param bearing azimuthal bearing in degrees\n   * @param dist distance in meters\n   * @param pt resulting point\n   * @return the point along a bearing at a given distance in meters\n   */\n  public static final double[] pointFromLonLatBearingGreatCircle(double lon, double lat, double bearing, double dist, double[] pt) {\n\n    if (pt == null) {\n      pt = new double[2];\n    }\n\n    lon *= TO_RADIANS;\n    lat *= TO_RADIANS;\n    bearing *= TO_RADIANS;\n\n    final double cLat = SloppyMath.cos(lat);\n    final double sLat = SloppyMath.sin(lat);\n    final double sinDoR = SloppyMath.sin(dist / GeoProjectionUtils.SEMIMAJOR_AXIS);\n    final double cosDoR = SloppyMath.cos(dist / GeoProjectionUtils.SEMIMAJOR_AXIS);\n\n    pt[1] = SloppyMath.asin(sLat*cosDoR + cLat * sinDoR * SloppyMath.cos(bearing));\n    pt[0] = TO_DEGREES * (lon + Math.atan2(SloppyMath.sin(bearing) * sinDoR * cLat, cosDoR - sLat * SloppyMath.sin(pt[1])));\n    pt[1] *= TO_DEGREES;\n\n    return pt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#pointFromLonLatBearingGreatCircle(double,double,double,double,double[]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#pointFromLonLatBearingGreatCircle(double,double,double,double,double[]).mjava","sourceNew":"  /**\n   * Finds a point along a bearing from a given lon,lat geolocation using great circle arc\n   *\n   * @param lon origin longitude in degrees\n   * @param lat origin latitude in degrees\n   * @param bearing azimuthal bearing in degrees\n   * @param dist distance in meters\n   * @param pt resulting point\n   * @return the point along a bearing at a given distance in meters\n   */\n  public static final double[] pointFromLonLatBearingGreatCircle(double lon, double lat, double bearing, double dist, double[] pt) {\n\n    if (pt == null) {\n      pt = new double[2];\n    }\n\n    lon *= TO_RADIANS;\n    lat *= TO_RADIANS;\n    bearing *= TO_RADIANS;\n\n    final double cLat = cos(lat);\n    final double sLat = sloppySin(lat);\n    final double sinDoR = sloppySin(dist / GeoProjectionUtils.SEMIMAJOR_AXIS);\n    final double cosDoR = cos(dist / GeoProjectionUtils.SEMIMAJOR_AXIS);\n\n    pt[1] = asin(sLat*cosDoR + cLat * sinDoR * cos(bearing));\n    pt[0] = TO_DEGREES * (lon + Math.atan2(sloppySin(bearing) * sinDoR * cLat, cosDoR - sLat * sloppySin(pt[1])));\n    pt[1] *= TO_DEGREES;\n\n    return pt;\n  }\n\n","sourceOld":"  /**\n   * Finds a point along a bearing from a given lon,lat geolocation using great circle arc\n   *\n   * @param lon origin longitude in degrees\n   * @param lat origin latitude in degrees\n   * @param bearing azimuthal bearing in degrees\n   * @param dist distance in meters\n   * @param pt resulting point\n   * @return the point along a bearing at a given distance in meters\n   */\n  public static final double[] pointFromLonLatBearingGreatCircle(double lon, double lat, double bearing, double dist, double[] pt) {\n\n    if (pt == null) {\n      pt = new double[2];\n    }\n\n    lon *= TO_RADIANS;\n    lat *= TO_RADIANS;\n    bearing *= TO_RADIANS;\n\n    final double cLat = cos(lat);\n    final double sLat = sin(lat);\n    final double sinDoR = sin(dist / GeoProjectionUtils.SEMIMAJOR_AXIS);\n    final double cosDoR = cos(dist / GeoProjectionUtils.SEMIMAJOR_AXIS);\n\n    pt[1] = asin(sLat*cosDoR + cLat * sinDoR * cos(bearing));\n    pt[0] = TO_DEGREES * (lon + Math.atan2(sin(bearing) * sinDoR * cLat, cosDoR - sLat * sin(pt[1])));\n    pt[1] *= TO_DEGREES;\n\n    return pt;\n  }\n\n","bugFix":["937923083e4d137932336fc80f3d78758ff698a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#pointFromLonLatBearingGreatCircle(double,double,double,double,double[]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#pointFromLonLatBearingGreatCircle(double,double,double,double,double[]).mjava","sourceNew":"  /**\n   * Finds a point along a bearing from a given lat,lon geolocation using great circle arc\n   *\n   * @param lat origin latitude in degrees\n   * @param lon origin longitude in degrees\n   * @param bearing azimuthal bearing in degrees\n   * @param dist distance in meters\n   * @param pt resulting point\n   * @return the point along a bearing at a given distance in meters\n   */\n  public static final double[] pointFromLonLatBearingGreatCircle(double lat, double lon, double bearing, double dist, double[] pt) {\n\n    if (pt == null) {\n      pt = new double[2];\n    }\n\n    lat *= TO_RADIANS;\n    lon *= TO_RADIANS;\n    bearing *= TO_RADIANS;\n\n    final double cLat = cos(lat);\n    final double sLat = sloppySin(lat);\n    final double sinDoR = sloppySin(dist / GeoProjectionUtils.SEMIMAJOR_AXIS);\n    final double cosDoR = cos(dist / GeoProjectionUtils.SEMIMAJOR_AXIS);\n\n    pt[1] = asin(sLat*cosDoR + cLat * sinDoR * cos(bearing));\n    pt[0] = TO_DEGREES * (lon + Math.atan2(sloppySin(bearing) * sinDoR * cLat, cosDoR - sLat * sloppySin(pt[1])));\n    pt[1] *= TO_DEGREES;\n\n    return pt;\n  }\n\n","sourceOld":"  /**\n   * Finds a point along a bearing from a given lon,lat geolocation using great circle arc\n   *\n   * @param lon origin longitude in degrees\n   * @param lat origin latitude in degrees\n   * @param bearing azimuthal bearing in degrees\n   * @param dist distance in meters\n   * @param pt resulting point\n   * @return the point along a bearing at a given distance in meters\n   */\n  public static final double[] pointFromLonLatBearingGreatCircle(double lon, double lat, double bearing, double dist, double[] pt) {\n\n    if (pt == null) {\n      pt = new double[2];\n    }\n\n    lon *= TO_RADIANS;\n    lat *= TO_RADIANS;\n    bearing *= TO_RADIANS;\n\n    final double cLat = cos(lat);\n    final double sLat = sloppySin(lat);\n    final double sinDoR = sloppySin(dist / GeoProjectionUtils.SEMIMAJOR_AXIS);\n    final double cosDoR = cos(dist / GeoProjectionUtils.SEMIMAJOR_AXIS);\n\n    pt[1] = asin(sLat*cosDoR + cLat * sinDoR * cos(bearing));\n    pt[0] = TO_DEGREES * (lon + Math.atan2(sloppySin(bearing) * sinDoR * cLat, cosDoR - sLat * sloppySin(pt[1])));\n    pt[1] *= TO_DEGREES;\n\n    return pt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3","date":1458680048,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#pointFromLonLatBearingGreatCircle(double,double,double,double,double[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Finds a point along a bearing from a given lat,lon geolocation using great circle arc\n   *\n   * @param lat origin latitude in degrees\n   * @param lon origin longitude in degrees\n   * @param bearing azimuthal bearing in degrees\n   * @param dist distance in meters\n   * @param pt resulting point\n   * @return the point along a bearing at a given distance in meters\n   */\n  public static final double[] pointFromLonLatBearingGreatCircle(double lat, double lon, double bearing, double dist, double[] pt) {\n\n    if (pt == null) {\n      pt = new double[2];\n    }\n\n    lat *= TO_RADIANS;\n    lon *= TO_RADIANS;\n    bearing *= TO_RADIANS;\n\n    final double cLat = cos(lat);\n    final double sLat = sloppySin(lat);\n    final double sinDoR = sloppySin(dist / GeoProjectionUtils.SEMIMAJOR_AXIS);\n    final double cosDoR = cos(dist / GeoProjectionUtils.SEMIMAJOR_AXIS);\n\n    pt[1] = asin(sLat*cosDoR + cLat * sinDoR * cos(bearing));\n    pt[0] = TO_DEGREES * (lon + Math.atan2(sloppySin(bearing) * sinDoR * cLat, cosDoR - sLat * sloppySin(pt[1])));\n    pt[1] *= TO_DEGREES;\n\n    return pt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["937923083e4d137932336fc80f3d78758ff698a6"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937923083e4d137932336fc80f3d78758ff698a6"],"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb4875e9db9b77346c36b7fe0d4b8759a1e095d3"]},"commit2Childs":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["cb4875e9db9b77346c36b7fe0d4b8759a1e095d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"937923083e4d137932336fc80f3d78758ff698a6":["ec60431d008a694828dacb4bc3cda775b6c44a9f","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}