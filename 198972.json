{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = null;\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      rsp.server = serverStr;\n      HttpSolrClient client = makeSolrClient(serverStr);\n\n      ex = doRequest(client, req, rsp, isUpdate, false, null);\n      if (ex == null) {\n        return rsp; // SUCCESS\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        ex = doRequest(wrapper.client, req, rsp, isUpdate, true, wrapper.getKey());\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = null;\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      rsp.server = serverStr;\n      HttpSolrServer server = makeServer(serverStr);\n\n      ex = doRequest(server, req, rsp, isUpdate, false, null);\n      if (ex == null) {\n        return rsp; // SUCCESS\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        ex = doRequest(wrapper.solrServer, req, rsp, isUpdate, true, wrapper.getKey());\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2df5da9b9a665127f75b19af580e9df62caced1d","date":1421106730,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = null;\n\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      rsp.server = serverStr;\n      HttpSolrClient client = makeSolrClient(serverStr);\n\n      ex = doRequest(client, req, rsp, isUpdate, false, null);\n      if (ex == null) {\n        return rsp; // SUCCESS\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        ex = doRequest(wrapper.client, req, rsp, isUpdate, true, wrapper.getKey());\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = null;\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      rsp.server = serverStr;\n      HttpSolrClient client = makeSolrClient(serverStr);\n\n      ex = doRequest(client, req, rsp, isUpdate, false, null);\n      if (ex == null) {\n        return rsp; // SUCCESS\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        ex = doRequest(wrapper.client, req, rsp, isUpdate, true, wrapper.getKey());\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["4a66009e1f5c17a77d75a6381cacdf9c893b2d8f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6a96b173f2f573ac82bc8279dfdd3cbe2b948f95","date":1429031018,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = null;\n\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      rsp.server = serverStr;\n      try {\n        MDC.put(\"LBHttpSolrClient.url\", serverStr);\n        HttpSolrClient client = makeSolrClient(serverStr);\n\n        ex = doRequest(client, req, rsp, isUpdate, false, null);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBHttpSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        ex = doRequest(wrapper.client, req, rsp, isUpdate, true, wrapper.getKey());\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = null;\n\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      rsp.server = serverStr;\n      HttpSolrClient client = makeSolrClient(serverStr);\n\n      ex = doRequest(client, req, rsp, isUpdate, false, null);\n      if (ex == null) {\n        return rsp; // SUCCESS\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        ex = doRequest(wrapper.client, req, rsp, isUpdate, true, wrapper.getKey());\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ef98d81d4d9ab6b358b8179f4f95181eaa0c803","date":1471597305,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = null;\n\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      try {\n        MDC.put(\"LBHttpSolrClient.url\", serverStr);\n        HttpSolrClient client = makeSolrClient(serverStr);\n\n        ex = doRequest(client, req, rsp, isUpdate, false, null);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBHttpSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        ex = doRequest(wrapper.client, req, rsp, isUpdate, true, wrapper.getKey());\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = null;\n\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      rsp.server = serverStr;\n      try {\n        MDC.put(\"LBHttpSolrClient.url\", serverStr);\n        HttpSolrClient client = makeSolrClient(serverStr);\n\n        ex = doRequest(client, req, rsp, isUpdate, false, null);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBHttpSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        ex = doRequest(wrapper.client, req, rsp, isUpdate, true, wrapper.getKey());\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = null;\n\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      try {\n        MDC.put(\"LBHttpSolrClient.url\", serverStr);\n        HttpSolrClient client = makeSolrClient(serverStr);\n\n        ex = doRequest(client, req, rsp, isUpdate, false, null);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBHttpSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        ex = doRequest(wrapper.client, req, rsp, isUpdate, true, wrapper.getKey());\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = null;\n\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      rsp.server = serverStr;\n      try {\n        MDC.put(\"LBHttpSolrClient.url\", serverStr);\n        HttpSolrClient client = makeSolrClient(serverStr);\n\n        ex = doRequest(client, req, rsp, isUpdate, false, null);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBHttpSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        ex = doRequest(wrapper.client, req, rsp, isUpdate, true, wrapper.getKey());\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5687aaac49dac0091f9d42a734eb5ec955377aad","date":1472269082,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isNonRetryable = req.request instanceof IsUpdateRequest || ADMIN_PATHS.contains(req.request.getPath());\n    List<ServerWrapper> skipped = null;\n\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      try {\n        MDC.put(\"LBHttpSolrClient.url\", serverStr);\n        HttpSolrClient client = makeSolrClient(serverStr);\n\n        ex = doRequest(client, req, rsp, isNonRetryable, false, null);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBHttpSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        ex = doRequest(wrapper.client, req, rsp, isNonRetryable, true, wrapper.getKey());\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = null;\n\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      try {\n        MDC.put(\"LBHttpSolrClient.url\", serverStr);\n        HttpSolrClient client = makeSolrClient(serverStr);\n\n        ex = doRequest(client, req, rsp, isUpdate, false, null);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBHttpSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        ex = doRequest(wrapper.client, req, rsp, isUpdate, true, wrapper.getKey());\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isNonRetryable = req.request instanceof IsUpdateRequest || ADMIN_PATHS.contains(req.request.getPath());\n    List<ServerWrapper> skipped = null;\n\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      try {\n        MDC.put(\"LBHttpSolrClient.url\", serverStr);\n        HttpSolrClient client = makeSolrClient(serverStr);\n\n        ex = doRequest(client, req, rsp, isNonRetryable, false, null);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBHttpSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        ex = doRequest(wrapper.client, req, rsp, isNonRetryable, true, wrapper.getKey());\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = null;\n\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      try {\n        MDC.put(\"LBHttpSolrClient.url\", serverStr);\n        HttpSolrClient client = makeSolrClient(serverStr);\n\n        ex = doRequest(client, req, rsp, isUpdate, false, null);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBHttpSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        ex = doRequest(wrapper.client, req, rsp, isUpdate, true, wrapper.getKey());\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isNonRetryable = req.request instanceof IsUpdateRequest || ADMIN_PATHS.contains(req.request.getPath());\n    List<ServerWrapper> skipped = null;\n\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      try {\n        MDC.put(\"LBHttpSolrClient.url\", serverStr);\n        HttpSolrClient client = makeSolrClient(serverStr);\n\n        ex = doRequest(client, req, rsp, isNonRetryable, false, null);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBHttpSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        ex = doRequest(wrapper.client, req, rsp, isNonRetryable, true, wrapper.getKey());\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = null;\n\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      rsp.server = serverStr;\n      try {\n        MDC.put(\"LBHttpSolrClient.url\", serverStr);\n        HttpSolrClient client = makeSolrClient(serverStr);\n\n        ex = doRequest(client, req, rsp, isUpdate, false, null);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBHttpSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        ex = doRequest(wrapper.client, req, rsp, isUpdate, true, wrapper.getKey());\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a1c1f83e20476d2a39b5a5c87c0689e79314ceb","date":1491559481,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isNonRetryable = req.request instanceof IsUpdateRequest || ADMIN_PATHS.contains(req.request.getPath());\n    List<ServerWrapper> skipped = null;\n\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      try {\n        MDC.put(\"LBHttpSolrClient.url\", serverStr);\n        HttpSolrClient client = makeSolrClient(serverStr);\n\n        ex = doRequest(client, req, rsp, isNonRetryable, false, null);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBHttpSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        try {\n          MDC.put(\"LBHttpSolrClient.url\", wrapper.client.getBaseURL());\n          ex = doRequest(wrapper.client, req, rsp, isNonRetryable, true, wrapper.getKey());\n          if (ex == null) {\n            return rsp; // SUCCESS\n          }\n        } finally {\n          MDC.remove(\"LBHttpSolrClient.url\");\n        }\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isNonRetryable = req.request instanceof IsUpdateRequest || ADMIN_PATHS.contains(req.request.getPath());\n    List<ServerWrapper> skipped = null;\n\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      try {\n        MDC.put(\"LBHttpSolrClient.url\", serverStr);\n        HttpSolrClient client = makeSolrClient(serverStr);\n\n        ex = doRequest(client, req, rsp, isNonRetryable, false, null);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBHttpSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        ex = doRequest(wrapper.client, req, rsp, isNonRetryable, true, wrapper.getKey());\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4a66009e1f5c17a77d75a6381cacdf9c893b2d8f","date":1491987818,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isNonRetryable = req.request instanceof IsUpdateRequest || ADMIN_PATHS.contains(req.request.getPath());\n    List<ServerWrapper> skipped = null;\n\n    boolean timeAllowedExceeded = false;\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      try {\n        MDC.put(\"LBHttpSolrClient.url\", serverStr);\n        HttpSolrClient client = makeSolrClient(serverStr);\n\n        ex = doRequest(client, req, rsp, isNonRetryable, false, null);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBHttpSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        try {\n          MDC.put(\"LBHttpSolrClient.url\", wrapper.client.getBaseURL());\n          ex = doRequest(wrapper.client, req, rsp, isNonRetryable, true, wrapper.getKey());\n          if (ex == null) {\n            return rsp; // SUCCESS\n          }\n        } finally {\n          MDC.remove(\"LBHttpSolrClient.url\");\n        }\n      }\n    }\n\n\n    final String solrServerExceptionMessage;\n    if (timeAllowedExceeded) {\n      solrServerExceptionMessage = \"Time allowed to handle this request exceeded\";\n    } else {\n      solrServerExceptionMessage = \"No live SolrServers available to handle this request\";\n    }\n    if (ex == null) {\n      throw new SolrServerException(solrServerExceptionMessage);\n    } else {\n      throw new SolrServerException(solrServerExceptionMessage+\":\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isNonRetryable = req.request instanceof IsUpdateRequest || ADMIN_PATHS.contains(req.request.getPath());\n    List<ServerWrapper> skipped = null;\n\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      try {\n        MDC.put(\"LBHttpSolrClient.url\", serverStr);\n        HttpSolrClient client = makeSolrClient(serverStr);\n\n        ex = doRequest(client, req, rsp, isNonRetryable, false, null);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBHttpSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        try {\n          MDC.put(\"LBHttpSolrClient.url\", wrapper.client.getBaseURL());\n          ex = doRequest(wrapper.client, req, rsp, isNonRetryable, true, wrapper.getKey());\n          if (ex == null) {\n            return rsp; // SUCCESS\n          }\n        } finally {\n          MDC.remove(\"LBHttpSolrClient.url\");\n        }\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","bugFix":["2df5da9b9a665127f75b19af580e9df62caced1d","bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isNonRetryable = req.request instanceof IsUpdateRequest || ADMIN_PATHS.contains(req.request.getPath());\n    List<ServerWrapper> skipped = null;\n\n    boolean timeAllowedExceeded = false;\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      try {\n        MDC.put(\"LBHttpSolrClient.url\", serverStr);\n        HttpSolrClient client = makeSolrClient(serverStr);\n\n        ex = doRequest(client, req, rsp, isNonRetryable, false, null);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBHttpSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        try {\n          MDC.put(\"LBHttpSolrClient.url\", wrapper.client.getBaseURL());\n          ex = doRequest(wrapper.client, req, rsp, isNonRetryable, true, wrapper.getKey());\n          if (ex == null) {\n            return rsp; // SUCCESS\n          }\n        } finally {\n          MDC.remove(\"LBHttpSolrClient.url\");\n        }\n      }\n    }\n\n\n    final String solrServerExceptionMessage;\n    if (timeAllowedExceeded) {\n      solrServerExceptionMessage = \"Time allowed to handle this request exceeded\";\n    } else {\n      solrServerExceptionMessage = \"No live SolrServers available to handle this request\";\n    }\n    if (ex == null) {\n      throw new SolrServerException(solrServerExceptionMessage);\n    } else {\n      throw new SolrServerException(solrServerExceptionMessage+\":\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isNonRetryable = req.request instanceof IsUpdateRequest || ADMIN_PATHS.contains(req.request.getPath());\n    List<ServerWrapper> skipped = null;\n\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      try {\n        MDC.put(\"LBHttpSolrClient.url\", serverStr);\n        HttpSolrClient client = makeSolrClient(serverStr);\n\n        ex = doRequest(client, req, rsp, isNonRetryable, false, null);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBHttpSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        ex = doRequest(wrapper.client, req, rsp, isNonRetryable, true, wrapper.getKey());\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ec1fd3cd1aa9782d426f1d542ff0a618ce9bbe10","date":1495727205,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isNonRetryable = req.request instanceof IsUpdateRequest || ADMIN_PATHS.contains(req.request.getPath());\n    List<ServerWrapper> skipped = null;\n\n    final Integer numServersToTry = req.getNumServersToTry();\n    int numServersTried = 0;\n\n    boolean timeAllowedExceeded = false;\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      try {\n        MDC.put(\"LBHttpSolrClient.url\", serverStr);\n\n        if (numServersToTry != null && numServersTried > numServersToTry.intValue()) {\n          break;\n        }\n\n        HttpSolrClient client = makeSolrClient(serverStr);\n\n        ++numServersTried;\n        ex = doRequest(client, req, rsp, isNonRetryable, false, null);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBHttpSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        if (numServersToTry != null && numServersTried > numServersToTry.intValue()) {\n          break;\n        }\n\n        try {\n          MDC.put(\"LBHttpSolrClient.url\", wrapper.client.getBaseURL());\n          ++numServersTried;\n          ex = doRequest(wrapper.client, req, rsp, isNonRetryable, true, wrapper.getKey());\n          if (ex == null) {\n            return rsp; // SUCCESS\n          }\n        } finally {\n          MDC.remove(\"LBHttpSolrClient.url\");\n        }\n      }\n    }\n\n\n    final String solrServerExceptionMessage;\n    if (timeAllowedExceeded) {\n      solrServerExceptionMessage = \"Time allowed to handle this request exceeded\";\n    } else {\n      if (numServersToTry != null && numServersTried > numServersToTry.intValue()) {\n        solrServerExceptionMessage = \"No live SolrServers available to handle this request:\"\n            + \" numServersTried=\"+numServersTried\n            + \" numServersToTry=\"+numServersToTry.intValue();\n      } else {\n        solrServerExceptionMessage = \"No live SolrServers available to handle this request\";\n      }\n    }\n    if (ex == null) {\n      throw new SolrServerException(solrServerExceptionMessage);\n    } else {\n      throw new SolrServerException(solrServerExceptionMessage+\":\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isNonRetryable = req.request instanceof IsUpdateRequest || ADMIN_PATHS.contains(req.request.getPath());\n    List<ServerWrapper> skipped = null;\n\n    boolean timeAllowedExceeded = false;\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      try {\n        MDC.put(\"LBHttpSolrClient.url\", serverStr);\n        HttpSolrClient client = makeSolrClient(serverStr);\n\n        ex = doRequest(client, req, rsp, isNonRetryable, false, null);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBHttpSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        try {\n          MDC.put(\"LBHttpSolrClient.url\", wrapper.client.getBaseURL());\n          ex = doRequest(wrapper.client, req, rsp, isNonRetryable, true, wrapper.getKey());\n          if (ex == null) {\n            return rsp; // SUCCESS\n          }\n        } finally {\n          MDC.remove(\"LBHttpSolrClient.url\");\n        }\n      }\n    }\n\n\n    final String solrServerExceptionMessage;\n    if (timeAllowedExceeded) {\n      solrServerExceptionMessage = \"Time allowed to handle this request exceeded\";\n    } else {\n      solrServerExceptionMessage = \"No live SolrServers available to handle this request\";\n    }\n    if (ex == null) {\n      throw new SolrServerException(solrServerExceptionMessage);\n    } else {\n      throw new SolrServerException(solrServerExceptionMessage+\":\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isNonRetryable = req.request instanceof IsUpdateRequest || ADMIN_PATHS.contains(req.request.getPath());\n    List<ServerWrapper> skipped = null;\n\n    final Integer numServersToTry = req.getNumServersToTry();\n    int numServersTried = 0;\n\n    boolean timeAllowedExceeded = false;\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      try {\n        MDC.put(\"LBHttpSolrClient.url\", serverStr);\n\n        if (numServersToTry != null && numServersTried > numServersToTry.intValue()) {\n          break;\n        }\n\n        HttpSolrClient client = makeSolrClient(serverStr);\n\n        ++numServersTried;\n        ex = doRequest(client, req, rsp, isNonRetryable, false, null);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBHttpSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        if (numServersToTry != null && numServersTried > numServersToTry.intValue()) {\n          break;\n        }\n\n        try {\n          MDC.put(\"LBHttpSolrClient.url\", wrapper.client.getBaseURL());\n          ++numServersTried;\n          ex = doRequest(wrapper.client, req, rsp, isNonRetryable, true, wrapper.getKey());\n          if (ex == null) {\n            return rsp; // SUCCESS\n          }\n        } finally {\n          MDC.remove(\"LBHttpSolrClient.url\");\n        }\n      }\n    }\n\n\n    final String solrServerExceptionMessage;\n    if (timeAllowedExceeded) {\n      solrServerExceptionMessage = \"Time allowed to handle this request exceeded\";\n    } else {\n      if (numServersToTry != null && numServersTried > numServersToTry.intValue()) {\n        solrServerExceptionMessage = \"No live SolrServers available to handle this request:\"\n            + \" numServersTried=\"+numServersTried\n            + \" numServersToTry=\"+numServersToTry.intValue();\n      } else {\n        solrServerExceptionMessage = \"No live SolrServers available to handle this request\";\n      }\n    }\n    if (ex == null) {\n      throw new SolrServerException(solrServerExceptionMessage);\n    } else {\n      throw new SolrServerException(solrServerExceptionMessage+\":\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isNonRetryable = req.request instanceof IsUpdateRequest || ADMIN_PATHS.contains(req.request.getPath());\n    List<ServerWrapper> skipped = null;\n\n    boolean timeAllowedExceeded = false;\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      try {\n        MDC.put(\"LBHttpSolrClient.url\", serverStr);\n        HttpSolrClient client = makeSolrClient(serverStr);\n\n        ex = doRequest(client, req, rsp, isNonRetryable, false, null);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBHttpSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        try {\n          MDC.put(\"LBHttpSolrClient.url\", wrapper.client.getBaseURL());\n          ex = doRequest(wrapper.client, req, rsp, isNonRetryable, true, wrapper.getKey());\n          if (ex == null) {\n            return rsp; // SUCCESS\n          }\n        } finally {\n          MDC.remove(\"LBHttpSolrClient.url\");\n        }\n      }\n    }\n\n\n    final String solrServerExceptionMessage;\n    if (timeAllowedExceeded) {\n      solrServerExceptionMessage = \"Time allowed to handle this request exceeded\";\n    } else {\n      solrServerExceptionMessage = \"No live SolrServers available to handle this request\";\n    }\n    if (ex == null) {\n      throw new SolrServerException(solrServerExceptionMessage);\n    } else {\n      throw new SolrServerException(solrServerExceptionMessage+\":\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isNonRetryable = req.request instanceof IsUpdateRequest || ADMIN_PATHS.contains(req.request.getPath());\n    List<ServerWrapper> skipped = null;\n\n    final Integer numServersToTry = req.getNumServersToTry();\n    int numServersTried = 0;\n\n    boolean timeAllowedExceeded = false;\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      try {\n        MDC.put(\"LBHttpSolrClient.url\", serverStr);\n\n        if (numServersToTry != null && numServersTried > numServersToTry.intValue()) {\n          break;\n        }\n\n        HttpSolrClient client = makeSolrClient(serverStr);\n\n        ++numServersTried;\n        ex = doRequest(client, req, rsp, isNonRetryable, false, null);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBHttpSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        if (numServersToTry != null && numServersTried > numServersToTry.intValue()) {\n          break;\n        }\n\n        try {\n          MDC.put(\"LBHttpSolrClient.url\", wrapper.client.getBaseURL());\n          ++numServersTried;\n          ex = doRequest(wrapper.client, req, rsp, isNonRetryable, true, wrapper.getKey());\n          if (ex == null) {\n            return rsp; // SUCCESS\n          }\n        } finally {\n          MDC.remove(\"LBHttpSolrClient.url\");\n        }\n      }\n    }\n\n\n    final String solrServerExceptionMessage;\n    if (timeAllowedExceeded) {\n      solrServerExceptionMessage = \"Time allowed to handle this request exceeded\";\n    } else {\n      if (numServersToTry != null && numServersTried > numServersToTry.intValue()) {\n        solrServerExceptionMessage = \"No live SolrServers available to handle this request:\"\n            + \" numServersTried=\"+numServersTried\n            + \" numServersToTry=\"+numServersToTry.intValue();\n      } else {\n        solrServerExceptionMessage = \"No live SolrServers available to handle this request\";\n      }\n    }\n    if (ex == null) {\n      throw new SolrServerException(solrServerExceptionMessage);\n    } else {\n      throw new SolrServerException(solrServerExceptionMessage+\":\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isNonRetryable = req.request instanceof IsUpdateRequest || ADMIN_PATHS.contains(req.request.getPath());\n    List<ServerWrapper> skipped = null;\n\n    boolean timeAllowedExceeded = false;\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      try {\n        MDC.put(\"LBHttpSolrClient.url\", serverStr);\n        HttpSolrClient client = makeSolrClient(serverStr);\n\n        ex = doRequest(client, req, rsp, isNonRetryable, false, null);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBHttpSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        try {\n          MDC.put(\"LBHttpSolrClient.url\", wrapper.client.getBaseURL());\n          ex = doRequest(wrapper.client, req, rsp, isNonRetryable, true, wrapper.getKey());\n          if (ex == null) {\n            return rsp; // SUCCESS\n          }\n        } finally {\n          MDC.remove(\"LBHttpSolrClient.url\");\n        }\n      }\n    }\n\n\n    final String solrServerExceptionMessage;\n    if (timeAllowedExceeded) {\n      solrServerExceptionMessage = \"Time allowed to handle this request exceeded\";\n    } else {\n      solrServerExceptionMessage = \"No live SolrServers available to handle this request\";\n    }\n    if (ex == null) {\n      throw new SolrServerException(solrServerExceptionMessage);\n    } else {\n      throw new SolrServerException(solrServerExceptionMessage+\":\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","sourceNew":"  /**\n   * @deprecated use {@link LBSolrClient#request(LBSolrClient.Req)} instead\n   */\n  @Deprecated\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    LBSolrClient.Rsp rsp = super.request(req);\n    // for backward-compatibility support\n    Rsp result = new Rsp();\n    result.rsp = rsp.rsp;\n    result.server = rsp.server;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isNonRetryable = req.request instanceof IsUpdateRequest || ADMIN_PATHS.contains(req.request.getPath());\n    List<ServerWrapper> skipped = null;\n\n    final Integer numServersToTry = req.getNumServersToTry();\n    int numServersTried = 0;\n\n    boolean timeAllowedExceeded = false;\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      try {\n        MDC.put(\"LBHttpSolrClient.url\", serverStr);\n\n        if (numServersToTry != null && numServersTried > numServersToTry.intValue()) {\n          break;\n        }\n\n        HttpSolrClient client = makeSolrClient(serverStr);\n\n        ++numServersTried;\n        ex = doRequest(client, req, rsp, isNonRetryable, false, null);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBHttpSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        if (numServersToTry != null && numServersTried > numServersToTry.intValue()) {\n          break;\n        }\n\n        try {\n          MDC.put(\"LBHttpSolrClient.url\", wrapper.client.getBaseURL());\n          ++numServersTried;\n          ex = doRequest(wrapper.client, req, rsp, isNonRetryable, true, wrapper.getKey());\n          if (ex == null) {\n            return rsp; // SUCCESS\n          }\n        } finally {\n          MDC.remove(\"LBHttpSolrClient.url\");\n        }\n      }\n    }\n\n\n    final String solrServerExceptionMessage;\n    if (timeAllowedExceeded) {\n      solrServerExceptionMessage = \"Time allowed to handle this request exceeded\";\n    } else {\n      if (numServersToTry != null && numServersTried > numServersToTry.intValue()) {\n        solrServerExceptionMessage = \"No live SolrServers available to handle this request:\"\n            + \" numServersTried=\"+numServersTried\n            + \" numServersToTry=\"+numServersToTry.intValue();\n      } else {\n        solrServerExceptionMessage = \"No live SolrServers available to handle this request\";\n      }\n    }\n    if (ex == null) {\n      throw new SolrServerException(solrServerExceptionMessage);\n    } else {\n      throw new SolrServerException(solrServerExceptionMessage+\":\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2df5da9b9a665127f75b19af580e9df62caced1d":["bafca15d8e408346a67f4282ad1143b88023893b"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6a96b173f2f573ac82bc8279dfdd3cbe2b948f95":["2df5da9b9a665127f75b19af580e9df62caced1d"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["6a96b173f2f573ac82bc8279dfdd3cbe2b948f95","0ef98d81d4d9ab6b358b8179f4f95181eaa0c803"],"4a66009e1f5c17a77d75a6381cacdf9c893b2d8f":["3a1c1f83e20476d2a39b5a5c87c0689e79314ceb"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6a96b173f2f573ac82bc8279dfdd3cbe2b948f95","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","ec1fd3cd1aa9782d426f1d542ff0a618ce9bbe10"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5687aaac49dac0091f9d42a734eb5ec955377aad"],"5687aaac49dac0091f9d42a734eb5ec955377aad":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"3a1c1f83e20476d2a39b5a5c87c0689e79314ceb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0ef98d81d4d9ab6b358b8179f4f95181eaa0c803":["6a96b173f2f573ac82bc8279dfdd3cbe2b948f95"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["4a66009e1f5c17a77d75a6381cacdf9c893b2d8f","ec1fd3cd1aa9782d426f1d542ff0a618ce9bbe10"],"ec1fd3cd1aa9782d426f1d542ff0a618ce9bbe10":["4a66009e1f5c17a77d75a6381cacdf9c893b2d8f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"]},"commit2Childs":{"2df5da9b9a665127f75b19af580e9df62caced1d":["6a96b173f2f573ac82bc8279dfdd3cbe2b948f95"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"6a96b173f2f573ac82bc8279dfdd3cbe2b948f95":["403d05f7f8d69b65659157eff1bc1d2717f04c66","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0ef98d81d4d9ab6b358b8179f4f95181eaa0c803"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","5687aaac49dac0091f9d42a734eb5ec955377aad"],"4a66009e1f5c17a77d75a6381cacdf9c893b2d8f":["d1f5728f32a4a256b36cfabd7a2636452f599bb9","ec1fd3cd1aa9782d426f1d542ff0a618ce9bbe10"],"bafca15d8e408346a67f4282ad1143b88023893b":["2df5da9b9a665127f75b19af580e9df62caced1d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3a1c1f83e20476d2a39b5a5c87c0689e79314ceb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"5687aaac49dac0091f9d42a734eb5ec955377aad":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0ef98d81d4d9ab6b358b8179f4f95181eaa0c803":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"3a1c1f83e20476d2a39b5a5c87c0689e79314ceb":["4a66009e1f5c17a77d75a6381cacdf9c893b2d8f"],"ec1fd3cd1aa9782d426f1d542ff0a618ce9bbe10":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}