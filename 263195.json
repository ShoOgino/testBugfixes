{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","sourceNew":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.fine(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<T>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, false);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.fine(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","sourceOld":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.fine(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<T>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, false);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.fine(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","sourceNew":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.fine(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<T>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, 0);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.fine(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","sourceOld":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.fine(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<T>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, false);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.fine(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","bugFix":["b17c5c53627893d93f9261826cc6d9c447c5ee3a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","sourceNew":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.fine(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<T>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, 0);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.fine(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","sourceOld":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.fine(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<T>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, false);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.fine(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","sourceNew":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.fine(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<T>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, 0);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.fine(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","sourceOld":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.fine(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<T>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, false);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.fine(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","sourceNew":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.fine(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<T>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, DocsEnum.FLAG_NONE);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.fine(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","sourceOld":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.fine(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<T>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, 0);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.fine(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","sourceNew":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.fine(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<T>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, DocsEnum.FLAG_NONE);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.fine(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","sourceOld":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.fine(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<T>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, 0);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.fine(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","sourceNew":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.fine(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, DocsEnum.FLAG_NONE);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.fine(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","sourceOld":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.fine(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<T>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, DocsEnum.FLAG_NONE);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.fine(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","sourceNew":null,"sourceOld":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.fine(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, DocsEnum.FLAG_NONE);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.fine(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["02331260bb246364779cb6f04919ca47900d01bb","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["02331260bb246364779cb6f04919ca47900d01bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","02331260bb246364779cb6f04919ca47900d01bb"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"02331260bb246364779cb6f04919ca47900d01bb":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"02331260bb246364779cb6f04919ca47900d01bb":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","15250ca94ba8ab3bcdd476daf6bf3f3febb92640","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}