{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#setParams(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#setParams(String).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#setParams(String).mjava","sourceNew":"  /**\n   * Set the params (analyzerClassName only),  Comma-separate list of Analyzer class names.  If the Analyzer lives in\n   * org.apache.lucene.analysis, the name can be shortened by dropping the o.a.l.a part of the Fully Qualified Class Name.\n   * <p/>\n   * Example Declaration: {\"NewAnalyzer\" NewAnalyzer(WhitespaceAnalyzer, SimpleAnalyzer, StopAnalyzer, standard.StandardAnalyzer) >\n   * @param params analyzerClassName, or empty for the StandardAnalyzer\n   */\n  @Override\n  public void setParams(String params) {\n    super.setParams(params);\n    for (StringTokenizer tokenizer = new StringTokenizer(params, \",\"); tokenizer.hasMoreTokens();) {\n      String s = tokenizer.nextToken();\n      analyzerClassNames.add(s.trim());\n    }\n  }\n\n","sourceOld":"  /**\n   * Set the params (analyzerClassName only),  Comma-separate list of Analyzer class names.  If the Analyzer lives in\n   * org.apache.lucene.analysis, the name can be shortened by dropping the o.a.l.a part of the Fully Qualified Class Name.\n   * <p/>\n   * Example Declaration: {\"NewAnalyzer\" NewAnalyzer(WhitespaceAnalyzer, SimpleAnalyzer, StopAnalyzer, standard.StandardAnalyzer) >\n   * @param params analyzerClassName, or empty for the StandardAnalyzer\n   */\n  @Override\n  public void setParams(String params) {\n    super.setParams(params);\n    for (StringTokenizer tokenizer = new StringTokenizer(params, \",\"); tokenizer.hasMoreTokens();) {\n      String s = tokenizer.nextToken();\n      analyzerClassNames.add(s.trim());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bb889a868ab9d608bde8136f42ed7234a3a927b","date":1359393528,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#setParams(String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#setParams(String).mjava","sourceNew":"  /**\n   * Set the params (analyzerName only),  Comma-separate list of Analyzer class names.  If the Analyzer lives in\n   * org.apache.lucene.analysis, the name can be shortened by dropping the o.a.l.a part of the Fully Qualified Class Name.\n   * <p/>\n   * Analyzer names may also refer to previously defined AnalyzerFactory's.\n   * <p/>\n   * Example Declaration: {\"NewAnalyzer\" NewAnalyzer(WhitespaceAnalyzer, SimpleAnalyzer, StopAnalyzer, standard.StandardAnalyzer) >\n   * <p/>\n   * Example AnalyzerFactory usage:\n   * <pre>\n   * -AnalyzerFactory(name:'whitespace tokenized',WhitespaceTokenizer)\n   * -NewAnalyzer('whitespace tokenized')\n   * </pre>\n   * @param params analyzerClassName, or empty for the StandardAnalyzer\n   */\n  @Override\n  public void setParams(String params) {\n    super.setParams(params);\n    final StreamTokenizer stok = new StreamTokenizer(new StringReader(params));\n    stok.quoteChar('\"');\n    stok.quoteChar('\\'');\n    stok.eolIsSignificant(false);\n    stok.ordinaryChar(',');\n    try {\n      while (stok.nextToken() != StreamTokenizer.TT_EOF) {\n        switch (stok.ttype) {\n          case ',': {\n            // Do nothing\n            break;\n          }\n          case '\\'':\n          case '\\\"':\n          case StreamTokenizer.TT_WORD: {\n            analyzerNames.add(stok.sval);\n            break;\n          }\n          default: {\n            throw new RuntimeException(\"Unexpected token: \" + stok.toString());\n          }\n        }\n      }\n    } catch (RuntimeException e) {\n      if (e.getMessage().startsWith(\"Line #\")) {\n        throw e;\n      } else {\n        throw new RuntimeException(\"Line #\" + (stok.lineno() + getAlgLineNum()) + \": \", e);\n      }\n    } catch (Throwable t) {\n      throw new RuntimeException(\"Line #\" + (stok.lineno() + getAlgLineNum()) + \": \", t);\n    }\n\n\n  }\n\n","sourceOld":"  /**\n   * Set the params (analyzerClassName only),  Comma-separate list of Analyzer class names.  If the Analyzer lives in\n   * org.apache.lucene.analysis, the name can be shortened by dropping the o.a.l.a part of the Fully Qualified Class Name.\n   * <p/>\n   * Example Declaration: {\"NewAnalyzer\" NewAnalyzer(WhitespaceAnalyzer, SimpleAnalyzer, StopAnalyzer, standard.StandardAnalyzer) >\n   * @param params analyzerClassName, or empty for the StandardAnalyzer\n   */\n  @Override\n  public void setParams(String params) {\n    super.setParams(params);\n    for (StringTokenizer tokenizer = new StringTokenizer(params, \",\"); tokenizer.hasMoreTokens();) {\n      String s = tokenizer.nextToken();\n      analyzerClassNames.add(s.trim());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":3,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#setParams(String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#setParams(String).mjava","sourceNew":"  /**\n   * Set the params (analyzerName only),  Comma-separate list of Analyzer class names.  If the Analyzer lives in\n   * org.apache.lucene.analysis, the name can be shortened by dropping the o.a.l.a part of the Fully Qualified Class Name.\n   * <p/>\n   * Analyzer names may also refer to previously defined AnalyzerFactory's.\n   * <p/>\n   * Example Declaration: {\"NewAnalyzer\" NewAnalyzer(WhitespaceAnalyzer, SimpleAnalyzer, StopAnalyzer, standard.StandardAnalyzer) >\n   * <p/>\n   * Example AnalyzerFactory usage:\n   * <pre>\n   * -AnalyzerFactory(name:'whitespace tokenized',WhitespaceTokenizer)\n   * -NewAnalyzer('whitespace tokenized')\n   * </pre>\n   * @param params analyzerClassName, or empty for the StandardAnalyzer\n   */\n  @Override\n  public void setParams(String params) {\n    super.setParams(params);\n    final StreamTokenizer stok = new StreamTokenizer(new StringReader(params));\n    stok.quoteChar('\"');\n    stok.quoteChar('\\'');\n    stok.eolIsSignificant(false);\n    stok.ordinaryChar(',');\n    try {\n      while (stok.nextToken() != StreamTokenizer.TT_EOF) {\n        switch (stok.ttype) {\n          case ',': {\n            // Do nothing\n            break;\n          }\n          case '\\'':\n          case '\\\"':\n          case StreamTokenizer.TT_WORD: {\n            analyzerNames.add(stok.sval);\n            break;\n          }\n          default: {\n            throw new RuntimeException(\"Unexpected token: \" + stok.toString());\n          }\n        }\n      }\n    } catch (RuntimeException e) {\n      if (e.getMessage().startsWith(\"Line #\")) {\n        throw e;\n      } else {\n        throw new RuntimeException(\"Line #\" + (stok.lineno() + getAlgLineNum()) + \": \", e);\n      }\n    } catch (Throwable t) {\n      throw new RuntimeException(\"Line #\" + (stok.lineno() + getAlgLineNum()) + \": \", t);\n    }\n\n\n  }\n\n","sourceOld":"  /**\n   * Set the params (analyzerClassName only),  Comma-separate list of Analyzer class names.  If the Analyzer lives in\n   * org.apache.lucene.analysis, the name can be shortened by dropping the o.a.l.a part of the Fully Qualified Class Name.\n   * <p/>\n   * Example Declaration: {\"NewAnalyzer\" NewAnalyzer(WhitespaceAnalyzer, SimpleAnalyzer, StopAnalyzer, standard.StandardAnalyzer) >\n   * @param params analyzerClassName, or empty for the StandardAnalyzer\n   */\n  @Override\n  public void setParams(String params) {\n    super.setParams(params);\n    for (StringTokenizer tokenizer = new StringTokenizer(params, \",\"); tokenizer.hasMoreTokens();) {\n      String s = tokenizer.nextToken();\n      analyzerClassNames.add(s.trim());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#setParams(String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#setParams(String).mjava","sourceNew":"  /**\n   * Set the params (analyzerName only),  Comma-separate list of Analyzer class names.  If the Analyzer lives in\n   * org.apache.lucene.analysis, the name can be shortened by dropping the o.a.l.a part of the Fully Qualified Class Name.\n   * <p/>\n   * Analyzer names may also refer to previously defined AnalyzerFactory's.\n   * <p/>\n   * Example Declaration: {\"NewAnalyzer\" NewAnalyzer(WhitespaceAnalyzer, SimpleAnalyzer, StopAnalyzer, standard.StandardAnalyzer) &gt;\n   * <p/>\n   * Example AnalyzerFactory usage:\n   * <pre>\n   * -AnalyzerFactory(name:'whitespace tokenized',WhitespaceTokenizer)\n   * -NewAnalyzer('whitespace tokenized')\n   * </pre>\n   * @param params analyzerClassName, or empty for the StandardAnalyzer\n   */\n  @Override\n  public void setParams(String params) {\n    super.setParams(params);\n    final StreamTokenizer stok = new StreamTokenizer(new StringReader(params));\n    stok.quoteChar('\"');\n    stok.quoteChar('\\'');\n    stok.eolIsSignificant(false);\n    stok.ordinaryChar(',');\n    try {\n      while (stok.nextToken() != StreamTokenizer.TT_EOF) {\n        switch (stok.ttype) {\n          case ',': {\n            // Do nothing\n            break;\n          }\n          case '\\'':\n          case '\\\"':\n          case StreamTokenizer.TT_WORD: {\n            analyzerNames.add(stok.sval);\n            break;\n          }\n          default: {\n            throw new RuntimeException(\"Unexpected token: \" + stok.toString());\n          }\n        }\n      }\n    } catch (RuntimeException e) {\n      if (e.getMessage().startsWith(\"Line #\")) {\n        throw e;\n      } else {\n        throw new RuntimeException(\"Line #\" + (stok.lineno() + getAlgLineNum()) + \": \", e);\n      }\n    } catch (Throwable t) {\n      throw new RuntimeException(\"Line #\" + (stok.lineno() + getAlgLineNum()) + \": \", t);\n    }\n\n\n  }\n\n","sourceOld":"  /**\n   * Set the params (analyzerName only),  Comma-separate list of Analyzer class names.  If the Analyzer lives in\n   * org.apache.lucene.analysis, the name can be shortened by dropping the o.a.l.a part of the Fully Qualified Class Name.\n   * <p/>\n   * Analyzer names may also refer to previously defined AnalyzerFactory's.\n   * <p/>\n   * Example Declaration: {\"NewAnalyzer\" NewAnalyzer(WhitespaceAnalyzer, SimpleAnalyzer, StopAnalyzer, standard.StandardAnalyzer) >\n   * <p/>\n   * Example AnalyzerFactory usage:\n   * <pre>\n   * -AnalyzerFactory(name:'whitespace tokenized',WhitespaceTokenizer)\n   * -NewAnalyzer('whitespace tokenized')\n   * </pre>\n   * @param params analyzerClassName, or empty for the StandardAnalyzer\n   */\n  @Override\n  public void setParams(String params) {\n    super.setParams(params);\n    final StreamTokenizer stok = new StreamTokenizer(new StringReader(params));\n    stok.quoteChar('\"');\n    stok.quoteChar('\\'');\n    stok.eolIsSignificant(false);\n    stok.ordinaryChar(',');\n    try {\n      while (stok.nextToken() != StreamTokenizer.TT_EOF) {\n        switch (stok.ttype) {\n          case ',': {\n            // Do nothing\n            break;\n          }\n          case '\\'':\n          case '\\\"':\n          case StreamTokenizer.TT_WORD: {\n            analyzerNames.add(stok.sval);\n            break;\n          }\n          default: {\n            throw new RuntimeException(\"Unexpected token: \" + stok.toString());\n          }\n        }\n      }\n    } catch (RuntimeException e) {\n      if (e.getMessage().startsWith(\"Line #\")) {\n        throw e;\n      } else {\n        throw new RuntimeException(\"Line #\" + (stok.lineno() + getAlgLineNum()) + \": \", e);\n      }\n    } catch (Throwable t) {\n      throw new RuntimeException(\"Line #\" + (stok.lineno() + getAlgLineNum()) + \": \", t);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14600834a1fbc7c12faf344466e00cca8cc67de4","date":1423303834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#setParams(String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#setParams(String).mjava","sourceNew":"  /**\n   * Set the params (analyzerName only),  Comma-separate list of Analyzer class names.  If the Analyzer lives in\n   * org.apache.lucene.analysis, the name can be shortened by dropping the o.a.l.a part of the Fully Qualified Class Name.\n   * <p>\n   * Analyzer names may also refer to previously defined AnalyzerFactory's.\n   * <p>\n   * Example Declaration: {\"NewAnalyzer\" NewAnalyzer(WhitespaceAnalyzer, SimpleAnalyzer, StopAnalyzer, standard.StandardAnalyzer) &gt;\n   * <p>\n   * Example AnalyzerFactory usage:\n   * <pre>\n   * -AnalyzerFactory(name:'whitespace tokenized',WhitespaceTokenizer)\n   * -NewAnalyzer('whitespace tokenized')\n   * </pre>\n   * @param params analyzerClassName, or empty for the StandardAnalyzer\n   */\n  @Override\n  public void setParams(String params) {\n    super.setParams(params);\n    final StreamTokenizer stok = new StreamTokenizer(new StringReader(params));\n    stok.quoteChar('\"');\n    stok.quoteChar('\\'');\n    stok.eolIsSignificant(false);\n    stok.ordinaryChar(',');\n    try {\n      while (stok.nextToken() != StreamTokenizer.TT_EOF) {\n        switch (stok.ttype) {\n          case ',': {\n            // Do nothing\n            break;\n          }\n          case '\\'':\n          case '\\\"':\n          case StreamTokenizer.TT_WORD: {\n            analyzerNames.add(stok.sval);\n            break;\n          }\n          default: {\n            throw new RuntimeException(\"Unexpected token: \" + stok.toString());\n          }\n        }\n      }\n    } catch (RuntimeException e) {\n      if (e.getMessage().startsWith(\"Line #\")) {\n        throw e;\n      } else {\n        throw new RuntimeException(\"Line #\" + (stok.lineno() + getAlgLineNum()) + \": \", e);\n      }\n    } catch (Throwable t) {\n      throw new RuntimeException(\"Line #\" + (stok.lineno() + getAlgLineNum()) + \": \", t);\n    }\n\n\n  }\n\n","sourceOld":"  /**\n   * Set the params (analyzerName only),  Comma-separate list of Analyzer class names.  If the Analyzer lives in\n   * org.apache.lucene.analysis, the name can be shortened by dropping the o.a.l.a part of the Fully Qualified Class Name.\n   * <p/>\n   * Analyzer names may also refer to previously defined AnalyzerFactory's.\n   * <p/>\n   * Example Declaration: {\"NewAnalyzer\" NewAnalyzer(WhitespaceAnalyzer, SimpleAnalyzer, StopAnalyzer, standard.StandardAnalyzer) &gt;\n   * <p/>\n   * Example AnalyzerFactory usage:\n   * <pre>\n   * -AnalyzerFactory(name:'whitespace tokenized',WhitespaceTokenizer)\n   * -NewAnalyzer('whitespace tokenized')\n   * </pre>\n   * @param params analyzerClassName, or empty for the StandardAnalyzer\n   */\n  @Override\n  public void setParams(String params) {\n    super.setParams(params);\n    final StreamTokenizer stok = new StreamTokenizer(new StringReader(params));\n    stok.quoteChar('\"');\n    stok.quoteChar('\\'');\n    stok.eolIsSignificant(false);\n    stok.ordinaryChar(',');\n    try {\n      while (stok.nextToken() != StreamTokenizer.TT_EOF) {\n        switch (stok.ttype) {\n          case ',': {\n            // Do nothing\n            break;\n          }\n          case '\\'':\n          case '\\\"':\n          case StreamTokenizer.TT_WORD: {\n            analyzerNames.add(stok.sval);\n            break;\n          }\n          default: {\n            throw new RuntimeException(\"Unexpected token: \" + stok.toString());\n          }\n        }\n      }\n    } catch (RuntimeException e) {\n      if (e.getMessage().startsWith(\"Line #\")) {\n        throw e;\n      } else {\n        throw new RuntimeException(\"Line #\" + (stok.lineno() + getAlgLineNum()) + \": \", e);\n      }\n    } catch (Throwable t) {\n      throw new RuntimeException(\"Line #\" + (stok.lineno() + getAlgLineNum()) + \": \", t);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["7bb889a868ab9d608bde8136f42ed7234a3a927b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"14600834a1fbc7c12faf344466e00cca8cc67de4":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"7bb889a868ab9d608bde8136f42ed7234a3a927b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"de522d9303bd67c8473a269a1319125d1f3700e0":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7bb889a868ab9d608bde8136f42ed7234a3a927b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["14600834a1fbc7c12faf344466e00cca8cc67de4"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["14600834a1fbc7c12faf344466e00cca8cc67de4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7bb889a868ab9d608bde8136f42ed7234a3a927b","de522d9303bd67c8473a269a1319125d1f3700e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7bb889a868ab9d608bde8136f42ed7234a3a927b":["b1eb427f2c6beed80d1724555fc1db003ccf3030","de522d9303bd67c8473a269a1319125d1f3700e0"],"14600834a1fbc7c12faf344466e00cca8cc67de4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"de522d9303bd67c8473a269a1319125d1f3700e0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}