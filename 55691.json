{"path":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","sourceNew":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static String locateSolrHome() {\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return normalizeDir( home );\n  }\n\n","sourceOld":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static String locateSolrHome() {\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return normalizeDir( home );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","sourceNew":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static String locateSolrHome() {\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return normalizeDir( home );\n  }\n\n","sourceOld":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static String locateSolrHome() {\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return normalizeDir( home );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","sourceNew":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static String locateSolrHome() {\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return normalizeDir( home );\n  }\n\n","sourceOld":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static String locateSolrHome() {\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return normalizeDir( home );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"083df6f7d2115772bdcf0f53c63aa859e664c69e","date":1332809829,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","sourceNew":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static String locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return normalizeDir( home );\n  }\n\n","sourceOld":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static String locateSolrHome() {\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return normalizeDir( home );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","sourceNew":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static Path locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return Paths.get(home);\n  }\n\n","sourceOld":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static String locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return normalizeDir( home );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","sourceNew":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static Path locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      logOnceInfo(\"home_using_jndi\", \"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.debug(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.debug(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        logOnceInfo(\"home_using_sysprop\", \"Using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      logOnceInfo(\"home_default\", project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return Paths.get(home);\n  }\n\n","sourceOld":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static Path locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return Paths.get(home);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","sourceNew":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static Path locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      logOnceInfo(\"home_using_jndi\", \"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.debug(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.debug(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        logOnceInfo(\"home_using_sysprop\", \"Using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      logOnceInfo(\"home_default\", project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return Paths.get(home);\n  }\n\n","sourceOld":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static Path locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return Paths.get(home);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","sourceNew":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static Path locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      logOnceInfo(\"home_using_jndi\", \"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.debug(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.debug(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        logOnceInfo(\"home_using_sysprop\", \"Using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      logOnceInfo(\"home_default\", project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return Paths.get(home);\n  }\n\n","sourceOld":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static Path locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return Paths.get(home);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","sourceNew":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static Path locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      logOnceInfo(\"home_using_jndi\", \"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.debug(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.debug(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        logOnceInfo(\"home_using_sysprop\", \"Using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      logOnceInfo(\"home_default\", project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return Paths.get(home);\n  }\n\n","sourceOld":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static Path locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return Paths.get(home);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","sourceNew":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   * <li>JNDI: via java:comp/env/solr/home</li>\n   * <li>The system property solr.solr.home</li>\n   * <li>Look in the current working directory for a solr/ directory</li>\n   * </ol>\n   * <p>\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   *\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static Path locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String) c.lookup(\"java:comp/env/\" + project + \"/home\");\n      logOnceInfo(\"home_using_jndi\", \"Using JNDI solr.home: \" + home);\n    } catch (NoInitialContextException e) {\n      log.debug(\"JNDI not configured for \" + project + \" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.debug(\"No /\" + project + \"/home in JNDI\");\n    } catch (RuntimeException ex) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    }\n\n    // Now try system property\n    if (home == null) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if (home != null) {\n        logOnceInfo(\"home_using_sysprop\", \"Using system property \" + prop + \": \" + home);\n      }\n    }\n\n    // if all else fails, try \n    if (home == null) {\n      home = project + '/';\n      logOnceInfo(\"home_default\", project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return Paths.get(home);\n  }\n\n","sourceOld":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static Path locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      logOnceInfo(\"home_using_jndi\", \"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.debug(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.debug(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        logOnceInfo(\"home_using_sysprop\", \"Using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      logOnceInfo(\"home_default\", project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return Paths.get(home);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrPaths#locateSolrHome().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","sourceNew":"  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   * <li>JNDI: via java:comp/env/solr/home</li>\n   * <li>The system property solr.solr.home</li>\n   * <li>Look in the current working directory for a solr/ directory</li>\n   * </ol>\n   * <p>\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   *\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static Path locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String) c.lookup(\"java:comp/env/solr/home\");\n      logOnceInfo(\"home_using_jndi\", \"Using JNDI solr.home: \" + home);\n    } catch (NoInitialContextException e) {\n      log.debug(\"JNDI not configured for solr (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.debug(\"No /solr/home in JNDI\");\n    } catch (RuntimeException ex) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    }\n\n    // Now try system property\n    if (home == null) {\n      String prop = \"solr.solr.home\";\n      home = System.getProperty(prop);\n      if (home != null) {\n        logOnceInfo(\"home_using_sysprop\", \"Using system property \" + prop + \": \" + home);\n      }\n    }\n\n    // if all else fails, try\n    if (home == null) {\n      home = \"solr/\";\n      logOnceInfo(\"home_default\", \"solr home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return Paths.get(home);\n  }\n\n","sourceOld":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   * <li>JNDI: via java:comp/env/solr/home</li>\n   * <li>The system property solr.solr.home</li>\n   * <li>Look in the current working directory for a solr/ directory</li>\n   * </ol>\n   * <p>\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   *\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static Path locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String) c.lookup(\"java:comp/env/\" + project + \"/home\");\n      logOnceInfo(\"home_using_jndi\", \"Using JNDI solr.home: \" + home);\n    } catch (NoInitialContextException e) {\n      log.debug(\"JNDI not configured for \" + project + \" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.debug(\"No /\" + project + \"/home in JNDI\");\n    } catch (RuntimeException ex) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    }\n\n    // Now try system property\n    if (home == null) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if (home != null) {\n        logOnceInfo(\"home_using_sysprop\", \"Using system property \" + prop + \": \" + home);\n      }\n    }\n\n    // if all else fails, try \n    if (home == null) {\n      home = project + '/';\n      logOnceInfo(\"home_default\", project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return Paths.get(home);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a626ec4d1c92e59fe390724d6220081047b03ce7","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"083df6f7d2115772bdcf0f53c63aa859e664c69e":["c26f00b574427b55127e869b935845554afde1fa"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"126d6ad24eed13163ba0959435d5a80e5672837c":["a626ec4d1c92e59fe390724d6220081047b03ce7","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["083df6f7d2115772bdcf0f53c63aa859e664c69e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a626ec4d1c92e59fe390724d6220081047b03ce7","126d6ad24eed13163ba0959435d5a80e5672837c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"]},"commit2Childs":{"c26f00b574427b55127e869b935845554afde1fa":["083df6f7d2115772bdcf0f53c63aa859e664c69e"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"083df6f7d2115772bdcf0f53c63aa859e664c69e":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["7f0c8426396c925de8db3ed3f8ff40fd73670a5c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","126d6ad24eed13163ba0959435d5a80e5672837c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","954ae83b7dfacaa33d48ea056448ae11f7745a93"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}