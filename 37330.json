{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/ShapeRectRelationTestCase#testGeoPolygonRect().mjava","commits":[{"id":"85da33268a9a33d1a1dc71ad826ff61037f42cbf","date":1513200768,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/ShapeRectRelationTestCase#testGeoPolygonRect().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","sourceNew":"  @Test\n  public void testGeoPolygonRect() {\n    new AbstractRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Shape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(maxRadius -20) + 20;\n        final Circle pointZone = ctx.getShapeFactory().circle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          ShapeFactory.PolygonBuilder builder = ctx.getShapeFactory().polygon();\n          for (int i = 0; i < vertexCount; i++) {\n            final Point point = randomPointIn(pointZone);\n            builder.pointXY(point.getX(), point.getY());\n          }\n          try {\n            return builder.build();\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Shape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          try {\n            final GeoPolygon shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints);\n            if (shape == null) {\n              continue;\n            }\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c6c784f777a2cc8fa014507ea129526822714d","date":1579733373,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/ShapeRectRelationTestCase#testGeoPolygonRect().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/ShapeRectRelationTestCase#testGeoPolygonRect().mjava","sourceNew":"  // very slow, and test sources are not here, so no clue how to fix\n  @Test\n  public void testGeoPolygonRect() {\n    new AbstractRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Shape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(maxRadius -20) + 20;\n        final Circle pointZone = ctx.getShapeFactory().circle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          ShapeFactory.PolygonBuilder builder = ctx.getShapeFactory().polygon();\n          for (int i = 0; i < vertexCount; i++) {\n            final Point point = randomPointIn(pointZone);\n            builder.pointXY(point.getX(), point.getY());\n          }\n          try {\n            return builder.build();\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Shape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @Test\n  public void testGeoPolygonRect() {\n    new AbstractRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Shape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(maxRadius -20) + 20;\n        final Circle pointZone = ctx.getShapeFactory().circle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          ShapeFactory.PolygonBuilder builder = ctx.getShapeFactory().polygon();\n          for (int i = 0; i < vertexCount; i++) {\n            final Point point = randomPointIn(pointZone);\n            builder.pointXY(point.getX(), point.getY());\n          }\n          try {\n            return builder.build();\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Shape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57c6c784f777a2cc8fa014507ea129526822714d":["85da33268a9a33d1a1dc71ad826ff61037f42cbf"],"85da33268a9a33d1a1dc71ad826ff61037f42cbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c6c784f777a2cc8fa014507ea129526822714d"]},"commit2Childs":{"57c6c784f777a2cc8fa014507ea129526822714d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85da33268a9a33d1a1dc71ad826ff61037f42cbf":["57c6c784f777a2cc8fa014507ea129526822714d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85da33268a9a33d1a1dc71ad826ff61037f42cbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}