{"path":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#checkAllSegmentsUpgraded(Directory).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#checkAllSegmentsUpgraded(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#checkAllSegmentsUpgraded(Directory).mjava","sourceNew":"  private int checkAllSegmentsUpgraded(Directory dir) throws IOException {\n    final SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    if (VERBOSE) {\n      System.out.println(\"checkAllSegmentsUpgraded: \" + infos);\n    }\n    for (SegmentInfo si : infos) {\n      assertEquals(Constants.LUCENE_MAIN_VERSION, si.getVersion());\n    }\n    return infos.size();\n  }\n\n","sourceOld":"  private int checkAllSegmentsUpgraded(Directory dir) throws IOException {\n    final SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    if (VERBOSE) {\n      System.out.println(\"checkAllSegmentsUpgraded: \" + infos);\n    }\n    for (SegmentInfo si : infos) {\n      assertEquals(Constants.LUCENE_MAIN_VERSION, si.getVersion());\n    }\n    return infos.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#checkAllSegmentsUpgraded(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#checkAllSegmentsUpgraded(Directory).mjava","sourceNew":"  private int checkAllSegmentsUpgraded(Directory dir) throws IOException {\n    final SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    if (VERBOSE) {\n      System.out.println(\"checkAllSegmentsUpgraded: \" + infos);\n    }\n    for (SegmentInfoPerCommit si : infos) {\n      assertEquals(Constants.LUCENE_MAIN_VERSION, si.info.getVersion());\n    }\n    return infos.size();\n  }\n\n","sourceOld":"  private int checkAllSegmentsUpgraded(Directory dir) throws IOException {\n    final SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    if (VERBOSE) {\n      System.out.println(\"checkAllSegmentsUpgraded: \" + infos);\n    }\n    for (SegmentInfo si : infos) {\n      assertEquals(Constants.LUCENE_MAIN_VERSION, si.getVersion());\n    }\n    return infos.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#checkAllSegmentsUpgraded(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#checkAllSegmentsUpgraded(Directory).mjava","sourceNew":"  private int checkAllSegmentsUpgraded(Directory dir) throws IOException {\n    final SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    if (VERBOSE) {\n      System.out.println(\"checkAllSegmentsUpgraded: \" + infos);\n    }\n    for (SegmentInfoPerCommit si : infos) {\n      assertEquals(Constants.LUCENE_MAIN_VERSION, si.info.getVersion());\n    }\n    return infos.size();\n  }\n\n","sourceOld":"  private int checkAllSegmentsUpgraded(Directory dir) throws IOException {\n    final SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    if (VERBOSE) {\n      System.out.println(\"checkAllSegmentsUpgraded: \" + infos);\n    }\n    for (SegmentInfo si : infos) {\n      assertEquals(Constants.LUCENE_MAIN_VERSION, si.getVersion());\n    }\n    return infos.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#checkAllSegmentsUpgraded(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#checkAllSegmentsUpgraded(Directory).mjava","sourceNew":"  private int checkAllSegmentsUpgraded(Directory dir) throws IOException {\n    final SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    if (VERBOSE) {\n      System.out.println(\"checkAllSegmentsUpgraded: \" + infos);\n    }\n    for (SegmentCommitInfo si : infos) {\n      assertEquals(Constants.LUCENE_MAIN_VERSION, si.info.getVersion());\n    }\n    return infos.size();\n  }\n\n","sourceOld":"  private int checkAllSegmentsUpgraded(Directory dir) throws IOException {\n    final SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    if (VERBOSE) {\n      System.out.println(\"checkAllSegmentsUpgraded: \" + infos);\n    }\n    for (SegmentInfoPerCommit si : infos) {\n      assertEquals(Constants.LUCENE_MAIN_VERSION, si.info.getVersion());\n    }\n    return infos.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"057a1793765d068ea9302f1a29e21734ee58d41e","date":1408130117,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#checkAllSegmentsUpgraded(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#checkAllSegmentsUpgraded(Directory).mjava","sourceNew":"  private int checkAllSegmentsUpgraded(Directory dir) throws IOException {\n    final SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    if (VERBOSE) {\n      System.out.println(\"checkAllSegmentsUpgraded: \" + infos);\n    }\n    for (SegmentCommitInfo si : infos) {\n      assertEquals(Version.LATEST, si.info.getVersion());\n    }\n    return infos.size();\n  }\n\n","sourceOld":"  private int checkAllSegmentsUpgraded(Directory dir) throws IOException {\n    final SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    if (VERBOSE) {\n      System.out.println(\"checkAllSegmentsUpgraded: \" + infos);\n    }\n    for (SegmentCommitInfo si : infos) {\n      assertEquals(Constants.LUCENE_MAIN_VERSION, si.info.getVersion());\n    }\n    return infos.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#checkAllSegmentsUpgraded(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#checkAllSegmentsUpgraded(Directory).mjava","sourceNew":"  private int checkAllSegmentsUpgraded(Directory dir) throws IOException {\n    final SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    if (VERBOSE) {\n      System.out.println(\"checkAllSegmentsUpgraded: \" + infos);\n    }\n    for (SegmentCommitInfo si : infos) {\n      assertEquals(Version.LATEST, si.info.getVersion());\n    }\n    return infos.size();\n  }\n\n","sourceOld":"  private int checkAllSegmentsUpgraded(Directory dir) throws IOException {\n    final SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    if (VERBOSE) {\n      System.out.println(\"checkAllSegmentsUpgraded: \" + infos);\n    }\n    for (SegmentCommitInfo si : infos) {\n      assertEquals(Version.LATEST, si.info.getVersion());\n    }\n    return infos.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#checkAllSegmentsUpgraded(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#checkAllSegmentsUpgraded(Directory).mjava","sourceNew":"  private int checkAllSegmentsUpgraded(Directory dir) throws IOException {\n    final SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    if (VERBOSE) {\n      System.out.println(\"checkAllSegmentsUpgraded: \" + infos);\n    }\n    for (SegmentCommitInfo si : infos) {\n      assertEquals(Version.LATEST, si.info.getVersion());\n    }\n    return infos.size();\n  }\n\n","sourceOld":"  private int checkAllSegmentsUpgraded(Directory dir) throws IOException {\n    final SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    if (VERBOSE) {\n      System.out.println(\"checkAllSegmentsUpgraded: \" + infos);\n    }\n    for (SegmentCommitInfo si : infos) {\n      assertEquals(Version.LATEST, si.info.getVersion());\n    }\n    return infos.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9d153abcf92dc5329d98571a8c3035df9bd80648"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["057a1793765d068ea9302f1a29e21734ee58d41e"],"057a1793765d068ea9302f1a29e21734ee58d41e":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["057a1793765d068ea9302f1a29e21734ee58d41e","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["057a1793765d068ea9302f1a29e21734ee58d41e"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"057a1793765d068ea9302f1a29e21734ee58d41e":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}