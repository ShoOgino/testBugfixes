{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testGrowableWriter().mjava","commits":[{"id":"747628bb19a950ac2141b16756bdce9a47e94cc2","date":1338661284,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testGrowableWriter().mjava","pathOld":"/dev/null","sourceNew":"  public void testGrowableWriter() {\n    final int valueCount = 113 + random().nextInt(1111);\n    GrowableWriter wrt = new GrowableWriter(1, valueCount, PackedInts.DEFAULT);\n    wrt.set(4, 2);\n    wrt.set(7, 10);\n    wrt.set(valueCount - 10, 99);\n    wrt.set(99, 999);\n    wrt.set(valueCount - 1, 1 << 10);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    wrt.set(99, (1 << 23) - 1);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    wrt.set(1, Long.MAX_VALUE);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    assertEquals(Long.MAX_VALUE, wrt.get(1));\n    assertEquals(2, wrt.get(4));\n    assertEquals((1 << 23) - 1, wrt.get(99));\n    assertEquals(10, wrt.get(7));\n    assertEquals(99, wrt.get(valueCount - 10));\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67210e010ad52ccb1eee189c5395a5123b977c3c","date":1371026067,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testGrowableWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testGrowableWriter().mjava","sourceNew":"  public void testGrowableWriter() {\n    final int valueCount = 113 + random().nextInt(1111);\n    GrowableWriter wrt = new GrowableWriter(1, valueCount, PackedInts.DEFAULT);\n    wrt.set(4, 2);\n    wrt.set(7, 10);\n    wrt.set(valueCount - 10, 99);\n    wrt.set(99, 999);\n    wrt.set(valueCount - 1, 1 << 10);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    wrt.set(99, (1 << 23) - 1);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    wrt.set(1, Long.MAX_VALUE);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    assertEquals(Long.MAX_VALUE, wrt.get(1));\n    assertEquals(2, wrt.get(4));\n    assertEquals((1 << 23) - 1, wrt.get(99));\n    assertEquals(10, wrt.get(7));\n    assertEquals(99, wrt.get(valueCount - 10));\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    assertEquals(RamUsageEstimator.sizeOf(wrt), wrt.ramBytesUsed());\n  }\n\n","sourceOld":"  public void testGrowableWriter() {\n    final int valueCount = 113 + random().nextInt(1111);\n    GrowableWriter wrt = new GrowableWriter(1, valueCount, PackedInts.DEFAULT);\n    wrt.set(4, 2);\n    wrt.set(7, 10);\n    wrt.set(valueCount - 10, 99);\n    wrt.set(99, 999);\n    wrt.set(valueCount - 1, 1 << 10);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    wrt.set(99, (1 << 23) - 1);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    wrt.set(1, Long.MAX_VALUE);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    assertEquals(Long.MAX_VALUE, wrt.get(1));\n    assertEquals(2, wrt.get(4));\n    assertEquals((1 << 23) - 1, wrt.get(99));\n    assertEquals(10, wrt.get(7));\n    assertEquals(99, wrt.get(valueCount - 10));\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testGrowableWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testGrowableWriter().mjava","sourceNew":"  public void testGrowableWriter() {\n    final int valueCount = 113 + random().nextInt(1111);\n    GrowableWriter wrt = new GrowableWriter(1, valueCount, PackedInts.DEFAULT);\n    wrt.set(4, 2);\n    wrt.set(7, 10);\n    wrt.set(valueCount - 10, 99);\n    wrt.set(99, 999);\n    wrt.set(valueCount - 1, 1 << 10);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    wrt.set(99, (1 << 23) - 1);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    wrt.set(1, Long.MAX_VALUE);\n    wrt.set(2, -3);\n    assertEquals(64, wrt.getBitsPerValue());\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    assertEquals(Long.MAX_VALUE, wrt.get(1));\n    assertEquals(-3L, wrt.get(2));\n    assertEquals(2, wrt.get(4));\n    assertEquals((1 << 23) - 1, wrt.get(99));\n    assertEquals(10, wrt.get(7));\n    assertEquals(99, wrt.get(valueCount - 10));\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    assertEquals(RamUsageEstimator.sizeOf(wrt), wrt.ramBytesUsed());\n  }\n\n","sourceOld":"  public void testGrowableWriter() {\n    final int valueCount = 113 + random().nextInt(1111);\n    GrowableWriter wrt = new GrowableWriter(1, valueCount, PackedInts.DEFAULT);\n    wrt.set(4, 2);\n    wrt.set(7, 10);\n    wrt.set(valueCount - 10, 99);\n    wrt.set(99, 999);\n    wrt.set(valueCount - 1, 1 << 10);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    wrt.set(99, (1 << 23) - 1);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    wrt.set(1, Long.MAX_VALUE);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    assertEquals(Long.MAX_VALUE, wrt.get(1));\n    assertEquals(2, wrt.get(4));\n    assertEquals((1 << 23) - 1, wrt.get(99));\n    assertEquals(10, wrt.get(7));\n    assertEquals(99, wrt.get(valueCount - 10));\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    assertEquals(RamUsageEstimator.sizeOf(wrt), wrt.ramBytesUsed());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testGrowableWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testGrowableWriter().mjava","sourceNew":"  public void testGrowableWriter() {\n    final int valueCount = 113 + random().nextInt(1111);\n    GrowableWriter wrt = new GrowableWriter(1, valueCount, PackedInts.DEFAULT);\n    wrt.set(4, 2);\n    wrt.set(7, 10);\n    wrt.set(valueCount - 10, 99);\n    wrt.set(99, 999);\n    wrt.set(valueCount - 1, 1 << 10);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    wrt.set(99, (1 << 23) - 1);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    wrt.set(1, Long.MAX_VALUE);\n    wrt.set(2, -3);\n    assertEquals(64, wrt.getBitsPerValue());\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    assertEquals(Long.MAX_VALUE, wrt.get(1));\n    assertEquals(-3L, wrt.get(2));\n    assertEquals(2, wrt.get(4));\n    assertEquals((1 << 23) - 1, wrt.get(99));\n    assertEquals(10, wrt.get(7));\n    assertEquals(99, wrt.get(valueCount - 10));\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    assertEquals(RamUsageEstimator.sizeOf(wrt), wrt.ramBytesUsed());\n  }\n\n","sourceOld":"  public void testGrowableWriter() {\n    final int valueCount = 113 + random().nextInt(1111);\n    GrowableWriter wrt = new GrowableWriter(1, valueCount, PackedInts.DEFAULT);\n    wrt.set(4, 2);\n    wrt.set(7, 10);\n    wrt.set(valueCount - 10, 99);\n    wrt.set(99, 999);\n    wrt.set(valueCount - 1, 1 << 10);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    wrt.set(99, (1 << 23) - 1);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    wrt.set(1, Long.MAX_VALUE);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    assertEquals(Long.MAX_VALUE, wrt.get(1));\n    assertEquals(2, wrt.get(4));\n    assertEquals((1 << 23) - 1, wrt.get(99));\n    assertEquals(10, wrt.get(7));\n    assertEquals(99, wrt.get(valueCount - 10));\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    assertEquals(RamUsageEstimator.sizeOf(wrt), wrt.ramBytesUsed());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1eb6b3ce884c0b9e064e112da158013ec33cd91","date":1402692077,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testGrowableWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testGrowableWriter().mjava","sourceNew":"  public void testGrowableWriter() {\n    final int valueCount = 113 + random().nextInt(1111);\n    GrowableWriter wrt = new GrowableWriter(1, valueCount, PackedInts.DEFAULT);\n    wrt.set(4, 2);\n    wrt.set(7, 10);\n    wrt.set(valueCount - 10, 99);\n    wrt.set(99, 999);\n    wrt.set(valueCount - 1, 1 << 10);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    wrt.set(99, (1 << 23) - 1);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    wrt.set(1, Long.MAX_VALUE);\n    wrt.set(2, -3);\n    assertEquals(64, wrt.getBitsPerValue());\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    assertEquals(Long.MAX_VALUE, wrt.get(1));\n    assertEquals(-3L, wrt.get(2));\n    assertEquals(2, wrt.get(4));\n    assertEquals((1 << 23) - 1, wrt.get(99));\n    assertEquals(10, wrt.get(7));\n    assertEquals(99, wrt.get(valueCount - 10));\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    assertEquals(RamUsageTester.sizeOf(wrt), wrt.ramBytesUsed());\n  }\n\n","sourceOld":"  public void testGrowableWriter() {\n    final int valueCount = 113 + random().nextInt(1111);\n    GrowableWriter wrt = new GrowableWriter(1, valueCount, PackedInts.DEFAULT);\n    wrt.set(4, 2);\n    wrt.set(7, 10);\n    wrt.set(valueCount - 10, 99);\n    wrt.set(99, 999);\n    wrt.set(valueCount - 1, 1 << 10);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    wrt.set(99, (1 << 23) - 1);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    wrt.set(1, Long.MAX_VALUE);\n    wrt.set(2, -3);\n    assertEquals(64, wrt.getBitsPerValue());\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    assertEquals(Long.MAX_VALUE, wrt.get(1));\n    assertEquals(-3L, wrt.get(2));\n    assertEquals(2, wrt.get(4));\n    assertEquals((1 << 23) - 1, wrt.get(99));\n    assertEquals(10, wrt.get(7));\n    assertEquals(99, wrt.get(valueCount - 10));\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    assertEquals(RamUsageEstimator.sizeOf(wrt), wrt.ramBytesUsed());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testGrowableWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testGrowableWriter().mjava","sourceNew":"  public void testGrowableWriter() {\n    final int valueCount = 113 + random().nextInt(1111);\n    GrowableWriter wrt = new GrowableWriter(1, valueCount, PackedInts.DEFAULT);\n    wrt.set(4, 2);\n    wrt.set(7, 10);\n    wrt.set(valueCount - 10, 99);\n    wrt.set(99, 999);\n    wrt.set(valueCount - 1, 1 << 10);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    wrt.set(99, (1 << 23) - 1);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    wrt.set(1, Long.MAX_VALUE);\n    wrt.set(2, -3);\n    assertEquals(64, wrt.getBitsPerValue());\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    assertEquals(Long.MAX_VALUE, wrt.get(1));\n    assertEquals(-3L, wrt.get(2));\n    assertEquals(2, wrt.get(4));\n    assertEquals((1 << 23) - 1, wrt.get(99));\n    assertEquals(10, wrt.get(7));\n    assertEquals(99, wrt.get(valueCount - 10));\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    assertEquals(RamUsageTester.sizeOf(wrt), wrt.ramBytesUsed());\n  }\n\n","sourceOld":"  public void testGrowableWriter() {\n    final int valueCount = 113 + random().nextInt(1111);\n    GrowableWriter wrt = new GrowableWriter(1, valueCount, PackedInts.DEFAULT);\n    wrt.set(4, 2);\n    wrt.set(7, 10);\n    wrt.set(valueCount - 10, 99);\n    wrt.set(99, 999);\n    wrt.set(valueCount - 1, 1 << 10);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    wrt.set(99, (1 << 23) - 1);\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    wrt.set(1, Long.MAX_VALUE);\n    wrt.set(2, -3);\n    assertEquals(64, wrt.getBitsPerValue());\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    assertEquals(Long.MAX_VALUE, wrt.get(1));\n    assertEquals(-3L, wrt.get(2));\n    assertEquals(2, wrt.get(4));\n    assertEquals((1 << 23) - 1, wrt.get(99));\n    assertEquals(10, wrt.get(7));\n    assertEquals(99, wrt.get(valueCount - 10));\n    assertEquals(1 << 10, wrt.get(valueCount - 1));\n    assertEquals(RamUsageEstimator.sizeOf(wrt), wrt.ramBytesUsed());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["67210e010ad52ccb1eee189c5395a5123b977c3c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"67210e010ad52ccb1eee189c5395a5123b977c3c":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["67210e010ad52ccb1eee189c5395a5123b977c3c"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["59a0020b413d44dd79d85d7a66ed5004265fb453","e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"e1eb6b3ce884c0b9e064e112da158013ec33cd91":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"747628bb19a950ac2141b16756bdce9a47e94cc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1eb6b3ce884c0b9e064e112da158013ec33cd91"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"67210e010ad52ccb1eee189c5395a5123b977c3c":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c6f080a2ab37c464dd98db173f6cbf10dc74f211","e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"e1eb6b3ce884c0b9e064e112da158013ec33cd91":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"747628bb19a950ac2141b16756bdce9a47e94cc2":["67210e010ad52ccb1eee189c5395a5123b977c3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}