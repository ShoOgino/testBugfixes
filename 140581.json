{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionNames(String).mjava","commits":[{"id":"3eaeb36333664e8cb92108ef03f68a7b90beb759","date":1480015298,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionNames(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionNames(ClusterState,String).mjava","sourceNew":"  Set<String> getCollectionNames(String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionNames = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (stateProvider.getState(collectionName) == null) {\n        String alias = stateProvider.getAlias(collection);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionNames.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionNames.add(collectionName);\n    }\n    return collectionNames;\n  }\n\n","sourceOld":"  private Set<String> getCollectionNames(ClusterState clusterState,\n                                         String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionNames = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.hasCollection(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionNames.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionNames.add(collectionName);\n    }\n    return collectionNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionNames(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionNames(ClusterState,String).mjava","sourceNew":"  Set<String> getCollectionNames(String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionNames = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (stateProvider.getState(collectionName) == null) {\n        String alias = stateProvider.getAlias(collection);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionNames.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionNames.add(collectionName);\n    }\n    return collectionNames;\n  }\n\n","sourceOld":"  private Set<String> getCollectionNames(ClusterState clusterState,\n                                         String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionNames = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.hasCollection(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionNames.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionNames.add(collectionName);\n    }\n    return collectionNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a64b273d51a6540272668680ece9f8b686ff0004","date":1492404078,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionNames(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionNames(String).mjava","sourceNew":"  private Set<String> getCollectionNames(String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionNames = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (stateProvider.getState(collectionName) == null) {\n        String alias = stateProvider.getAlias(collection);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionNames.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionNames.add(collectionName);\n    }\n    return collectionNames;\n  }\n\n","sourceOld":"  Set<String> getCollectionNames(String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionNames = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (stateProvider.getState(collectionName) == null) {\n        String alias = stateProvider.getAlias(collection);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionNames.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionNames.add(collectionName);\n    }\n    return collectionNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionNames(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionNames(String).mjava","sourceNew":"  private Set<String> getCollectionNames(String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionNames = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (stateProvider.getState(collectionName) == null) {\n        String alias = stateProvider.getAlias(collection);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionNames.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionNames.add(collectionName);\n    }\n    return collectionNames;\n  }\n\n","sourceOld":"  Set<String> getCollectionNames(String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionNames = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (stateProvider.getState(collectionName) == null) {\n        String alias = stateProvider.getAlias(collection);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionNames.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionNames.add(collectionName);\n    }\n    return collectionNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258b47d5de034cf50e5f1bb82437bd735138fe8","date":1499373011,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionNames(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionNames(String).mjava","sourceNew":"  private Set<String> getCollectionNames(String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionNames = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (stateProvider.getState(collectionName) == null) {\n        String alias = stateProvider.getAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionNames.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionNames.add(collectionName);\n    }\n    return collectionNames;\n  }\n\n","sourceOld":"  private Set<String> getCollectionNames(String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionNames = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (stateProvider.getState(collectionName) == null) {\n        String alias = stateProvider.getAlias(collection);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionNames.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionNames.add(collectionName);\n    }\n    return collectionNames;\n  }\n\n","bugFix":["3eaeb36333664e8cb92108ef03f68a7b90beb759"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73d8d559120669b47658108d818b637df5456ea","date":1499401413,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionNames(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionNames(String).mjava","sourceNew":"  private Set<String> getCollectionNames(String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionNames = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (stateProvider.getState(collectionName) == null) {\n        String alias = stateProvider.getAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionNames.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionNames.add(collectionName);\n    }\n    return collectionNames;\n  }\n\n","sourceOld":"  private Set<String> getCollectionNames(String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionNames = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (stateProvider.getState(collectionName) == null) {\n        String alias = stateProvider.getAlias(collection);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionNames.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionNames.add(collectionName);\n    }\n    return collectionNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b824daa61db3f30b91a22213d6c04e1fa2e2b06","date":1508385744,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionNames(String).mjava","sourceNew":null,"sourceOld":"  private Set<String> getCollectionNames(String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionNames = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (stateProvider.getState(collectionName) == null) {\n        String alias = stateProvider.getAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionNames.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionNames.add(collectionName);\n    }\n    return collectionNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["3eaeb36333664e8cb92108ef03f68a7b90beb759"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["a258b47d5de034cf50e5f1bb82437bd735138fe8"],"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3eaeb36333664e8cb92108ef03f68a7b90beb759"],"a64b273d51a6540272668680ece9f8b686ff0004":["3eaeb36333664e8cb92108ef03f68a7b90beb759"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e73d8d559120669b47658108d818b637df5456ea":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a258b47d5de034cf50e5f1bb82437bd735138fe8"],"a258b47d5de034cf50e5f1bb82437bd735138fe8":["a64b273d51a6540272668680ece9f8b686ff0004"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e73d8d559120669b47658108d818b637df5456ea"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"a64b273d51a6540272668680ece9f8b686ff0004":["a258b47d5de034cf50e5f1bb82437bd735138fe8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["727bb765ff2542275f6d31f67be18d7104bae148","3eaeb36333664e8cb92108ef03f68a7b90beb759"],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","727bb765ff2542275f6d31f67be18d7104bae148","a64b273d51a6540272668680ece9f8b686ff0004"],"e73d8d559120669b47658108d818b637df5456ea":[],"a258b47d5de034cf50e5f1bb82437bd735138fe8":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06","e73d8d559120669b47658108d818b637df5456ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","e73d8d559120669b47658108d818b637df5456ea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}