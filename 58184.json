{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  public AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>> groups, Sort groupSort, Sort withinGroupSort,\n                                             int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.size() == 0) {\n      throw new IllegalArgumentException(\"no groups to collect (groups.size() is 0)\");\n    }\n\n    this.groupSort = groupSort;\n    this.withinGroupSort = withinGroupSort;\n    this.groups = groups;\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    groupMap = new HashMap<GROUP_VALUE_TYPE, SearchGroupDocs<GROUP_VALUE_TYPE>>(groups.size());\n\n    for (SearchGroup<GROUP_VALUE_TYPE> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores, true);\n      }\n      groupMap.put(group.groupValue,\n          new SearchGroupDocs<GROUP_VALUE_TYPE>(group.groupValue,\n              collector));\n    }\n  }\n\n","sourceOld":"  public AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>> groups, Sort groupSort, Sort withinGroupSort,\n                                             int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.size() == 0) {\n      throw new IllegalArgumentException(\"no groups to collect (groups.size() is 0)\");\n    }\n\n    this.groupSort = groupSort;\n    this.withinGroupSort = withinGroupSort;\n    this.groups = groups;\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    groupMap = new HashMap<GROUP_VALUE_TYPE, SearchGroupDocs<GROUP_VALUE_TYPE>>(groups.size());\n\n    for (SearchGroup<GROUP_VALUE_TYPE> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores, true);\n      }\n      groupMap.put(group.groupValue,\n          new SearchGroupDocs<GROUP_VALUE_TYPE>(group.groupValue,\n              collector));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97d4692d0c601ff773f0a2231967312428a904e4","date":1366026608,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  public AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>> groups, Sort groupSort, Sort withinGroupSort,\n                                             int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.size() == 0) {\n      throw new IllegalArgumentException(\"no groups to collect (groups.size() is 0)\");\n    }\n\n    this.groupSort = groupSort;\n    this.withinGroupSort = withinGroupSort;\n    this.groups = groups;\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    groupMap = new HashMap<>(groups.size());\n\n    for (SearchGroup<GROUP_VALUE_TYPE> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores, true);\n      }\n      groupMap.put(group.groupValue,\n          new SearchGroupDocs<>(group.groupValue,\n              collector));\n    }\n  }\n\n","sourceOld":"  public AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>> groups, Sort groupSort, Sort withinGroupSort,\n                                             int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.size() == 0) {\n      throw new IllegalArgumentException(\"no groups to collect (groups.size() is 0)\");\n    }\n\n    this.groupSort = groupSort;\n    this.withinGroupSort = withinGroupSort;\n    this.groups = groups;\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    groupMap = new HashMap<GROUP_VALUE_TYPE, SearchGroupDocs<GROUP_VALUE_TYPE>>(groups.size());\n\n    for (SearchGroup<GROUP_VALUE_TYPE> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores, true);\n      }\n      groupMap.put(group.groupValue,\n          new SearchGroupDocs<GROUP_VALUE_TYPE>(group.groupValue,\n              collector));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  public AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>> groups, Sort groupSort, Sort withinGroupSort,\n                                             int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.size() == 0) {\n      throw new IllegalArgumentException(\"no groups to collect (groups.size() is 0)\");\n    }\n\n    this.groupSort = groupSort;\n    this.withinGroupSort = withinGroupSort;\n    this.groups = groups;\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    groupMap = new HashMap<>(groups.size());\n\n    for (SearchGroup<GROUP_VALUE_TYPE> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores);\n      }\n      groupMap.put(group.groupValue,\n          new SearchGroupDocs<>(group.groupValue,\n              collector));\n    }\n  }\n\n","sourceOld":"  public AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>> groups, Sort groupSort, Sort withinGroupSort,\n                                             int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.size() == 0) {\n      throw new IllegalArgumentException(\"no groups to collect (groups.size() is 0)\");\n    }\n\n    this.groupSort = groupSort;\n    this.withinGroupSort = withinGroupSort;\n    this.groups = groups;\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    groupMap = new HashMap<>(groups.size());\n\n    for (SearchGroup<GROUP_VALUE_TYPE> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores, true);\n      }\n      groupMap.put(group.groupValue,\n          new SearchGroupDocs<>(group.groupValue,\n              collector));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2","date":1448513807,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  public AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>> groups, Sort groupSort, Sort withinGroupSort,\n                                             int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.isEmpty()) {\n      throw new IllegalArgumentException(\"no groups to collect (groups is empty)\");\n    }\n\n    this.groupSort = Objects.requireNonNull(groupSort);\n    this.withinGroupSort = Objects.requireNonNull(withinGroupSort);\n    this.groups = Objects.requireNonNull(groups);\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    this.groupMap = new HashMap<>(groups.size());\n\n    for (SearchGroup<GROUP_VALUE_TYPE> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort.equals(Sort.RELEVANCE)) { // optimize to use TopScoreDocCollector\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores);\n      }\n      groupMap.put(group.groupValue, new SearchGroupDocs<>(group.groupValue, collector));\n    }\n  }\n\n","sourceOld":"  public AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>> groups, Sort groupSort, Sort withinGroupSort,\n                                             int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.size() == 0) {\n      throw new IllegalArgumentException(\"no groups to collect (groups.size() is 0)\");\n    }\n\n    this.groupSort = groupSort;\n    this.withinGroupSort = withinGroupSort;\n    this.groups = groups;\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    groupMap = new HashMap<>(groups.size());\n\n    for (SearchGroup<GROUP_VALUE_TYPE> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores);\n      }\n      groupMap.put(group.groupValue,\n          new SearchGroupDocs<>(group.groupValue,\n              collector));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e7cf486535cf187cb3745154ca5dd3de3bd2999","date":1449256632,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  public AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>> groups, Sort groupSort, Sort withinGroupSort,\n                                             int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.isEmpty()) {\n      throw new IllegalArgumentException(\"no groups to collect (groups is empty)\");\n    }\n\n    this.groups = Objects.requireNonNull(groups);\n    this.groupSort = Objects.requireNonNull(groupSort);\n    this.withinGroupSort = Objects.requireNonNull(withinGroupSort);\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    this.needsScores = getScores || getMaxScores || withinGroupSort.needsScores();\n\n    this.groupMap = new HashMap<>(groups.size());\n    for (SearchGroup<GROUP_VALUE_TYPE> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort.equals(Sort.RELEVANCE)) { // optimize to use TopScoreDocCollector\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores);\n      }\n      groupMap.put(group.groupValue, new SearchGroupDocs<>(group.groupValue, collector));\n    }\n  }\n\n","sourceOld":"  public AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>> groups, Sort groupSort, Sort withinGroupSort,\n                                             int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.isEmpty()) {\n      throw new IllegalArgumentException(\"no groups to collect (groups is empty)\");\n    }\n\n    this.groupSort = Objects.requireNonNull(groupSort);\n    this.withinGroupSort = Objects.requireNonNull(withinGroupSort);\n    this.groups = Objects.requireNonNull(groups);\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    this.groupMap = new HashMap<>(groups.size());\n\n    for (SearchGroup<GROUP_VALUE_TYPE> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort.equals(Sort.RELEVANCE)) { // optimize to use TopScoreDocCollector\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores);\n      }\n      groupMap.put(group.groupValue, new SearchGroupDocs<>(group.groupValue, collector));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SecondPassGroupingCollector#SecondPassGroupingCollector(Collection[SearchGroup[T]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  public SecondPassGroupingCollector(Collection<SearchGroup<T>> groups, Sort groupSort, Sort withinGroupSort,\n                                     int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.isEmpty()) {\n      throw new IllegalArgumentException(\"no groups to collect (groups is empty)\");\n    }\n\n    this.groups = Objects.requireNonNull(groups);\n    this.groupSort = Objects.requireNonNull(groupSort);\n    this.withinGroupSort = Objects.requireNonNull(withinGroupSort);\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    this.needsScores = getScores || getMaxScores || withinGroupSort.needsScores();\n\n    this.groupMap = new HashMap<>(groups.size());\n    for (SearchGroup<T> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort.equals(Sort.RELEVANCE)) { // optimize to use TopScoreDocCollector\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores);\n      }\n      groupMap.put(group.groupValue, new SearchGroupDocs<>(group.groupValue, collector));\n    }\n  }\n\n","sourceOld":"  public AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>> groups, Sort groupSort, Sort withinGroupSort,\n                                             int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.isEmpty()) {\n      throw new IllegalArgumentException(\"no groups to collect (groups is empty)\");\n    }\n\n    this.groups = Objects.requireNonNull(groups);\n    this.groupSort = Objects.requireNonNull(groupSort);\n    this.withinGroupSort = Objects.requireNonNull(withinGroupSort);\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    this.needsScores = getScores || getMaxScores || withinGroupSort.needsScores();\n\n    this.groupMap = new HashMap<>(groups.size());\n    for (SearchGroup<GROUP_VALUE_TYPE> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort.equals(Sort.RELEVANCE)) { // optimize to use TopScoreDocCollector\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores);\n      }\n      groupMap.put(group.groupValue, new SearchGroupDocs<>(group.groupValue, collector));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SecondPassGroupingCollector#SecondPassGroupingCollector(Collection[SearchGroup[T]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  public SecondPassGroupingCollector(Collection<SearchGroup<T>> groups, Sort groupSort, Sort withinGroupSort,\n                                     int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.isEmpty()) {\n      throw new IllegalArgumentException(\"no groups to collect (groups is empty)\");\n    }\n\n    this.groups = Objects.requireNonNull(groups);\n    this.groupSort = Objects.requireNonNull(groupSort);\n    this.withinGroupSort = Objects.requireNonNull(withinGroupSort);\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    this.needsScores = getScores || getMaxScores || withinGroupSort.needsScores();\n\n    this.groupMap = new HashMap<>(groups.size());\n    for (SearchGroup<T> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort.equals(Sort.RELEVANCE)) { // optimize to use TopScoreDocCollector\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores);\n      }\n      groupMap.put(group.groupValue, new SearchGroupDocs<>(group.groupValue, collector));\n    }\n  }\n\n","sourceOld":"  public AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>> groups, Sort groupSort, Sort withinGroupSort,\n                                             int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.isEmpty()) {\n      throw new IllegalArgumentException(\"no groups to collect (groups is empty)\");\n    }\n\n    this.groups = Objects.requireNonNull(groups);\n    this.groupSort = Objects.requireNonNull(groupSort);\n    this.withinGroupSort = Objects.requireNonNull(withinGroupSort);\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    this.needsScores = getScores || getMaxScores || withinGroupSort.needsScores();\n\n    this.groupMap = new HashMap<>(groups.size());\n    for (SearchGroup<GROUP_VALUE_TYPE> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort.equals(Sort.RELEVANCE)) { // optimize to use TopScoreDocCollector\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores);\n      }\n      groupMap.put(group.groupValue, new SearchGroupDocs<>(group.groupValue, collector));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"20e94e61fe5291647346b70437617e6b6c370408":["7e7cf486535cf187cb3745154ca5dd3de3bd2999"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["97d4692d0c601ff773f0a2231967312428a904e4"],"97d4692d0c601ff773f0a2231967312428a904e4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7e7cf486535cf187cb3745154ca5dd3de3bd2999":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["7e7cf486535cf187cb3745154ca5dd3de3bd2999","20e94e61fe5291647346b70437617e6b6c370408"],"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["97d4692d0c601ff773f0a2231967312428a904e4"],"20e94e61fe5291647346b70437617e6b6c370408":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"97d4692d0c601ff773f0a2231967312428a904e4":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"7e7cf486535cf187cb3745154ca5dd3de3bd2999":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2":["7e7cf486535cf187cb3745154ca5dd3de3bd2999"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}