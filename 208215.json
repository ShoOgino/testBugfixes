{"path":"lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity#testSaneNormValues().mjava","commits":[{"id":"b97002ca487af397e493405ced0c73acdabd86ca","date":1453103304,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity#testSaneNormValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testSaneNormValues() {\n    ClassicSimilarity sim = new ClassicSimilarity();\n    for (int i = 0; i < 256; i++) {\n      float boost = sim.decodeNormValue((byte) i);\n      assertFalse(\"negative boost: \" + boost + \", byte=\" + i, boost < 0.0f);\n      assertFalse(\"inf bost: \" + boost + \", byte=\" + i, Float.isInfinite(boost));\n      assertFalse(\"nan boost for byte=\" + i, Float.isNaN(boost));\n      if (i > 0) {\n        assertTrue(\"boost is not increasing: \" + boost + \",byte=\" + i, boost > sim.decodeNormValue((byte)(i-1)));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity#testSaneNormValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity#testSaneNormValues().mjava","sourceNew":"  public void testSaneNormValues() throws IOException {\n    ClassicSimilarity sim = new ClassicSimilarity();\n    for (int i = 0; i < 256; i++) {\n      float boost = TFIDFSimilarity.OLD_NORM_TABLE[i];\n      assertFalse(\"negative boost: \" + boost + \", byte=\" + i, boost < 0.0f);\n      assertFalse(\"inf bost: \" + boost + \", byte=\" + i, Float.isInfinite(boost));\n      assertFalse(\"nan boost for byte=\" + i, Float.isNaN(boost));\n      if (i > 0) {\n        assertTrue(\"boost is not increasing: \" + boost + \",byte=\" + i, boost > TFIDFSimilarity.OLD_NORM_TABLE[i-1]);\n      }\n    }\n\n    TFIDFSimilarity.IDFStats stats = (IDFStats) sim.computeWeight(1f, new IndexSearcher(new MultiReader()).collectionStatistics(\"foo\"));\n    for (int i = 0; i < 256; i++) {\n      float boost = stats.normTable[i];\n      assertFalse(\"negative boost: \" + boost + \", byte=\" + i, boost < 0.0f);\n      assertFalse(\"inf bost: \" + boost + \", byte=\" + i, Float.isInfinite(boost));\n      assertFalse(\"nan boost for byte=\" + i, Float.isNaN(boost));\n      if (i > 0) {\n        assertTrue(\"boost is not decreasing: \" + boost + \",byte=\" + i, boost < stats.normTable[i-1]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSaneNormValues() {\n    ClassicSimilarity sim = new ClassicSimilarity();\n    for (int i = 0; i < 256; i++) {\n      float boost = sim.decodeNormValue((byte) i);\n      assertFalse(\"negative boost: \" + boost + \", byte=\" + i, boost < 0.0f);\n      assertFalse(\"inf bost: \" + boost + \", byte=\" + i, Float.isInfinite(boost));\n      assertFalse(\"nan boost for byte=\" + i, Float.isNaN(boost));\n      if (i > 0) {\n        assertTrue(\"boost is not increasing: \" + boost + \",byte=\" + i, boost > sim.decodeNormValue((byte)(i-1)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity#testSaneNormValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity#testSaneNormValues().mjava","sourceNew":"  public void testSaneNormValues() throws IOException {\n    ClassicSimilarity sim = new ClassicSimilarity();\n    for (int i = 0; i < 256; i++) {\n      float boost = TFIDFSimilarity.OLD_NORM_TABLE[i];\n      assertFalse(\"negative boost: \" + boost + \", byte=\" + i, boost < 0.0f);\n      assertFalse(\"inf bost: \" + boost + \", byte=\" + i, Float.isInfinite(boost));\n      assertFalse(\"nan boost for byte=\" + i, Float.isNaN(boost));\n      if (i > 0) {\n        assertTrue(\"boost is not increasing: \" + boost + \",byte=\" + i, boost > TFIDFSimilarity.OLD_NORM_TABLE[i-1]);\n      }\n    }\n\n    TFIDFSimilarity.IDFStats stats = (IDFStats) sim.computeWeight(1f, new IndexSearcher(new MultiReader()).collectionStatistics(\"foo\"));\n    for (int i = 0; i < 256; i++) {\n      float boost = stats.normTable[i];\n      assertFalse(\"negative boost: \" + boost + \", byte=\" + i, boost < 0.0f);\n      assertFalse(\"inf bost: \" + boost + \", byte=\" + i, Float.isInfinite(boost));\n      assertFalse(\"nan boost for byte=\" + i, Float.isNaN(boost));\n      if (i > 0) {\n        assertTrue(\"boost is not decreasing: \" + boost + \",byte=\" + i, boost < stats.normTable[i-1]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSaneNormValues() {\n    ClassicSimilarity sim = new ClassicSimilarity();\n    for (int i = 0; i < 256; i++) {\n      float boost = sim.decodeNormValue((byte) i);\n      assertFalse(\"negative boost: \" + boost + \", byte=\" + i, boost < 0.0f);\n      assertFalse(\"inf bost: \" + boost + \", byte=\" + i, Float.isInfinite(boost));\n      assertFalse(\"nan boost for byte=\" + i, Float.isNaN(boost));\n      if (i > 0) {\n        assertTrue(\"boost is not increasing: \" + boost + \",byte=\" + i, boost > sim.decodeNormValue((byte)(i-1)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4","date":1499084229,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity#testSaneNormValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity#testSaneNormValues().mjava","sourceNew":"  public void testSaneNormValues() throws IOException {\n    ClassicSimilarity sim = new ClassicSimilarity();\n    TFIDFSimilarity.IDFStats stats = (IDFStats) sim.computeWeight(1f, new IndexSearcher(new MultiReader()).collectionStatistics(\"foo\"));\n    for (int i = 0; i < 256; i++) {\n      float boost = stats.normTable[i];\n      assertFalse(\"negative boost: \" + boost + \", byte=\" + i, boost < 0.0f);\n      assertFalse(\"inf bost: \" + boost + \", byte=\" + i, Float.isInfinite(boost));\n      assertFalse(\"nan boost for byte=\" + i, Float.isNaN(boost));\n      if (i > 0) {\n        assertTrue(\"boost is not decreasing: \" + boost + \",byte=\" + i, boost < stats.normTable[i-1]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSaneNormValues() throws IOException {\n    ClassicSimilarity sim = new ClassicSimilarity();\n    for (int i = 0; i < 256; i++) {\n      float boost = TFIDFSimilarity.OLD_NORM_TABLE[i];\n      assertFalse(\"negative boost: \" + boost + \", byte=\" + i, boost < 0.0f);\n      assertFalse(\"inf bost: \" + boost + \", byte=\" + i, Float.isInfinite(boost));\n      assertFalse(\"nan boost for byte=\" + i, Float.isNaN(boost));\n      if (i > 0) {\n        assertTrue(\"boost is not increasing: \" + boost + \",byte=\" + i, boost > TFIDFSimilarity.OLD_NORM_TABLE[i-1]);\n      }\n    }\n\n    TFIDFSimilarity.IDFStats stats = (IDFStats) sim.computeWeight(1f, new IndexSearcher(new MultiReader()).collectionStatistics(\"foo\"));\n    for (int i = 0; i < 256; i++) {\n      float boost = stats.normTable[i];\n      assertFalse(\"negative boost: \" + boost + \", byte=\" + i, boost < 0.0f);\n      assertFalse(\"inf bost: \" + boost + \", byte=\" + i, Float.isInfinite(boost));\n      assertFalse(\"nan boost for byte=\" + i, Float.isNaN(boost));\n      if (i > 0) {\n        assertTrue(\"boost is not decreasing: \" + boost + \",byte=\" + i, boost < stats.normTable[i-1]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc018b79379c67835b40b1259cd3dc931df60944","date":1499109112,"type":3,"author":"Anshum Gupta","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity#testSaneNormValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity#testSaneNormValues().mjava","sourceNew":"  public void testSaneNormValues() throws IOException {\n    ClassicSimilarity sim = new ClassicSimilarity();\n    TFIDFSimilarity.IDFStats stats = (IDFStats) sim.computeWeight(1f, new IndexSearcher(new MultiReader()).collectionStatistics(\"foo\"));\n    for (int i = 0; i < 256; i++) {\n      float boost = stats.normTable[i];\n      assertFalse(\"negative boost: \" + boost + \", byte=\" + i, boost < 0.0f);\n      assertFalse(\"inf bost: \" + boost + \", byte=\" + i, Float.isInfinite(boost));\n      assertFalse(\"nan boost for byte=\" + i, Float.isNaN(boost));\n      if (i > 0) {\n        assertTrue(\"boost is not decreasing: \" + boost + \",byte=\" + i, boost < stats.normTable[i-1]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSaneNormValues() throws IOException {\n    ClassicSimilarity sim = new ClassicSimilarity();\n    for (int i = 0; i < 256; i++) {\n      float boost = TFIDFSimilarity.OLD_NORM_TABLE[i];\n      assertFalse(\"negative boost: \" + boost + \", byte=\" + i, boost < 0.0f);\n      assertFalse(\"inf bost: \" + boost + \", byte=\" + i, Float.isInfinite(boost));\n      assertFalse(\"nan boost for byte=\" + i, Float.isNaN(boost));\n      if (i > 0) {\n        assertTrue(\"boost is not increasing: \" + boost + \",byte=\" + i, boost > TFIDFSimilarity.OLD_NORM_TABLE[i-1]);\n      }\n    }\n\n    TFIDFSimilarity.IDFStats stats = (IDFStats) sim.computeWeight(1f, new IndexSearcher(new MultiReader()).collectionStatistics(\"foo\"));\n    for (int i = 0; i < 256; i++) {\n      float boost = stats.normTable[i];\n      assertFalse(\"negative boost: \" + boost + \", byte=\" + i, boost < 0.0f);\n      assertFalse(\"inf bost: \" + boost + \", byte=\" + i, Float.isInfinite(boost));\n      assertFalse(\"nan boost for byte=\" + i, Float.isNaN(boost));\n      if (i > 0) {\n        assertTrue(\"boost is not decreasing: \" + boost + \",byte=\" + i, boost < stats.normTable[i-1]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity#testSaneNormValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity#testSaneNormValues().mjava","sourceNew":"  public void testSaneNormValues() throws IOException {\n    ClassicSimilarity sim = new ClassicSimilarity();\n    TFIDFSimilarity.IDFStats stats = (IDFStats) sim.computeWeight(1f, new IndexSearcher(new MultiReader()).collectionStatistics(\"foo\"));\n    for (int i = 0; i < 256; i++) {\n      float boost = stats.normTable[i];\n      assertFalse(\"negative boost: \" + boost + \", byte=\" + i, boost < 0.0f);\n      assertFalse(\"inf bost: \" + boost + \", byte=\" + i, Float.isInfinite(boost));\n      assertFalse(\"nan boost for byte=\" + i, Float.isNaN(boost));\n      if (i > 0) {\n        assertTrue(\"boost is not decreasing: \" + boost + \",byte=\" + i, boost < stats.normTable[i-1]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSaneNormValues() throws IOException {\n    ClassicSimilarity sim = new ClassicSimilarity();\n    for (int i = 0; i < 256; i++) {\n      float boost = TFIDFSimilarity.OLD_NORM_TABLE[i];\n      assertFalse(\"negative boost: \" + boost + \", byte=\" + i, boost < 0.0f);\n      assertFalse(\"inf bost: \" + boost + \", byte=\" + i, Float.isInfinite(boost));\n      assertFalse(\"nan boost for byte=\" + i, Float.isNaN(boost));\n      if (i > 0) {\n        assertTrue(\"boost is not increasing: \" + boost + \",byte=\" + i, boost > TFIDFSimilarity.OLD_NORM_TABLE[i-1]);\n      }\n    }\n\n    TFIDFSimilarity.IDFStats stats = (IDFStats) sim.computeWeight(1f, new IndexSearcher(new MultiReader()).collectionStatistics(\"foo\"));\n    for (int i = 0; i < 256; i++) {\n      float boost = stats.normTable[i];\n      assertFalse(\"negative boost: \" + boost + \", byte=\" + i, boost < 0.0f);\n      assertFalse(\"inf bost: \" + boost + \", byte=\" + i, Float.isInfinite(boost));\n      assertFalse(\"nan boost for byte=\" + i, Float.isNaN(boost));\n      if (i > 0) {\n        assertTrue(\"boost is not decreasing: \" + boost + \",byte=\" + i, boost < stats.normTable[i-1]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3119ed4143b91eaf5ac74a4dc4625f5036d472c","date":1509409932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity#testSaneNormValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity#testSaneNormValues().mjava","sourceNew":"  public void testSaneNormValues() throws IOException {\n    ClassicSimilarity sim = new ClassicSimilarity();\n    TFIDFSimilarity.IDFStats stats = (IDFStats) sim.computeWeight(1f, indexSearcher.collectionStatistics(\"test\"));\n    for (int i = 0; i < 256; i++) {\n      float boost = stats.normTable[i];\n      assertFalse(\"negative boost: \" + boost + \", byte=\" + i, boost < 0.0f);\n      assertFalse(\"inf bost: \" + boost + \", byte=\" + i, Float.isInfinite(boost));\n      assertFalse(\"nan boost for byte=\" + i, Float.isNaN(boost));\n      if (i > 0) {\n        assertTrue(\"boost is not decreasing: \" + boost + \",byte=\" + i, boost < stats.normTable[i-1]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSaneNormValues() throws IOException {\n    ClassicSimilarity sim = new ClassicSimilarity();\n    TFIDFSimilarity.IDFStats stats = (IDFStats) sim.computeWeight(1f, new IndexSearcher(new MultiReader()).collectionStatistics(\"foo\"));\n    for (int i = 0; i < 256; i++) {\n      float boost = stats.normTable[i];\n      assertFalse(\"negative boost: \" + boost + \", byte=\" + i, boost < 0.0f);\n      assertFalse(\"inf bost: \" + boost + \", byte=\" + i, Float.isInfinite(boost));\n      assertFalse(\"nan boost for byte=\" + i, Float.isNaN(boost));\n      if (i > 0) {\n        assertTrue(\"boost is not decreasing: \" + boost + \",byte=\" + i, boost < stats.normTable[i-1]);\n      }\n    }\n  }\n\n","bugFix":["615370d2b876c3435773b5174df2e2242ad7981a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity#testSaneNormValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity#testSaneNormValues().mjava","sourceNew":"  public void testSaneNormValues() throws IOException {\n    ClassicSimilarity sim = new ClassicSimilarity();\n    TFIDFSimilarity.TFIDFScorer stats = (TFIDFSimilarity.TFIDFScorer) sim.scorer(1f, indexSearcher.collectionStatistics(\"test\"));\n    for (int i = 0; i < 256; i++) {\n      float boost = stats.normTable[i];\n      assertFalse(\"negative boost: \" + boost + \", byte=\" + i, boost < 0.0f);\n      assertFalse(\"inf bost: \" + boost + \", byte=\" + i, Float.isInfinite(boost));\n      assertFalse(\"nan boost for byte=\" + i, Float.isNaN(boost));\n      if (i > 0) {\n        assertTrue(\"boost is not decreasing: \" + boost + \",byte=\" + i, boost < stats.normTable[i-1]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSaneNormValues() throws IOException {\n    ClassicSimilarity sim = new ClassicSimilarity();\n    TFIDFSimilarity.IDFStats stats = (IDFStats) sim.computeWeight(1f, indexSearcher.collectionStatistics(\"test\"));\n    for (int i = 0; i < 256; i++) {\n      float boost = stats.normTable[i];\n      assertFalse(\"negative boost: \" + boost + \", byte=\" + i, boost < 0.0f);\n      assertFalse(\"inf bost: \" + boost + \", byte=\" + i, Float.isInfinite(boost));\n      assertFalse(\"nan boost for byte=\" + i, Float.isNaN(boost));\n      if (i > 0) {\n        assertTrue(\"boost is not decreasing: \" + boost + \",byte=\" + i, boost < stats.normTable[i-1]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity#testSaneNormValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity#testSaneNormValues().mjava","sourceNew":"  public void testSaneNormValues() throws IOException {\n    ClassicSimilarity sim = new ClassicSimilarity();\n    TFIDFSimilarity.TFIDFScorer stats = (TFIDFSimilarity.TFIDFScorer) sim.scorer(1f, indexSearcher.collectionStatistics(\"test\"));\n    for (int i = 0; i < 256; i++) {\n      float boost = stats.normTable[i];\n      assertFalse(\"negative boost: \" + boost + \", byte=\" + i, boost < 0.0f);\n      assertFalse(\"inf bost: \" + boost + \", byte=\" + i, Float.isInfinite(boost));\n      assertFalse(\"nan boost for byte=\" + i, Float.isNaN(boost));\n      if (i > 0) {\n        assertTrue(\"boost is not decreasing: \" + boost + \",byte=\" + i, boost < stats.normTable[i-1]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSaneNormValues() throws IOException {\n    ClassicSimilarity sim = new ClassicSimilarity();\n    TFIDFSimilarity.IDFStats stats = (IDFStats) sim.computeWeight(1f, indexSearcher.collectionStatistics(\"test\"));\n    for (int i = 0; i < 256; i++) {\n      float boost = stats.normTable[i];\n      assertFalse(\"negative boost: \" + boost + \", byte=\" + i, boost < 0.0f);\n      assertFalse(\"inf bost: \" + boost + \", byte=\" + i, Float.isInfinite(boost));\n      assertFalse(\"nan boost for byte=\" + i, Float.isNaN(boost));\n      if (i > 0) {\n        assertTrue(\"boost is not decreasing: \" + boost + \",byte=\" + i, boost < stats.normTable[i-1]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["b97002ca487af397e493405ced0c73acdabd86ca","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["b97002ca487af397e493405ced0c73acdabd86ca"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc018b79379c67835b40b1259cd3dc931df60944":["615370d2b876c3435773b5174df2e2242ad7981a","cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4"],"30c8e5574b55d57947e989443dfde611646530ee":["e9017cf144952056066919f1ebc7897ff9bd71b1","cc018b79379c67835b40b1259cd3dc931df60944"],"b97002ca487af397e493405ced0c73acdabd86ca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["cc018b79379c67835b40b1259cd3dc931df60944"],"cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4":["615370d2b876c3435773b5174df2e2242ad7981a"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["30c8e5574b55d57947e989443dfde611646530ee"],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","cc018b79379c67835b40b1259cd3dc931df60944","cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b97002ca487af397e493405ced0c73acdabd86ca"],"cc018b79379c67835b40b1259cd3dc931df60944":["30c8e5574b55d57947e989443dfde611646530ee","c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"30c8e5574b55d57947e989443dfde611646530ee":[],"b97002ca487af397e493405ced0c73acdabd86ca":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4":["cc018b79379c67835b40b1259cd3dc931df60944"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}