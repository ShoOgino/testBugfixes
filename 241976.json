{"path":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","commits":[{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","pathOld":"/dev/null","sourceNew":"  public int add(Builder.UnCompiledNode<T> node) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final int h = hash(node);\n    int h2 = h;\n    int c = 1;\n    while(true) {\n      final int pos = h2 & mask;\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int address = fst.addNode(node);\n        //System.out.println(\"  now freeze addr=\" + address);\n        assert hash(address) == h : \"frozenHash=\" + hash(address) + \" vs h=\" + h;\n        count++;\n        table[pos] = address;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return address;\n      } else if (nodesEqual(node, v)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      h2 = h+(c + c*c)/2;\n      c++;\n      conf++;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49bcebd6824a2403e653173afd798f8a1048604","date":1292235755,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","sourceNew":"  public int add(Builder.UnCompiledNode<T> node) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final int h = hash(node);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int address = fst.addNode(node);\n        //System.out.println(\"  now freeze addr=\" + address);\n        assert hash(address) == h : \"frozenHash=\" + hash(address) + \" vs h=\" + h;\n        count++;\n        table[pos] = address;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return address;\n      } else if (nodesEqual(node, v)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","sourceOld":"  public int add(Builder.UnCompiledNode<T> node) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final int h = hash(node);\n    int h2 = h;\n    int c = 1;\n    while(true) {\n      final int pos = h2 & mask;\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int address = fst.addNode(node);\n        //System.out.println(\"  now freeze addr=\" + address);\n        assert hash(address) == h : \"frozenHash=\" + hash(address) + \" vs h=\" + h;\n        count++;\n        table[pos] = address;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return address;\n      } else if (nodesEqual(node, v)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      h2 = h+(c + c*c)/2;\n      c++;\n      conf++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","pathOld":"/dev/null","sourceNew":"  public int add(Builder.UnCompiledNode<T> node) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final int h = hash(node);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int address = fst.addNode(node);\n        //System.out.println(\"  now freeze addr=\" + address);\n        assert hash(address) == h : \"frozenHash=\" + hash(address) + \" vs h=\" + h;\n        count++;\n        table[pos] = address;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return address;\n      } else if (nodesEqual(node, v)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","pathOld":"/dev/null","sourceNew":"  public int add(Builder.UnCompiledNode<T> node) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final int h = hash(node);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int address = fst.addNode(node);\n        //System.out.println(\"  now freeze addr=\" + address);\n        assert hash(address) == h : \"frozenHash=\" + hash(address) + \" vs h=\" + h;\n        count++;\n        table[pos] = address;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return address;\n      } else if (nodesEqual(node, v)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","sourceNew":"  public int add(Builder.UnCompiledNode<T> node) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final int h = hash(node);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int address = fst.addNode(node);\n        //System.out.println(\"  now freeze addr=\" + address);\n        assert hash(address) == h : \"frozenHash=\" + hash(address) + \" vs h=\" + h;\n        count++;\n        table[pos] = address;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return address;\n      } else if (nodesEqual(node, v)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","sourceOld":"  public int add(Builder.UnCompiledNode<T> node) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final int h = hash(node);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int address = fst.addNode(node);\n        //System.out.println(\"  now freeze addr=\" + address);\n        assert hash(address) == h : \"frozenHash=\" + hash(address) + \" vs h=\" + h;\n        count++;\n        table[pos] = address;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return address;\n      } else if (nodesEqual(node, v)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","sourceNew":"  public int add(Builder.UnCompiledNode<T> node) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final int h = hash(node);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int address = fst.addNode(node);\n        //System.out.println(\"  now freeze addr=\" + address);\n        assert hash(address) == h : \"frozenHash=\" + hash(address) + \" vs h=\" + h;\n        count++;\n        table[pos] = address;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return address;\n      } else if (nodesEqual(node, v)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","sourceOld":"  public int add(Builder.UnCompiledNode<T> node) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final int h = hash(node);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int address = fst.addNode(node);\n        //System.out.println(\"  now freeze addr=\" + address);\n        assert hash(address) == h : \"frozenHash=\" + hash(address) + \" vs h=\" + h;\n        count++;\n        table[pos] = address;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return address;\n      } else if (nodesEqual(node, v)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","sourceNew":"  public int add(Builder.UnCompiledNode<T> node) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final int h = hash(node);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int address = fst.addNode(node);\n        //System.out.println(\"  now freeze addr=\" + address);\n        assert hash(address) == h : \"frozenHash=\" + hash(address) + \" vs h=\" + h;\n        count++;\n        table[pos] = address;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return address;\n      } else if (nodesEqual(node, v)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","sourceOld":"  public int add(Builder.UnCompiledNode<T> node) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final int h = hash(node);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int address = fst.addNode(node);\n        //System.out.println(\"  now freeze addr=\" + address);\n        assert hash(address) == h : \"frozenHash=\" + hash(address) + \" vs h=\" + h;\n        count++;\n        table[pos] = address;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return address;\n      } else if (nodesEqual(node, v)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["b49bcebd6824a2403e653173afd798f8a1048604"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["b49bcebd6824a2403e653173afd798f8a1048604","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b49bcebd6824a2403e653173afd798f8a1048604":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b49bcebd6824a2403e653173afd798f8a1048604"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b49bcebd6824a2403e653173afd798f8a1048604"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"b49bcebd6824a2403e653173afd798f8a1048604":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["b49bcebd6824a2403e653173afd798f8a1048604"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}