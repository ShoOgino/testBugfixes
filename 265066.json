{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilterFactory#init(Map[String,String]).mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/LengthFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    min=Integer.parseInt(args.get(MIN_KEY));\n    max=Integer.parseInt(args.get(MAX_KEY));\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\",false);\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    min=Integer.parseInt(args.get(MIN_KEY));\n    max=Integer.parseInt(args.get(MAX_KEY));\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\",false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d3e0b5069dbacda34baa90adceb47cb5c9f3e65","date":1343184871,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilterFactory#init(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    String minKey = args.get(MIN_KEY);\n    String maxKey = args.get(MAX_KEY);\n    if (minKey == null || maxKey == null) {\n      throw new InitializationException(\"Both \" + MIN_KEY + \" and \" + MAX_KEY + \" are mandatory\");\n    }\n    min=Integer.parseInt(minKey);\n    max=Integer.parseInt(maxKey);\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\",false);\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    min=Integer.parseInt(args.get(MIN_KEY));\n    max=Integer.parseInt(args.get(MAX_KEY));\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\",false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/LengthFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    String minKey = args.get(MIN_KEY);\n    String maxKey = args.get(MAX_KEY);\n    if (minKey == null || maxKey == null) {\n      throw new InitializationException(\"Both \" + MIN_KEY + \" and \" + MAX_KEY + \" are mandatory\");\n    }\n    min=Integer.parseInt(minKey);\n    max=Integer.parseInt(maxKey);\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\",false);\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    min=Integer.parseInt(args.get(MIN_KEY));\n    max=Integer.parseInt(args.get(MAX_KEY));\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\",false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f80818731469e00f54165ec94aae2db868ea05","date":1343266866,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilterFactory#init(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    String minKey = args.get(MIN_KEY);\n    String maxKey = args.get(MAX_KEY);\n    if (minKey == null || maxKey == null) {\n      throw new IllegalArgumentException(\"Both \" + MIN_KEY + \" and \" + MAX_KEY + \" are mandatory\");\n    }\n    min=Integer.parseInt(minKey);\n    max=Integer.parseInt(maxKey);\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\",false);\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    String minKey = args.get(MIN_KEY);\n    String maxKey = args.get(MAX_KEY);\n    if (minKey == null || maxKey == null) {\n      throw new InitializationException(\"Both \" + MIN_KEY + \" and \" + MAX_KEY + \" are mandatory\");\n    }\n    min=Integer.parseInt(minKey);\n    max=Integer.parseInt(maxKey);\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\",false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilterFactory#init(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    String minKey = args.get(MIN_KEY);\n    String maxKey = args.get(MAX_KEY);\n    if (minKey == null || maxKey == null) {\n      throw new IllegalArgumentException(\"Both \" + MIN_KEY + \" and \" + MAX_KEY + \" are mandatory\");\n    }\n    min=Integer.parseInt(minKey);\n    max=Integer.parseInt(maxKey);\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\",false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilterFactory#init(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    String minKey = args.get(MIN_KEY);\n    String maxKey = args.get(MAX_KEY);\n    if (minKey == null || maxKey == null) {\n      throw new IllegalArgumentException(\"Both \" + MIN_KEY + \" and \" + MAX_KEY + \" are mandatory\");\n    }\n    min=Integer.parseInt(minKey);\n    max=Integer.parseInt(maxKey);\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\",false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilterFactory#init(Map[String,String]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    String minKey = args.get(MIN_KEY);\n    String maxKey = args.get(MAX_KEY);\n    if (minKey == null || maxKey == null) {\n      throw new IllegalArgumentException(\"Both \" + MIN_KEY + \" and \" + MAX_KEY + \" are mandatory\");\n    }\n    min=Integer.parseInt(minKey);\n    max=Integer.parseInt(maxKey);\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\",false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"f6f80818731469e00f54165ec94aae2db868ea05":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"3d3e0b5069dbacda34baa90adceb47cb5c9f3e65":["3241e06e642196396b80bb293acd9c0814d079e0"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["f6f80818731469e00f54165ec94aae2db868ea05"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d3e0b5069dbacda34baa90adceb47cb5c9f3e65"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"f6f80818731469e00f54165ec94aae2db868ea05":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"3d3e0b5069dbacda34baa90adceb47cb5c9f3e65":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["f6f80818731469e00f54165ec94aae2db868ea05"],"3241e06e642196396b80bb293acd9c0814d079e0":["3d3e0b5069dbacda34baa90adceb47cb5c9f3e65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}