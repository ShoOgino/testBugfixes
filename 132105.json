{"path":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#smallArrayOfRandomNumbers().mjava","commits":[{"id":"e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f","date":1389311746,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#smallArrayOfRandomNumbers().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * returns a \"small\" list of \"small\" random numbers.  The idea behind this method is \n   * that multiple calls have a decent change of returning two arrays which are the \n   * same size and contain the same numbers but in a differnet order.\n   *\n   * the array is garunteed to always have at least 1 element\n   */\n  private int[] smallArrayOfRandomNumbers() {\n    int size = _TestUtil.nextInt(random(), 1, 5);\n    int[] result = new int[size];\n    for (int i=0; i < size; i++) {\n      result[i] = _TestUtil.nextInt(random(), 1, 5);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#smallArrayOfRandomNumbers().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#smallArrayOfRandomNumbers().mjava","sourceNew":"  /**\n   * returns a \"small\" list of \"small\" random numbers.  The idea behind this method is \n   * that multiple calls have a decent change of returning two arrays which are the \n   * same size and contain the same numbers but in a differnet order.\n   *\n   * the array is garunteed to always have at least 1 element\n   */\n  private int[] smallArrayOfRandomNumbers() {\n    int size = TestUtil.nextInt(random(), 1, 5);\n    int[] result = new int[size];\n    for (int i=0; i < size; i++) {\n      result[i] = TestUtil.nextInt(random(), 1, 5);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * returns a \"small\" list of \"small\" random numbers.  The idea behind this method is \n   * that multiple calls have a decent change of returning two arrays which are the \n   * same size and contain the same numbers but in a differnet order.\n   *\n   * the array is garunteed to always have at least 1 element\n   */\n  private int[] smallArrayOfRandomNumbers() {\n    int size = _TestUtil.nextInt(random(), 1, 5);\n    int[] result = new int[size];\n    for (int i=0; i < size; i++) {\n      result[i] = _TestUtil.nextInt(random(), 1, 5);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz KrasiÅ„ski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#smallArrayOfRandomNumbers().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#smallArrayOfRandomNumbers().mjava","sourceNew":"  /**\n   * returns a \"small\" list of \"small\" random numbers.  The idea behind this method is \n   * that multiple calls have a decent change of returning two arrays which are the \n   * same size and contain the same numbers but in a differed order.\n   *\n   * the array is guaranteed to always have at least 1 element\n   */\n  private int[] smallArrayOfRandomNumbers() {\n    int size = TestUtil.nextInt(random(), 1, 5);\n    int[] result = new int[size];\n    for (int i=0; i < size; i++) {\n      result[i] = TestUtil.nextInt(random(), 1, 5);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * returns a \"small\" list of \"small\" random numbers.  The idea behind this method is \n   * that multiple calls have a decent change of returning two arrays which are the \n   * same size and contain the same numbers but in a differnet order.\n   *\n   * the array is garunteed to always have at least 1 element\n   */\n  private int[] smallArrayOfRandomNumbers() {\n    int size = TestUtil.nextInt(random(), 1, 5);\n    int[] result = new int[size];\n    for (int i=0; i < size; i++) {\n      result[i] = TestUtil.nextInt(random(), 1, 5);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#smallArrayOfRandomNumbers().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#smallArrayOfRandomNumbers().mjava","sourceNew":"  /**\n   * returns a \"small\" list of \"small\" random numbers.  The idea behind this method is \n   * that multiple calls have a decent change of returning two arrays which are the \n   * same size and contain the same numbers but in a differed order.\n   *\n   * the array is guaranteed to always have at least 1 element\n   */\n  private int[] smallArrayOfRandomNumbers() {\n    int size = TestUtil.nextInt(random(), 1, 5);\n    int[] result = new int[size];\n    for (int i=0; i < size; i++) {\n      result[i] = TestUtil.nextInt(random(), 1, 5);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * returns a \"small\" list of \"small\" random numbers.  The idea behind this method is \n   * that multiple calls have a decent change of returning two arrays which are the \n   * same size and contain the same numbers but in a differnet order.\n   *\n   * the array is garunteed to always have at least 1 element\n   */\n  private int[] smallArrayOfRandomNumbers() {\n    int size = TestUtil.nextInt(random(), 1, 5);\n    int[] result = new int[size];\n    for (int i=0; i < size; i++) {\n      result[i] = TestUtil.nextInt(random(), 1, 5);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#smallArrayOfRandomNumbers().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#smallArrayOfRandomNumbers().mjava","sourceNew":"  /**\n   * returns a \"small\" list of \"small\" random numbers.  The idea behind this method is \n   * that multiple calls have a decent change of returning two arrays which are the \n   * same size and contain the same numbers but in a differed order.\n   *\n   * the array is guaranteed to always have at least 1 element\n   */\n  private int[] smallArrayOfRandomNumbers() {\n    int size = TestUtil.nextInt(random(), 1, 5);\n    int[] result = new int[size];\n    for (int i=0; i < size; i++) {\n      result[i] = TestUtil.nextInt(random(), 1, 5);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * returns a \"small\" list of \"small\" random numbers.  The idea behind this method is \n   * that multiple calls have a decent change of returning two arrays which are the \n   * same size and contain the same numbers but in a differnet order.\n   *\n   * the array is garunteed to always have at least 1 element\n   */\n  private int[] smallArrayOfRandomNumbers() {\n    int size = TestUtil.nextInt(random(), 1, 5);\n    int[] result = new int[size];\n    for (int i=0; i < size; i++) {\n      result[i] = TestUtil.nextInt(random(), 1, 5);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6613659748fe4411a7dcf85266e55db1f95f7315","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["6613659748fe4411a7dcf85266e55db1f95f7315","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f"],"e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f":["6613659748fe4411a7dcf85266e55db1f95f7315"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}