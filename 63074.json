{"path":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/RobotExclusionFilter.RobotExclusionTask#parse(BufferedReader).mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/RobotExclusionFilter.RobotExclusionTask#parse(BufferedReader).mjava","pathOld":"/dev/null","sourceNew":"        /**\n         * this parses the robots.txt file. It was taken from the PERL implementation\n         * Since this is only rarely called, it's not optimized for speed\n         *\n         * @param r                the robots.txt file\n         * @return                 the disallows\n         * @exception IOException  any IOException\n         */\n        public String[] parse(BufferedReader r)\n            throws IOException\n        {\n            // taken from Perl\n            Perl5Util p = new Perl5Util();\n            String line;\n            boolean isMe = false;\n            boolean isAnon = false;\n            ArrayList disallowed = new ArrayList();\n            String ua = null;\n\n            while ((line = r.readLine()) != null)\n            {\n                if (p.match(\"/^#.*/\", line))\n                {\n                    // a comment\n                    continue;\n                }\n                line = p.substitute(\"s/\\\\s*\\\\#.* //\", line);\n                if (p.match(\"/^\\\\s*$/\", line))\n                {\n                    if (isMe)\n                    {\n                        break;\n                    }\n                }\n                else if (p.match(\"/^User-Agent:\\\\s*(.*)/i\", line))\n                {\n                    ua = p.group(1);\n                    ua = p.substitute(\"s/\\\\s+$//\", ua);\n                    if (isMe)\n                    {\n                        break;\n                    }\n                    else if (ua.equals(\"*\"))\n                    {\n                        isAnon = true;\n                    }\n                    else if (Constants.CRAWLER_AGENT.startsWith(ua))\n                    {\n                        isMe = true;\n                    }\n                }\n                else if (p.match(\"/^Disallow:\\\\s*(.*)/i\", line))\n                {\n                    if (ua == null)\n                    {\n                        isAnon = true;\n                        // warn...\n                    }\n                    String disallow = p.group(1);\n                    if (disallow != null && disallow.length() > 0)\n                    {\n                        // assume we have a relative path\n                        ;\n                    }\n                    else\n                    {\n                        disallow = \"/\";\n                    }\n                    if (isMe || isAnon)\n                    {\n                        disallowed.add(disallow);\n                    }\n                }\n                else\n                {\n                    // warn: unexpected line\n                }\n            }\n            String[] disalloweds = new String[disallowed.size()];\n            disallowed.toArray(disalloweds);\n            return disalloweds;\n        }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/RobotExclusionFilter.RobotExclusionTask#parse(BufferedReader).mjava","sourceNew":null,"sourceOld":"        /**\n         * this parses the robots.txt file. It was taken from the PERL implementation\n         * Since this is only rarely called, it's not optimized for speed\n         *\n         * @param r                the robots.txt file\n         * @return                 the disallows\n         * @exception IOException  any IOException\n         */\n        public String[] parse(BufferedReader r)\n            throws IOException\n        {\n            // taken from Perl\n            Perl5Util p = new Perl5Util();\n            String line;\n            boolean isMe = false;\n            boolean isAnon = false;\n            ArrayList disallowed = new ArrayList();\n            String ua = null;\n\n            while ((line = r.readLine()) != null)\n            {\n                if (p.match(\"/^#.*/\", line))\n                {\n                    // a comment\n                    continue;\n                }\n                line = p.substitute(\"s/\\\\s*\\\\#.* //\", line);\n                if (p.match(\"/^\\\\s*$/\", line))\n                {\n                    if (isMe)\n                    {\n                        break;\n                    }\n                }\n                else if (p.match(\"/^User-Agent:\\\\s*(.*)/i\", line))\n                {\n                    ua = p.group(1);\n                    ua = p.substitute(\"s/\\\\s+$//\", ua);\n                    if (isMe)\n                    {\n                        break;\n                    }\n                    else if (ua.equals(\"*\"))\n                    {\n                        isAnon = true;\n                    }\n                    else if (Constants.CRAWLER_AGENT.startsWith(ua))\n                    {\n                        isMe = true;\n                    }\n                }\n                else if (p.match(\"/^Disallow:\\\\s*(.*)/i\", line))\n                {\n                    if (ua == null)\n                    {\n                        isAnon = true;\n                        // warn...\n                    }\n                    String disallow = p.group(1);\n                    if (disallow != null && disallow.length() > 0)\n                    {\n                        // assume we have a relative path\n                        ;\n                    }\n                    else\n                    {\n                        disallow = \"/\";\n                    }\n                    if (isMe || isAnon)\n                    {\n                        disallowed.add(disallow);\n                    }\n                }\n                else\n                {\n                    // warn: unexpected line\n                }\n            }\n            String[] disalloweds = new String[disallowed.size()];\n            disallowed.toArray(disalloweds);\n            return disalloweds;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["05d36e0b328ec96237035fbcca240e73631396e5"],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05d36e0b328ec96237035fbcca240e73631396e5":["afc16d717d9ed1a8e45371668ca6de674164d624"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}