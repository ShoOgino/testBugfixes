{"path":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            new RAMDirectory(),\n            new RAMDirectory(),\n            new RAMDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    Term t;\n    TermEnum te;\n    t = new Term(\"id\", \"1\");\n    te = ir.terms(t);\n    assertNotSame(t, te.term());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    t = new Term(\"id\", \"0\");\n    te = ir.terms(t);\n    assertNotSame(t, te.term());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n    t = new Term(\"id\", \"1\");\n    te = ir.terms(t);\n    assertNotSame(t, te.term());\n    t = new Term(\"id\", \"0\");\n    te = ir.terms(t);\n    assertNotSame(t, te.term());    \n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            new RAMDirectory(),\n            new RAMDirectory(),\n            new RAMDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    Term t;\n    TermEnum te;\n    t = new Term(\"id\", \"1\");\n    te = ir.terms(t);\n    assertNotSame(t, te.term());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    t = new Term(\"id\", \"0\");\n    te = ir.terms(t);\n    assertNotSame(t, te.term());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n    t = new Term(\"id\", \"1\");\n    te = ir.terms(t);\n    assertNotSame(t, te.term());\n    t = new Term(\"id\", \"0\");\n    te = ir.terms(t);\n    assertNotSame(t, te.term());    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            new RAMDirectory(),\n            new RAMDirectory(),\n            new RAMDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());    \n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            new RAMDirectory(),\n            new RAMDirectory(),\n            new RAMDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    Term t;\n    TermEnum te;\n    t = new Term(\"id\", \"1\");\n    te = ir.terms(t);\n    assertNotSame(t, te.term());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    t = new Term(\"id\", \"0\");\n    te = ir.terms(t);\n    assertNotSame(t, te.term());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n    t = new Term(\"id\", \"1\");\n    te = ir.terms(t);\n    assertNotSame(t, te.term());\n    t = new Term(\"id\", \"0\");\n    te = ir.terms(t);\n    assertNotSame(t, te.term());    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            new RAMDirectory(),\n            new RAMDirectory(),\n            new RAMDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());    \n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            new RAMDirectory(),\n            new RAMDirectory(),\n            new RAMDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    Term t;\n    TermEnum te;\n    t = new Term(\"id\", \"1\");\n    te = ir.terms(t);\n    assertNotSame(t, te.term());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    t = new Term(\"id\", \"0\");\n    te = ir.terms(t);\n    assertNotSame(t, te.term());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n    t = new Term(\"id\", \"1\");\n    te = ir.terms(t);\n    assertNotSame(t, te.term());\n    t = new Term(\"id\", \"0\");\n    te = ir.terms(t);\n    assertNotSame(t, te.term());    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            new MockRAMDirectory(),\n            new MockRAMDirectory(),\n            new MockRAMDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());    \n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            new RAMDirectory(),\n            new RAMDirectory(),\n            new RAMDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(random),\n            newDirectory(random),\n            newDirectory(random)\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            new MockRAMDirectory(),\n            new MockRAMDirectory(),\n            new MockRAMDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(random),\n            newDirectory(random),\n            newDirectory(random)\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            new RAMDirectory(),\n            new RAMDirectory(),\n            new RAMDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edfbc64812ce67598712702d2e4c81bfefccdd57","date":1310457524,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(TEST_VERSION_CURRENT, input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(TEST_VERSION_CURRENT, input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(TEST_VERSION_CURRENT, input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(TEST_VERSION_CURRENT, input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(TEST_VERSION_CURRENT, input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(TEST_VERSION_CURRENT, input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(TEST_VERSION_CURRENT, input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(TEST_VERSION_CURRENT, input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(TEST_VERSION_CURRENT, input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2], true);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(TEST_VERSION_CURRENT, input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(TEST_VERSION_CURRENT, input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["3cc749c053615f5871f3b95715fe292f34e70a53"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["3cc749c053615f5871f3b95715fe292f34e70a53","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"edfbc64812ce67598712702d2e4c81bfefccdd57":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"3cc749c053615f5871f3b95715fe292f34e70a53":["edfbc64812ce67598712702d2e4c81bfefccdd57"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","28427ef110c4c5bf5b4057731b83110bd1e13724"],"2553b00f699380c64959ccb27991289aae87be2e":["1f653cfcf159baeaafe5d01682a911e95bba4012","fd9cc9d77712aba3662f24632df7539ab75e3667"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","1f653cfcf159baeaafe5d01682a911e95bba4012"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1f653cfcf159baeaafe5d01682a911e95bba4012","fd9cc9d77712aba3662f24632df7539ab75e3667"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["3cc749c053615f5871f3b95715fe292f34e70a53","75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"edfbc64812ce67598712702d2e4c81bfefccdd57":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"2553b00f699380c64959ccb27991289aae87be2e":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","fd9cc9d77712aba3662f24632df7539ab75e3667"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5f4e87790277826a2aea119328600dfb07761f32","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["edfbc64812ce67598712702d2e4c81bfefccdd57","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5f4e87790277826a2aea119328600dfb07761f32","28427ef110c4c5bf5b4057731b83110bd1e13724"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}