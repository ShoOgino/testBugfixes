{"path":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#discreteMultiValueHighlighting(List[WeightedFragInfo],Field[]).mjava","commits":[{"id":"73187ff81dbd931417f46f53360c5dcf390ebde2","date":1342466689,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#discreteMultiValueHighlighting(List[WeightedFragInfo],Field[]).mjava","pathOld":"/dev/null","sourceNew":"  protected List<WeightedFragInfo> discreteMultiValueHighlighting(List<WeightedFragInfo> fragInfos, Field[] fields) {\n    Map<String, List<WeightedFragInfo>> fieldNameToFragInfos = new HashMap<String, List<WeightedFragInfo>>();\n    for (Field field : fields) {\n      fieldNameToFragInfos.put(field.name(), new ArrayList<WeightedFragInfo>());\n    }\n\n    fragInfos: for (WeightedFragInfo fragInfo : fragInfos) {\n      int fieldStart;\n      int fieldEnd = 0;\n      for (Field field : fields) {\n        if (field.stringValue().isEmpty()) {\n          fieldEnd++;\n          continue;\n        }\n        fieldStart = fieldEnd;\n        fieldEnd += field.stringValue().length() + 1; // + 1 for going to next field with same name.\n\n        if (fragInfo.getStartOffset() >= fieldStart && fragInfo.getEndOffset() >= fieldStart &&\n            fragInfo.getStartOffset() <= fieldEnd && fragInfo.getEndOffset() <= fieldEnd) {\n          fieldNameToFragInfos.get(field.name()).add(fragInfo);\n          continue fragInfos;\n        }\n\n        if (fragInfo.getSubInfos().isEmpty()) {\n          continue fragInfos;\n        }\n\n        Toffs firstToffs = fragInfo.getSubInfos().get(0).getTermsOffsets().get(0);\n        if (fragInfo.getStartOffset() >= fieldEnd || firstToffs.getStartOffset() >= fieldEnd) {\n          continue;\n        }\n\n        int fragStart = fieldStart;\n        if (fragInfo.getStartOffset() > fieldStart && fragInfo.getStartOffset() < fieldEnd) {\n          fragStart = fragInfo.getStartOffset();\n        }\n\n        int fragEnd = fieldEnd;\n        if (fragInfo.getEndOffset() > fieldStart && fragInfo.getEndOffset() < fieldEnd) {\n          fragEnd = fragInfo.getEndOffset();\n        }\n\n\n        List<SubInfo> subInfos = new ArrayList<SubInfo>();\n        WeightedFragInfo weightedFragInfo = new WeightedFragInfo(fragStart, fragEnd, subInfos, fragInfo.getTotalBoost());\n\n        Iterator<SubInfo> subInfoIterator = fragInfo.getSubInfos().iterator();\n        while (subInfoIterator.hasNext()) {\n          SubInfo subInfo = subInfoIterator.next();\n          List<Toffs> toffsList = new ArrayList<Toffs>();\n          Iterator<Toffs> toffsIterator = subInfo.getTermsOffsets().iterator();\n          while (toffsIterator.hasNext()) {\n            Toffs toffs = toffsIterator.next();\n            if (toffs.getStartOffset() >= fieldStart && toffs.getEndOffset() <= fieldEnd) {\n              toffsList.add(toffs);\n              toffsIterator.remove();\n            }\n          }\n          if (!toffsList.isEmpty()) {\n            subInfos.add(new SubInfo(subInfo.getText(), toffsList, subInfo.getSeqnum()));\n          }\n\n          if (subInfo.getTermsOffsets().isEmpty()) {\n            subInfoIterator.remove();\n          }\n        }\n        fieldNameToFragInfos.get(field.name()).add(weightedFragInfo);\n      }\n    }\n\n    List<WeightedFragInfo> result = new ArrayList<WeightedFragInfo>();\n    for (List<WeightedFragInfo> weightedFragInfos : fieldNameToFragInfos.values()) {\n      result.addAll(weightedFragInfos);\n    }\n    Collections.sort(result, new Comparator<WeightedFragInfo>() {\n\n      public int compare(FieldFragList.WeightedFragInfo info1, FieldFragList.WeightedFragInfo info2) {\n        return info1.getStartOffset() - info2.getStartOffset();\n      }\n\n    });\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3f678348ac6e145f874f56992e8c0f78a1ff3c46","39700f0117ce4ef15f96e8069885d58983707139"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#discreteMultiValueHighlighting(List[WeightedFragInfo],Field[]).mjava","pathOld":"/dev/null","sourceNew":"  protected List<WeightedFragInfo> discreteMultiValueHighlighting(List<WeightedFragInfo> fragInfos, Field[] fields) {\n    Map<String, List<WeightedFragInfo>> fieldNameToFragInfos = new HashMap<String, List<WeightedFragInfo>>();\n    for (Field field : fields) {\n      fieldNameToFragInfos.put(field.name(), new ArrayList<WeightedFragInfo>());\n    }\n\n    fragInfos: for (WeightedFragInfo fragInfo : fragInfos) {\n      int fieldStart;\n      int fieldEnd = 0;\n      for (Field field : fields) {\n        if (field.stringValue().isEmpty()) {\n          fieldEnd++;\n          continue;\n        }\n        fieldStart = fieldEnd;\n        fieldEnd += field.stringValue().length() + 1; // + 1 for going to next field with same name.\n\n        if (fragInfo.getStartOffset() >= fieldStart && fragInfo.getEndOffset() >= fieldStart &&\n            fragInfo.getStartOffset() <= fieldEnd && fragInfo.getEndOffset() <= fieldEnd) {\n          fieldNameToFragInfos.get(field.name()).add(fragInfo);\n          continue fragInfos;\n        }\n\n        if (fragInfo.getSubInfos().isEmpty()) {\n          continue fragInfos;\n        }\n\n        Toffs firstToffs = fragInfo.getSubInfos().get(0).getTermsOffsets().get(0);\n        if (fragInfo.getStartOffset() >= fieldEnd || firstToffs.getStartOffset() >= fieldEnd) {\n          continue;\n        }\n\n        int fragStart = fieldStart;\n        if (fragInfo.getStartOffset() > fieldStart && fragInfo.getStartOffset() < fieldEnd) {\n          fragStart = fragInfo.getStartOffset();\n        }\n\n        int fragEnd = fieldEnd;\n        if (fragInfo.getEndOffset() > fieldStart && fragInfo.getEndOffset() < fieldEnd) {\n          fragEnd = fragInfo.getEndOffset();\n        }\n\n\n        List<SubInfo> subInfos = new ArrayList<SubInfo>();\n        WeightedFragInfo weightedFragInfo = new WeightedFragInfo(fragStart, fragEnd, subInfos, fragInfo.getTotalBoost());\n\n        Iterator<SubInfo> subInfoIterator = fragInfo.getSubInfos().iterator();\n        while (subInfoIterator.hasNext()) {\n          SubInfo subInfo = subInfoIterator.next();\n          List<Toffs> toffsList = new ArrayList<Toffs>();\n          Iterator<Toffs> toffsIterator = subInfo.getTermsOffsets().iterator();\n          while (toffsIterator.hasNext()) {\n            Toffs toffs = toffsIterator.next();\n            if (toffs.getStartOffset() >= fieldStart && toffs.getEndOffset() <= fieldEnd) {\n              toffsList.add(toffs);\n              toffsIterator.remove();\n            }\n          }\n          if (!toffsList.isEmpty()) {\n            subInfos.add(new SubInfo(subInfo.getText(), toffsList, subInfo.getSeqnum()));\n          }\n\n          if (subInfo.getTermsOffsets().isEmpty()) {\n            subInfoIterator.remove();\n          }\n        }\n        fieldNameToFragInfos.get(field.name()).add(weightedFragInfo);\n      }\n    }\n\n    List<WeightedFragInfo> result = new ArrayList<WeightedFragInfo>();\n    for (List<WeightedFragInfo> weightedFragInfos : fieldNameToFragInfos.values()) {\n      result.addAll(weightedFragInfos);\n    }\n    Collections.sort(result, new Comparator<WeightedFragInfo>() {\n\n      public int compare(FieldFragList.WeightedFragInfo info1, FieldFragList.WeightedFragInfo info2) {\n        return info1.getStartOffset() - info2.getStartOffset();\n      }\n\n    });\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#discreteMultiValueHighlighting(List[WeightedFragInfo],Field[]).mjava","pathOld":"/dev/null","sourceNew":"  protected List<WeightedFragInfo> discreteMultiValueHighlighting(List<WeightedFragInfo> fragInfos, Field[] fields) {\n    Map<String, List<WeightedFragInfo>> fieldNameToFragInfos = new HashMap<String, List<WeightedFragInfo>>();\n    for (Field field : fields) {\n      fieldNameToFragInfos.put(field.name(), new ArrayList<WeightedFragInfo>());\n    }\n\n    fragInfos: for (WeightedFragInfo fragInfo : fragInfos) {\n      int fieldStart;\n      int fieldEnd = 0;\n      for (Field field : fields) {\n        if (field.stringValue().isEmpty()) {\n          fieldEnd++;\n          continue;\n        }\n        fieldStart = fieldEnd;\n        fieldEnd += field.stringValue().length() + 1; // + 1 for going to next field with same name.\n\n        if (fragInfo.getStartOffset() >= fieldStart && fragInfo.getEndOffset() >= fieldStart &&\n            fragInfo.getStartOffset() <= fieldEnd && fragInfo.getEndOffset() <= fieldEnd) {\n          fieldNameToFragInfos.get(field.name()).add(fragInfo);\n          continue fragInfos;\n        }\n\n        if (fragInfo.getSubInfos().isEmpty()) {\n          continue fragInfos;\n        }\n\n        Toffs firstToffs = fragInfo.getSubInfos().get(0).getTermsOffsets().get(0);\n        if (fragInfo.getStartOffset() >= fieldEnd || firstToffs.getStartOffset() >= fieldEnd) {\n          continue;\n        }\n\n        int fragStart = fieldStart;\n        if (fragInfo.getStartOffset() > fieldStart && fragInfo.getStartOffset() < fieldEnd) {\n          fragStart = fragInfo.getStartOffset();\n        }\n\n        int fragEnd = fieldEnd;\n        if (fragInfo.getEndOffset() > fieldStart && fragInfo.getEndOffset() < fieldEnd) {\n          fragEnd = fragInfo.getEndOffset();\n        }\n\n\n        List<SubInfo> subInfos = new ArrayList<SubInfo>();\n        WeightedFragInfo weightedFragInfo = new WeightedFragInfo(fragStart, fragEnd, subInfos, fragInfo.getTotalBoost());\n\n        Iterator<SubInfo> subInfoIterator = fragInfo.getSubInfos().iterator();\n        while (subInfoIterator.hasNext()) {\n          SubInfo subInfo = subInfoIterator.next();\n          List<Toffs> toffsList = new ArrayList<Toffs>();\n          Iterator<Toffs> toffsIterator = subInfo.getTermsOffsets().iterator();\n          while (toffsIterator.hasNext()) {\n            Toffs toffs = toffsIterator.next();\n            if (toffs.getStartOffset() >= fieldStart && toffs.getEndOffset() <= fieldEnd) {\n              toffsList.add(toffs);\n              toffsIterator.remove();\n            }\n          }\n          if (!toffsList.isEmpty()) {\n            subInfos.add(new SubInfo(subInfo.getText(), toffsList, subInfo.getSeqnum()));\n          }\n\n          if (subInfo.getTermsOffsets().isEmpty()) {\n            subInfoIterator.remove();\n          }\n        }\n        fieldNameToFragInfos.get(field.name()).add(weightedFragInfo);\n      }\n    }\n\n    List<WeightedFragInfo> result = new ArrayList<WeightedFragInfo>();\n    for (List<WeightedFragInfo> weightedFragInfos : fieldNameToFragInfos.values()) {\n      result.addAll(weightedFragInfos);\n    }\n    Collections.sort(result, new Comparator<WeightedFragInfo>() {\n\n      public int compare(FieldFragList.WeightedFragInfo info1, FieldFragList.WeightedFragInfo info2) {\n        return info1.getStartOffset() - info2.getStartOffset();\n      }\n\n    });\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#discreteMultiValueHighlighting(List[WeightedFragInfo],Field[]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#discreteMultiValueHighlighting(List[WeightedFragInfo],Field[]).mjava","sourceNew":"  protected List<WeightedFragInfo> discreteMultiValueHighlighting(List<WeightedFragInfo> fragInfos, Field[] fields) {\n    Map<String, List<WeightedFragInfo>> fieldNameToFragInfos = new HashMap<String, List<WeightedFragInfo>>();\n    for (Field field : fields) {\n      fieldNameToFragInfos.put(field.name(), new ArrayList<WeightedFragInfo>());\n    }\n\n    fragInfos: for (WeightedFragInfo fragInfo : fragInfos) {\n      int fieldStart;\n      int fieldEnd = 0;\n      for (Field field : fields) {\n        if (field.stringValue().isEmpty()) {\n          fieldEnd++;\n          continue;\n        }\n        fieldStart = fieldEnd;\n        fieldEnd += field.stringValue().length() + 1; // + 1 for going to next field with same name.\n\n        if (fragInfo.getStartOffset() >= fieldStart && fragInfo.getEndOffset() >= fieldStart &&\n            fragInfo.getStartOffset() <= fieldEnd && fragInfo.getEndOffset() <= fieldEnd) {\n          fieldNameToFragInfos.get(field.name()).add(fragInfo);\n          continue fragInfos;\n        }\n\n        if (fragInfo.getSubInfos().isEmpty()) {\n          continue fragInfos;\n        }\n\n        Toffs firstToffs = fragInfo.getSubInfos().get(0).getTermsOffsets().get(0);\n        if (fragInfo.getStartOffset() >= fieldEnd || firstToffs.getStartOffset() >= fieldEnd) {\n          continue;\n        }\n\n        int fragStart = fieldStart;\n        if (fragInfo.getStartOffset() > fieldStart && fragInfo.getStartOffset() < fieldEnd) {\n          fragStart = fragInfo.getStartOffset();\n        }\n\n        int fragEnd = fieldEnd;\n        if (fragInfo.getEndOffset() > fieldStart && fragInfo.getEndOffset() < fieldEnd) {\n          fragEnd = fragInfo.getEndOffset();\n        }\n\n\n        List<SubInfo> subInfos = new ArrayList<SubInfo>();\n        WeightedFragInfo weightedFragInfo = new WeightedFragInfo(fragStart, fragEnd, subInfos, fragInfo.getTotalBoost());\n\n        Iterator<SubInfo> subInfoIterator = fragInfo.getSubInfos().iterator();\n        while (subInfoIterator.hasNext()) {\n          SubInfo subInfo = subInfoIterator.next();\n          List<Toffs> toffsList = new ArrayList<Toffs>();\n          Iterator<Toffs> toffsIterator = subInfo.getTermsOffsets().iterator();\n          while (toffsIterator.hasNext()) {\n            Toffs toffs = toffsIterator.next();\n            if (toffs.getStartOffset() >= fieldStart && toffs.getEndOffset() <= fieldEnd) {\n              toffsList.add(toffs);\n              toffsIterator.remove();\n            }\n          }\n          if (!toffsList.isEmpty()) {\n            subInfos.add(new SubInfo(subInfo.getText(), toffsList, subInfo.getSeqnum()));\n          }\n\n          if (subInfo.getTermsOffsets().isEmpty()) {\n            subInfoIterator.remove();\n          }\n        }\n        fieldNameToFragInfos.get(field.name()).add(weightedFragInfo);\n      }\n    }\n\n    List<WeightedFragInfo> result = new ArrayList<WeightedFragInfo>();\n    for (List<WeightedFragInfo> weightedFragInfos : fieldNameToFragInfos.values()) {\n      result.addAll(weightedFragInfos);\n    }\n    Collections.sort(result, new Comparator<WeightedFragInfo>() {\n\n      @Override\n      public int compare(FieldFragList.WeightedFragInfo info1, FieldFragList.WeightedFragInfo info2) {\n        return info1.getStartOffset() - info2.getStartOffset();\n      }\n\n    });\n\n    return result;\n  }\n\n","sourceOld":"  protected List<WeightedFragInfo> discreteMultiValueHighlighting(List<WeightedFragInfo> fragInfos, Field[] fields) {\n    Map<String, List<WeightedFragInfo>> fieldNameToFragInfos = new HashMap<String, List<WeightedFragInfo>>();\n    for (Field field : fields) {\n      fieldNameToFragInfos.put(field.name(), new ArrayList<WeightedFragInfo>());\n    }\n\n    fragInfos: for (WeightedFragInfo fragInfo : fragInfos) {\n      int fieldStart;\n      int fieldEnd = 0;\n      for (Field field : fields) {\n        if (field.stringValue().isEmpty()) {\n          fieldEnd++;\n          continue;\n        }\n        fieldStart = fieldEnd;\n        fieldEnd += field.stringValue().length() + 1; // + 1 for going to next field with same name.\n\n        if (fragInfo.getStartOffset() >= fieldStart && fragInfo.getEndOffset() >= fieldStart &&\n            fragInfo.getStartOffset() <= fieldEnd && fragInfo.getEndOffset() <= fieldEnd) {\n          fieldNameToFragInfos.get(field.name()).add(fragInfo);\n          continue fragInfos;\n        }\n\n        if (fragInfo.getSubInfos().isEmpty()) {\n          continue fragInfos;\n        }\n\n        Toffs firstToffs = fragInfo.getSubInfos().get(0).getTermsOffsets().get(0);\n        if (fragInfo.getStartOffset() >= fieldEnd || firstToffs.getStartOffset() >= fieldEnd) {\n          continue;\n        }\n\n        int fragStart = fieldStart;\n        if (fragInfo.getStartOffset() > fieldStart && fragInfo.getStartOffset() < fieldEnd) {\n          fragStart = fragInfo.getStartOffset();\n        }\n\n        int fragEnd = fieldEnd;\n        if (fragInfo.getEndOffset() > fieldStart && fragInfo.getEndOffset() < fieldEnd) {\n          fragEnd = fragInfo.getEndOffset();\n        }\n\n\n        List<SubInfo> subInfos = new ArrayList<SubInfo>();\n        WeightedFragInfo weightedFragInfo = new WeightedFragInfo(fragStart, fragEnd, subInfos, fragInfo.getTotalBoost());\n\n        Iterator<SubInfo> subInfoIterator = fragInfo.getSubInfos().iterator();\n        while (subInfoIterator.hasNext()) {\n          SubInfo subInfo = subInfoIterator.next();\n          List<Toffs> toffsList = new ArrayList<Toffs>();\n          Iterator<Toffs> toffsIterator = subInfo.getTermsOffsets().iterator();\n          while (toffsIterator.hasNext()) {\n            Toffs toffs = toffsIterator.next();\n            if (toffs.getStartOffset() >= fieldStart && toffs.getEndOffset() <= fieldEnd) {\n              toffsList.add(toffs);\n              toffsIterator.remove();\n            }\n          }\n          if (!toffsList.isEmpty()) {\n            subInfos.add(new SubInfo(subInfo.getText(), toffsList, subInfo.getSeqnum()));\n          }\n\n          if (subInfo.getTermsOffsets().isEmpty()) {\n            subInfoIterator.remove();\n          }\n        }\n        fieldNameToFragInfos.get(field.name()).add(weightedFragInfo);\n      }\n    }\n\n    List<WeightedFragInfo> result = new ArrayList<WeightedFragInfo>();\n    for (List<WeightedFragInfo> weightedFragInfos : fieldNameToFragInfos.values()) {\n      result.addAll(weightedFragInfos);\n    }\n    Collections.sort(result, new Comparator<WeightedFragInfo>() {\n\n      public int compare(FieldFragList.WeightedFragInfo info1, FieldFragList.WeightedFragInfo info2) {\n        return info1.getStartOffset() - info2.getStartOffset();\n      }\n\n    });\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#discreteMultiValueHighlighting(List[WeightedFragInfo],Field[]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#discreteMultiValueHighlighting(List[WeightedFragInfo],Field[]).mjava","sourceNew":"  protected List<WeightedFragInfo> discreteMultiValueHighlighting(List<WeightedFragInfo> fragInfos, Field[] fields) {\n    Map<String, List<WeightedFragInfo>> fieldNameToFragInfos = new HashMap<String, List<WeightedFragInfo>>();\n    for (Field field : fields) {\n      fieldNameToFragInfos.put(field.name(), new ArrayList<WeightedFragInfo>());\n    }\n\n    fragInfos: for (WeightedFragInfo fragInfo : fragInfos) {\n      int fieldStart;\n      int fieldEnd = 0;\n      for (Field field : fields) {\n        if (field.stringValue().isEmpty()) {\n          fieldEnd++;\n          continue;\n        }\n        fieldStart = fieldEnd;\n        fieldEnd += field.stringValue().length() + 1; // + 1 for going to next field with same name.\n\n        if (fragInfo.getStartOffset() >= fieldStart && fragInfo.getEndOffset() >= fieldStart &&\n            fragInfo.getStartOffset() <= fieldEnd && fragInfo.getEndOffset() <= fieldEnd) {\n          fieldNameToFragInfos.get(field.name()).add(fragInfo);\n          continue fragInfos;\n        }\n\n        if (fragInfo.getSubInfos().isEmpty()) {\n          continue fragInfos;\n        }\n\n        Toffs firstToffs = fragInfo.getSubInfos().get(0).getTermsOffsets().get(0);\n        if (fragInfo.getStartOffset() >= fieldEnd || firstToffs.getStartOffset() >= fieldEnd) {\n          continue;\n        }\n\n        int fragStart = fieldStart;\n        if (fragInfo.getStartOffset() > fieldStart && fragInfo.getStartOffset() < fieldEnd) {\n          fragStart = fragInfo.getStartOffset();\n        }\n\n        int fragEnd = fieldEnd;\n        if (fragInfo.getEndOffset() > fieldStart && fragInfo.getEndOffset() < fieldEnd) {\n          fragEnd = fragInfo.getEndOffset();\n        }\n\n\n        List<SubInfo> subInfos = new ArrayList<SubInfo>();\n        WeightedFragInfo weightedFragInfo = new WeightedFragInfo(fragStart, fragEnd, subInfos, fragInfo.getTotalBoost());\n\n        Iterator<SubInfo> subInfoIterator = fragInfo.getSubInfos().iterator();\n        while (subInfoIterator.hasNext()) {\n          SubInfo subInfo = subInfoIterator.next();\n          List<Toffs> toffsList = new ArrayList<Toffs>();\n          Iterator<Toffs> toffsIterator = subInfo.getTermsOffsets().iterator();\n          while (toffsIterator.hasNext()) {\n            Toffs toffs = toffsIterator.next();\n            if (toffs.getStartOffset() >= fieldStart && toffs.getEndOffset() <= fieldEnd) {\n              toffsList.add(toffs);\n              toffsIterator.remove();\n            }\n          }\n          if (!toffsList.isEmpty()) {\n            subInfos.add(new SubInfo(subInfo.getText(), toffsList, subInfo.getSeqnum()));\n          }\n\n          if (subInfo.getTermsOffsets().isEmpty()) {\n            subInfoIterator.remove();\n          }\n        }\n        fieldNameToFragInfos.get(field.name()).add(weightedFragInfo);\n      }\n    }\n\n    List<WeightedFragInfo> result = new ArrayList<WeightedFragInfo>();\n    for (List<WeightedFragInfo> weightedFragInfos : fieldNameToFragInfos.values()) {\n      result.addAll(weightedFragInfos);\n    }\n    Collections.sort(result, new Comparator<WeightedFragInfo>() {\n\n      @Override\n      public int compare(FieldFragList.WeightedFragInfo info1, FieldFragList.WeightedFragInfo info2) {\n        return info1.getStartOffset() - info2.getStartOffset();\n      }\n\n    });\n\n    return result;\n  }\n\n","sourceOld":"  protected List<WeightedFragInfo> discreteMultiValueHighlighting(List<WeightedFragInfo> fragInfos, Field[] fields) {\n    Map<String, List<WeightedFragInfo>> fieldNameToFragInfos = new HashMap<String, List<WeightedFragInfo>>();\n    for (Field field : fields) {\n      fieldNameToFragInfos.put(field.name(), new ArrayList<WeightedFragInfo>());\n    }\n\n    fragInfos: for (WeightedFragInfo fragInfo : fragInfos) {\n      int fieldStart;\n      int fieldEnd = 0;\n      for (Field field : fields) {\n        if (field.stringValue().isEmpty()) {\n          fieldEnd++;\n          continue;\n        }\n        fieldStart = fieldEnd;\n        fieldEnd += field.stringValue().length() + 1; // + 1 for going to next field with same name.\n\n        if (fragInfo.getStartOffset() >= fieldStart && fragInfo.getEndOffset() >= fieldStart &&\n            fragInfo.getStartOffset() <= fieldEnd && fragInfo.getEndOffset() <= fieldEnd) {\n          fieldNameToFragInfos.get(field.name()).add(fragInfo);\n          continue fragInfos;\n        }\n\n        if (fragInfo.getSubInfos().isEmpty()) {\n          continue fragInfos;\n        }\n\n        Toffs firstToffs = fragInfo.getSubInfos().get(0).getTermsOffsets().get(0);\n        if (fragInfo.getStartOffset() >= fieldEnd || firstToffs.getStartOffset() >= fieldEnd) {\n          continue;\n        }\n\n        int fragStart = fieldStart;\n        if (fragInfo.getStartOffset() > fieldStart && fragInfo.getStartOffset() < fieldEnd) {\n          fragStart = fragInfo.getStartOffset();\n        }\n\n        int fragEnd = fieldEnd;\n        if (fragInfo.getEndOffset() > fieldStart && fragInfo.getEndOffset() < fieldEnd) {\n          fragEnd = fragInfo.getEndOffset();\n        }\n\n\n        List<SubInfo> subInfos = new ArrayList<SubInfo>();\n        WeightedFragInfo weightedFragInfo = new WeightedFragInfo(fragStart, fragEnd, subInfos, fragInfo.getTotalBoost());\n\n        Iterator<SubInfo> subInfoIterator = fragInfo.getSubInfos().iterator();\n        while (subInfoIterator.hasNext()) {\n          SubInfo subInfo = subInfoIterator.next();\n          List<Toffs> toffsList = new ArrayList<Toffs>();\n          Iterator<Toffs> toffsIterator = subInfo.getTermsOffsets().iterator();\n          while (toffsIterator.hasNext()) {\n            Toffs toffs = toffsIterator.next();\n            if (toffs.getStartOffset() >= fieldStart && toffs.getEndOffset() <= fieldEnd) {\n              toffsList.add(toffs);\n              toffsIterator.remove();\n            }\n          }\n          if (!toffsList.isEmpty()) {\n            subInfos.add(new SubInfo(subInfo.getText(), toffsList, subInfo.getSeqnum()));\n          }\n\n          if (subInfo.getTermsOffsets().isEmpty()) {\n            subInfoIterator.remove();\n          }\n        }\n        fieldNameToFragInfos.get(field.name()).add(weightedFragInfo);\n      }\n    }\n\n    List<WeightedFragInfo> result = new ArrayList<WeightedFragInfo>();\n    for (List<WeightedFragInfo> weightedFragInfos : fieldNameToFragInfos.values()) {\n      result.addAll(weightedFragInfos);\n    }\n    Collections.sort(result, new Comparator<WeightedFragInfo>() {\n\n      public int compare(FieldFragList.WeightedFragInfo info1, FieldFragList.WeightedFragInfo info2) {\n        return info1.getStartOffset() - info2.getStartOffset();\n      }\n\n    });\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f678348ac6e145f874f56992e8c0f78a1ff3c46","date":1385743501,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#discreteMultiValueHighlighting(List[WeightedFragInfo],Field[]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#discreteMultiValueHighlighting(List[WeightedFragInfo],Field[]).mjava","sourceNew":"  protected List<WeightedFragInfo> discreteMultiValueHighlighting(List<WeightedFragInfo> fragInfos, Field[] fields) {\n    Map<String, List<WeightedFragInfo>> fieldNameToFragInfos = new HashMap<String, List<WeightedFragInfo>>();\n    for (Field field : fields) {\n      fieldNameToFragInfos.put(field.name(), new ArrayList<WeightedFragInfo>());\n    }\n\n    fragInfos: for (WeightedFragInfo fragInfo : fragInfos) {\n      int fieldStart;\n      int fieldEnd = 0;\n      for (Field field : fields) {\n        if (field.stringValue().isEmpty()) {\n          fieldEnd++;\n          continue;\n        }\n        fieldStart = fieldEnd;\n        fieldEnd += field.stringValue().length() + 1; // + 1 for going to next field with same name.\n\n        if (fragInfo.getStartOffset() >= fieldStart && fragInfo.getEndOffset() >= fieldStart &&\n            fragInfo.getStartOffset() <= fieldEnd && fragInfo.getEndOffset() <= fieldEnd) {\n          fieldNameToFragInfos.get(field.name()).add(fragInfo);\n          continue fragInfos;\n        }\n\n        if (fragInfo.getSubInfos().isEmpty()) {\n          continue fragInfos;\n        }\n\n        Toffs firstToffs = fragInfo.getSubInfos().get(0).getTermsOffsets().get(0);\n        if (fragInfo.getStartOffset() >= fieldEnd || firstToffs.getStartOffset() >= fieldEnd) {\n          continue;\n        }\n\n        int fragStart = fieldStart;\n        if (fragInfo.getStartOffset() > fieldStart && fragInfo.getStartOffset() < fieldEnd) {\n          fragStart = fragInfo.getStartOffset();\n        }\n\n        int fragEnd = fieldEnd;\n        if (fragInfo.getEndOffset() > fieldStart && fragInfo.getEndOffset() < fieldEnd) {\n          fragEnd = fragInfo.getEndOffset();\n        }\n\n\n        List<SubInfo> subInfos = new ArrayList<SubInfo>();\n        Iterator<SubInfo> subInfoIterator = fragInfo.getSubInfos().iterator();\n        float boost = 0.0f;  //  The boost of the new info will be the sum of the boosts of its SubInfos\n        while (subInfoIterator.hasNext()) {\n          SubInfo subInfo = subInfoIterator.next();\n          List<Toffs> toffsList = new ArrayList<Toffs>();\n          Iterator<Toffs> toffsIterator = subInfo.getTermsOffsets().iterator();\n          while (toffsIterator.hasNext()) {\n            Toffs toffs = toffsIterator.next();\n            if (toffs.getStartOffset() >= fieldStart && toffs.getEndOffset() <= fieldEnd) {\n\n              toffsList.add(toffs);\n              toffsIterator.remove();\n            }\n          }\n          if (!toffsList.isEmpty()) {\n            subInfos.add(new SubInfo(subInfo.getText(), toffsList, subInfo.getSeqnum(), subInfo.getBoost()));\n            boost += subInfo.getBoost();\n          }\n\n          if (subInfo.getTermsOffsets().isEmpty()) {\n            subInfoIterator.remove();\n          }\n        }\n        WeightedFragInfo weightedFragInfo = new WeightedFragInfo(fragStart, fragEnd, subInfos, boost);\n        fieldNameToFragInfos.get(field.name()).add(weightedFragInfo);\n      }\n    }\n\n    List<WeightedFragInfo> result = new ArrayList<WeightedFragInfo>();\n    for (List<WeightedFragInfo> weightedFragInfos : fieldNameToFragInfos.values()) {\n      result.addAll(weightedFragInfos);\n    }\n    Collections.sort(result, new Comparator<WeightedFragInfo>() {\n\n      @Override\n      public int compare(FieldFragList.WeightedFragInfo info1, FieldFragList.WeightedFragInfo info2) {\n        return info1.getStartOffset() - info2.getStartOffset();\n      }\n\n    });\n\n    return result;\n  }\n\n","sourceOld":"  protected List<WeightedFragInfo> discreteMultiValueHighlighting(List<WeightedFragInfo> fragInfos, Field[] fields) {\n    Map<String, List<WeightedFragInfo>> fieldNameToFragInfos = new HashMap<String, List<WeightedFragInfo>>();\n    for (Field field : fields) {\n      fieldNameToFragInfos.put(field.name(), new ArrayList<WeightedFragInfo>());\n    }\n\n    fragInfos: for (WeightedFragInfo fragInfo : fragInfos) {\n      int fieldStart;\n      int fieldEnd = 0;\n      for (Field field : fields) {\n        if (field.stringValue().isEmpty()) {\n          fieldEnd++;\n          continue;\n        }\n        fieldStart = fieldEnd;\n        fieldEnd += field.stringValue().length() + 1; // + 1 for going to next field with same name.\n\n        if (fragInfo.getStartOffset() >= fieldStart && fragInfo.getEndOffset() >= fieldStart &&\n            fragInfo.getStartOffset() <= fieldEnd && fragInfo.getEndOffset() <= fieldEnd) {\n          fieldNameToFragInfos.get(field.name()).add(fragInfo);\n          continue fragInfos;\n        }\n\n        if (fragInfo.getSubInfos().isEmpty()) {\n          continue fragInfos;\n        }\n\n        Toffs firstToffs = fragInfo.getSubInfos().get(0).getTermsOffsets().get(0);\n        if (fragInfo.getStartOffset() >= fieldEnd || firstToffs.getStartOffset() >= fieldEnd) {\n          continue;\n        }\n\n        int fragStart = fieldStart;\n        if (fragInfo.getStartOffset() > fieldStart && fragInfo.getStartOffset() < fieldEnd) {\n          fragStart = fragInfo.getStartOffset();\n        }\n\n        int fragEnd = fieldEnd;\n        if (fragInfo.getEndOffset() > fieldStart && fragInfo.getEndOffset() < fieldEnd) {\n          fragEnd = fragInfo.getEndOffset();\n        }\n\n\n        List<SubInfo> subInfos = new ArrayList<SubInfo>();\n        WeightedFragInfo weightedFragInfo = new WeightedFragInfo(fragStart, fragEnd, subInfos, fragInfo.getTotalBoost());\n\n        Iterator<SubInfo> subInfoIterator = fragInfo.getSubInfos().iterator();\n        while (subInfoIterator.hasNext()) {\n          SubInfo subInfo = subInfoIterator.next();\n          List<Toffs> toffsList = new ArrayList<Toffs>();\n          Iterator<Toffs> toffsIterator = subInfo.getTermsOffsets().iterator();\n          while (toffsIterator.hasNext()) {\n            Toffs toffs = toffsIterator.next();\n            if (toffs.getStartOffset() >= fieldStart && toffs.getEndOffset() <= fieldEnd) {\n              toffsList.add(toffs);\n              toffsIterator.remove();\n            }\n          }\n          if (!toffsList.isEmpty()) {\n            subInfos.add(new SubInfo(subInfo.getText(), toffsList, subInfo.getSeqnum()));\n          }\n\n          if (subInfo.getTermsOffsets().isEmpty()) {\n            subInfoIterator.remove();\n          }\n        }\n        fieldNameToFragInfos.get(field.name()).add(weightedFragInfo);\n      }\n    }\n\n    List<WeightedFragInfo> result = new ArrayList<WeightedFragInfo>();\n    for (List<WeightedFragInfo> weightedFragInfos : fieldNameToFragInfos.values()) {\n      result.addAll(weightedFragInfos);\n    }\n    Collections.sort(result, new Comparator<WeightedFragInfo>() {\n\n      @Override\n      public int compare(FieldFragList.WeightedFragInfo info1, FieldFragList.WeightedFragInfo info2) {\n        return info1.getStartOffset() - info2.getStartOffset();\n      }\n\n    });\n\n    return result;\n  }\n\n","bugFix":["73187ff81dbd931417f46f53360c5dcf390ebde2"],"bugIntro":["39700f0117ce4ef15f96e8069885d58983707139"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#discreteMultiValueHighlighting(List[WeightedFragInfo],Field[]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#discreteMultiValueHighlighting(List[WeightedFragInfo],Field[]).mjava","sourceNew":"  protected List<WeightedFragInfo> discreteMultiValueHighlighting(List<WeightedFragInfo> fragInfos, Field[] fields) {\n    Map<String, List<WeightedFragInfo>> fieldNameToFragInfos = new HashMap<String, List<WeightedFragInfo>>();\n    for (Field field : fields) {\n      fieldNameToFragInfos.put(field.name(), new ArrayList<WeightedFragInfo>());\n    }\n\n    fragInfos: for (WeightedFragInfo fragInfo : fragInfos) {\n      int fieldStart;\n      int fieldEnd = 0;\n      for (Field field : fields) {\n        if (field.stringValue().isEmpty()) {\n          fieldEnd++;\n          continue;\n        }\n        fieldStart = fieldEnd;\n        fieldEnd += field.stringValue().length() + 1; // + 1 for going to next field with same name.\n\n        if (fragInfo.getStartOffset() >= fieldStart && fragInfo.getEndOffset() >= fieldStart &&\n            fragInfo.getStartOffset() <= fieldEnd && fragInfo.getEndOffset() <= fieldEnd) {\n          fieldNameToFragInfos.get(field.name()).add(fragInfo);\n          continue fragInfos;\n        }\n\n        if (fragInfo.getSubInfos().isEmpty()) {\n          continue fragInfos;\n        }\n\n        Toffs firstToffs = fragInfo.getSubInfos().get(0).getTermsOffsets().get(0);\n        if (fragInfo.getStartOffset() >= fieldEnd || firstToffs.getStartOffset() >= fieldEnd) {\n          continue;\n        }\n\n        int fragStart = fieldStart;\n        if (fragInfo.getStartOffset() > fieldStart && fragInfo.getStartOffset() < fieldEnd) {\n          fragStart = fragInfo.getStartOffset();\n        }\n\n        int fragEnd = fieldEnd;\n        if (fragInfo.getEndOffset() > fieldStart && fragInfo.getEndOffset() < fieldEnd) {\n          fragEnd = fragInfo.getEndOffset();\n        }\n\n\n        List<SubInfo> subInfos = new ArrayList<SubInfo>();\n        Iterator<SubInfo> subInfoIterator = fragInfo.getSubInfos().iterator();\n        float boost = 0.0f;  //  The boost of the new info will be the sum of the boosts of its SubInfos\n        while (subInfoIterator.hasNext()) {\n          SubInfo subInfo = subInfoIterator.next();\n          List<Toffs> toffsList = new ArrayList<Toffs>();\n          Iterator<Toffs> toffsIterator = subInfo.getTermsOffsets().iterator();\n          while (toffsIterator.hasNext()) {\n            Toffs toffs = toffsIterator.next();\n            if (toffs.getStartOffset() >= fieldStart && toffs.getEndOffset() <= fieldEnd) {\n\n              toffsList.add(toffs);\n              toffsIterator.remove();\n            }\n          }\n          if (!toffsList.isEmpty()) {\n            subInfos.add(new SubInfo(subInfo.getText(), toffsList, subInfo.getSeqnum(), subInfo.getBoost()));\n            boost += subInfo.getBoost();\n          }\n\n          if (subInfo.getTermsOffsets().isEmpty()) {\n            subInfoIterator.remove();\n          }\n        }\n        WeightedFragInfo weightedFragInfo = new WeightedFragInfo(fragStart, fragEnd, subInfos, boost);\n        fieldNameToFragInfos.get(field.name()).add(weightedFragInfo);\n      }\n    }\n\n    List<WeightedFragInfo> result = new ArrayList<WeightedFragInfo>();\n    for (List<WeightedFragInfo> weightedFragInfos : fieldNameToFragInfos.values()) {\n      result.addAll(weightedFragInfos);\n    }\n    Collections.sort(result, new Comparator<WeightedFragInfo>() {\n\n      @Override\n      public int compare(FieldFragList.WeightedFragInfo info1, FieldFragList.WeightedFragInfo info2) {\n        return info1.getStartOffset() - info2.getStartOffset();\n      }\n\n    });\n\n    return result;\n  }\n\n","sourceOld":"  protected List<WeightedFragInfo> discreteMultiValueHighlighting(List<WeightedFragInfo> fragInfos, Field[] fields) {\n    Map<String, List<WeightedFragInfo>> fieldNameToFragInfos = new HashMap<String, List<WeightedFragInfo>>();\n    for (Field field : fields) {\n      fieldNameToFragInfos.put(field.name(), new ArrayList<WeightedFragInfo>());\n    }\n\n    fragInfos: for (WeightedFragInfo fragInfo : fragInfos) {\n      int fieldStart;\n      int fieldEnd = 0;\n      for (Field field : fields) {\n        if (field.stringValue().isEmpty()) {\n          fieldEnd++;\n          continue;\n        }\n        fieldStart = fieldEnd;\n        fieldEnd += field.stringValue().length() + 1; // + 1 for going to next field with same name.\n\n        if (fragInfo.getStartOffset() >= fieldStart && fragInfo.getEndOffset() >= fieldStart &&\n            fragInfo.getStartOffset() <= fieldEnd && fragInfo.getEndOffset() <= fieldEnd) {\n          fieldNameToFragInfos.get(field.name()).add(fragInfo);\n          continue fragInfos;\n        }\n\n        if (fragInfo.getSubInfos().isEmpty()) {\n          continue fragInfos;\n        }\n\n        Toffs firstToffs = fragInfo.getSubInfos().get(0).getTermsOffsets().get(0);\n        if (fragInfo.getStartOffset() >= fieldEnd || firstToffs.getStartOffset() >= fieldEnd) {\n          continue;\n        }\n\n        int fragStart = fieldStart;\n        if (fragInfo.getStartOffset() > fieldStart && fragInfo.getStartOffset() < fieldEnd) {\n          fragStart = fragInfo.getStartOffset();\n        }\n\n        int fragEnd = fieldEnd;\n        if (fragInfo.getEndOffset() > fieldStart && fragInfo.getEndOffset() < fieldEnd) {\n          fragEnd = fragInfo.getEndOffset();\n        }\n\n\n        List<SubInfo> subInfos = new ArrayList<SubInfo>();\n        WeightedFragInfo weightedFragInfo = new WeightedFragInfo(fragStart, fragEnd, subInfos, fragInfo.getTotalBoost());\n\n        Iterator<SubInfo> subInfoIterator = fragInfo.getSubInfos().iterator();\n        while (subInfoIterator.hasNext()) {\n          SubInfo subInfo = subInfoIterator.next();\n          List<Toffs> toffsList = new ArrayList<Toffs>();\n          Iterator<Toffs> toffsIterator = subInfo.getTermsOffsets().iterator();\n          while (toffsIterator.hasNext()) {\n            Toffs toffs = toffsIterator.next();\n            if (toffs.getStartOffset() >= fieldStart && toffs.getEndOffset() <= fieldEnd) {\n              toffsList.add(toffs);\n              toffsIterator.remove();\n            }\n          }\n          if (!toffsList.isEmpty()) {\n            subInfos.add(new SubInfo(subInfo.getText(), toffsList, subInfo.getSeqnum()));\n          }\n\n          if (subInfo.getTermsOffsets().isEmpty()) {\n            subInfoIterator.remove();\n          }\n        }\n        fieldNameToFragInfos.get(field.name()).add(weightedFragInfo);\n      }\n    }\n\n    List<WeightedFragInfo> result = new ArrayList<WeightedFragInfo>();\n    for (List<WeightedFragInfo> weightedFragInfos : fieldNameToFragInfos.values()) {\n      result.addAll(weightedFragInfos);\n    }\n    Collections.sort(result, new Comparator<WeightedFragInfo>() {\n\n      @Override\n      public int compare(FieldFragList.WeightedFragInfo info1, FieldFragList.WeightedFragInfo info2) {\n        return info1.getStartOffset() - info2.getStartOffset();\n      }\n\n    });\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#discreteMultiValueHighlighting(List[WeightedFragInfo],Field[]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#discreteMultiValueHighlighting(List[WeightedFragInfo],Field[]).mjava","sourceNew":"  protected List<WeightedFragInfo> discreteMultiValueHighlighting(List<WeightedFragInfo> fragInfos, Field[] fields) {\n    Map<String, List<WeightedFragInfo>> fieldNameToFragInfos = new HashMap<>();\n    for (Field field : fields) {\n      fieldNameToFragInfos.put(field.name(), new ArrayList<WeightedFragInfo>());\n    }\n\n    fragInfos: for (WeightedFragInfo fragInfo : fragInfos) {\n      int fieldStart;\n      int fieldEnd = 0;\n      for (Field field : fields) {\n        if (field.stringValue().isEmpty()) {\n          fieldEnd++;\n          continue;\n        }\n        fieldStart = fieldEnd;\n        fieldEnd += field.stringValue().length() + 1; // + 1 for going to next field with same name.\n\n        if (fragInfo.getStartOffset() >= fieldStart && fragInfo.getEndOffset() >= fieldStart &&\n            fragInfo.getStartOffset() <= fieldEnd && fragInfo.getEndOffset() <= fieldEnd) {\n          fieldNameToFragInfos.get(field.name()).add(fragInfo);\n          continue fragInfos;\n        }\n\n        if (fragInfo.getSubInfos().isEmpty()) {\n          continue fragInfos;\n        }\n\n        Toffs firstToffs = fragInfo.getSubInfos().get(0).getTermsOffsets().get(0);\n        if (fragInfo.getStartOffset() >= fieldEnd || firstToffs.getStartOffset() >= fieldEnd) {\n          continue;\n        }\n\n        int fragStart = fieldStart;\n        if (fragInfo.getStartOffset() > fieldStart && fragInfo.getStartOffset() < fieldEnd) {\n          fragStart = fragInfo.getStartOffset();\n        }\n\n        int fragEnd = fieldEnd;\n        if (fragInfo.getEndOffset() > fieldStart && fragInfo.getEndOffset() < fieldEnd) {\n          fragEnd = fragInfo.getEndOffset();\n        }\n\n\n        List<SubInfo> subInfos = new ArrayList<>();\n        Iterator<SubInfo> subInfoIterator = fragInfo.getSubInfos().iterator();\n        float boost = 0.0f;  //  The boost of the new info will be the sum of the boosts of its SubInfos\n        while (subInfoIterator.hasNext()) {\n          SubInfo subInfo = subInfoIterator.next();\n          List<Toffs> toffsList = new ArrayList<>();\n          Iterator<Toffs> toffsIterator = subInfo.getTermsOffsets().iterator();\n          while (toffsIterator.hasNext()) {\n            Toffs toffs = toffsIterator.next();\n            if (toffs.getStartOffset() >= fieldStart && toffs.getEndOffset() <= fieldEnd) {\n\n              toffsList.add(toffs);\n              toffsIterator.remove();\n            }\n          }\n          if (!toffsList.isEmpty()) {\n            subInfos.add(new SubInfo(subInfo.getText(), toffsList, subInfo.getSeqnum(), subInfo.getBoost()));\n            boost += subInfo.getBoost();\n          }\n\n          if (subInfo.getTermsOffsets().isEmpty()) {\n            subInfoIterator.remove();\n          }\n        }\n        WeightedFragInfo weightedFragInfo = new WeightedFragInfo(fragStart, fragEnd, subInfos, boost);\n        fieldNameToFragInfos.get(field.name()).add(weightedFragInfo);\n      }\n    }\n\n    List<WeightedFragInfo> result = new ArrayList<>();\n    for (List<WeightedFragInfo> weightedFragInfos : fieldNameToFragInfos.values()) {\n      result.addAll(weightedFragInfos);\n    }\n    Collections.sort(result, new Comparator<WeightedFragInfo>() {\n\n      @Override\n      public int compare(FieldFragList.WeightedFragInfo info1, FieldFragList.WeightedFragInfo info2) {\n        return info1.getStartOffset() - info2.getStartOffset();\n      }\n\n    });\n\n    return result;\n  }\n\n","sourceOld":"  protected List<WeightedFragInfo> discreteMultiValueHighlighting(List<WeightedFragInfo> fragInfos, Field[] fields) {\n    Map<String, List<WeightedFragInfo>> fieldNameToFragInfos = new HashMap<String, List<WeightedFragInfo>>();\n    for (Field field : fields) {\n      fieldNameToFragInfos.put(field.name(), new ArrayList<WeightedFragInfo>());\n    }\n\n    fragInfos: for (WeightedFragInfo fragInfo : fragInfos) {\n      int fieldStart;\n      int fieldEnd = 0;\n      for (Field field : fields) {\n        if (field.stringValue().isEmpty()) {\n          fieldEnd++;\n          continue;\n        }\n        fieldStart = fieldEnd;\n        fieldEnd += field.stringValue().length() + 1; // + 1 for going to next field with same name.\n\n        if (fragInfo.getStartOffset() >= fieldStart && fragInfo.getEndOffset() >= fieldStart &&\n            fragInfo.getStartOffset() <= fieldEnd && fragInfo.getEndOffset() <= fieldEnd) {\n          fieldNameToFragInfos.get(field.name()).add(fragInfo);\n          continue fragInfos;\n        }\n\n        if (fragInfo.getSubInfos().isEmpty()) {\n          continue fragInfos;\n        }\n\n        Toffs firstToffs = fragInfo.getSubInfos().get(0).getTermsOffsets().get(0);\n        if (fragInfo.getStartOffset() >= fieldEnd || firstToffs.getStartOffset() >= fieldEnd) {\n          continue;\n        }\n\n        int fragStart = fieldStart;\n        if (fragInfo.getStartOffset() > fieldStart && fragInfo.getStartOffset() < fieldEnd) {\n          fragStart = fragInfo.getStartOffset();\n        }\n\n        int fragEnd = fieldEnd;\n        if (fragInfo.getEndOffset() > fieldStart && fragInfo.getEndOffset() < fieldEnd) {\n          fragEnd = fragInfo.getEndOffset();\n        }\n\n\n        List<SubInfo> subInfos = new ArrayList<SubInfo>();\n        Iterator<SubInfo> subInfoIterator = fragInfo.getSubInfos().iterator();\n        float boost = 0.0f;  //  The boost of the new info will be the sum of the boosts of its SubInfos\n        while (subInfoIterator.hasNext()) {\n          SubInfo subInfo = subInfoIterator.next();\n          List<Toffs> toffsList = new ArrayList<Toffs>();\n          Iterator<Toffs> toffsIterator = subInfo.getTermsOffsets().iterator();\n          while (toffsIterator.hasNext()) {\n            Toffs toffs = toffsIterator.next();\n            if (toffs.getStartOffset() >= fieldStart && toffs.getEndOffset() <= fieldEnd) {\n\n              toffsList.add(toffs);\n              toffsIterator.remove();\n            }\n          }\n          if (!toffsList.isEmpty()) {\n            subInfos.add(new SubInfo(subInfo.getText(), toffsList, subInfo.getSeqnum(), subInfo.getBoost()));\n            boost += subInfo.getBoost();\n          }\n\n          if (subInfo.getTermsOffsets().isEmpty()) {\n            subInfoIterator.remove();\n          }\n        }\n        WeightedFragInfo weightedFragInfo = new WeightedFragInfo(fragStart, fragEnd, subInfos, boost);\n        fieldNameToFragInfos.get(field.name()).add(weightedFragInfo);\n      }\n    }\n\n    List<WeightedFragInfo> result = new ArrayList<WeightedFragInfo>();\n    for (List<WeightedFragInfo> weightedFragInfos : fieldNameToFragInfos.values()) {\n      result.addAll(weightedFragInfos);\n    }\n    Collections.sort(result, new Comparator<WeightedFragInfo>() {\n\n      @Override\n      public int compare(FieldFragList.WeightedFragInfo info1, FieldFragList.WeightedFragInfo info2) {\n        return info1.getStartOffset() - info2.getStartOffset();\n      }\n\n    });\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"39700f0117ce4ef15f96e8069885d58983707139","date":1438115041,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#discreteMultiValueHighlighting(List[WeightedFragInfo],Field[]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#discreteMultiValueHighlighting(List[WeightedFragInfo],Field[]).mjava","sourceNew":"  protected List<WeightedFragInfo> discreteMultiValueHighlighting(List<WeightedFragInfo> fragInfos, Field[] fields) {\n    Map<String, List<WeightedFragInfo>> fieldNameToFragInfos = new HashMap<>();\n    for (Field field : fields) {\n      fieldNameToFragInfos.put(field.name(), new ArrayList<WeightedFragInfo>());\n    }\n\n    fragInfos: for (WeightedFragInfo fragInfo : fragInfos) {\n      int fieldStart;\n      int fieldEnd = 0;\n      for (Field field : fields) {\n        if (field.stringValue().isEmpty()) {\n          fieldEnd++;\n          continue;\n        }\n        fieldStart = fieldEnd;\n        fieldEnd += field.stringValue().length() + 1; // + 1 for going to next field with same name.\n\n        if (fragInfo.getStartOffset() >= fieldStart && fragInfo.getEndOffset() >= fieldStart &&\n            fragInfo.getStartOffset() <= fieldEnd && fragInfo.getEndOffset() <= fieldEnd) {\n          fieldNameToFragInfos.get(field.name()).add(fragInfo);\n          continue fragInfos;\n        }\n\n        if (fragInfo.getSubInfos().isEmpty()) {\n          continue fragInfos;\n        }\n\n        Toffs firstToffs = fragInfo.getSubInfos().get(0).getTermsOffsets().get(0);\n        if (fragInfo.getStartOffset() >= fieldEnd || firstToffs.getStartOffset() >= fieldEnd) {\n          continue;\n        }\n\n        int fragStart = fieldStart;\n        if (fragInfo.getStartOffset() > fieldStart && fragInfo.getStartOffset() < fieldEnd) {\n          fragStart = fragInfo.getStartOffset();\n        }\n\n        int fragEnd = fieldEnd;\n        if (fragInfo.getEndOffset() > fieldStart && fragInfo.getEndOffset() < fieldEnd) {\n          fragEnd = fragInfo.getEndOffset();\n        }\n\n\n        List<SubInfo> subInfos = new ArrayList<>();\n        Iterator<SubInfo> subInfoIterator = fragInfo.getSubInfos().iterator();\n        float boost = 0.0f;  //  The boost of the new info will be the sum of the boosts of its SubInfos\n        while (subInfoIterator.hasNext()) {\n          SubInfo subInfo = subInfoIterator.next();\n          List<Toffs> toffsList = new ArrayList<>();\n          Iterator<Toffs> toffsIterator = subInfo.getTermsOffsets().iterator();\n          while (toffsIterator.hasNext()) {\n            Toffs toffs = toffsIterator.next();\n            if (toffs.getStartOffset() >= fieldEnd) {\n              // We've gone past this value so its not worth iterating any more.\n              break;\n            }\n            boolean startsAfterField = toffs.getStartOffset() >= fieldStart;\n            boolean endsBeforeField = toffs.getEndOffset() < fieldEnd;\n            if (startsAfterField && endsBeforeField) {\n              // The Toff is entirely within this value.\n              toffsList.add(toffs);\n              toffsIterator.remove();\n            } else if (startsAfterField) {\n              /*\n               * The Toffs starts within this value but ends after this value\n               * so we clamp the returned Toffs to this value and leave the\n               * Toffs in the iterator for the next value of this field.\n               */\n              toffsList.add(new Toffs(toffs.getStartOffset(), fieldEnd - 1));\n            } else if (endsBeforeField) {\n              /*\n               * The Toffs starts before this value but ends in this value\n               * which means we're really continuing from where we left off\n               * above. Since we use the remainder of the offset we can remove\n               * it from the iterator.\n               */\n              toffsList.add(new Toffs(fieldStart, toffs.getEndOffset()));\n              toffsIterator.remove();\n            } else {\n              /*\n               * The Toffs spans the whole value so we clamp on both sides.\n               * This is basically a combination of both arms of the loop\n               * above.\n               */\n              toffsList.add(new Toffs(fieldStart, fieldEnd - 1));\n            }\n          }\n          if (!toffsList.isEmpty()) {\n            subInfos.add(new SubInfo(subInfo.getText(), toffsList, subInfo.getSeqnum(), subInfo.getBoost()));\n            boost += subInfo.getBoost();\n          }\n\n          if (subInfo.getTermsOffsets().isEmpty()) {\n            subInfoIterator.remove();\n          }\n        }\n        WeightedFragInfo weightedFragInfo = new WeightedFragInfo(fragStart, fragEnd, subInfos, boost);\n        fieldNameToFragInfos.get(field.name()).add(weightedFragInfo);\n      }\n    }\n\n    List<WeightedFragInfo> result = new ArrayList<>();\n    for (List<WeightedFragInfo> weightedFragInfos : fieldNameToFragInfos.values()) {\n      result.addAll(weightedFragInfos);\n    }\n    Collections.sort(result, new Comparator<WeightedFragInfo>() {\n\n      @Override\n      public int compare(FieldFragList.WeightedFragInfo info1, FieldFragList.WeightedFragInfo info2) {\n        return info1.getStartOffset() - info2.getStartOffset();\n      }\n\n    });\n\n    return result;\n  }\n\n","sourceOld":"  protected List<WeightedFragInfo> discreteMultiValueHighlighting(List<WeightedFragInfo> fragInfos, Field[] fields) {\n    Map<String, List<WeightedFragInfo>> fieldNameToFragInfos = new HashMap<>();\n    for (Field field : fields) {\n      fieldNameToFragInfos.put(field.name(), new ArrayList<WeightedFragInfo>());\n    }\n\n    fragInfos: for (WeightedFragInfo fragInfo : fragInfos) {\n      int fieldStart;\n      int fieldEnd = 0;\n      for (Field field : fields) {\n        if (field.stringValue().isEmpty()) {\n          fieldEnd++;\n          continue;\n        }\n        fieldStart = fieldEnd;\n        fieldEnd += field.stringValue().length() + 1; // + 1 for going to next field with same name.\n\n        if (fragInfo.getStartOffset() >= fieldStart && fragInfo.getEndOffset() >= fieldStart &&\n            fragInfo.getStartOffset() <= fieldEnd && fragInfo.getEndOffset() <= fieldEnd) {\n          fieldNameToFragInfos.get(field.name()).add(fragInfo);\n          continue fragInfos;\n        }\n\n        if (fragInfo.getSubInfos().isEmpty()) {\n          continue fragInfos;\n        }\n\n        Toffs firstToffs = fragInfo.getSubInfos().get(0).getTermsOffsets().get(0);\n        if (fragInfo.getStartOffset() >= fieldEnd || firstToffs.getStartOffset() >= fieldEnd) {\n          continue;\n        }\n\n        int fragStart = fieldStart;\n        if (fragInfo.getStartOffset() > fieldStart && fragInfo.getStartOffset() < fieldEnd) {\n          fragStart = fragInfo.getStartOffset();\n        }\n\n        int fragEnd = fieldEnd;\n        if (fragInfo.getEndOffset() > fieldStart && fragInfo.getEndOffset() < fieldEnd) {\n          fragEnd = fragInfo.getEndOffset();\n        }\n\n\n        List<SubInfo> subInfos = new ArrayList<>();\n        Iterator<SubInfo> subInfoIterator = fragInfo.getSubInfos().iterator();\n        float boost = 0.0f;  //  The boost of the new info will be the sum of the boosts of its SubInfos\n        while (subInfoIterator.hasNext()) {\n          SubInfo subInfo = subInfoIterator.next();\n          List<Toffs> toffsList = new ArrayList<>();\n          Iterator<Toffs> toffsIterator = subInfo.getTermsOffsets().iterator();\n          while (toffsIterator.hasNext()) {\n            Toffs toffs = toffsIterator.next();\n            if (toffs.getStartOffset() >= fieldStart && toffs.getEndOffset() <= fieldEnd) {\n\n              toffsList.add(toffs);\n              toffsIterator.remove();\n            }\n          }\n          if (!toffsList.isEmpty()) {\n            subInfos.add(new SubInfo(subInfo.getText(), toffsList, subInfo.getSeqnum(), subInfo.getBoost()));\n            boost += subInfo.getBoost();\n          }\n\n          if (subInfo.getTermsOffsets().isEmpty()) {\n            subInfoIterator.remove();\n          }\n        }\n        WeightedFragInfo weightedFragInfo = new WeightedFragInfo(fragStart, fragEnd, subInfos, boost);\n        fieldNameToFragInfos.get(field.name()).add(weightedFragInfo);\n      }\n    }\n\n    List<WeightedFragInfo> result = new ArrayList<>();\n    for (List<WeightedFragInfo> weightedFragInfos : fieldNameToFragInfos.values()) {\n      result.addAll(weightedFragInfos);\n    }\n    Collections.sort(result, new Comparator<WeightedFragInfo>() {\n\n      @Override\n      public int compare(FieldFragList.WeightedFragInfo info1, FieldFragList.WeightedFragInfo info2) {\n        return info1.getStartOffset() - info2.getStartOffset();\n      }\n\n    });\n\n    return result;\n  }\n\n","bugFix":["3f678348ac6e145f874f56992e8c0f78a1ff3c46","73187ff81dbd931417f46f53360c5dcf390ebde2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["73187ff81dbd931417f46f53360c5dcf390ebde2","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3f678348ac6e145f874f56992e8c0f78a1ff3c46"],"3f678348ac6e145f874f56992e8c0f78a1ff3c46":["7530de27b87b961b51f01bd1299b7004d46e8823"],"73187ff81dbd931417f46f53360c5dcf390ebde2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73187ff81dbd931417f46f53360c5dcf390ebde2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73187ff81dbd931417f46f53360c5dcf390ebde2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["7530de27b87b961b51f01bd1299b7004d46e8823","3f678348ac6e145f874f56992e8c0f78a1ff3c46"],"7530de27b87b961b51f01bd1299b7004d46e8823":["73187ff81dbd931417f46f53360c5dcf390ebde2"],"39700f0117ce4ef15f96e8069885d58983707139":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["39700f0117ce4ef15f96e8069885d58983707139"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["39700f0117ce4ef15f96e8069885d58983707139"],"3f678348ac6e145f874f56992e8c0f78a1ff3c46":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"73187ff81dbd931417f46f53360c5dcf390ebde2":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","7530de27b87b961b51f01bd1299b7004d46e8823"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73187ff81dbd931417f46f53360c5dcf390ebde2","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3f678348ac6e145f874f56992e8c0f78a1ff3c46","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"39700f0117ce4ef15f96e8069885d58983707139":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}