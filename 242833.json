{"path":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, IndexFileNames.VECTORS_INDEX_EXTENSION);\n      if (d.fileExists(idxName)) {\n        tvx = d.openInput(idxName, readBufferSize);\n        format = checkValidFormat(tvx);\n        tvd = d.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.VECTORS_DOCUMENTS_EXTENSION), readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd);\n        tvf = d.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.VECTORS_FIELDS_EXTENSION), readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        if (format >= FORMAT_VERSION2) {\n          assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n          numTotalDocs = (int) (tvx.length() >> 4);\n        } else {\n          assert (tvx.length()-FORMAT_SIZE) % 8 == 0;\n          numTotalDocs = (int) (tvx.length() >> 3);\n        }\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else\n        format = 0;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, IndexFileNames.VECTORS_INDEX_EXTENSION);\n      if (d.fileExists(idxName)) {\n        tvx = d.openInput(idxName, readBufferSize);\n        format = checkValidFormat(tvx);\n        tvd = d.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.VECTORS_DOCUMENTS_EXTENSION), readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd);\n        tvf = d.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.VECTORS_FIELDS_EXTENSION), readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        if (format >= FORMAT_VERSION2) {\n          assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n          numTotalDocs = (int) (tvx.length() >> 4);\n        } else {\n          assert (tvx.length()-FORMAT_SIZE) % 8 == 0;\n          numTotalDocs = (int) (tvx.length() >> 3);\n        }\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else\n        format = 0;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      if (d.fileExists(idxName)) {\n        tvx = d.openInput(idxName, readBufferSize);\n        format = checkValidFormat(tvx);\n        tvd = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION), readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd);\n        tvf = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION), readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        if (format >= FORMAT_VERSION2) {\n          assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n          numTotalDocs = (int) (tvx.length() >> 4);\n        } else {\n          assert (tvx.length()-FORMAT_SIZE) % 8 == 0;\n          numTotalDocs = (int) (tvx.length() >> 3);\n        }\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else\n        format = 0;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, IndexFileNames.VECTORS_INDEX_EXTENSION);\n      if (d.fileExists(idxName)) {\n        tvx = d.openInput(idxName, readBufferSize);\n        format = checkValidFormat(tvx);\n        tvd = d.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.VECTORS_DOCUMENTS_EXTENSION), readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd);\n        tvf = d.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.VECTORS_FIELDS_EXTENSION), readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        if (format >= FORMAT_VERSION2) {\n          assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n          numTotalDocs = (int) (tvx.length() >> 4);\n        } else {\n          assert (tvx.length()-FORMAT_SIZE) % 8 == 0;\n          numTotalDocs = (int) (tvx.length() >> 3);\n        }\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else\n        format = 0;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      if (d.fileExists(idxName)) {\n        tvx = d.openInput(idxName, readBufferSize);\n        format = checkValidFormat(tvx);\n        tvd = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION), readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd);\n        tvf = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION), readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n        numTotalDocs = (int) (tvx.length() >> 4);\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else\n        format = 0;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      if (d.fileExists(idxName)) {\n        tvx = d.openInput(idxName, readBufferSize);\n        format = checkValidFormat(tvx);\n        tvd = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION), readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd);\n        tvf = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION), readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        if (format >= FORMAT_VERSION2) {\n          assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n          numTotalDocs = (int) (tvx.length() >> 4);\n        } else {\n          assert (tvx.length()-FORMAT_SIZE) % 8 == 0;\n          numTotalDocs = (int) (tvx.length() >> 3);\n        }\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else\n        format = 0;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cd8367c3d48e4b63dee1895a261d4986c716bbb","date":1279637747,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      if (d.fileExists(idxName)) {\n        tvx = d.openInput(idxName, readBufferSize);\n        format = checkValidFormat(tvx, idxName);\n        String fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION);\n        tvd = d.openInput(fn, readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd, fn);\n        fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION);\n        tvf = d.openInput(fn, readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf, fn);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n        numTotalDocs = (int) (tvx.length() >> 4);\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else\n        format = 0;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      if (d.fileExists(idxName)) {\n        tvx = d.openInput(idxName, readBufferSize);\n        format = checkValidFormat(tvx);\n        tvd = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION), readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd);\n        tvf = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION), readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n        numTotalDocs = (int) (tvx.length() >> 4);\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else\n        format = 0;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      if (d.fileExists(idxName)) {\n        tvx = d.openInput(idxName, readBufferSize);\n        format = checkValidFormat(tvx, idxName);\n        String fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION);\n        tvd = d.openInput(fn, readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd, fn);\n        fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION);\n        tvf = d.openInput(fn, readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf, fn);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n        numTotalDocs = (int) (tvx.length() >> 4);\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else\n        format = 0;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      if (d.fileExists(idxName)) {\n        tvx = d.openInput(idxName, readBufferSize);\n        format = checkValidFormat(tvx);\n        tvd = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION), readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd);\n        tvf = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION), readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n        numTotalDocs = (int) (tvx.length() >> 4);\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else\n        format = 0;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5972dc9caad764a4e6e2e25f3e1a8de2489a8487","date":1280787041,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      if (d.fileExists(idxName)) {\n        tvx = d.openInput(idxName, readBufferSize);\n        format = checkValidFormat(tvx, idxName);\n        String fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION);\n        tvd = d.openInput(fn, readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd, fn);\n        fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION);\n        tvf = d.openInput(fn, readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf, fn);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n        numTotalDocs = (int) (tvx.length() >> 4);\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else {\n        // TODO: understand why FieldInfos.hasVectors() can\n        // return true yet the term vectors files don't\n        // exist...\n        format = 0;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      if (d.fileExists(idxName)) {\n        tvx = d.openInput(idxName, readBufferSize);\n        format = checkValidFormat(tvx, idxName);\n        String fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION);\n        tvd = d.openInput(fn, readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd, fn);\n        fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION);\n        tvf = d.openInput(fn, readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf, fn);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n        numTotalDocs = (int) (tvx.length() >> 4);\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else\n        format = 0;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["bafd5d8871af22a215defb79410396c64a671126"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6395eaae7ec8e80087f6325dce5ed5f4b095ca42","date":1290335319,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      if (d.fileExists(idxName)) {\n        tvx = d.openInput(idxName, readBufferSize);\n        format = checkValidFormat(tvx, idxName);\n        String fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION);\n        tvd = d.openInput(fn, readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd, fn);\n        fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION);\n        tvf = d.openInput(fn, readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf, fn);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        numTotalDocs = (int) (tvx.length() >> 4);\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else {\n        // TODO: understand why FieldInfos.hasVectors() can\n        // return true yet the term vectors files don't\n        // exist...\n        format = 0;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      if (d.fileExists(idxName)) {\n        tvx = d.openInput(idxName, readBufferSize);\n        format = checkValidFormat(tvx, idxName);\n        String fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION);\n        tvd = d.openInput(fn, readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd, fn);\n        fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION);\n        tvf = d.openInput(fn, readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf, fn);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n        numTotalDocs = (int) (tvx.length() >> 4);\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else {\n        // TODO: understand why FieldInfos.hasVectors() can\n        // return true yet the term vectors files don't\n        // exist...\n        format = 0;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafd5d8871af22a215defb79410396c64a671126","date":1290770742,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      if (d.fileExists(idxName)) {\n        tvx = d.openInput(idxName, readBufferSize);\n        format = checkValidFormat(tvx, idxName);\n        String fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION);\n        tvd = d.openInput(fn, readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd, fn);\n        fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION);\n        tvf = d.openInput(fn, readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf, fn);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        numTotalDocs = (int) (tvx.length() >> 4);\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else {\n        // If all documents flushed in a segment had hit\n        // non-aborting exceptions, it's possible that\n        // FieldInfos.hasVectors returns true yet the term\n        // vector files don't exist.\n        format = 0;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      if (d.fileExists(idxName)) {\n        tvx = d.openInput(idxName, readBufferSize);\n        format = checkValidFormat(tvx, idxName);\n        String fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION);\n        tvd = d.openInput(fn, readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd, fn);\n        fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION);\n        tvf = d.openInput(fn, readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf, fn);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        numTotalDocs = (int) (tvx.length() >> 4);\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else {\n        // TODO: understand why FieldInfos.hasVectors() can\n        // return true yet the term vectors files don't\n        // exist...\n        format = 0;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":["5972dc9caad764a4e6e2e25f3e1a8de2489a8487"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      if (d.fileExists(idxName)) {\n        tvx = d.openInput(idxName, readBufferSize);\n        format = checkValidFormat(tvx, idxName);\n        String fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION);\n        tvd = d.openInput(fn, readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd, fn);\n        fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION);\n        tvf = d.openInput(fn, readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf, fn);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        numTotalDocs = (int) (tvx.length() >> 4);\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else {\n        // If all documents flushed in a segment had hit\n        // non-aborting exceptions, it's possible that\n        // FieldInfos.hasVectors returns true yet the term\n        // vector files don't exist.\n        format = 0;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      if (d.fileExists(idxName)) {\n        tvx = d.openInput(idxName, readBufferSize);\n        format = checkValidFormat(tvx, idxName);\n        String fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION);\n        tvd = d.openInput(fn, readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd, fn);\n        fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION);\n        tvf = d.openInput(fn, readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf, fn);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n        numTotalDocs = (int) (tvx.length() >> 4);\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else {\n        // TODO: understand why FieldInfos.hasVectors() can\n        // return true yet the term vectors files don't\n        // exist...\n        format = 0;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e1cbd7e289dc1243c7a59e1a83d078163a147fe","date":1292268032,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, readBufferSize);\n      format = checkValidFormat(tvx, idxName);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, readBufferSize);\n      final int tvdFormat = checkValidFormat(tvd, fn);\n      fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, readBufferSize);\n      final int tvfFormat = checkValidFormat(tvf, fn);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      if (d.fileExists(idxName)) {\n        tvx = d.openInput(idxName, readBufferSize);\n        format = checkValidFormat(tvx, idxName);\n        String fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION);\n        tvd = d.openInput(fn, readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd, fn);\n        fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION);\n        tvf = d.openInput(fn, readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf, fn);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        numTotalDocs = (int) (tvx.length() >> 4);\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else {\n        // If all documents flushed in a segment had hit\n        // non-aborting exceptions, it's possible that\n        // FieldInfos.hasVectors returns true yet the term\n        // vector files don't exist.\n        format = 0;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, readBufferSize);\n      format = checkValidFormat(tvx, idxName);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, readBufferSize);\n      final int tvdFormat = checkValidFormat(tvd, fn);\n      fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, readBufferSize);\n      final int tvfFormat = checkValidFormat(tvf, fn);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      if (d.fileExists(idxName)) {\n        tvx = d.openInput(idxName, readBufferSize);\n        format = checkValidFormat(tvx, idxName);\n        String fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION);\n        tvd = d.openInput(fn, readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd, fn);\n        fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION);\n        tvf = d.openInput(fn, readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf, fn);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        numTotalDocs = (int) (tvx.length() >> 4);\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else {\n        // If all documents flushed in a segment had hit\n        // non-aborting exceptions, it's possible that\n        // FieldInfos.hasVectors returns true yet the term\n        // vector files don't exist.\n        format = 0;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, readBufferSize);\n      format = checkValidFormat(tvx, idxName);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, readBufferSize);\n      final int tvdFormat = checkValidFormat(tvd, fn);\n      fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, readBufferSize);\n      final int tvfFormat = checkValidFormat(tvf, fn);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      if (d.fileExists(idxName)) {\n        tvx = d.openInput(idxName, readBufferSize);\n        format = checkValidFormat(tvx, idxName);\n        String fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION);\n        tvd = d.openInput(fn, readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd, fn);\n        fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION);\n        tvf = d.openInput(fn, readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf, fn);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n        numTotalDocs = (int) (tvx.length() >> 4);\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else\n        format = 0;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,IOContext,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, IOContext context, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx, idxName);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd, fn);\n      fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf, fn);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, readBufferSize);\n      format = checkValidFormat(tvx, idxName);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, readBufferSize);\n      final int tvdFormat = checkValidFormat(tvd, fn);\n      fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, readBufferSize);\n      final int tvfFormat = checkValidFormat(tvf, fn);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,IOContext,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, IOContext context, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx, idxName);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd, fn);\n      fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf, fn);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, readBufferSize);\n      format = checkValidFormat(tvx, idxName);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, readBufferSize);\n      final int tvdFormat = checkValidFormat(tvd, fn);\n      fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, readBufferSize);\n      final int tvfFormat = checkValidFormat(tvf, fn);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,IOContext,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, IOContext context, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx, idxName);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd, fn);\n      fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf, fn);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, readBufferSize);\n      format = checkValidFormat(tvx, idxName);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, readBufferSize);\n      final int tvdFormat = checkValidFormat(tvd, fn);\n      fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, readBufferSize);\n      final int tvfFormat = checkValidFormat(tvf, fn);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bafd5d8871af22a215defb79410396c64a671126":["6395eaae7ec8e80087f6325dce5ed5f4b095ca42"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["7e1cbd7e289dc1243c7a59e1a83d078163a147fe"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["3bb13258feba31ab676502787ab2e1779f129b7a","7e1cbd7e289dc1243c7a59e1a83d078163a147fe"],"0cd8367c3d48e4b63dee1895a261d4986c716bbb":["6267e1ce56c2eec111425690cd04e251b6f14952"],"5f4e87790277826a2aea119328600dfb07761f32":["6267e1ce56c2eec111425690cd04e251b6f14952","0cd8367c3d48e4b63dee1895a261d4986c716bbb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","7e1cbd7e289dc1243c7a59e1a83d078163a147fe"],"6395eaae7ec8e80087f6325dce5ed5f4b095ca42":["5972dc9caad764a4e6e2e25f3e1a8de2489a8487"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6267e1ce56c2eec111425690cd04e251b6f14952":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["7e1cbd7e289dc1243c7a59e1a83d078163a147fe","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5972dc9caad764a4e6e2e25f3e1a8de2489a8487":["0cd8367c3d48e4b63dee1895a261d4986c716bbb"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["7e1cbd7e289dc1243c7a59e1a83d078163a147fe","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"7e1cbd7e289dc1243c7a59e1a83d078163a147fe":["bafd5d8871af22a215defb79410396c64a671126"],"3bb13258feba31ab676502787ab2e1779f129b7a":["5972dc9caad764a4e6e2e25f3e1a8de2489a8487","bafd5d8871af22a215defb79410396c64a671126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"bafd5d8871af22a215defb79410396c64a671126":["7e1cbd7e289dc1243c7a59e1a83d078163a147fe","3bb13258feba31ab676502787ab2e1779f129b7a"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"0cd8367c3d48e4b63dee1895a261d4986c716bbb":["5f4e87790277826a2aea119328600dfb07761f32","5972dc9caad764a4e6e2e25f3e1a8de2489a8487"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"6395eaae7ec8e80087f6325dce5ed5f4b095ca42":["bafd5d8871af22a215defb79410396c64a671126"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["6267e1ce56c2eec111425690cd04e251b6f14952"],"6267e1ce56c2eec111425690cd04e251b6f14952":["0cd8367c3d48e4b63dee1895a261d4986c716bbb","5f4e87790277826a2aea119328600dfb07761f32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"5972dc9caad764a4e6e2e25f3e1a8de2489a8487":["6395eaae7ec8e80087f6325dce5ed5f4b095ca42","3bb13258feba31ab676502787ab2e1779f129b7a"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7e1cbd7e289dc1243c7a59e1a83d078163a147fe":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"3bb13258feba31ab676502787ab2e1779f129b7a":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}