{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.ByteSequencesWriter#write(byte[],int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.ByteSequencesWriter#write(byte[],int,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.ByteSequencesWriter#write(byte[],int,int).mjava","sourceNew":"    public void write(byte [] bytes, int off, int len) throws IOException {\n      assert bytes != null;\n      assert off >= 0 && off + len <= bytes.length;\n      assert len >= 0;\n      os.writeShort(len);\n      os.write(bytes, off, len);\n    }        \n\n","sourceOld":"    public void write(byte [] bytes, int off, int len) throws IOException {\n      assert bytes != null;\n      assert off >= 0 && off + len <= bytes.length;\n      assert len >= 0;\n      os.writeShort(len);\n      os.write(bytes, off, len);\n    }        \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d36385b9911b2a5be7b1920f55c058f801417ee4","date":1348192394,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.ByteSequencesWriter#write(byte[],int,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.ByteSequencesWriter#write(byte[],int,int).mjava","sourceNew":"    /**\n     * Writes a byte array.\n     * <p>\n     * The length is written as a <code>short</code>, followed\n     * by the bytes.\n     */\n    public void write(byte [] bytes, int off, int len) throws IOException {\n      assert bytes != null;\n      assert off >= 0 && off + len <= bytes.length;\n      assert len >= 0;\n      os.writeShort(len);\n      os.write(bytes, off, len);\n    }        \n\n","sourceOld":"    public void write(byte [] bytes, int off, int len) throws IOException {\n      assert bytes != null;\n      assert off >= 0 && off + len <= bytes.length;\n      assert len >= 0;\n      os.writeShort(len);\n      os.write(bytes, off, len);\n    }        \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"847d1294c8ff2f0172af20892ef98a1c6a952e09","date":1359503775,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort.ByteSequencesWriter#write(byte[],int,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.ByteSequencesWriter#write(byte[],int,int).mjava","sourceNew":"    /**\n     * Writes a byte array.\n     * <p>\n     * The length is written as a <code>short</code>, followed\n     * by the bytes.\n     */\n    public void write(byte [] bytes, int off, int len) throws IOException {\n      assert bytes != null;\n      assert off >= 0 && off + len <= bytes.length;\n      assert len >= 0;\n      os.writeShort(len);\n      os.write(bytes, off, len);\n    }        \n\n","sourceOld":"    /**\n     * Writes a byte array.\n     * <p>\n     * The length is written as a <code>short</code>, followed\n     * by the bytes.\n     */\n    public void write(byte [] bytes, int off, int len) throws IOException {\n      assert bytes != null;\n      assert off >= 0 && off + len <= bytes.length;\n      assert len >= 0;\n      os.writeShort(len);\n      os.write(bytes, off, len);\n    }        \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort.ByteSequencesWriter#write(byte[],int,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.ByteSequencesWriter#write(byte[],int,int).mjava","sourceNew":"    /**\n     * Writes a byte array.\n     * <p>\n     * The length is written as a <code>short</code>, followed\n     * by the bytes.\n     */\n    public void write(byte [] bytes, int off, int len) throws IOException {\n      assert bytes != null;\n      assert off >= 0 && off + len <= bytes.length;\n      assert len >= 0;\n      os.writeShort(len);\n      os.write(bytes, off, len);\n    }        \n\n","sourceOld":"    /**\n     * Writes a byte array.\n     * <p>\n     * The length is written as a <code>short</code>, followed\n     * by the bytes.\n     */\n    public void write(byte [] bytes, int off, int len) throws IOException {\n      assert bytes != null;\n      assert off >= 0 && off + len <= bytes.length;\n      assert len >= 0;\n      os.writeShort(len);\n      os.write(bytes, off, len);\n    }        \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d36385b9911b2a5be7b1920f55c058f801417ee4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["d36385b9911b2a5be7b1920f55c058f801417ee4","847d1294c8ff2f0172af20892ef98a1c6a952e09"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"847d1294c8ff2f0172af20892ef98a1c6a952e09":["d36385b9911b2a5be7b1920f55c058f801417ee4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d36385b9911b2a5be7b1920f55c058f801417ee4":["d4d69c535930b5cce125cff868d40f6373dc27d4","847d1294c8ff2f0172af20892ef98a1c6a952e09"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d36385b9911b2a5be7b1920f55c058f801417ee4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"847d1294c8ff2f0172af20892ef98a1c6a952e09":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}