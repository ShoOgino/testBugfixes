{"path":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","commits":[{"id":"7fc5a2665a7fa1b9450097ae658193a11ee4d02c","date":1292699695,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"/dev/null","sourceNew":"  private static void threadCleanup(String context) {\n    // we will only actually fail() after all cleanup has happened!\n    boolean shouldFail = false;\n    \n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n        // TODO: turn off our exception handler for these leftover threads... does this work?\n        if (t != Thread.currentThread())\n          t.setUncaughtExceptionHandler(null);\n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() &&\n            // TODO: TimeLimitingCollector starts a thread statically.... WTF?!\n            !t.getName().equals(\"TimeLimitedCollector timer thread\")) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          shouldFail = true;\n          rogueCount++;\n          // try to stop the thread:\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    \n    if (shouldFail && !testsFailed /* don't be loud if the test failed, maybe it didnt join() etc */) {\n      // TODO: we can't fail until we fix contrib and solr\n      //fail(\"test '\" + getName() + \"' left \" + rogueCount + \" thread(s) running\");\n      System.err.println(\"RESOURCE LEAK: \" + context + \" left \" + rogueCount + \" thread(s) running\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"937baa6efeb42f311b60e55631e1e8b006ea8d84","date":1292701426,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","sourceNew":"  private static void threadCleanup(String context) {\n    // we will only actually fail() after all cleanup has happened!\n    boolean shouldFail = false;\n    \n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() &&\n            // TODO: TimeLimitingCollector starts a thread statically.... WTF?!\n            !t.getName().equals(\"TimeLimitedCollector timer thread\")) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          shouldFail = true;\n          rogueCount++;\n          // wait on the thread to die of natural causes\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    \n    if (shouldFail && !testsFailed /* don't be loud if the test failed, maybe it didnt join() etc */) {\n      // TODO: we can't fail until we fix contrib and solr\n      //fail(\"test '\" + getName() + \"' left \" + rogueCount + \" thread(s) running\");\n      System.err.println(\"RESOURCE LEAK: \" + context + \" left \" + rogueCount + \" thread(s) running\");\n    }\n  }\n\n","sourceOld":"  private static void threadCleanup(String context) {\n    // we will only actually fail() after all cleanup has happened!\n    boolean shouldFail = false;\n    \n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n        // TODO: turn off our exception handler for these leftover threads... does this work?\n        if (t != Thread.currentThread())\n          t.setUncaughtExceptionHandler(null);\n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() &&\n            // TODO: TimeLimitingCollector starts a thread statically.... WTF?!\n            !t.getName().equals(\"TimeLimitedCollector timer thread\")) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          shouldFail = true;\n          rogueCount++;\n          // try to stop the thread:\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    \n    if (shouldFail && !testsFailed /* don't be loud if the test failed, maybe it didnt join() etc */) {\n      // TODO: we can't fail until we fix contrib and solr\n      //fail(\"test '\" + getName() + \"' left \" + rogueCount + \" thread(s) running\");\n      System.err.println(\"RESOURCE LEAK: \" + context + \" left \" + rogueCount + \" thread(s) running\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1907ad6eb82f6eecc523cd2943e2842f2b135d6f","date":1292707246,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","sourceNew":"  private static void threadCleanup(String context) {\n    // we will only actually fail() after all cleanup has happened!\n    boolean shouldFail = false;\n    \n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() &&\n            // TODO: TimeLimitingCollector starts a thread statically.... WTF?!\n            !t.getName().equals(\"TimeLimitedCollector timer thread\")) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          shouldFail = true;\n          rogueCount++;\n          // wait on the thread to die of natural causes\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    \n    if (shouldFail && !testsFailed /* don't be loud if the test failed, maybe it didnt join() etc */) {\n      // TODO: we can't fail until we fix contrib and solr\n      //fail(\"test '\" + getName() + \"' left \" + rogueCount + \" thread(s) running\");\n      System.err.println(\"RESOURCE LEAK: \" + context + \" left \" + rogueCount + \" thread(s) running\");\n    }\n  }\n\n","sourceOld":"  private static void threadCleanup(String context) {\n    // we will only actually fail() after all cleanup has happened!\n    boolean shouldFail = false;\n    \n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() &&\n            // TODO: TimeLimitingCollector starts a thread statically.... WTF?!\n            !t.getName().equals(\"TimeLimitedCollector timer thread\")) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          shouldFail = true;\n          rogueCount++;\n          // wait on the thread to die of natural causes\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    \n    if (shouldFail && !testsFailed /* don't be loud if the test failed, maybe it didnt join() etc */) {\n      // TODO: we can't fail until we fix contrib and solr\n      //fail(\"test '\" + getName() + \"' left \" + rogueCount + \" thread(s) running\");\n      System.err.println(\"RESOURCE LEAK: \" + context + \" left \" + rogueCount + \" thread(s) running\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1dccbb7b01a3abbed915804b0d7aa34238b966f","date":1292708876,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","sourceNew":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() &&\n            // TODO: TimeLimitingCollector starts a thread statically.... WTF?!\n            !t.getName().equals(\"TimeLimitedCollector timer thread\")) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          // wait on the thread to die of natural causes\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","sourceOld":"  private static void threadCleanup(String context) {\n    // we will only actually fail() after all cleanup has happened!\n    boolean shouldFail = false;\n    \n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() &&\n            // TODO: TimeLimitingCollector starts a thread statically.... WTF?!\n            !t.getName().equals(\"TimeLimitedCollector timer thread\")) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          shouldFail = true;\n          rogueCount++;\n          // wait on the thread to die of natural causes\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    \n    if (shouldFail && !testsFailed /* don't be loud if the test failed, maybe it didnt join() etc */) {\n      // TODO: we can't fail until we fix contrib and solr\n      //fail(\"test '\" + getName() + \"' left \" + rogueCount + \" thread(s) running\");\n      System.err.println(\"RESOURCE LEAK: \" + context + \" left \" + rogueCount + \" thread(s) running\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() &&\n            // TODO: TimeLimitingCollector starts a thread statically.... WTF?!\n            !t.getName().equals(\"TimeLimitedCollector timer thread\")) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          // wait on the thread to die of natural causes\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n\n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n\n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n\n        if (t.isAlive() &&\n            !rogueThreads.containsKey(t) &&\n            t != Thread.currentThread() &&\n            // TODO: TimeLimitingCollector starts a thread statically.... WTF?!\n            !t.getName().equals(\"TimeLimitedCollector timer thread\")) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          // wait on the thread to die of natural causes\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d1586b76a2b446385e795fbed614a722e4c451c","date":1293457856,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","sourceNew":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread()) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          // wait on the thread to die of natural causes\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","sourceOld":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() &&\n            // TODO: TimeLimitingCollector starts a thread statically.... WTF?!\n            !t.getName().equals(\"TimeLimitedCollector timer thread\")) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          // wait on the thread to die of natural causes\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","sourceNew":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n\n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n\n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n\n        if (t.isAlive() &&\n            !rogueThreads.containsKey(t) &&\n            t != Thread.currentThread()) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          // wait on the thread to die of natural causes\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","sourceOld":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n\n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n\n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n\n        if (t.isAlive() &&\n            !rogueThreads.containsKey(t) &&\n            t != Thread.currentThread() &&\n            // TODO: TimeLimitingCollector starts a thread statically.... WTF?!\n            !t.getName().equals(\"TimeLimitedCollector timer thread\")) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          // wait on the thread to die of natural causes\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","sourceNew":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread()) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          // wait on the thread to die of natural causes\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","sourceOld":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() &&\n            // TODO: TimeLimitingCollector starts a thread statically.... WTF?!\n            !t.getName().equals(\"TimeLimitedCollector timer thread\")) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          // wait on the thread to die of natural causes\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","sourceNew":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() && \n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","sourceOld":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread()) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          // wait on the thread to die of natural causes\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","sourceNew":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() && \n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","sourceOld":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() && \n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread()) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          // wait on the thread to die of natural causes\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","sourceNew":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n\n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n\n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n\n        if (t.isAlive() &&\n            !rogueThreads.containsKey(t) &&\n            t != Thread.currentThread() &&\n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","sourceOld":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n\n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n\n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n\n        if (t.isAlive() &&\n            !rogueThreads.containsKey(t) &&\n            t != Thread.currentThread()) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          // wait on the thread to die of natural causes\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7fc5a2665a7fa1b9450097ae658193a11ee4d02c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"70ad682703b8585f5d0a637efec044d57ec05efb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","2d1586b76a2b446385e795fbed614a722e4c451c"],"937baa6efeb42f311b60e55631e1e8b006ea8d84":["7fc5a2665a7fa1b9450097ae658193a11ee4d02c"],"f1dccbb7b01a3abbed915804b0d7aa34238b966f":["1907ad6eb82f6eecc523cd2943e2842f2b135d6f"],"1907ad6eb82f6eecc523cd2943e2842f2b135d6f":["937baa6efeb42f311b60e55631e1e8b006ea8d84"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f1dccbb7b01a3abbed915804b0d7aa34238b966f"],"2d1586b76a2b446385e795fbed614a722e4c451c":["f1dccbb7b01a3abbed915804b0d7aa34238b966f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f1dccbb7b01a3abbed915804b0d7aa34238b966f"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["2d1586b76a2b446385e795fbed614a722e4c451c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2d1586b76a2b446385e795fbed614a722e4c451c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"]},"commit2Childs":{"7fc5a2665a7fa1b9450097ae658193a11ee4d02c":["937baa6efeb42f311b60e55631e1e8b006ea8d84"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"937baa6efeb42f311b60e55631e1e8b006ea8d84":["1907ad6eb82f6eecc523cd2943e2842f2b135d6f"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["70ad682703b8585f5d0a637efec044d57ec05efb"],"f1dccbb7b01a3abbed915804b0d7aa34238b966f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","2d1586b76a2b446385e795fbed614a722e4c451c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1907ad6eb82f6eecc523cd2943e2842f2b135d6f":["f1dccbb7b01a3abbed915804b0d7aa34238b966f"],"2d1586b76a2b446385e795fbed614a722e4c451c":["70ad682703b8585f5d0a637efec044d57ec05efb","790e1fde4caa765b3faaad3fbcd25c6973450336","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7fc5a2665a7fa1b9450097ae658193a11ee4d02c","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}