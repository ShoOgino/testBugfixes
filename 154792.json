{"path":"lucene/join/src/java/org/apache/lucene/search/join/DocValuesTermsCollector#sortedNumericAsSortedSetDocValues(String,FieldType.LegacyNumericType).mjava","commits":[{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/DocValuesTermsCollector#sortedNumericAsSortedSetDocValues(String,FieldType.LegacyNumericType).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/DocValuesTermsCollector#sortedNumericAsSortedSetDocValues(String,NumericType).mjava","sourceNew":"  /** this adapter is quite weird. ords are per doc index, don't use ords across different docs*/\n  static Function<SortedSetDocValues> sortedNumericAsSortedSetDocValues(String field, FieldType.LegacyNumericType numTyp) {\n    return (ctx) -> {\n      final SortedNumericDocValues numerics = DocValues.getSortedNumeric(ctx, field);\n      final BytesRefBuilder bytes = new BytesRefBuilder();\n      \n      final LongConsumer coder = coder(bytes, numTyp, field);\n      \n      return new SortedSetDocValues() {\n\n        private int index = Integer.MIN_VALUE;\n\n        @Override\n        public long nextOrd() {\n          return index < numerics.count()-1 ? ++index : NO_MORE_ORDS;\n        }\n\n        @Override\n        public void setDocument(int docID) {\n          numerics.setDocument(docID);\n          index=-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(long ord) {\n          assert ord>=0 && ord<numerics.count();\n          final long value = numerics.valueAt((int)ord);\n          coder.accept(value);\n          return bytes.get();\n        }\n\n        @Override\n        public long getValueCount() {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n        \n        @Override\n        public long lookupTerm(BytesRef key) {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n      };\n    };\n  }\n\n","sourceOld":"  /** this adapter is quite weird. ords are per doc index, don't use ords across different docs*/\n  static Function<SortedSetDocValues> sortedNumericAsSortedSetDocValues(String field, NumericType numTyp) {\n    return (ctx) -> {\n      final SortedNumericDocValues numerics = DocValues.getSortedNumeric(ctx, field);\n      final BytesRefBuilder bytes = new BytesRefBuilder();\n      \n      final LongConsumer coder = coder(bytes, numTyp, field);\n      \n      return new SortedSetDocValues() {\n\n        private int index = Integer.MIN_VALUE;\n\n        @Override\n        public long nextOrd() {\n          return index < numerics.count()-1 ? ++index : NO_MORE_ORDS;\n        }\n\n        @Override\n        public void setDocument(int docID) {\n          numerics.setDocument(docID);\n          index=-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(long ord) {\n          assert ord>=0 && ord<numerics.count();\n          final long value = numerics.valueAt((int)ord);\n          coder.accept(value);\n          return bytes.get();\n        }\n\n        @Override\n        public long getValueCount() {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n        \n        @Override\n        public long lookupTerm(BytesRef key) {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n      };\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/DocValuesTermsCollector#sortedNumericAsSortedSetDocValues(String,LegacyNumericType).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/DocValuesTermsCollector#sortedNumericAsSortedSetDocValues(String,FieldType.LegacyNumericType).mjava","sourceNew":"  /** this adapter is quite weird. ords are per doc index, don't use ords across different docs*/\n  static Function<SortedSetDocValues> sortedNumericAsSortedSetDocValues(String field, LegacyNumericType numTyp) {\n    return (ctx) -> {\n      final SortedNumericDocValues numerics = DocValues.getSortedNumeric(ctx, field);\n      final BytesRefBuilder bytes = new BytesRefBuilder();\n      \n      final LongConsumer coder = coder(bytes, numTyp, field);\n      \n      return new SortedSetDocValues() {\n\n        private int index = Integer.MIN_VALUE;\n\n        @Override\n        public long nextOrd() {\n          return index < numerics.count()-1 ? ++index : NO_MORE_ORDS;\n        }\n\n        @Override\n        public void setDocument(int docID) {\n          numerics.setDocument(docID);\n          index=-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(long ord) {\n          assert ord>=0 && ord<numerics.count();\n          final long value = numerics.valueAt((int)ord);\n          coder.accept(value);\n          return bytes.get();\n        }\n\n        @Override\n        public long getValueCount() {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n        \n        @Override\n        public long lookupTerm(BytesRef key) {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n      };\n    };\n  }\n\n","sourceOld":"  /** this adapter is quite weird. ords are per doc index, don't use ords across different docs*/\n  static Function<SortedSetDocValues> sortedNumericAsSortedSetDocValues(String field, FieldType.LegacyNumericType numTyp) {\n    return (ctx) -> {\n      final SortedNumericDocValues numerics = DocValues.getSortedNumeric(ctx, field);\n      final BytesRefBuilder bytes = new BytesRefBuilder();\n      \n      final LongConsumer coder = coder(bytes, numTyp, field);\n      \n      return new SortedSetDocValues() {\n\n        private int index = Integer.MIN_VALUE;\n\n        @Override\n        public long nextOrd() {\n          return index < numerics.count()-1 ? ++index : NO_MORE_ORDS;\n        }\n\n        @Override\n        public void setDocument(int docID) {\n          numerics.setDocument(docID);\n          index=-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(long ord) {\n          assert ord>=0 && ord<numerics.count();\n          final long value = numerics.valueAt((int)ord);\n          coder.accept(value);\n          return bytes.get();\n        }\n\n        @Override\n        public long getValueCount() {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n        \n        @Override\n        public long lookupTerm(BytesRef key) {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n      };\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/DocValuesTermsCollector#sortedNumericAsSortedSetDocValues(String,LegacyNumericType).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/DocValuesTermsCollector#sortedNumericAsSortedSetDocValues(String,FieldType.LegacyNumericType).mjava","sourceNew":"  /** this adapter is quite weird. ords are per doc index, don't use ords across different docs*/\n  static Function<SortedSetDocValues> sortedNumericAsSortedSetDocValues(String field, LegacyNumericType numTyp) {\n    return (ctx) -> {\n      final SortedNumericDocValues numerics = DocValues.getSortedNumeric(ctx, field);\n      final BytesRefBuilder bytes = new BytesRefBuilder();\n      \n      final LongConsumer coder = coder(bytes, numTyp, field);\n      \n      return new SortedSetDocValues() {\n\n        private int index = Integer.MIN_VALUE;\n\n        @Override\n        public long nextOrd() {\n          return index < numerics.count()-1 ? ++index : NO_MORE_ORDS;\n        }\n\n        @Override\n        public void setDocument(int docID) {\n          numerics.setDocument(docID);\n          index=-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(long ord) {\n          assert ord>=0 && ord<numerics.count();\n          final long value = numerics.valueAt((int)ord);\n          coder.accept(value);\n          return bytes.get();\n        }\n\n        @Override\n        public long getValueCount() {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n        \n        @Override\n        public long lookupTerm(BytesRef key) {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n      };\n    };\n  }\n\n","sourceOld":"  /** this adapter is quite weird. ords are per doc index, don't use ords across different docs*/\n  static Function<SortedSetDocValues> sortedNumericAsSortedSetDocValues(String field, FieldType.LegacyNumericType numTyp) {\n    return (ctx) -> {\n      final SortedNumericDocValues numerics = DocValues.getSortedNumeric(ctx, field);\n      final BytesRefBuilder bytes = new BytesRefBuilder();\n      \n      final LongConsumer coder = coder(bytes, numTyp, field);\n      \n      return new SortedSetDocValues() {\n\n        private int index = Integer.MIN_VALUE;\n\n        @Override\n        public long nextOrd() {\n          return index < numerics.count()-1 ? ++index : NO_MORE_ORDS;\n        }\n\n        @Override\n        public void setDocument(int docID) {\n          numerics.setDocument(docID);\n          index=-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(long ord) {\n          assert ord>=0 && ord<numerics.count();\n          final long value = numerics.valueAt((int)ord);\n          coder.accept(value);\n          return bytes.get();\n        }\n\n        @Override\n        public long getValueCount() {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n        \n        @Override\n        public long lookupTerm(BytesRef key) {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n      };\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/DocValuesTermsCollector#sortedNumericAsSortedSetDocValues(String,LegacyNumericType).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/DocValuesTermsCollector#sortedNumericAsSortedSetDocValues(String,FieldType.LegacyNumericType).mjava","sourceNew":"  /** this adapter is quite weird. ords are per doc index, don't use ords across different docs*/\n  static Function<SortedSetDocValues> sortedNumericAsSortedSetDocValues(String field, LegacyNumericType numTyp) {\n    return (ctx) -> {\n      final SortedNumericDocValues numerics = DocValues.getSortedNumeric(ctx, field);\n      final BytesRefBuilder bytes = new BytesRefBuilder();\n      \n      final LongConsumer coder = coder(bytes, numTyp, field);\n      \n      return new SortedSetDocValues() {\n\n        private int index = Integer.MIN_VALUE;\n\n        @Override\n        public long nextOrd() {\n          return index < numerics.count()-1 ? ++index : NO_MORE_ORDS;\n        }\n\n        @Override\n        public void setDocument(int docID) {\n          numerics.setDocument(docID);\n          index=-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(long ord) {\n          assert ord>=0 && ord<numerics.count();\n          final long value = numerics.valueAt((int)ord);\n          coder.accept(value);\n          return bytes.get();\n        }\n\n        @Override\n        public long getValueCount() {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n        \n        @Override\n        public long lookupTerm(BytesRef key) {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n      };\n    };\n  }\n\n","sourceOld":"  /** this adapter is quite weird. ords are per doc index, don't use ords across different docs*/\n  static Function<SortedSetDocValues> sortedNumericAsSortedSetDocValues(String field, FieldType.LegacyNumericType numTyp) {\n    return (ctx) -> {\n      final SortedNumericDocValues numerics = DocValues.getSortedNumeric(ctx, field);\n      final BytesRefBuilder bytes = new BytesRefBuilder();\n      \n      final LongConsumer coder = coder(bytes, numTyp, field);\n      \n      return new SortedSetDocValues() {\n\n        private int index = Integer.MIN_VALUE;\n\n        @Override\n        public long nextOrd() {\n          return index < numerics.count()-1 ? ++index : NO_MORE_ORDS;\n        }\n\n        @Override\n        public void setDocument(int docID) {\n          numerics.setDocument(docID);\n          index=-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(long ord) {\n          assert ord>=0 && ord<numerics.count();\n          final long value = numerics.valueAt((int)ord);\n          coder.accept(value);\n          return bytes.get();\n        }\n\n        @Override\n        public long getValueCount() {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n        \n        @Override\n        public long lookupTerm(BytesRef key) {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n      };\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/DocValuesTermsCollector#sortedNumericAsSortedSetDocValues(String,FieldType.LegacyNumericType).mjava","sourceNew":null,"sourceOld":"  /** this adapter is quite weird. ords are per doc index, don't use ords across different docs*/\n  static Function<SortedSetDocValues> sortedNumericAsSortedSetDocValues(String field, FieldType.LegacyNumericType numTyp) {\n    return (ctx) -> {\n      final SortedNumericDocValues numerics = DocValues.getSortedNumeric(ctx, field);\n      final BytesRefBuilder bytes = new BytesRefBuilder();\n      \n      final LongConsumer coder = coder(bytes, numTyp, field);\n      \n      return new SortedSetDocValues() {\n\n        private int index = Integer.MIN_VALUE;\n\n        @Override\n        public long nextOrd() {\n          return index < numerics.count()-1 ? ++index : NO_MORE_ORDS;\n        }\n\n        @Override\n        public void setDocument(int docID) {\n          numerics.setDocument(docID);\n          index=-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(long ord) {\n          assert ord>=0 && ord<numerics.count();\n          final long value = numerics.valueAt((int)ord);\n          coder.accept(value);\n          return bytes.get();\n        }\n\n        @Override\n        public long getValueCount() {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n        \n        @Override\n        public long lookupTerm(BytesRef key) {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n      };\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["770342641f7b505eaa8dccdc666158bff2419109","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["770342641f7b505eaa8dccdc666158bff2419109"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["770342641f7b505eaa8dccdc666158bff2419109","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"770342641f7b505eaa8dccdc666158bff2419109":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["770342641f7b505eaa8dccdc666158bff2419109","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770342641f7b505eaa8dccdc666158bff2419109"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"770342641f7b505eaa8dccdc666158bff2419109":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}