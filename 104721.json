{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterHtmlish().mjava","commits":[{"id":"5eb3bae48a736f81ed96f4c26b6e5e7e18504187","date":1332294742,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterHtmlish().mjava","pathOld":"/dev/null","sourceNew":"  public void testLetterHtmlish() throws Exception {\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 10000; i++) {\n      String s = _TestUtil.randomHtmlishString(random, 20);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterHtmlish().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterHtmlish().mjava","sourceNew":"  public void testLetterHtmlish() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 10000; i++) {\n      String s = _TestUtil.randomHtmlishString(random, 20);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","sourceOld":"  public void testLetterHtmlish() throws Exception {\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 10000; i++) {\n      String s = _TestUtil.randomHtmlishString(random, 20);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterHtmlish().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterHtmlish().mjava","sourceNew":"  public void testLetterHtmlish() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 10000; i++) {\n      String s = _TestUtil.randomHtmlishString(random, 20);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","sourceOld":"  public void testLetterHtmlish() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 10000; i++) {\n      String s = _TestUtil.randomHtmlishString(random, 20);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5eb3bae48a736f81ed96f4c26b6e5e7e18504187":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["5eb3bae48a736f81ed96f4c26b6e5e7e18504187"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5eb3bae48a736f81ed96f4c26b6e5e7e18504187"],"5eb3bae48a736f81ed96f4c26b6e5e7e18504187":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}