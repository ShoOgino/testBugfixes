{"path":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testConcurrentMinScore().mjava","commits":[{"id":"f00d3f1ad3bbb957062c4871ec23f49edda800c6","date":1569925943,"type":1,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testConcurrentMinScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopDocsCollector#testConcurrentMinScoreTopFieldDocs().mjava","sourceNew":"  public void testConcurrentMinScore() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc));\n    w.flush();\n    IndexReader reader = DirectoryReader.open(w);\n    assertEquals(3, reader.leaves().size());\n    w.close();\n\n    Sort sort = new Sort(SortField.FIELD_SCORE, SortField.FIELD_DOC);\n    CollectorManager<TopFieldCollector, TopFieldDocs> manager =\n        TopFieldCollector.createSharedManager(sort, 2, null, 0);\n    TopFieldCollector collector = manager.newCollector();\n    TopFieldCollector collector2 = manager.newCollector();\n    assertTrue(collector.bottomValueChecker == collector2.bottomValueChecker);\n    BottomValueChecker minValueChecker = collector.bottomValueChecker;\n\n    ScoreAndDoc scorer = new ScoreAndDoc();\n    ScoreAndDoc scorer2 = new ScoreAndDoc();\n\n    LeafCollector leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n    LeafCollector leafCollector2 = collector2.getLeafCollector(reader.leaves().get(1));\n    leafCollector2.setScorer(scorer2);\n\n    scorer.doc = 0;\n    scorer.score = 3;\n    leafCollector.collect(0);\n\n    scorer2.doc = 0;\n    scorer2.score = 6;\n    leafCollector2.collect(0);\n\n    scorer.doc = 1;\n    scorer.score = 2;\n    leafCollector.collect(1);\n    assertEquals(minValueChecker.getBottomValue(), 2f, 0f);\n    assertEquals(scorer.minCompetitiveScore, 2f, 0f);\n    assertNull(scorer2.minCompetitiveScore);\n\n    scorer2.doc = 1;\n    scorer2.score = 9;\n    leafCollector2.collect(1);\n    assertEquals(minValueChecker.getBottomValue(), 6f, 0f);\n    assertEquals(scorer.minCompetitiveScore, 2f, 0f);\n    assertEquals(scorer2.minCompetitiveScore, 6f, 0f);\n\n    scorer2.doc = 2;\n    scorer2.score = 7;\n    leafCollector2.collect(2);\n    assertEquals(minValueChecker.getBottomValue(), 7f, 0f);\n    assertEquals(scorer.minCompetitiveScore, 2f, 0f);\n    assertEquals(scorer2.minCompetitiveScore, 7f, 0f);\n\n    scorer2.doc = 3;\n    scorer2.score = 1;\n    leafCollector2.collect(3);\n    assertEquals(minValueChecker.getBottomValue(), 7f, 0f);\n    assertEquals(scorer.minCompetitiveScore, 2f, 0f);\n    assertEquals(scorer2.minCompetitiveScore, 7f, 0f);\n\n    scorer.doc = 2;\n    scorer.score = 10;\n    leafCollector.collect(2);\n    assertEquals(minValueChecker.getBottomValue(), 7f, 0f);\n    assertEquals(scorer.minCompetitiveScore, 7f, 0f);\n    assertEquals(scorer2.minCompetitiveScore, 7f, 0f);\n\n    scorer.doc = 3;\n    scorer.score = 11;\n    leafCollector.collect(3);\n    assertEquals(minValueChecker.getBottomValue(), 10, 0f);\n    assertEquals(scorer.minCompetitiveScore, 10f, 0f);\n    assertEquals(scorer2.minCompetitiveScore, 7f, 0f);\n\n    TopFieldCollector collector3 = manager.newCollector();\n    LeafCollector leafCollector3 = collector3.getLeafCollector(reader.leaves().get(2));\n    ScoreAndDoc scorer3 = new ScoreAndDoc();\n    leafCollector3.setScorer(scorer3);\n    assertEquals(scorer3.minCompetitiveScore, 10f, 0f);\n\n    scorer3.doc = 0;\n    scorer3.score = 1f;\n    leafCollector3.collect(0);\n    assertEquals(minValueChecker.getBottomValue(), 10f, 0f);\n    assertEquals(scorer3.minCompetitiveScore, 10f, 0f);\n\n    scorer.doc = 4;\n    scorer.score = 11;\n    leafCollector.collect(4);\n    assertEquals(minValueChecker.getBottomValue(), 11f, 0f);\n    assertEquals(scorer.minCompetitiveScore, 11f, 0f);\n    assertEquals(scorer2.minCompetitiveScore, 7f, 0f);\n    assertEquals(scorer3.minCompetitiveScore, 10f, 0f);\n\n    scorer3.doc = 1;\n    scorer3.score = 2f;\n    leafCollector3.collect(1);\n    assertEquals(minValueChecker.getBottomValue(), 11f, 0f);\n    assertEquals(scorer.minCompetitiveScore, 11f, 0f);\n    assertEquals(scorer2.minCompetitiveScore, 7f, 0f);\n    assertEquals(scorer3.minCompetitiveScore, 11f, 0f);\n\n\n    TopFieldDocs topDocs = manager.reduce(Arrays.asList(collector, collector2, collector3));\n    assertEquals(11, topDocs.totalHits.value);\n    assertEquals(new TotalHits(11, TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO), topDocs.totalHits);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testConcurrentMinScoreTopFieldDocs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc));\n    w.flush();\n    IndexReader reader = DirectoryReader.open(w);\n    assertEquals(3, reader.leaves().size());\n    w.close();\n\n    Sort sort = new Sort(SortField.FIELD_SCORE, SortField.FIELD_DOC);\n    CollectorManager<TopFieldCollector, TopFieldDocs> manager =\n        TopFieldCollector.createSharedManager(sort, 2, null, 0);\n    TopFieldCollector collector = manager.newCollector();\n    TopFieldCollector collector2 = manager.newCollector();\n    assertTrue(collector.bottomValueChecker == collector2.bottomValueChecker);\n    BottomValueChecker minValueChecker = collector.bottomValueChecker;\n\n    ScoreAndDoc scorer = new ScoreAndDoc();\n    ScoreAndDoc scorer2 = new ScoreAndDoc();\n\n    LeafCollector leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n    LeafCollector leafCollector2 = collector2.getLeafCollector(reader.leaves().get(1));\n    leafCollector2.setScorer(scorer2);\n\n    scorer.doc = 0;\n    scorer.score = 3;\n    leafCollector.collect(0);\n\n    scorer2.doc = 0;\n    scorer2.score = 6;\n    leafCollector2.collect(0);\n\n    scorer.doc = 1;\n    scorer.score = 2;\n    leafCollector.collect(1);\n    assertEquals(minValueChecker.getBottomValue(), 2f, 0f);\n    assertEquals(scorer.minCompetitiveScore, 2f, 0f);\n    assertNull(scorer2.minCompetitiveScore);\n\n    scorer2.doc = 1;\n    scorer2.score = 9;\n    leafCollector2.collect(1);\n    assertEquals(minValueChecker.getBottomValue(), 6f, 0f);\n    assertEquals(scorer.minCompetitiveScore, 2f, 0f);\n    assertEquals(scorer2.minCompetitiveScore, 6f, 0f);\n\n    scorer2.doc = 2;\n    scorer2.score = 7;\n    leafCollector2.collect(2);\n    assertEquals(minValueChecker.getBottomValue(), 7f, 0f);\n    assertEquals(scorer.minCompetitiveScore, 2f, 0f);\n    assertEquals(scorer2.minCompetitiveScore, 7f, 0f);\n\n    scorer2.doc = 3;\n    scorer2.score = 1;\n    leafCollector2.collect(3);\n    assertEquals(minValueChecker.getBottomValue(), 7f, 0f);\n    assertEquals(scorer.minCompetitiveScore, 2f, 0f);\n    assertEquals(scorer2.minCompetitiveScore, 7f, 0f);\n\n    scorer.doc = 2;\n    scorer.score = 10;\n    leafCollector.collect(2);\n    assertEquals(minValueChecker.getBottomValue(), 7f, 0f);\n    assertEquals(scorer.minCompetitiveScore, 7f, 0f);\n    assertEquals(scorer2.minCompetitiveScore, 7f, 0f);\n\n    scorer.doc = 3;\n    scorer.score = 11;\n    leafCollector.collect(3);\n    assertEquals(minValueChecker.getBottomValue(), 10, 0f);\n    assertEquals(scorer.minCompetitiveScore, 10f, 0f);\n    assertEquals(scorer2.minCompetitiveScore, 7f, 0f);\n\n    TopFieldCollector collector3 = manager.newCollector();\n    LeafCollector leafCollector3 = collector3.getLeafCollector(reader.leaves().get(2));\n    ScoreAndDoc scorer3 = new ScoreAndDoc();\n    leafCollector3.setScorer(scorer3);\n    assertEquals(scorer3.minCompetitiveScore, 10f, 0f);\n\n    scorer3.doc = 0;\n    scorer3.score = 1f;\n    leafCollector3.collect(0);\n    assertEquals(minValueChecker.getBottomValue(), 10f, 0f);\n    assertEquals(scorer3.minCompetitiveScore, 10f, 0f);\n\n    scorer.doc = 4;\n    scorer.score = 11;\n    leafCollector.collect(4);\n    assertEquals(minValueChecker.getBottomValue(), 11f, 0f);\n    assertEquals(scorer.minCompetitiveScore, 11f, 0f);\n    assertEquals(scorer2.minCompetitiveScore, 7f, 0f);\n    assertEquals(scorer3.minCompetitiveScore, 10f, 0f);\n\n    scorer3.doc = 1;\n    scorer3.score = 2f;\n    leafCollector3.collect(1);\n    assertEquals(minValueChecker.getBottomValue(), 11f, 0f);\n    assertEquals(scorer.minCompetitiveScore, 11f, 0f);\n    assertEquals(scorer2.minCompetitiveScore, 7f, 0f);\n    assertEquals(scorer3.minCompetitiveScore, 11f, 0f);\n\n\n    TopFieldDocs topDocs = manager.reduce(Arrays.asList(collector, collector2, collector3));\n    assertEquals(11, topDocs.totalHits.value);\n    assertEquals(new TotalHits(11, TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO), topDocs.totalHits);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"807314aa41c10866aec273a0e54fd0d24d8971de","date":1570435832,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testConcurrentMinScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testConcurrentMinScore().mjava","sourceNew":"  public void testConcurrentMinScore() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc));\n    w.flush();\n    IndexReader reader = DirectoryReader.open(w);\n    assertEquals(3, reader.leaves().size());\n    w.close();\n\n    Sort sort = new Sort(SortField.FIELD_SCORE, SortField.FIELD_DOC);\n    CollectorManager<TopFieldCollector, TopFieldDocs> manager =\n        TopFieldCollector.createSharedManager(sort, 2, null, 0);\n    TopFieldCollector collector = manager.newCollector();\n    TopFieldCollector collector2 = manager.newCollector();\n    assertTrue(collector.minScoreAcc == collector2.minScoreAcc);\n    MaxScoreAccumulator minValueChecker = collector.minScoreAcc;\n    // force the check of the global minimum score on every round\n    minValueChecker.modInterval = 1;\n\n    ScoreAndDoc scorer = new ScoreAndDoc();\n    ScoreAndDoc scorer2 = new ScoreAndDoc();\n\n    LeafCollector leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n    LeafCollector leafCollector2 = collector2.getLeafCollector(reader.leaves().get(1));\n    leafCollector2.setScorer(scorer2);\n\n    scorer.doc = 0;\n    scorer.score = 3;\n    leafCollector.collect(0);\n    assertNull(minValueChecker.get());\n    assertNull(scorer.minCompetitiveScore);\n\n    scorer2.doc = 0;\n    scorer2.score = 6;\n    leafCollector2.collect(0);\n    assertNull(minValueChecker.get());\n    assertNull(scorer2.minCompetitiveScore);\n\n    scorer.doc = 1;\n    scorer.score = 2;\n    leafCollector.collect(1);\n    assertEquals(2f, minValueChecker.get().score, 0f);\n    assertEquals(2f, scorer.minCompetitiveScore, 0f);\n    assertNull(scorer2.minCompetitiveScore);\n\n    scorer2.doc = 1;\n    scorer2.score = 9;\n    leafCollector2.collect(1);\n    assertEquals(6f, minValueChecker.get().score, 0f);\n    assertEquals(2f, scorer.minCompetitiveScore, 0f);\n    assertEquals(6f, scorer2.minCompetitiveScore, 0f);\n\n    scorer2.doc = 2;\n    scorer2.score = 7;\n    leafCollector2.collect(2);\n    assertEquals(7f, minValueChecker.get().score, 0f);\n    assertEquals(2f, scorer.minCompetitiveScore, 0f);\n    assertEquals(7f, scorer2.minCompetitiveScore, 0f);\n\n    scorer2.doc = 3;\n    scorer2.score = 1;\n    leafCollector2.collect(3);\n    assertEquals(7f, minValueChecker.get().score, 0f);\n    assertEquals(2f, scorer.minCompetitiveScore, 0f);\n    assertEquals(7f, scorer2.minCompetitiveScore, 0f);\n\n    scorer.doc = 2;\n    scorer.score = 10;\n    leafCollector.collect(2);\n    assertEquals(7f, minValueChecker.get().score, 0f);\n    assertEquals(7f, scorer.minCompetitiveScore, 0f);\n    assertEquals(7f, scorer2.minCompetitiveScore, 0f);\n\n    scorer.doc = 3;\n    scorer.score = 11;\n    leafCollector.collect(3);\n    assertEquals(10f, minValueChecker.get().score, 0f);\n    assertEquals(10f, scorer.minCompetitiveScore, 0f);\n    assertEquals(7f, scorer2.minCompetitiveScore, 0f);\n\n    TopFieldCollector collector3 = manager.newCollector();\n    LeafCollector leafCollector3 = collector3.getLeafCollector(reader.leaves().get(2));\n    ScoreAndDoc scorer3 = new ScoreAndDoc();\n    leafCollector3.setScorer(scorer3);\n    assertEquals(10f, scorer3.minCompetitiveScore, 0f);\n\n    scorer3.doc = 0;\n    scorer3.score = 1f;\n    leafCollector3.collect(0);\n    assertEquals(10f, minValueChecker.get().score, 0f);\n    assertEquals(10f, scorer3.minCompetitiveScore, 0f);\n\n    scorer.doc = 4;\n    scorer.score = 11;\n    leafCollector.collect(4);\n    assertEquals(11f, minValueChecker.get().score, 0f);\n    assertEquals(11f, scorer.minCompetitiveScore, 0f);\n    assertEquals(7f, scorer2.minCompetitiveScore, 0f);\n    assertEquals(10f, scorer3.minCompetitiveScore, 0f);\n\n    scorer3.doc = 1;\n    scorer3.score = 2f;\n    leafCollector3.collect(1);\n    assertEquals(11f, minValueChecker.get().score, 0f);\n    assertEquals(11f, scorer.minCompetitiveScore, 0f);\n    assertEquals(7f, scorer2.minCompetitiveScore, 0f);\n    assertEquals(11f, scorer3.minCompetitiveScore, 0f);\n\n\n    TopFieldDocs topDocs = manager.reduce(Arrays.asList(collector, collector2, collector3));\n    assertEquals(11, topDocs.totalHits.value);\n    assertEquals(new TotalHits(11, TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO), topDocs.totalHits);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testConcurrentMinScore() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc));\n    w.flush();\n    IndexReader reader = DirectoryReader.open(w);\n    assertEquals(3, reader.leaves().size());\n    w.close();\n\n    Sort sort = new Sort(SortField.FIELD_SCORE, SortField.FIELD_DOC);\n    CollectorManager<TopFieldCollector, TopFieldDocs> manager =\n        TopFieldCollector.createSharedManager(sort, 2, null, 0);\n    TopFieldCollector collector = manager.newCollector();\n    TopFieldCollector collector2 = manager.newCollector();\n    assertTrue(collector.bottomValueChecker == collector2.bottomValueChecker);\n    BottomValueChecker minValueChecker = collector.bottomValueChecker;\n\n    ScoreAndDoc scorer = new ScoreAndDoc();\n    ScoreAndDoc scorer2 = new ScoreAndDoc();\n\n    LeafCollector leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n    LeafCollector leafCollector2 = collector2.getLeafCollector(reader.leaves().get(1));\n    leafCollector2.setScorer(scorer2);\n\n    scorer.doc = 0;\n    scorer.score = 3;\n    leafCollector.collect(0);\n\n    scorer2.doc = 0;\n    scorer2.score = 6;\n    leafCollector2.collect(0);\n\n    scorer.doc = 1;\n    scorer.score = 2;\n    leafCollector.collect(1);\n    assertEquals(minValueChecker.getBottomValue(), 2f, 0f);\n    assertEquals(scorer.minCompetitiveScore, 2f, 0f);\n    assertNull(scorer2.minCompetitiveScore);\n\n    scorer2.doc = 1;\n    scorer2.score = 9;\n    leafCollector2.collect(1);\n    assertEquals(minValueChecker.getBottomValue(), 6f, 0f);\n    assertEquals(scorer.minCompetitiveScore, 2f, 0f);\n    assertEquals(scorer2.minCompetitiveScore, 6f, 0f);\n\n    scorer2.doc = 2;\n    scorer2.score = 7;\n    leafCollector2.collect(2);\n    assertEquals(minValueChecker.getBottomValue(), 7f, 0f);\n    assertEquals(scorer.minCompetitiveScore, 2f, 0f);\n    assertEquals(scorer2.minCompetitiveScore, 7f, 0f);\n\n    scorer2.doc = 3;\n    scorer2.score = 1;\n    leafCollector2.collect(3);\n    assertEquals(minValueChecker.getBottomValue(), 7f, 0f);\n    assertEquals(scorer.minCompetitiveScore, 2f, 0f);\n    assertEquals(scorer2.minCompetitiveScore, 7f, 0f);\n\n    scorer.doc = 2;\n    scorer.score = 10;\n    leafCollector.collect(2);\n    assertEquals(minValueChecker.getBottomValue(), 7f, 0f);\n    assertEquals(scorer.minCompetitiveScore, 7f, 0f);\n    assertEquals(scorer2.minCompetitiveScore, 7f, 0f);\n\n    scorer.doc = 3;\n    scorer.score = 11;\n    leafCollector.collect(3);\n    assertEquals(minValueChecker.getBottomValue(), 10, 0f);\n    assertEquals(scorer.minCompetitiveScore, 10f, 0f);\n    assertEquals(scorer2.minCompetitiveScore, 7f, 0f);\n\n    TopFieldCollector collector3 = manager.newCollector();\n    LeafCollector leafCollector3 = collector3.getLeafCollector(reader.leaves().get(2));\n    ScoreAndDoc scorer3 = new ScoreAndDoc();\n    leafCollector3.setScorer(scorer3);\n    assertEquals(scorer3.minCompetitiveScore, 10f, 0f);\n\n    scorer3.doc = 0;\n    scorer3.score = 1f;\n    leafCollector3.collect(0);\n    assertEquals(minValueChecker.getBottomValue(), 10f, 0f);\n    assertEquals(scorer3.minCompetitiveScore, 10f, 0f);\n\n    scorer.doc = 4;\n    scorer.score = 11;\n    leafCollector.collect(4);\n    assertEquals(minValueChecker.getBottomValue(), 11f, 0f);\n    assertEquals(scorer.minCompetitiveScore, 11f, 0f);\n    assertEquals(scorer2.minCompetitiveScore, 7f, 0f);\n    assertEquals(scorer3.minCompetitiveScore, 10f, 0f);\n\n    scorer3.doc = 1;\n    scorer3.score = 2f;\n    leafCollector3.collect(1);\n    assertEquals(minValueChecker.getBottomValue(), 11f, 0f);\n    assertEquals(scorer.minCompetitiveScore, 11f, 0f);\n    assertEquals(scorer2.minCompetitiveScore, 7f, 0f);\n    assertEquals(scorer3.minCompetitiveScore, 11f, 0f);\n\n\n    TopFieldDocs topDocs = manager.reduce(Arrays.asList(collector, collector2, collector3));\n    assertEquals(11, topDocs.totalHits.value);\n    assertEquals(new TotalHits(11, TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO), topDocs.totalHits);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"344fda225893210c79fc615c612df728a78bfbc6","date":1571224186,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testConcurrentMinScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testConcurrentMinScore().mjava","sourceNew":"  public void testConcurrentMinScore() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc));\n    w.flush();\n    IndexReader reader = DirectoryReader.open(w);\n    assertEquals(3, reader.leaves().size());\n    w.close();\n\n    Sort sort = new Sort(SortField.FIELD_SCORE, SortField.FIELD_DOC);\n    CollectorManager<TopFieldCollector, TopFieldDocs> manager =\n        TopFieldCollector.createSharedManager(sort, 2, null, 0);\n    TopFieldCollector collector = manager.newCollector();\n    TopFieldCollector collector2 = manager.newCollector();\n    assertTrue(collector.minScoreAcc == collector2.minScoreAcc);\n    MaxScoreAccumulator minValueChecker = collector.minScoreAcc;\n    // force the check of the global minimum score on every round\n    minValueChecker.modInterval = 0;\n\n    ScoreAndDoc scorer = new ScoreAndDoc();\n    ScoreAndDoc scorer2 = new ScoreAndDoc();\n\n    LeafCollector leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n    LeafCollector leafCollector2 = collector2.getLeafCollector(reader.leaves().get(1));\n    leafCollector2.setScorer(scorer2);\n\n    scorer.doc = 0;\n    scorer.score = 3;\n    leafCollector.collect(0);\n    assertNull(minValueChecker.get());\n    assertNull(scorer.minCompetitiveScore);\n\n    scorer2.doc = 0;\n    scorer2.score = 6;\n    leafCollector2.collect(0);\n    assertNull(minValueChecker.get());\n    assertNull(scorer2.minCompetitiveScore);\n\n    scorer.doc = 1;\n    scorer.score = 2;\n    leafCollector.collect(1);\n    assertEquals(2f, minValueChecker.get().score, 0f);\n    assertEquals(2f, scorer.minCompetitiveScore, 0f);\n    assertNull(scorer2.minCompetitiveScore);\n\n    scorer2.doc = 1;\n    scorer2.score = 9;\n    leafCollector2.collect(1);\n    assertEquals(6f, minValueChecker.get().score, 0f);\n    assertEquals(2f, scorer.minCompetitiveScore, 0f);\n    assertEquals(6f, scorer2.minCompetitiveScore, 0f);\n\n    scorer2.doc = 2;\n    scorer2.score = 7;\n    leafCollector2.collect(2);\n    assertEquals(7f, minValueChecker.get().score, 0f);\n    assertEquals(2f, scorer.minCompetitiveScore, 0f);\n    assertEquals(7f, scorer2.minCompetitiveScore, 0f);\n\n    scorer2.doc = 3;\n    scorer2.score = 1;\n    leafCollector2.collect(3);\n    assertEquals(7f, minValueChecker.get().score, 0f);\n    assertEquals(2f, scorer.minCompetitiveScore, 0f);\n    assertEquals(7f, scorer2.minCompetitiveScore, 0f);\n\n    scorer.doc = 2;\n    scorer.score = 10;\n    leafCollector.collect(2);\n    assertEquals(7f, minValueChecker.get().score, 0f);\n    assertEquals(7f, scorer.minCompetitiveScore, 0f);\n    assertEquals(7f, scorer2.minCompetitiveScore, 0f);\n\n    scorer.doc = 3;\n    scorer.score = 11;\n    leafCollector.collect(3);\n    assertEquals(10f, minValueChecker.get().score, 0f);\n    assertEquals(10f, scorer.minCompetitiveScore, 0f);\n    assertEquals(7f, scorer2.minCompetitiveScore, 0f);\n\n    TopFieldCollector collector3 = manager.newCollector();\n    LeafCollector leafCollector3 = collector3.getLeafCollector(reader.leaves().get(2));\n    ScoreAndDoc scorer3 = new ScoreAndDoc();\n    leafCollector3.setScorer(scorer3);\n    assertEquals(10f, scorer3.minCompetitiveScore, 0f);\n\n    scorer3.doc = 0;\n    scorer3.score = 1f;\n    leafCollector3.collect(0);\n    assertEquals(10f, minValueChecker.get().score, 0f);\n    assertEquals(10f, scorer3.minCompetitiveScore, 0f);\n\n    scorer.doc = 4;\n    scorer.score = 11;\n    leafCollector.collect(4);\n    assertEquals(11f, minValueChecker.get().score, 0f);\n    assertEquals(11f, scorer.minCompetitiveScore, 0f);\n    assertEquals(7f, scorer2.minCompetitiveScore, 0f);\n    assertEquals(10f, scorer3.minCompetitiveScore, 0f);\n\n    scorer3.doc = 1;\n    scorer3.score = 2f;\n    leafCollector3.collect(1);\n    assertEquals(11f, minValueChecker.get().score, 0f);\n    assertEquals(11f, scorer.minCompetitiveScore, 0f);\n    assertEquals(7f, scorer2.minCompetitiveScore, 0f);\n    assertEquals(11f, scorer3.minCompetitiveScore, 0f);\n\n\n    TopFieldDocs topDocs = manager.reduce(Arrays.asList(collector, collector2, collector3));\n    assertEquals(11, topDocs.totalHits.value);\n    assertEquals(new TotalHits(11, TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO), topDocs.totalHits);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testConcurrentMinScore() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc));\n    w.flush();\n    IndexReader reader = DirectoryReader.open(w);\n    assertEquals(3, reader.leaves().size());\n    w.close();\n\n    Sort sort = new Sort(SortField.FIELD_SCORE, SortField.FIELD_DOC);\n    CollectorManager<TopFieldCollector, TopFieldDocs> manager =\n        TopFieldCollector.createSharedManager(sort, 2, null, 0);\n    TopFieldCollector collector = manager.newCollector();\n    TopFieldCollector collector2 = manager.newCollector();\n    assertTrue(collector.minScoreAcc == collector2.minScoreAcc);\n    MaxScoreAccumulator minValueChecker = collector.minScoreAcc;\n    // force the check of the global minimum score on every round\n    minValueChecker.modInterval = 1;\n\n    ScoreAndDoc scorer = new ScoreAndDoc();\n    ScoreAndDoc scorer2 = new ScoreAndDoc();\n\n    LeafCollector leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n    LeafCollector leafCollector2 = collector2.getLeafCollector(reader.leaves().get(1));\n    leafCollector2.setScorer(scorer2);\n\n    scorer.doc = 0;\n    scorer.score = 3;\n    leafCollector.collect(0);\n    assertNull(minValueChecker.get());\n    assertNull(scorer.minCompetitiveScore);\n\n    scorer2.doc = 0;\n    scorer2.score = 6;\n    leafCollector2.collect(0);\n    assertNull(minValueChecker.get());\n    assertNull(scorer2.minCompetitiveScore);\n\n    scorer.doc = 1;\n    scorer.score = 2;\n    leafCollector.collect(1);\n    assertEquals(2f, minValueChecker.get().score, 0f);\n    assertEquals(2f, scorer.minCompetitiveScore, 0f);\n    assertNull(scorer2.minCompetitiveScore);\n\n    scorer2.doc = 1;\n    scorer2.score = 9;\n    leafCollector2.collect(1);\n    assertEquals(6f, minValueChecker.get().score, 0f);\n    assertEquals(2f, scorer.minCompetitiveScore, 0f);\n    assertEquals(6f, scorer2.minCompetitiveScore, 0f);\n\n    scorer2.doc = 2;\n    scorer2.score = 7;\n    leafCollector2.collect(2);\n    assertEquals(7f, minValueChecker.get().score, 0f);\n    assertEquals(2f, scorer.minCompetitiveScore, 0f);\n    assertEquals(7f, scorer2.minCompetitiveScore, 0f);\n\n    scorer2.doc = 3;\n    scorer2.score = 1;\n    leafCollector2.collect(3);\n    assertEquals(7f, minValueChecker.get().score, 0f);\n    assertEquals(2f, scorer.minCompetitiveScore, 0f);\n    assertEquals(7f, scorer2.minCompetitiveScore, 0f);\n\n    scorer.doc = 2;\n    scorer.score = 10;\n    leafCollector.collect(2);\n    assertEquals(7f, minValueChecker.get().score, 0f);\n    assertEquals(7f, scorer.minCompetitiveScore, 0f);\n    assertEquals(7f, scorer2.minCompetitiveScore, 0f);\n\n    scorer.doc = 3;\n    scorer.score = 11;\n    leafCollector.collect(3);\n    assertEquals(10f, minValueChecker.get().score, 0f);\n    assertEquals(10f, scorer.minCompetitiveScore, 0f);\n    assertEquals(7f, scorer2.minCompetitiveScore, 0f);\n\n    TopFieldCollector collector3 = manager.newCollector();\n    LeafCollector leafCollector3 = collector3.getLeafCollector(reader.leaves().get(2));\n    ScoreAndDoc scorer3 = new ScoreAndDoc();\n    leafCollector3.setScorer(scorer3);\n    assertEquals(10f, scorer3.minCompetitiveScore, 0f);\n\n    scorer3.doc = 0;\n    scorer3.score = 1f;\n    leafCollector3.collect(0);\n    assertEquals(10f, minValueChecker.get().score, 0f);\n    assertEquals(10f, scorer3.minCompetitiveScore, 0f);\n\n    scorer.doc = 4;\n    scorer.score = 11;\n    leafCollector.collect(4);\n    assertEquals(11f, minValueChecker.get().score, 0f);\n    assertEquals(11f, scorer.minCompetitiveScore, 0f);\n    assertEquals(7f, scorer2.minCompetitiveScore, 0f);\n    assertEquals(10f, scorer3.minCompetitiveScore, 0f);\n\n    scorer3.doc = 1;\n    scorer3.score = 2f;\n    leafCollector3.collect(1);\n    assertEquals(11f, minValueChecker.get().score, 0f);\n    assertEquals(11f, scorer.minCompetitiveScore, 0f);\n    assertEquals(7f, scorer2.minCompetitiveScore, 0f);\n    assertEquals(11f, scorer3.minCompetitiveScore, 0f);\n\n\n    TopFieldDocs topDocs = manager.reduce(Arrays.asList(collector, collector2, collector3));\n    assertEquals(11, topDocs.totalHits.value);\n    assertEquals(new TotalHits(11, TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO), topDocs.totalHits);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f","date":1571662992,"type":0,"author":"Jim Ferenczi","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testConcurrentMinScore().mjava","pathOld":"/dev/null","sourceNew":"  public void testConcurrentMinScore() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc));\n    w.flush();\n    IndexReader reader = DirectoryReader.open(w);\n    assertEquals(3, reader.leaves().size());\n    w.close();\n\n    Sort sort = new Sort(SortField.FIELD_SCORE, SortField.FIELD_DOC);\n    CollectorManager<TopFieldCollector, TopFieldDocs> manager =\n        TopFieldCollector.createSharedManager(sort, 2, null, 0);\n    TopFieldCollector collector = manager.newCollector();\n    TopFieldCollector collector2 = manager.newCollector();\n    assertTrue(collector.minScoreAcc == collector2.minScoreAcc);\n    MaxScoreAccumulator minValueChecker = collector.minScoreAcc;\n    // force the check of the global minimum score on every round\n    minValueChecker.modInterval = 0;\n\n    ScoreAndDoc scorer = new ScoreAndDoc();\n    ScoreAndDoc scorer2 = new ScoreAndDoc();\n\n    LeafCollector leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n    LeafCollector leafCollector2 = collector2.getLeafCollector(reader.leaves().get(1));\n    leafCollector2.setScorer(scorer2);\n\n    scorer.doc = 0;\n    scorer.score = 3;\n    leafCollector.collect(0);\n    assertNull(minValueChecker.get());\n    assertNull(scorer.minCompetitiveScore);\n\n    scorer2.doc = 0;\n    scorer2.score = 6;\n    leafCollector2.collect(0);\n    assertNull(minValueChecker.get());\n    assertNull(scorer2.minCompetitiveScore);\n\n    scorer.doc = 1;\n    scorer.score = 2;\n    leafCollector.collect(1);\n    assertEquals(2f, minValueChecker.get().score, 0f);\n    assertEquals(2f, scorer.minCompetitiveScore, 0f);\n    assertNull(scorer2.minCompetitiveScore);\n\n    scorer2.doc = 1;\n    scorer2.score = 9;\n    leafCollector2.collect(1);\n    assertEquals(6f, minValueChecker.get().score, 0f);\n    assertEquals(2f, scorer.minCompetitiveScore, 0f);\n    assertEquals(6f, scorer2.minCompetitiveScore, 0f);\n\n    scorer2.doc = 2;\n    scorer2.score = 7;\n    leafCollector2.collect(2);\n    assertEquals(7f, minValueChecker.get().score, 0f);\n    assertEquals(2f, scorer.minCompetitiveScore, 0f);\n    assertEquals(7f, scorer2.minCompetitiveScore, 0f);\n\n    scorer2.doc = 3;\n    scorer2.score = 1;\n    leafCollector2.collect(3);\n    assertEquals(7f, minValueChecker.get().score, 0f);\n    assertEquals(2f, scorer.minCompetitiveScore, 0f);\n    assertEquals(7f, scorer2.minCompetitiveScore, 0f);\n\n    scorer.doc = 2;\n    scorer.score = 10;\n    leafCollector.collect(2);\n    assertEquals(7f, minValueChecker.get().score, 0f);\n    assertEquals(7f, scorer.minCompetitiveScore, 0f);\n    assertEquals(7f, scorer2.minCompetitiveScore, 0f);\n\n    scorer.doc = 3;\n    scorer.score = 11;\n    leafCollector.collect(3);\n    assertEquals(10f, minValueChecker.get().score, 0f);\n    assertEquals(10f, scorer.minCompetitiveScore, 0f);\n    assertEquals(7f, scorer2.minCompetitiveScore, 0f);\n\n    TopFieldCollector collector3 = manager.newCollector();\n    LeafCollector leafCollector3 = collector3.getLeafCollector(reader.leaves().get(2));\n    ScoreAndDoc scorer3 = new ScoreAndDoc();\n    leafCollector3.setScorer(scorer3);\n    assertEquals(10f, scorer3.minCompetitiveScore, 0f);\n\n    scorer3.doc = 0;\n    scorer3.score = 1f;\n    leafCollector3.collect(0);\n    assertEquals(10f, minValueChecker.get().score, 0f);\n    assertEquals(10f, scorer3.minCompetitiveScore, 0f);\n\n    scorer.doc = 4;\n    scorer.score = 11;\n    leafCollector.collect(4);\n    assertEquals(11f, minValueChecker.get().score, 0f);\n    assertEquals(11f, scorer.minCompetitiveScore, 0f);\n    assertEquals(7f, scorer2.minCompetitiveScore, 0f);\n    assertEquals(10f, scorer3.minCompetitiveScore, 0f);\n\n    scorer3.doc = 1;\n    scorer3.score = 2f;\n    leafCollector3.collect(1);\n    assertEquals(11f, minValueChecker.get().score, 0f);\n    assertEquals(11f, scorer.minCompetitiveScore, 0f);\n    assertEquals(7f, scorer2.minCompetitiveScore, 0f);\n    assertEquals(11f, scorer3.minCompetitiveScore, 0f);\n\n\n    TopFieldDocs topDocs = manager.reduce(Arrays.asList(collector, collector2, collector3));\n    assertEquals(11, topDocs.totalHits.value);\n    assertEquals(new TotalHits(11, TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO), topDocs.totalHits);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"807314aa41c10866aec273a0e54fd0d24d8971de":["f00d3f1ad3bbb957062c4871ec23f49edda800c6"],"3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","344fda225893210c79fc615c612df728a78bfbc6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f00d3f1ad3bbb957062c4871ec23f49edda800c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"344fda225893210c79fc615c612df728a78bfbc6":["807314aa41c10866aec273a0e54fd0d24d8971de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f"]},"commit2Childs":{"807314aa41c10866aec273a0e54fd0d24d8971de":["344fda225893210c79fc615c612df728a78bfbc6"],"3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f","f00d3f1ad3bbb957062c4871ec23f49edda800c6"],"f00d3f1ad3bbb957062c4871ec23f49edda800c6":["807314aa41c10866aec273a0e54fd0d24d8971de"],"344fda225893210c79fc615c612df728a78bfbc6":["3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}