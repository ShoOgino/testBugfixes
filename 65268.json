{"path":"lucene/spatial3d/src/java/org/apache/lucene/bkdtree3d/BKD3DTreeWriter#markLeftTree(int,PathSlice,LongBitSet,int,int,int,int,int,int).mjava","commits":[{"id":"f64b7098768253180859cd8faeae6b1a185b06ed","date":1441223971,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/bkdtree3d/BKD3DTreeWriter#markLeftTree(int,PathSlice,LongBitSet,int,int,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Marks bits for the ords (points) that belong in the left sub tree. */\n  private int markLeftTree(int splitDim, PathSlice source, LongBitSet bitSet,\n                           int minX, int maxX,\n                           int minY, int maxY,\n                           int minZ, int maxZ) throws IOException {\n\n    // This is the size of our left tree\n    long leftCount = source.count / 2;\n\n    // Read the split value:\n    //if (DEBUG) System.out.println(\"  leftCount=\" + leftCount + \" vs \" + source.count);\n    Reader reader = source.writer.getReader(source.start + leftCount);\n    boolean success = false;\n    int splitValue;\n    try {\n      boolean result = reader.next();\n      assert result;\n\n      int x = reader.x();\n      assert x >= minX && x <= maxX: \"x=\" + x + \" minX=\" + minX + \" maxX=\" + maxX;\n\n      int y = reader.y();\n      assert y >= minY && y <= maxY: \"y=\" + y + \" minY=\" + minY + \" maxY=\" + maxY;\n\n      int z = reader.z();\n      assert z >= minZ && z <= maxZ: \"z=\" + z + \" minZ=\" + minZ + \" maxZ=\" + maxZ;\n\n      if (splitDim == 0) {\n        splitValue = x;\n      } else if (splitDim == 1) {\n        splitValue = y;\n      } else {\n        splitValue = z;\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(reader);\n      } else {\n        IOUtils.closeWhileHandlingException(reader);\n      }\n    }\n\n    // Mark ords that fall into the left half, and also handle the == boundary case:\n    assert bitSet.cardinality() == 0: \"cardinality=\" + bitSet.cardinality();\n\n    success = false;\n    reader = source.writer.getReader(source.start);\n    try {\n      int lastValue = Integer.MIN_VALUE;\n      for (int i=0;i<leftCount;i++) {\n        boolean result = reader.next();\n        assert result;\n        int x = reader.x();\n        int y = reader.y();\n        int z = reader.z();\n\n        int value;\n        if (splitDim == 0) {\n          value = x;\n        } else if (splitDim == 1) {\n          value = y;\n        } else {\n          value = z;\n        }\n\n        // Our input source is supposed to be sorted on the incoming dimension:\n        assert value >= lastValue;\n        lastValue = value;\n\n        assert value <= splitValue: \"i=\" + i + \" value=\" + value + \" vs splitValue=\" + splitValue;\n        long ord = reader.ord();\n        int docID = reader.docID();\n        assert docID >= 0: \"docID=\" + docID + \" reader=\" + reader;\n\n        // We should never see dup ords:\n        assert bitSet.get(ord) == false;\n        bitSet.set(ord);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(reader);\n      } else {\n        IOUtils.closeWhileHandlingException(reader);\n      }\n    }\n\n    assert leftCount == bitSet.cardinality(): \"leftCount=\" + leftCount + \" cardinality=\" + bitSet.cardinality();\n\n    return splitValue;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/bkdtree3d/BKD3DTreeWriter#markLeftTree(int,PathSlice,LongBitSet,int,int,int,int,int,int).mjava","sourceNew":null,"sourceOld":"  /** Marks bits for the ords (points) that belong in the left sub tree. */\n  private int markLeftTree(int splitDim, PathSlice source, LongBitSet bitSet,\n                           int minX, int maxX,\n                           int minY, int maxY,\n                           int minZ, int maxZ) throws IOException {\n\n    // This is the size of our left tree\n    long leftCount = source.count / 2;\n\n    // Read the split value:\n    //if (DEBUG) System.out.println(\"  leftCount=\" + leftCount + \" vs \" + source.count);\n    Reader reader = source.writer.getReader(source.start + leftCount);\n    boolean success = false;\n    int splitValue;\n    try {\n      boolean result = reader.next();\n      assert result;\n\n      int x = reader.x();\n      assert x >= minX && x <= maxX: \"x=\" + x + \" minX=\" + minX + \" maxX=\" + maxX;\n\n      int y = reader.y();\n      assert y >= minY && y <= maxY: \"y=\" + y + \" minY=\" + minY + \" maxY=\" + maxY;\n\n      int z = reader.z();\n      assert z >= minZ && z <= maxZ: \"z=\" + z + \" minZ=\" + minZ + \" maxZ=\" + maxZ;\n\n      if (splitDim == 0) {\n        splitValue = x;\n      } else if (splitDim == 1) {\n        splitValue = y;\n      } else {\n        splitValue = z;\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(reader);\n      } else {\n        IOUtils.closeWhileHandlingException(reader);\n      }\n    }\n\n    // Mark ords that fall into the left half, and also handle the == boundary case:\n    assert bitSet.cardinality() == 0: \"cardinality=\" + bitSet.cardinality();\n\n    success = false;\n    reader = source.writer.getReader(source.start);\n    try {\n      int lastValue = Integer.MIN_VALUE;\n      for (int i=0;i<leftCount;i++) {\n        boolean result = reader.next();\n        assert result;\n        int x = reader.x();\n        int y = reader.y();\n        int z = reader.z();\n\n        int value;\n        if (splitDim == 0) {\n          value = x;\n        } else if (splitDim == 1) {\n          value = y;\n        } else {\n          value = z;\n        }\n\n        // Our input source is supposed to be sorted on the incoming dimension:\n        assert value >= lastValue;\n        lastValue = value;\n\n        assert value <= splitValue: \"i=\" + i + \" value=\" + value + \" vs splitValue=\" + splitValue;\n        long ord = reader.ord();\n        int docID = reader.docID();\n        assert docID >= 0: \"docID=\" + docID + \" reader=\" + reader;\n\n        // We should never see dup ords:\n        assert bitSet.get(ord) == false;\n        bitSet.set(ord);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(reader);\n      } else {\n        IOUtils.closeWhileHandlingException(reader);\n      }\n    }\n\n    assert leftCount == bitSet.cardinality(): \"leftCount=\" + leftCount + \" cardinality=\" + bitSet.cardinality();\n\n    return splitValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f64b7098768253180859cd8faeae6b1a185b06ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["f64b7098768253180859cd8faeae6b1a185b06ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"]},"commit2Childs":{"f64b7098768253180859cd8faeae6b1a185b06ed":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f64b7098768253180859cd8faeae6b1a185b06ed"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}