{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestSetQueries(String,String[],boolean).mjava","commits":[{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestSetQueries(String,String[],boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSetQueries(String fieldName, String[] values, boolean multiValued) {\n    for (int i = 0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i]));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='2']\");\n    }\n    \n    if (multiValued) {\n      clearIndex();\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i], fieldName, values[(i+1)%values.length]));\n      }\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='2']\");\n      }\n      \n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='3']\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ea0ee17420c742b9dc8481e32da40c9a45ff1a1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestSetQueries(String,String[],boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSetQueries(String fieldName, String[] values, boolean multiValued) {\n    for (int i = 0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i]));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='2']\");\n    }\n    \n    if (multiValued) {\n      clearIndex();\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i], fieldName, values[(i+1)%values.length]));\n      }\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='2']\");\n      }\n      \n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='3']\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ea0ee17420c742b9dc8481e32da40c9a45ff1a1","date":1491599485,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestSetQueries(String,String[],boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestSetQueries(String,String[],boolean).mjava","sourceNew":"  private void doTestSetQueries(String fieldName, String[] values, boolean multiValued) {\n    for (int i = 0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i]));\n    }\n    assertU(commit());\n    SchemaField sf = h.getCore().getLatestSchema().getField(fieldName); \n    assertTrue(sf.getType() instanceof PointField);\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='2']\");\n    }\n    \n    assertTrue(values.length > SolrQueryParser.TERMS_QUERY_THRESHOLD);\n    int numTerms = SolrQueryParser.TERMS_QUERY_THRESHOLD + 1;\n    StringBuilder builder = new StringBuilder(fieldName + \":(\");\n    for (int i = 0; i < numTerms; i++) {\n      if (sf.getType().getNumberType() == NumberType.DATE) {\n        builder.append(String.valueOf(values[i]).replace(\":\", \"\\\\:\") + ' ');\n      } else {\n        builder.append(String.valueOf(values[i]).replace(\"-\", \"\\\\-\") + ' ');\n      }\n    }\n    builder.append(')');\n    if (sf.indexed()) { // SolrQueryParser should also be generating a PointInSetQuery if indexed\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\",\n          \"//*[@name='parsed_filter_queries']/str[.='(\" + getSetQueryToString(fieldName, values, numTerms) + \")']\");\n    } else {\n      // Won't use PointInSetQuery if the fiels is not indexed, but should match the same docs\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\");\n    }\n\n    if (multiValued) {\n      clearIndex();\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i], fieldName, values[(i+1)%values.length]));\n      }\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='2']\");\n      }\n      \n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='3']\");\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestSetQueries(String fieldName, String[] values, boolean multiValued) {\n    for (int i = 0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i]));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='2']\");\n    }\n    \n    if (multiValued) {\n      clearIndex();\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i], fieldName, values[(i+1)%values.length]));\n      }\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='2']\");\n      }\n      \n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='3']\");\n      }\n    }\n  }\n\n","bugFix":["46dc9ac8b3e748407baaef82453138ff3974480c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestSetQueries(String,String[],boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestSetQueries(String,String[],boolean).mjava","sourceNew":"  private void doTestSetQueries(String fieldName, String[] values, boolean multiValued) {\n    for (int i = 0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i]));\n    }\n    assertU(commit());\n    SchemaField sf = h.getCore().getLatestSchema().getField(fieldName); \n    assertTrue(sf.getType() instanceof PointField);\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='2']\");\n    }\n    \n    assertTrue(values.length > SolrQueryParser.TERMS_QUERY_THRESHOLD);\n    int numTerms = SolrQueryParser.TERMS_QUERY_THRESHOLD + 1;\n    StringBuilder builder = new StringBuilder(fieldName + \":(\");\n    for (int i = 0; i < numTerms; i++) {\n      if (sf.getType().getNumberType() == NumberType.DATE) {\n        builder.append(String.valueOf(values[i]).replace(\":\", \"\\\\:\") + ' ');\n      } else {\n        builder.append(String.valueOf(values[i]).replace(\"-\", \"\\\\-\") + ' ');\n      }\n    }\n    builder.append(')');\n    if (sf.indexed()) { // SolrQueryParser should also be generating a PointInSetQuery if indexed\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\",\n          \"//*[@name='parsed_filter_queries']/str[.='(\" + getSetQueryToString(fieldName, values, numTerms) + \")']\");\n    } else {\n      // Won't use PointInSetQuery if the fiels is not indexed, but should match the same docs\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\");\n    }\n\n    if (multiValued) {\n      clearIndex();\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i], fieldName, values[(i+1)%values.length]));\n      }\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='2']\");\n      }\n      \n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='3']\");\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestSetQueries(String fieldName, String[] values, boolean multiValued) {\n    for (int i = 0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i]));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='2']\");\n    }\n    \n    if (multiValued) {\n      clearIndex();\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i], fieldName, values[(i+1)%values.length]));\n      }\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='2']\");\n      }\n      \n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='3']\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa","date":1496877670,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestSetQueries(String,String[],boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestSetQueries(String,String[],boolean).mjava","sourceNew":"  private void doTestSetQueries(String fieldName, String[] values, boolean multiValued) {\n    for (int i = 0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i]));\n    }\n    assertU(commit());\n    SchemaField sf = h.getCore().getLatestSchema().getField(fieldName); \n    assertTrue(sf.getType() instanceof PointField);\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='2']\");\n    }\n    \n    assertTrue(values.length > SolrQueryParser.TERMS_QUERY_THRESHOLD);\n    int numTerms = SolrQueryParser.TERMS_QUERY_THRESHOLD + 1;\n    StringBuilder builder = new StringBuilder(fieldName + \":(\");\n    for (int i = 0; i < numTerms; i++) {\n      if (sf.getType().getNumberType() == NumberType.DATE) {\n        builder.append(values[i].replaceAll(\"(:|^[-+])\", \"\\\\\\\\$1\") + ' ');\n      } else {\n        builder.append(String.valueOf(values[i]).replace(\"-\", \"\\\\-\") + ' ');\n      }\n    }\n    builder.append(')');\n    if (sf.indexed()) { // SolrQueryParser should also be generating a PointInSetQuery if indexed\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\",\n          \"//*[@name='parsed_filter_queries']/str[.='(\" + getSetQueryToString(fieldName, values, numTerms) + \")']\");\n    } else {\n      // Won't use PointInSetQuery if the field is not indexed, but should match the same docs\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\");\n    }\n\n    if (multiValued) {\n      clearIndex();\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i], fieldName, values[(i+1)%values.length]));\n      }\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='2']\");\n      }\n      \n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='3']\");\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestSetQueries(String fieldName, String[] values, boolean multiValued) {\n    for (int i = 0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i]));\n    }\n    assertU(commit());\n    SchemaField sf = h.getCore().getLatestSchema().getField(fieldName); \n    assertTrue(sf.getType() instanceof PointField);\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='2']\");\n    }\n    \n    assertTrue(values.length > SolrQueryParser.TERMS_QUERY_THRESHOLD);\n    int numTerms = SolrQueryParser.TERMS_QUERY_THRESHOLD + 1;\n    StringBuilder builder = new StringBuilder(fieldName + \":(\");\n    for (int i = 0; i < numTerms; i++) {\n      if (sf.getType().getNumberType() == NumberType.DATE) {\n        builder.append(String.valueOf(values[i]).replace(\":\", \"\\\\:\") + ' ');\n      } else {\n        builder.append(String.valueOf(values[i]).replace(\"-\", \"\\\\-\") + ' ');\n      }\n    }\n    builder.append(')');\n    if (sf.indexed()) { // SolrQueryParser should also be generating a PointInSetQuery if indexed\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\",\n          \"//*[@name='parsed_filter_queries']/str[.='(\" + getSetQueryToString(fieldName, values, numTerms) + \")']\");\n    } else {\n      // Won't use PointInSetQuery if the fiels is not indexed, but should match the same docs\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\");\n    }\n\n    if (multiValued) {\n      clearIndex();\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i], fieldName, values[(i+1)%values.length]));\n      }\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='2']\");\n      }\n      \n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='3']\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f344bb33ca91f48e99c061980115b46fa84fc8f5","date":1496903283,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestSetQueries(String,String[],boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestSetQueries(String,String[],boolean).mjava","sourceNew":"  private void doTestSetQueries(String fieldName, String[] values, boolean multiValued) {\n    for (int i = 0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i]));\n    }\n    assertU(commit());\n    SchemaField sf = h.getCore().getLatestSchema().getField(fieldName); \n    assertTrue(sf.getType() instanceof PointField);\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='2']\");\n    }\n    \n    assertTrue(values.length > SolrQueryParser.TERMS_QUERY_THRESHOLD);\n    int numTerms = SolrQueryParser.TERMS_QUERY_THRESHOLD + 1;\n    StringBuilder builder = new StringBuilder(fieldName + \":(\");\n    for (int i = 0; i < numTerms; i++) {\n      if (sf.getType().getNumberType() == NumberType.DATE) {\n        builder.append(values[i].replaceAll(\"(:|^[-+])\", \"\\\\\\\\$1\") + ' ');\n      } else {\n        builder.append(String.valueOf(values[i]).replace(\"-\", \"\\\\-\") + ' ');\n      }\n    }\n    builder.append(')');\n    if (sf.indexed()) { // SolrQueryParser should also be generating a PointInSetQuery if indexed\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\",\n          \"//*[@name='parsed_filter_queries']/str[.='(\" + getSetQueryToString(fieldName, values, numTerms) + \")']\");\n    } else {\n      // Won't use PointInSetQuery if the field is not indexed, but should match the same docs\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\");\n    }\n\n    if (multiValued) {\n      clearIndex();\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i], fieldName, values[(i+1)%values.length]));\n      }\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='2']\");\n      }\n      \n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='3']\");\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestSetQueries(String fieldName, String[] values, boolean multiValued) {\n    for (int i = 0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i]));\n    }\n    assertU(commit());\n    SchemaField sf = h.getCore().getLatestSchema().getField(fieldName); \n    assertTrue(sf.getType() instanceof PointField);\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='2']\");\n    }\n    \n    assertTrue(values.length > SolrQueryParser.TERMS_QUERY_THRESHOLD);\n    int numTerms = SolrQueryParser.TERMS_QUERY_THRESHOLD + 1;\n    StringBuilder builder = new StringBuilder(fieldName + \":(\");\n    for (int i = 0; i < numTerms; i++) {\n      if (sf.getType().getNumberType() == NumberType.DATE) {\n        builder.append(String.valueOf(values[i]).replace(\":\", \"\\\\:\") + ' ');\n      } else {\n        builder.append(String.valueOf(values[i]).replace(\"-\", \"\\\\-\") + ' ');\n      }\n    }\n    builder.append(')');\n    if (sf.indexed()) { // SolrQueryParser should also be generating a PointInSetQuery if indexed\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\",\n          \"//*[@name='parsed_filter_queries']/str[.='(\" + getSetQueryToString(fieldName, values, numTerms) + \")']\");\n    } else {\n      // Won't use PointInSetQuery if the fiels is not indexed, but should match the same docs\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\");\n    }\n\n    if (multiValued) {\n      clearIndex();\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i], fieldName, values[(i+1)%values.length]));\n      }\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='2']\");\n      }\n      \n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='3']\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestSetQueries(String,String[],boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestSetQueries(String,String[],boolean).mjava","sourceNew":"  private void doTestSetQueries(String fieldName, String[] values, boolean multiValued) {\n    for (int i = 0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i]));\n    }\n    assertU(commit());\n    SchemaField sf = h.getCore().getLatestSchema().getField(fieldName); \n    assertTrue(sf.getType() instanceof PointField);\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='2']\");\n    }\n    \n    assertTrue(values.length > SolrQueryParser.TERMS_QUERY_THRESHOLD);\n    int numTerms = SolrQueryParser.TERMS_QUERY_THRESHOLD + 1;\n    StringBuilder builder = new StringBuilder(fieldName + \":(\");\n    for (int i = 0; i < numTerms; i++) {\n      if (sf.getType().getNumberType() == NumberType.DATE) {\n        builder.append(values[i].replaceAll(\"(:|^[-+])\", \"\\\\\\\\$1\") + ' ');\n      } else {\n        builder.append(String.valueOf(values[i]).replace(\"-\", \"\\\\-\") + ' ');\n      }\n    }\n    builder.append(')');\n    if (sf.indexed()) { // SolrQueryParser should also be generating a PointInSetQuery if indexed\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\",\n          \"//*[@name='parsed_filter_queries']/str[.='(\" + getSetQueryToString(fieldName, values, numTerms) + \")']\");\n    } else {\n      // Won't use PointInSetQuery if the field is not indexed, but should match the same docs\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\");\n    }\n\n    if (multiValued) {\n      clearIndex();\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i], fieldName, values[(i+1)%values.length]));\n      }\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='2']\");\n      }\n      \n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='3']\");\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestSetQueries(String fieldName, String[] values, boolean multiValued) {\n    for (int i = 0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i]));\n    }\n    assertU(commit());\n    SchemaField sf = h.getCore().getLatestSchema().getField(fieldName); \n    assertTrue(sf.getType() instanceof PointField);\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='2']\");\n    }\n    \n    assertTrue(values.length > SolrQueryParser.TERMS_QUERY_THRESHOLD);\n    int numTerms = SolrQueryParser.TERMS_QUERY_THRESHOLD + 1;\n    StringBuilder builder = new StringBuilder(fieldName + \":(\");\n    for (int i = 0; i < numTerms; i++) {\n      if (sf.getType().getNumberType() == NumberType.DATE) {\n        builder.append(String.valueOf(values[i]).replace(\":\", \"\\\\:\") + ' ');\n      } else {\n        builder.append(String.valueOf(values[i]).replace(\"-\", \"\\\\-\") + ' ');\n      }\n    }\n    builder.append(')');\n    if (sf.indexed()) { // SolrQueryParser should also be generating a PointInSetQuery if indexed\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\",\n          \"//*[@name='parsed_filter_queries']/str[.='(\" + getSetQueryToString(fieldName, values, numTerms) + \")']\");\n    } else {\n      // Won't use PointInSetQuery if the fiels is not indexed, but should match the same docs\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\");\n    }\n\n    if (multiValued) {\n      clearIndex();\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i], fieldName, values[(i+1)%values.length]));\n      }\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='2']\");\n      }\n      \n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='3']\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestSetQueries(String,String[],boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestSetQueries(String,String[],boolean).mjava","sourceNew":"  private void doTestSetQueries(String fieldName, String[] values, boolean multiValued) {\n    for (int i = 0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i]));\n    }\n    assertU(commit());\n    SchemaField sf = h.getCore().getLatestSchema().getField(fieldName); \n    assertTrue(sf.getType() instanceof PointField);\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='2']\");\n    }\n    \n    assertTrue(values.length > SolrQueryParser.TERMS_QUERY_THRESHOLD);\n    int numTerms = SolrQueryParser.TERMS_QUERY_THRESHOLD + 1;\n    StringBuilder builder = new StringBuilder(fieldName + \":(\");\n    for (int i = 0; i < numTerms; i++) {\n      if (sf.getType().getNumberType() == NumberType.DATE) {\n        builder.append(values[i].replaceAll(\"(:|^[-+])\", \"\\\\\\\\$1\") + ' ');\n      } else {\n        builder.append(String.valueOf(values[i]).replace(\"-\", \"\\\\-\") + ' ');\n      }\n    }\n    builder.append(')');\n    if (sf.indexed()) { // SolrQueryParser should also be generating a PointInSetQuery if indexed\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\",\n          \"//*[@name='parsed_filter_queries']/str[.='(\" + getSetQueryToString(fieldName, values, numTerms) + \")']\");\n    } else {\n      // Won't use PointInSetQuery if the field is not indexed, but should match the same docs\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\");\n    }\n\n    if (multiValued) {\n      clearIndex();\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i], fieldName, values[(i+1)%values.length]));\n      }\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='2']\");\n      }\n      \n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='3']\");\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestSetQueries(String fieldName, String[] values, boolean multiValued) {\n    for (int i = 0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i]));\n    }\n    assertU(commit());\n    SchemaField sf = h.getCore().getLatestSchema().getField(fieldName); \n    assertTrue(sf.getType() instanceof PointField);\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='2']\");\n    }\n    \n    assertTrue(values.length > SolrQueryParser.TERMS_QUERY_THRESHOLD);\n    int numTerms = SolrQueryParser.TERMS_QUERY_THRESHOLD + 1;\n    StringBuilder builder = new StringBuilder(fieldName + \":(\");\n    for (int i = 0; i < numTerms; i++) {\n      if (sf.getType().getNumberType() == NumberType.DATE) {\n        builder.append(String.valueOf(values[i]).replace(\":\", \"\\\\:\") + ' ');\n      } else {\n        builder.append(String.valueOf(values[i]).replace(\"-\", \"\\\\-\") + ' ');\n      }\n    }\n    builder.append(')');\n    if (sf.indexed()) { // SolrQueryParser should also be generating a PointInSetQuery if indexed\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\",\n          \"//*[@name='parsed_filter_queries']/str[.='(\" + getSetQueryToString(fieldName, values, numTerms) + \")']\");\n    } else {\n      // Won't use PointInSetQuery if the fiels is not indexed, but should match the same docs\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\");\n    }\n\n    if (multiValued) {\n      clearIndex();\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i], fieldName, values[(i+1)%values.length]));\n      }\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='2']\");\n      }\n      \n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='3']\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e844d4f9ba6804f10747d7e51e83a9a8868c94","date":1500054875,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestSetQueries(String,String[],boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestSetQueries(String,String[],boolean).mjava","sourceNew":"  private void doTestSetQueries(String fieldName, String[] values, boolean multiValued) {\n    for (int i = 0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i]));\n    }\n    assertU(commit());\n    SchemaField sf = h.getCore().getLatestSchema().getField(fieldName); \n    assertTrue(sf.getType() instanceof PointField);\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='2']\");\n    }\n    \n    assertTrue(values.length > SolrQueryParser.TERMS_QUERY_THRESHOLD);\n    int numTerms = SolrQueryParser.TERMS_QUERY_THRESHOLD + 1;\n    StringBuilder builder = new StringBuilder(fieldName + \":(\");\n    for (int i = 0; i < numTerms; i++) {\n      if (sf.getType().getNumberType() == NumberType.DATE) {\n        builder.append(values[i].replaceAll(\"(:|^[-+])\", \"\\\\\\\\$1\")).append(' ');\n      } else {\n        builder.append(String.valueOf(values[i]).replace(\"-\", \"\\\\-\")).append(' ');\n      }\n    }\n    builder.append(')');\n    if (sf.indexed()) { // SolrQueryParser should also be generating a PointInSetQuery if indexed\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\",\n          \"//*[@name='parsed_filter_queries']/str[.='(\" + getSetQueryToString(fieldName, values, numTerms) + \")']\");\n    } else {\n      // Won't use PointInSetQuery if the field is not indexed, but should match the same docs\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\");\n    }\n\n    if (multiValued) {\n      clearIndex();\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i], fieldName, values[(i+1)%values.length]));\n      }\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='2']\");\n      }\n      \n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='3']\");\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestSetQueries(String fieldName, String[] values, boolean multiValued) {\n    for (int i = 0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i]));\n    }\n    assertU(commit());\n    SchemaField sf = h.getCore().getLatestSchema().getField(fieldName); \n    assertTrue(sf.getType() instanceof PointField);\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='2']\");\n    }\n    \n    assertTrue(values.length > SolrQueryParser.TERMS_QUERY_THRESHOLD);\n    int numTerms = SolrQueryParser.TERMS_QUERY_THRESHOLD + 1;\n    StringBuilder builder = new StringBuilder(fieldName + \":(\");\n    for (int i = 0; i < numTerms; i++) {\n      if (sf.getType().getNumberType() == NumberType.DATE) {\n        builder.append(values[i].replaceAll(\"(:|^[-+])\", \"\\\\\\\\$1\") + ' ');\n      } else {\n        builder.append(String.valueOf(values[i]).replace(\"-\", \"\\\\-\") + ' ');\n      }\n    }\n    builder.append(')');\n    if (sf.indexed()) { // SolrQueryParser should also be generating a PointInSetQuery if indexed\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\",\n          \"//*[@name='parsed_filter_queries']/str[.='(\" + getSetQueryToString(fieldName, values, numTerms) + \")']\");\n    } else {\n      // Won't use PointInSetQuery if the field is not indexed, but should match the same docs\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\");\n    }\n\n    if (multiValued) {\n      clearIndex();\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i], fieldName, values[(i+1)%values.length]));\n      }\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='2']\");\n      }\n      \n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='3']\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestSetQueries(String,String[],boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestSetQueries(String,String[],boolean).mjava","sourceNew":"  private void doTestSetQueries(String fieldName, String[] values, boolean multiValued) {\n    for (int i = 0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i]));\n    }\n    assertU(commit());\n    SchemaField sf = h.getCore().getLatestSchema().getField(fieldName); \n    assertTrue(sf.getType() instanceof PointField);\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='2']\");\n    }\n    \n    assertTrue(values.length > SolrQueryParser.TERMS_QUERY_THRESHOLD);\n    int numTerms = SolrQueryParser.TERMS_QUERY_THRESHOLD + 1;\n    StringBuilder builder = new StringBuilder(fieldName + \":(\");\n    for (int i = 0; i < numTerms; i++) {\n      if (sf.getType().getNumberType() == NumberType.DATE) {\n        builder.append(values[i].replaceAll(\"(:|^[-+])\", \"\\\\\\\\$1\")).append(' ');\n      } else {\n        builder.append(String.valueOf(values[i]).replace(\"-\", \"\\\\-\")).append(' ');\n      }\n    }\n    builder.append(')');\n    if (sf.indexed()) { // SolrQueryParser should also be generating a PointInSetQuery if indexed\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\",\n          \"//*[@name='parsed_filter_queries']/str[.='(\" + getSetQueryToString(fieldName, values, numTerms) + \")']\");\n    } else {\n      // Won't use PointInSetQuery if the field is not indexed, but should match the same docs\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\");\n    }\n\n    if (multiValued) {\n      clearIndex();\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i], fieldName, values[(i+1)%values.length]));\n      }\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='2']\");\n      }\n      \n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='3']\");\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestSetQueries(String fieldName, String[] values, boolean multiValued) {\n    for (int i = 0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i]));\n    }\n    assertU(commit());\n    SchemaField sf = h.getCore().getLatestSchema().getField(fieldName); \n    assertTrue(sf.getType() instanceof PointField);\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='2']\");\n    }\n    \n    assertTrue(values.length > SolrQueryParser.TERMS_QUERY_THRESHOLD);\n    int numTerms = SolrQueryParser.TERMS_QUERY_THRESHOLD + 1;\n    StringBuilder builder = new StringBuilder(fieldName + \":(\");\n    for (int i = 0; i < numTerms; i++) {\n      if (sf.getType().getNumberType() == NumberType.DATE) {\n        builder.append(values[i].replaceAll(\"(:|^[-+])\", \"\\\\\\\\$1\") + ' ');\n      } else {\n        builder.append(String.valueOf(values[i]).replace(\"-\", \"\\\\-\") + ' ');\n      }\n    }\n    builder.append(')');\n    if (sf.indexed()) { // SolrQueryParser should also be generating a PointInSetQuery if indexed\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\",\n          \"//*[@name='parsed_filter_queries']/str[.='(\" + getSetQueryToString(fieldName, values, numTerms) + \")']\");\n    } else {\n      // Won't use PointInSetQuery if the field is not indexed, but should match the same docs\n      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, \"q\", \"*:*\", \"fq\", builder.toString(), \"fl\", \"id,\" + fieldName), \n          \"//*[@numFound='\" + numTerms + \"']\");\n    }\n\n    if (multiValued) {\n      clearIndex();\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), fieldName, values[i], fieldName, values[(i+1)%values.length]));\n      }\n      assertU(commit());\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!term f='\" + fieldName + \"'}\" + values[i], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='2']\");\n      }\n      \n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"q\", \"{!terms f='\" + fieldName + \"'}\" + values[i] + \",\" + values[(i + 1)%values.length], \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='3']\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["46dc9ac8b3e748407baaef82453138ff3974480c"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"46dc9ac8b3e748407baaef82453138ff3974480c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa":["5ea0ee17420c742b9dc8481e32da40c9a45ff1a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ea0ee17420c742b9dc8481e32da40c9a45ff1a1":["46dc9ac8b3e748407baaef82453138ff3974480c"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["5ea0ee17420c742b9dc8481e32da40c9a45ff1a1","b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["5ea0ee17420c742b9dc8481e32da40c9a45ff1a1","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46dc9ac8b3e748407baaef82453138ff3974480c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"46dc9ac8b3e748407baaef82453138ff3974480c":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","5ea0ee17420c742b9dc8481e32da40c9a45ff1a1","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa":["f344bb33ca91f48e99c061980115b46fa84fc8f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"5ea0ee17420c742b9dc8481e32da40c9a45ff1a1":["b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa","f344bb33ca91f48e99c061980115b46fa84fc8f5","28288370235ed02234a64753cdbf0c6ec096304a"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["aaf90fc29510e72665ac7934f34c3d1c25efad64"],"28288370235ed02234a64753cdbf0c6ec096304a":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}