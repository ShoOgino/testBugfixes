{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#addIndexedFields(Document,String[],String[]).mjava","commits":[{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#addIndexedFields(Document,String[],String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Indexes a series of trie coded values into a lucene {@link Document}\n   * using the given field names.\n   * If the array of field names is shorter than the trie coded one, all trie coded\n   * values with higher index get the last field name.\n   * <p>This method does not store the fields and saves no term frequency or norms\n   * (which are normally not needed for trie fields). If you want to additionally store\n   * the value, you can use the normal methods of {@link Document} to achive this, just specify\n   * <code>Field.Store.YES</code>, <code>Field.Index.NO</code> and the same main field name.\n   **/\n  public static void addIndexedFields(Document doc, String[] fields, String[] trieCoded) {\n    for (int i=0; i<trieCoded.length; i++) {\n      final int fnum = Math.min(fields.length-1, i);\n      final Field f = new Field(fields[fnum], trieCoded[i], Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS);\n      f.setOmitTf(true);\n      doc.add(f);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"066b6ff5a08e35c3b6880e7c3ddda79526acdab1","date":1237569961,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#addIndexedFields(Document,String[],String[]).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#addIndexedFields(Document,String[],String[]).mjava","sourceNew":"  /**\n   * Expert: Indexes a series of trie coded values into a lucene {@link Document}\n   * using the given field names.\n   * If the array of field names is shorter than the trie coded one, all trie coded\n   * values with higher index get the last field name.\n   * <p>This method does not store the fields and saves no term frequency or norms\n   * (which are normally not needed for trie fields). If you want to additionally store\n   * the value, you can use the normal methods of {@link Document} to achive this, just specify\n   * <code>Field.Store.YES</code>, <code>Field.Index.NO</code> and the same main field name.\n   **/\n  public static void addIndexedFields(Document doc, String[] fields, String[] trieCoded) {\n    for (int i=0; i<trieCoded.length; i++) {\n      final int fnum = Math.min(fields.length-1, i);\n      final Field f = new Field(fields[fnum], trieCoded[i], Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS);\n      f.setOmitTermFreqAndPositions(true);\n      doc.add(f);\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Indexes a series of trie coded values into a lucene {@link Document}\n   * using the given field names.\n   * If the array of field names is shorter than the trie coded one, all trie coded\n   * values with higher index get the last field name.\n   * <p>This method does not store the fields and saves no term frequency or norms\n   * (which are normally not needed for trie fields). If you want to additionally store\n   * the value, you can use the normal methods of {@link Document} to achive this, just specify\n   * <code>Field.Store.YES</code>, <code>Field.Index.NO</code> and the same main field name.\n   **/\n  public static void addIndexedFields(Document doc, String[] fields, String[] trieCoded) {\n    for (int i=0; i<trieCoded.length; i++) {\n      final int fnum = Math.min(fields.length-1, i);\n      final Field f = new Field(fields[fnum], trieCoded[i], Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS);\n      f.setOmitTf(true);\n      doc.add(f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1","date":1239104855,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#addIndexedFields(Document,String[],String[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: Indexes a series of trie coded values into a lucene {@link Document}\n   * using the given field names.\n   * If the array of field names is shorter than the trie coded one, all trie coded\n   * values with higher index get the last field name.\n   * <p>This method does not store the fields and saves no term frequency or norms\n   * (which are normally not needed for trie fields). If you want to additionally store\n   * the value, you can use the normal methods of {@link Document} to achive this, just specify\n   * <code>Field.Store.YES</code>, <code>Field.Index.NO</code> and the same main field name.\n   **/\n  public static void addIndexedFields(Document doc, String[] fields, String[] trieCoded) {\n    for (int i=0; i<trieCoded.length; i++) {\n      final int fnum = Math.min(fields.length-1, i);\n      final Field f = new Field(fields[fnum], trieCoded[i], Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS);\n      f.setOmitTermFreqAndPositions(true);\n      doc.add(f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"]},"commit2Childs":{"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}