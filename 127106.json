{"path":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#finishStage(ResponseBuilder).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      SearchClusteringEngine engine = getSearchClusteringEngine(rb);\n      if (engine != null) {\n        SolrDocumentList solrDocList = (SolrDocumentList)rb.rsp.getValues().get(\"response\");\n        // TODO: Currently, docIds is set to null in distributed environment.\n        // This causes CarrotParams.PRODUCE_SUMMARY doesn't work.\n        // To work CarrotParams.PRODUCE_SUMMARY under distributed mode, we can choose either one of:\n        // (a) In each shard, ClusteringComponent produces summary and finishStage()\n        //     merges these summaries.\n        // (b) Adding doHighlighting(SolrDocumentList, ...) method to SolrHighlighter and\n        //     making SolrHighlighter uses \"external text\" rather than stored values to produce snippets.\n        Map<SolrDocument,Integer> docIds = null;\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        String name = getClusteringEngineName(rb);\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      SearchClusteringEngine engine = getSearchClusteringEngine(rb);\n      if (engine != null) {\n        SolrDocumentList solrDocList = (SolrDocumentList)rb.rsp.getValues().get(\"response\");\n        // TODO: Currently, docIds is set to null in distributed environment.\n        // This causes CarrotParams.PRODUCE_SUMMARY doesn't work.\n        // To work CarrotParams.PRODUCE_SUMMARY under distributed mode, we can choose either one of:\n        // (a) In each shard, ClusteringComponent produces summary and finishStage()\n        //     merges these summaries.\n        // (b) Adding doHighlighting(SolrDocumentList, ...) method to SolrHighlighter and\n        //     making SolrHighlighter uses \"external text\" rather than stored values to produce snippets.\n        Map<SolrDocument,Integer> docIds = null;\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        String name = getClusteringEngineName(rb);\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      SearchClusteringEngine engine = getSearchClusteringEngine(rb);\n      if (engine != null) {\n        SolrDocumentList solrDocList = (SolrDocumentList)rb.rsp.getValues().get(\"response\");\n        // TODO: Currently, docIds is set to null in distributed environment.\n        // This causes CarrotParams.PRODUCE_SUMMARY doesn't work.\n        // To work CarrotParams.PRODUCE_SUMMARY under distributed mode, we can choose either one of:\n        // (a) In each shard, ClusteringComponent produces summary and finishStage()\n        //     merges these summaries.\n        // (b) Adding doHighlighting(SolrDocumentList, ...) method to SolrHighlighter and\n        //     making SolrHighlighter uses \"external text\" rather than stored values to produce snippets.\n        Map<SolrDocument,Integer> docIds = null;\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        String name = getClusteringEngineName(rb);\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      SearchClusteringEngine engine = getSearchClusteringEngine(rb);\n      if (engine != null) {\n        SolrDocumentList solrDocList = (SolrDocumentList)rb.rsp.getValues().get(\"response\");\n        // TODO: Currently, docIds is set to null in distributed environment.\n        // This causes CarrotParams.PRODUCE_SUMMARY doesn't work.\n        // To work CarrotParams.PRODUCE_SUMMARY under distributed mode, we can choose either one of:\n        // (a) In each shard, ClusteringComponent produces summary and finishStage()\n        //     merges these summaries.\n        // (b) Adding doHighlighting(SolrDocumentList, ...) method to SolrHighlighter and\n        //     making SolrHighlighter uses \"external text\" rather than stored values to produce snippets.\n        Map<SolrDocument,Integer> docIds = null;\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        String name = getClusteringEngineName(rb);\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5","date":1440505299,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || \n        !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      String name = getClusteringEngineName(rb);\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        SolrDocumentList solrDocList = (SolrDocumentList) rb.rsp.getValues().get(\"response\");\n        // TODO: Currently, docIds is set to null in distributed environment.\n        // This causes CarrotParams.PRODUCE_SUMMARY doesn't work.\n        // To work CarrotParams.PRODUCE_SUMMARY under distributed mode, we can choose either one of:\n        // (a) In each shard, ClusteringComponent produces summary and finishStage()\n        //     merges these summaries.\n        // (b) Adding doHighlighting(SolrDocumentList, ...) method to SolrHighlighter and\n        //     making SolrHighlighter uses \"external text\" rather than stored values to produce snippets.\n        Map<SolrDocument,Integer> docIds = null;\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      SearchClusteringEngine engine = getSearchClusteringEngine(rb);\n      if (engine != null) {\n        SolrDocumentList solrDocList = (SolrDocumentList)rb.rsp.getValues().get(\"response\");\n        // TODO: Currently, docIds is set to null in distributed environment.\n        // This causes CarrotParams.PRODUCE_SUMMARY doesn't work.\n        // To work CarrotParams.PRODUCE_SUMMARY under distributed mode, we can choose either one of:\n        // (a) In each shard, ClusteringComponent produces summary and finishStage()\n        //     merges these summaries.\n        // (b) Adding doHighlighting(SolrDocumentList, ...) method to SolrHighlighter and\n        //     making SolrHighlighter uses \"external text\" rather than stored values to produce snippets.\n        Map<SolrDocument,Integer> docIds = null;\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        String name = getClusteringEngineName(rb);\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecd75942508378ccc92c3a26f71db6cba9f25784","date":1450708761,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || \n        !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      String name = getClusteringEngineName(rb);\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        SolrDocumentList solrDocList = (SolrDocumentList) rb.rsp.getResponse();\n        // TODO: Currently, docIds is set to null in distributed environment.\n        // This causes CarrotParams.PRODUCE_SUMMARY doesn't work.\n        // To work CarrotParams.PRODUCE_SUMMARY under distributed mode, we can choose either one of:\n        // (a) In each shard, ClusteringComponent produces summary and finishStage()\n        //     merges these summaries.\n        // (b) Adding doHighlighting(SolrDocumentList, ...) method to SolrHighlighter and\n        //     making SolrHighlighter uses \"external text\" rather than stored values to produce snippets.\n        Map<SolrDocument,Integer> docIds = null;\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || \n        !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      String name = getClusteringEngineName(rb);\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        SolrDocumentList solrDocList = (SolrDocumentList) rb.rsp.getValues().get(\"response\");\n        // TODO: Currently, docIds is set to null in distributed environment.\n        // This causes CarrotParams.PRODUCE_SUMMARY doesn't work.\n        // To work CarrotParams.PRODUCE_SUMMARY under distributed mode, we can choose either one of:\n        // (a) In each shard, ClusteringComponent produces summary and finishStage()\n        //     merges these summaries.\n        // (b) Adding doHighlighting(SolrDocumentList, ...) method to SolrHighlighter and\n        //     making SolrHighlighter uses \"external text\" rather than stored values to produce snippets.\n        Map<SolrDocument,Integer> docIds = null;\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || \n        !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      String name = getClusteringEngineName(rb);\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        SolrDocumentList solrDocList = (SolrDocumentList) rb.rsp.getResponse();\n        // TODO: Currently, docIds is set to null in distributed environment.\n        // This causes CarrotParams.PRODUCE_SUMMARY doesn't work.\n        // To work CarrotParams.PRODUCE_SUMMARY under distributed mode, we can choose either one of:\n        // (a) In each shard, ClusteringComponent produces summary and finishStage()\n        //     merges these summaries.\n        // (b) Adding doHighlighting(SolrDocumentList, ...) method to SolrHighlighter and\n        //     making SolrHighlighter uses \"external text\" rather than stored values to produce snippets.\n        Map<SolrDocument,Integer> docIds = null;\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine named: {}\", name);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || \n        !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      String name = getClusteringEngineName(rb);\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        SolrDocumentList solrDocList = (SolrDocumentList) rb.rsp.getResponse();\n        // TODO: Currently, docIds is set to null in distributed environment.\n        // This causes CarrotParams.PRODUCE_SUMMARY doesn't work.\n        // To work CarrotParams.PRODUCE_SUMMARY under distributed mode, we can choose either one of:\n        // (a) In each shard, ClusteringComponent produces summary and finishStage()\n        //     merges these summaries.\n        // (b) Adding doHighlighting(SolrDocumentList, ...) method to SolrHighlighter and\n        //     making SolrHighlighter uses \"external text\" rather than stored values to produce snippets.\n        Map<SolrDocument,Integer> docIds = null;\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5":["c26f00b574427b55127e869b935845554afde1fa"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}