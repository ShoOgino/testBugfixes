{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","commits":[{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testRamBytesUsedConstantEntryOverhead().mjava","sourceNew":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    final LRUFilterCache filterCache = new LRUFilterCache(1000000, 10000000);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Filter) {\n          return filterCache.ramBytesUsed((Filter) o);\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final int numFilters = atLeast(1000);\n    for (int i = 0; i < numFilters; ++i) {\n      final Filter filter = new DummyFilter();\n      final Filter cached = filterCache.doCache(filter, FilterCachingPolicy.ALWAYS_CACHE);\n      searcher.search(new ConstantScoreQuery(cached), 1);\n    }\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(filterCache, acc);\n    final long expectedRamBytesUsed = filterCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","pathOld":"/dev/null","sourceNew":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aac61ee5b4492f174e60bd54939aba9539906edf","date":1461245473,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","sourceNew":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b9d3e8d3cc46a280b63ce92478848a10a6f10ae","date":1482779706,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","sourceNew":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    LuceneTestCase.assumeFalse(\"RamUsageTester does not fully work on Java 9\", Constants.JRE_IS_MINIMUM_JAVA9);\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"772af34227438013872590cf48fd0a96c4057704","date":1482972983,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","sourceNew":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    LuceneTestCase.assumeFalse(\"RamUsageTester does not fully work on Java 9\", Constants.JRE_IS_MINIMUM_JAVA9);\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64e0ba026fdd30273fb2aa34ba456ec10690a334","date":1483048614,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","sourceNew":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","sourceNew":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b31781f87f2e572b5c28caf2f83400abe6c05fe7","date":1511944192,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","sourceNew":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return LRUQueryCache.QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7732a106554be0db3e03ac5211e46f6e0c285b8","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","sourceNew":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true, Float.POSITIVE_INFINITY);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return LRUQueryCache.QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return LRUQueryCache.QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","sourceNew":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true, Float.POSITIVE_INFINITY);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return LRUQueryCache.QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"789fb338d3c53b4478938723d60f6623e764ca38","date":1521535944,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","sourceNew":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return LRUQueryCache.QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true, Float.POSITIVE_INFINITY);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return LRUQueryCache.QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","sourceNew":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return LRUQueryCache.QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true, Float.POSITIVE_INFINITY);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return LRUQueryCache.QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c9d00c591703058371b3dc36f4957a6f24ca302","date":1527233410,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","sourceNew":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return LRUQueryCache.QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return LRUQueryCache.QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71ca10e7131e1f01868c80d228f26a855e79dd0","date":1562166223,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","sourceNew":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return LRUQueryCache.QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5754bd6f04f13b67e9575f8b226a0303c31c7d5","date":1573506453,"type":3,"author":"ginger","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","sourceNew":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true, Float.POSITIVE_INFINITY);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64e0ba026fdd30273fb2aa34ba456ec10690a334":["772af34227438013872590cf48fd0a96c4057704"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["1aad05eeff7818b0833c02ac6b743aa72054963b","789fb338d3c53b4478938723d60f6623e764ca38"],"b31781f87f2e572b5c28caf2f83400abe6c05fe7":["64e0ba026fdd30273fb2aa34ba456ec10690a334"],"aac61ee5b4492f174e60bd54939aba9539906edf":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"6c9d00c591703058371b3dc36f4957a6f24ca302":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a71ca10e7131e1f01868c80d228f26a855e79dd0":["6c9d00c591703058371b3dc36f4957a6f24ca302"],"772af34227438013872590cf48fd0a96c4057704":["2b9d3e8d3cc46a280b63ce92478848a10a6f10ae"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["a71ca10e7131e1f01868c80d228f26a855e79dd0"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["aac61ee5b4492f174e60bd54939aba9539906edf","64e0ba026fdd30273fb2aa34ba456ec10690a334"],"c7732a106554be0db3e03ac5211e46f6e0c285b8":["b31781f87f2e572b5c28caf2f83400abe6c05fe7"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["64e0ba026fdd30273fb2aa34ba456ec10690a334","c7732a106554be0db3e03ac5211e46f6e0c285b8"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"789fb338d3c53b4478938723d60f6623e764ca38":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"2b9d3e8d3cc46a280b63ce92478848a10a6f10ae":["aac61ee5b4492f174e60bd54939aba9539906edf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"]},"commit2Childs":{"64e0ba026fdd30273fb2aa34ba456ec10690a334":["b31781f87f2e572b5c28caf2f83400abe6c05fe7","f03e4bed5023ec3ef93a771b8888cae991cf448d","1aad05eeff7818b0833c02ac6b743aa72054963b"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["6c9d00c591703058371b3dc36f4957a6f24ca302"],"b31781f87f2e572b5c28caf2f83400abe6c05fe7":["c7732a106554be0db3e03ac5211e46f6e0c285b8"],"aac61ee5b4492f174e60bd54939aba9539906edf":["f03e4bed5023ec3ef93a771b8888cae991cf448d","2b9d3e8d3cc46a280b63ce92478848a10a6f10ae"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["aac61ee5b4492f174e60bd54939aba9539906edf","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"6c9d00c591703058371b3dc36f4957a6f24ca302":["a71ca10e7131e1f01868c80d228f26a855e79dd0"],"a71ca10e7131e1f01868c80d228f26a855e79dd0":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"],"772af34227438013872590cf48fd0a96c4057704":["64e0ba026fdd30273fb2aa34ba456ec10690a334"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"c7732a106554be0db3e03ac5211e46f6e0c285b8":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","789fb338d3c53b4478938723d60f6623e764ca38"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"789fb338d3c53b4478938723d60f6623e764ca38":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60596f28be69b10c37a56a303c2dbea07b2ca4ba","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"2b9d3e8d3cc46a280b63ce92478848a10a6f10ae":["772af34227438013872590cf48fd0a96c4057704"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f03e4bed5023ec3ef93a771b8888cae991cf448d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}