{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForActiveReplicaCount(CloudSolrClient,String,int).mjava","commits":[{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForActiveReplicaCount(CloudSolrClient,String,int).mjava","pathOld":"/dev/null","sourceNew":"  protected void waitForActiveReplicaCount(CloudSolrClient client, String collection, int expectedNumReplicas) throws TimeoutException, NotInClusterStateException {\n    AtomicInteger nReplicas = new AtomicInteger();\n    try {\n      client.getZkStateReader().waitForState(collection, 30, TimeUnit.SECONDS, (n, c) -> {\n        if (c == null)\n          return false;\n        int numReplicas = getTotalReplicas(c, c.getName());\n        nReplicas.set(numReplicas);\n        if (numReplicas == expectedNumReplicas) return true;\n\n        return false;\n      });\n    } catch (TimeoutException | InterruptedException e) {\n      try {\n        printLayout();\n      } catch (Exception e1) {\n        throw new RuntimeException(e1);\n      }\n      throw new NotInClusterStateException(ErrorCode.SERVER_ERROR,\n          \"Number of replicas in the state does not match what we set:\" + nReplicas + \" vs \" + expectedNumReplicas);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e8c738236bd9fd6a12493d60844585ce125af35c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForActiveReplicaCount(CloudSolrClient,String,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForActiveReplicaCount(CloudSolrClient,String,int).mjava","sourceNew":"  protected void waitForActiveReplicaCount(CloudSolrClient client, String collection, int expectedNumReplicas) throws TimeoutException, NotInClusterStateException {\n    AtomicInteger nReplicas = new AtomicInteger();\n    try {\n      client.getZkStateReader().waitForState(collection, 30, TimeUnit.SECONDS, (c) -> {\n        if (c == null)\n          return false;\n        int numReplicas = getTotalReplicas(c, c.getName());\n        nReplicas.set(numReplicas);\n        if (numReplicas == expectedNumReplicas) return true;\n\n        return false;\n      });\n    } catch (TimeoutException | InterruptedException e) {\n      try {\n        printLayout();\n      } catch (Exception e1) {\n        throw new RuntimeException(e1);\n      }\n      throw new NotInClusterStateException(ErrorCode.SERVER_ERROR,\n          \"Number of replicas in the state does not match what we set:\" + nReplicas + \" vs \" + expectedNumReplicas);\n    }\n  }\n\n","sourceOld":"  protected void waitForActiveReplicaCount(CloudSolrClient client, String collection, int expectedNumReplicas) throws TimeoutException, NotInClusterStateException {\n    AtomicInteger nReplicas = new AtomicInteger();\n    try {\n      client.getZkStateReader().waitForState(collection, 30, TimeUnit.SECONDS, (n, c) -> {\n        if (c == null)\n          return false;\n        int numReplicas = getTotalReplicas(c, c.getName());\n        nReplicas.set(numReplicas);\n        if (numReplicas == expectedNumReplicas) return true;\n\n        return false;\n      });\n    } catch (TimeoutException | InterruptedException e) {\n      try {\n        printLayout();\n      } catch (Exception e1) {\n        throw new RuntimeException(e1);\n      }\n      throw new NotInClusterStateException(ErrorCode.SERVER_ERROR,\n          \"Number of replicas in the state does not match what we set:\" + nReplicas + \" vs \" + expectedNumReplicas);\n    }\n  }\n\n","bugFix":null,"bugIntro":["e8c738236bd9fd6a12493d60844585ce125af35c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8c738236bd9fd6a12493d60844585ce125af35c","date":1564506878,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForActiveReplicaCount(CloudSolrClient,String,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForActiveReplicaCount(CloudSolrClient,String,int).mjava","sourceNew":"  protected void waitForActiveReplicaCount(CloudSolrClient client, String collection, int expectedNumReplicas) throws TimeoutException, NotInClusterStateException {\n    log.debug(\"Waiting to see {} active replicas in collection: {}\", expectedNumReplicas, collection);\n    AtomicInteger nReplicas = new AtomicInteger();\n    try {\n      client.getZkStateReader().waitForState(collection, 30, TimeUnit.SECONDS, (liveNodes, collectionState) -> {\n          if (collectionState == null) {\n            return false;\n          }\n          int activeReplicas = 0;\n          for (Slice slice : collectionState) {\n            for (Replica replica : slice) {\n              if (replica.isActive(liveNodes)) {\n                activeReplicas++;\n              }\n            }\n          }\n          nReplicas.set(activeReplicas);\n          return (activeReplicas == expectedNumReplicas);\n        });\n    } catch (TimeoutException | InterruptedException e) {\n      try {\n        printLayout();\n      } catch (Exception e1) {\n        throw new RuntimeException(e1);\n      }\n      throw new NotInClusterStateException(ErrorCode.SERVER_ERROR,\n          \"Number of replicas in the state does not match what we set:\" + nReplicas + \" vs \" + expectedNumReplicas);\n    }\n  }\n\n","sourceOld":"  protected void waitForActiveReplicaCount(CloudSolrClient client, String collection, int expectedNumReplicas) throws TimeoutException, NotInClusterStateException {\n    AtomicInteger nReplicas = new AtomicInteger();\n    try {\n      client.getZkStateReader().waitForState(collection, 30, TimeUnit.SECONDS, (c) -> {\n        if (c == null)\n          return false;\n        int numReplicas = getTotalReplicas(c, c.getName());\n        nReplicas.set(numReplicas);\n        if (numReplicas == expectedNumReplicas) return true;\n\n        return false;\n      });\n    } catch (TimeoutException | InterruptedException e) {\n      try {\n        printLayout();\n      } catch (Exception e1) {\n        throw new RuntimeException(e1);\n      }\n      throw new NotInClusterStateException(ErrorCode.SERVER_ERROR,\n          \"Number of replicas in the state does not match what we set:\" + nReplicas + \" vs \" + expectedNumReplicas);\n    }\n  }\n\n","bugFix":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","7b366e7dd3172289251a86be96031af4002cd19c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForActiveReplicaCount(CloudSolrClient,String,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForActiveReplicaCount(CloudSolrClient,String,int).mjava","sourceNew":"  protected void waitForActiveReplicaCount(CloudSolrClient client, String collection, int expectedNumReplicas) throws TimeoutException, NotInClusterStateException {\n    log.debug(\"Waiting to see {} active replicas in collection: {}\", expectedNumReplicas, collection);\n    AtomicInteger nReplicas = new AtomicInteger();\n    try {\n      client.getZkStateReader().waitForState(collection, 30, TimeUnit.SECONDS, (liveNodes, collectionState) -> {\n          if (collectionState == null) {\n            return false;\n          }\n          int activeReplicas = 0;\n          for (Slice slice : collectionState) {\n            for (Replica replica : slice) {\n              if (replica.isActive(liveNodes)) {\n                activeReplicas++;\n              }\n            }\n          }\n          nReplicas.set(activeReplicas);\n          return (activeReplicas == expectedNumReplicas);\n        });\n    } catch (TimeoutException | InterruptedException e) {\n      try {\n        printLayout();\n      } catch (Exception e1) {\n        throw new RuntimeException(e1);\n      }\n      throw new NotInClusterStateException(ErrorCode.SERVER_ERROR,\n          \"Number of replicas in the state does not match what we set:\" + nReplicas + \" vs \" + expectedNumReplicas);\n    }\n  }\n\n","sourceOld":"  protected void waitForActiveReplicaCount(CloudSolrClient client, String collection, int expectedNumReplicas) throws TimeoutException, NotInClusterStateException {\n    AtomicInteger nReplicas = new AtomicInteger();\n    try {\n      client.getZkStateReader().waitForState(collection, 30, TimeUnit.SECONDS, (c) -> {\n        if (c == null)\n          return false;\n        int numReplicas = getTotalReplicas(c, c.getName());\n        nReplicas.set(numReplicas);\n        if (numReplicas == expectedNumReplicas) return true;\n\n        return false;\n      });\n    } catch (TimeoutException | InterruptedException e) {\n      try {\n        printLayout();\n      } catch (Exception e1) {\n        throw new RuntimeException(e1);\n      }\n      throw new NotInClusterStateException(ErrorCode.SERVER_ERROR,\n          \"Number of replicas in the state does not match what we set:\" + nReplicas + \" vs \" + expectedNumReplicas);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06f42faae0ab79dde1a569756990bb96283580d","date":1566418420,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForActiveReplicaCount(CloudSolrClient,String,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForActiveReplicaCount(CloudSolrClient,String,int).mjava","sourceNew":"  protected void waitForActiveReplicaCount(CloudSolrClient client, String collection, int expectedNumReplicas) throws TimeoutException, NotInClusterStateException {\n    log.info(\"Waiting to see {} active replicas in collection: {}\", expectedNumReplicas, collection);\n    AtomicInteger nReplicas = new AtomicInteger();\n    try {\n      client.getZkStateReader().waitForState(collection, 30, TimeUnit.SECONDS, (liveNodes, collectionState) -> {\n          if (collectionState == null) {\n            return false;\n          }\n          int activeReplicas = 0;\n          for (Slice slice : collectionState) {\n            for (Replica replica : slice) {\n              if (replica.isActive(liveNodes)) {\n                activeReplicas++;\n              }\n            }\n          }\n          nReplicas.set(activeReplicas);\n          return (activeReplicas == expectedNumReplicas);\n        });\n    } catch (TimeoutException | InterruptedException e) {\n      try {\n        printLayout();\n      } catch (Exception e1) {\n        throw new RuntimeException(e1);\n      }\n      throw new NotInClusterStateException(ErrorCode.SERVER_ERROR,\n          \"Number of replicas in the state does not match what we set:\" + nReplicas + \" vs \" + expectedNumReplicas);\n    }\n  }\n\n","sourceOld":"  protected void waitForActiveReplicaCount(CloudSolrClient client, String collection, int expectedNumReplicas) throws TimeoutException, NotInClusterStateException {\n    log.debug(\"Waiting to see {} active replicas in collection: {}\", expectedNumReplicas, collection);\n    AtomicInteger nReplicas = new AtomicInteger();\n    try {\n      client.getZkStateReader().waitForState(collection, 30, TimeUnit.SECONDS, (liveNodes, collectionState) -> {\n          if (collectionState == null) {\n            return false;\n          }\n          int activeReplicas = 0;\n          for (Slice slice : collectionState) {\n            for (Replica replica : slice) {\n              if (replica.isActive(liveNodes)) {\n                activeReplicas++;\n              }\n            }\n          }\n          nReplicas.set(activeReplicas);\n          return (activeReplicas == expectedNumReplicas);\n        });\n    } catch (TimeoutException | InterruptedException e) {\n      try {\n        printLayout();\n      } catch (Exception e1) {\n        throw new RuntimeException(e1);\n      }\n      throw new NotInClusterStateException(ErrorCode.SERVER_ERROR,\n          \"Number of replicas in the state does not match what we set:\" + nReplicas + \" vs \" + expectedNumReplicas);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b06f42faae0ab79dde1a569756990bb96283580d":["e8c738236bd9fd6a12493d60844585ce125af35c"],"7b366e7dd3172289251a86be96031af4002cd19c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e8c738236bd9fd6a12493d60844585ce125af35c":["7b366e7dd3172289251a86be96031af4002cd19c"],"f8061ddd97f3352007d927dae445884a6f3d857b":["7b366e7dd3172289251a86be96031af4002cd19c","e8c738236bd9fd6a12493d60844585ce125af35c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b06f42faae0ab79dde1a569756990bb96283580d"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["7b366e7dd3172289251a86be96031af4002cd19c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"b06f42faae0ab79dde1a569756990bb96283580d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7b366e7dd3172289251a86be96031af4002cd19c":["e8c738236bd9fd6a12493d60844585ce125af35c","f8061ddd97f3352007d927dae445884a6f3d857b"],"e8c738236bd9fd6a12493d60844585ce125af35c":["b06f42faae0ab79dde1a569756990bb96283580d","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}