{"path":"lucene/core/src/java/org/apache/lucene/util/StringHelper#bytesDifference(BytesRef,BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#bytesDifference(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/StringHelper#bytesDifference(BytesRef,BytesRef).mjava","sourceNew":"  /**\n   * Compares two {@link BytesRef}, element by element, and returns the\n   * number of elements common to both arrays.\n   *\n   * @param left The first {@link BytesRef} to compare\n   * @param right The second {@link BytesRef} to compare\n   * @return The number of common elements.\n   */\n  public static int bytesDifference(BytesRef left, BytesRef right) {\n    int len = left.length < right.length ? left.length : right.length;\n    final byte[] bytesLeft = left.bytes;\n    final int offLeft = left.offset;\n    byte[] bytesRight = right.bytes;\n    final int offRight = right.offset;\n    for (int i = 0; i < len; i++)\n      if (bytesLeft[i+offLeft] != bytesRight[i+offRight])\n        return i;\n    return len;\n  }\n\n","sourceOld":"  /**\n   * Compares two {@link BytesRef}, element by element, and returns the\n   * number of elements common to both arrays.\n   *\n   * @param left The first {@link BytesRef} to compare\n   * @param right The second {@link BytesRef} to compare\n   * @return The number of common elements.\n   */\n  public static int bytesDifference(BytesRef left, BytesRef right) {\n    int len = left.length < right.length ? left.length : right.length;\n    final byte[] bytesLeft = left.bytes;\n    final int offLeft = left.offset;\n    byte[] bytesRight = right.bytes;\n    final int offRight = right.offset;\n    for (int i = 0; i < len; i++)\n      if (bytesLeft[i+offLeft] != bytesRight[i+offRight])\n        return i;\n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c5280f6286c7546ab75b72c663f7bb1dc10e96","date":1427372570,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#bytesDifference(BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/StringHelper#bytesDifference(BytesRef,BytesRef).mjava","sourceNew":"  /**\n   * Compares two {@link BytesRef}, element by element, and returns the\n   * number of elements common to both arrays (from the start of each).\n   *\n   * @param left The first {@link BytesRef} to compare\n   * @param right The second {@link BytesRef} to compare\n   * @return The number of common elements (from the start of each).\n   */\n  public static int bytesDifference(BytesRef left, BytesRef right) {\n    int len = left.length < right.length ? left.length : right.length;\n    final byte[] bytesLeft = left.bytes;\n    final int offLeft = left.offset;\n    byte[] bytesRight = right.bytes;\n    final int offRight = right.offset;\n    for (int i = 0; i < len; i++)\n      if (bytesLeft[i+offLeft] != bytesRight[i+offRight])\n        return i;\n    return len;\n  }\n\n","sourceOld":"  /**\n   * Compares two {@link BytesRef}, element by element, and returns the\n   * number of elements common to both arrays.\n   *\n   * @param left The first {@link BytesRef} to compare\n   * @param right The second {@link BytesRef} to compare\n   * @return The number of common elements.\n   */\n  public static int bytesDifference(BytesRef left, BytesRef right) {\n    int len = left.length < right.length ? left.length : right.length;\n    final byte[] bytesLeft = left.bytes;\n    final int offLeft = left.offset;\n    byte[] bytesRight = right.bytes;\n    final int offRight = right.offset;\n    for (int i = 0; i < len; i++)\n      if (bytesLeft[i+offLeft] != bytesRight[i+offRight])\n        return i;\n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#bytesDifference(BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/StringHelper#bytesDifference(BytesRef,BytesRef).mjava","sourceNew":"  /**\n   * Compares two {@link BytesRef}, element by element, and returns the\n   * number of elements common to both arrays (from the start of each).\n   *\n   * @param left The first {@link BytesRef} to compare\n   * @param right The second {@link BytesRef} to compare\n   * @return The number of common elements (from the start of each).\n   */\n  public static int bytesDifference(BytesRef left, BytesRef right) {\n    int len = left.length < right.length ? left.length : right.length;\n    final byte[] bytesLeft = left.bytes;\n    final int offLeft = left.offset;\n    byte[] bytesRight = right.bytes;\n    final int offRight = right.offset;\n    for (int i = 0; i < len; i++)\n      if (bytesLeft[i+offLeft] != bytesRight[i+offRight])\n        return i;\n    return len;\n  }\n\n","sourceOld":"  /**\n   * Compares two {@link BytesRef}, element by element, and returns the\n   * number of elements common to both arrays.\n   *\n   * @param left The first {@link BytesRef} to compare\n   * @param right The second {@link BytesRef} to compare\n   * @return The number of common elements.\n   */\n  public static int bytesDifference(BytesRef left, BytesRef right) {\n    int len = left.length < right.length ? left.length : right.length;\n    final byte[] bytesLeft = left.bytes;\n    final int offLeft = left.offset;\n    byte[] bytesRight = right.bytes;\n    final int offRight = right.offset;\n    for (int i = 0; i < len; i++)\n      if (bytesLeft[i+offLeft] != bytesRight[i+offRight])\n        return i;\n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"456d7e7092cb043c740b4674301660ee8abc26fe","date":1517645879,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#bytesDifference(BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/StringHelper#bytesDifference(BytesRef,BytesRef).mjava","sourceNew":"  /**\n   * Compares two {@link BytesRef}, element by element, and returns the\n   * number of elements common to both arrays (from the start of each).\n   * This method assumes currentTerm comes after priorTerm.\n   *\n   * @param priorTerm The first {@link BytesRef} to compare\n   * @param currentTerm The second {@link BytesRef} to compare\n   * @return The number of common elements (from the start of each).\n   */\n  public static int bytesDifference(BytesRef priorTerm, BytesRef currentTerm) {\n    int mismatch = FutureArrays.mismatch(priorTerm.bytes, priorTerm.offset, priorTerm.offset + priorTerm.length, \n                                         currentTerm.bytes, currentTerm.offset, currentTerm.offset + currentTerm.length);\n    if (mismatch < 0) {\n      throw new IllegalArgumentException(\"terms out of order: priorTerm=\" + priorTerm + \",currentTerm=\" + currentTerm);\n    }\n    return mismatch;\n  }\n\n","sourceOld":"  /**\n   * Compares two {@link BytesRef}, element by element, and returns the\n   * number of elements common to both arrays (from the start of each).\n   *\n   * @param left The first {@link BytesRef} to compare\n   * @param right The second {@link BytesRef} to compare\n   * @return The number of common elements (from the start of each).\n   */\n  public static int bytesDifference(BytesRef left, BytesRef right) {\n    int len = left.length < right.length ? left.length : right.length;\n    final byte[] bytesLeft = left.bytes;\n    final int offLeft = left.offset;\n    byte[] bytesRight = right.bytes;\n    final int offRight = right.offset;\n    for (int i = 0; i < len; i++)\n      if (bytesLeft[i+offLeft] != bytesRight[i+offRight])\n        return i;\n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#bytesDifference(BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/StringHelper#bytesDifference(BytesRef,BytesRef).mjava","sourceNew":"  /**\n   * Compares two {@link BytesRef}, element by element, and returns the\n   * number of elements common to both arrays (from the start of each).\n   * This method assumes currentTerm comes after priorTerm.\n   *\n   * @param priorTerm The first {@link BytesRef} to compare\n   * @param currentTerm The second {@link BytesRef} to compare\n   * @return The number of common elements (from the start of each).\n   */\n  public static int bytesDifference(BytesRef priorTerm, BytesRef currentTerm) {\n    int mismatch = Arrays.mismatch(priorTerm.bytes, priorTerm.offset, priorTerm.offset + priorTerm.length, \n                                         currentTerm.bytes, currentTerm.offset, currentTerm.offset + currentTerm.length);\n    if (mismatch < 0) {\n      throw new IllegalArgumentException(\"terms out of order: priorTerm=\" + priorTerm + \",currentTerm=\" + currentTerm);\n    }\n    return mismatch;\n  }\n\n","sourceOld":"  /**\n   * Compares two {@link BytesRef}, element by element, and returns the\n   * number of elements common to both arrays (from the start of each).\n   * This method assumes currentTerm comes after priorTerm.\n   *\n   * @param priorTerm The first {@link BytesRef} to compare\n   * @param currentTerm The second {@link BytesRef} to compare\n   * @return The number of common elements (from the start of each).\n   */\n  public static int bytesDifference(BytesRef priorTerm, BytesRef currentTerm) {\n    int mismatch = FutureArrays.mismatch(priorTerm.bytes, priorTerm.offset, priorTerm.offset + priorTerm.length, \n                                         currentTerm.bytes, currentTerm.offset, currentTerm.offset + currentTerm.length);\n    if (mismatch < 0) {\n      throw new IllegalArgumentException(\"terms out of order: priorTerm=\" + priorTerm + \",currentTerm=\" + currentTerm);\n    }\n    return mismatch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","52c5280f6286c7546ab75b72c663f7bb1dc10e96"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["456d7e7092cb043c740b4674301660ee8abc26fe"],"456d7e7092cb043c740b4674301660ee8abc26fe":["52c5280f6286c7546ab75b72c663f7bb1dc10e96"],"52c5280f6286c7546ab75b72c663f7bb1dc10e96":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"456d7e7092cb043c740b4674301660ee8abc26fe":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"52c5280f6286c7546ab75b72c663f7bb1dc10e96":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","456d7e7092cb043c740b4674301660ee8abc26fe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","52c5280f6286c7546ab75b72c663f7bb1dc10e96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}