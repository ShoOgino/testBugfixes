{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataResponse#sendResponse(BaseEntry,ProvidedService).mjava","commits":[{"id":"a228247de0686f328301f2d13982b56d78533501","date":1156108808,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataResponse#sendResponse(BaseEntry,ProvidedService).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataResponse#sendResponse(BaseEntry,ExtensionProfile).mjava","sourceNew":"    /**\n     * \n     * Sends a response for an update, insert or delete request. This method\n     * must not invoked in a case of an error performing the requested action. If\n     * the specified response format is ATOM the default namespace will be set\n     * to ATOM.\n     * \n     * @param entry -\n     *            the modified / created entry to send\n     * @param service - the service to render the feed\n     * @throws IOException -\n     *             if an I/O exception occurs, often caused by an already\n     *             closed Writer or OutputStream\n     */\n    public void sendResponse(BaseEntry entry, ProvidedService service)\n            throws IOException {\n        if (entry == null)\n            throw new IllegalArgumentException(\"entry must not be null\");\n        if (service == null)\n            throw new IllegalArgumentException(\n                    \"service must not be null\");\n        DateTime time = entry.getUpdated();\n        if (time != null)\n            setLastModifiedHeader(time.getValue());\n        FormatWriter writer = FormatWriter.getFormatWriter(this,service);\n        writer.generateOutputFormat(entry,this.response);\n\n        \n    }\n\n","sourceOld":"    /**\n     * \n     * Sends a response for an update, insert or delete request. This method\n     * must not invoked in a case of an error performing the requested action. If\n     * the specified response format is ATOM the default namespace will be set\n     * to ATOM.\n     * \n     * @param entry -\n     *            the modified / created entry to send\n     * @param profile -\n     *            the entries extension profile\n     * @throws IOException -\n     *             if an I/O exception occurs, often caused by an already\n     *             closed Writer or OutputStream\n     */\n    public void sendResponse(BaseEntry entry, ExtensionProfile profile)\n            throws IOException {\n        if (entry == null)\n            throw new IllegalArgumentException(\"entry must not be null\");\n        if (profile == null)\n            throw new IllegalArgumentException(\n                    \"extension profile must not be null\");\n        DateTime time = entry.getUpdated();\n        if (time != null)\n            setLastModifiedHeader(time.getValue());\n        XmlWriter writer = createWriter();\n        if (this.outputFormat.equals(OutputFormat.ATOM))\n            entry.generateAtom(writer, profile);\n        else\n            entry.generateRss(writer, profile);\n        writer.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/server/GDataResponse#sendResponse(BaseEntry,ProvidedService).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataResponse#sendResponse(BaseEntry,ProvidedService).mjava","sourceNew":"    /**\n     * \n     * Sends a response for an update, insert or delete request. This method\n     * must not invoked in a case of an error performing the requested action. If\n     * the specified response format is ATOM the default namespace will be set\n     * to ATOM.\n     * \n     * @param entry -\n     *            the modified / created entry to send\n     * @param service - the service to render the feed\n     * @throws IOException -\n     *             if an I/O exception occurs, often caused by an already\n     *             closed Writer or OutputStream\n     */\n    public void sendResponse(BaseEntry entry, ProvidedService service)\n            throws IOException {\n        if (entry == null)\n            throw new IllegalArgumentException(\"entry must not be null\");\n        if (service == null)\n            throw new IllegalArgumentException(\n                    \"service must not be null\");\n        DateTime time = entry.getUpdated();\n        if (time != null)\n            setLastModifiedHeader(time.getValue());\n        FormatWriter writer = FormatWriter.getFormatWriter(this,service);\n        writer.generateOutputFormat(entry,this.response);\n\n        \n    }\n\n","sourceOld":"    /**\n     * \n     * Sends a response for an update, insert or delete request. This method\n     * must not invoked in a case of an error performing the requested action. If\n     * the specified response format is ATOM the default namespace will be set\n     * to ATOM.\n     * \n     * @param entry -\n     *            the modified / created entry to send\n     * @param service - the service to render the feed\n     * @throws IOException -\n     *             if an I/O exception occurs, often caused by an already\n     *             closed Writer or OutputStream\n     */\n    public void sendResponse(BaseEntry entry, ProvidedService service)\n            throws IOException {\n        if (entry == null)\n            throw new IllegalArgumentException(\"entry must not be null\");\n        if (service == null)\n            throw new IllegalArgumentException(\n                    \"service must not be null\");\n        DateTime time = entry.getUpdated();\n        if (time != null)\n            setLastModifiedHeader(time.getValue());\n        FormatWriter writer = FormatWriter.getFormatWriter(this,service);\n        writer.generateOutputFormat(entry,this.response);\n\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a228247de0686f328301f2d13982b56d78533501"],"a228247de0686f328301f2d13982b56d78533501":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a228247de0686f328301f2d13982b56d78533501"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a228247de0686f328301f2d13982b56d78533501":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}