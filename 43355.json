{"path":"solr/src/java/org/apache/solr/handler/SystemInfoRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SystemInfoRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    rsp.add(\"core\", core.getName());\n    rsp.add(\"schema\", req.getSchema().getSchemaName());\n    rsp.add(\"start\", new Date(core.getStartTime()));\n    rsp.add(\"now\", new Date().toString());\n    rsp.add(\"host\", hostname);\n    rsp.add(\"cwd\", System.getProperty(\"user.dir\"));\n    rsp.add(\"instanceDir\", core.getSolrConfig().getInstanceDir());\n\n    Package solrP = SolrCore.class.getPackage();\n    Package luceneP = LucenePackage.class.getPackage();\n    NamedList version = new NamedList();\n    version.add(\"solrSpecVersion\", solrP.getSpecificationVersion());\n    version.add(\"solrImplVersion\", solrP.getImplementationVersion());\n    version.add(\"luceneSpecVersion\", luceneP.getSpecificationVersion());\n    version.add(\"luceneImplVersion\", luceneP.getImplementationVersion());\n\n    rsp.add(\"version\", version);\n    \n    NamedList cats = new NamedList();\n    rsp.add(\"objects\", cats);\n    \n    Set<String> requestedCats = arrayToSet(req.getParams().getParams(\"cat\"));\n    if (requestedCats.isEmpty()) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        requestedCats.add(cat.name());\n      }\n    }\n    for (String catName : requestedCats) {\n      cats.add(catName,new SimpleOrderedMap());\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList catInfo = (NamedList) cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList mBeanInfo = new SimpleOrderedMap();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", arrayToSet(m.getDocs()));\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/SystemInfoRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    rsp.add(\"core\", core.getName());\n    rsp.add(\"schema\", req.getSchema().getSchemaName());\n    rsp.add(\"start\", new Date(core.getStartTime()));\n    rsp.add(\"now\", new Date().toString());\n    rsp.add(\"host\", hostname);\n    rsp.add(\"cwd\", System.getProperty(\"user.dir\"));\n    rsp.add(\"instanceDir\", core.getSolrConfig().getInstanceDir());\n\n    Package solrP = SolrCore.class.getPackage();\n    Package luceneP = LucenePackage.class.getPackage();\n    NamedList version = new NamedList();\n    version.add(\"solrSpecVersion\", solrP.getSpecificationVersion());\n    version.add(\"solrImplVersion\", solrP.getImplementationVersion());\n    version.add(\"luceneSpecVersion\", luceneP.getSpecificationVersion());\n    version.add(\"luceneImplVersion\", luceneP.getImplementationVersion());\n\n    rsp.add(\"version\", version);\n    \n    NamedList cats = new NamedList();\n    rsp.add(\"objects\", cats);\n    \n    Set<String> requestedCats = arrayToSet(req.getParams().getParams(\"cat\"));\n    if (requestedCats.isEmpty()) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        requestedCats.add(cat.name());\n      }\n    }\n    for (String catName : requestedCats) {\n      cats.add(catName,new SimpleOrderedMap());\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList catInfo = (NamedList) cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList mBeanInfo = new SimpleOrderedMap();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", arrayToSet(m.getDocs()));\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SystemInfoRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/SystemInfoRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    rsp.add(\"core\", core.getName());\n    rsp.add(\"schema\", req.getSchema().getSchemaName());\n    rsp.add(\"start\", new Date(core.getStartTime()));\n    rsp.add(\"now\", new Date().toString());\n    rsp.add(\"host\", hostname);\n    rsp.add(\"cwd\", System.getProperty(\"user.dir\"));\n    rsp.add(\"instanceDir\", core.getSolrConfig().getInstanceDir());\n\n    Package solrP = SolrCore.class.getPackage();\n    Package luceneP = LucenePackage.class.getPackage();\n    NamedList version = new NamedList();\n    version.add(\"solrSpecVersion\", solrP.getSpecificationVersion());\n    version.add(\"solrImplVersion\", solrP.getImplementationVersion());\n    version.add(\"luceneSpecVersion\", luceneP.getSpecificationVersion());\n    version.add(\"luceneImplVersion\", luceneP.getImplementationVersion());\n\n    rsp.add(\"version\", version);\n    \n    NamedList cats = new NamedList();\n    rsp.add(\"objects\", cats);\n    \n    Set<String> requestedCats = arrayToSet(req.getParams().getParams(\"cat\"));\n    if (requestedCats.isEmpty()) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        requestedCats.add(cat.name());\n      }\n    }\n    for (String catName : requestedCats) {\n      cats.add(catName,new SimpleOrderedMap());\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList catInfo = (NamedList) cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList mBeanInfo = new SimpleOrderedMap();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", arrayToSet(m.getDocs()));\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    rsp.add(\"core\", core.getName());\n    rsp.add(\"schema\", req.getSchema().getSchemaName());\n    rsp.add(\"start\", new Date(core.getStartTime()));\n    rsp.add(\"now\", new Date().toString());\n    rsp.add(\"host\", hostname);\n    rsp.add(\"cwd\", System.getProperty(\"user.dir\"));\n    rsp.add(\"instanceDir\", core.getSolrConfig().getInstanceDir());\n\n    Package solrP = SolrCore.class.getPackage();\n    Package luceneP = LucenePackage.class.getPackage();\n    NamedList version = new NamedList();\n    version.add(\"solrSpecVersion\", solrP.getSpecificationVersion());\n    version.add(\"solrImplVersion\", solrP.getImplementationVersion());\n    version.add(\"luceneSpecVersion\", luceneP.getSpecificationVersion());\n    version.add(\"luceneImplVersion\", luceneP.getImplementationVersion());\n\n    rsp.add(\"version\", version);\n    \n    NamedList cats = new NamedList();\n    rsp.add(\"objects\", cats);\n    \n    Set<String> requestedCats = arrayToSet(req.getParams().getParams(\"cat\"));\n    if (requestedCats.isEmpty()) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        requestedCats.add(cat.name());\n      }\n    }\n    for (String catName : requestedCats) {\n      cats.add(catName,new SimpleOrderedMap());\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList catInfo = (NamedList) cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList mBeanInfo = new SimpleOrderedMap();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", arrayToSet(m.getDocs()));\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/SystemInfoRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    rsp.add(\"core\", core.getName());\n    rsp.add(\"schema\", req.getSchema().getSchemaName());\n    rsp.add(\"start\", new Date(core.getStartTime()));\n    rsp.add(\"now\", new Date().toString());\n    rsp.add(\"host\", hostname);\n    rsp.add(\"cwd\", System.getProperty(\"user.dir\"));\n    rsp.add(\"instanceDir\", core.getSolrConfig().getInstanceDir());\n\n    Package solrP = SolrCore.class.getPackage();\n    Package luceneP = LucenePackage.class.getPackage();\n    NamedList version = new NamedList();\n    version.add(\"solrSpecVersion\", solrP.getSpecificationVersion());\n    version.add(\"solrImplVersion\", solrP.getImplementationVersion());\n    version.add(\"luceneSpecVersion\", luceneP.getSpecificationVersion());\n    version.add(\"luceneImplVersion\", luceneP.getImplementationVersion());\n\n    rsp.add(\"version\", version);\n    \n    NamedList cats = new NamedList();\n    rsp.add(\"objects\", cats);\n    \n    Set<String> requestedCats = arrayToSet(req.getParams().getParams(\"cat\"));\n    if (requestedCats.isEmpty()) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        requestedCats.add(cat.name());\n      }\n    }\n    for (String catName : requestedCats) {\n      cats.add(catName,new SimpleOrderedMap());\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList catInfo = (NamedList) cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList mBeanInfo = new SimpleOrderedMap();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", arrayToSet(m.getDocs()));\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"719f4efa5dfc2bc5476a646af6ab142e8d67f7a3","date":1276292818,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SystemInfoRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList cats = new NamedList();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList catInfo = (NamedList) cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList mBeanInfo = new SimpleOrderedMap();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    rsp.add(\"core\", core.getName());\n    rsp.add(\"schema\", req.getSchema().getSchemaName());\n    rsp.add(\"start\", new Date(core.getStartTime()));\n    rsp.add(\"now\", new Date().toString());\n    rsp.add(\"host\", hostname);\n    rsp.add(\"cwd\", System.getProperty(\"user.dir\"));\n    rsp.add(\"instanceDir\", core.getSolrConfig().getInstanceDir());\n\n    Package solrP = SolrCore.class.getPackage();\n    Package luceneP = LucenePackage.class.getPackage();\n    NamedList version = new NamedList();\n    version.add(\"solrSpecVersion\", solrP.getSpecificationVersion());\n    version.add(\"solrImplVersion\", solrP.getImplementationVersion());\n    version.add(\"luceneSpecVersion\", luceneP.getSpecificationVersion());\n    version.add(\"luceneImplVersion\", luceneP.getImplementationVersion());\n\n    rsp.add(\"version\", version);\n    \n    NamedList cats = new NamedList();\n    rsp.add(\"objects\", cats);\n    \n    Set<String> requestedCats = arrayToSet(req.getParams().getParams(\"cat\"));\n    if (requestedCats.isEmpty()) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        requestedCats.add(cat.name());\n      }\n    }\n    for (String catName : requestedCats) {\n      cats.add(catName,new SimpleOrderedMap());\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList catInfo = (NamedList) cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList mBeanInfo = new SimpleOrderedMap();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", arrayToSet(m.getDocs()));\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/SystemInfoRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    rsp.add(\"core\", core.getName());\n    rsp.add(\"schema\", req.getSchema().getSchemaName());\n    rsp.add(\"start\", new Date(core.getStartTime()));\n    rsp.add(\"now\", new Date().toString());\n    rsp.add(\"host\", hostname);\n    rsp.add(\"cwd\", System.getProperty(\"user.dir\"));\n    rsp.add(\"instanceDir\", core.getSolrConfig().getInstanceDir());\n\n    Package solrP = SolrCore.class.getPackage();\n    Package luceneP = LucenePackage.class.getPackage();\n    NamedList version = new NamedList();\n    version.add(\"solrSpecVersion\", solrP.getSpecificationVersion());\n    version.add(\"solrImplVersion\", solrP.getImplementationVersion());\n    version.add(\"luceneSpecVersion\", luceneP.getSpecificationVersion());\n    version.add(\"luceneImplVersion\", luceneP.getImplementationVersion());\n\n    rsp.add(\"version\", version);\n    \n    NamedList cats = new NamedList();\n    rsp.add(\"objects\", cats);\n    \n    Set<String> requestedCats = arrayToSet(req.getParams().getParams(\"cat\"));\n    if (requestedCats.isEmpty()) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        requestedCats.add(cat.name());\n      }\n    }\n    for (String catName : requestedCats) {\n      cats.add(catName,new SimpleOrderedMap());\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList catInfo = (NamedList) cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList mBeanInfo = new SimpleOrderedMap();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", arrayToSet(m.getDocs()));\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"719f4efa5dfc2bc5476a646af6ab142e8d67f7a3":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","719f4efa5dfc2bc5476a646af6ab142e8d67f7a3"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["719f4efa5dfc2bc5476a646af6ab142e8d67f7a3"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["719f4efa5dfc2bc5476a646af6ab142e8d67f7a3","5f4e87790277826a2aea119328600dfb07761f32"],"719f4efa5dfc2bc5476a646af6ab142e8d67f7a3":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}