{"path":"src/test/org/apache/solr/analysis/HTMLStripCharFilterTest#processBuffer(String,String).mjava","commits":[{"id":"bd69280df0902763e47cb14745388ee17a2fb602","date":1249686305,"type":1,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/HTMLStripCharFilterTest#processBuffer(String,String).mjava","pathOld":"src/test/org/apache/solr/analysis/HTMLStripReaderTest#processBuffer(String,String).mjava","sourceNew":"  private void processBuffer(String test, String assertMsg) throws IOException {\n    System.out.println(\"-------------------processBuffer----------\");\n    Reader reader = new HTMLStripCharFilter(CharReader.get(new BufferedReader(new StringReader(test))));//force the use of BufferedReader\n    int ch = 0;\n    StringBuilder builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      System.out.println(\"String (trimmed): \" + builder.toString().trim() + \"<EOS>\");\n    }\n    assertTrue(assertMsg + \"::: \" + builder.toString() + \" is not equal to \" + test, builder.toString().equals(test) == true);\n  }\n\n","sourceOld":"  private void processBuffer(String test, String assertMsg) throws IOException {\n    System.out.println(\"-------------------processBuffer----------\");\n    Reader reader = new HTMLStripReader(new BufferedReader(new StringReader(test)));//force the use of BufferedReader\n    int ch = 0;\n    StringBuilder builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      System.out.println(\"String (trimmed): \" + builder.toString().trim() + \"<EOS>\");\n    }\n    assertTrue(assertMsg + \"::: \" + builder.toString() + \" is not equal to \" + test, builder.toString().equals(test) == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c44bea1987a18a21296b9e31f3ecb773a6b14f0","date":1268656817,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/HTMLStripCharFilterTest#processBuffer(String,String).mjava","pathOld":"src/test/org/apache/solr/analysis/HTMLStripCharFilterTest#processBuffer(String,String).mjava","sourceNew":"  private void processBuffer(String test, String assertMsg) throws IOException {\n    // System.out.println(\"-------------------processBuffer----------\");\n    Reader reader = new HTMLStripCharFilter(CharReader.get(new BufferedReader(new StringReader(test))));//force the use of BufferedReader\n    int ch = 0;\n    StringBuilder builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String (trimmed): \" + builder.toString().trim() + \"<EOS>\");\n    }\n    assertTrue(assertMsg + \"::: \" + builder.toString() + \" is not equal to \" + test, builder.toString().equals(test) == true);\n  }\n\n","sourceOld":"  private void processBuffer(String test, String assertMsg) throws IOException {\n    System.out.println(\"-------------------processBuffer----------\");\n    Reader reader = new HTMLStripCharFilter(CharReader.get(new BufferedReader(new StringReader(test))));//force the use of BufferedReader\n    int ch = 0;\n    StringBuilder builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      System.out.println(\"String (trimmed): \" + builder.toString().trim() + \"<EOS>\");\n    }\n    assertTrue(assertMsg + \"::: \" + builder.toString() + \" is not equal to \" + test, builder.toString().equals(test) == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/HTMLStripCharFilterTest#processBuffer(String,String).mjava","pathOld":"src/test/org/apache/solr/analysis/HTMLStripCharFilterTest#processBuffer(String,String).mjava","sourceNew":"  private void processBuffer(String test, String assertMsg) throws IOException {\n    // System.out.println(\"-------------------processBuffer----------\");\n    Reader reader = new HTMLStripCharFilter(CharReader.get(new BufferedReader(new StringReader(test))));//force the use of BufferedReader\n    int ch = 0;\n    StringBuilder builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String (trimmed): \" + builder.toString().trim() + \"<EOS>\");\n    }\n    assertTrue(assertMsg + \"::: \" + builder.toString() + \" is not equal to \" + test, builder.toString().equals(test) == true);\n  }\n\n","sourceOld":"  private void processBuffer(String test, String assertMsg) throws IOException {\n    // System.out.println(\"-------------------processBuffer----------\");\n    Reader reader = new HTMLStripCharFilter(CharReader.get(new BufferedReader(new StringReader(test))));//force the use of BufferedReader\n    int ch = 0;\n    StringBuilder builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String (trimmed): \" + builder.toString().trim() + \"<EOS>\");\n    }\n    assertTrue(assertMsg + \"::: \" + builder.toString() + \" is not equal to \" + test, builder.toString().equals(test) == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"4c44bea1987a18a21296b9e31f3ecb773a6b14f0":["bd69280df0902763e47cb14745388ee17a2fb602"],"ad94625fb8d088209f46650c8097196fec67f00c":["4c44bea1987a18a21296b9e31f3ecb773a6b14f0"],"bd69280df0902763e47cb14745388ee17a2fb602":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["bd69280df0902763e47cb14745388ee17a2fb602"],"4c44bea1987a18a21296b9e31f3ecb773a6b14f0":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"bd69280df0902763e47cb14745388ee17a2fb602":["4c44bea1987a18a21296b9e31f3ecb773a6b14f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}