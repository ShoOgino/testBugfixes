{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82c0f50a240cf02105b13b11e49095779864d37f","date":1311151772,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession, myName);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":["5101aff20e65c9a285c274627ec956eb5409d253"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f95755793ac5f02eed6154c705e8638e001a5a0a","date":1312178495,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession, myName);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.debugDocuments);\n            if (requestParams.debugVerboseOutput != null) {\n            \trsp.add(\"verbose-output\", requestParams.debugVerboseOutput);\n            }\n            requestParams.debugDocuments = new ArrayList<SolrInputDocument>(0);\n            requestParams.debugVerboseOutput = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession, myName);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38cf2ff411b3f7342febd22163907bafb5342a6f","date":1316126478,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession, myName);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(SolrPluginUtils.resolveUpdateChainParam(params, LOG));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.debugDocuments);\n            if (requestParams.debugVerboseOutput != null) {\n            \trsp.add(\"verbose-output\", requestParams.debugVerboseOutput);\n            }\n            requestParams.debugDocuments = new ArrayList<SolrInputDocument>(0);\n            requestParams.debugVerboseOutput = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession, myName);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.debugDocuments);\n            if (requestParams.debugVerboseOutput != null) {\n            \trsp.add(\"verbose-output\", requestParams.debugVerboseOutput);\n            }\n            requestParams.debugDocuments = new ArrayList<SolrInputDocument>(0);\n            requestParams.debugVerboseOutput = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":["64cae353de680169c133e0a9f4debee071ad3241"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f3a7218407032c06bc1d6c57edf979e7788f5def","date":1326793293,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession, myName);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.debugDocuments);\n            if (requestParams.debugVerboseOutput != null) {\n            \trsp.add(\"verbose-output\", requestParams.debugVerboseOutput);\n            }\n            requestParams.debugDocuments = new ArrayList<SolrInputDocument>(0);\n            requestParams.debugVerboseOutput = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession, myName);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(SolrPluginUtils.resolveUpdateChainParam(params, LOG));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.debugDocuments);\n            if (requestParams.debugVerboseOutput != null) {\n            \trsp.add(\"verbose-output\", requestParams.debugVerboseOutput);\n            }\n            requestParams.debugDocuments = new ArrayList<SolrInputDocument>(0);\n            requestParams.debugVerboseOutput = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","date":1335805170,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    RequestInfo requestParams = new RequestInfo(getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n   \n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.isDebug() && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.getDataConfig() != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.getDataConfig())), req.getCore()\n                  , dataSources, coreScopeSession, myName);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n            \trsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession, myName);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.debugDocuments);\n            if (requestParams.debugVerboseOutput != null) {\n            \trsp.add(\"verbose-output\", requestParams.debugVerboseOutput);\n            }\n            requestParams.debugDocuments = new ArrayList<SolrInputDocument>(0);\n            requestParams.debugVerboseOutput = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":["5101aff20e65c9a285c274627ec956eb5409d253"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5101aff20e65c9a285c274627ec956eb5409d253","date":1344005120,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    NamedList defaultParams = (NamedList) initArgs.get(\"defaults\");\n    RequestInfo requestParams = new RequestInfo(getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {    \n      String dataConfigFile = params.get(\"config\");\n      String dataConfig = params.get(\"dataConfig\");\n      if(dataConfigFile != null) {\n        dataConfig = SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile));\n      }\n      if(dataConfig==null)  {\n        rsp.add(\"status\", DataImporter.MSG.NO_CONFIG_FOUND);\n      } else {\n        // Modify incoming request params to add wt=raw\n        ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n        rawParams.set(CommonParams.WT, \"raw\");\n        req.setParams(rawParams);\n        ContentStreamBase content = new ContentStreamBase.StringStream(dataConfig);\n        rsp.add(RawResponseWriter.CONTENT, content);\n      }\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null) {\n      rsp.add(\"command\", command);\n    }\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n        importer.maybeReloadConfiguration(requestParams, defaultParams);\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n            \trsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) { \n        if(importer.maybeReloadConfiguration(requestParams, defaultParams)) {\n          message = DataImporter.MSG.CONFIG_RELOADED;\n        } else {\n          message = DataImporter.MSG.CONFIG_NOT_RELOADED;\n        }\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    RequestInfo requestParams = new RequestInfo(getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n   \n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.isDebug() && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.getDataConfig() != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.getDataConfig())), req.getCore()\n                  , dataSources, coreScopeSession, myName);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n            \trsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":["564a248c486a685e967252bbbd8d62b705bc85ba","4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","82c0f50a240cf02105b13b11e49095779864d37f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    NamedList defaultParams = (NamedList) initArgs.get(\"defaults\");\n    RequestInfo requestParams = new RequestInfo(getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {    \n      String dataConfigFile = params.get(\"config\");\n      String dataConfig = params.get(\"dataConfig\");\n      if(dataConfigFile != null) {\n        dataConfig = SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile));\n      }\n      if(dataConfig==null)  {\n        rsp.add(\"status\", DataImporter.MSG.NO_CONFIG_FOUND);\n      } else {\n        // Modify incoming request params to add wt=raw\n        ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n        rawParams.set(CommonParams.WT, \"raw\");\n        req.setParams(rawParams);\n        ContentStreamBase content = new ContentStreamBase.StringStream(dataConfig);\n        rsp.add(RawResponseWriter.CONTENT, content);\n      }\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null) {\n      rsp.add(\"command\", command);\n    }\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n        importer.maybeReloadConfiguration(requestParams, defaultParams);\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n            \trsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) { \n        if(importer.maybeReloadConfiguration(requestParams, defaultParams)) {\n          message = DataImporter.MSG.CONFIG_RELOADED;\n        } else {\n          message = DataImporter.MSG.CONFIG_NOT_RELOADED;\n        }\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    RequestInfo requestParams = new RequestInfo(getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n   \n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.isDebug() && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.getDataConfig() != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.getDataConfig())), req.getCore()\n                  , dataSources, coreScopeSession, myName);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n            \trsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    NamedList defaultParams = (NamedList) initArgs.get(\"defaults\");\n    RequestInfo requestParams = new RequestInfo(getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {    \n      String dataConfigFile = params.get(\"config\");\n      String dataConfig = params.get(\"dataConfig\");\n      if(dataConfigFile != null) {\n        dataConfig = SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile));\n      }\n      if(dataConfig==null)  {\n        rsp.add(\"status\", DataImporter.MSG.NO_CONFIG_FOUND);\n      } else {\n        // Modify incoming request params to add wt=raw\n        ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n        rawParams.set(CommonParams.WT, \"raw\");\n        req.setParams(rawParams);\n        ContentStreamBase content = new ContentStreamBase.StringStream(dataConfig);\n        rsp.add(RawResponseWriter.CONTENT, content);\n      }\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null) {\n      rsp.add(\"command\", command);\n    }\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n        importer.maybeReloadConfiguration(requestParams, defaultParams);\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n            \trsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) { \n        if(importer.maybeReloadConfiguration(requestParams, defaultParams)) {\n          message = DataImporter.MSG.CONFIG_RELOADED;\n        } else {\n          message = DataImporter.MSG.CONFIG_NOT_RELOADED;\n        }\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    RequestInfo requestParams = new RequestInfo(getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n   \n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.isDebug() && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.getDataConfig() != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.getDataConfig())), req.getCore()\n                  , dataSources, coreScopeSession, myName);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n            \trsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    NamedList defaultParams = (NamedList) initArgs.get(\"defaults\");\n    RequestInfo requestParams = new RequestInfo(getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {    \n      String dataConfigFile = params.get(\"config\");\n      String dataConfig = params.get(\"dataConfig\");\n      if(dataConfigFile != null) {\n        dataConfig = SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile));\n      }\n      if(dataConfig==null)  {\n        rsp.add(\"status\", DataImporter.MSG.NO_CONFIG_FOUND);\n      } else {\n        // Modify incoming request params to add wt=raw\n        ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n        rawParams.set(CommonParams.WT, \"raw\");\n        req.setParams(rawParams);\n        ContentStreamBase content = new ContentStreamBase.StringStream(dataConfig);\n        rsp.add(RawResponseWriter.CONTENT, content);\n      }\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null) {\n      rsp.add(\"command\", command);\n    }\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n        importer.maybeReloadConfiguration(requestParams, defaultParams);\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n              rsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) { \n        if(importer.maybeReloadConfiguration(requestParams, defaultParams)) {\n          message = DataImporter.MSG.CONFIG_RELOADED;\n        } else {\n          message = DataImporter.MSG.CONFIG_NOT_RELOADED;\n        }\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    NamedList defaultParams = (NamedList) initArgs.get(\"defaults\");\n    RequestInfo requestParams = new RequestInfo(getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {    \n      String dataConfigFile = params.get(\"config\");\n      String dataConfig = params.get(\"dataConfig\");\n      if(dataConfigFile != null) {\n        dataConfig = SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile));\n      }\n      if(dataConfig==null)  {\n        rsp.add(\"status\", DataImporter.MSG.NO_CONFIG_FOUND);\n      } else {\n        // Modify incoming request params to add wt=raw\n        ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n        rawParams.set(CommonParams.WT, \"raw\");\n        req.setParams(rawParams);\n        ContentStreamBase content = new ContentStreamBase.StringStream(dataConfig);\n        rsp.add(RawResponseWriter.CONTENT, content);\n      }\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null) {\n      rsp.add(\"command\", command);\n    }\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n        importer.maybeReloadConfiguration(requestParams, defaultParams);\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n            \trsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) { \n        if(importer.maybeReloadConfiguration(requestParams, defaultParams)) {\n          message = DataImporter.MSG.CONFIG_RELOADED;\n        } else {\n          message = DataImporter.MSG.CONFIG_NOT_RELOADED;\n        }\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    NamedList defaultParams = (NamedList) initArgs.get(\"defaults\");\n    RequestInfo requestParams = new RequestInfo(req, getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {    \n      String dataConfigFile = params.get(\"config\");\n      String dataConfig = params.get(\"dataConfig\");\n      if(dataConfigFile != null) {\n        dataConfig = SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile));\n      }\n      if(dataConfig==null)  {\n        rsp.add(\"status\", DataImporter.MSG.NO_CONFIG_FOUND);\n      } else {\n        // Modify incoming request params to add wt=raw\n        ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n        rawParams.set(CommonParams.WT, \"raw\");\n        req.setParams(rawParams);\n        ContentStreamBase content = new ContentStreamBase.StringStream(dataConfig);\n        rsp.add(RawResponseWriter.CONTENT, content);\n      }\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null) {\n      rsp.add(\"command\", command);\n    }\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n        importer.maybeReloadConfiguration(requestParams, defaultParams);\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n              rsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) { \n        if(importer.maybeReloadConfiguration(requestParams, defaultParams)) {\n          message = DataImporter.MSG.CONFIG_RELOADED;\n        } else {\n          message = DataImporter.MSG.CONFIG_NOT_RELOADED;\n        }\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    NamedList defaultParams = (NamedList) initArgs.get(\"defaults\");\n    RequestInfo requestParams = new RequestInfo(getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {    \n      String dataConfigFile = params.get(\"config\");\n      String dataConfig = params.get(\"dataConfig\");\n      if(dataConfigFile != null) {\n        dataConfig = SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile));\n      }\n      if(dataConfig==null)  {\n        rsp.add(\"status\", DataImporter.MSG.NO_CONFIG_FOUND);\n      } else {\n        // Modify incoming request params to add wt=raw\n        ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n        rawParams.set(CommonParams.WT, \"raw\");\n        req.setParams(rawParams);\n        ContentStreamBase content = new ContentStreamBase.StringStream(dataConfig);\n        rsp.add(RawResponseWriter.CONTENT, content);\n      }\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null) {\n      rsp.add(\"command\", command);\n    }\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n        importer.maybeReloadConfiguration(requestParams, defaultParams);\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n              rsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) { \n        if(importer.maybeReloadConfiguration(requestParams, defaultParams)) {\n          message = DataImporter.MSG.CONFIG_RELOADED;\n        } else {\n          message = DataImporter.MSG.CONFIG_NOT_RELOADED;\n        }\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68a568183b091ca52e6a2c0f9b615be5f3a0974a","date":1399311632,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    NamedList defaultParams = (NamedList) initArgs.get(\"defaults\");\n    RequestInfo requestParams = new RequestInfo(req, getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {    \n      String dataConfigFile = params.get(\"config\");\n      String dataConfig = params.get(\"dataConfig\");\n      if(dataConfigFile != null) {\n        dataConfig = SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile));\n      }\n      if(dataConfig==null)  {\n        rsp.add(\"status\", DataImporter.MSG.NO_CONFIG_FOUND);\n      } else {\n        // Modify incoming request params to add wt=raw\n        ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n        rawParams.set(CommonParams.WT, \"raw\");\n        req.setParams(rawParams);\n        ContentStreamBase content = new ContentStreamBase.StringStream(dataConfig);\n        rsp.add(RawResponseWriter.CONTENT, content);\n      }\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null) {\n      rsp.add(\"command\", command);\n    }\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n        importer.maybeReloadConfiguration(requestParams, defaultParams);\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        DIHWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n              rsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) { \n        if(importer.maybeReloadConfiguration(requestParams, defaultParams)) {\n          message = DataImporter.MSG.CONFIG_RELOADED;\n        } else {\n          message = DataImporter.MSG.CONFIG_NOT_RELOADED;\n        }\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    NamedList defaultParams = (NamedList) initArgs.get(\"defaults\");\n    RequestInfo requestParams = new RequestInfo(req, getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {    \n      String dataConfigFile = params.get(\"config\");\n      String dataConfig = params.get(\"dataConfig\");\n      if(dataConfigFile != null) {\n        dataConfig = SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile));\n      }\n      if(dataConfig==null)  {\n        rsp.add(\"status\", DataImporter.MSG.NO_CONFIG_FOUND);\n      } else {\n        // Modify incoming request params to add wt=raw\n        ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n        rawParams.set(CommonParams.WT, \"raw\");\n        req.setParams(rawParams);\n        ContentStreamBase content = new ContentStreamBase.StringStream(dataConfig);\n        rsp.add(RawResponseWriter.CONTENT, content);\n      }\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null) {\n      rsp.add(\"command\", command);\n    }\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n        importer.maybeReloadConfiguration(requestParams, defaultParams);\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n              rsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) { \n        if(importer.maybeReloadConfiguration(requestParams, defaultParams)) {\n          message = DataImporter.MSG.CONFIG_RELOADED;\n        } else {\n          message = DataImporter.MSG.CONFIG_NOT_RELOADED;\n        }\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c89c6c3774e38c725fbfffcb911d466a97f9364","date":1407895788,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    NamedList defaultParams = (NamedList) initArgs.get(\"defaults\");\n    RequestInfo requestParams = new RequestInfo(req, getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {    \n      String dataConfigFile = params.get(\"config\");\n      String dataConfig = params.get(\"dataConfig\");\n      if(dataConfigFile != null) {\n        dataConfig = SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile));\n      }\n      if(dataConfig==null)  {\n        rsp.add(\"status\", DataImporter.MSG.NO_CONFIG_FOUND);\n      } else {\n        // Modify incoming request params to add wt=raw\n        ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n        rawParams.set(CommonParams.WT, \"raw\");\n        req.setParams(rawParams);\n        ContentStreamBase content = new ContentStreamBase.StringStream(dataConfig);\n        rsp.add(RawResponseWriter.CONTENT, content);\n      }\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null) {\n      rsp.add(\"command\", command);\n    }\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n        importer.maybeReloadConfiguration(requestParams, defaultParams);\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        DIHWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n              rsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) { \n        if(importer.maybeReloadConfiguration(requestParams, defaultParams)) {\n          message = DataImporter.MSG.CONFIG_RELOADED;\n        } else {\n          message = DataImporter.MSG.CONFIG_NOT_RELOADED;\n        }\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    NamedList defaultParams = (NamedList) initArgs.get(\"defaults\");\n    RequestInfo requestParams = new RequestInfo(req, getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {    \n      String dataConfigFile = params.get(\"config\");\n      String dataConfig = params.get(\"dataConfig\");\n      if(dataConfigFile != null) {\n        dataConfig = SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile));\n      }\n      if(dataConfig==null)  {\n        rsp.add(\"status\", DataImporter.MSG.NO_CONFIG_FOUND);\n      } else {\n        // Modify incoming request params to add wt=raw\n        ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n        rawParams.set(CommonParams.WT, \"raw\");\n        req.setParams(rawParams);\n        ContentStreamBase content = new ContentStreamBase.StringStream(dataConfig);\n        rsp.add(RawResponseWriter.CONTENT, content);\n      }\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null) {\n      rsp.add(\"command\", command);\n    }\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n        importer.maybeReloadConfiguration(requestParams, defaultParams);\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        DIHWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n              rsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) { \n        if(importer.maybeReloadConfiguration(requestParams, defaultParams)) {\n          message = DataImporter.MSG.CONFIG_RELOADED;\n        } else {\n          message = DataImporter.MSG.CONFIG_NOT_RELOADED;\n        }\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd","date":1426252395,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    NamedList defaultParams = (NamedList) initArgs.get(\"defaults\");\n    RequestInfo requestParams = new RequestInfo(req, getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {    \n      String dataConfigFile = params.get(\"config\");\n      String dataConfig = params.get(\"dataConfig\");\n      if(dataConfigFile != null) {\n        dataConfig = SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile));\n      }\n      if(dataConfig==null)  {\n        rsp.add(\"status\", DataImporter.MSG.NO_CONFIG_FOUND);\n      } else {\n        // Modify incoming request params to add wt=raw\n        ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n        rawParams.set(CommonParams.WT, \"raw\");\n        req.setParams(rawParams);\n        ContentStreamBase content = new ContentStreamBase.StringStream(dataConfig);\n        rsp.add(RawResponseWriter.CONTENT, content);\n      }\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null) {\n      rsp.add(\"command\", command);\n    }\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n        importer.maybeReloadConfiguration(requestParams, defaultParams);\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessorChain(params);\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        DIHWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n              rsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) { \n        if(importer.maybeReloadConfiguration(requestParams, defaultParams)) {\n          message = DataImporter.MSG.CONFIG_RELOADED;\n        } else {\n          message = DataImporter.MSG.CONFIG_NOT_RELOADED;\n        }\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    NamedList defaultParams = (NamedList) initArgs.get(\"defaults\");\n    RequestInfo requestParams = new RequestInfo(req, getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {    \n      String dataConfigFile = params.get(\"config\");\n      String dataConfig = params.get(\"dataConfig\");\n      if(dataConfigFile != null) {\n        dataConfig = SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile));\n      }\n      if(dataConfig==null)  {\n        rsp.add(\"status\", DataImporter.MSG.NO_CONFIG_FOUND);\n      } else {\n        // Modify incoming request params to add wt=raw\n        ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n        rawParams.set(CommonParams.WT, \"raw\");\n        req.setParams(rawParams);\n        ContentStreamBase content = new ContentStreamBase.StringStream(dataConfig);\n        rsp.add(RawResponseWriter.CONTENT, content);\n      }\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null) {\n      rsp.add(\"command\", command);\n    }\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n        importer.maybeReloadConfiguration(requestParams, defaultParams);\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        DIHWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n              rsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) { \n        if(importer.maybeReloadConfiguration(requestParams, defaultParams)) {\n          message = DataImporter.MSG.CONFIG_RELOADED;\n        } else {\n          message = DataImporter.MSG.CONFIG_NOT_RELOADED;\n        }\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    NamedList defaultParams = (NamedList) initArgs.get(\"defaults\");\n    RequestInfo requestParams = new RequestInfo(req, getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {    \n      String dataConfigFile = params.get(\"config\");\n      String dataConfig = params.get(\"dataConfig\");\n      if(dataConfigFile != null) {\n        dataConfig = SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile));\n      }\n      if(dataConfig==null)  {\n        rsp.add(\"status\", DataImporter.MSG.NO_CONFIG_FOUND);\n      } else {\n        // Modify incoming request params to add wt=raw\n        ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n        rawParams.set(CommonParams.WT, \"raw\");\n        req.setParams(rawParams);\n        ContentStreamBase content = new ContentStreamBase.StringStream(dataConfig);\n        rsp.add(RawResponseWriter.CONTENT, content);\n      }\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null) {\n      rsp.add(\"command\", command);\n    }\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n        importer.maybeReloadConfiguration(requestParams, defaultParams);\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessorChain(params);\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        DIHWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n              rsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) { \n        if(importer.maybeReloadConfiguration(requestParams, defaultParams)) {\n          message = DataImporter.MSG.CONFIG_RELOADED;\n        } else {\n          message = DataImporter.MSG.CONFIG_NOT_RELOADED;\n        }\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    NamedList defaultParams = (NamedList) initArgs.get(\"defaults\");\n    RequestInfo requestParams = new RequestInfo(req, getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {    \n      String dataConfigFile = params.get(\"config\");\n      String dataConfig = params.get(\"dataConfig\");\n      if(dataConfigFile != null) {\n        dataConfig = SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile));\n      }\n      if(dataConfig==null)  {\n        rsp.add(\"status\", DataImporter.MSG.NO_CONFIG_FOUND);\n      } else {\n        // Modify incoming request params to add wt=raw\n        ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n        rawParams.set(CommonParams.WT, \"raw\");\n        req.setParams(rawParams);\n        ContentStreamBase content = new ContentStreamBase.StringStream(dataConfig);\n        rsp.add(RawResponseWriter.CONTENT, content);\n      }\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null) {\n      rsp.add(\"command\", command);\n    }\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n        importer.maybeReloadConfiguration(requestParams, defaultParams);\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        DIHWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n              rsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) { \n        if(importer.maybeReloadConfiguration(requestParams, defaultParams)) {\n          message = DataImporter.MSG.CONFIG_RELOADED;\n        } else {\n          message = DataImporter.MSG.CONFIG_NOT_RELOADED;\n        }\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"065149fe93487b268d748ae2886ff1341b0ccd21","date":1562126379,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    NamedList defaultParams = (NamedList) initArgs.get(\"defaults\");\n    RequestInfo requestParams = new RequestInfo(req, getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {    \n      String dataConfigFile = params.get(\"config\");\n      String dataConfig = params.get(\"dataConfig\"); // needn't check dataConfigParam_enabled; we don't execute it\n      if(dataConfigFile != null) {\n        dataConfig = SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile));\n      }\n      if(dataConfig==null)  {\n        rsp.add(\"status\", DataImporter.MSG.NO_CONFIG_FOUND);\n      } else {\n        // Modify incoming request params to add wt=raw\n        ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n        rawParams.set(CommonParams.WT, \"raw\");\n        req.setParams(rawParams);\n        ContentStreamBase content = new ContentStreamBase.StringStream(dataConfig);\n        rsp.add(RawResponseWriter.CONTENT, content);\n      }\n      return;\n    }\n\n    if (params.get(\"dataConfig\") != null && dataConfigParam_enabled == false) {\n      throw new SolrException(SolrException.ErrorCode.FORBIDDEN,\n          \"Use of the dataConfig param (DIH debug mode) requires the system property \" +\n              ENABLE_DIH_DATA_CONFIG_PARAM + \" because it's a security risk.\");\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null) {\n      rsp.add(\"command\", command);\n    }\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n        importer.maybeReloadConfiguration(requestParams, defaultParams);\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessorChain(params);\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        DIHWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n              rsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) { \n        if(importer.maybeReloadConfiguration(requestParams, defaultParams)) {\n          message = DataImporter.MSG.CONFIG_RELOADED;\n        } else {\n          message = DataImporter.MSG.CONFIG_NOT_RELOADED;\n        }\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    NamedList defaultParams = (NamedList) initArgs.get(\"defaults\");\n    RequestInfo requestParams = new RequestInfo(req, getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {    \n      String dataConfigFile = params.get(\"config\");\n      String dataConfig = params.get(\"dataConfig\");\n      if(dataConfigFile != null) {\n        dataConfig = SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile));\n      }\n      if(dataConfig==null)  {\n        rsp.add(\"status\", DataImporter.MSG.NO_CONFIG_FOUND);\n      } else {\n        // Modify incoming request params to add wt=raw\n        ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n        rawParams.set(CommonParams.WT, \"raw\");\n        req.setParams(rawParams);\n        ContentStreamBase content = new ContentStreamBase.StringStream(dataConfig);\n        rsp.add(RawResponseWriter.CONTENT, content);\n      }\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null) {\n      rsp.add(\"command\", command);\n    }\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n        importer.maybeReloadConfiguration(requestParams, defaultParams);\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessorChain(params);\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        DIHWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n              rsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) { \n        if(importer.maybeReloadConfiguration(requestParams, defaultParams)) {\n          message = DataImporter.MSG.CONFIG_RELOADED;\n        } else {\n          message = DataImporter.MSG.CONFIG_NOT_RELOADED;\n        }\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    NamedList defaultParams = (NamedList) initArgs.get(\"defaults\");\n    RequestInfo requestParams = new RequestInfo(req, getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {    \n      String dataConfigFile = params.get(\"config\");\n      String dataConfig = params.get(\"dataConfig\"); // needn't check dataConfigParam_enabled; we don't execute it\n      if(dataConfigFile != null) {\n        dataConfig = SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile));\n      }\n      if(dataConfig==null)  {\n        rsp.add(\"status\", DataImporter.MSG.NO_CONFIG_FOUND);\n      } else {\n        // Modify incoming request params to add wt=raw\n        ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n        rawParams.set(CommonParams.WT, \"raw\");\n        req.setParams(rawParams);\n        ContentStreamBase content = new ContentStreamBase.StringStream(dataConfig);\n        rsp.add(RawResponseWriter.CONTENT, content);\n      }\n      return;\n    }\n\n    if (params.get(\"dataConfig\") != null && dataConfigParam_enabled == false) {\n      throw new SolrException(SolrException.ErrorCode.FORBIDDEN,\n          \"Use of the dataConfig param (DIH debug mode) requires the system property \" +\n              ENABLE_DIH_DATA_CONFIG_PARAM + \" because it's a security risk.\");\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null) {\n      rsp.add(\"command\", command);\n    }\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n        importer.maybeReloadConfiguration(requestParams, defaultParams);\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessorChain(params);\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        DIHWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n              rsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) { \n        if(importer.maybeReloadConfiguration(requestParams, defaultParams)) {\n          message = DataImporter.MSG.CONFIG_RELOADED;\n        } else {\n          message = DataImporter.MSG.CONFIG_NOT_RELOADED;\n        }\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    NamedList defaultParams = (NamedList) initArgs.get(\"defaults\");\n    RequestInfo requestParams = new RequestInfo(req, getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {    \n      String dataConfigFile = params.get(\"config\");\n      String dataConfig = params.get(\"dataConfig\"); // needn't check dataConfigParam_enabled; we don't execute it\n      if(dataConfigFile != null) {\n        dataConfig = SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile));\n      }\n      if(dataConfig==null)  {\n        rsp.add(\"status\", DataImporter.MSG.NO_CONFIG_FOUND);\n      } else {\n        // Modify incoming request params to add wt=raw\n        ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n        rawParams.set(CommonParams.WT, \"raw\");\n        req.setParams(rawParams);\n        ContentStreamBase content = new ContentStreamBase.StringStream(dataConfig);\n        rsp.add(RawResponseWriter.CONTENT, content);\n      }\n      return;\n    }\n\n    if (params.get(\"dataConfig\") != null && dataConfigParam_enabled == false) {\n      throw new SolrException(SolrException.ErrorCode.FORBIDDEN,\n          \"Use of the dataConfig param (DIH debug mode) requires the system property \" +\n              ENABLE_DIH_DATA_CONFIG_PARAM + \" because it's a security risk.\");\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null) {\n      rsp.add(\"command\", command);\n    }\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n        importer.maybeReloadConfiguration(requestParams, defaultParams);\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessorChain(params);\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        DIHWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n              rsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) { \n        if(importer.maybeReloadConfiguration(requestParams, defaultParams)) {\n          message = DataImporter.MSG.CONFIG_RELOADED;\n        } else {\n          message = DataImporter.MSG.CONFIG_NOT_RELOADED;\n        }\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    NamedList defaultParams = (NamedList) initArgs.get(\"defaults\");\n    RequestInfo requestParams = new RequestInfo(req, getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {    \n      String dataConfigFile = params.get(\"config\");\n      String dataConfig = params.get(\"dataConfig\"); // needn't check dataConfigParam_enabled; we don't execute it\n      if(dataConfigFile != null) {\n        dataConfig = SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile));\n      }\n      if(dataConfig==null)  {\n        rsp.add(\"status\", DataImporter.MSG.NO_CONFIG_FOUND);\n      } else {\n        // Modify incoming request params to add wt=raw\n        ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n        rawParams.set(CommonParams.WT, \"raw\");\n        req.setParams(rawParams);\n        ContentStreamBase content = new ContentStreamBase.StringStream(dataConfig);\n        rsp.add(RawResponseWriter.CONTENT, content);\n      }\n      return;\n    }\n\n    if (params.get(\"dataConfig\") != null && dataConfigParam_enabled == false) {\n      throw new SolrException(SolrException.ErrorCode.FORBIDDEN,\n          \"Use of the dataConfig param (DIH debug mode) requires the system property \" +\n              ENABLE_DIH_DATA_CONFIG_PARAM + \" because it's a security risk.\");\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null) {\n      rsp.add(\"command\", command);\n    }\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n        importer.maybeReloadConfiguration(requestParams, defaultParams);\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessorChain(params);\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        DIHWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n              rsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) { \n        if(importer.maybeReloadConfiguration(requestParams, defaultParams)) {\n          message = DataImporter.MSG.CONFIG_RELOADED;\n        } else {\n          message = DataImporter.MSG.CONFIG_NOT_RELOADED;\n        }\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    NamedList defaultParams = (NamedList) initArgs.get(\"defaults\");\n    RequestInfo requestParams = new RequestInfo(req, getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {    \n      String dataConfigFile = params.get(\"config\");\n      String dataConfig = params.get(\"dataConfig\"); // needn't check dataConfigParam_enabled; we don't execute it\n      if(dataConfigFile != null) {\n        dataConfig = SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile));\n      }\n      if(dataConfig==null)  {\n        rsp.add(\"status\", DataImporter.MSG.NO_CONFIG_FOUND);\n      } else {\n        // Modify incoming request params to add wt=raw\n        ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n        rawParams.set(CommonParams.WT, \"raw\");\n        req.setParams(rawParams);\n        ContentStreamBase content = new ContentStreamBase.StringStream(dataConfig);\n        rsp.add(RawResponseWriter.CONTENT, content);\n      }\n      return;\n    }\n\n    if (params.get(\"dataConfig\") != null && dataConfigParam_enabled == false) {\n      throw new SolrException(SolrException.ErrorCode.FORBIDDEN,\n          \"Use of the dataConfig param (DIH debug mode) requires the system property \" +\n              ENABLE_DIH_DATA_CONFIG_PARAM + \" because it's a security risk.\");\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null) {\n      rsp.add(\"command\", command);\n    }\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n        importer.maybeReloadConfiguration(requestParams, defaultParams);\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessorChain(params);\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        DIHWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n              rsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) { \n        if(importer.maybeReloadConfiguration(requestParams, defaultParams)) {\n          message = DataImporter.MSG.CONFIG_RELOADED;\n        } else {\n          message = DataImporter.MSG.CONFIG_NOT_RELOADED;\n        }\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList defaultParams = (NamedList) initArgs.get(\"defaults\");\n    RequestInfo requestParams = new RequestInfo(req, getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {    \n      String dataConfigFile = params.get(\"config\");\n      String dataConfig = params.get(\"dataConfig\"); // needn't check dataConfigParam_enabled; we don't execute it\n      if(dataConfigFile != null) {\n        dataConfig = SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile));\n      }\n      if(dataConfig==null)  {\n        rsp.add(\"status\", DataImporter.MSG.NO_CONFIG_FOUND);\n      } else {\n        // Modify incoming request params to add wt=raw\n        ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n        rawParams.set(CommonParams.WT, \"raw\");\n        req.setParams(rawParams);\n        ContentStreamBase content = new ContentStreamBase.StringStream(dataConfig);\n        rsp.add(RawResponseWriter.CONTENT, content);\n      }\n      return;\n    }\n\n    if (params.get(\"dataConfig\") != null && dataConfigParam_enabled == false) {\n      throw new SolrException(SolrException.ErrorCode.FORBIDDEN,\n          \"Use of the dataConfig param (DIH debug mode) requires the system property \" +\n              ENABLE_DIH_DATA_CONFIG_PARAM + \" because it's a security risk.\");\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null) {\n      rsp.add(\"command\", command);\n    }\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n        importer.maybeReloadConfiguration(requestParams, defaultParams);\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessorChain(params);\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        DIHWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n              rsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) { \n        if(importer.maybeReloadConfiguration(requestParams, defaultParams)) {\n          message = DataImporter.MSG.CONFIG_RELOADED;\n        } else {\n          message = DataImporter.MSG.CONFIG_NOT_RELOADED;\n        }\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    NamedList defaultParams = (NamedList) initArgs.get(\"defaults\");\n    RequestInfo requestParams = new RequestInfo(req, getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {    \n      String dataConfigFile = params.get(\"config\");\n      String dataConfig = params.get(\"dataConfig\"); // needn't check dataConfigParam_enabled; we don't execute it\n      if(dataConfigFile != null) {\n        dataConfig = SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile));\n      }\n      if(dataConfig==null)  {\n        rsp.add(\"status\", DataImporter.MSG.NO_CONFIG_FOUND);\n      } else {\n        // Modify incoming request params to add wt=raw\n        ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n        rawParams.set(CommonParams.WT, \"raw\");\n        req.setParams(rawParams);\n        ContentStreamBase content = new ContentStreamBase.StringStream(dataConfig);\n        rsp.add(RawResponseWriter.CONTENT, content);\n      }\n      return;\n    }\n\n    if (params.get(\"dataConfig\") != null && dataConfigParam_enabled == false) {\n      throw new SolrException(SolrException.ErrorCode.FORBIDDEN,\n          \"Use of the dataConfig param (DIH debug mode) requires the system property \" +\n              ENABLE_DIH_DATA_CONFIG_PARAM + \" because it's a security risk.\");\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null) {\n      rsp.add(\"command\", command);\n    }\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n        importer.maybeReloadConfiguration(requestParams, defaultParams);\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessorChain(params);\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        DIHWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n              rsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) { \n        if(importer.maybeReloadConfiguration(requestParams, defaultParams)) {\n          message = DataImporter.MSG.CONFIG_RELOADED;\n        } else {\n          message = DataImporter.MSG.CONFIG_NOT_RELOADED;\n        }\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    \n    //TODO: figure out why just the first one is OK...\n    ContentStream contentStream = null;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          contentStream = stream;\n          break;\n      }\n    }\n    SolrParams params = req.getParams();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList defaultParams = (NamedList) initArgs.get(\"defaults\");\n    RequestInfo requestParams = new RequestInfo(req, getParamsMap(params), contentStream);\n    String command = requestParams.getCommand();\n    \n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {    \n      String dataConfigFile = params.get(\"config\");\n      String dataConfig = params.get(\"dataConfig\"); // needn't check dataConfigParam_enabled; we don't execute it\n      if(dataConfigFile != null) {\n        dataConfig = SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile));\n      }\n      if(dataConfig==null)  {\n        rsp.add(\"status\", DataImporter.MSG.NO_CONFIG_FOUND);\n      } else {\n        // Modify incoming request params to add wt=raw\n        ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n        rawParams.set(CommonParams.WT, \"raw\");\n        req.setParams(rawParams);\n        ContentStreamBase content = new ContentStreamBase.StringStream(dataConfig);\n        rsp.add(RawResponseWriter.CONTENT, content);\n      }\n      return;\n    }\n\n    if (params.get(\"dataConfig\") != null && dataConfigParam_enabled == false) {\n      throw new SolrException(SolrException.ErrorCode.FORBIDDEN,\n          \"Use of the dataConfig param (DIH debug mode) requires the system property \" +\n              ENABLE_DIH_DATA_CONFIG_PARAM + \" because it's a security risk.\");\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null) {\n      rsp.add(\"command\", command);\n    }\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n        importer.maybeReloadConfiguration(requestParams, defaultParams);\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessorChain(params);\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        DIHWriter sw = getSolrWriter(processor, loader, requestParams, req);\n        \n        if (requestParams.isDebug()) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", requestParams.getDebugInfo().debugDocuments);\n            if (requestParams.getDebugInfo().debugVerboseOutput != null) {\n              rsp.add(\"verbose-output\", requestParams.getDebugInfo().debugVerboseOutput);\n            }\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.getContentStream() == null && !requestParams.isSyncMode()){\n            importer.runAsync(requestParams, sw);\n          } else {\n            importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) { \n        if(importer.maybeReloadConfiguration(requestParams, defaultParams)) {\n          message = DataImporter.MSG.CONFIG_RELOADED;\n        } else {\n          message = DataImporter.MSG.CONFIG_NOT_RELOADED;\n        }\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd":["5c89c6c3774e38c725fbfffcb911d466a97f9364"],"68a568183b091ca52e6a2c0f9b615be5f3a0974a":["08970e5b8411182a29412c177eff67ec1110095b"],"38cf2ff411b3f7342febd22163907bafb5342a6f":["f95755793ac5f02eed6154c705e8638e001a5a0a"],"82c0f50a240cf02105b13b11e49095779864d37f":["c26f00b574427b55127e869b935845554afde1fa"],"024e13388acbf5562fcbb77a129620982a5e2d79":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["065149fe93487b268d748ae2886ff1341b0ccd21"],"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["f3a7218407032c06bc1d6c57edf979e7788f5def"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"f95755793ac5f02eed6154c705e8638e001a5a0a":["82c0f50a240cf02105b13b11e49095779864d37f"],"5c89c6c3774e38c725fbfffcb911d466a97f9364":["68a568183b091ca52e6a2c0f9b615be5f3a0974a"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","5101aff20e65c9a285c274627ec956eb5409d253"],"08970e5b8411182a29412c177eff67ec1110095b":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"5101aff20e65c9a285c274627ec956eb5409d253":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["5c89c6c3774e38c725fbfffcb911d466a97f9364","3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"065149fe93487b268d748ae2886ff1341b0ccd21":["3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","5101aff20e65c9a285c274627ec956eb5409d253"],"f3a7218407032c06bc1d6c57edf979e7788f5def":["38cf2ff411b3f7342febd22163907bafb5342a6f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["5101aff20e65c9a285c274627ec956eb5409d253"]},"commit2Childs":{"3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","065149fe93487b268d748ae2886ff1341b0ccd21"],"68a568183b091ca52e6a2c0f9b615be5f3a0974a":["5c89c6c3774e38c725fbfffcb911d466a97f9364"],"38cf2ff411b3f7342febd22163907bafb5342a6f":["f3a7218407032c06bc1d6c57edf979e7788f5def"],"82c0f50a240cf02105b13b11e49095779864d37f":["f95755793ac5f02eed6154c705e8638e001a5a0a"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["8fd5be977c105554c6a7b68afcdbc511439723ab","5101aff20e65c9a285c274627ec956eb5409d253","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c26f00b574427b55127e869b935845554afde1fa":["82c0f50a240cf02105b13b11e49095779864d37f"],"f95755793ac5f02eed6154c705e8638e001a5a0a":["38cf2ff411b3f7342febd22163907bafb5342a6f"],"5c89c6c3774e38c725fbfffcb911d466a97f9364":["3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"08970e5b8411182a29412c177eff67ec1110095b":["68a568183b091ca52e6a2c0f9b615be5f3a0974a"],"5101aff20e65c9a285c274627ec956eb5409d253":["8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"065149fe93487b268d748ae2886ff1341b0ccd21":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["024e13388acbf5562fcbb77a129620982a5e2d79"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"f3a7218407032c06bc1d6c57edf979e7788f5def":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["08970e5b8411182a29412c177eff67ec1110095b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8fd5be977c105554c6a7b68afcdbc511439723ab","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}