{"path":"src/java/org/apache/lucene/util/PriorityQueue#initialize(int).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/PriorityQueue#initialize(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Subclass constructors must call this. */\n  protected final void initialize(int maxSize) {\n    size = 0;\n    int heapSize = (maxSize * 2) + 1;\n    heap = new Object[heapSize];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d36e31648b7ec39d875e5e05bcc9ac24ae313690","date":1063282530,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/PriorityQueue#initialize(int).mjava","pathOld":"src/java/org/apache/lucene/util/PriorityQueue#initialize(int).mjava","sourceNew":"  /** Subclass constructors must call this. */\n  protected final void initialize(int maxSize) {\n    size = 0;\n    int heapSize = maxSize + 1;\n    heap = new Object[heapSize];\n    this.maxSize = maxSize;\n  }\n\n","sourceOld":"  /** Subclass constructors must call this. */\n  protected final void initialize(int maxSize) {\n    size = 0;\n    int heapSize = (maxSize * 2) + 1;\n    heap = new Object[heapSize];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5241670df94f0524d3e8e9764331dea13b545564","date":1197914713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/PriorityQueue#initialize(int).mjava","pathOld":"src/java/org/apache/lucene/util/PriorityQueue#initialize(int).mjava","sourceNew":"  /** Subclass constructors must call this. */\n  protected final void initialize(int maxSize) {\n    size = 0;\n    int heapSize;\n    if (0 == maxSize)\n      // We allocate 1 extra to avoid if statement in top()\n      heapSize = 2;\n    else\n      heapSize = maxSize + 1;\n    heap = new Object[heapSize];\n    this.maxSize = maxSize;\n  }\n\n","sourceOld":"  /** Subclass constructors must call this. */\n  protected final void initialize(int maxSize) {\n    size = 0;\n    int heapSize = maxSize + 1;\n    heap = new Object[heapSize];\n    this.maxSize = maxSize;\n  }\n\n","bugFix":null,"bugIntro":["315919a79e7aa3e6f022989bd2e522b592695022"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc","date":1241865401,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/PriorityQueue#initialize(int).mjava","pathOld":"src/java/org/apache/lucene/util/PriorityQueue#initialize(int).mjava","sourceNew":"  /** Subclass constructors must call this. */\n  protected final void initialize(int maxSize) {\n    size = 0;\n    int heapSize;\n    if (0 == maxSize)\n      // We allocate 1 extra to avoid if statement in top()\n      heapSize = 2;\n    else\n      heapSize = maxSize + 1;\n    heap = new Object[heapSize];\n    this.maxSize = maxSize;\n    \n    // If sentinel objects are supported, populate the queue with them\n    Object sentinel = getSentinelObject();\n    if (sentinel != null) {\n      heap[1] = sentinel;\n      for (int i = 2; i < heap.length; i++) {\n        heap[i] = getSentinelObject();\n      }\n      size = maxSize;\n    }\n  }\n\n","sourceOld":"  /** Subclass constructors must call this. */\n  protected final void initialize(int maxSize) {\n    size = 0;\n    int heapSize;\n    if (0 == maxSize)\n      // We allocate 1 extra to avoid if statement in top()\n      heapSize = 2;\n    else\n      heapSize = maxSize + 1;\n    heap = new Object[heapSize];\n    this.maxSize = maxSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d48430886f0d62ca63d20bf2a8bc01acee0c12f","date":1254504483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/PriorityQueue#initialize(int).mjava","pathOld":"src/java/org/apache/lucene/util/PriorityQueue#initialize(int).mjava","sourceNew":"  /** Subclass constructors must call this. */\n  @SuppressWarnings(\"unchecked\")\n  protected final void initialize(int maxSize) {\n    size = 0;\n    int heapSize;\n    if (0 == maxSize)\n      // We allocate 1 extra to avoid if statement in top()\n      heapSize = 2;\n    else\n      heapSize = maxSize + 1;\n    heap = (T[]) new Object[heapSize]; // T is unbounded type, so this unchecked cast works always\n    this.maxSize = maxSize;\n    \n    // If sentinel objects are supported, populate the queue with them\n    T sentinel = getSentinelObject();\n    if (sentinel != null) {\n      heap[1] = sentinel;\n      for (int i = 2; i < heap.length; i++) {\n        heap[i] = getSentinelObject();\n      }\n      size = maxSize;\n    }\n  }\n\n","sourceOld":"  /** Subclass constructors must call this. */\n  protected final void initialize(int maxSize) {\n    size = 0;\n    int heapSize;\n    if (0 == maxSize)\n      // We allocate 1 extra to avoid if statement in top()\n      heapSize = 2;\n    else\n      heapSize = maxSize + 1;\n    heap = new Object[heapSize];\n    this.maxSize = maxSize;\n    \n    // If sentinel objects are supported, populate the queue with them\n    Object sentinel = getSentinelObject();\n    if (sentinel != null) {\n      heap[1] = sentinel;\n      for (int i = 2; i < heap.length; i++) {\n        heap[i] = getSentinelObject();\n      }\n      size = maxSize;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"34086bd39404420e6e5699d7c5f35c1c146bb2a4","date":1260099686,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/PriorityQueue#initialize(int).mjava","pathOld":"src/java/org/apache/lucene/util/PriorityQueue#initialize(int).mjava","sourceNew":"  /** Subclass constructors must call this. */\n  @SuppressWarnings(\"unchecked\")\n  protected final void initialize(int maxSize) {\n    size = 0;\n    int heapSize;\n    if (0 == maxSize)\n      // We allocate 1 extra to avoid if statement in top()\n      heapSize = 2;\n    else {\n      if (maxSize == Integer.MAX_VALUE) {\n        // Don't wrap heapSize to -1, in this case, which\n        // causes a confusing NegativeArraySizeException.\n        // Note that very likely this will simply then hit\n        // an OOME, but at least that's more indicative to\n        // caller that this values is too big:\n        heapSize = Integer.MAX_VALUE;\n      } else {\n        heapSize = maxSize + 1;\n      }\n    }\n    heap = (T[]) new Object[heapSize]; // T is unbounded type, so this unchecked cast works always\n    this.maxSize = maxSize;\n    \n    // If sentinel objects are supported, populate the queue with them\n    T sentinel = getSentinelObject();\n    if (sentinel != null) {\n      heap[1] = sentinel;\n      for (int i = 2; i < heap.length; i++) {\n        heap[i] = getSentinelObject();\n      }\n      size = maxSize;\n    }\n  }\n\n","sourceOld":"  /** Subclass constructors must call this. */\n  @SuppressWarnings(\"unchecked\")\n  protected final void initialize(int maxSize) {\n    size = 0;\n    int heapSize;\n    if (0 == maxSize)\n      // We allocate 1 extra to avoid if statement in top()\n      heapSize = 2;\n    else\n      heapSize = maxSize + 1;\n    heap = (T[]) new Object[heapSize]; // T is unbounded type, so this unchecked cast works always\n    this.maxSize = maxSize;\n    \n    // If sentinel objects are supported, populate the queue with them\n    T sentinel = getSentinelObject();\n    if (sentinel != null) {\n      heap[1] = sentinel;\n      for (int i = 2; i < heap.length; i++) {\n        heap[i] = getSentinelObject();\n      }\n      size = maxSize;\n    }\n  }\n\n","bugFix":null,"bugIntro":["315919a79e7aa3e6f022989bd2e522b592695022","b87f60c52c2869adb81cdeb14a2707a9cbe79960"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b87f60c52c2869adb81cdeb14a2707a9cbe79960","date":1260179858,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/PriorityQueue#initialize(int).mjava","pathOld":"src/java/org/apache/lucene/util/PriorityQueue#initialize(int).mjava","sourceNew":"  /** Subclass constructors must call this. */\n  @SuppressWarnings(\"unchecked\")\n  protected final void initialize(int maxSize) {\n    size = 0;\n    int heapSize;\n    if (0 == maxSize)\n      // We allocate 1 extra to avoid if statement in top()\n      heapSize = 2;\n    else {\n      if (maxSize == Integer.MAX_VALUE) {\n        // Don't wrap heapSize to -1, in this case, which\n        // causes a confusing NegativeArraySizeException.\n        // Note that very likely this will simply then hit\n        // an OOME, but at least that's more indicative to\n        // caller that this values is too big.  We don't +1\n        // in this case, but it's very unlikely in practice\n        // one will actually insert this many objects into\n        // the PQ:\n        heapSize = Integer.MAX_VALUE;\n      } else {\n        // NOTE: we add +1 because all access to heap is\n        // 1-based not 0-based.  heap[0] is unused.\n        heapSize = maxSize + 1;\n      }\n    }\n    heap = (T[]) new Object[heapSize]; // T is unbounded type, so this unchecked cast works always\n    this.maxSize = maxSize;\n    \n    // If sentinel objects are supported, populate the queue with them\n    T sentinel = getSentinelObject();\n    if (sentinel != null) {\n      heap[1] = sentinel;\n      for (int i = 2; i < heap.length; i++) {\n        heap[i] = getSentinelObject();\n      }\n      size = maxSize;\n    }\n  }\n\n","sourceOld":"  /** Subclass constructors must call this. */\n  @SuppressWarnings(\"unchecked\")\n  protected final void initialize(int maxSize) {\n    size = 0;\n    int heapSize;\n    if (0 == maxSize)\n      // We allocate 1 extra to avoid if statement in top()\n      heapSize = 2;\n    else {\n      if (maxSize == Integer.MAX_VALUE) {\n        // Don't wrap heapSize to -1, in this case, which\n        // causes a confusing NegativeArraySizeException.\n        // Note that very likely this will simply then hit\n        // an OOME, but at least that's more indicative to\n        // caller that this values is too big:\n        heapSize = Integer.MAX_VALUE;\n      } else {\n        heapSize = maxSize + 1;\n      }\n    }\n    heap = (T[]) new Object[heapSize]; // T is unbounded type, so this unchecked cast works always\n    this.maxSize = maxSize;\n    \n    // If sentinel objects are supported, populate the queue with them\n    T sentinel = getSentinelObject();\n    if (sentinel != null) {\n      heap[1] = sentinel;\n      for (int i = 2; i < heap.length; i++) {\n        heap[i] = getSentinelObject();\n      }\n      size = maxSize;\n    }\n  }\n\n","bugFix":["34086bd39404420e6e5699d7c5f35c1c146bb2a4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PriorityQueue#initialize(int).mjava","pathOld":"src/java/org/apache/lucene/util/PriorityQueue#initialize(int).mjava","sourceNew":"  /** Subclass constructors must call this. */\n  @SuppressWarnings(\"unchecked\")\n  protected final void initialize(int maxSize) {\n    size = 0;\n    int heapSize;\n    if (0 == maxSize)\n      // We allocate 1 extra to avoid if statement in top()\n      heapSize = 2;\n    else {\n      if (maxSize == Integer.MAX_VALUE) {\n        // Don't wrap heapSize to -1, in this case, which\n        // causes a confusing NegativeArraySizeException.\n        // Note that very likely this will simply then hit\n        // an OOME, but at least that's more indicative to\n        // caller that this values is too big.  We don't +1\n        // in this case, but it's very unlikely in practice\n        // one will actually insert this many objects into\n        // the PQ:\n        heapSize = Integer.MAX_VALUE;\n      } else {\n        // NOTE: we add +1 because all access to heap is\n        // 1-based not 0-based.  heap[0] is unused.\n        heapSize = maxSize + 1;\n      }\n    }\n    heap = (T[]) new Object[heapSize]; // T is unbounded type, so this unchecked cast works always\n    this.maxSize = maxSize;\n    \n    // If sentinel objects are supported, populate the queue with them\n    T sentinel = getSentinelObject();\n    if (sentinel != null) {\n      heap[1] = sentinel;\n      for (int i = 2; i < heap.length; i++) {\n        heap[i] = getSentinelObject();\n      }\n      size = maxSize;\n    }\n  }\n\n","sourceOld":"  /** Subclass constructors must call this. */\n  @SuppressWarnings(\"unchecked\")\n  protected final void initialize(int maxSize) {\n    size = 0;\n    int heapSize;\n    if (0 == maxSize)\n      // We allocate 1 extra to avoid if statement in top()\n      heapSize = 2;\n    else {\n      if (maxSize == Integer.MAX_VALUE) {\n        // Don't wrap heapSize to -1, in this case, which\n        // causes a confusing NegativeArraySizeException.\n        // Note that very likely this will simply then hit\n        // an OOME, but at least that's more indicative to\n        // caller that this values is too big.  We don't +1\n        // in this case, but it's very unlikely in practice\n        // one will actually insert this many objects into\n        // the PQ:\n        heapSize = Integer.MAX_VALUE;\n      } else {\n        // NOTE: we add +1 because all access to heap is\n        // 1-based not 0-based.  heap[0] is unused.\n        heapSize = maxSize + 1;\n      }\n    }\n    heap = (T[]) new Object[heapSize]; // T is unbounded type, so this unchecked cast works always\n    this.maxSize = maxSize;\n    \n    // If sentinel objects are supported, populate the queue with them\n    T sentinel = getSentinelObject();\n    if (sentinel != null) {\n      heap[1] = sentinel;\n      for (int i = 2; i < heap.length; i++) {\n        heap[i] = getSentinelObject();\n      }\n      size = maxSize;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["5241670df94f0524d3e8e9764331dea13b545564"],"d36e31648b7ec39d875e5e05bcc9ac24ae313690":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b87f60c52c2869adb81cdeb14a2707a9cbe79960":["34086bd39404420e6e5699d7c5f35c1c146bb2a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34086bd39404420e6e5699d7c5f35c1c146bb2a4":["8d48430886f0d62ca63d20bf2a8bc01acee0c12f"],"8d48430886f0d62ca63d20bf2a8bc01acee0c12f":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"5241670df94f0524d3e8e9764331dea13b545564":["d36e31648b7ec39d875e5e05bcc9ac24ae313690"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b87f60c52c2869adb81cdeb14a2707a9cbe79960"]},"commit2Childs":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["8d48430886f0d62ca63d20bf2a8bc01acee0c12f"],"d36e31648b7ec39d875e5e05bcc9ac24ae313690":["5241670df94f0524d3e8e9764331dea13b545564"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["d36e31648b7ec39d875e5e05bcc9ac24ae313690"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"b87f60c52c2869adb81cdeb14a2707a9cbe79960":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"34086bd39404420e6e5699d7c5f35c1c146bb2a4":["b87f60c52c2869adb81cdeb14a2707a9cbe79960"],"5241670df94f0524d3e8e9764331dea13b545564":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"8d48430886f0d62ca63d20bf2a8bc01acee0c12f":["34086bd39404420e6e5699d7c5f35c1c146bb2a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}