{"path":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#fileCopy(File,File).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#fileCopy(File,File).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrXMLSerializer#fileCopy(File,File).mjava","sourceNew":"  /**\n   * Copies a src file to a dest file: used to circumvent the platform\n   * discrepancies regarding renaming files.\n   */\n  private static void fileCopy(File src, File dest) throws IOException {\n    IOException xforward = null;\n    FileInputStream fis = null;\n    FileOutputStream fos = null;\n    FileChannel fcin = null;\n    FileChannel fcout = null;\n    try {\n      fis = new FileInputStream(src);\n      fos = new FileOutputStream(dest);\n      fcin = fis.getChannel();\n      fcout = fos.getChannel();\n      // do the file copy 32Mb at a time\n      final int MB32 = 32 * 1024 * 1024;\n      long size = fcin.size();\n      long position = 0;\n      while (position < size) {\n        position += fcin.transferTo(position, MB32, fcout);\n      }\n    } catch (IOException xio) {\n      xforward = xio;\n    } finally {\n      if (fis != null) try {\n        fis.close();\n        fis = null;\n      } catch (IOException xio) {}\n      if (fos != null) try {\n        fos.close();\n        fos = null;\n      } catch (IOException xio) {}\n      if (fcin != null && fcin.isOpen()) try {\n        fcin.close();\n        fcin = null;\n      } catch (IOException xio) {}\n      if (fcout != null && fcout.isOpen()) try {\n        fcout.close();\n        fcout = null;\n      } catch (IOException xio) {}\n    }\n    if (xforward != null) {\n      throw xforward;\n    }\n  }\n\n","sourceOld":"  /**\n   * Copies a src file to a dest file: used to circumvent the platform\n   * discrepancies regarding renaming files.\n   */\n  private static void fileCopy(File src, File dest) throws IOException {\n    IOException xforward = null;\n    FileInputStream fis = null;\n    FileOutputStream fos = null;\n    FileChannel fcin = null;\n    FileChannel fcout = null;\n    try {\n      fis = new FileInputStream(src);\n      fos = new FileOutputStream(dest);\n      fcin = fis.getChannel();\n      fcout = fos.getChannel();\n      // do the file copy 32Mb at a time\n      final int MB32 = 32 * 1024 * 1024;\n      long size = fcin.size();\n      long position = 0;\n      while (position < size) {\n        position += fcin.transferTo(position, MB32, fcout);\n      }\n    } catch (IOException xio) {\n      xforward = xio;\n    } finally {\n      if (fis != null) try {\n        fis.close();\n        fis = null;\n      } catch (IOException xio) {}\n      if (fos != null) try {\n        fos.close();\n        fos = null;\n      } catch (IOException xio) {}\n      if (fcin != null && fcin.isOpen()) try {\n        fcin.close();\n        fcin = null;\n      } catch (IOException xio) {}\n      if (fcout != null && fcout.isOpen()) try {\n        fcout.close();\n        fcout = null;\n      } catch (IOException xio) {}\n    }\n    if (xforward != null) {\n      throw xforward;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#fileCopy(File,File).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrXMLSerializer#fileCopy(File,File).mjava","sourceNew":"  /**\n   * Copies a src file to a dest file: used to circumvent the platform\n   * discrepancies regarding renaming files.\n   */\n  private static void fileCopy(File src, File dest) throws IOException {\n    IOException xforward = null;\n    FileInputStream fis = null;\n    FileOutputStream fos = null;\n    FileChannel fcin = null;\n    FileChannel fcout = null;\n    try {\n      fis = new FileInputStream(src);\n      fos = new FileOutputStream(dest);\n      fcin = fis.getChannel();\n      fcout = fos.getChannel();\n      // do the file copy 32Mb at a time\n      final int MB32 = 32 * 1024 * 1024;\n      long size = fcin.size();\n      long position = 0;\n      while (position < size) {\n        position += fcin.transferTo(position, MB32, fcout);\n      }\n    } catch (IOException xio) {\n      xforward = xio;\n    } finally {\n      if (fis != null) try {\n        fis.close();\n        fis = null;\n      } catch (IOException xio) {}\n      if (fos != null) try {\n        fos.close();\n        fos = null;\n      } catch (IOException xio) {}\n      if (fcin != null && fcin.isOpen()) try {\n        fcin.close();\n        fcin = null;\n      } catch (IOException xio) {}\n      if (fcout != null && fcout.isOpen()) try {\n        fcout.close();\n        fcout = null;\n      } catch (IOException xio) {}\n    }\n    if (xforward != null) {\n      throw xforward;\n    }\n  }\n\n","sourceOld":"  /**\n   * Copies a src file to a dest file: used to circumvent the platform\n   * discrepancies regarding renaming files.\n   */\n  private static void fileCopy(File src, File dest) throws IOException {\n    IOException xforward = null;\n    FileInputStream fis = null;\n    FileOutputStream fos = null;\n    FileChannel fcin = null;\n    FileChannel fcout = null;\n    try {\n      fis = new FileInputStream(src);\n      fos = new FileOutputStream(dest);\n      fcin = fis.getChannel();\n      fcout = fos.getChannel();\n      // do the file copy 32Mb at a time\n      final int MB32 = 32 * 1024 * 1024;\n      long size = fcin.size();\n      long position = 0;\n      while (position < size) {\n        position += fcin.transferTo(position, MB32, fcout);\n      }\n    } catch (IOException xio) {\n      xforward = xio;\n    } finally {\n      if (fis != null) try {\n        fis.close();\n        fis = null;\n      } catch (IOException xio) {}\n      if (fos != null) try {\n        fos.close();\n        fos = null;\n      } catch (IOException xio) {}\n      if (fcin != null && fcin.isOpen()) try {\n        fcin.close();\n        fcin = null;\n      } catch (IOException xio) {}\n      if (fcout != null && fcout.isOpen()) try {\n        fcout.close();\n        fcout = null;\n      } catch (IOException xio) {}\n    }\n    if (xforward != null) {\n      throw xforward;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#fileCopy(File,File).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrXMLSerializer#fileCopy(File,File).mjava","sourceNew":"  /**\n   * Copies a src file to a dest file: used to circumvent the platform\n   * discrepancies regarding renaming files.\n   */\n  private static void fileCopy(File src, File dest) throws IOException {\n    IOException xforward = null;\n    FileInputStream fis = null;\n    FileOutputStream fos = null;\n    FileChannel fcin = null;\n    FileChannel fcout = null;\n    try {\n      fis = new FileInputStream(src);\n      fos = new FileOutputStream(dest);\n      fcin = fis.getChannel();\n      fcout = fos.getChannel();\n      // do the file copy 32Mb at a time\n      final int MB32 = 32 * 1024 * 1024;\n      long size = fcin.size();\n      long position = 0;\n      while (position < size) {\n        position += fcin.transferTo(position, MB32, fcout);\n      }\n    } catch (IOException xio) {\n      xforward = xio;\n    } finally {\n      if (fis != null) try {\n        fis.close();\n        fis = null;\n      } catch (IOException xio) {}\n      if (fos != null) try {\n        fos.close();\n        fos = null;\n      } catch (IOException xio) {}\n      if (fcin != null && fcin.isOpen()) try {\n        fcin.close();\n        fcin = null;\n      } catch (IOException xio) {}\n      if (fcout != null && fcout.isOpen()) try {\n        fcout.close();\n        fcout = null;\n      } catch (IOException xio) {}\n    }\n    if (xforward != null) {\n      throw xforward;\n    }\n  }\n\n","sourceOld":"  /**\n   * Copies a src file to a dest file: used to circumvent the platform\n   * discrepancies regarding renaming files.\n   */\n  private static void fileCopy(File src, File dest) throws IOException {\n    IOException xforward = null;\n    FileInputStream fis = null;\n    FileOutputStream fos = null;\n    FileChannel fcin = null;\n    FileChannel fcout = null;\n    try {\n      fis = new FileInputStream(src);\n      fos = new FileOutputStream(dest);\n      fcin = fis.getChannel();\n      fcout = fos.getChannel();\n      // do the file copy 32Mb at a time\n      final int MB32 = 32 * 1024 * 1024;\n      long size = fcin.size();\n      long position = 0;\n      while (position < size) {\n        position += fcin.transferTo(position, MB32, fcout);\n      }\n    } catch (IOException xio) {\n      xforward = xio;\n    } finally {\n      if (fis != null) try {\n        fis.close();\n        fis = null;\n      } catch (IOException xio) {}\n      if (fos != null) try {\n        fos.close();\n        fos = null;\n      } catch (IOException xio) {}\n      if (fcin != null && fcin.isOpen()) try {\n        fcin.close();\n        fcin = null;\n      } catch (IOException xio) {}\n      if (fcout != null && fcout.isOpen()) try {\n        fcout.close();\n        fcout = null;\n      } catch (IOException xio) {}\n    }\n    if (xforward != null) {\n      throw xforward;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"862bf0de4075dc8febeba1ba433bcf74c78d356e","date":1407456501,"type":4,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#fileCopy(File,File).mjava","sourceNew":null,"sourceOld":"  /**\n   * Copies a src file to a dest file: used to circumvent the platform\n   * discrepancies regarding renaming files.\n   */\n  private static void fileCopy(File src, File dest) throws IOException {\n    IOException xforward = null;\n    FileInputStream fis = null;\n    FileOutputStream fos = null;\n    FileChannel fcin = null;\n    FileChannel fcout = null;\n    try {\n      fis = new FileInputStream(src);\n      fos = new FileOutputStream(dest);\n      fcin = fis.getChannel();\n      fcout = fos.getChannel();\n      // do the file copy 32Mb at a time\n      final int MB32 = 32 * 1024 * 1024;\n      long size = fcin.size();\n      long position = 0;\n      while (position < size) {\n        position += fcin.transferTo(position, MB32, fcout);\n      }\n    } catch (IOException xio) {\n      xforward = xio;\n    } finally {\n      if (fis != null) try {\n        fis.close();\n        fis = null;\n      } catch (IOException xio) {}\n      if (fos != null) try {\n        fos.close();\n        fos = null;\n      } catch (IOException xio) {}\n      if (fcin != null && fcin.isOpen()) try {\n        fcin.close();\n        fcin = null;\n      } catch (IOException xio) {}\n      if (fcout != null && fcout.isOpen()) try {\n        fcout.close();\n        fcout = null;\n      } catch (IOException xio) {}\n    }\n    if (xforward != null) {\n      throw xforward;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"862bf0de4075dc8febeba1ba433bcf74c78d356e":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["862bf0de4075dc8febeba1ba433bcf74c78d356e"]},"commit2Childs":{"862bf0de4075dc8febeba1ba433bcf74c78d356e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["862bf0de4075dc8febeba1ba433bcf74c78d356e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}