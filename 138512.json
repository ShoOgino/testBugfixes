{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#haversin(double,double,double,double).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#haversin(double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoDistanceUtils#haversin(double,double,double,double).mjava","sourceNew":"  /**\n   * Compute the great-circle distance using original haversine implementation published by Sinnot in:\n   * R.W. Sinnott, \"Virtues of the Haversine\", Sky and Telescope, vol. 68, no. 2, 1984, p. 159\n   *\n   * NOTE: this differs from {@link org.apache.lucene.util.SloppyMath#haversin} in that it uses the semi-major axis\n   * of the earth instead of an approximation based on the average latitude of the two points (which can introduce an\n   * additional error up to .337%, or ~67.6 km at the equator)\n   */\n  public static double haversin(double lat1, double lon1, double lat2, double lon2) {\n    double dLat = TO_RADIANS * (lat2 - lat1);\n    double dLon = TO_RADIANS * (lon2 - lon1);\n    lat1 = TO_RADIANS * (lat1);\n    lat2 = TO_RADIANS * (lat2);\n\n    final double sinDLatO2 = SloppyMath.sin(dLat / 2);\n    final double sinDLonO2 = SloppyMath.sin(dLon / 2);\n\n    double a = sinDLatO2*sinDLatO2 + sinDLonO2 * sinDLonO2 * SloppyMath.cos(lat1) * SloppyMath.cos(lat2);\n    double c = 2 * SloppyMath.asin(Math.sqrt(a));\n    return (GeoProjectionUtils.SEMIMAJOR_AXIS * c);\n  }\n\n","sourceOld":"  /**\n   * Compute the great-circle distance using original haversine implementation published by Sinnot in:\n   * R.W. Sinnott, \"Virtues of the Haversine\", Sky and Telescope, vol. 68, no. 2, 1984, p. 159\n   *\n   * NOTE: this differs from {@link org.apache.lucene.util.SloppyMath#haversin} in that it uses the semi-major axis\n   * of the earth instead of an approximation based on the average latitude of the two points (which can introduce an\n   * additional error up to .337%, or ~67.6 km at the equator)\n   */\n  public static double haversin(double lat1, double lon1, double lat2, double lon2) {\n    double dLat = TO_RADIANS * (lat2 - lat1);\n    double dLon = TO_RADIANS * (lon2 - lon1);\n    lat1 = TO_RADIANS * (lat1);\n    lat2 = TO_RADIANS * (lat2);\n\n    final double sinDLatO2 = SloppyMath.sin(dLat / 2);\n    final double sinDLonO2 = SloppyMath.sin(dLon / 2);\n\n    double a = sinDLatO2*sinDLatO2 + sinDLonO2 * sinDLonO2 * SloppyMath.cos(lat1) * SloppyMath.cos(lat2);\n    double c = 2 * SloppyMath.asin(Math.sqrt(a));\n    return (GeoProjectionUtils.SEMIMAJOR_AXIS * c);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#haversin(double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoDistanceUtils#haversin(double,double,double,double).mjava","sourceNew":"  /**\n   * Compute the great-circle distance using original haversine implementation published by Sinnot in:\n   * R.W. Sinnott, \"Virtues of the Haversine\", Sky and Telescope, vol. 68, no. 2, 1984, p. 159\n   *\n   * NOTE: this differs from {@link org.apache.lucene.util.SloppyMath#haversin} in that it uses the semi-major axis\n   * of the earth instead of an approximation based on the average latitude of the two points (which can introduce an\n   * additional error up to .337%, or ~67.6 km at the equator)\n   */\n  public static double haversin(double lat1, double lon1, double lat2, double lon2) {\n    double dLat = TO_RADIANS * (lat2 - lat1);\n    double dLon = TO_RADIANS * (lon2 - lon1);\n    lat1 = TO_RADIANS * (lat1);\n    lat2 = TO_RADIANS * (lat2);\n\n    final double sinDLatO2 = SloppyMath.sin(dLat / 2);\n    final double sinDLonO2 = SloppyMath.sin(dLon / 2);\n\n    double a = sinDLatO2*sinDLatO2 + sinDLonO2 * sinDLonO2 * SloppyMath.cos(lat1) * SloppyMath.cos(lat2);\n    double c = 2 * SloppyMath.asin(Math.sqrt(a));\n    return (GeoProjectionUtils.SEMIMAJOR_AXIS * c);\n  }\n\n","sourceOld":"  /**\n   * Compute the great-circle distance using original haversine implementation published by Sinnot in:\n   * R.W. Sinnott, \"Virtues of the Haversine\", Sky and Telescope, vol. 68, no. 2, 1984, p. 159\n   *\n   * NOTE: this differs from {@link org.apache.lucene.util.SloppyMath#haversin} in that it uses the semi-major axis\n   * of the earth instead of an approximation based on the average latitude of the two points (which can introduce an\n   * additional error up to .337%, or ~67.6 km at the equator)\n   */\n  public static double haversin(double lat1, double lon1, double lat2, double lon2) {\n    double dLat = TO_RADIANS * (lat2 - lat1);\n    double dLon = TO_RADIANS * (lon2 - lon1);\n    lat1 = TO_RADIANS * (lat1);\n    lat2 = TO_RADIANS * (lat2);\n\n    final double sinDLatO2 = SloppyMath.sin(dLat / 2);\n    final double sinDLonO2 = SloppyMath.sin(dLon / 2);\n\n    double a = sinDLatO2*sinDLatO2 + sinDLonO2 * sinDLonO2 * SloppyMath.cos(lat1) * SloppyMath.cos(lat2);\n    double c = 2 * SloppyMath.asin(Math.sqrt(a));\n    return (GeoProjectionUtils.SEMIMAJOR_AXIS * c);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#haversin(double,double,double,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Compute the great-circle distance using original haversine implementation published by Sinnot in:\n   * R.W. Sinnott, \"Virtues of the Haversine\", Sky and Telescope, vol. 68, no. 2, 1984, p. 159\n   *\n   * NOTE: this differs from {@link org.apache.lucene.util.SloppyMath#haversin} in that it uses the semi-major axis\n   * of the earth instead of an approximation based on the average latitude of the two points (which can introduce an\n   * additional error up to .337%, or ~67.6 km at the equator)\n   */\n  public static double haversin(double lat1, double lon1, double lat2, double lon2) {\n    double dLat = TO_RADIANS * (lat2 - lat1);\n    double dLon = TO_RADIANS * (lon2 - lon1);\n    lat1 = TO_RADIANS * (lat1);\n    lat2 = TO_RADIANS * (lat2);\n\n    final double sinDLatO2 = SloppyMath.sin(dLat / 2);\n    final double sinDLonO2 = SloppyMath.sin(dLon / 2);\n\n    double a = sinDLatO2*sinDLatO2 + sinDLonO2 * sinDLonO2 * SloppyMath.cos(lat1) * SloppyMath.cos(lat2);\n    double c = 2 * SloppyMath.asin(Math.sqrt(a));\n    return (GeoProjectionUtils.SEMIMAJOR_AXIS * c);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["937923083e4d137932336fc80f3d78758ff698a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec60431d008a694828dacb4bc3cda775b6c44a9f"]},"commit2Childs":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"937923083e4d137932336fc80f3d78758ff698a6":["ec60431d008a694828dacb4bc3cda775b6c44a9f","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}