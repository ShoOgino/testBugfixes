{"path":"lucene/core/src/test/org/apache/lucene/store/TestByteBuffersDataInput#testSeek().mjava","commits":[{"id":"fad01f81cc24b33263ccec7dbff3fb907702f91e","date":1535461373,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestByteBuffersDataInput#testSeek().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSeek() throws Exception {\n    for (int reps = randomIntBetween(1, 200); --reps > 0;) {\n      ByteBuffersDataOutput dst = new ByteBuffersDataOutput();\n  \n      byte [] prefix = {};\n      if (randomBoolean()) {\n        prefix = new byte [randomIntBetween(1, 1024 * 8)];\n        dst.writeBytes(prefix);\n      }\n  \n      long seed = randomLong();\n      int max = 1000;\n      List<IOConsumer<DataInput>> reply = \n          TestByteBuffersDataOutput.addRandomData(dst, new Xoroshiro128PlusRandom(seed), max);\n  \n      ByteBuffersDataInput in = dst.toDataInput().slice(prefix.length, dst.size() - prefix.length);\n  \n      in.seek(0);\n      for (IOConsumer<DataInput> c : reply) {\n        c.accept(in);\n      }\n  \n      in.seek(0);\n      for (IOConsumer<DataInput> c : reply) {\n        c.accept(in);\n      }\n  \n      byte [] array = dst.toArrayCopy();\n      array = ArrayUtil.copyOfSubArray(array, prefix.length, array.length);\n      for (int i = 0; i < 1000; i++) {\n        int offs = randomIntBetween(0, array.length - 1);\n        in.seek(offs);\n        assertEquals(offs, in.position());\n        assertEquals(array[offs], in.readByte());\n      }\n      in.seek(in.size());\n      assertEquals(in.size(), in.position());\n      LuceneTestCase.expectThrows(EOFException.class, () -> {\n        in.readByte();\n      });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestByteBuffersDataInput#testSeek().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestByteBuffersDataInput#testSeek().mjava","sourceNew":"  @Test\n  public void testSeek() throws Exception {\n    for (int reps = randomIntBetween(1, 200); --reps > 0;) {\n      ByteBuffersDataOutput dst = new ByteBuffersDataOutput();\n  \n      byte [] prefix = {};\n      if (randomBoolean()) {\n        prefix = new byte [randomIntBetween(1, 1024 * 8)];\n        dst.writeBytes(prefix);\n      }\n  \n      long seed = randomLong();\n      int max = 1000;\n      List<IOConsumer<DataInput>> reply = \n          TestByteBuffersDataOutput.addRandomData(dst, new Xoroshiro128PlusRandom(seed), max);\n  \n      ByteBuffersDataInput in = dst.toDataInput().slice(prefix.length, dst.size() - prefix.length);\n  \n      in.seek(0);\n      for (IOConsumer<DataInput> c : reply) {\n        c.accept(in);\n      }\n  \n      in.seek(0);\n      for (IOConsumer<DataInput> c : reply) {\n        c.accept(in);\n      }\n  \n      byte [] array = dst.toArrayCopy();\n      array = ArrayUtil.copyOfSubArray(array, prefix.length, array.length);\n\n      for (int i = 0; i < 1000; i++) {\n        int offs = randomIntBetween(0, array.length - 1);\n        in.seek(offs);\n        assertEquals(offs, in.position());\n        assertEquals(array[offs], in.readByte());\n      }\n      in.seek(in.size());\n      assertEquals(in.size(), in.position());\n      LuceneTestCase.expectThrows(EOFException.class, () -> {\n        in.readByte();\n      });\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSeek() throws Exception {\n    for (int reps = randomIntBetween(1, 200); --reps > 0;) {\n      ByteBuffersDataOutput dst = new ByteBuffersDataOutput();\n  \n      byte [] prefix = {};\n      if (randomBoolean()) {\n        prefix = new byte [randomIntBetween(1, 1024 * 8)];\n        dst.writeBytes(prefix);\n      }\n  \n      long seed = randomLong();\n      int max = 1000;\n      List<IOConsumer<DataInput>> reply = \n          TestByteBuffersDataOutput.addRandomData(dst, new Xoroshiro128PlusRandom(seed), max);\n  \n      ByteBuffersDataInput in = dst.toDataInput().slice(prefix.length, dst.size() - prefix.length);\n  \n      in.seek(0);\n      for (IOConsumer<DataInput> c : reply) {\n        c.accept(in);\n      }\n  \n      in.seek(0);\n      for (IOConsumer<DataInput> c : reply) {\n        c.accept(in);\n      }\n  \n      byte [] array = dst.toArrayCopy();\n      array = ArrayUtil.copyOfSubArray(array, prefix.length, array.length);\n      for (int i = 0; i < 1000; i++) {\n        int offs = randomIntBetween(0, array.length - 1);\n        in.seek(offs);\n        assertEquals(offs, in.position());\n        assertEquals(array[offs], in.readByte());\n      }\n      in.seek(in.size());\n      assertEquals(in.size(), in.position());\n      LuceneTestCase.expectThrows(EOFException.class, () -> {\n        in.readByte();\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["fad01f81cc24b33263ccec7dbff3fb907702f91e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fad01f81cc24b33263ccec7dbff3fb907702f91e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["409da428f28953cf35fddd5c9ff5c7e4f5439863"]},"commit2Childs":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fad01f81cc24b33263ccec7dbff3fb907702f91e"],"fad01f81cc24b33263ccec7dbff3fb907702f91e":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}