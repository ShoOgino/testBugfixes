{"path":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,ScoreMode,float).mjava","commits":[{"id":"33eef98c565ee21b199f04b92acd6e00b842bd1e","date":1514538360,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,boolean,float).mjava","sourceNew":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    Similarity.SimScorer docScorer, ScoreMode scoreMode,\n                    float matchCost) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = scoreMode.needsScores();\n    this.needsTotalHitCount = scoreMode != ScoreMode.TOP_SCORES;\n\n    List<DocIdSetIterator> iterators = new ArrayList<>();\n    List<PostingsAndPosition> postingsAndPositions = new ArrayList<>();\n    for(PhraseQuery.PostingsAndFreq posting : postings) {\n      iterators.add(posting.postings);\n      postingsAndPositions.add(new PostingsAndPosition(posting.postings, posting.position));\n    }\n    conjunction = ConjunctionDISI.intersectIterators(iterators);\n    assert TwoPhaseIterator.unwrap(conjunction) == null;\n    this.postings = postingsAndPositions.toArray(new PostingsAndPosition[postingsAndPositions.size()]);\n    this.matchCost = matchCost;\n  }\n\n","sourceOld":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    Similarity.SimScorer docScorer, boolean needsScores,\n                    float matchCost) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n\n    List<DocIdSetIterator> iterators = new ArrayList<>();\n    List<PostingsAndPosition> postingsAndPositions = new ArrayList<>();\n    for(PhraseQuery.PostingsAndFreq posting : postings) {\n      iterators.add(posting.postings);\n      postingsAndPositions.add(new PostingsAndPosition(posting.postings, posting.position));\n    }\n    conjunction = ConjunctionDISI.intersectIterators(iterators);\n    assert TwoPhaseIterator.unwrap(conjunction) == null;\n    this.postings = postingsAndPositions.toArray(new PostingsAndPosition[postingsAndPositions.size()]);\n    this.matchCost = matchCost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],LeafSimScorer,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,ScoreMode,float).mjava","sourceNew":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    LeafSimScorer docScorer, ScoreMode scoreMode,\n                    float matchCost) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = scoreMode.needsScores();\n    this.needsTotalHitCount = scoreMode != ScoreMode.TOP_SCORES;\n\n    List<DocIdSetIterator> iterators = new ArrayList<>();\n    List<PostingsAndPosition> postingsAndPositions = new ArrayList<>();\n    for(PhraseQuery.PostingsAndFreq posting : postings) {\n      iterators.add(posting.postings);\n      postingsAndPositions.add(new PostingsAndPosition(posting.postings, posting.position));\n    }\n    conjunction = ConjunctionDISI.intersectIterators(iterators);\n    assert TwoPhaseIterator.unwrap(conjunction) == null;\n    this.postings = postingsAndPositions.toArray(new PostingsAndPosition[postingsAndPositions.size()]);\n    this.matchCost = matchCost;\n  }\n\n","sourceOld":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    Similarity.SimScorer docScorer, ScoreMode scoreMode,\n                    float matchCost) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = scoreMode.needsScores();\n    this.needsTotalHitCount = scoreMode != ScoreMode.TOP_SCORES;\n\n    List<DocIdSetIterator> iterators = new ArrayList<>();\n    List<PostingsAndPosition> postingsAndPositions = new ArrayList<>();\n    for(PhraseQuery.PostingsAndFreq posting : postings) {\n      iterators.add(posting.postings);\n      postingsAndPositions.add(new PostingsAndPosition(posting.postings, posting.position));\n    }\n    conjunction = ConjunctionDISI.intersectIterators(iterators);\n    assert TwoPhaseIterator.unwrap(conjunction) == null;\n    this.postings = postingsAndPositions.toArray(new PostingsAndPosition[postingsAndPositions.size()]);\n    this.matchCost = matchCost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,ScoreMode,float).mjava","sourceNew":null,"sourceOld":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    Similarity.SimScorer docScorer, ScoreMode scoreMode,\n                    float matchCost) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = scoreMode.needsScores();\n    this.needsTotalHitCount = scoreMode != ScoreMode.TOP_SCORES;\n\n    List<DocIdSetIterator> iterators = new ArrayList<>();\n    List<PostingsAndPosition> postingsAndPositions = new ArrayList<>();\n    for(PhraseQuery.PostingsAndFreq posting : postings) {\n      iterators.add(posting.postings);\n      postingsAndPositions.add(new PostingsAndPosition(posting.postings, posting.position));\n    }\n    conjunction = ConjunctionDISI.intersectIterators(iterators);\n    assert TwoPhaseIterator.unwrap(conjunction) == null;\n    this.postings = postingsAndPositions.toArray(new PostingsAndPosition[postingsAndPositions.size()]);\n    this.matchCost = matchCost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["33eef98c565ee21b199f04b92acd6e00b842bd1e","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["33eef98c565ee21b199f04b92acd6e00b842bd1e"],"33eef98c565ee21b199f04b92acd6e00b842bd1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"33eef98c565ee21b199f04b92acd6e00b842bd1e":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33eef98c565ee21b199f04b92acd6e00b842bd1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}