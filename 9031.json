{"path":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testCustomDoubleParser().mjava","commits":[{"id":"d843efbadfe3b95ce9db390b91d7abe2c5e351a5","date":1360957237,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testCustomDoubleParser().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * test sorts for a custom double parser that uses a simple char encoding \n   */\n  public void testCustomDoubleParser() throws Exception {\n    List<String> letters = Arrays.asList(new String[] { \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\" });\n    Collections.shuffle(letters, random());\n\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    for (String letter : letters) {\n      Document doc = new Document();\n      doc.add(newStringField(\"parser\", letter, Field.Store.YES));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"parser\", new FieldCache.DoubleParser() {\n      @Override\n      public double parseDouble(BytesRef term) {\n        return Math.pow(term.bytes[term.offset], (term.bytes[term.offset]-'A'));\n      }\n      \n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    \n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n\n    // results should be in alphabetical order\n    assertEquals(10, td.totalHits);\n    Collections.sort(letters);\n    for (int i = 0; i < letters.size(); i++) {\n      assertEquals(letters.get(i), searcher.doc(td.scoreDocs[i].doc).get(\"parser\"));\n    }\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f183729ece15402db94402d482f29ebac4f7f54","date":1360963151,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testCustomDoubleParser().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testCustomDoubleParser().mjava","sourceNew":"  /** \n   * test sorts for a custom double parser that uses a simple char encoding \n   */\n  public void testCustomDoubleParser() throws Exception {\n    List<String> letters = Arrays.asList(new String[] { \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\" });\n    Collections.shuffle(letters, random());\n\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    for (String letter : letters) {\n      Document doc = new Document();\n      doc.add(newStringField(\"parser\", letter, Field.Store.YES));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"parser\", new FieldCache.DoubleParser() {\n      @Override\n      public double parseDouble(BytesRef term) {\n        return Math.pow(term.bytes[term.offset], (term.bytes[term.offset]-'A'));\n      }\n      \n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    \n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n\n    // results should be in alphabetical order\n    assertEquals(10, td.totalHits);\n    Collections.sort(letters);\n    for (int i = 0; i < letters.size(); i++) {\n      assertEquals(letters.get(i), searcher.doc(td.scoreDocs[i].doc).get(\"parser\"));\n    }\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** \n   * test sorts for a custom double parser that uses a simple char encoding \n   */\n  public void testCustomDoubleParser() throws Exception {\n    List<String> letters = Arrays.asList(new String[] { \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\" });\n    Collections.shuffle(letters, random());\n\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    for (String letter : letters) {\n      Document doc = new Document();\n      doc.add(newStringField(\"parser\", letter, Field.Store.YES));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"parser\", new FieldCache.DoubleParser() {\n      @Override\n      public double parseDouble(BytesRef term) {\n        return Math.pow(term.bytes[term.offset], (term.bytes[term.offset]-'A'));\n      }\n      \n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    \n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n\n    // results should be in alphabetical order\n    assertEquals(10, td.totalHits);\n    Collections.sort(letters);\n    for (int i = 0; i < letters.size(); i++) {\n      assertEquals(letters.get(i), searcher.doc(td.scoreDocs[i].doc).get(\"parser\"));\n    }\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testCustomDoubleParser().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * test sorts for a custom double parser that uses a simple char encoding \n   */\n  public void testCustomDoubleParser() throws Exception {\n    List<String> letters = Arrays.asList(new String[] { \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\" });\n    Collections.shuffle(letters, random());\n\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    for (String letter : letters) {\n      Document doc = new Document();\n      doc.add(newStringField(\"parser\", letter, Field.Store.YES));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"parser\", new FieldCache.DoubleParser() {\n      @Override\n      public double parseDouble(BytesRef term) {\n        return Math.pow(term.bytes[term.offset], (term.bytes[term.offset]-'A'));\n      }\n      \n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    \n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n\n    // results should be in alphabetical order\n    assertEquals(10, td.totalHits);\n    Collections.sort(letters);\n    for (int i = 0; i < letters.size(); i++) {\n      assertEquals(letters.get(i), searcher.doc(td.scoreDocs[i].doc).get(\"parser\"));\n    }\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testCustomDoubleParser().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testCustomDoubleParser().mjava","sourceNew":"  /** \n   * test sorts for a custom double parser that uses a simple char encoding \n   */\n  public void testCustomDoubleParser() throws Exception {\n    List<String> letters = Arrays.asList(new String[] { \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\" });\n    Collections.shuffle(letters, random());\n\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    for (String letter : letters) {\n      Document doc = new Document();\n      doc.add(newStringField(\"parser\", letter, Field.Store.YES));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"parser\", new FieldCache.DoubleParser() {\n      @Override\n      public double parseDouble(BytesRef term) {\n        return Math.pow(term.bytes[term.offset], (term.bytes[term.offset]-'A'));\n      }\n      \n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    \n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n\n    // results should be in alphabetical order\n    assertEquals(10, td.totalHits);\n    Collections.sort(letters);\n    for (int i = 0; i < letters.size(); i++) {\n      assertEquals(letters.get(i), searcher.doc(td.scoreDocs[i].doc).get(\"parser\"));\n    }\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** \n   * test sorts for a custom double parser that uses a simple char encoding \n   */\n  public void testCustomDoubleParser() throws Exception {\n    List<String> letters = Arrays.asList(new String[] { \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\" });\n    Collections.shuffle(letters, random());\n\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    for (String letter : letters) {\n      Document doc = new Document();\n      doc.add(newStringField(\"parser\", letter, Field.Store.YES));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"parser\", new FieldCache.DoubleParser() {\n      @Override\n      public double parseDouble(BytesRef term) {\n        return Math.pow(term.bytes[term.offset], (term.bytes[term.offset]-'A'));\n      }\n      \n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    \n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n\n    // results should be in alphabetical order\n    assertEquals(10, td.totalHits);\n    Collections.sort(letters);\n    for (int i = 0; i < letters.size(); i++) {\n      assertEquals(letters.get(i), searcher.doc(td.scoreDocs[i].doc).get(\"parser\"));\n    }\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f183729ece15402db94402d482f29ebac4f7f54":["d843efbadfe3b95ce9db390b91d7abe2c5e351a5"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["3b41f996b22bd5518650f897d050088ff808ec03","5f183729ece15402db94402d482f29ebac4f7f54"],"3b41f996b22bd5518650f897d050088ff808ec03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d843efbadfe3b95ce9db390b91d7abe2c5e351a5"],"d843efbadfe3b95ce9db390b91d7abe2c5e351a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f183729ece15402db94402d482f29ebac4f7f54"]},"commit2Childs":{"5f183729ece15402db94402d482f29ebac4f7f54":["95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"3b41f996b22bd5518650f897d050088ff808ec03":["95303ff3749680c743b9425f9cf99e6e4065e8a8"],"d843efbadfe3b95ce9db390b91d7abe2c5e351a5":["5f183729ece15402db94402d482f29ebac4f7f54","3b41f996b22bd5518650f897d050088ff808ec03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b41f996b22bd5518650f897d050088ff808ec03","d843efbadfe3b95ce9db390b91d7abe2c5e351a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}