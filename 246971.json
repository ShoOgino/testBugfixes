{"path":"src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","commits":[{"id":"4e0667c82b0990a3c40fcbc0b12cc331f661c42f","date":1249836857,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","pathOld":"/dev/null","sourceNew":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n\n    SolrQueryRequest req = lrf.makeRequest();\n    IndexSchema schema = req.getSchema();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n\n    String[] fields = {\"text\",\"simple\"\n            ,\"text\",\"test\"\n            ,\"text\",\"how now brown cow\"\n            ,\"text\",\"what's that?\"\n            ,\"text\",\"radical!\"\n            ,\"text\",\"what's all this about, anyway?\"\n            ,\"text\",\"just how fast is this text indexing?\"\n    };\n\n    Document ldoc = new Document();\n    for (int i=0; i<fields.length; i+=2) {\n      String field = fields[i];\n      String val = fields[i+1];\n      Field f = schema.getField(field).createField(val, 1.0f);\n      ldoc.add(f);\n    }\n\n    AddUpdateCommand add = new AddUpdateCommand();\n    add.allowDups = true;\n    add.doc = ldoc;\n\n    long start = System.currentTimeMillis();\n    for (int i=0; i<iter; i++) {\n      updateHandler.addDoc(add);      \n    }\n    long end = System.currentTimeMillis();\n    System.out.println(\"iter=\"+iter +\" time=\" + (end-start) + \" throughput=\" + ((long)iter*1000)/(end-start));\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand());\n\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["be29e0e2cef1fd569147732e48caf8538790339b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be29e0e2cef1fd569147732e48caf8538790339b","date":1250443738,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","pathOld":"src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","sourceNew":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n    boolean includeDoc = Boolean.parseBoolean(System.getProperty(\"includeDoc\",\"true\")); // include the time to create the document\n    String doc = System.getProperty(\"doc\");\n    if (doc != null) {\n      StrUtils.splitSmart(doc,\",\",true);\n    }\n\n\n    SolrQueryRequest req = lrf.makeRequest();\n    IndexSchema schema = req.getSchema();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n\n    String[] fields = {\"text\",\"simple\"\n            ,\"text\",\"test\"\n            ,\"text\",\"how now brown cow\"\n            ,\"text\",\"what's that?\"\n            ,\"text\",\"radical!\"\n            ,\"text\",\"what's all this about, anyway?\"\n            ,\"text\",\"just how fast is this text indexing?\"\n    };\n\n\n  /***\n    String[] fields = {\n            \"a_i\",\"1\"\n            ,\"b_i\",\"2\"\n            ,\"c_i\",\"3\"\n            ,\"d_i\",\"4\"\n            ,\"e_i\",\"5\"\n            ,\"f_i\",\"6\"\n            ,\"g_i\",\"7\"\n            ,\"h_i\",\"8\"\n            ,\"i_i\",\"9\"\n            ,\"j_i\",\"0\"\n            ,\"k_i\",\"0\"\n    };\n   ***/\n\n    long start = System.currentTimeMillis();\n\n    AddUpdateCommand add = new AddUpdateCommand();\n    add.allowDups = true;\n\n\n    for (int i=0; i<iter; i++) {\n      if (includeDoc || add.doc==null) {\n        add.doc = new Document();\n        for (int j=0; j<fields.length; j+=2) {\n          String field = fields[j];\n          String val = fields[j+1];\n          Field f = schema.getField(field).createField(val, 1.0f);\n          add.doc.add(f);\n        }\n      }\n      updateHandler.addDoc(add);      \n    }\n    long end = System.currentTimeMillis();\n    System.out.println(\"includeDoc=\"+includeDoc+\" doc=\"+ Arrays.toString(fields));\n    System.out.println(\"iter=\"+iter +\" time=\" + (end-start) + \" throughput=\" + ((long)iter*1000)/(end-start));\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand());\n\n    req.close();\n  }\n\n","sourceOld":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n\n    SolrQueryRequest req = lrf.makeRequest();\n    IndexSchema schema = req.getSchema();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n\n    String[] fields = {\"text\",\"simple\"\n            ,\"text\",\"test\"\n            ,\"text\",\"how now brown cow\"\n            ,\"text\",\"what's that?\"\n            ,\"text\",\"radical!\"\n            ,\"text\",\"what's all this about, anyway?\"\n            ,\"text\",\"just how fast is this text indexing?\"\n    };\n\n    Document ldoc = new Document();\n    for (int i=0; i<fields.length; i+=2) {\n      String field = fields[i];\n      String val = fields[i+1];\n      Field f = schema.getField(field).createField(val, 1.0f);\n      ldoc.add(f);\n    }\n\n    AddUpdateCommand add = new AddUpdateCommand();\n    add.allowDups = true;\n    add.doc = ldoc;\n\n    long start = System.currentTimeMillis();\n    for (int i=0; i<iter; i++) {\n      updateHandler.addDoc(add);      \n    }\n    long end = System.currentTimeMillis();\n    System.out.println(\"iter=\"+iter +\" time=\" + (end-start) + \" throughput=\" + ((long)iter*1000)/(end-start));\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand());\n\n    req.close();\n  }\n\n","bugFix":["4e0667c82b0990a3c40fcbc0b12cc331f661c42f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdb9d6d22dcaebe5d138d39c84b333dbee6c8512","date":1250519295,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","pathOld":"src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","sourceNew":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n    boolean includeDoc = Boolean.parseBoolean(System.getProperty(\"includeDoc\",\"true\")); // include the time to create the document\n    boolean overwrite = Boolean.parseBoolean(System.getProperty(\"overwrite\",\"false\"));\n    String doc = System.getProperty(\"doc\");\n    if (doc != null) {\n      StrUtils.splitSmart(doc,\",\",true);\n    }\n\n\n    SolrQueryRequest req = lrf.makeRequest();\n    IndexSchema schema = req.getSchema();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n\n    String[] fields = {\"text\",\"simple\"\n            ,\"text\",\"test\"\n            ,\"text\",\"how now brown cow\"\n            ,\"text\",\"what's that?\"\n            ,\"text\",\"radical!\"\n            ,\"text\",\"what's all this about, anyway?\"\n            ,\"text\",\"just how fast is this text indexing?\"\n    };\n\n\n  /***\n    String[] fields = {\n            \"a_i\",\"1\"\n            ,\"b_i\",\"2\"\n            ,\"c_i\",\"3\"\n            ,\"d_i\",\"4\"\n            ,\"e_i\",\"5\"\n            ,\"f_i\",\"6\"\n            ,\"g_i\",\"7\"\n            ,\"h_i\",\"8\"\n            ,\"i_i\",\"9\"\n            ,\"j_i\",\"0\"\n            ,\"k_i\",\"0\"\n    };\n   ***/\n\n    long start = System.currentTimeMillis();\n\n    AddUpdateCommand add = new AddUpdateCommand();\n    add.allowDups = !overwrite;\n    add.overwriteCommitted = overwrite;\n    add.overwritePending = overwrite;\n\n    Field idField=null;\n\n    for (int i=0; i<iter; i++) {\n      if (includeDoc || add.doc==null) {\n        add.doc = new Document();\n        idField = new Field(\"id\",\"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n        add.doc.add(idField);\n        for (int j=0; j<fields.length; j+=2) {\n          String field = fields[j];\n          String val = fields[j+1];\n          Field f = schema.getField(field).createField(val, 1.0f);\n          add.doc.add(f);\n        }\n      }\n      idField.setValue(Integer.toString(i));\n      updateHandler.addDoc(add);\n    }\n    long end = System.currentTimeMillis();\n    System.out.println(\"includeDoc=\"+includeDoc+\" doc=\"+ Arrays.toString(fields));\n    System.out.println(\"iter=\"+iter +\" time=\" + (end-start) + \" throughput=\" + ((long)iter*1000)/(end-start));\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand());\n\n    req.close();\n  }\n\n","sourceOld":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n    boolean includeDoc = Boolean.parseBoolean(System.getProperty(\"includeDoc\",\"true\")); // include the time to create the document\n    String doc = System.getProperty(\"doc\");\n    if (doc != null) {\n      StrUtils.splitSmart(doc,\",\",true);\n    }\n\n\n    SolrQueryRequest req = lrf.makeRequest();\n    IndexSchema schema = req.getSchema();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n\n    String[] fields = {\"text\",\"simple\"\n            ,\"text\",\"test\"\n            ,\"text\",\"how now brown cow\"\n            ,\"text\",\"what's that?\"\n            ,\"text\",\"radical!\"\n            ,\"text\",\"what's all this about, anyway?\"\n            ,\"text\",\"just how fast is this text indexing?\"\n    };\n\n\n  /***\n    String[] fields = {\n            \"a_i\",\"1\"\n            ,\"b_i\",\"2\"\n            ,\"c_i\",\"3\"\n            ,\"d_i\",\"4\"\n            ,\"e_i\",\"5\"\n            ,\"f_i\",\"6\"\n            ,\"g_i\",\"7\"\n            ,\"h_i\",\"8\"\n            ,\"i_i\",\"9\"\n            ,\"j_i\",\"0\"\n            ,\"k_i\",\"0\"\n    };\n   ***/\n\n    long start = System.currentTimeMillis();\n\n    AddUpdateCommand add = new AddUpdateCommand();\n    add.allowDups = true;\n\n\n    for (int i=0; i<iter; i++) {\n      if (includeDoc || add.doc==null) {\n        add.doc = new Document();\n        for (int j=0; j<fields.length; j+=2) {\n          String field = fields[j];\n          String val = fields[j+1];\n          Field f = schema.getField(field).createField(val, 1.0f);\n          add.doc.add(f);\n        }\n      }\n      updateHandler.addDoc(add);      \n    }\n    long end = System.currentTimeMillis();\n    System.out.println(\"includeDoc=\"+includeDoc+\" doc=\"+ Arrays.toString(fields));\n    System.out.println(\"iter=\"+iter +\" time=\" + (end-start) + \" throughput=\" + ((long)iter*1000)/(end-start));\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","pathOld":"src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","sourceNew":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n    boolean includeDoc = Boolean.parseBoolean(System.getProperty(\"includeDoc\",\"true\")); // include the time to create the document\n    boolean overwrite = Boolean.parseBoolean(System.getProperty(\"overwrite\",\"false\"));\n    String doc = System.getProperty(\"doc\");\n    if (doc != null) {\n      StrUtils.splitSmart(doc,\",\",true);\n    }\n\n\n    SolrQueryRequest req = lrf.makeRequest();\n    IndexSchema schema = req.getSchema();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n\n    String[] fields = {\"text\",\"simple\"\n            ,\"text\",\"test\"\n            ,\"text\",\"how now brown cow\"\n            ,\"text\",\"what's that?\"\n            ,\"text\",\"radical!\"\n            ,\"text\",\"what's all this about, anyway?\"\n            ,\"text\",\"just how fast is this text indexing?\"\n    };\n\n\n  /***\n    String[] fields = {\n            \"a_i\",\"1\"\n            ,\"b_i\",\"2\"\n            ,\"c_i\",\"3\"\n            ,\"d_i\",\"4\"\n            ,\"e_i\",\"5\"\n            ,\"f_i\",\"6\"\n            ,\"g_i\",\"7\"\n            ,\"h_i\",\"8\"\n            ,\"i_i\",\"9\"\n            ,\"j_i\",\"0\"\n            ,\"k_i\",\"0\"\n    };\n   ***/\n\n    long start = System.currentTimeMillis();\n\n    AddUpdateCommand add = new AddUpdateCommand();\n    add.allowDups = !overwrite;\n    add.overwriteCommitted = overwrite;\n    add.overwritePending = overwrite;\n\n    Field idField=null;\n\n    for (int i=0; i<iter; i++) {\n      if (includeDoc || add.doc==null) {\n        add.doc = new Document();\n        idField = new Field(\"id\",\"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n        add.doc.add(idField);\n        for (int j=0; j<fields.length; j+=2) {\n          String field = fields[j];\n          String val = fields[j+1];\n          Field f = schema.getField(field).createField(val, 1.0f);\n          add.doc.add(f);\n        }\n      }\n      idField.setValue(Integer.toString(i));\n      updateHandler.addDoc(add);\n    }\n    long end = System.currentTimeMillis();\n    System.out.println(\"includeDoc=\"+includeDoc+\" doc=\"+ Arrays.toString(fields));\n    System.out.println(\"iter=\"+iter +\" time=\" + (end-start) + \" throughput=\" + ((long)iter*1000)/(end-start));\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand());\n\n    req.close();\n  }\n\n","sourceOld":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n    boolean includeDoc = Boolean.parseBoolean(System.getProperty(\"includeDoc\",\"true\")); // include the time to create the document\n    boolean overwrite = Boolean.parseBoolean(System.getProperty(\"overwrite\",\"false\"));\n    String doc = System.getProperty(\"doc\");\n    if (doc != null) {\n      StrUtils.splitSmart(doc,\",\",true);\n    }\n\n\n    SolrQueryRequest req = lrf.makeRequest();\n    IndexSchema schema = req.getSchema();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n\n    String[] fields = {\"text\",\"simple\"\n            ,\"text\",\"test\"\n            ,\"text\",\"how now brown cow\"\n            ,\"text\",\"what's that?\"\n            ,\"text\",\"radical!\"\n            ,\"text\",\"what's all this about, anyway?\"\n            ,\"text\",\"just how fast is this text indexing?\"\n    };\n\n\n  /***\n    String[] fields = {\n            \"a_i\",\"1\"\n            ,\"b_i\",\"2\"\n            ,\"c_i\",\"3\"\n            ,\"d_i\",\"4\"\n            ,\"e_i\",\"5\"\n            ,\"f_i\",\"6\"\n            ,\"g_i\",\"7\"\n            ,\"h_i\",\"8\"\n            ,\"i_i\",\"9\"\n            ,\"j_i\",\"0\"\n            ,\"k_i\",\"0\"\n    };\n   ***/\n\n    long start = System.currentTimeMillis();\n\n    AddUpdateCommand add = new AddUpdateCommand();\n    add.allowDups = !overwrite;\n    add.overwriteCommitted = overwrite;\n    add.overwritePending = overwrite;\n\n    Field idField=null;\n\n    for (int i=0; i<iter; i++) {\n      if (includeDoc || add.doc==null) {\n        add.doc = new Document();\n        idField = new Field(\"id\",\"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n        add.doc.add(idField);\n        for (int j=0; j<fields.length; j+=2) {\n          String field = fields[j];\n          String val = fields[j+1];\n          Field f = schema.getField(field).createField(val, 1.0f);\n          add.doc.add(f);\n        }\n      }\n      idField.setValue(Integer.toString(i));\n      updateHandler.addDoc(add);\n    }\n    long end = System.currentTimeMillis();\n    System.out.println(\"includeDoc=\"+includeDoc+\" doc=\"+ Arrays.toString(fields));\n    System.out.println(\"iter=\"+iter +\" time=\" + (end-start) + \" throughput=\" + ((long)iter*1000)/(end-start));\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"be29e0e2cef1fd569147732e48caf8538790339b":["4e0667c82b0990a3c40fcbc0b12cc331f661c42f"],"4e0667c82b0990a3c40fcbc0b12cc331f661c42f":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["bdb9d6d22dcaebe5d138d39c84b333dbee6c8512"],"bdb9d6d22dcaebe5d138d39c84b333dbee6c8512":["be29e0e2cef1fd569147732e48caf8538790339b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4e0667c82b0990a3c40fcbc0b12cc331f661c42f"],"be29e0e2cef1fd569147732e48caf8538790339b":["bdb9d6d22dcaebe5d138d39c84b333dbee6c8512"],"4e0667c82b0990a3c40fcbc0b12cc331f661c42f":["be29e0e2cef1fd569147732e48caf8538790339b"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"bdb9d6d22dcaebe5d138d39c84b333dbee6c8512":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}