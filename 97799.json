{"path":"src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,OutputStream,byte[]).mjava","commits":[{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":0,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,OutputStream,byte[]).mjava","pathOld":"/dev/null","sourceNew":"    /** Copy the contents of the file with specified extension into the\n     *  provided output stream. Use the provided buffer for moving data\n     *  to reduce memory allocation.\n     */\n    private void copyFile(FileEntry source, OutputStream os, byte buffer[]) \n    throws IOException\n    {\n        InputStream is = null;\n        try {\n            long startPtr = os.getFilePointer();\n            \n            is = directory.openFile(source.file);\n            long length = is.length();\n            long remainder = length;\n            int chunk = buffer.length;\n            \n            while(remainder > 0) {\n                int len = (int) Math.min(chunk, remainder);\n                is.readBytes(buffer, 0, len);\n                os.writeBytes(buffer, len);\n                remainder -= len;\n            }\n            \n            // Verify that remainder is 0\n            if (remainder != 0) \n                throw new IOException(\n                    \"Non-zero remainder length after copying: \" + remainder\n                    + \" (id: \" + source.file + \", length: \" + length \n                    + \", buffer size: \" + chunk + \")\");\n                    \n            // Verify that the output length diff is equal to original file\n            long endPtr = os.getFilePointer();\n            long diff = endPtr - startPtr;\n            if (diff != length) \n                throw new IOException(\n                    \"Difference in the output file offsets \" + diff\n                    + \" does not match the original file length \" + length);\n            \n        } finally { \n            if (is != null) is.close();\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a67f534c1db9eb255bc5a5137c7bf362ff90c276","date":1066054684,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,OutputStream,byte[]).mjava","pathOld":"src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,OutputStream,byte[]).mjava","sourceNew":"    /** Copy the contents of the file with specified extension into the\n     *  provided output stream. Use the provided buffer for moving data\n     *  to reduce memory allocation.\n     */\n    private void copyFile(FileEntry source, OutputStream os, byte buffer[])\n    throws IOException\n    {\n        InputStream is = null;\n        try {\n            long startPtr = os.getFilePointer();\n\n            is = directory.openFile(source.file);\n            long length = is.length();\n            long remainder = length;\n            int chunk = buffer.length;\n\n            while(remainder > 0) {\n                int len = (int) Math.min(chunk, remainder);\n                is.readBytes(buffer, 0, len);\n                os.writeBytes(buffer, len);\n                remainder -= len;\n            }\n\n            // Verify that remainder is 0\n            if (remainder != 0)\n                throw new IOException(\n                    \"Non-zero remainder length after copying: \" + remainder\n                    + \" (id: \" + source.file + \", length: \" + length\n                    + \", buffer size: \" + chunk + \")\");\n\n            // Verify that the output length diff is equal to original file\n            long endPtr = os.getFilePointer();\n            long diff = endPtr - startPtr;\n            if (diff != length)\n                throw new IOException(\n                    \"Difference in the output file offsets \" + diff\n                    + \" does not match the original file length \" + length);\n\n        } finally {\n            if (is != null) is.close();\n        }\n    }\n\n","sourceOld":"    /** Copy the contents of the file with specified extension into the\n     *  provided output stream. Use the provided buffer for moving data\n     *  to reduce memory allocation.\n     */\n    private void copyFile(FileEntry source, OutputStream os, byte buffer[]) \n    throws IOException\n    {\n        InputStream is = null;\n        try {\n            long startPtr = os.getFilePointer();\n            \n            is = directory.openFile(source.file);\n            long length = is.length();\n            long remainder = length;\n            int chunk = buffer.length;\n            \n            while(remainder > 0) {\n                int len = (int) Math.min(chunk, remainder);\n                is.readBytes(buffer, 0, len);\n                os.writeBytes(buffer, len);\n                remainder -= len;\n            }\n            \n            // Verify that remainder is 0\n            if (remainder != 0) \n                throw new IOException(\n                    \"Non-zero remainder length after copying: \" + remainder\n                    + \" (id: \" + source.file + \", length: \" + length \n                    + \", buffer size: \" + chunk + \")\");\n                    \n            // Verify that the output length diff is equal to original file\n            long endPtr = os.getFilePointer();\n            long diff = endPtr - startPtr;\n            if (diff != length) \n                throw new IOException(\n                    \"Difference in the output file offsets \" + diff\n                    + \" does not match the original file length \" + length);\n            \n        } finally { \n            if (is != null) is.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e971ba25509e21a130fef61f0687be0446ca27a0","date":1095369217,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,OutputStream,byte[]).mjava","pathOld":"src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,OutputStream,byte[]).mjava","sourceNew":"    /** Copy the contents of the file with specified extension into the\n     *  provided output stream. Use the provided buffer for moving data\n     *  to reduce memory allocation.\n     */\n    private void copyFile(FileEntry source, OutputStream os, byte buffer[])\n    throws IOException\n    {\n        IndexInput is = null;\n        try {\n            long startPtr = os.getFilePointer();\n\n            is = directory.openInput(source.file);\n            long length = is.length();\n            long remainder = length;\n            int chunk = buffer.length;\n\n            while(remainder > 0) {\n                int len = (int) Math.min(chunk, remainder);\n                is.readBytes(buffer, 0, len);\n                os.writeBytes(buffer, len);\n                remainder -= len;\n            }\n\n            // Verify that remainder is 0\n            if (remainder != 0)\n                throw new IOException(\n                    \"Non-zero remainder length after copying: \" + remainder\n                    + \" (id: \" + source.file + \", length: \" + length\n                    + \", buffer size: \" + chunk + \")\");\n\n            // Verify that the output length diff is equal to original file\n            long endPtr = os.getFilePointer();\n            long diff = endPtr - startPtr;\n            if (diff != length)\n                throw new IOException(\n                    \"Difference in the output file offsets \" + diff\n                    + \" does not match the original file length \" + length);\n\n        } finally {\n            if (is != null) is.close();\n        }\n    }\n\n","sourceOld":"    /** Copy the contents of the file with specified extension into the\n     *  provided output stream. Use the provided buffer for moving data\n     *  to reduce memory allocation.\n     */\n    private void copyFile(FileEntry source, OutputStream os, byte buffer[])\n    throws IOException\n    {\n        InputStream is = null;\n        try {\n            long startPtr = os.getFilePointer();\n\n            is = directory.openFile(source.file);\n            long length = is.length();\n            long remainder = length;\n            int chunk = buffer.length;\n\n            while(remainder > 0) {\n                int len = (int) Math.min(chunk, remainder);\n                is.readBytes(buffer, 0, len);\n                os.writeBytes(buffer, len);\n                remainder -= len;\n            }\n\n            // Verify that remainder is 0\n            if (remainder != 0)\n                throw new IOException(\n                    \"Non-zero remainder length after copying: \" + remainder\n                    + \" (id: \" + source.file + \", length: \" + length\n                    + \", buffer size: \" + chunk + \")\");\n\n            // Verify that the output length diff is equal to original file\n            long endPtr = os.getFilePointer();\n            long diff = endPtr - startPtr;\n            if (diff != length)\n                throw new IOException(\n                    \"Difference in the output file offsets \" + diff\n                    + \" does not match the original file length \" + length);\n\n        } finally {\n            if (is != null) is.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dda77265180d41bf85c84c995e25eda7b8e1b74d","date":1096395352,"type":5,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,IndexOutput,byte[]).mjava","pathOld":"src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,OutputStream,byte[]).mjava","sourceNew":"    /** Copy the contents of the file with specified extension into the\n     *  provided output stream. Use the provided buffer for moving data\n     *  to reduce memory allocation.\n     */\n    private void copyFile(FileEntry source, IndexOutput os, byte buffer[])\n    throws IOException\n    {\n        IndexInput is = null;\n        try {\n            long startPtr = os.getFilePointer();\n\n            is = directory.openInput(source.file);\n            long length = is.length();\n            long remainder = length;\n            int chunk = buffer.length;\n\n            while(remainder > 0) {\n                int len = (int) Math.min(chunk, remainder);\n                is.readBytes(buffer, 0, len);\n                os.writeBytes(buffer, len);\n                remainder -= len;\n            }\n\n            // Verify that remainder is 0\n            if (remainder != 0)\n                throw new IOException(\n                    \"Non-zero remainder length after copying: \" + remainder\n                    + \" (id: \" + source.file + \", length: \" + length\n                    + \", buffer size: \" + chunk + \")\");\n\n            // Verify that the output length diff is equal to original file\n            long endPtr = os.getFilePointer();\n            long diff = endPtr - startPtr;\n            if (diff != length)\n                throw new IOException(\n                    \"Difference in the output file offsets \" + diff\n                    + \" does not match the original file length \" + length);\n\n        } finally {\n            if (is != null) is.close();\n        }\n    }\n\n","sourceOld":"    /** Copy the contents of the file with specified extension into the\n     *  provided output stream. Use the provided buffer for moving data\n     *  to reduce memory allocation.\n     */\n    private void copyFile(FileEntry source, OutputStream os, byte buffer[])\n    throws IOException\n    {\n        IndexInput is = null;\n        try {\n            long startPtr = os.getFilePointer();\n\n            is = directory.openInput(source.file);\n            long length = is.length();\n            long remainder = length;\n            int chunk = buffer.length;\n\n            while(remainder > 0) {\n                int len = (int) Math.min(chunk, remainder);\n                is.readBytes(buffer, 0, len);\n                os.writeBytes(buffer, len);\n                remainder -= len;\n            }\n\n            // Verify that remainder is 0\n            if (remainder != 0)\n                throw new IOException(\n                    \"Non-zero remainder length after copying: \" + remainder\n                    + \" (id: \" + source.file + \", length: \" + length\n                    + \", buffer size: \" + chunk + \")\");\n\n            // Verify that the output length diff is equal to original file\n            long endPtr = os.getFilePointer();\n            long diff = endPtr - startPtr;\n            if (diff != length)\n                throw new IOException(\n                    \"Difference in the output file offsets \" + diff\n                    + \" does not match the original file length \" + length);\n\n        } finally {\n            if (is != null) is.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e971ba25509e21a130fef61f0687be0446ca27a0":["a67f534c1db9eb255bc5a5137c7bf362ff90c276"],"dda77265180d41bf85c84c995e25eda7b8e1b74d":["e971ba25509e21a130fef61f0687be0446ca27a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dda77265180d41bf85c84c995e25eda7b8e1b74d"],"a67f534c1db9eb255bc5a5137c7bf362ff90c276":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"]},"commit2Childs":{"e971ba25509e21a130fef61f0687be0446ca27a0":["dda77265180d41bf85c84c995e25eda7b8e1b74d"],"dda77265180d41bf85c84c995e25eda7b8e1b74d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["a67f534c1db9eb255bc5a5137c7bf362ff90c276"],"a67f534c1db9eb255bc5a5137c7bf362ff90c276":["e971ba25509e21a130fef61f0687be0446ca27a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}