{"path":"src/java/org/apache/solr/schema/TrieField#getRangeQuery(QParser,String,String,String,boolean,boolean).mjava","commits":[{"id":"187477cb6c13b4aad8f8b30e1a2a0c18907acce9","date":1236863546,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/TrieField#getRangeQuery(QParser,String,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/schema/TrieField#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, String field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Filter filter = null;\n    switch (type) {\n      case INTEGER:\n        filter = new IntTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : Integer.parseInt(min),\n                max == null ? null : Integer.parseInt(max),\n                minInclusive, maxInclusive);\n        break;\n      case FLOAT:\n        filter = new IntTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : TrieUtils.floatToSortableInt(Float.parseFloat(min)),\n                max == null ? null : TrieUtils.floatToSortableInt(Float.parseFloat(max)),\n                minInclusive, maxInclusive);\n        break;\n      case LONG:\n        filter = new LongTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : Long.parseLong(min),\n                max == null ? null : Long.parseLong(max),\n                minInclusive, maxInclusive);\n        break;\n      case DOUBLE:\n        filter = new LongTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(min)),\n                max == null ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(max)),\n                minInclusive, maxInclusive);\n        break;\n      case DATE:\n        filter = new LongTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : dateField.parseMath(null, min).getTime(),\n                max == null ? null : dateField.parseMath(null, max).getTime(),\n                minInclusive, maxInclusive);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n    \n    return new ConstantScoreQuery(filter);\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(String field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Filter filter = null;\n    switch (type) {\n      case INTEGER:\n        filter = new IntTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : Integer.parseInt(min),\n                max == null ? null : Integer.parseInt(max),\n                minInclusive, maxInclusive);\n        break;\n      case FLOAT:\n        filter = new IntTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : TrieUtils.floatToSortableInt(Float.parseFloat(min)),\n                max == null ? null : TrieUtils.floatToSortableInt(Float.parseFloat(max)),\n                minInclusive, maxInclusive);\n        break;\n      case LONG:\n        filter = new LongTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : Long.parseLong(min),\n                max == null ? null : Long.parseLong(max),\n                minInclusive, maxInclusive);\n        break;\n      case DOUBLE:\n        filter = new LongTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(min)),\n                max == null ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(max)),\n                minInclusive, maxInclusive);\n        break;\n      case DATE:\n        filter = new LongTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : dateField.parseMath(null, min).getTime(),\n                max == null ? null : dateField.parseMath(null, max).getTime(),\n                minInclusive, maxInclusive);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n    \n    return new ConstantScoreQuery(filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7149ddb73f37efb10a5e118a731640a67d5023dd","date":1237648988,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/TrieField#getRangeQuery(QParser,String,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/schema/TrieField#getRangeQuery(QParser,String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, String field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Query query = null;\n    switch (type) {\n      case INTEGER:\n        query = new IntTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : Integer.parseInt(min),\n                max == null ? null : Integer.parseInt(max),\n                minInclusive, maxInclusive).asQuery();\n        break;\n      case FLOAT:\n        query = new IntTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : TrieUtils.floatToSortableInt(Float.parseFloat(min)),\n                max == null ? null : TrieUtils.floatToSortableInt(Float.parseFloat(max)),\n                minInclusive, maxInclusive).asQuery();\n        break;\n      case LONG:\n        query = new LongTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : Long.parseLong(min),\n                max == null ? null : Long.parseLong(max),\n                minInclusive, maxInclusive).asQuery();\n        break;\n      case DOUBLE:\n        query = new LongTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(min)),\n                max == null ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(max)),\n                minInclusive, maxInclusive).asQuery();\n        break;\n      case DATE:\n        query = new LongTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : dateField.parseMath(null, min).getTime(),\n                max == null ? null : dateField.parseMath(null, max).getTime(),\n                minInclusive, maxInclusive).asQuery();\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n    \n    return query;\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, String field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Filter filter = null;\n    switch (type) {\n      case INTEGER:\n        filter = new IntTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : Integer.parseInt(min),\n                max == null ? null : Integer.parseInt(max),\n                minInclusive, maxInclusive);\n        break;\n      case FLOAT:\n        filter = new IntTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : TrieUtils.floatToSortableInt(Float.parseFloat(min)),\n                max == null ? null : TrieUtils.floatToSortableInt(Float.parseFloat(max)),\n                minInclusive, maxInclusive);\n        break;\n      case LONG:\n        filter = new LongTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : Long.parseLong(min),\n                max == null ? null : Long.parseLong(max),\n                minInclusive, maxInclusive);\n        break;\n      case DOUBLE:\n        filter = new LongTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(min)),\n                max == null ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(max)),\n                minInclusive, maxInclusive);\n        break;\n      case DATE:\n        filter = new LongTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : dateField.parseMath(null, min).getTime(),\n                max == null ? null : dateField.parseMath(null, max).getTime(),\n                minInclusive, maxInclusive);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n    \n    return new ConstantScoreQuery(filter);\n  }\n\n","bugFix":null,"bugIntro":["d72e3710bede9618eb9b2b5c6936369f3d3f9579"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d72e3710bede9618eb9b2b5c6936369f3d3f9579","date":1239534189,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/TrieField#getRangeQuery(QParser,String,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/schema/TrieField#getRangeQuery(QParser,String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, String field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Query query = null;\n    switch (type) {\n      case INTEGER:\n        query = new IntTrieRangeFilter(field, precisionStep,\n                min == null ? null : Integer.parseInt(min),\n                max == null ? null : Integer.parseInt(max),\n                minInclusive, maxInclusive).asQuery();\n        break;\n      case FLOAT:\n        query = new IntTrieRangeFilter(field, precisionStep,\n                min == null ? null : TrieUtils.floatToSortableInt(Float.parseFloat(min)),\n                max == null ? null : TrieUtils.floatToSortableInt(Float.parseFloat(max)),\n                minInclusive, maxInclusive).asQuery();\n        break;\n      case LONG:\n        query = new LongTrieRangeFilter(field, precisionStep,\n                min == null ? null : Long.parseLong(min),\n                max == null ? null : Long.parseLong(max),\n                minInclusive, maxInclusive).asQuery();\n        break;\n      case DOUBLE:\n        query = new LongTrieRangeFilter(field, precisionStep,\n                min == null ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(min)),\n                max == null ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(max)),\n                minInclusive, maxInclusive).asQuery();\n        break;\n      case DATE:\n        query = new LongTrieRangeFilter(field, precisionStep,\n                min == null ? null : dateField.parseMath(null, min).getTime(),\n                max == null ? null : dateField.parseMath(null, max).getTime(),\n                minInclusive, maxInclusive).asQuery();\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n    \n    return query;\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, String field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Query query = null;\n    switch (type) {\n      case INTEGER:\n        query = new IntTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : Integer.parseInt(min),\n                max == null ? null : Integer.parseInt(max),\n                minInclusive, maxInclusive).asQuery();\n        break;\n      case FLOAT:\n        query = new IntTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : TrieUtils.floatToSortableInt(Float.parseFloat(min)),\n                max == null ? null : TrieUtils.floatToSortableInt(Float.parseFloat(max)),\n                minInclusive, maxInclusive).asQuery();\n        break;\n      case LONG:\n        query = new LongTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : Long.parseLong(min),\n                max == null ? null : Long.parseLong(max),\n                minInclusive, maxInclusive).asQuery();\n        break;\n      case DOUBLE:\n        query = new LongTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(min)),\n                max == null ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(max)),\n                minInclusive, maxInclusive).asQuery();\n        break;\n      case DATE:\n        query = new LongTrieRangeFilter(field, field, precisionStep,\n                min == null ? null : dateField.parseMath(null, min).getTime(),\n                max == null ? null : dateField.parseMath(null, max).getTime(),\n                minInclusive, maxInclusive).asQuery();\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n    \n    return query;\n  }\n\n","bugFix":["7149ddb73f37efb10a5e118a731640a67d5023dd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6477efb0d5880936e1121e3238a92b586fc51e2d","date":1240566409,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/TrieField#getRangeQuery(QParser,String,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/schema/TrieField#getRangeQuery(QParser,String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, String field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Query query = null;\n    switch (type) {\n      case INTEGER:\n        query = new IntTrieRangeQuery(field, precisionStep,\n                min == null ? null : Integer.parseInt(min),\n                max == null ? null : Integer.parseInt(max),\n                minInclusive, maxInclusive);\n        break;\n      case FLOAT:\n        query = new IntTrieRangeQuery(field, precisionStep,\n                min == null ? null : TrieUtils.floatToSortableInt(Float.parseFloat(min)),\n                max == null ? null : TrieUtils.floatToSortableInt(Float.parseFloat(max)),\n                minInclusive, maxInclusive);\n        break;\n      case LONG:\n        query = new LongTrieRangeQuery(field, precisionStep,\n                min == null ? null : Long.parseLong(min),\n                max == null ? null : Long.parseLong(max),\n                minInclusive, maxInclusive);\n        break;\n      case DOUBLE:\n        query = new LongTrieRangeQuery(field, precisionStep,\n                min == null ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(min)),\n                max == null ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(max)),\n                minInclusive, maxInclusive);\n        break;\n      case DATE:\n        query = new LongTrieRangeQuery(field, precisionStep,\n                min == null ? null : dateField.parseMath(null, min).getTime(),\n                max == null ? null : dateField.parseMath(null, max).getTime(),\n                minInclusive, maxInclusive);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n\n    return query;\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, String field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Query query = null;\n    switch (type) {\n      case INTEGER:\n        query = new IntTrieRangeFilter(field, precisionStep,\n                min == null ? null : Integer.parseInt(min),\n                max == null ? null : Integer.parseInt(max),\n                minInclusive, maxInclusive).asQuery();\n        break;\n      case FLOAT:\n        query = new IntTrieRangeFilter(field, precisionStep,\n                min == null ? null : TrieUtils.floatToSortableInt(Float.parseFloat(min)),\n                max == null ? null : TrieUtils.floatToSortableInt(Float.parseFloat(max)),\n                minInclusive, maxInclusive).asQuery();\n        break;\n      case LONG:\n        query = new LongTrieRangeFilter(field, precisionStep,\n                min == null ? null : Long.parseLong(min),\n                max == null ? null : Long.parseLong(max),\n                minInclusive, maxInclusive).asQuery();\n        break;\n      case DOUBLE:\n        query = new LongTrieRangeFilter(field, precisionStep,\n                min == null ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(min)),\n                max == null ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(max)),\n                minInclusive, maxInclusive).asQuery();\n        break;\n      case DATE:\n        query = new LongTrieRangeFilter(field, precisionStep,\n                min == null ? null : dateField.parseMath(null, min).getTime(),\n                max == null ? null : dateField.parseMath(null, max).getTime(),\n                minInclusive, maxInclusive).asQuery();\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n    \n    return query;\n  }\n\n","bugFix":null,"bugIntro":["92f8ab19a30ff70981e43b8cc78069cb0941476e","92f8ab19a30ff70981e43b8cc78069cb0941476e","92f8ab19a30ff70981e43b8cc78069cb0941476e","92f8ab19a30ff70981e43b8cc78069cb0941476e","92f8ab19a30ff70981e43b8cc78069cb0941476e","92f8ab19a30ff70981e43b8cc78069cb0941476e","92f8ab19a30ff70981e43b8cc78069cb0941476e","92f8ab19a30ff70981e43b8cc78069cb0941476e","92f8ab19a30ff70981e43b8cc78069cb0941476e","92f8ab19a30ff70981e43b8cc78069cb0941476e","92f8ab19a30ff70981e43b8cc78069cb0941476e","92f8ab19a30ff70981e43b8cc78069cb0941476e","92f8ab19a30ff70981e43b8cc78069cb0941476e","92f8ab19a30ff70981e43b8cc78069cb0941476e","92f8ab19a30ff70981e43b8cc78069cb0941476e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e77721aaf23393f6ea7926045ae6f8efea0ce8e","date":1247678464,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/TrieField#getRangeQuery(QParser,String,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/schema/TrieField#getRangeQuery(QParser,String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, String field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Query query = null;\n    switch (type) {\n      case INTEGER:\n        query = NumericRangeQuery.newIntRange(field, precisionStep,\n                min == null ? null : Integer.parseInt(min),\n                max == null ? null : Integer.parseInt(max),\n                minInclusive, maxInclusive);\n        break;\n      case FLOAT:\n        query = NumericRangeQuery.newFloatRange(field, precisionStep,\n                min == null ? null : Float.parseFloat(min),\n                max == null ? null : Float.parseFloat(max),\n                minInclusive, maxInclusive);\n        break;\n      case LONG:\n        query = NumericRangeQuery.newLongRange(field, precisionStep,\n                min == null ? null : Long.parseLong(min),\n                max == null ? null : Long.parseLong(max),\n                minInclusive, maxInclusive);\n        break;\n      case DOUBLE:\n        query = NumericRangeQuery.newDoubleRange(field, precisionStep,\n                min == null ? null : Double.parseDouble(min),\n                max == null ? null : Double.parseDouble(max),\n                minInclusive, maxInclusive);\n        break;\n      case DATE:\n        query = NumericRangeQuery.newLongRange(field, precisionStep,\n                min == null ? null : dateField.parseMath(null, min).getTime(),\n                max == null ? null : dateField.parseMath(null, max).getTime(),\n                minInclusive, maxInclusive);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n\n    return query;\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, String field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Query query = null;\n    switch (type) {\n      case INTEGER:\n        query = new IntTrieRangeQuery(field, precisionStep,\n                min == null ? null : Integer.parseInt(min),\n                max == null ? null : Integer.parseInt(max),\n                minInclusive, maxInclusive);\n        break;\n      case FLOAT:\n        query = new IntTrieRangeQuery(field, precisionStep,\n                min == null ? null : TrieUtils.floatToSortableInt(Float.parseFloat(min)),\n                max == null ? null : TrieUtils.floatToSortableInt(Float.parseFloat(max)),\n                minInclusive, maxInclusive);\n        break;\n      case LONG:\n        query = new LongTrieRangeQuery(field, precisionStep,\n                min == null ? null : Long.parseLong(min),\n                max == null ? null : Long.parseLong(max),\n                minInclusive, maxInclusive);\n        break;\n      case DOUBLE:\n        query = new LongTrieRangeQuery(field, precisionStep,\n                min == null ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(min)),\n                max == null ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(max)),\n                minInclusive, maxInclusive);\n        break;\n      case DATE:\n        query = new LongTrieRangeQuery(field, precisionStep,\n                min == null ? null : dateField.parseMath(null, min).getTime(),\n                max == null ? null : dateField.parseMath(null, max).getTime(),\n                minInclusive, maxInclusive);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c","date":1249333745,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/TrieField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/schema/TrieField#getRangeQuery(QParser,String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    // don't use a precisionStep if the field is multiValued\n    int ps = field.multiValued() ? Integer.MAX_VALUE : precisionStep;\n\n    Query query = null;\n    switch (type) {\n      case INTEGER:\n        query = NumericRangeQuery.newIntRange(field.getName(), ps,\n                min == null ? null : Integer.parseInt(min),\n                max == null ? null : Integer.parseInt(max),\n                minInclusive, maxInclusive);\n        break;\n      case FLOAT:\n        query = NumericRangeQuery.newFloatRange(field.getName(), ps,\n                min == null ? null : Float.parseFloat(min),\n                max == null ? null : Float.parseFloat(max),\n                minInclusive, maxInclusive);\n        break;\n      case LONG:\n        query = NumericRangeQuery.newLongRange(field.getName(), ps,\n                min == null ? null : Long.parseLong(min),\n                max == null ? null : Long.parseLong(max),\n                minInclusive, maxInclusive);\n        break;\n      case DOUBLE:\n        query = NumericRangeQuery.newDoubleRange(field.getName(), ps,\n                min == null ? null : Double.parseDouble(min),\n                max == null ? null : Double.parseDouble(max),\n                minInclusive, maxInclusive);\n        break;\n      case DATE:\n        query = NumericRangeQuery.newLongRange(field.getName(), ps,\n                min == null ? null : dateField.parseMath(null, min).getTime(),\n                max == null ? null : dateField.parseMath(null, max).getTime(),\n                minInclusive, maxInclusive);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n\n    return query;\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, String field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Query query = null;\n    switch (type) {\n      case INTEGER:\n        query = NumericRangeQuery.newIntRange(field, precisionStep,\n                min == null ? null : Integer.parseInt(min),\n                max == null ? null : Integer.parseInt(max),\n                minInclusive, maxInclusive);\n        break;\n      case FLOAT:\n        query = NumericRangeQuery.newFloatRange(field, precisionStep,\n                min == null ? null : Float.parseFloat(min),\n                max == null ? null : Float.parseFloat(max),\n                minInclusive, maxInclusive);\n        break;\n      case LONG:\n        query = NumericRangeQuery.newLongRange(field, precisionStep,\n                min == null ? null : Long.parseLong(min),\n                max == null ? null : Long.parseLong(max),\n                minInclusive, maxInclusive);\n        break;\n      case DOUBLE:\n        query = NumericRangeQuery.newDoubleRange(field, precisionStep,\n                min == null ? null : Double.parseDouble(min),\n                max == null ? null : Double.parseDouble(max),\n                minInclusive, maxInclusive);\n        break;\n      case DATE:\n        query = NumericRangeQuery.newLongRange(field, precisionStep,\n                min == null ? null : dateField.parseMath(null, min).getTime(),\n                max == null ? null : dateField.parseMath(null, max).getTime(),\n                minInclusive, maxInclusive);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":["2a8ebea459a12fd73b3a200b86053f407cf33693"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1e77721aaf23393f6ea7926045ae6f8efea0ce8e":["6477efb0d5880936e1121e3238a92b586fc51e2d"],"6477efb0d5880936e1121e3238a92b586fc51e2d":["d72e3710bede9618eb9b2b5c6936369f3d3f9579"],"187477cb6c13b4aad8f8b30e1a2a0c18907acce9":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"d72e3710bede9618eb9b2b5c6936369f3d3f9579":["7149ddb73f37efb10a5e118a731640a67d5023dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c":["1e77721aaf23393f6ea7926045ae6f8efea0ce8e"],"7149ddb73f37efb10a5e118a731640a67d5023dd":["187477cb6c13b4aad8f8b30e1a2a0c18907acce9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e77721aaf23393f6ea7926045ae6f8efea0ce8e":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c"],"6477efb0d5880936e1121e3238a92b586fc51e2d":["1e77721aaf23393f6ea7926045ae6f8efea0ce8e"],"187477cb6c13b4aad8f8b30e1a2a0c18907acce9":["7149ddb73f37efb10a5e118a731640a67d5023dd"],"d72e3710bede9618eb9b2b5c6936369f3d3f9579":["6477efb0d5880936e1121e3238a92b586fc51e2d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["187477cb6c13b4aad8f8b30e1a2a0c18907acce9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c":[],"7149ddb73f37efb10a5e118a731640a67d5023dd":["d72e3710bede9618eb9b2b5c6936369f3d3f9579"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}