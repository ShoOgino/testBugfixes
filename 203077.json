{"path":"solr/core/src/test/org/apache/solr/util/hll/HLLSerializationTest#serializationSmokeTest().mjava","commits":[{"id":"6faa211c4af605e3cf078a76d200c1dc348973f5","date":1437043657,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/HLLSerializationTest#serializationSmokeTest().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * A smoke-test that covers serialization/deserialization of an HLL\n     * under all possible parameters.\n     */\n    @Test\n    @Slow\n    @Nightly\n    public void serializationSmokeTest() throws Exception {\n        final Random random = new Random(randomLong());\n        final int randomCount = 250;\n        final List<Long> randoms = new ArrayList<Long>(randomCount);\n        for (int i=0; i<randomCount; i++) {\n          randoms.add(random.nextLong());\n      }\n\n        assertCardinality(HLLType.EMPTY, randoms);\n        assertCardinality(HLLType.EXPLICIT, randoms);\n        assertCardinality(HLLType.SPARSE, randoms);\n        assertCardinality(HLLType.FULL, randoms);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a81b342a33a0e68d2bb194ebcc3dfadcc69868b2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/HLLSerializationTest#serializationSmokeTest().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * A smoke-test that covers serialization/deserialization of an HLL\n     * under all possible parameters.\n     */\n    @Test\n    @Slow\n    @Nightly\n    public void serializationSmokeTest() throws Exception {\n        final Random random = new Random(randomLong());\n        final int randomCount = 250;\n        final List<Long> randoms = new ArrayList<Long>(randomCount);\n        for (int i=0; i<randomCount; i++) {\n          randoms.add(random.nextLong());\n      }\n\n        assertCardinality(HLLType.EMPTY, randoms);\n        assertCardinality(HLLType.EXPLICIT, randoms);\n        assertCardinality(HLLType.SPARSE, randoms);\n        assertCardinality(HLLType.FULL, randoms);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a81b342a33a0e68d2bb194ebcc3dfadcc69868b2","date":1440606819,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/HLLSerializationTest#serializationSmokeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/hll/HLLSerializationTest#serializationSmokeTest().mjava","sourceNew":"  /**\n   * A smoke-test that covers serialization/deserialization of an HLL\n   * under most possible init parameters.\n   */\n  @Test\n  @Slow\n  @Nightly\n  public void serializationSmokeTest() throws Exception {\n    final Random random = new Random(randomLong());\n    final int randomCount = 250;\n    final List<Long> randoms = new ArrayList<Long>(randomCount);\n    for (int i=0; i<randomCount; i++) {\n      randoms.add(random.nextLong());\n    }\n    \n    // NOTE: log2m<=16 was chosen as the max log2m parameter so that the test\n    //       completes in a reasonable amount of time. Not much is gained by\n    //       testing larger values\n    final int maxLog2m = 16;\n    for (HLLType type : EnumSet.allOf(HLLType.class)) {\n      assertCardinality(type, maxLog2m, randoms);\n    }\n  }\n\n","sourceOld":"    /**\n     * A smoke-test that covers serialization/deserialization of an HLL\n     * under all possible parameters.\n     */\n    @Test\n    @Slow\n    @Nightly\n    public void serializationSmokeTest() throws Exception {\n        final Random random = new Random(randomLong());\n        final int randomCount = 250;\n        final List<Long> randoms = new ArrayList<Long>(randomCount);\n        for (int i=0; i<randomCount; i++) {\n          randoms.add(random.nextLong());\n      }\n\n        assertCardinality(HLLType.EMPTY, randoms);\n        assertCardinality(HLLType.EXPLICIT, randoms);\n        assertCardinality(HLLType.SPARSE, randoms);\n        assertCardinality(HLLType.FULL, randoms);\n    }\n\n","bugFix":["6faa211c4af605e3cf078a76d200c1dc348973f5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a81b342a33a0e68d2bb194ebcc3dfadcc69868b2":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6faa211c4af605e3cf078a76d200c1dc348973f5"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a81b342a33a0e68d2bb194ebcc3dfadcc69868b2"]},"commit2Childs":{"a81b342a33a0e68d2bb194ebcc3dfadcc69868b2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6faa211c4af605e3cf078a76d200c1dc348973f5"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a81b342a33a0e68d2bb194ebcc3dfadcc69868b2"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}