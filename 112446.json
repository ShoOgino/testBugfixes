{"path":"backwards/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","pathOld":"/dev/null","sourceNew":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Scorer s = new SimpleScorer();\n    TopDocsCollector tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","sourceNew":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Scorer s = new SimpleScorer();\n    TopDocsCollector tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n  }\n\n","sourceOld":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Scorer s = new SimpleScorer();\n    TopDocsCollector tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}