{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#AbstractFirstPassGroupingCollector(Sort,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#AbstractFirstPassGroupingCollector(Sort,int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#AbstractFirstPassGroupingCollector(Sort,int).mjava","sourceNew":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException If I/O related errors occur\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public AbstractFirstPassGroupingCollector(Sort groupSort, int topNGroups) throws IOException {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n\n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<GROUP_VALUE_TYPE, CollectedSearchGroup<GROUP_VALUE_TYPE>>(topNGroups);\n  }\n\n","sourceOld":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException If I/O related errors occur\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public AbstractFirstPassGroupingCollector(Sort groupSort, int topNGroups) throws IOException {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n\n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<GROUP_VALUE_TYPE, CollectedSearchGroup<GROUP_VALUE_TYPE>>(topNGroups);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97d4692d0c601ff773f0a2231967312428a904e4","date":1366026608,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#AbstractFirstPassGroupingCollector(Sort,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#AbstractFirstPassGroupingCollector(Sort,int).mjava","sourceNew":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException If I/O related errors occur\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public AbstractFirstPassGroupingCollector(Sort groupSort, int topNGroups) throws IOException {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n\n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<>(topNGroups);\n  }\n\n","sourceOld":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException If I/O related errors occur\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public AbstractFirstPassGroupingCollector(Sort groupSort, int topNGroups) throws IOException {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n\n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<GROUP_VALUE_TYPE, CollectedSearchGroup<GROUP_VALUE_TYPE>>(topNGroups);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"901e951cec2e6af4e503209a6721c8834db23279","date":1420556599,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#AbstractFirstPassGroupingCollector(Sort,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#AbstractFirstPassGroupingCollector(Sort,int).mjava","sourceNew":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException If I/O related errors occur\n   */\n  public AbstractFirstPassGroupingCollector(Sort groupSort, int topNGroups) throws IOException {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n\n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    leafComparators = new LeafFieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<>(topNGroups);\n  }\n\n","sourceOld":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException If I/O related errors occur\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public AbstractFirstPassGroupingCollector(Sort groupSort, int topNGroups) throws IOException {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n\n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<>(topNGroups);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4db7976c38cb8d2fbd54bae4fa5ec4b0f0d5c789","date":1439672757,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#AbstractFirstPassGroupingCollector(Sort,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#AbstractFirstPassGroupingCollector(Sort,int).mjava","sourceNew":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException If I/O related errors occur\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public AbstractFirstPassGroupingCollector(Sort groupSort, int topNGroups) throws IOException {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n\n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    leafComparators = new LeafFieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<>(topNGroups);\n  }\n\n","sourceOld":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException If I/O related errors occur\n   */\n  public AbstractFirstPassGroupingCollector(Sort groupSort, int topNGroups) throws IOException {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n\n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    leafComparators = new LeafFieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<>(topNGroups);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a80db2a1f5390c08a8cc54ee082ae2bc24f42c81","date":1440796598,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#AbstractFirstPassGroupingCollector(Sort,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#AbstractFirstPassGroupingCollector(Sort,int).mjava","sourceNew":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException If I/O related errors occur\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public AbstractFirstPassGroupingCollector(Sort groupSort, int topNGroups) throws IOException {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n\n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    leafComparators = new LeafFieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<>(topNGroups);\n  }\n\n","sourceOld":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException If I/O related errors occur\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public AbstractFirstPassGroupingCollector(Sort groupSort, int topNGroups) throws IOException {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n\n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    leafComparators = new LeafFieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<>(topNGroups);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e7cf486535cf187cb3745154ca5dd3de3bd2999","date":1449256632,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#AbstractFirstPassGroupingCollector(Sort,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#AbstractFirstPassGroupingCollector(Sort,int).mjava","sourceNew":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException If I/O related errors occur\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public AbstractFirstPassGroupingCollector(Sort groupSort, int topNGroups) throws IOException {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n\n    this.topNGroups = topNGroups;\n    this.needsScores = groupSort.needsScores();\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    leafComparators = new LeafFieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<>(topNGroups);\n  }\n\n","sourceOld":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException If I/O related errors occur\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public AbstractFirstPassGroupingCollector(Sort groupSort, int topNGroups) throws IOException {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n\n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    leafComparators = new LeafFieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<>(topNGroups);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#FirstPassGroupingCollector(Sort,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#AbstractFirstPassGroupingCollector(Sort,int).mjava","sourceNew":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException If I/O related errors occur\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public FirstPassGroupingCollector(Sort groupSort, int topNGroups) throws IOException {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n\n    this.topNGroups = topNGroups;\n    this.needsScores = groupSort.needsScores();\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    leafComparators = new LeafFieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<>(topNGroups);\n  }\n\n","sourceOld":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException If I/O related errors occur\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public AbstractFirstPassGroupingCollector(Sort groupSort, int topNGroups) throws IOException {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n\n    this.topNGroups = topNGroups;\n    this.needsScores = groupSort.needsScores();\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    leafComparators = new LeafFieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<>(topNGroups);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#FirstPassGroupingCollector(Sort,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#AbstractFirstPassGroupingCollector(Sort,int).mjava","sourceNew":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException If I/O related errors occur\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public FirstPassGroupingCollector(Sort groupSort, int topNGroups) throws IOException {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n\n    this.topNGroups = topNGroups;\n    this.needsScores = groupSort.needsScores();\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    leafComparators = new LeafFieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<>(topNGroups);\n  }\n\n","sourceOld":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException If I/O related errors occur\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public AbstractFirstPassGroupingCollector(Sort groupSort, int topNGroups) throws IOException {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n\n    this.topNGroups = topNGroups;\n    this.needsScores = groupSort.needsScores();\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    leafComparators = new LeafFieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<>(topNGroups);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a80db2a1f5390c08a8cc54ee082ae2bc24f42c81":["4db7976c38cb8d2fbd54bae4fa5ec4b0f0d5c789"],"20e94e61fe5291647346b70437617e6b6c370408":["7e7cf486535cf187cb3745154ca5dd3de3bd2999"],"97d4692d0c601ff773f0a2231967312428a904e4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7e7cf486535cf187cb3745154ca5dd3de3bd2999":["a80db2a1f5390c08a8cc54ee082ae2bc24f42c81"],"4db7976c38cb8d2fbd54bae4fa5ec4b0f0d5c789":["901e951cec2e6af4e503209a6721c8834db23279"],"901e951cec2e6af4e503209a6721c8834db23279":["97d4692d0c601ff773f0a2231967312428a904e4"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["7e7cf486535cf187cb3745154ca5dd3de3bd2999","20e94e61fe5291647346b70437617e6b6c370408"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["97d4692d0c601ff773f0a2231967312428a904e4"],"a80db2a1f5390c08a8cc54ee082ae2bc24f42c81":["7e7cf486535cf187cb3745154ca5dd3de3bd2999"],"20e94e61fe5291647346b70437617e6b6c370408":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"97d4692d0c601ff773f0a2231967312428a904e4":["901e951cec2e6af4e503209a6721c8834db23279"],"4db7976c38cb8d2fbd54bae4fa5ec4b0f0d5c789":["a80db2a1f5390c08a8cc54ee082ae2bc24f42c81"],"7e7cf486535cf187cb3745154ca5dd3de3bd2999":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"901e951cec2e6af4e503209a6721c8834db23279":["4db7976c38cb8d2fbd54bae4fa5ec4b0f0d5c789"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}