{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n      }\n      facetState.merger.merge(facet);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a3584d3db8b472772e3329d9d95d584b68ae997e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n      }\n      facetState.merger.merge(facet);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbadd4a153af2e36785fa5c682db5321cec90789","date":1432157571,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n      }\n      facetState.merger.merge(facet , new FacetMerger.Context());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n      }\n      facetState.merger.merge(facet);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bbe0e5f73e31966c742f7d203e432bb9eb72affc","date":1433430083,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      if (top == null) continue; // shards.tolerant=true will cause this to happen on exceptions/errors\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n      }\n      facetState.merger.merge(facet , new FacetMerger.Context());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n      }\n      facetState.merger.merge(facet , new FacetMerger.Context());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1931d98b40b01d5075753b197c2461a5c2652689","date":1471971289,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      if (top == null) continue; // shards.tolerant=true will cause this to happen on exceptions/errors\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n        facetState.mcontext = new FacetMerger.Context( sreq.responses.size() );\n      }\n      facetState.mcontext.root = facet;\n      facetState.mcontext.newShard(shardRsp.getShard());\n      facetState.merger.merge(facet , facetState.mcontext);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      if (top == null) continue; // shards.tolerant=true will cause this to happen on exceptions/errors\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n      }\n      facetState.merger.merge(facet , new FacetMerger.Context());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      if (top == null) continue; // shards.tolerant=true will cause this to happen on exceptions/errors\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n        facetState.mcontext = new FacetMerger.Context( sreq.responses.size() );\n      }\n      facetState.mcontext.root = facet;\n      facetState.mcontext.newShard(shardRsp.getShard());\n      facetState.merger.merge(facet , facetState.mcontext);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      if (top == null) continue; // shards.tolerant=true will cause this to happen on exceptions/errors\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n      }\n      facetState.merger.merge(facet , new FacetMerger.Context());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      if (top == null) continue; // shards.tolerant=true will cause this to happen on exceptions/errors\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n        facetState.mcontext = new FacetMerger.Context( sreq.responses.size() );\n      }\n      facetState.mcontext.root = facet;\n      facetState.mcontext.newShard(shardRsp.getShard());\n      facetState.merger.merge(facet , facetState.mcontext);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      if (top == null) continue; // shards.tolerant=true will cause this to happen on exceptions/errors\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n      }\n      facetState.merger.merge(facet , new FacetMerger.Context());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ec805ca8fedc0166461148c7182f1bcbbd18ee1","date":1489767223,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      if (top == null) continue; // shards.tolerant=true will cause this to happen on exceptions/errors\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n        facetState.mcontext = new FacetMerger.Context( sreq.responses.size() );\n      }\n\n      if ((sreq.purpose & PURPOSE_REFINE_JSON_FACETS) != 0) {\n        System.err.println(\"REFINE FACET RESULT FROM SHARD = \" + facet);\n        // call merge again with a diff flag set on the context???\n//        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"WORK IN PROGRESS, MERGING FACET REFINEMENT NOT SUPPORTED YET!\");\n\n        facetState.mcontext.root = facet;\n        facetState.mcontext.setShard(shardRsp.getShard());  // TODO: roll newShard into setShard?\n        facetState.merger.merge(facet , facetState.mcontext);\n        return;\n      }\n\n      facetState.mcontext.root = facet;\n      facetState.mcontext.newShard(shardRsp.getShard());\n      facetState.merger.merge(facet , facetState.mcontext);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      if (top == null) continue; // shards.tolerant=true will cause this to happen on exceptions/errors\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n        facetState.mcontext = new FacetMerger.Context( sreq.responses.size() );\n      }\n      facetState.mcontext.root = facet;\n      facetState.mcontext.newShard(shardRsp.getShard());\n      facetState.merger.merge(facet , facetState.mcontext);\n    }\n  }\n\n","bugFix":null,"bugIntro":["d6ca2e1fb422aea9c41a4c63e72d6108a37291c1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11ab475c994c79138885cc8a30b2641d929cdc43","date":1490280010,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      if (top == null) continue; // shards.tolerant=true will cause this to happen on exceptions/errors\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n        facetState.mcontext = new FacetMerger.Context( sreq.responses.size() );\n      }\n\n      if ((sreq.purpose & PURPOSE_REFINE_JSON_FACETS) != 0) {\n        System.err.println(\"REFINE FACET RESULT FROM SHARD = \" + facet);\n        // call merge again with a diff flag set on the context???\n//        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"WORK IN PROGRESS, MERGING FACET REFINEMENT NOT SUPPORTED YET!\");\n\n        facetState.mcontext.root = facet;\n        facetState.mcontext.setShard(shardRsp.getShard());  // TODO: roll newShard into setShard?\n        facetState.merger.merge(facet , facetState.mcontext);\n        return;\n      }\n\n      facetState.mcontext.root = facet;\n      facetState.mcontext.newShard(shardRsp.getShard());\n      facetState.merger.merge(facet , facetState.mcontext);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      if (top == null) continue; // shards.tolerant=true will cause this to happen on exceptions/errors\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n        facetState.mcontext = new FacetMerger.Context( sreq.responses.size() );\n      }\n      facetState.mcontext.root = facet;\n      facetState.mcontext.newShard(shardRsp.getShard());\n      facetState.merger.merge(facet , facetState.mcontext);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6ca2e1fb422aea9c41a4c63e72d6108a37291c1","date":1497545589,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      if (top == null) continue; // shards.tolerant=true will cause this to happen on exceptions/errors\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n        facetState.mcontext = new FacetMerger.Context( sreq.responses.size() );\n      }\n\n      if ((sreq.purpose & PURPOSE_REFINE_JSON_FACETS) != 0) {\n        // System.err.println(\"REFINE FACET RESULT FROM SHARD = \" + facet);\n        // call merge again with a diff flag set on the context???\n        facetState.mcontext.root = facet;\n        facetState.mcontext.setShard(shardRsp.getShard());  // TODO: roll newShard into setShard?\n        facetState.merger.merge(facet , facetState.mcontext);\n        return;\n      }\n\n      facetState.mcontext.root = facet;\n      facetState.mcontext.newShard(shardRsp.getShard());\n      facetState.merger.merge(facet , facetState.mcontext);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      if (top == null) continue; // shards.tolerant=true will cause this to happen on exceptions/errors\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n        facetState.mcontext = new FacetMerger.Context( sreq.responses.size() );\n      }\n\n      if ((sreq.purpose & PURPOSE_REFINE_JSON_FACETS) != 0) {\n        System.err.println(\"REFINE FACET RESULT FROM SHARD = \" + facet);\n        // call merge again with a diff flag set on the context???\n//        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"WORK IN PROGRESS, MERGING FACET REFINEMENT NOT SUPPORTED YET!\");\n\n        facetState.mcontext.root = facet;\n        facetState.mcontext.setShard(shardRsp.getShard());  // TODO: roll newShard into setShard?\n        facetState.merger.merge(facet , facetState.mcontext);\n        return;\n      }\n\n      facetState.mcontext.root = facet;\n      facetState.mcontext.newShard(shardRsp.getShard());\n      facetState.merger.merge(facet , facetState.mcontext);\n    }\n  }\n\n","bugFix":["8ec805ca8fedc0166461148c7182f1bcbbd18ee1"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      if (top == null) continue; // shards.tolerant=true will cause this to happen on exceptions/errors\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n        facetState.mcontext = new FacetMerger.Context( sreq.responses.size() );\n      }\n\n      if ((sreq.purpose & PURPOSE_REFINE_JSON_FACETS) != 0) {\n        // System.err.println(\"REFINE FACET RESULT FROM SHARD = \" + facet);\n        // call merge again with a diff flag set on the context???\n        facetState.mcontext.root = facet;\n        facetState.mcontext.setShard(shardRsp.getShard());  // TODO: roll newShard into setShard?\n        facetState.merger.merge(facet , facetState.mcontext);\n        return;\n      }\n\n      facetState.mcontext.root = facet;\n      facetState.mcontext.newShard(shardRsp.getShard());\n      facetState.merger.merge(facet , facetState.mcontext);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      if (top == null) continue; // shards.tolerant=true will cause this to happen on exceptions/errors\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n        facetState.mcontext = new FacetMerger.Context( sreq.responses.size() );\n      }\n\n      if ((sreq.purpose & PURPOSE_REFINE_JSON_FACETS) != 0) {\n        System.err.println(\"REFINE FACET RESULT FROM SHARD = \" + facet);\n        // call merge again with a diff flag set on the context???\n//        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"WORK IN PROGRESS, MERGING FACET REFINEMENT NOT SUPPORTED YET!\");\n\n        facetState.mcontext.root = facet;\n        facetState.mcontext.setShard(shardRsp.getShard());  // TODO: roll newShard into setShard?\n        facetState.merger.merge(facet , facetState.mcontext);\n        return;\n      }\n\n      facetState.mcontext.root = facet;\n      facetState.mcontext.newShard(shardRsp.getShard());\n      facetState.merger.merge(facet , facetState.mcontext);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      if (top == null) continue; // shards.tolerant=true will cause this to happen on exceptions/errors\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n        facetState.mcontext = new FacetMerger.Context( sreq.responses.size() );\n      }\n\n      if ((sreq.purpose & PURPOSE_REFINE_JSON_FACETS) != 0) {\n        // System.err.println(\"REFINE FACET RESULT FROM SHARD = \" + facet);\n        // call merge again with a diff flag set on the context???\n        facetState.mcontext.root = facet;\n        facetState.mcontext.setShard(shardRsp.getShard());  // TODO: roll newShard into setShard?\n        facetState.merger.merge(facet , facetState.mcontext);\n        return;\n      }\n\n      facetState.mcontext.root = facet;\n      facetState.mcontext.newShard(shardRsp.getShard());\n      facetState.merger.merge(facet , facetState.mcontext);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      if (top == null) continue; // shards.tolerant=true will cause this to happen on exceptions/errors\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n        facetState.mcontext = new FacetMerger.Context( sreq.responses.size() );\n      }\n\n      if ((sreq.purpose & PURPOSE_REFINE_JSON_FACETS) != 0) {\n        System.err.println(\"REFINE FACET RESULT FROM SHARD = \" + facet);\n        // call merge again with a diff flag set on the context???\n//        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"WORK IN PROGRESS, MERGING FACET REFINEMENT NOT SUPPORTED YET!\");\n\n        facetState.mcontext.root = facet;\n        facetState.mcontext.setShard(shardRsp.getShard());  // TODO: roll newShard into setShard?\n        facetState.merger.merge(facet , facetState.mcontext);\n        return;\n      }\n\n      facetState.mcontext.root = facet;\n      facetState.mcontext.newShard(shardRsp.getShard());\n      facetState.merger.merge(facet , facetState.mcontext);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15b321aed72eecb043f237c490b9afd4e52c25be","date":1525894978,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      if (top == null) continue; // shards.tolerant=true will cause this to happen on exceptions/errors\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n        facetState.mcontext = new FacetMerger.Context( sreq.responses.size() );\n      }\n\n      if ((sreq.purpose & PURPOSE_REFINE_JSON_FACETS) != 0) {\n        // System.err.println(\"REFINE FACET RESULT FROM SHARD = \" + facet);\n        // call merge again with a diff flag set on the context???\n        facetState.mcontext.root = facet;\n        facetState.mcontext.setShard(shardRsp.getShard());  // TODO: roll newShard into setShard?\n        facetState.merger.merge(facet , facetState.mcontext);\n        return;\n      }\n\n      // System.err.println(\"MERGING FACET RESULT FROM SHARD = \" + facet);\n      facetState.mcontext.root = facet;\n      facetState.mcontext.newShard(shardRsp.getShard());\n      facetState.merger.merge(facet , facetState.mcontext);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      if (top == null) continue; // shards.tolerant=true will cause this to happen on exceptions/errors\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n        facetState.mcontext = new FacetMerger.Context( sreq.responses.size() );\n      }\n\n      if ((sreq.purpose & PURPOSE_REFINE_JSON_FACETS) != 0) {\n        // System.err.println(\"REFINE FACET RESULT FROM SHARD = \" + facet);\n        // call merge again with a diff flag set on the context???\n        facetState.mcontext.root = facet;\n        facetState.mcontext.setShard(shardRsp.getShard());  // TODO: roll newShard into setShard?\n        facetState.merger.merge(facet , facetState.mcontext);\n        return;\n      }\n\n      facetState.mcontext.root = facet;\n      facetState.mcontext.newShard(shardRsp.getShard());\n      facetState.merger.merge(facet , facetState.mcontext);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3584d3db8b472772e3329d9d95d584b68ae997e","date":1551710517,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      if (top == null) continue; // shards.tolerant=true will cause this to happen on exceptions/errors\n      Object facet = top.get(\"facets\");\n      if (facet == null) {\n        SimpleOrderedMap shardResponseHeader = (SimpleOrderedMap)rsp.getResponse().get(\"responseHeader\");\n        if(Boolean.TRUE.equals(shardResponseHeader.getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY))) {\n          rb.rsp.getResponseHeader().asShallowMap().put(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY, Boolean.TRUE);\n        }\n        continue;\n      }\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n        facetState.mcontext = new FacetMerger.Context( sreq.responses.size() );\n      }\n\n      if ((sreq.purpose & PURPOSE_REFINE_JSON_FACETS) != 0) {\n        // System.err.println(\"REFINE FACET RESULT FROM SHARD = \" + facet);\n        // call merge again with a diff flag set on the context???\n        facetState.mcontext.root = facet;\n        facetState.mcontext.setShard(shardRsp.getShard());  // TODO: roll newShard into setShard?\n        facetState.merger.merge(facet , facetState.mcontext);\n        return;\n      }\n\n      // System.err.println(\"MERGING FACET RESULT FROM SHARD = \" + facet);\n      facetState.mcontext.root = facet;\n      facetState.mcontext.newShard(shardRsp.getShard());\n      facetState.merger.merge(facet , facetState.mcontext);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      if (top == null) continue; // shards.tolerant=true will cause this to happen on exceptions/errors\n      Object facet = top.get(\"facets\");\n      if (facet == null) continue;\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n        facetState.mcontext = new FacetMerger.Context( sreq.responses.size() );\n      }\n\n      if ((sreq.purpose & PURPOSE_REFINE_JSON_FACETS) != 0) {\n        // System.err.println(\"REFINE FACET RESULT FROM SHARD = \" + facet);\n        // call merge again with a diff flag set on the context???\n        facetState.mcontext.root = facet;\n        facetState.mcontext.setShard(shardRsp.getShard());  // TODO: roll newShard into setShard?\n        facetState.merger.merge(facet , facetState.mcontext);\n        return;\n      }\n\n      // System.err.println(\"MERGING FACET RESULT FROM SHARD = \" + facet);\n      facetState.mcontext.root = facet;\n      facetState.mcontext.newShard(shardRsp.getShard());\n      facetState.merger.merge(facet , facetState.mcontext);\n    }\n  }\n\n","bugFix":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      if (top == null) continue; // shards.tolerant=true will cause this to happen on exceptions/errors\n      Object facet = top.get(\"facets\");\n      if (facet == null) {\n        @SuppressWarnings(\"rawtypes\") SimpleOrderedMap shardResponseHeader = (SimpleOrderedMap) rsp.getResponse().get(\"responseHeader\");\n        if (Boolean.TRUE.equals(shardResponseHeader.getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY))) {\n          rb.rsp.getResponseHeader().asShallowMap().put(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY, Boolean.TRUE);\n        }\n        continue;\n      }\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n        facetState.mcontext = new FacetMerger.Context(sreq.responses.size());\n      }\n\n      if ((sreq.purpose & PURPOSE_REFINE_JSON_FACETS) != 0) {\n        // System.err.println(\"REFINE FACET RESULT FROM SHARD = \" + facet);\n        // call merge again with a diff flag set on the context???\n        facetState.mcontext.root = facet;\n        facetState.mcontext.setShard(shardRsp.getShard());  // TODO: roll newShard into setShard?\n        facetState.merger.merge(facet, facetState.mcontext);\n        return;\n      }\n\n      // System.err.println(\"MERGING FACET RESULT FROM SHARD = \" + facet);\n      facetState.mcontext.root = facet;\n      facetState.mcontext.newShard(shardRsp.getShard());\n      facetState.merger.merge(facet, facetState.mcontext);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    for (ShardResponse shardRsp : sreq.responses) {\n      SolrResponse rsp = shardRsp.getSolrResponse();\n      NamedList<Object> top = rsp.getResponse();\n      if (top == null) continue; // shards.tolerant=true will cause this to happen on exceptions/errors\n      Object facet = top.get(\"facets\");\n      if (facet == null) {\n        SimpleOrderedMap shardResponseHeader = (SimpleOrderedMap)rsp.getResponse().get(\"responseHeader\");\n        if(Boolean.TRUE.equals(shardResponseHeader.getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY))) {\n          rb.rsp.getResponseHeader().asShallowMap().put(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY, Boolean.TRUE);\n        }\n        continue;\n      }\n      if (facetState.merger == null) {\n        facetState.merger = facetState.facetRequest.createFacetMerger(facet);\n        facetState.mcontext = new FacetMerger.Context( sreq.responses.size() );\n      }\n\n      if ((sreq.purpose & PURPOSE_REFINE_JSON_FACETS) != 0) {\n        // System.err.println(\"REFINE FACET RESULT FROM SHARD = \" + facet);\n        // call merge again with a diff flag set on the context???\n        facetState.mcontext.root = facet;\n        facetState.mcontext.setShard(shardRsp.getShard());  // TODO: roll newShard into setShard?\n        facetState.merger.merge(facet , facetState.mcontext);\n        return;\n      }\n\n      // System.err.println(\"MERGING FACET RESULT FROM SHARD = \" + facet);\n      facetState.mcontext.root = facet;\n      facetState.mcontext.newShard(shardRsp.getShard());\n      facetState.merger.merge(facet , facetState.mcontext);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a3584d3db8b472772e3329d9d95d584b68ae997e":["15b321aed72eecb043f237c490b9afd4e52c25be"],"1931d98b40b01d5075753b197c2461a5c2652689":["bbe0e5f73e31966c742f7d203e432bb9eb72affc"],"8ec805ca8fedc0166461148c7182f1bcbbd18ee1":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"15b321aed72eecb043f237c490b9afd4e52c25be":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["8ec805ca8fedc0166461148c7182f1bcbbd18ee1","d6ca2e1fb422aea9c41a4c63e72d6108a37291c1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bbe0e5f73e31966c742f7d203e432bb9eb72affc","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"d6ca2e1fb422aea9c41a4c63e72d6108a37291c1":["8ec805ca8fedc0166461148c7182f1bcbbd18ee1"],"bbadd4a153af2e36785fa5c682db5321cec90789":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["a3584d3db8b472772e3329d9d95d584b68ae997e"],"11ab475c994c79138885cc8a30b2641d929cdc43":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["bbe0e5f73e31966c742f7d203e432bb9eb72affc","1931d98b40b01d5075753b197c2461a5c2652689"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["11ab475c994c79138885cc8a30b2641d929cdc43","d6ca2e1fb422aea9c41a4c63e72d6108a37291c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"bbe0e5f73e31966c742f7d203e432bb9eb72affc":["bbadd4a153af2e36785fa5c682db5321cec90789"]},"commit2Childs":{"a3584d3db8b472772e3329d9d95d584b68ae997e":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"1931d98b40b01d5075753b197c2461a5c2652689":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"8ec805ca8fedc0166461148c7182f1bcbbd18ee1":["28288370235ed02234a64753cdbf0c6ec096304a","d6ca2e1fb422aea9c41a4c63e72d6108a37291c1"],"15b321aed72eecb043f237c490b9afd4e52c25be":["a3584d3db8b472772e3329d9d95d584b68ae997e"],"28288370235ed02234a64753cdbf0c6ec096304a":["15b321aed72eecb043f237c490b9afd4e52c25be"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d6ca2e1fb422aea9c41a4c63e72d6108a37291c1":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"bbadd4a153af2e36785fa5c682db5321cec90789":["bbe0e5f73e31966c742f7d203e432bb9eb72affc"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11ab475c994c79138885cc8a30b2641d929cdc43":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["bbadd4a153af2e36785fa5c682db5321cec90789","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["8ec805ca8fedc0166461148c7182f1bcbbd18ee1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","11ab475c994c79138885cc8a30b2641d929cdc43"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"bbe0e5f73e31966c742f7d203e432bb9eb72affc":["1931d98b40b01d5075753b197c2461a5c2652689","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}