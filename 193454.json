{"path":"solr/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList streams = new ArrayList();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        InputStream is = content.getStream();\n        try {\n          stream.add( \"stream\", IOUtils.toString(is) );\n        } finally {\n          is.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList streams = new ArrayList();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        InputStream is = content.getStream();\n        try {\n          stream.add( \"stream\", IOUtils.toString(is) );\n        } finally {\n          is.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList streams = new ArrayList();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        InputStream is = content.getStream();\n        try {\n          stream.add( \"stream\", IOUtils.toString(is) );\n        } finally {\n          is.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList streams = new ArrayList();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        InputStream is = content.getStream();\n        try {\n          stream.add( \"stream\", IOUtils.toString(is) );\n        } finally {\n          is.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList streams = new ArrayList();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        InputStream is = content.getStream();\n        try {\n          stream.add( \"stream\", IOUtils.toString(is) );\n        } finally {\n          is.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5f7137bd9491c6596681b1f56e481e17964e581","date":1294458451,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<NamedList<Object>>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        InputStream is = content.getStream();\n        try {\n          stream.add( \"stream\", IOUtils.toString(is) );\n        } finally {\n          is.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList streams = new ArrayList();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        InputStream is = content.getStream();\n        try {\n          stream.add( \"stream\", IOUtils.toString(is) );\n        } finally {\n          is.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<NamedList<Object>>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        InputStream is = content.getStream();\n        try {\n          stream.add( \"stream\", IOUtils.toString(is) );\n        } finally {\n          is.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList streams = new ArrayList();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        InputStream is = content.getStream();\n        try {\n          stream.add( \"stream\", IOUtils.toString(is) );\n        } finally {\n          is.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"651a613a8df324c5f834b6c2b6fb5bb945431755","date":1296820909,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<NamedList<Object>>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<NamedList<Object>>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        InputStream is = content.getStream();\n        try {\n          stream.add( \"stream\", IOUtils.toString(is) );\n        } finally {\n          is.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<NamedList<Object>>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList streams = new ArrayList();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        InputStream is = content.getStream();\n        try {\n          stream.add( \"stream\", IOUtils.toString(is) );\n        } finally {\n          is.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<NamedList<Object>>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<NamedList<Object>>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        InputStream is = content.getStream();\n        try {\n          stream.add( \"stream\", IOUtils.toString(is) );\n        } finally {\n          is.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<NamedList<Object>>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<NamedList<Object>>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<NamedList<Object>>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<NamedList<Object>>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<NamedList<Object>>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<NamedList<Object>>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b5f7137bd9491c6596681b1f56e481e17964e581":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["651a613a8df324c5f834b6c2b6fb5bb945431755","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"651a613a8df324c5f834b6c2b6fb5bb945431755":["b5f7137bd9491c6596681b1f56e481e17964e581"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["651a613a8df324c5f834b6c2b6fb5bb945431755"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","651a613a8df324c5f834b6c2b6fb5bb945431755"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["651a613a8df324c5f834b6c2b6fb5bb945431755"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["1da8d55113b689b06716246649de6f62430f15c0","b5f7137bd9491c6596681b1f56e481e17964e581"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","651a613a8df324c5f834b6c2b6fb5bb945431755"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"b5f7137bd9491c6596681b1f56e481e17964e581":["651a613a8df324c5f834b6c2b6fb5bb945431755","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["b5f7137bd9491c6596681b1f56e481e17964e581","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"651a613a8df324c5f834b6c2b6fb5bb945431755":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}