{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","commits":[{"id":"d528fd7ae22865015b756e0a03832e2051de2a9c","date":1476721105,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String]).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(this, coreName, instancePath, parameters);\n\n    // TODO: There's a race here, isn't there?\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true, newCollection);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters) {\n\n    CoreDescriptor cd = new CoreDescriptor(this, coreName, instancePath, parameters);\n\n    // TODO: There's a race here, isn't there?\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(this, coreName, instancePath, parameters);\n\n    // TODO: There's a race here, isn't there?\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true, newCollection);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    if (getLoadedCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true, newCollection);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(this, coreName, instancePath, parameters);\n\n    // TODO: There's a race here, isn't there?\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true, newCollection);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    if (getLoadedCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true, newCollection);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(this, coreName, instancePath, parameters);\n\n    // TODO: There's a race here, isn't there?\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true, newCollection);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true, newCollection);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    if (getLoadedCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true, newCollection);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true, newCollection);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    if (getLoadedCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true, newCollection);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true, newCollection);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    if (getLoadedCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true, newCollection);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd7a2b4785d366164d3cd69f9948de6ff34d23a1","date":1500527874,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = createFromDescriptor(cd, true, newCollection);\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that \n      // failed to be created on-the-fly. \n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true, newCollection);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["004ec9e26487ae9b6205e790f8f77ef5e98d8daf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d301cb76d81de80d07b44735622a04d49ed938eb","date":1500536382,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = createFromDescriptor(cd, true, newCollection);\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that \n      // failed to be created on-the-fly. \n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true, newCollection);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = createFromDescriptor(cd, true, newCollection);\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that \n      // failed to be created on-the-fly. \n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true, newCollection);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = createFromDescriptor(cd, true, newCollection);\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that \n      // failed to be created on-the-fly. \n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        } catch (Exception e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = createFromDescriptor(cd, true, newCollection);\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that \n      // failed to be created on-the-fly. \n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = createFromDescriptor(cd, true, newCollection);\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that \n      // failed to be created on-the-fly. \n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = createFromDescriptor(cd, true, newCollection);\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that \n      // failed to be created on-the-fly. \n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        } catch (Exception e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"004ec9e26487ae9b6205e790f8f77ef5e98d8daf","date":1506366751,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = null;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        core = createFromDescriptor(cd, true, newCollection);\n      } finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that \n      // failed to be created on-the-fly. \n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = createFromDescriptor(cd, true, newCollection);\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that \n      // failed to be created on-the-fly. \n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","bugFix":["bd7a2b4785d366164d3cd69f9948de6ff34d23a1","11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9efa9c0fcd87863d1a86eed29d4304c11bc7d50a","date":1506410441,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = null;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        core = createFromDescriptor(cd, true, newCollection);\n      } finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that \n      // failed to be created on-the-fly. \n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = createFromDescriptor(cd, true, newCollection);\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that \n      // failed to be created on-the-fly. \n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = null;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        core = createFromDescriptor(cd, true, newCollection);\n      } finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that \n      // failed to be created on-the-fly. \n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = createFromDescriptor(cd, true, newCollection);\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that \n      // failed to be created on-the-fly. \n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = null;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        core = createFromDescriptor(cd, true, newCollection);\n      } finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that \n      // failed to be created on-the-fly. \n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        } catch (Exception e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = null;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        core = createFromDescriptor(cd, true, newCollection);\n      } finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that \n      // failed to be created on-the-fly. \n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b775be0d772d22dbbfd73b9989b5f0b4e7ef5506","date":1509763417,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = null;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        core = createFromDescriptor(cd, true, newCollection);\n        coresLocator.persist(this, cd); // Write out the current core properties in case anything changed when the core was created\n      } finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that \n      // failed to be created on-the-fly. \n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        } catch (Exception e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = null;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        core = createFromDescriptor(cd, true, newCollection);\n      } finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that \n      // failed to be created on-the-fly. \n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        } catch (Exception e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = null;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        core = createFromDescriptor(cd, true, newCollection);\n        coresLocator.persist(this, cd); // Write out the current core properties in case anything changed when the core was created\n      } finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that \n      // failed to be created on-the-fly. \n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        } catch (Exception e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = null;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        core = createFromDescriptor(cd, true, newCollection);\n      } finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that \n      // failed to be created on-the-fly. \n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        } catch (Exception e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = null;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        core = createFromDescriptor(cd, true, newCollection);\n        coresLocator.persist(this, cd); // Write out the current core properties in case anything changed when the core was created\n      } finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that\n      // failed to be created on-the-fly.\n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        } catch (Exception e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = null;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        core = createFromDescriptor(cd, true, newCollection);\n        coresLocator.persist(this, cd); // Write out the current core properties in case anything changed when the core was created\n      } finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that \n      // failed to be created on-the-fly. \n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        } catch (Exception e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   *\n   * @param coreName     the core name\n   * @param instancePath the instance directory\n   * @param parameters   the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = null;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        core = createFromDescriptor(cd, true, newCollection);\n        coresLocator.persist(this, cd); // Write out the current core properties in case anything changed when the core was created\n      } finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that\n      // failed to be created on-the-fly.\n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        } catch (Exception e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = null;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        core = createFromDescriptor(cd, true, newCollection);\n        coresLocator.persist(this, cd); // Write out the current core properties in case anything changed when the core was created\n      } finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that\n      // failed to be created on-the-fly.\n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        } catch (Exception e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e4fb176991e13ab85dfe62dceeb287dde115745","date":1579630717,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   *\n   * @param coreName     the core name\n   * @param instancePath the instance directory\n   * @param parameters   the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), getZkController());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = null;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        core = createFromDescriptor(cd, true, newCollection);\n        coresLocator.persist(this, cd); // Write out the current core properties in case anything changed when the core was created\n      } finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that\n      // failed to be created on-the-fly.\n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        } catch (Exception e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   *\n   * @param coreName     the core name\n   * @param instancePath the instance directory\n   * @param parameters   the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), isZooKeeperAware());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = null;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        core = createFromDescriptor(cd, true, newCollection);\n        coresLocator.persist(this, cd); // Write out the current core properties in case anything changed when the core was created\n      } finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that\n      // failed to be created on-the-fly.\n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        } catch (Exception e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   *\n   * @param coreName     the core name\n   * @param instancePath the instance directory\n   * @param parameters   the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), getZkController());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"coreNodeName missing \" + parameters.toString());\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = null;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        core = createFromDescriptor(cd, true, newCollection);\n        coresLocator.persist(this, cd); // Write out the current core properties in case anything changed when the core was created\n      } finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that\n      // failed to be created on-the-fly.\n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        } catch (Exception e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   *\n   * @param coreName     the core name\n   * @param instancePath the instance directory\n   * @param parameters   the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), getZkController());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = null;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        core = createFromDescriptor(cd, true, newCollection);\n        coresLocator.persist(this, cd); // Write out the current core properties in case anything changed when the core was created\n      } finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that\n      // failed to be created on-the-fly.\n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        } catch (Exception e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","bugFix":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","115923bc88e5b1dc4bef049b1ded8486723052ed"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373","date":1592489632,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   *\n   * @param coreName     the core name\n   * @param instancePath the instance directory\n   * @param parameters   the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), getZkController());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    // Validate paths are relative to known locations to avoid path traversal\n    assertPathAllowed(cd.getInstanceDir());\n    assertPathAllowed(Paths.get(cd.getDataDir()));\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"coreNodeName missing \" + parameters.toString());\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = null;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        core = createFromDescriptor(cd, true, newCollection);\n        coresLocator.persist(this, cd); // Write out the current core properties in case anything changed when the core was created\n      } finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that\n      // failed to be created on-the-fly.\n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        } catch (Exception e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   *\n   * @param coreName     the core name\n   * @param instancePath the instance directory\n   * @param parameters   the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(coreName, instancePath, parameters, getContainerProperties(), getZkController());\n\n    // TODO: There's a race here, isn't there?\n    // Since the core descriptor is removed when a core is unloaded, it should never be anywhere when a core is created.\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"coreNodeName missing \" + parameters.toString());\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      // Much of the logic in core handling pre-supposes that the core.properties file already exists, so create it\n      // first and clean it up if there's an error.\n      coresLocator.create(this, cd);\n\n      SolrCore core = null;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        core = createFromDescriptor(cd, true, newCollection);\n        coresLocator.persist(this, cd); // Write out the current core properties in case anything changed when the core was created\n      } finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n\n      return core;\n    } catch (Exception ex) {\n      // First clean up any core descriptor, there should never be an existing core.properties file for any core that\n      // failed to be created on-the-fly.\n      coresLocator.delete(this, cd);\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        } catch (Exception e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["d528fd7ae22865015b756e0a03832e2051de2a9c"],"9efa9c0fcd87863d1a86eed29d4304c11bc7d50a":["d301cb76d81de80d07b44735622a04d49ed938eb","004ec9e26487ae9b6205e790f8f77ef5e98d8daf"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","b775be0d772d22dbbfd73b9989b5f0b4e7ef5506"],"3e4fb176991e13ab85dfe62dceeb287dde115745":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["b627755385655c7cd3fb296f17593658805cf4d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bd7a2b4785d366164d3cd69f9948de6ff34d23a1":["28288370235ed02234a64753cdbf0c6ec096304a"],"004ec9e26487ae9b6205e790f8f77ef5e98d8daf":["d301cb76d81de80d07b44735622a04d49ed938eb"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["3e4fb176991e13ab85dfe62dceeb287dde115745"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["9efa9c0fcd87863d1a86eed29d4304c11bc7d50a"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["30c8e5574b55d57947e989443dfde611646530ee","d301cb76d81de80d07b44735622a04d49ed938eb"],"30c8e5574b55d57947e989443dfde611646530ee":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","28288370235ed02234a64753cdbf0c6ec096304a"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"d528fd7ae22865015b756e0a03832e2051de2a9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b775be0d772d22dbbfd73b9989b5f0b4e7ef5506":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["d528fd7ae22865015b756e0a03832e2051de2a9c"],"28288370235ed02234a64753cdbf0c6ec096304a":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d528fd7ae22865015b756e0a03832e2051de2a9c"],"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"d301cb76d81de80d07b44735622a04d49ed938eb":["28288370235ed02234a64753cdbf0c6ec096304a","bd7a2b4785d366164d3cd69f9948de6ff34d23a1"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["b869898f50ca80263bac2e3ae0949f7700e5c977","9efa9c0fcd87863d1a86eed29d4304c11bc7d50a"],"b627755385655c7cd3fb296f17593658805cf4d5":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c75c0fad5a9b6633e919ce2e9f96e1f0c496d373"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["30c8e5574b55d57947e989443dfde611646530ee"],"9efa9c0fcd87863d1a86eed29d4304c11bc7d50a":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","6240b74b884c5587f2a4062dd27d6c32bf228889"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["b627755385655c7cd3fb296f17593658805cf4d5"],"3e4fb176991e13ab85dfe62dceeb287dde115745":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["3e4fb176991e13ab85dfe62dceeb287dde115745"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d528fd7ae22865015b756e0a03832e2051de2a9c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bd7a2b4785d366164d3cd69f9948de6ff34d23a1":["d301cb76d81de80d07b44735622a04d49ed938eb"],"004ec9e26487ae9b6205e790f8f77ef5e98d8daf":["9efa9c0fcd87863d1a86eed29d4304c11bc7d50a"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["c75c0fad5a9b6633e919ce2e9f96e1f0c496d373"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","b775be0d772d22dbbfd73b9989b5f0b4e7ef5506"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"d528fd7ae22865015b756e0a03832e2051de2a9c":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b775be0d772d22dbbfd73b9989b5f0b4e7ef5506":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"28288370235ed02234a64753cdbf0c6ec096304a":["bd7a2b4785d366164d3cd69f9948de6ff34d23a1","30c8e5574b55d57947e989443dfde611646530ee","d301cb76d81de80d07b44735622a04d49ed938eb"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","28288370235ed02234a64753cdbf0c6ec096304a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d301cb76d81de80d07b44735622a04d49ed938eb":["9efa9c0fcd87863d1a86eed29d4304c11bc7d50a","004ec9e26487ae9b6205e790f8f77ef5e98d8daf","936cdd5882761db3b844afd6f84ab81cbb011a75"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"b627755385655c7cd3fb296f17593658805cf4d5":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}