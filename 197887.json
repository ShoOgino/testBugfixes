{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange].Calc#getValue(String).mjava","commits":[{"id":"330e80d31a51e837b9cc906035e114377c0501dc","date":1429994103,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange].Calc#getValue(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange].RangeEndpointCalculator#getValue(String).mjava","sourceNew":"    /**\n     * Parses a String param into an Range endpoint value throwing\n     * an exception if not possible\n     */\n    public final Comparable getValue(final String rawval) {\n      try {\n        return parseStr(rawval);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Can't parse value \"+rawval+\" for field: \" +\n                field.getName(), e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Parses a String param into an Range endpoint value throwing\n     * a useful exception if not possible\n     */\n    public final T getValue(final String rawval) {\n      try {\n        return parseVal(rawval);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Can't parse value \"+rawval+\" for field: \" +\n                field.getName(), e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd0759e8803a09424422a329163d5900f6b10c42","date":1431227616,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange].Calc#getValue(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange].Calc#getValue(String).mjava","sourceNew":"    /**\n     * Parses a String param into a value throwing\n     * an exception if not possible\n     */\n    public final Comparable getValue(final String rawval) {\n      try {\n        return parseStr(rawval);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Can't parse value \"+rawval+\" for field: \" +\n                field.getName(), e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Parses a String param into an Range endpoint value throwing\n     * an exception if not possible\n     */\n    public final Comparable getValue(final String rawval) {\n      try {\n        return parseStr(rawval);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Can't parse value \"+rawval+\" for field: \" +\n                field.getName(), e);\n      }\n    }\n\n","bugFix":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor.Calc#getValue(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange].Calc#getValue(String).mjava","sourceNew":"    /**\n     * Parses a String param into a value throwing\n     * an exception if not possible\n     */\n    @SuppressWarnings({\"rawtypes\"})\n    public final Comparable getValue(final String rawval) {\n      try {\n        return parseStr(rawval);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Can't parse value \"+rawval+\" for field: \" +\n                field.getName(), e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Parses a String param into a value throwing\n     * an exception if not possible\n     */\n    public final Comparable getValue(final String rawval) {\n      try {\n        return parseStr(rawval);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Can't parse value \"+rawval+\" for field: \" +\n                field.getName(), e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"330e80d31a51e837b9cc906035e114377c0501dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["dd0759e8803a09424422a329163d5900f6b10c42"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd0759e8803a09424422a329163d5900f6b10c42":["330e80d31a51e837b9cc906035e114377c0501dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"330e80d31a51e837b9cc906035e114377c0501dc":["dd0759e8803a09424422a329163d5900f6b10c42"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["330e80d31a51e837b9cc906035e114377c0501dc"],"dd0759e8803a09424422a329163d5900f6b10c42":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}