{"path":"solr/core/src/java/org/apache/solr/request/IntervalFacets#accumIntervalWithMultipleValues(SortedNumericDocValues).mjava","commits":[{"id":"744b111b17d15d490a648eb021bfa240e7f11556","date":1487008069,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets#accumIntervalWithMultipleValues(SortedNumericDocValues).mjava","pathOld":"/dev/null","sourceNew":"  private void accumIntervalWithMultipleValues(SortedNumericDocValues longs) throws IOException {\n    // longs should be already positioned to the correct doc\n    assert longs.docID() != -1;\n    assert longs.docValueCount() > 0: \"Should have at least one value for this document\";\n    int currentInterval = 0;\n    for (int i = 0; i < longs.docValueCount(); i++) {\n      boolean evaluateNextInterval = true;\n      long value = longs.nextValue();\n      while (evaluateNextInterval && currentInterval < intervals.length) {\n        IntervalCompareResult result = intervals[currentInterval].includes(value);\n        switch (result) {\n          case INCLUDED:\n            /*\n             * Increment the current interval and move to the next one using\n             * the same value\n             */\n            intervals[currentInterval].incCount();\n            currentInterval++;\n            break;\n          case LOWER_THAN_START:\n            /*\n             * None of the next intervals will match this value (all of them have \n             * higher start value). Move to the next value for this document. \n             */\n            evaluateNextInterval = false;\n            break;\n          case GREATER_THAN_END:\n            /*\n             * Next interval may match this value\n             */\n            currentInterval++;\n            break;\n        }\n        //Maybe return if currentInterval == intervals.length?\n      }\n     }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets#accumIntervalWithMultipleValues(SortedNumericDocValues).mjava","pathOld":"/dev/null","sourceNew":"  private void accumIntervalWithMultipleValues(SortedNumericDocValues longs) throws IOException {\n    // longs should be already positioned to the correct doc\n    assert longs.docID() != -1;\n    assert longs.docValueCount() > 0: \"Should have at least one value for this document\";\n    int currentInterval = 0;\n    for (int i = 0; i < longs.docValueCount(); i++) {\n      boolean evaluateNextInterval = true;\n      long value = longs.nextValue();\n      while (evaluateNextInterval && currentInterval < intervals.length) {\n        IntervalCompareResult result = intervals[currentInterval].includes(value);\n        switch (result) {\n          case INCLUDED:\n            /*\n             * Increment the current interval and move to the next one using\n             * the same value\n             */\n            intervals[currentInterval].incCount();\n            currentInterval++;\n            break;\n          case LOWER_THAN_START:\n            /*\n             * None of the next intervals will match this value (all of them have \n             * higher start value). Move to the next value for this document. \n             */\n            evaluateNextInterval = false;\n            break;\n          case GREATER_THAN_END:\n            /*\n             * Next interval may match this value\n             */\n            currentInterval++;\n            break;\n        }\n        //Maybe return if currentInterval == intervals.length?\n      }\n     }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/request/IntervalFacets#accumIntervalWithMultipleValues(SortedNumericDocValues).mjava","sourceNew":null,"sourceOld":"  private void accumIntervalWithMultipleValues(SortedNumericDocValues longs) throws IOException {\n    // longs should be already positioned to the correct doc\n    assert longs.docID() != -1;\n    assert longs.docValueCount() > 0: \"Should have at least one value for this document\";\n    int currentInterval = 0;\n    for (int i = 0; i < longs.docValueCount(); i++) {\n      boolean evaluateNextInterval = true;\n      long value = longs.nextValue();\n      while (evaluateNextInterval && currentInterval < intervals.length) {\n        IntervalCompareResult result = intervals[currentInterval].includes(value);\n        switch (result) {\n          case INCLUDED:\n            /*\n             * Increment the current interval and move to the next one using\n             * the same value\n             */\n            intervals[currentInterval].incCount();\n            currentInterval++;\n            break;\n          case LOWER_THAN_START:\n            /*\n             * None of the next intervals will match this value (all of them have \n             * higher start value). Move to the next value for this document. \n             */\n            evaluateNextInterval = false;\n            break;\n          case GREATER_THAN_END:\n            /*\n             * Next interval may match this value\n             */\n            currentInterval++;\n            break;\n        }\n        //Maybe return if currentInterval == intervals.length?\n      }\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets#accumIntervalWithMultipleValues(SortedNumericDocValues).mjava","pathOld":"/dev/null","sourceNew":"  private void accumIntervalWithMultipleValues(SortedNumericDocValues longs) throws IOException {\n    // longs should be already positioned to the correct doc\n    assert longs.docID() != -1;\n    assert longs.docValueCount() > 0: \"Should have at least one value for this document\";\n    int currentInterval = 0;\n    for (int i = 0; i < longs.docValueCount(); i++) {\n      boolean evaluateNextInterval = true;\n      long value = longs.nextValue();\n      while (evaluateNextInterval && currentInterval < intervals.length) {\n        IntervalCompareResult result = intervals[currentInterval].includes(value);\n        switch (result) {\n          case INCLUDED:\n            /*\n             * Increment the current interval and move to the next one using\n             * the same value\n             */\n            intervals[currentInterval].incCount();\n            currentInterval++;\n            break;\n          case LOWER_THAN_START:\n            /*\n             * None of the next intervals will match this value (all of them have \n             * higher start value). Move to the next value for this document. \n             */\n            evaluateNextInterval = false;\n            break;\n          case GREATER_THAN_END:\n            /*\n             * Next interval may match this value\n             */\n            currentInterval++;\n            break;\n        }\n        //Maybe return if currentInterval == intervals.length?\n      }\n     }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95904004e26fe5b84dcda2fa112ebf7cc9721a60","date":1560149781,"type":3,"author":"Tim Underwood","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets#accumIntervalWithMultipleValues(SortedNumericDocValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/IntervalFacets#accumIntervalWithMultipleValues(SortedNumericDocValues).mjava","sourceNew":"  private void accumIntervalWithMultipleValues(SortedNumericDocValues longs) throws IOException {\n    // longs should be already positioned to the correct doc\n    assert longs.docID() != -1;\n    final int docValueCount = longs.docValueCount();\n    assert docValueCount > 0: \"Should have at least one value for this document\";\n    int currentInterval = 0;\n    for (int i = 0; i < docValueCount; i++) {\n      boolean evaluateNextInterval = true;\n      long value = longs.nextValue();\n      while (evaluateNextInterval && currentInterval < intervals.length) {\n        IntervalCompareResult result = intervals[currentInterval].includes(value);\n        switch (result) {\n          case INCLUDED:\n            /*\n             * Increment the current interval and move to the next one using\n             * the same value\n             */\n            intervals[currentInterval].incCount();\n            currentInterval++;\n            break;\n          case LOWER_THAN_START:\n            /*\n             * None of the next intervals will match this value (all of them have \n             * higher start value). Move to the next value for this document. \n             */\n            evaluateNextInterval = false;\n            break;\n          case GREATER_THAN_END:\n            /*\n             * Next interval may match this value\n             */\n            currentInterval++;\n            break;\n        }\n        //Maybe return if currentInterval == intervals.length?\n      }\n     }\n  }\n\n","sourceOld":"  private void accumIntervalWithMultipleValues(SortedNumericDocValues longs) throws IOException {\n    // longs should be already positioned to the correct doc\n    assert longs.docID() != -1;\n    assert longs.docValueCount() > 0: \"Should have at least one value for this document\";\n    int currentInterval = 0;\n    for (int i = 0; i < longs.docValueCount(); i++) {\n      boolean evaluateNextInterval = true;\n      long value = longs.nextValue();\n      while (evaluateNextInterval && currentInterval < intervals.length) {\n        IntervalCompareResult result = intervals[currentInterval].includes(value);\n        switch (result) {\n          case INCLUDED:\n            /*\n             * Increment the current interval and move to the next one using\n             * the same value\n             */\n            intervals[currentInterval].incCount();\n            currentInterval++;\n            break;\n          case LOWER_THAN_START:\n            /*\n             * None of the next intervals will match this value (all of them have \n             * higher start value). Move to the next value for this document. \n             */\n            evaluateNextInterval = false;\n            break;\n          case GREATER_THAN_END:\n            /*\n             * Next interval may match this value\n             */\n            currentInterval++;\n            break;\n        }\n        //Maybe return if currentInterval == intervals.length?\n      }\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"022a4de90e0479b604264ca9c2e134c996454ab3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","744b111b17d15d490a648eb021bfa240e7f11556"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"95904004e26fe5b84dcda2fa112ebf7cc9721a60":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"744b111b17d15d490a648eb021bfa240e7f11556":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["95904004e26fe5b84dcda2fa112ebf7cc9721a60"]},"commit2Childs":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["95904004e26fe5b84dcda2fa112ebf7cc9721a60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["022a4de90e0479b604264ca9c2e134c996454ab3","744b111b17d15d490a648eb021bfa240e7f11556"],"95904004e26fe5b84dcda2fa112ebf7cc9721a60":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"744b111b17d15d490a648eb021bfa240e7f11556":["022a4de90e0479b604264ca9c2e134c996454ab3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}