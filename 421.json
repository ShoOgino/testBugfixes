{"path":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#getObjectByPath(Map,boolean,List[String]).mjava","commits":[{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#getObjectByPath(Map,boolean,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      String s = hierarchy.get(i);\n      if(i < hierarchy.size()-1){\n        obj = (Map) obj.get(s);\n        if(obj == null) return null;\n      } else {\n        Object val = obj.get(s);\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"432e578be72da02cfde62dcc7fb4fa8620bc85fd","date":1420557072,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#getObjectByPath(Map,boolean,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#getObjectByPath(Map,boolean,List[String]).mjava","sourceNew":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      String s = hierarchy.get(i);\n      if(i < hierarchy.size()-1){\n        if (!(obj.get(s) instanceof Map)) return null;\n        obj = (Map) obj.get(s);\n        if(obj == null) return null;\n      } else {\n        Object val = obj.get(s);\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      String s = hierarchy.get(i);\n      if(i < hierarchy.size()-1){\n        obj = (Map) obj.get(s);\n        if(obj == null) return null;\n      } else {\n        Object val = obj.get(s);\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae2f5be890d26585d438eba0b9cc7d3c0a9775be","date":1427387954,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#getObjectByPath(Map,boolean,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#getObjectByPath(Map,boolean,List[String]).mjava","sourceNew":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      String s = hierarchy.get(i);\n      if (i < hierarchy.size() - 1) {\n        if (!(obj.get(s) instanceof Map)) return null;\n        obj = (Map) obj.get(s);\n        if (obj == null) return null;\n      } else {\n        Object val = obj.get(s);\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      String s = hierarchy.get(i);\n      if(i < hierarchy.size()-1){\n        if (!(obj.get(s) instanceof Map)) return null;\n        obj = (Map) obj.get(s);\n        if(obj == null) return null;\n      } else {\n        Object val = obj.get(s);\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#getObjectByPath(Map,boolean,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#getObjectByPath(Map,boolean,List[String]).mjava","sourceNew":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      String s = hierarchy.get(i);\n      if (i < hierarchy.size() - 1) {\n        if (!(obj.get(s) instanceof Map)) return null;\n        obj = (Map) obj.get(s);\n        if (obj == null) return null;\n      } else {\n        Object val = obj.get(s);\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      String s = hierarchy.get(i);\n      if(i < hierarchy.size()-1){\n        if (!(obj.get(s) instanceof Map)) return null;\n        obj = (Map) obj.get(s);\n        if(obj == null) return null;\n      } else {\n        Object val = obj.get(s);\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#getObjectByPath(Map,boolean,List[String]).mjava","sourceNew":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      String s = hierarchy.get(i);\n      if (i < hierarchy.size() - 1) {\n        if (!(obj.get(s) instanceof Map)) return null;\n        obj = (Map) obj.get(s);\n        if (obj == null) return null;\n      } else {\n        Object val = obj.get(s);\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      String s = hierarchy.get(i);\n      if (i < hierarchy.size() - 1) {\n        if (!(obj.get(s) instanceof Map)) return null;\n        obj = (Map) obj.get(s);\n        if (obj == null) return null;\n      } else {\n        Object val = obj.get(s);\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["432e578be72da02cfde62dcc7fb4fa8620bc85fd","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"432e578be72da02cfde62dcc7fb4fa8620bc85fd":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["432e578be72da02cfde62dcc7fb4fa8620bc85fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b693a83132c9e45afcd564fd65a25b60ed80388b"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"531fe719c7218235a679452eb3d137bfd8fc6af1":["432e578be72da02cfde62dcc7fb4fa8620bc85fd"],"432e578be72da02cfde62dcc7fb4fa8620bc85fd":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b693a83132c9e45afcd564fd65a25b60ed80388b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}