{"path":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","commits":[{"id":"818d704eaaf0fba0561d0d2752832e1015053482","date":1327419676,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","pathOld":"/dev/null","sourceNew":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.commitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 1 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(1000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(1000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","pathOld":"/dev/null","sourceNew":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.commitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 1 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(1000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(1000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","pathOld":"/dev/null","sourceNew":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.commitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 1 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(1000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(1000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad31de9d3b830bc174d4c41df9f80f4cac82576","date":1328107867,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","sourceNew":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 1 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(1000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(1000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.commitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 1 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(1000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(1000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","sourceNew":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 1 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(1000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(1000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 1 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(1000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(1000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","sourceNew":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 1 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(1000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(1000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 1 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(1000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(1000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","sourceNew":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 1 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(1000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(1000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 1 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(1000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(1000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"322e2184986b71f21c079e090f7b06b130b3ed13","date":1355345606,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","sourceNew":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 1 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(1000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 1 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(1000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(1000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf364535f3e1dcc03f651d8ec842672c0b2be07","date":1355427809,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","sourceNew":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 1 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(2000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 1 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(1000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","sourceNew":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 1 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(2000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 1 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(1000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(1000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"039186fd2452232060d10c35a255715d6147dd91","date":1359732548,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","sourceNew":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 2 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(2000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 1 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(2000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c47e57a9659cee31304e7b75b71b252d2f33b6f9","date":1359743123,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","sourceNew":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 2 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(2000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 1 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(2000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1950bf4027683bb40777f4c32f5d0d4db31eb1a","date":1379014112,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","sourceNew":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 4 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(4000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 2 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(2000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","sourceNew":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 4 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(4000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"2000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 4 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(4000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02d6c14a1126ed2a641e4de1b0008414004f653b","date":1474882270,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","sourceNew":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 4 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(4000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    trigger.pause();\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"2000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    trigger.unpause();\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 4 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(4000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"2000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","sourceNew":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 4 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(4000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    trigger.pause();\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"2000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    trigger.unpause();\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 4 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(4000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"2000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","sourceNew":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 4 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(4000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    trigger.pause();\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"2000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    trigger.unpause();\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 4 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(4000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"2000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff7024b6ebcfb64924eed7543a71a1cbd1e7466c","date":1508275071,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testCommitWithin().mjava","sourceNew":null,"sourceOld":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.softCommitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 4 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(4000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    trigger.pause();\n    req.setContentStreams( toContentStreams(\n      delI(\"529\", \"commitWithin\", \"2000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    trigger.unpause();\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["d9405f486872f1e416304dfe389741f4ee2f8a4d","fcf364535f3e1dcc03f651d8ec842672c0b2be07"],"039186fd2452232060d10c35a255715d6147dd91":["fcf364535f3e1dcc03f651d8ec842672c0b2be07"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","818d704eaaf0fba0561d0d2752832e1015053482"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["042e4d934397657ba04c82b46cc5665076bc5c58"],"818d704eaaf0fba0561d0d2752832e1015053482":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"02d6c14a1126ed2a641e4de1b0008414004f653b":["859081acf00749f5dd462772c571d611d4a4d2db"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["859081acf00749f5dd462772c571d611d4a4d2db","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"859081acf00749f5dd462772c571d611d4a4d2db":["f1950bf4027683bb40777f4c32f5d0d4db31eb1a"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","818d704eaaf0fba0561d0d2752832e1015053482"],"042e4d934397657ba04c82b46cc5665076bc5c58":["0ad31de9d3b830bc174d4c41df9f80f4cac82576"],"0ad31de9d3b830bc174d4c41df9f80f4cac82576":["818d704eaaf0fba0561d0d2752832e1015053482"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["859081acf00749f5dd462772c571d611d4a4d2db","02d6c14a1126ed2a641e4de1b0008414004f653b"],"c47e57a9659cee31304e7b75b71b252d2f33b6f9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","039186fd2452232060d10c35a255715d6147dd91"],"ff7024b6ebcfb64924eed7543a71a1cbd1e7466c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f1950bf4027683bb40777f4c32f5d0d4db31eb1a":["039186fd2452232060d10c35a255715d6147dd91"],"322e2184986b71f21c079e090f7b06b130b3ed13":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"f2126b84bd093fa3d921582a109a0ee578c28126":["042e4d934397657ba04c82b46cc5665076bc5c58","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"fcf364535f3e1dcc03f651d8ec842672c0b2be07":["322e2184986b71f21c079e090f7b06b130b3ed13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff7024b6ebcfb64924eed7543a71a1cbd1e7466c"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c47e57a9659cee31304e7b75b71b252d2f33b6f9"],"039186fd2452232060d10c35a255715d6147dd91":["c47e57a9659cee31304e7b75b71b252d2f33b6f9","f1950bf4027683bb40777f4c32f5d0d4db31eb1a"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","322e2184986b71f21c079e090f7b06b130b3ed13","f2126b84bd093fa3d921582a109a0ee578c28126"],"818d704eaaf0fba0561d0d2752832e1015053482":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","0ad31de9d3b830bc174d4c41df9f80f4cac82576"],"02d6c14a1126ed2a641e4de1b0008414004f653b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"859081acf00749f5dd462772c571d611d4a4d2db":["02d6c14a1126ed2a641e4de1b0008414004f653b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"042e4d934397657ba04c82b46cc5665076bc5c58":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","818d704eaaf0fba0561d0d2752832e1015053482","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ff7024b6ebcfb64924eed7543a71a1cbd1e7466c"],"0ad31de9d3b830bc174d4c41df9f80f4cac82576":["042e4d934397657ba04c82b46cc5665076bc5c58"],"c47e57a9659cee31304e7b75b71b252d2f33b6f9":[],"ff7024b6ebcfb64924eed7543a71a1cbd1e7466c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f1950bf4027683bb40777f4c32f5d0d4db31eb1a":["859081acf00749f5dd462772c571d611d4a4d2db"],"322e2184986b71f21c079e090f7b06b130b3ed13":["fcf364535f3e1dcc03f651d8ec842672c0b2be07"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"fcf364535f3e1dcc03f651d8ec842672c0b2be07":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","039186fd2452232060d10c35a255715d6147dd91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0d22ac6a4146774c1bc8400160fc0b6150294e92","c47e57a9659cee31304e7b75b71b252d2f33b6f9","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}