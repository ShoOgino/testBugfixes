{"path":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testAllPermissionDeniesActionsWhenUserIsNotCorrectRole().mjava","commits":[{"id":"3c3d917afd3dc4e90156e2d8720b5d468e2c5af4","date":1553913192,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testAllPermissionDeniesActionsWhenUserIsNotCorrectRole().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * RuleBasedAuthorizationPlugin handles requests differently based on whether the underlying handler implements\n   * PermissionNameProvider or not.  If this test fails because UpdateRequestHandler stops implementing\n   * PermissionNameProvider, or PropertiesRequestHandler starts to, then just change the handlers used here.\n   */\n  @Test\n  public void testAllPermissionDeniesActionsWhenUserIsNotCorrectRole() {\n    SolrRequestHandler handler = new UpdateRequestHandler();\n    assertThat(handler, new IsInstanceOf(PermissionNameProvider.class));\n    checkRules(makeMap(\"resource\", \"/update\",\n        \"userPrincipal\", \"dev\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new UpdateRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL2\")))\n        , FORBIDDEN, (Map<String, Object>) Utils.fromJSONString( \"{\" +\n            \"    user-role:{\" +\n            \"      dev:[dev_role],\" +\n            \"      admin:[admin_role]},\" +\n            \"    permissions:[\" +\n            \"      {name:all, role:'admin_role'}\" +\n            \"]}\"));\n\n    handler = new PropertiesRequestHandler();\n    assertThat(handler, new IsNot<>(new IsInstanceOf(PermissionNameProvider.class)));\n    checkRules(makeMap(\"resource\", \"/admin/info/properties\",\n        \"userPrincipal\", \"dev\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", handler,\n        \"params\", new MapSolrParams(emptyMap()))\n        , FORBIDDEN, (Map<String, Object>) Utils.fromJSONString( \"{\" +\n            \"    user-role:{\" +\n            \"      dev:[dev_role],\" +\n            \"      admin:[admin_role]},\" +\n            \"    permissions:[\" +\n            \"      {name:all, role:'admin_role'}\" +\n            \"]}\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8076096f334b0665d0a69a63ee98ac09baad402b","date":1589405373,"type":5,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BaseTestRuleBasedAuthorizationPlugin#testAllPermissionDeniesActionsWhenUserIsNotCorrectRole().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testAllPermissionDeniesActionsWhenUserIsNotCorrectRole().mjava","sourceNew":"  /*\n   * RuleBasedAuthorizationPlugin handles requests differently based on whether the underlying handler implements\n   * PermissionNameProvider or not.  If this test fails because UpdateRequestHandler stops implementing\n   * PermissionNameProvider, or PropertiesRequestHandler starts to, then just change the handlers used here.\n   */\n  @Test\n  public void testAllPermissionDeniesActionsWhenUserIsNotCorrectRole() {\n    SolrRequestHandler handler = new UpdateRequestHandler();\n    assertThat(handler, new IsInstanceOf(PermissionNameProvider.class));\n    setUserRole(\"dev\", \"dev\");\n    setUserRole(\"admin\", \"admin\");\n    addPermission(\"all\", \"admin\");\n    checkRules(makeMap(\"resource\", \"/update\",\n        \"userPrincipal\", \"dev\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new UpdateRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL2\")))\n        , FORBIDDEN);\n\n    handler = new PropertiesRequestHandler();\n    assertThat(handler, new IsNot<>(new IsInstanceOf(PermissionNameProvider.class)));\n    checkRules(makeMap(\"resource\", \"/admin/info/properties\",\n        \"userPrincipal\", \"dev\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", handler,\n        \"params\", new MapSolrParams(emptyMap()))\n        , FORBIDDEN);\n  }\n\n","sourceOld":"  /*\n   * RuleBasedAuthorizationPlugin handles requests differently based on whether the underlying handler implements\n   * PermissionNameProvider or not.  If this test fails because UpdateRequestHandler stops implementing\n   * PermissionNameProvider, or PropertiesRequestHandler starts to, then just change the handlers used here.\n   */\n  @Test\n  public void testAllPermissionDeniesActionsWhenUserIsNotCorrectRole() {\n    SolrRequestHandler handler = new UpdateRequestHandler();\n    assertThat(handler, new IsInstanceOf(PermissionNameProvider.class));\n    checkRules(makeMap(\"resource\", \"/update\",\n        \"userPrincipal\", \"dev\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new UpdateRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL2\")))\n        , FORBIDDEN, (Map<String, Object>) Utils.fromJSONString( \"{\" +\n            \"    user-role:{\" +\n            \"      dev:[dev_role],\" +\n            \"      admin:[admin_role]},\" +\n            \"    permissions:[\" +\n            \"      {name:all, role:'admin_role'}\" +\n            \"]}\"));\n\n    handler = new PropertiesRequestHandler();\n    assertThat(handler, new IsNot<>(new IsInstanceOf(PermissionNameProvider.class)));\n    checkRules(makeMap(\"resource\", \"/admin/info/properties\",\n        \"userPrincipal\", \"dev\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", handler,\n        \"params\", new MapSolrParams(emptyMap()))\n        , FORBIDDEN, (Map<String, Object>) Utils.fromJSONString( \"{\" +\n            \"    user-role:{\" +\n            \"      dev:[dev_role],\" +\n            \"      admin:[admin_role]},\" +\n            \"    permissions:[\" +\n            \"      {name:all, role:'admin_role'}\" +\n            \"]}\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8076096f334b0665d0a69a63ee98ac09baad402b":["3c3d917afd3dc4e90156e2d8720b5d468e2c5af4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3c3d917afd3dc4e90156e2d8720b5d468e2c5af4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8076096f334b0665d0a69a63ee98ac09baad402b"]},"commit2Childs":{"8076096f334b0665d0a69a63ee98ac09baad402b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c3d917afd3dc4e90156e2d8720b5d468e2c5af4"],"3c3d917afd3dc4e90156e2d8720b5d468e2c5af4":["8076096f334b0665d0a69a63ee98ac09baad402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}