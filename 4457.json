{"path":"src/java/org/apache/solr/analysis/TrieTokenizerFactory#create(Reader).mjava","commits":[{"id":"1e77721aaf23393f6ea7926045ae6f8efea0ce8e","date":1247678464,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/TrieTokenizerFactory#create(Reader).mjava","pathOld":"src/java/org/apache/solr/analysis/TrieIndexTokenizerFactory#create(Reader).mjava","sourceNew":"  public TokenStream create(Reader input) {\n    try {\n      StringBuilder builder = new StringBuilder();\n      char[] buf = new char[8];\n      int len;\n      while ((len = input.read(buf)) != -1)\n        builder.append(buf, 0, len);\n      switch (type) {\n        case INTEGER:\n          return new NumericTokenStream(precisionStep).setIntValue(Integer.parseInt(builder.toString()));\n        case FLOAT:\n          return new NumericTokenStream(precisionStep).setFloatValue(Float.parseFloat(builder.toString()));\n        case LONG:\n          return new NumericTokenStream(precisionStep).setLongValue(Long.parseLong(builder.toString()));\n        case DOUBLE:\n          return new NumericTokenStream(precisionStep).setDoubleValue(Double.parseDouble(builder.toString()));\n        case DATE:\n          return new NumericTokenStream(precisionStep).setLongValue(dateField.parseMath(null, builder.toString()).getTime());\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","sourceOld":"  public TokenStream create(Reader input) {\n    try {\n      StringBuilder builder = new StringBuilder();\n      char[] buf = new char[8];\n      int len;\n      while ((len = input.read(buf)) != -1)\n        builder.append(buf, 0, len);\n      switch (type) {\n        case INTEGER:\n          return new IntTrieTokenStream(Integer.parseInt(builder.toString()), precisionStep);\n        case FLOAT:\n          return new IntTrieTokenStream(TrieUtils.floatToSortableInt(Float.parseFloat(builder.toString())), precisionStep);\n        case LONG:\n          return new LongTrieTokenStream(Long.parseLong(builder.toString()), precisionStep);\n        case DOUBLE:\n          return new LongTrieTokenStream(TrieUtils.doubleToSortableLong(Double.parseDouble(builder.toString())), precisionStep);\n        case DATE:\n          return new LongTrieTokenStream(dateField.parseMath(null, builder.toString()).getTime(), precisionStep);\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be29e0e2cef1fd569147732e48caf8538790339b","date":1250443738,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/TrieTokenizerFactory#create(Reader).mjava","pathOld":"src/java/org/apache/solr/analysis/TrieTokenizerFactory#create(Reader).mjava","sourceNew":"  public TokenStream create(Reader input) {\n    return new TrieTokenizer(input, type, precisionStep, TrieTokenizer.getNumericTokenStream(precisionStep));\n  }\n\n","sourceOld":"  public TokenStream create(Reader input) {\n    try {\n      StringBuilder builder = new StringBuilder();\n      char[] buf = new char[8];\n      int len;\n      while ((len = input.read(buf)) != -1)\n        builder.append(buf, 0, len);\n      switch (type) {\n        case INTEGER:\n          return new NumericTokenStream(precisionStep).setIntValue(Integer.parseInt(builder.toString()));\n        case FLOAT:\n          return new NumericTokenStream(precisionStep).setFloatValue(Float.parseFloat(builder.toString()));\n        case LONG:\n          return new NumericTokenStream(precisionStep).setLongValue(Long.parseLong(builder.toString()));\n        case DOUBLE:\n          return new NumericTokenStream(precisionStep).setDoubleValue(Double.parseDouble(builder.toString()));\n        case DATE:\n          return new NumericTokenStream(precisionStep).setLongValue(dateField.parseMath(null, builder.toString()).getTime());\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","bugFix":["1e77721aaf23393f6ea7926045ae6f8efea0ce8e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55044da960047bf158eb7323b7e38952ae067e7a","date":1251140302,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/TrieTokenizerFactory#create(Reader).mjava","pathOld":"src/java/org/apache/solr/analysis/TrieTokenizerFactory#create(Reader).mjava","sourceNew":"  public Tokenizer create(Reader input) {\n    return new TrieTokenizer(input, type, precisionStep, TrieTokenizer.getNumericTokenStream(precisionStep));\n  }\n\n","sourceOld":"  public TokenStream create(Reader input) {\n    return new TrieTokenizer(input, type, precisionStep, TrieTokenizer.getNumericTokenStream(precisionStep));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeb47f6a26048df6300b6c0f3bd5608ed5828297","date":1252471293,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/TrieTokenizerFactory#create(Reader).mjava","pathOld":"src/java/org/apache/solr/analysis/TrieTokenizerFactory#create(Reader).mjava","sourceNew":"  public TrieTokenizer create(Reader input) {\n    return new TrieTokenizer(input, type, precisionStep, TrieTokenizer.getNumericTokenStream(precisionStep));\n  }\n\n","sourceOld":"  public Tokenizer create(Reader input) {\n    return new TrieTokenizer(input, type, precisionStep, TrieTokenizer.getNumericTokenStream(precisionStep));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/TrieTokenizerFactory#create(Reader).mjava","pathOld":"src/java/org/apache/solr/analysis/TrieTokenizerFactory#create(Reader).mjava","sourceNew":"  public TrieTokenizer create(Reader input) {\n    return new TrieTokenizer(input, type, precisionStep, TrieTokenizer.getNumericTokenStream(precisionStep));\n  }\n\n","sourceOld":"  public TrieTokenizer create(Reader input) {\n    return new TrieTokenizer(input, type, precisionStep, TrieTokenizer.getNumericTokenStream(precisionStep));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e77721aaf23393f6ea7926045ae6f8efea0ce8e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eeb47f6a26048df6300b6c0f3bd5608ed5828297":["55044da960047bf158eb7323b7e38952ae067e7a"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"be29e0e2cef1fd569147732e48caf8538790339b":["1e77721aaf23393f6ea7926045ae6f8efea0ce8e"],"ad94625fb8d088209f46650c8097196fec67f00c":["eeb47f6a26048df6300b6c0f3bd5608ed5828297"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55044da960047bf158eb7323b7e38952ae067e7a":["be29e0e2cef1fd569147732e48caf8538790339b"]},"commit2Childs":{"1e77721aaf23393f6ea7926045ae6f8efea0ce8e":["be29e0e2cef1fd569147732e48caf8538790339b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["1e77721aaf23393f6ea7926045ae6f8efea0ce8e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eeb47f6a26048df6300b6c0f3bd5608ed5828297":["ad94625fb8d088209f46650c8097196fec67f00c"],"be29e0e2cef1fd569147732e48caf8538790339b":["55044da960047bf158eb7323b7e38952ae067e7a"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"55044da960047bf158eb7323b7e38952ae067e7a":["eeb47f6a26048df6300b6c0f3bd5608ed5828297"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}