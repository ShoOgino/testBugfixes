{"path":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,int,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,int,int).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * \n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @param readBufferSize\n     * @param termsIndexDivisor\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (poolReaders) {\n        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      }\n\n      SegmentReader sr = readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(false, info.dir, info, readBufferSize, doOpenStores, termsIndexDivisor);\n        readerMap.put(info, sr);\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1 && !sr.termsIndexLoaded()) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      sr.incRef();\n      return sr;\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * \n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @param readBufferSize\n     * @param termsIndexDivisor\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (poolReaders) {\n        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      }\n\n      SegmentReader sr = readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(false, info.dir, info, readBufferSize, doOpenStores, termsIndexDivisor);\n        readerMap.put(info, sr);\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1 && !sr.termsIndexLoaded()) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      sr.incRef();\n      return sr;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,int,int).mjava","sourceNew":null,"sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * \n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @param readBufferSize\n     * @param termsIndexDivisor\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (poolReaders) {\n        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      }\n\n      SegmentReader sr = readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(false, info.dir, info, readBufferSize, doOpenStores, termsIndexDivisor);\n        readerMap.put(info, sr);\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1 && !sr.termsIndexLoaded()) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      sr.incRef();\n      return sr;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}