{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRestoreNode(String).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRestoreNode(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Restore a previously removed node. This also simulates a short replica recovery state.\n   * @param nodeId node id to restore\n   * @return true when this operation restored any replicas, false otherwise (empty node).\n   */\n  public boolean simRestoreNode(String nodeId) throws Exception {\n    liveNodes.add(nodeId);\n    createEphemeralLiveNode(nodeId);\n    Set<String> collections = new HashSet<>();\n    lock.lock();\n    try {\n      setReplicaStates(nodeId, Replica.State.RECOVERING, collections);\n    } finally {\n      lock.unlock();\n    }\n    cloudManager.getTimeSource().sleep(1000);\n    lock.lock();\n    try {\n      setReplicaStates(nodeId, Replica.State.ACTIVE, collections);\n    } finally {\n      lock.unlock();\n    }\n    if (!collections.isEmpty()) {\n      collectionsStatesRef.set(null);\n      cloudManager.submit(new LeaderElection(collections, true));\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4422b331d00607258b0ed3e43934306e67764aa","date":1513943901,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRestoreNode(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRestoreNode(String).mjava","sourceNew":"  /**\n   * Restore a previously removed node. This also simulates a short replica recovery state.\n   * @param nodeId node id to restore\n   * @return true when this operation restored any replicas, false otherwise (empty node).\n   */\n  public boolean simRestoreNode(String nodeId) throws Exception {\n    liveNodes.add(nodeId);\n    createEphemeralLiveNode(nodeId);\n    Set<String> collections = new HashSet<>();\n    lock.lock();\n    try {\n      setReplicaStates(nodeId, Replica.State.RECOVERING, collections);\n    } finally {\n      lock.unlock();\n    }\n    cloudManager.getTimeSource().sleep(1000);\n    lock.lock();\n    try {\n      setReplicaStates(nodeId, Replica.State.ACTIVE, collections);\n    } finally {\n      lock.unlock();\n    }\n    if (!collections.isEmpty()) {\n      collectionsStatesRef.set(null);\n      simRunLeaderElection(collections, true);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Restore a previously removed node. This also simulates a short replica recovery state.\n   * @param nodeId node id to restore\n   * @return true when this operation restored any replicas, false otherwise (empty node).\n   */\n  public boolean simRestoreNode(String nodeId) throws Exception {\n    liveNodes.add(nodeId);\n    createEphemeralLiveNode(nodeId);\n    Set<String> collections = new HashSet<>();\n    lock.lock();\n    try {\n      setReplicaStates(nodeId, Replica.State.RECOVERING, collections);\n    } finally {\n      lock.unlock();\n    }\n    cloudManager.getTimeSource().sleep(1000);\n    lock.lock();\n    try {\n      setReplicaStates(nodeId, Replica.State.ACTIVE, collections);\n    } finally {\n      lock.unlock();\n    }\n    if (!collections.isEmpty()) {\n      collectionsStatesRef.set(null);\n      cloudManager.submit(new LeaderElection(collections, true));\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRestoreNode(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRestoreNode(String).mjava","sourceNew":"  /**\n   * Restore a previously removed node. This also simulates a short replica recovery state.\n   * @param nodeId node id to restore\n   * @return true when this operation restored any replicas, false otherwise (empty node).\n   */\n  public boolean simRestoreNode(String nodeId) throws Exception {\n    liveNodes.add(nodeId);\n    createEphemeralLiveNode(nodeId);\n    Set<String> collections = new HashSet<>();\n    lock.lockInterruptibly();\n    try {\n      setReplicaStates(nodeId, Replica.State.RECOVERING, collections);\n    } finally {\n      lock.unlock();\n    }\n    cloudManager.getTimeSource().sleep(1000);\n    lock.lockInterruptibly();\n    try {\n      setReplicaStates(nodeId, Replica.State.ACTIVE, collections);\n    } finally {\n      lock.unlock();\n    }\n    if (!collections.isEmpty()) {\n      collectionsStatesRef.set(null);\n      simRunLeaderElection(collections, true);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Restore a previously removed node. This also simulates a short replica recovery state.\n   * @param nodeId node id to restore\n   * @return true when this operation restored any replicas, false otherwise (empty node).\n   */\n  public boolean simRestoreNode(String nodeId) throws Exception {\n    liveNodes.add(nodeId);\n    createEphemeralLiveNode(nodeId);\n    Set<String> collections = new HashSet<>();\n    lock.lock();\n    try {\n      setReplicaStates(nodeId, Replica.State.RECOVERING, collections);\n    } finally {\n      lock.unlock();\n    }\n    cloudManager.getTimeSource().sleep(1000);\n    lock.lock();\n    try {\n      setReplicaStates(nodeId, Replica.State.ACTIVE, collections);\n    } finally {\n      lock.unlock();\n    }\n    if (!collections.isEmpty()) {\n      collectionsStatesRef.set(null);\n      simRunLeaderElection(collections, true);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRestoreNode(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRestoreNode(String).mjava","sourceNew":"  /**\n   * Restore a previously removed node. This also simulates a short replica recovery state.\n   * @param nodeId node id to restore\n   * @return true when this operation restored any replicas, false otherwise (empty node).\n   */\n  public boolean simRestoreNode(String nodeId) throws Exception {\n    liveNodes.add(nodeId);\n    createEphemeralLiveNode(nodeId);\n    Set<String> collections = new HashSet<>();\n    lock.lockInterruptibly();\n    try {\n      setReplicaStates(nodeId, Replica.State.RECOVERING, collections);\n    } finally {\n      lock.unlock();\n    }\n    cloudManager.getTimeSource().sleep(1000);\n    lock.lockInterruptibly();\n    try {\n      setReplicaStates(nodeId, Replica.State.ACTIVE, collections);\n    } finally {\n      lock.unlock();\n    }\n    if (!collections.isEmpty()) {\n      collectionsStatesRef.set(null);\n      simRunLeaderElection(collections, true);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Restore a previously removed node. This also simulates a short replica recovery state.\n   * @param nodeId node id to restore\n   * @return true when this operation restored any replicas, false otherwise (empty node).\n   */\n  public boolean simRestoreNode(String nodeId) throws Exception {\n    liveNodes.add(nodeId);\n    createEphemeralLiveNode(nodeId);\n    Set<String> collections = new HashSet<>();\n    lock.lock();\n    try {\n      setReplicaStates(nodeId, Replica.State.RECOVERING, collections);\n    } finally {\n      lock.unlock();\n    }\n    cloudManager.getTimeSource().sleep(1000);\n    lock.lock();\n    try {\n      setReplicaStates(nodeId, Replica.State.ACTIVE, collections);\n    } finally {\n      lock.unlock();\n    }\n    if (!collections.isEmpty()) {\n      collectionsStatesRef.set(null);\n      simRunLeaderElection(collections, true);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"374cde0030d329720d59d1c6336d1089bbcd6fd9","date":1544808129,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRestoreNode(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRestoreNode(String).mjava","sourceNew":"  /**\n   * Restore a previously removed node. This also simulates a short replica recovery state.\n   * @param nodeId node id to restore\n   * @return true when this operation restored any replicas, false otherwise (empty node).\n   */\n  public boolean simRestoreNode(String nodeId) throws Exception {\n    liveNodes.add(nodeId);\n    createEphemeralLiveNode(nodeId);\n    Set<String> collections = new HashSet<>();\n    lock.lockInterruptibly();\n    try {\n      setReplicaStates(nodeId, Replica.State.RECOVERING, collections);\n    } finally {\n      lock.unlock();\n    }\n    cloudManager.getTimeSource().sleep(1000);\n    lock.lockInterruptibly();\n    try {\n      setReplicaStates(nodeId, Replica.State.ACTIVE, collections);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n        simRunLeaderElection(collections, true);\n        return true;\n      } else {\n        return false;\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Restore a previously removed node. This also simulates a short replica recovery state.\n   * @param nodeId node id to restore\n   * @return true when this operation restored any replicas, false otherwise (empty node).\n   */\n  public boolean simRestoreNode(String nodeId) throws Exception {\n    liveNodes.add(nodeId);\n    createEphemeralLiveNode(nodeId);\n    Set<String> collections = new HashSet<>();\n    lock.lockInterruptibly();\n    try {\n      setReplicaStates(nodeId, Replica.State.RECOVERING, collections);\n    } finally {\n      lock.unlock();\n    }\n    cloudManager.getTimeSource().sleep(1000);\n    lock.lockInterruptibly();\n    try {\n      setReplicaStates(nodeId, Replica.State.ACTIVE, collections);\n    } finally {\n      lock.unlock();\n    }\n    if (!collections.isEmpty()) {\n      collectionsStatesRef.set(null);\n      simRunLeaderElection(collections, true);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b87d86427dfa19b2ef36b66de83aa9655cea33","date":1552627668,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRestoreNode(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRestoreNode(String).mjava","sourceNew":"  /**\n   * Restore a previously removed node. This also simulates a short replica recovery state.\n   * @param nodeId node id to restore\n   * @return true when this operation restored any replicas, false otherwise (empty node).\n   */\n  public boolean simRestoreNode(String nodeId) throws Exception {\n    liveNodes.add(nodeId);\n    createEphemeralLiveNode(nodeId);\n    Set<String> collections = new HashSet<>();\n    \n    lock.lockInterruptibly();\n    try {\n      setReplicaStates(nodeId, Replica.State.RECOVERING, collections);\n    } finally {\n      lock.unlock();\n    }\n    \n    cloudManager.getTimeSource().sleep(1000);\n    \n    lock.lockInterruptibly();\n    try {\n      setReplicaStates(nodeId, Replica.State.ACTIVE, collections);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n        simRunLeaderElection(collections, true);\n        return true;\n      } else {\n        return false;\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Restore a previously removed node. This also simulates a short replica recovery state.\n   * @param nodeId node id to restore\n   * @return true when this operation restored any replicas, false otherwise (empty node).\n   */\n  public boolean simRestoreNode(String nodeId) throws Exception {\n    liveNodes.add(nodeId);\n    createEphemeralLiveNode(nodeId);\n    Set<String> collections = new HashSet<>();\n    lock.lockInterruptibly();\n    try {\n      setReplicaStates(nodeId, Replica.State.RECOVERING, collections);\n    } finally {\n      lock.unlock();\n    }\n    cloudManager.getTimeSource().sleep(1000);\n    lock.lockInterruptibly();\n    try {\n      setReplicaStates(nodeId, Replica.State.ACTIVE, collections);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n        simRunLeaderElection(collections, true);\n        return true;\n      } else {\n        return false;\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRestoreNode(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRestoreNode(String).mjava","sourceNew":"  /**\n   * Restore a previously removed node. This also simulates a short replica recovery state.\n   * @param nodeId node id to restore\n   * @return true when this operation restored any replicas, false otherwise (empty node).\n   */\n  public boolean simRestoreNode(String nodeId) throws Exception {\n    liveNodes.add(nodeId);\n    createEphemeralLiveNode(nodeId);\n    Set<String> collections = new HashSet<>();\n    \n    lock.lockInterruptibly();\n    try {\n      setReplicaStates(nodeId, Replica.State.RECOVERING, collections);\n    } finally {\n      lock.unlock();\n    }\n    \n    cloudManager.getTimeSource().sleep(1000);\n    \n    lock.lockInterruptibly();\n    try {\n      setReplicaStates(nodeId, Replica.State.ACTIVE, collections);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n        simRunLeaderElection(collections, true);\n        return true;\n      } else {\n        return false;\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Restore a previously removed node. This also simulates a short replica recovery state.\n   * @param nodeId node id to restore\n   * @return true when this operation restored any replicas, false otherwise (empty node).\n   */\n  public boolean simRestoreNode(String nodeId) throws Exception {\n    liveNodes.add(nodeId);\n    createEphemeralLiveNode(nodeId);\n    Set<String> collections = new HashSet<>();\n    \n    lock.lockInterruptibly();\n    try {\n      setReplicaStates(nodeId, Replica.State.RECOVERING, collections);\n    } finally {\n      lock.unlock();\n    }\n    \n    cloudManager.getTimeSource().sleep(1000);\n    \n    lock.lockInterruptibly();\n    try {\n      setReplicaStates(nodeId, Replica.State.ACTIVE, collections);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n        simRunLeaderElection(collections, true);\n        return true;\n      } else {\n        return false;\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["a4422b331d00607258b0ed3e43934306e67764aa"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["374cde0030d329720d59d1c6336d1089bbcd6fd9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a4422b331d00607258b0ed3e43934306e67764aa":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a4422b331d00607258b0ed3e43934306e67764aa","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"374cde0030d329720d59d1c6336d1089bbcd6fd9":["43345f1452f9510f8aaadae6156fe0c834e7d957"]},"commit2Childs":{"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a4422b331d00607258b0ed3e43934306e67764aa":["ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","43345f1452f9510f8aaadae6156fe0c834e7d957"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a4422b331d00607258b0ed3e43934306e67764aa"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["374cde0030d329720d59d1c6336d1089bbcd6fd9"],"374cde0030d329720d59d1c6336d1089bbcd6fd9":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}