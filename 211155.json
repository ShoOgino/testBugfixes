{"path":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String,String).mjava","commits":[{"id":"ce0735cbef33a0057ccb0f6ccc3caaf1bd95e858","date":1472733239,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String).mjava","sourceNew":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh,\n                              String node,\n                              String async) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      String coll = sourceReplica.getStr(COLLECTION_PROP);\n      String shard = sourceReplica.getStr(SHARD_ID_PROP);\n      log.info(\"Deleting replica for collection={} shard={} on node={}\", coll, shard, node);\n      NamedList deleteResult = new NamedList();\n      try {\n        if (async != null) sourceReplica = sourceReplica.plus(ASYNC, async);\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", coll, shard, node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","sourceOld":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh, String node) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      log.info(\"Deleting replica for collection={} shard={} on node={}\", sourceReplica.getStr(COLLECTION_PROP), sourceReplica.getStr(SHARD_ID_PROP), node);\n      NamedList deleteResult = new NamedList();\n      try {\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", sourceReplica.getStr(COLLECTION_PROP), sourceReplica.getStr(SHARD_ID_PROP), node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String).mjava","sourceNew":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh,\n                              String node,\n                              String async) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      String coll = sourceReplica.getStr(COLLECTION_PROP);\n      String shard = sourceReplica.getStr(SHARD_ID_PROP);\n      log.info(\"Deleting replica for collection={} shard={} on node={}\", coll, shard, node);\n      NamedList deleteResult = new NamedList();\n      try {\n        if (async != null) sourceReplica = sourceReplica.plus(ASYNC, async);\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", coll, shard, node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","sourceOld":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh, String node) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      log.info(\"Deleting replica for collection={} shard={} on node={}\", sourceReplica.getStr(COLLECTION_PROP), sourceReplica.getStr(SHARD_ID_PROP), node);\n      NamedList deleteResult = new NamedList();\n      try {\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", sourceReplica.getStr(COLLECTION_PROP), sourceReplica.getStr(SHARD_ID_PROP), node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String,String).mjava","pathOld":"/dev/null","sourceNew":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh,\n                              String node,\n                              String async) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      String coll = sourceReplica.getStr(COLLECTION_PROP);\n      String shard = sourceReplica.getStr(SHARD_ID_PROP);\n      log.info(\"Deleting replica for collection={} shard={} on node={}\", coll, shard, node);\n      NamedList deleteResult = new NamedList();\n      try {\n        if (async != null) sourceReplica = sourceReplica.plus(ASYNC, async);\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", coll, shard, node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String,String).mjava","pathOld":"/dev/null","sourceNew":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh,\n                              String node,\n                              String async) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      String coll = sourceReplica.getStr(COLLECTION_PROP);\n      String shard = sourceReplica.getStr(SHARD_ID_PROP);\n      log.info(\"Deleting replica for collection={} shard={} on node={}\", coll, shard, node);\n      NamedList deleteResult = new NamedList();\n      try {\n        if (async != null) sourceReplica = sourceReplica.plus(ASYNC, async);\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", coll, shard, node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"558f47e41524183823173884b3aaf0c03653dec0","date":1499192348,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String,String).mjava","sourceNew":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh,\n                              String node,\n                              String async) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      String coll = sourceReplica.getStr(COLLECTION_PROP);\n      String shard = sourceReplica.getStr(SHARD_ID_PROP);\n      String type = sourceReplica.getStr(ZkStateReader.REPLICA_TYPE);\n      log.info(\"Deleting replica type={} for collection={} shard={} on node={}\", type, coll, shard, node);\n      NamedList deleteResult = new NamedList();\n      try {\n        if (async != null) sourceReplica = sourceReplica.plus(ASYNC, async);\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", coll, shard, node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","sourceOld":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh,\n                              String node,\n                              String async) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      String coll = sourceReplica.getStr(COLLECTION_PROP);\n      String shard = sourceReplica.getStr(SHARD_ID_PROP);\n      log.info(\"Deleting replica for collection={} shard={} on node={}\", coll, shard, node);\n      NamedList deleteResult = new NamedList();\n      try {\n        if (async != null) sourceReplica = sourceReplica.plus(ASYNC, async);\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", coll, shard, node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","bugFix":["ce0735cbef33a0057ccb0f6ccc3caaf1bd95e858"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String,String).mjava","sourceNew":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh,\n                              String node,\n                              String async) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      String coll = sourceReplica.getStr(COLLECTION_PROP);\n      String shard = sourceReplica.getStr(SHARD_ID_PROP);\n      String type = sourceReplica.getStr(ZkStateReader.REPLICA_TYPE);\n      log.info(\"Deleting replica type={} for collection={} shard={} on node={}\", type, coll, shard, node);\n      NamedList deleteResult = new NamedList();\n      try {\n        if (async != null) sourceReplica = sourceReplica.plus(ASYNC, async);\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", coll, shard, node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","sourceOld":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh,\n                              String node,\n                              String async) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      String coll = sourceReplica.getStr(COLLECTION_PROP);\n      String shard = sourceReplica.getStr(SHARD_ID_PROP);\n      log.info(\"Deleting replica for collection={} shard={} on node={}\", coll, shard, node);\n      NamedList deleteResult = new NamedList();\n      try {\n        if (async != null) sourceReplica = sourceReplica.plus(ASYNC, async);\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", coll, shard, node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String,String).mjava","sourceNew":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh,\n                              String node,\n                              String async) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      String coll = sourceReplica.getStr(COLLECTION_PROP);\n      String shard = sourceReplica.getStr(SHARD_ID_PROP);\n      String type = sourceReplica.getStr(ZkStateReader.REPLICA_TYPE);\n      log.info(\"Deleting replica type={} for collection={} shard={} on node={}\", type, coll, shard, node);\n      NamedList deleteResult = new NamedList();\n      try {\n        if (async != null) sourceReplica = sourceReplica.plus(ASYNC, async);\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", coll, shard, node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","sourceOld":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh,\n                              String node,\n                              String async) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      String coll = sourceReplica.getStr(COLLECTION_PROP);\n      String shard = sourceReplica.getStr(SHARD_ID_PROP);\n      String type = sourceReplica.getStr(ZkStateReader.REPLICA_TYPE);\n      log.info(\"Deleting replica type={} for collection={} shard={} on node={}\", type, coll, shard, node);\n      NamedList deleteResult = new NamedList();\n      try {\n        if (async != null) sourceReplica = sourceReplica.plus(ASYNC, async);\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", coll, shard, node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String,String).mjava","sourceNew":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh,\n                              String node,\n                              String async) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      String coll = sourceReplica.getStr(COLLECTION_PROP);\n      String shard = sourceReplica.getStr(SHARD_ID_PROP);\n      String type = sourceReplica.getStr(ZkStateReader.REPLICA_TYPE);\n      log.info(\"Deleting replica type={} for collection={} shard={} on node={}\", type, coll, shard, node);\n      NamedList deleteResult = new NamedList();\n      try {\n        if (async != null) sourceReplica = sourceReplica.plus(ASYNC, async);\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", coll, shard, node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","sourceOld":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh,\n                              String node,\n                              String async) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      String coll = sourceReplica.getStr(COLLECTION_PROP);\n      String shard = sourceReplica.getStr(SHARD_ID_PROP);\n      String type = sourceReplica.getStr(ZkStateReader.REPLICA_TYPE);\n      log.info(\"Deleting replica type={} for collection={} shard={} on node={}\", type, coll, shard, node);\n      NamedList deleteResult = new NamedList();\n      try {\n        if (async != null) sourceReplica = sourceReplica.plus(ASYNC, async);\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", coll, shard, node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["558f47e41524183823173884b3aaf0c03653dec0","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","558f47e41524183823173884b3aaf0c03653dec0"],"558f47e41524183823173884b3aaf0c03653dec0":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ce0735cbef33a0057ccb0f6ccc3caaf1bd95e858"],"ce0735cbef33a0057ccb0f6ccc3caaf1bd95e858":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["558f47e41524183823173884b3aaf0c03653dec0"],"bc8f206328a706450934717bec7ccc22ad166fc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ce0735cbef33a0057ccb0f6ccc3caaf1bd95e858"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"558f47e41524183823173884b3aaf0c03653dec0":["b94236357aaa22b76c10629851fe4e376e0cea82","2ea161f828a3a7a6eb9410a431aecda6d7ab1065","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","558f47e41524183823173884b3aaf0c03653dec0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","ce0735cbef33a0057ccb0f6ccc3caaf1bd95e858","bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ce0735cbef33a0057ccb0f6ccc3caaf1bd95e858":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}