{"path":"src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","commits":[{"id":"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8","date":1195335263,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the subreaders. </p>\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   * @throws IOException\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) {\n    initialize(subReaders, closeSubReaders);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","sourceNew":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the subreaders. </p>\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) {\n    initialize(subReaders, closeSubReaders);\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the subreaders. </p>\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   * @throws IOException\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) {\n    initialize(subReaders, closeSubReaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","sourceNew":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the subreaders. </p>\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) {\n    initialize(subReaders, closeSubReaders);\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the subreaders. </p>\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) {\n    initialize(subReaders, closeSubReaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}