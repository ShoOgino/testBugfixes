{"path":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#setReplicaState(String,String,Replica,Replica.State).mjava","commits":[{"id":"55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05","date":1446751515,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#setReplicaState(String,String,Replica,Replica.State).mjava","pathOld":"/dev/null","sourceNew":"  protected void setReplicaState(String collection, String slice, Replica replica, Replica.State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.BASE_URL_PROP, baseUrl,\n        ZkStateReader.NODE_NAME_PROP, replica.getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, slice,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.CORE_NAME_PROP, replica.getStr(CORE_NAME_PROP),\n        ZkStateReader.CORE_NODE_NAME_PROP, replica.getName(),\n        ZkStateReader.STATE_PROP, state.toString());\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    Replica.State replicaState = null;\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      replicaState = clusterState.getSlice(collection, slice).getReplica(replica.getName()).getState();\n      if (replicaState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set replica [\" + replica.getName() + \"] as \" + state +\n          \". Last known state of the replica: \" + replicaState);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19498030e0adab22f604f935cae3c03dcf0952a6","date":1456558851,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#setReplicaState(String,String,Replica,Replica.State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#setReplicaState(String,String,Replica,Replica.State).mjava","sourceNew":"  protected void setReplicaState(String collection, String slice, Replica replica, Replica.State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.BASE_URL_PROP, baseUrl,\n        ZkStateReader.NODE_NAME_PROP, replica.getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, slice,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.CORE_NAME_PROP, replica.getStr(CORE_NAME_PROP),\n        ZkStateReader.CORE_NODE_NAME_PROP, replica.getName(),\n        ZkStateReader.STATE_PROP, state.toString());\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    Replica.State replicaState = null;\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      replicaState = clusterState.getSlice(collection, slice).getReplica(replica.getName()).getState();\n      if (replicaState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set replica [\" + replica.getName() + \"] as \" + state +\n          \". Last known state of the replica: \" + replicaState);\n    }\n  }\n\n","sourceOld":"  protected void setReplicaState(String collection, String slice, Replica replica, Replica.State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.BASE_URL_PROP, baseUrl,\n        ZkStateReader.NODE_NAME_PROP, replica.getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, slice,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.CORE_NAME_PROP, replica.getStr(CORE_NAME_PROP),\n        ZkStateReader.CORE_NODE_NAME_PROP, replica.getName(),\n        ZkStateReader.STATE_PROP, state.toString());\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    Replica.State replicaState = null;\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      replicaState = clusterState.getSlice(collection, slice).getReplica(replica.getName()).getState();\n      if (replicaState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set replica [\" + replica.getName() + \"] as \" + state +\n          \". Last known state of the replica: \" + replicaState);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#setReplicaState(String,String,Replica,Replica.State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#setReplicaState(String,String,Replica,Replica.State).mjava","sourceNew":"  protected void setReplicaState(String collection, String slice, Replica replica, Replica.State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.BASE_URL_PROP, baseUrl,\n        ZkStateReader.NODE_NAME_PROP, replica.getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, slice,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.CORE_NAME_PROP, replica.getStr(CORE_NAME_PROP),\n        ZkStateReader.CORE_NODE_NAME_PROP, replica.getName(),\n        ZkStateReader.STATE_PROP, state.toString());\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    Replica.State replicaState = null;\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      replicaState = clusterState.getSlice(collection, slice).getReplica(replica.getName()).getState();\n      if (replicaState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set replica [\" + replica.getName() + \"] as \" + state +\n          \". Last known state of the replica: \" + replicaState);\n    }\n  }\n\n","sourceOld":"  protected void setReplicaState(String collection, String slice, Replica replica, Replica.State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.BASE_URL_PROP, baseUrl,\n        ZkStateReader.NODE_NAME_PROP, replica.getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, slice,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.CORE_NAME_PROP, replica.getStr(CORE_NAME_PROP),\n        ZkStateReader.CORE_NODE_NAME_PROP, replica.getName(),\n        ZkStateReader.STATE_PROP, state.toString());\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    Replica.State replicaState = null;\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      replicaState = clusterState.getSlice(collection, slice).getReplica(replica.getName()).getState();\n      if (replicaState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set replica [\" + replica.getName() + \"] as \" + state +\n          \". Last known state of the replica: \" + replicaState);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#setReplicaState(String,String,Replica,Replica.State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#setReplicaState(String,String,Replica,Replica.State).mjava","sourceNew":"  protected void setReplicaState(String collection, String slice, Replica replica, Replica.State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.BASE_URL_PROP, baseUrl,\n        ZkStateReader.NODE_NAME_PROP, replica.getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, slice,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.CORE_NAME_PROP, replica.getStr(CORE_NAME_PROP),\n        ZkStateReader.CORE_NODE_NAME_PROP, replica.getName(),\n        ZkStateReader.STATE_PROP, state.toString());\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    Replica.State replicaState = null;\n    for (int counter = 10; counter > 0; counter--) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      replicaState = clusterState.getSlice(collection, slice).getReplica(replica.getName()).getState();\n      if (replicaState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set replica [\" + replica.getName() + \"] as \" + state +\n          \". Last known state of the replica: \" + replicaState);\n    }\n  }\n\n","sourceOld":"  protected void setReplicaState(String collection, String slice, Replica replica, Replica.State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.BASE_URL_PROP, baseUrl,\n        ZkStateReader.NODE_NAME_PROP, replica.getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, slice,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.CORE_NAME_PROP, replica.getStr(CORE_NAME_PROP),\n        ZkStateReader.CORE_NODE_NAME_PROP, replica.getName(),\n        ZkStateReader.STATE_PROP, state.toString());\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    Replica.State replicaState = null;\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      replicaState = clusterState.getSlice(collection, slice).getReplica(replica.getName()).getState();\n      if (replicaState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set replica [\" + replica.getName() + \"] as \" + state +\n          \". Last known state of the replica: \" + replicaState);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#setReplicaState(String,String,Replica,Replica.State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#setReplicaState(String,String,Replica,Replica.State).mjava","sourceNew":"  protected void setReplicaState(String collection, String slice, Replica replica, Replica.State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.BASE_URL_PROP, baseUrl,\n        ZkStateReader.NODE_NAME_PROP, replica.getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, slice,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.CORE_NAME_PROP, replica.getStr(CORE_NAME_PROP),\n        ZkStateReader.CORE_NODE_NAME_PROP, replica.getName(),\n        ZkStateReader.STATE_PROP, state.toString());\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    Replica.State replicaState = null;\n    for (int counter = 10; counter > 0; counter--) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      replicaState = clusterState.getCollection(collection).getSlice(slice).getReplica(replica.getName()).getState();\n      if (replicaState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set replica [\" + replica.getName() + \"] as \" + state +\n          \". Last known state of the replica: \" + replicaState);\n    }\n  }\n\n","sourceOld":"  protected void setReplicaState(String collection, String slice, Replica replica, Replica.State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.BASE_URL_PROP, baseUrl,\n        ZkStateReader.NODE_NAME_PROP, replica.getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, slice,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.CORE_NAME_PROP, replica.getStr(CORE_NAME_PROP),\n        ZkStateReader.CORE_NODE_NAME_PROP, replica.getName(),\n        ZkStateReader.STATE_PROP, state.toString());\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    Replica.State replicaState = null;\n    for (int counter = 10; counter > 0; counter--) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      replicaState = clusterState.getSlice(collection, slice).getReplica(replica.getName()).getState();\n      if (replicaState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set replica [\" + replica.getName() + \"] as \" + state +\n          \". Last known state of the replica: \" + replicaState);\n    }\n  }\n\n","bugFix":["55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#setReplicaState(String,String,Replica,Replica.State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#setReplicaState(String,String,Replica,Replica.State).mjava","sourceNew":"  protected void setReplicaState(String collection, String slice, Replica replica, Replica.State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.BASE_URL_PROP, baseUrl,\n        ZkStateReader.NODE_NAME_PROP, replica.getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, slice,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.CORE_NAME_PROP, replica.getStr(CORE_NAME_PROP),\n        ZkStateReader.CORE_NODE_NAME_PROP, replica.getName(),\n        ZkStateReader.STATE_PROP, state.toString());\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    Replica.State replicaState = null;\n    for (int counter = 10; counter > 0; counter--) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      replicaState = clusterState.getCollection(collection).getSlice(slice).getReplica(replica.getName()).getState();\n      if (replicaState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set replica [\" + replica.getName() + \"] as \" + state +\n          \". Last known state of the replica: \" + replicaState);\n    }\n  }\n\n","sourceOld":"  protected void setReplicaState(String collection, String slice, Replica replica, Replica.State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.BASE_URL_PROP, baseUrl,\n        ZkStateReader.NODE_NAME_PROP, replica.getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, slice,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.CORE_NAME_PROP, replica.getStr(CORE_NAME_PROP),\n        ZkStateReader.CORE_NODE_NAME_PROP, replica.getName(),\n        ZkStateReader.STATE_PROP, state.toString());\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    Replica.State replicaState = null;\n    for (int counter = 10; counter > 0; counter--) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      replicaState = clusterState.getSlice(collection, slice).getReplica(replica.getName()).getState();\n      if (replicaState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set replica [\" + replica.getName() + \"] as \" + state +\n          \". Last known state of the replica: \" + replicaState);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#setReplicaState(String,String,Replica,Replica.State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#setReplicaState(String,String,Replica,Replica.State).mjava","sourceNew":"  protected void setReplicaState(String collection, String slice, Replica replica, Replica.State state) throws Exception {\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.BASE_URL_PROP, baseUrl,\n        ZkStateReader.NODE_NAME_PROP, replica.getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, slice,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.CORE_NAME_PROP, replica.getStr(CORE_NAME_PROP),\n        ZkStateReader.CORE_NODE_NAME_PROP, replica.getName(),\n        ZkStateReader.STATE_PROP, state.toString());\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    Replica.State replicaState = null;\n    for (int counter = 10; counter > 0; counter--) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      replicaState = clusterState.getCollection(collection).getSlice(slice).getReplica(replica.getName()).getState();\n      if (replicaState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set replica [\" + replica.getName() + \"] as \" + state +\n          \". Last known state of the replica: \" + replicaState);\n    }\n  }\n\n","sourceOld":"  protected void setReplicaState(String collection, String slice, Replica replica, Replica.State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.BASE_URL_PROP, baseUrl,\n        ZkStateReader.NODE_NAME_PROP, replica.getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, slice,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.CORE_NAME_PROP, replica.getStr(CORE_NAME_PROP),\n        ZkStateReader.CORE_NODE_NAME_PROP, replica.getName(),\n        ZkStateReader.STATE_PROP, state.toString());\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    Replica.State replicaState = null;\n    for (int counter = 10; counter > 0; counter--) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      replicaState = clusterState.getCollection(collection).getSlice(slice).getReplica(replica.getName()).getState();\n      if (replicaState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set replica [\" + replica.getName() + \"] as \" + state +\n          \". Last known state of the replica: \" + replicaState);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#setReplicaState(String,String,Replica,Replica.State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#setReplicaState(String,String,Replica,Replica.State).mjava","sourceNew":"  protected void setReplicaState(String collection, String slice, Replica replica, Replica.State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.BASE_URL_PROP, baseUrl,\n        ZkStateReader.NODE_NAME_PROP, replica.getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, slice,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.CORE_NAME_PROP, replica.getStr(CORE_NAME_PROP),\n        ZkStateReader.CORE_NODE_NAME_PROP, replica.getName(),\n        ZkStateReader.STATE_PROP, state.toString());\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    Replica.State replicaState = null;\n    for (int counter = 10; counter > 0; counter--) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      replicaState = clusterState.getCollection(collection).getSlice(slice).getReplica(replica.getName()).getState();\n      if (replicaState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set replica [\" + replica.getName() + \"] as \" + state +\n          \". Last known state of the replica: \" + replicaState);\n    }\n  }\n\n","sourceOld":"  protected void setReplicaState(String collection, String slice, Replica replica, Replica.State state) throws Exception {\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.BASE_URL_PROP, baseUrl,\n        ZkStateReader.NODE_NAME_PROP, replica.getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, slice,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.CORE_NAME_PROP, replica.getStr(CORE_NAME_PROP),\n        ZkStateReader.CORE_NODE_NAME_PROP, replica.getName(),\n        ZkStateReader.STATE_PROP, state.toString());\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    Replica.State replicaState = null;\n    for (int counter = 10; counter > 0; counter--) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      replicaState = clusterState.getCollection(collection).getSlice(slice).getReplica(replica.getName()).getState();\n      if (replicaState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set replica [\" + replica.getName() + \"] as \" + state +\n          \". Last known state of the replica: \" + replicaState);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#setReplicaState(String,String,Replica,Replica.State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#setReplicaState(String,String,Replica,Replica.State).mjava","sourceNew":"  protected void setReplicaState(String collection, String slice, Replica replica, Replica.State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    ZkDistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.BASE_URL_PROP, baseUrl,\n        ZkStateReader.NODE_NAME_PROP, replica.getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, slice,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.CORE_NAME_PROP, replica.getStr(CORE_NAME_PROP),\n        ZkStateReader.CORE_NODE_NAME_PROP, replica.getName(),\n        ZkStateReader.STATE_PROP, state.toString());\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    Replica.State replicaState = null;\n    for (int counter = 10; counter > 0; counter--) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      replicaState = clusterState.getCollection(collection).getSlice(slice).getReplica(replica.getName()).getState();\n      if (replicaState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set replica [\" + replica.getName() + \"] as \" + state +\n          \". Last known state of the replica: \" + replicaState);\n    }\n  }\n\n","sourceOld":"  protected void setReplicaState(String collection, String slice, Replica replica, Replica.State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.BASE_URL_PROP, baseUrl,\n        ZkStateReader.NODE_NAME_PROP, replica.getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, slice,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.CORE_NAME_PROP, replica.getStr(CORE_NAME_PROP),\n        ZkStateReader.CORE_NODE_NAME_PROP, replica.getName(),\n        ZkStateReader.STATE_PROP, state.toString());\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    Replica.State replicaState = null;\n    for (int counter = 10; counter > 0; counter--) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      replicaState = clusterState.getCollection(collection).getSlice(slice).getReplica(replica.getName()).getState();\n      if (replicaState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set replica [\" + replica.getName() + \"] as \" + state +\n          \". Last known state of the replica: \" + replicaState);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#setReplicaState(String,String,Replica,Replica.State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#setReplicaState(String,String,Replica,Replica.State).mjava","sourceNew":"  protected void setReplicaState(String collection, String slice, Replica replica, Replica.State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    ZkDistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.BASE_URL_PROP, baseUrl,\n        ZkStateReader.NODE_NAME_PROP, replica.getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, slice,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.CORE_NAME_PROP, replica.getStr(CORE_NAME_PROP),\n        ZkStateReader.CORE_NODE_NAME_PROP, replica.getName(),\n        ZkStateReader.STATE_PROP, state.toString());\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    Replica.State replicaState = null;\n    for (int counter = 10; counter > 0; counter--) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      replicaState = clusterState.getCollection(collection).getSlice(slice).getReplica(replica.getName()).getState();\n      if (replicaState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set replica [\" + replica.getName() + \"] as \" + state +\n          \". Last known state of the replica: \" + replicaState);\n    }\n  }\n\n","sourceOld":"  protected void setReplicaState(String collection, String slice, Replica replica, Replica.State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.BASE_URL_PROP, baseUrl,\n        ZkStateReader.NODE_NAME_PROP, replica.getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, slice,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.CORE_NAME_PROP, replica.getStr(CORE_NAME_PROP),\n        ZkStateReader.CORE_NODE_NAME_PROP, replica.getName(),\n        ZkStateReader.STATE_PROP, state.toString());\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    Replica.State replicaState = null;\n    for (int counter = 10; counter > 0; counter--) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      replicaState = clusterState.getCollection(collection).getSlice(slice).getReplica(replica.getName()).getState();\n      if (replicaState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set replica [\" + replica.getName() + \"] as \" + state +\n          \". Last known state of the replica: \" + replicaState);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#setReplicaState(String,String,Replica,Replica.State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#setReplicaState(String,String,Replica,Replica.State).mjava","sourceNew":"  protected void setReplicaState(String collection, String slice, Replica replica, Replica.State state) throws Exception {\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.BASE_URL_PROP, baseUrl,\n        ZkStateReader.NODE_NAME_PROP, replica.getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, slice,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.CORE_NAME_PROP, replica.getStr(CORE_NAME_PROP),\n        ZkStateReader.CORE_NODE_NAME_PROP, replica.getName(),\n        ZkStateReader.STATE_PROP, state.toString());\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    Replica.State replicaState = null;\n    for (int counter = 10; counter > 0; counter--) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      replicaState = clusterState.getCollection(collection).getSlice(slice).getReplica(replica.getName()).getState();\n      if (replicaState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set replica [\" + replica.getName() + \"] as \" + state +\n          \". Last known state of the replica: \" + replicaState);\n    }\n  }\n\n","sourceOld":"  protected void setReplicaState(String collection, String slice, Replica replica, Replica.State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    ZkDistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.BASE_URL_PROP, baseUrl,\n        ZkStateReader.NODE_NAME_PROP, replica.getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, slice,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.CORE_NAME_PROP, replica.getStr(CORE_NAME_PROP),\n        ZkStateReader.CORE_NODE_NAME_PROP, replica.getName(),\n        ZkStateReader.STATE_PROP, state.toString());\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    Replica.State replicaState = null;\n    for (int counter = 10; counter > 0; counter--) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      replicaState = clusterState.getCollection(collection).getSlice(slice).getReplica(replica.getName()).getState();\n      if (replicaState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set replica [\" + replica.getName() + \"] as \" + state +\n          \". Last known state of the replica: \" + replicaState);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"667464d9fbdf240710796210f6fcf610b9fff5dc","date":1520242425,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#setReplicaState(String,String,Replica,Replica.State).mjava","sourceNew":null,"sourceOld":"  protected void setReplicaState(String collection, String slice, Replica replica, Replica.State state) throws Exception {\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.BASE_URL_PROP, baseUrl,\n        ZkStateReader.NODE_NAME_PROP, replica.getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, slice,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.CORE_NAME_PROP, replica.getStr(CORE_NAME_PROP),\n        ZkStateReader.CORE_NODE_NAME_PROP, replica.getName(),\n        ZkStateReader.STATE_PROP, state.toString());\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    Replica.State replicaState = null;\n    for (int counter = 10; counter > 0; counter--) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      replicaState = clusterState.getCollection(collection).getSlice(slice).getReplica(replica.getName()).getState();\n      if (replicaState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set replica [\" + replica.getName() + \"] as \" + state +\n          \". Last known state of the replica: \" + replicaState);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05","19498030e0adab22f604f935cae3c03dcf0952a6"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"667464d9fbdf240710796210f6fcf610b9fff5dc":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"344b0840364d990b29b97467bfcc766ff8325d11":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["af2638813028b254a88b418ebeafb541afb49653"],"19498030e0adab22f604f935cae3c03dcf0952a6":["55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","344b0840364d990b29b97467bfcc766ff8325d11"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["b869898f50ca80263bac2e3ae0949f7700e5c977","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["344b0840364d990b29b97467bfcc766ff8325d11"],"55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["667464d9fbdf240710796210f6fcf610b9fff5dc"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"667464d9fbdf240710796210f6fcf610b9fff5dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"344b0840364d990b29b97467bfcc766ff8325d11":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["667464d9fbdf240710796210f6fcf610b9fff5dc"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["344b0840364d990b29b97467bfcc766ff8325d11","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"19498030e0adab22f604f935cae3c03dcf0952a6":["af2638813028b254a88b418ebeafb541afb49653"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","6240b74b884c5587f2a4062dd27d6c32bf228889"],"55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05":["af2638813028b254a88b418ebeafb541afb49653","19498030e0adab22f604f935cae3c03dcf0952a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}