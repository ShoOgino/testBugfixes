{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointShapeQueries.PointValidator#testComponentQuery(Component2D,Object).mjava","commits":[{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":1,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointShapeQueries.PointValidator#testComponentQuery(Component2D,Object).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointShapeQueries.PointValidator#testPoint(EdgeTree,Point).mjava","sourceNew":"    @Override\n    public boolean testComponentQuery(Component2D query, Object shape) {\n      Point p =  (Point) shape;\n      double lat = encoder.quantizeY(p.lat);\n      double lon = encoder.quantizeX(p.lon);\n      // for consistency w/ the query we test the point as a triangle\n      Relation r = query.relateTriangle(lon, lat, lon, lat, lon, lat);\n      if (queryRelation == QueryRelation.WITHIN) {\n        return r == Relation.CELL_INSIDE_QUERY;\n      } else if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","sourceOld":"    private boolean testPoint(EdgeTree tree, Point p) {\n      double lat = encoder.quantizeY(p.lat);\n      double lon = encoder.quantizeX(p.lon);\n      // for consistency w/ the query we test the point as a triangle\n      Relation r = tree.relateTriangle(lon, lat, lon, lat, lon, lat);\n      if (queryRelation == QueryRelation.WITHIN) {\n        return r == Relation.CELL_INSIDE_QUERY;\n      } else if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointShapeQueries.PointValidator#testComponentQuery(Component2D,Object).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean testComponentQuery(Component2D query, Object shape) {\n      Point p =  (Point) shape;\n      double lat = encoder.quantizeY(p.lat);\n      double lon = encoder.quantizeX(p.lon);\n      // for consistency w/ the query we test the point as a triangle\n      Relation r = query.relateTriangle(lon, lat, lon, lat, lon, lat);\n      if (queryRelation == QueryRelation.WITHIN) {\n        return r == Relation.CELL_INSIDE_QUERY;\n      } else if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3","date":1576052211,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointShapeQueries.PointValidator#testComponentQuery(Component2D,Object).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointShapeQueries.PointValidator#testComponentQuery(Component2D,Object).mjava","sourceNew":"    @Override\n    public boolean testComponentQuery(Component2D query, Object shape) {\n      if (queryRelation == QueryRelation.CONTAINS) {\n        return false;\n      }\n      Point p =  (Point) shape;\n      double lat = encoder.quantizeY(p.lat);\n      double lon = encoder.quantizeX(p.lon);\n      // for consistency w/ the query we test the point as a triangle\n      Relation r = query.relateTriangle(lon, lat, lon, lat, lon, lat);\n      if (queryRelation == QueryRelation.WITHIN) {\n        return r == Relation.CELL_INSIDE_QUERY;\n      } else if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","sourceOld":"    @Override\n    public boolean testComponentQuery(Component2D query, Object shape) {\n      Point p =  (Point) shape;\n      double lat = encoder.quantizeY(p.lat);\n      double lon = encoder.quantizeX(p.lon);\n      // for consistency w/ the query we test the point as a triangle\n      Relation r = query.relateTriangle(lon, lat, lon, lat, lon, lat);\n      if (queryRelation == QueryRelation.WITHIN) {\n        return r == Relation.CELL_INSIDE_QUERY;\n      } else if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","date":1576073026,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointShapeQueries.PointValidator#testComponentQuery(Component2D,Object).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointShapeQueries.PointValidator#testComponentQuery(Component2D,Object).mjava","sourceNew":"    @Override\n    public boolean testComponentQuery(Component2D query, Object shape) {\n      if (queryRelation == QueryRelation.CONTAINS) {\n        return false;\n      }\n      Point p =  (Point) shape;\n      double lat = encoder.quantizeY(p.lat);\n      double lon = encoder.quantizeX(p.lon);\n      // for consistency w/ the query we test the point as a triangle\n      Relation r = query.relateTriangle(lon, lat, lon, lat, lon, lat);\n      if (queryRelation == QueryRelation.WITHIN) {\n        return r == Relation.CELL_INSIDE_QUERY;\n      } else if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","sourceOld":"    @Override\n    public boolean testComponentQuery(Component2D query, Object shape) {\n      Point p =  (Point) shape;\n      double lat = encoder.quantizeY(p.lat);\n      double lon = encoder.quantizeX(p.lon);\n      // for consistency w/ the query we test the point as a triangle\n      Relation r = query.relateTriangle(lon, lat, lon, lat, lon, lat);\n      if (queryRelation == QueryRelation.WITHIN) {\n        return r == Relation.CELL_INSIDE_QUERY;\n      } else if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6afbfd2ecc6d7825f89bbcf75e25046650f937a6","date":1579085873,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointShapeQueries.PointValidator#testComponentQuery(Component2D,Object).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointShapeQueries.PointValidator#testComponentQuery(Component2D,Object).mjava","sourceNew":"    @Override\n    public boolean testComponentQuery(Component2D query, Object shape) {\n      Point p = (Point) shape;\n      double lat = encoder.quantizeY(p.lat);\n      double lon = encoder.quantizeX(p.lon);\n      if (queryRelation == QueryRelation.CONTAINS) {\n        return query.withinTriangle(lon, lat, true, lon, lat, true, lon, lat, true) == Component2D.WithinRelation.CANDIDATE;\n      }\n      // for consistency w/ the query we test the point as a triangle\n      Relation r = query.relateTriangle(lon, lat, lon, lat, lon, lat);\n      if (queryRelation == QueryRelation.WITHIN) {\n        return r == Relation.CELL_INSIDE_QUERY;\n      } else if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","sourceOld":"    @Override\n    public boolean testComponentQuery(Component2D query, Object shape) {\n      if (queryRelation == QueryRelation.CONTAINS) {\n        return false;\n      }\n      Point p =  (Point) shape;\n      double lat = encoder.quantizeY(p.lat);\n      double lon = encoder.quantizeX(p.lon);\n      // for consistency w/ the query we test the point as a triangle\n      Relation r = query.relateTriangle(lon, lat, lon, lat, lon, lat);\n      if (queryRelation == QueryRelation.WITHIN) {\n        return r == Relation.CELL_INSIDE_QUERY;\n      } else if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fb9d9c81bf2e6709854f7e362e5e3a3a3e75f61","date":1579089602,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointShapeQueries.PointValidator#testComponentQuery(Component2D,Object).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointShapeQueries.PointValidator#testComponentQuery(Component2D,Object).mjava","sourceNew":"    @Override\n    public boolean testComponentQuery(Component2D query, Object shape) {\n      Point p = (Point) shape;\n      double lat = encoder.quantizeY(p.lat);\n      double lon = encoder.quantizeX(p.lon);\n      if (queryRelation == QueryRelation.CONTAINS) {\n        return query.withinTriangle(lon, lat, true, lon, lat, true, lon, lat, true) == Component2D.WithinRelation.CANDIDATE;\n      }\n      // for consistency w/ the query we test the point as a triangle\n      Relation r = query.relateTriangle(lon, lat, lon, lat, lon, lat);\n      if (queryRelation == QueryRelation.WITHIN) {\n        return r == Relation.CELL_INSIDE_QUERY;\n      } else if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","sourceOld":"    @Override\n    public boolean testComponentQuery(Component2D query, Object shape) {\n      if (queryRelation == QueryRelation.CONTAINS) {\n        return false;\n      }\n      Point p =  (Point) shape;\n      double lat = encoder.quantizeY(p.lat);\n      double lon = encoder.quantizeX(p.lon);\n      // for consistency w/ the query we test the point as a triangle\n      Relation r = query.relateTriangle(lon, lat, lon, lat, lon, lat);\n      if (queryRelation == QueryRelation.WITHIN) {\n        return r == Relation.CELL_INSIDE_QUERY;\n      } else if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestLatLonPointShapeQueries.PointValidator#testComponentQuery(Component2D,Object).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointShapeQueries.PointValidator#testComponentQuery(Component2D,Object).mjava","sourceNew":"    @Override\n    public boolean testComponentQuery(Component2D query, Object shape) {\n      Point p = (Point) shape;\n      double lat = encoder.quantizeY(p.lat);\n      double lon = encoder.quantizeX(p.lon);\n      if (queryRelation == QueryRelation.CONTAINS) {\n        return query.withinTriangle(lon, lat, true, lon, lat, true, lon, lat, true) == Component2D.WithinRelation.CANDIDATE;\n      }\n      // for consistency w/ the query we test the point as a triangle\n      Relation r = query.relateTriangle(lon, lat, lon, lat, lon, lat);\n      if (queryRelation == QueryRelation.WITHIN) {\n        return r == Relation.CELL_INSIDE_QUERY;\n      } else if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","sourceOld":"    @Override\n    public boolean testComponentQuery(Component2D query, Object shape) {\n      Point p = (Point) shape;\n      double lat = encoder.quantizeY(p.lat);\n      double lon = encoder.quantizeX(p.lon);\n      if (queryRelation == QueryRelation.CONTAINS) {\n        return query.withinTriangle(lon, lat, true, lon, lat, true, lon, lat, true) == Component2D.WithinRelation.CANDIDATE;\n      }\n      // for consistency w/ the query we test the point as a triangle\n      Relation r = query.relateTriangle(lon, lat, lon, lat, lon, lat);\n      if (queryRelation == QueryRelation.WITHIN) {\n        return r == Relation.CELL_INSIDE_QUERY;\n      } else if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6afbfd2ecc6d7825f89bbcf75e25046650f937a6":["3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"1fb9d9c81bf2e6709854f7e362e5e3a3a3e75f61":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","6afbfd2ecc6d7825f89bbcf75e25046650f937a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["6afbfd2ecc6d7825f89bbcf75e25046650f937a6"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3","b0b597c65628ca9e73913a07e81691f8229bae35"],"6afbfd2ecc6d7825f89bbcf75e25046650f937a6":["1fb9d9c81bf2e6709854f7e362e5e3a3a3e75f61","09c1e6d465800c73af60624bf9d4459a19f7940c"],"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":["1fb9d9c81bf2e6709854f7e362e5e3a3a3e75f61"],"1fb9d9c81bf2e6709854f7e362e5e3a3a3e75f61":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["6afbfd2ecc6d7825f89bbcf75e25046650f937a6","6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["1fb9d9c81bf2e6709854f7e362e5e3a3a3e75f61","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}