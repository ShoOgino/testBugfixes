{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#testReset().mjava","commits":[{"id":"18359c8e12d55f66c27cfe7babe86283f06a6aa5","date":1250426225,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#testReset().mjava","pathOld":"/dev/null","sourceNew":"  public void testReset() throws Exception {\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(new StringReader(\"please divide this sentence\"));\n    TokenStream filter = new ShingleFilter(wsTokenizer, 2);\n    TermAttribute termAtt = (TermAttribute) filter.getAttribute(TermAttribute.class);\n    assertTrue(filter.incrementToken());\n    assertEquals(\"(please,0,6)\", termAtt.toString());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"(please divide,0,13,type=shingle,posIncr=0)\", termAtt.toString());\n    wsTokenizer.reset(new StringReader(\"please divide this sentence\"));\n    filter.reset();\n    assertTrue(filter.incrementToken());\n    assertEquals(\"(please,0,6)\", termAtt.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc","date":1251117853,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#testReset().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#testReset().mjava","sourceNew":"  public void testReset() throws Exception {\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(new StringReader(\"please divide this sentence\"));\n    TokenStream filter = new ShingleFilter(wsTokenizer, 2);\n    assertTokenStreamContents(filter,\n      new String[]{\"please\",\"please divide\",\"divide\",\"divide this\",\"this\",\"this sentence\",\"sentence\"},\n      new int[]{0,0,7,7,14,14,19}, new int[]{6,13,13,18,18,27,27},\n      new String[]{TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE},\n      new int[]{1,0,1,0,1,0,1}\n    );\n    wsTokenizer.reset(new StringReader(\"please divide this sentence\"));\n    assertTokenStreamContents(filter,\n      new String[]{\"please\",\"please divide\",\"divide\",\"divide this\",\"this\",\"this sentence\",\"sentence\"},\n      new int[]{0,0,7,7,14,14,19}, new int[]{6,13,13,18,18,27,27},\n      new String[]{TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE},\n      new int[]{1,0,1,0,1,0,1}\n    );\n  }\n\n","sourceOld":"  public void testReset() throws Exception {\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(new StringReader(\"please divide this sentence\"));\n    TokenStream filter = new ShingleFilter(wsTokenizer, 2);\n    TermAttribute termAtt = (TermAttribute) filter.getAttribute(TermAttribute.class);\n    assertTrue(filter.incrementToken());\n    assertEquals(\"(please,0,6)\", termAtt.toString());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"(please divide,0,13,type=shingle,posIncr=0)\", termAtt.toString());\n    wsTokenizer.reset(new StringReader(\"please divide this sentence\"));\n    filter.reset();\n    assertTrue(filter.incrementToken());\n    assertEquals(\"(please,0,6)\", termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85722042902595d9b0fbf38b7b57b139bdc12e4b","date":1264953677,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#testReset().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#testReset().mjava","sourceNew":"  public void testReset() throws Exception {\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(\"please divide this sentence\"));\n    TokenStream filter = new ShingleFilter(wsTokenizer, 2);\n    assertTokenStreamContents(filter,\n      new String[]{\"please\",\"please divide\",\"divide\",\"divide this\",\"this\",\"this sentence\",\"sentence\"},\n      new int[]{0,0,7,7,14,14,19}, new int[]{6,13,13,18,18,27,27},\n      new String[]{TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE},\n      new int[]{1,0,1,0,1,0,1}\n    );\n    wsTokenizer.reset(new StringReader(\"please divide this sentence\"));\n    assertTokenStreamContents(filter,\n      new String[]{\"please\",\"please divide\",\"divide\",\"divide this\",\"this\",\"this sentence\",\"sentence\"},\n      new int[]{0,0,7,7,14,14,19}, new int[]{6,13,13,18,18,27,27},\n      new String[]{TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE},\n      new int[]{1,0,1,0,1,0,1}\n    );\n  }\n\n","sourceOld":"  public void testReset() throws Exception {\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(new StringReader(\"please divide this sentence\"));\n    TokenStream filter = new ShingleFilter(wsTokenizer, 2);\n    assertTokenStreamContents(filter,\n      new String[]{\"please\",\"please divide\",\"divide\",\"divide this\",\"this\",\"this sentence\",\"sentence\"},\n      new int[]{0,0,7,7,14,14,19}, new int[]{6,13,13,18,18,27,27},\n      new String[]{TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE},\n      new int[]{1,0,1,0,1,0,1}\n    );\n    wsTokenizer.reset(new StringReader(\"please divide this sentence\"));\n    assertTokenStreamContents(filter,\n      new String[]{\"please\",\"please divide\",\"divide\",\"divide this\",\"this\",\"this sentence\",\"sentence\"},\n      new int[]{0,0,7,7,14,14,19}, new int[]{6,13,13,18,18,27,27},\n      new String[]{TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE},\n      new int[]{1,0,1,0,1,0,1}\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#testReset().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#testReset().mjava","sourceNew":"  public void testReset() throws Exception {\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"please divide this sentence\"));\n    TokenStream filter = new ShingleFilter(wsTokenizer, 2);\n    assertTokenStreamContents(filter,\n      new String[]{\"please\",\"please divide\",\"divide\",\"divide this\",\"this\",\"this sentence\",\"sentence\"},\n      new int[]{0,0,7,7,14,14,19}, new int[]{6,13,13,18,18,27,27},\n      new String[]{TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE},\n      new int[]{1,0,1,0,1,0,1}\n    );\n    wsTokenizer.reset(new StringReader(\"please divide this sentence\"));\n    assertTokenStreamContents(filter,\n      new String[]{\"please\",\"please divide\",\"divide\",\"divide this\",\"this\",\"this sentence\",\"sentence\"},\n      new int[]{0,0,7,7,14,14,19}, new int[]{6,13,13,18,18,27,27},\n      new String[]{TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE},\n      new int[]{1,0,1,0,1,0,1}\n    );\n  }\n\n","sourceOld":"  public void testReset() throws Exception {\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(\"please divide this sentence\"));\n    TokenStream filter = new ShingleFilter(wsTokenizer, 2);\n    assertTokenStreamContents(filter,\n      new String[]{\"please\",\"please divide\",\"divide\",\"divide this\",\"this\",\"this sentence\",\"sentence\"},\n      new int[]{0,0,7,7,14,14,19}, new int[]{6,13,13,18,18,27,27},\n      new String[]{TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE},\n      new int[]{1,0,1,0,1,0,1}\n    );\n    wsTokenizer.reset(new StringReader(\"please divide this sentence\"));\n    assertTokenStreamContents(filter,\n      new String[]{\"please\",\"please divide\",\"divide\",\"divide this\",\"this\",\"this sentence\",\"sentence\"},\n      new int[]{0,0,7,7,14,14,19}, new int[]{6,13,13,18,18,27,27},\n      new String[]{TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE},\n      new int[]{1,0,1,0,1,0,1}\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#testReset().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#testReset().mjava","sourceNew":"  public void testReset() throws Exception {\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"please divide this sentence\"));\n    TokenStream filter = new ShingleFilter(wsTokenizer, 2);\n    assertTokenStreamContents(filter,\n      new String[]{\"please\",\"please divide\",\"divide\",\"divide this\",\"this\",\"this sentence\",\"sentence\"},\n      new int[]{0,0,7,7,14,14,19}, new int[]{6,13,13,18,18,27,27},\n      new String[]{TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE},\n      new int[]{1,0,1,0,1,0,1}\n    );\n    wsTokenizer.reset(new StringReader(\"please divide this sentence\"));\n    assertTokenStreamContents(filter,\n      new String[]{\"please\",\"please divide\",\"divide\",\"divide this\",\"this\",\"this sentence\",\"sentence\"},\n      new int[]{0,0,7,7,14,14,19}, new int[]{6,13,13,18,18,27,27},\n      new String[]{TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE},\n      new int[]{1,0,1,0,1,0,1}\n    );\n  }\n\n","sourceOld":"  public void testReset() throws Exception {\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"please divide this sentence\"));\n    TokenStream filter = new ShingleFilter(wsTokenizer, 2);\n    assertTokenStreamContents(filter,\n      new String[]{\"please\",\"please divide\",\"divide\",\"divide this\",\"this\",\"this sentence\",\"sentence\"},\n      new int[]{0,0,7,7,14,14,19}, new int[]{6,13,13,18,18,27,27},\n      new String[]{TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE},\n      new int[]{1,0,1,0,1,0,1}\n    );\n    wsTokenizer.reset(new StringReader(\"please divide this sentence\"));\n    assertTokenStreamContents(filter,\n      new String[]{\"please\",\"please divide\",\"divide\",\"divide this\",\"this\",\"this sentence\",\"sentence\"},\n      new int[]{0,0,7,7,14,14,19}, new int[]{6,13,13,18,18,27,27},\n      new String[]{TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE,\"shingle\",TypeAttributeImpl.DEFAULT_TYPE},\n      new int[]{1,0,1,0,1,0,1}\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"18359c8e12d55f66c27cfe7babe86283f06a6aa5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["18359c8e12d55f66c27cfe7babe86283f06a6aa5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"]},"commit2Childs":{"18359c8e12d55f66c27cfe7babe86283f06a6aa5":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["18359c8e12d55f66c27cfe7babe86283f06a6aa5"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}