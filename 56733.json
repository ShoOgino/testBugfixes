{"path":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#rewrite(IndexSearcher).mjava","commits":[{"id":"a38488a55cc52553c9792da5044dd31b15128cd8","date":1510755769,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#rewrite(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return a DoubleValuesSource specialised for the given IndexSearcher\n   *\n   * Implementations should assume that this will only be called once.\n   * IndexReader-independent implementations can just return {@code this}\n   *\n   * Queries that use DoubleValuesSource objects should call rewrite() during\n   * {@link Query#createWeight(IndexSearcher, boolean, float)} rather than during\n   * {@link Query#rewrite(IndexReader)} to avoid IndexReader reference leakage\n   */\n  public abstract DoubleValuesSource rewrite(IndexSearcher reader) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#rewrite(IndexSearcher).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#rewrite(IndexSearcher).mjava","sourceNew":"  /**\n   * Return a DoubleValuesSource specialised for the given IndexSearcher\n   *\n   * Implementations should assume that this will only be called once.\n   * IndexReader-independent implementations can just return {@code this}\n   *\n   * Queries that use DoubleValuesSource objects should call rewrite() during\n   * {@link Query#createWeight(IndexSearcher, ScoreMode, float)} rather than during\n   * {@link Query#rewrite(IndexReader)} to avoid IndexReader reference leakage\n   */\n  public abstract DoubleValuesSource rewrite(IndexSearcher reader) throws IOException;\n\n","sourceOld":"  /**\n   * Return a DoubleValuesSource specialised for the given IndexSearcher\n   *\n   * Implementations should assume that this will only be called once.\n   * IndexReader-independent implementations can just return {@code this}\n   *\n   * Queries that use DoubleValuesSource objects should call rewrite() during\n   * {@link Query#createWeight(IndexSearcher, boolean, float)} rather than during\n   * {@link Query#rewrite(IndexReader)} to avoid IndexReader reference leakage\n   */\n  public abstract DoubleValuesSource rewrite(IndexSearcher reader) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#rewrite(IndexSearcher).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#rewrite(IndexSearcher).mjava","sourceNew":"  /**\n   * Return a DoubleValuesSource specialised for the given IndexSearcher\n   *\n   * Implementations should assume that this will only be called once.\n   * IndexReader-independent implementations can just return {@code this}\n   *\n   * Queries that use DoubleValuesSource objects should call rewrite() during\n   * {@link Query#createWeight(IndexSearcher, ScoreMode, float)} rather than during\n   * {@link Query#rewrite(IndexReader)} to avoid IndexReader reference leakage\n   */\n  public abstract DoubleValuesSource rewrite(IndexSearcher reader) throws IOException;\n\n","sourceOld":"  /**\n   * Return a DoubleValuesSource specialised for the given IndexSearcher\n   *\n   * Implementations should assume that this will only be called once.\n   * IndexReader-independent implementations can just return {@code this}\n   *\n   * Queries that use DoubleValuesSource objects should call rewrite() during\n   * {@link Query#createWeight(IndexSearcher, boolean, float)} rather than during\n   * {@link Query#rewrite(IndexReader)} to avoid IndexReader reference leakage\n   */\n  public abstract DoubleValuesSource rewrite(IndexSearcher reader) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ddb4f32bdf08eb4c1ff5e170783be99dcc007f4","date":1552558632,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#rewrite(IndexSearcher).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#rewrite(IndexSearcher).mjava","sourceNew":"  /**\n   * Return a DoubleValuesSource specialised for the given IndexSearcher\n   *\n   * Implementations should assume that this will only be called once.\n   * IndexReader-independent implementations can just return {@code this}\n   *\n   * Queries that use DoubleValuesSource objects should call rewrite() during\n   * {@link Query#createWeight(IndexSearcher, ScoreMode, float)} rather than during\n   * {@link Query#rewrite(IndexReader)} to avoid IndexReader reference leakage.\n   *\n   * For the same reason, implementations that cache references to the IndexSearcher\n   * should return a new object from this method.\n   */\n  public abstract DoubleValuesSource rewrite(IndexSearcher reader) throws IOException;\n\n","sourceOld":"  /**\n   * Return a DoubleValuesSource specialised for the given IndexSearcher\n   *\n   * Implementations should assume that this will only be called once.\n   * IndexReader-independent implementations can just return {@code this}\n   *\n   * Queries that use DoubleValuesSource objects should call rewrite() during\n   * {@link Query#createWeight(IndexSearcher, ScoreMode, float)} rather than during\n   * {@link Query#rewrite(IndexReader)} to avoid IndexReader reference leakage\n   */\n  public abstract DoubleValuesSource rewrite(IndexSearcher reader) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ddb4f32bdf08eb4c1ff5e170783be99dcc007f4":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a38488a55cc52553c9792da5044dd31b15128cd8"],"a38488a55cc52553c9792da5044dd31b15128cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ddb4f32bdf08eb4c1ff5e170783be99dcc007f4"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a38488a55cc52553c9792da5044dd31b15128cd8","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a38488a55cc52553c9792da5044dd31b15128cd8"],"2ddb4f32bdf08eb4c1ff5e170783be99dcc007f4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a38488a55cc52553c9792da5044dd31b15128cd8":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["2ddb4f32bdf08eb4c1ff5e170783be99dcc007f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}