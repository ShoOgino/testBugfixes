{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#randomMap().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#randomMap().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#randomMap().mjava","sourceNew":"  private NormalizeCharMap randomMap() {\n    Random random = random();\n    NormalizeCharMap map = new NormalizeCharMap();\n    // we can't add duplicate keys, or NormalizeCharMap gets angry\n    Set<String> keys = new HashSet<String>();\n    int num = random.nextInt(5);\n    //System.out.println(\"NormalizeCharMap=\");\n    for (int i = 0; i < num; i++) {\n      String key = _TestUtil.randomSimpleString(random);\n      if (!keys.contains(key)) {\n        String value = _TestUtil.randomSimpleString(random);\n        map.add(key, value);\n        keys.add(key);\n        //System.out.println(\"mapping: '\" + key + \"' => '\" + value + \"'\");\n      }\n    }\n    return map;\n  }\n\n","sourceOld":"  private NormalizeCharMap randomMap() {\n    Random random = random();\n    NormalizeCharMap map = new NormalizeCharMap();\n    // we can't add duplicate keys, or NormalizeCharMap gets angry\n    Set<String> keys = new HashSet<String>();\n    int num = random.nextInt(5);\n    //System.out.println(\"NormalizeCharMap=\");\n    for (int i = 0; i < num; i++) {\n      String key = _TestUtil.randomSimpleString(random);\n      if (!keys.contains(key)) {\n        String value = _TestUtil.randomSimpleString(random);\n        map.add(key, value);\n        keys.add(key);\n        //System.out.println(\"mapping: '\" + key + \"' => '\" + value + \"'\");\n      }\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e5bbc7f726dbcc466cb9b3c029d539a06f6545","date":1336310014,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#randomMap().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#randomMap().mjava","sourceNew":"  private NormalizeCharMap randomMap() {\n    Random random = random();\n    NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    // we can't add duplicate keys, or NormalizeCharMap gets angry\n    Set<String> keys = new HashSet<String>();\n    int num = random.nextInt(5);\n    //System.out.println(\"NormalizeCharMap=\");\n    for (int i = 0; i < num; i++) {\n      String key = _TestUtil.randomSimpleString(random);\n      if (!keys.contains(key) && key.length() != 0) {\n        String value = _TestUtil.randomSimpleString(random);\n        builder.add(key, value);\n        keys.add(key);\n        //System.out.println(\"mapping: '\" + key + \"' => '\" + value + \"'\");\n      }\n    }\n    return builder.build();\n  }\n\n","sourceOld":"  private NormalizeCharMap randomMap() {\n    Random random = random();\n    NormalizeCharMap map = new NormalizeCharMap();\n    // we can't add duplicate keys, or NormalizeCharMap gets angry\n    Set<String> keys = new HashSet<String>();\n    int num = random.nextInt(5);\n    //System.out.println(\"NormalizeCharMap=\");\n    for (int i = 0; i < num; i++) {\n      String key = _TestUtil.randomSimpleString(random);\n      if (!keys.contains(key)) {\n        String value = _TestUtil.randomSimpleString(random);\n        map.add(key, value);\n        keys.add(key);\n        //System.out.println(\"mapping: '\" + key + \"' => '\" + value + \"'\");\n      }\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#randomMap().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#randomMap().mjava","sourceNew":"  private NormalizeCharMap randomMap() {\n    Random random = random();\n    NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    // we can't add duplicate keys, or NormalizeCharMap gets angry\n    Set<String> keys = new HashSet<String>();\n    int num = random.nextInt(5);\n    //System.out.println(\"NormalizeCharMap=\");\n    for (int i = 0; i < num; i++) {\n      String key = TestUtil.randomSimpleString(random);\n      if (!keys.contains(key) && key.length() != 0) {\n        String value = TestUtil.randomSimpleString(random);\n        builder.add(key, value);\n        keys.add(key);\n        //System.out.println(\"mapping: '\" + key + \"' => '\" + value + \"'\");\n      }\n    }\n    return builder.build();\n  }\n\n","sourceOld":"  private NormalizeCharMap randomMap() {\n    Random random = random();\n    NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    // we can't add duplicate keys, or NormalizeCharMap gets angry\n    Set<String> keys = new HashSet<String>();\n    int num = random.nextInt(5);\n    //System.out.println(\"NormalizeCharMap=\");\n    for (int i = 0; i < num; i++) {\n      String key = _TestUtil.randomSimpleString(random);\n      if (!keys.contains(key) && key.length() != 0) {\n        String value = _TestUtil.randomSimpleString(random);\n        builder.add(key, value);\n        keys.add(key);\n        //System.out.println(\"mapping: '\" + key + \"' => '\" + value + \"'\");\n      }\n    }\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#randomMap().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#randomMap().mjava","sourceNew":"  private NormalizeCharMap randomMap() {\n    Random random = random();\n    NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    // we can't add duplicate keys, or NormalizeCharMap gets angry\n    Set<String> keys = new HashSet<>();\n    int num = random.nextInt(5);\n    //System.out.println(\"NormalizeCharMap=\");\n    for (int i = 0; i < num; i++) {\n      String key = TestUtil.randomSimpleString(random);\n      if (!keys.contains(key) && key.length() != 0) {\n        String value = TestUtil.randomSimpleString(random);\n        builder.add(key, value);\n        keys.add(key);\n        //System.out.println(\"mapping: '\" + key + \"' => '\" + value + \"'\");\n      }\n    }\n    return builder.build();\n  }\n\n","sourceOld":"  private NormalizeCharMap randomMap() {\n    Random random = random();\n    NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    // we can't add duplicate keys, or NormalizeCharMap gets angry\n    Set<String> keys = new HashSet<String>();\n    int num = random.nextInt(5);\n    //System.out.println(\"NormalizeCharMap=\");\n    for (int i = 0; i < num; i++) {\n      String key = TestUtil.randomSimpleString(random);\n      if (!keys.contains(key) && key.length() != 0) {\n        String value = TestUtil.randomSimpleString(random);\n        builder.add(key, value);\n        keys.add(key);\n        //System.out.println(\"mapping: '\" + key + \"' => '\" + value + \"'\");\n      }\n    }\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6613659748fe4411a7dcf85266e55db1f95f7315":["b4e5bbc7f726dbcc466cb9b3c029d539a06f6545"],"b4e5bbc7f726dbcc466cb9b3c029d539a06f6545":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b4e5bbc7f726dbcc466cb9b3c029d539a06f6545"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b4e5bbc7f726dbcc466cb9b3c029d539a06f6545":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}