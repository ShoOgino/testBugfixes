{"path":"solr/core/src/test/org/apache/solr/update/processor/RoutedAliasUpdateProcessorTest#createConfigSet(String).mjava","commits":[{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":1,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/RoutedAliasUpdateProcessorTest#createConfigSet(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#createConfigSet(String).mjava","sourceNew":"  void createConfigSet(String configName) throws SolrServerException, IOException {\n    // First create a configSet\n    // Then we create a collection with the name of the eventual config.\n    // We configure it, and ultimately delete the collection, leaving a modified config-set behind.\n    // Later we create the \"real\" collections referencing this modified config-set.\n    assertEquals(0, new ConfigSetAdminRequest.Create()\n        .setConfigSetName(configName)\n        .setBaseConfigSetName(\"_default\")\n        .process(getSolrClient()).getStatus());\n\n    CollectionAdminRequest.createCollection(configName, configName, 1, 1).process(getSolrClient());\n\n    // TODO: fix SOLR-13059, a where this wait isn't working ~0.3% of the time.\n    waitCol(1,configName);\n    // manipulate the config...\n    checkNoError(getSolrClient().request(new V2Request.Builder(\"/collections/\" + configName + \"/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'set-user-property' : {'update.autoCreateFields':false},\" + // no data driven\n            \"  'add-updateprocessor' : {\" +\n            \"    'name':'tolerant', 'class':'solr.TolerantUpdateProcessorFactory'\" +\n            \"  },\" +\n            // See TrackingUpdateProcessorFactory javadocs for details...\n            \"  'add-updateprocessor' : {\" +\n            \"    'name':'tracking-testSliceRouting', 'class':'solr.TrackingUpdateProcessorFactory', 'group':'\" + getTrackUpdatesGroupName() + \"'\" +\n            \"  },\" +\n            \"  'add-updateprocessor' : {\" + // for testing\n            \"    'name':'inc', 'class':'\" + IncrementURPFactory.class.getName() + \"',\" +\n            \"    'fieldName':'\" + getIntField() + \"'\" +\n            \"  },\" +\n            \"}\").build()));\n    // only sometimes test with \"tolerant\" URP:\n    final String urpNames = \"inc\" + (random().nextBoolean() ? \",tolerant\" : \"\");\n    checkNoError(getSolrClient().request(new V2Request.Builder(\"/collections/\" + configName + \"/config/params\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'set' : {\" +\n            \"    '_UPDATE' : {'processor':'\" + urpNames + \"'}\" +\n            \"  }\" +\n            \"}\").build()));\n\n    CollectionAdminRequest.deleteCollection(configName).process(getSolrClient());\n    assertTrue(\n        new ConfigSetAdminRequest.List().process(getSolrClient()).getConfigSets()\n            .contains(configName)\n    );\n  }\n\n","sourceOld":"  private void createConfigSet(String configName) throws SolrServerException, IOException {\n    // First create a configSet\n    // Then we create a collection with the name of the eventual config.\n    // We configure it, and ultimately delete the collection, leaving a modified config-set behind.\n    // Later we create the \"real\" collections referencing this modified config-set.\n    assertEquals(0, new ConfigSetAdminRequest.Create()\n        .setConfigSetName(configName)\n        .setBaseConfigSetName(\"_default\")\n        .process(solrClient).getStatus());\n\n    CollectionAdminRequest.createCollection(configName, configName, 1, 1).process(solrClient);\n\n    // TODO: fix SOLR-13059, a where this wait isn't working ~0.3% of the time.\n    waitCol(1,configName);\n    // manipulate the config...\n    checkNoError(solrClient.request(new V2Request.Builder(\"/collections/\" + configName + \"/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'set-user-property' : {'update.autoCreateFields':false},\" + // no data driven\n            \"  'add-updateprocessor' : {\" +\n            \"    'name':'tolerant', 'class':'solr.TolerantUpdateProcessorFactory'\" +\n            \"  },\" +\n            // See TrackingUpdateProcessorFactory javadocs for details...\n            \"  'add-updateprocessor' : {\" +\n            \"    'name':'tracking-testSliceRouting', 'class':'solr.TrackingUpdateProcessorFactory', 'group':'\" + getTrackUpdatesGroupName() + \"'\" +\n            \"  },\" +\n            \"  'add-updateprocessor' : {\" + // for testing\n            \"    'name':'inc', 'class':'\" + IncrementURPFactory.class.getName() + \"',\" +\n            \"    'fieldName':'\" + intField + \"'\" +\n            \"  },\" +\n            \"}\").build()));\n    // only sometimes test with \"tolerant\" URP:\n    final String urpNames = \"inc\" + (random().nextBoolean() ? \",tolerant\" : \"\");\n    checkNoError(solrClient.request(new V2Request.Builder(\"/collections/\" + configName + \"/config/params\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'set' : {\" +\n            \"    '_UPDATE' : {'processor':'\" + urpNames + \"'}\" +\n            \"  }\" +\n            \"}\").build()));\n\n    CollectionAdminRequest.deleteCollection(configName).process(solrClient);\n    assertTrue(\n        new ConfigSetAdminRequest.List().process(solrClient).getConfigSets()\n            .contains(configName)\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"105e345cf3c0abed3cb6c109274a379cb2655adc","date":1561038472,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/RoutedAliasUpdateProcessorTest#createConfigSet(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/RoutedAliasUpdateProcessorTest#createConfigSet(String).mjava","sourceNew":"  void createConfigSet(String configName) throws SolrServerException, IOException, InterruptedException {\n    // First create a configSet\n    // Then we create a collection with the name of the eventual config.\n    // We configure it, and ultimately delete the collection, leaving a modified config-set behind.\n    // Later we create the \"real\" collections referencing this modified config-set.\n    assertEquals(0, new ConfigSetAdminRequest.Create()\n        .setConfigSetName(configName)\n        .setBaseConfigSetName(\"_default\")\n        .process(getSolrClient()).getStatus());\n\n    CollectionAdminRequest.createCollection(configName, configName, 1, 1).process(getSolrClient());\n\n    // TODO: fix SOLR-13059, a where this wait isn't working ~0.3% of the time without the sleep.\n    waitCol(1,configName);\n    Thread.sleep(500); // YUCK but works (beasts 2500x20 ok vs failing in ~500x20 every time)\n    // manipulate the config...\n    checkNoError(getSolrClient().request(new V2Request.Builder(\"/collections/\" + configName + \"/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'set-user-property' : {'update.autoCreateFields':false},\" + // no data driven\n            \"  'add-updateprocessor' : {\" +\n            \"    'name':'tolerant', 'class':'solr.TolerantUpdateProcessorFactory'\" +\n            \"  },\" +\n            // See TrackingUpdateProcessorFactory javadocs for details...\n            \"  'add-updateprocessor' : {\" +\n            \"    'name':'tracking-testSliceRouting', 'class':'solr.TrackingUpdateProcessorFactory', 'group':'\" + getTrackUpdatesGroupName() + \"'\" +\n            \"  },\" +\n            \"  'add-updateprocessor' : {\" + // for testing\n            \"    'name':'inc', 'class':'\" + IncrementURPFactory.class.getName() + \"',\" +\n            \"    'fieldName':'\" + getIntField() + \"'\" +\n            \"  },\" +\n            \"}\").build()));\n    // only sometimes test with \"tolerant\" URP:\n    final String urpNames = \"inc\" + (random().nextBoolean() ? \",tolerant\" : \"\");\n    checkNoError(getSolrClient().request(new V2Request.Builder(\"/collections/\" + configName + \"/config/params\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'set' : {\" +\n            \"    '_UPDATE' : {'processor':'\" + urpNames + \"'}\" +\n            \"  }\" +\n            \"}\").build()));\n\n    CollectionAdminRequest.deleteCollection(configName).process(getSolrClient());\n    assertTrue(\n        new ConfigSetAdminRequest.List().process(getSolrClient()).getConfigSets()\n            .contains(configName)\n    );\n  }\n\n","sourceOld":"  void createConfigSet(String configName) throws SolrServerException, IOException {\n    // First create a configSet\n    // Then we create a collection with the name of the eventual config.\n    // We configure it, and ultimately delete the collection, leaving a modified config-set behind.\n    // Later we create the \"real\" collections referencing this modified config-set.\n    assertEquals(0, new ConfigSetAdminRequest.Create()\n        .setConfigSetName(configName)\n        .setBaseConfigSetName(\"_default\")\n        .process(getSolrClient()).getStatus());\n\n    CollectionAdminRequest.createCollection(configName, configName, 1, 1).process(getSolrClient());\n\n    // TODO: fix SOLR-13059, a where this wait isn't working ~0.3% of the time.\n    waitCol(1,configName);\n    // manipulate the config...\n    checkNoError(getSolrClient().request(new V2Request.Builder(\"/collections/\" + configName + \"/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'set-user-property' : {'update.autoCreateFields':false},\" + // no data driven\n            \"  'add-updateprocessor' : {\" +\n            \"    'name':'tolerant', 'class':'solr.TolerantUpdateProcessorFactory'\" +\n            \"  },\" +\n            // See TrackingUpdateProcessorFactory javadocs for details...\n            \"  'add-updateprocessor' : {\" +\n            \"    'name':'tracking-testSliceRouting', 'class':'solr.TrackingUpdateProcessorFactory', 'group':'\" + getTrackUpdatesGroupName() + \"'\" +\n            \"  },\" +\n            \"  'add-updateprocessor' : {\" + // for testing\n            \"    'name':'inc', 'class':'\" + IncrementURPFactory.class.getName() + \"',\" +\n            \"    'fieldName':'\" + getIntField() + \"'\" +\n            \"  },\" +\n            \"}\").build()));\n    // only sometimes test with \"tolerant\" URP:\n    final String urpNames = \"inc\" + (random().nextBoolean() ? \",tolerant\" : \"\");\n    checkNoError(getSolrClient().request(new V2Request.Builder(\"/collections/\" + configName + \"/config/params\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'set' : {\" +\n            \"    '_UPDATE' : {'processor':'\" + urpNames + \"'}\" +\n            \"  }\" +\n            \"}\").build()));\n\n    CollectionAdminRequest.deleteCollection(configName).process(getSolrClient());\n    assertTrue(\n        new ConfigSetAdminRequest.List().process(getSolrClient()).getConfigSets()\n            .contains(configName)\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"105e345cf3c0abed3cb6c109274a379cb2655adc":["b627755385655c7cd3fb296f17593658805cf4d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["105e345cf3c0abed3cb6c109274a379cb2655adc"]},"commit2Childs":{"105e345cf3c0abed3cb6c109274a379cb2655adc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b627755385655c7cd3fb296f17593658805cf4d5"],"b627755385655c7cd3fb296f17593658805cf4d5":["105e345cf3c0abed3cb6c109274a379cb2655adc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}