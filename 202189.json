{"path":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getContentType(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getContentType(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n    Transformer t = null;\n    try {\n      t = getTransformer(request);\n    } catch(Exception e) {\n      // TODO should our parent interface throw (IO)Exception?\n      throw new RuntimeException(\"getTransformer fails in getContentType\",e);\n    }\n    \n    final String mediaTypeFromXslt = t.getOutputProperty(\"media-type\");\n    if(mediaTypeFromXslt == null || mediaTypeFromXslt.length()==0) {\n      // This did not happen in my tests, mediaTypeFromXslt is set to \"text/xml\"\n      // if the XSLT transform does not contain an xsl:output element. Not sure\n      // if this is standard behavior or if it's just my JVM/libraries\n      return DEFAULT_CONTENT_TYPE;\n    }\n    return mediaTypeFromXslt;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getContentType(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n    Transformer t = null;\n    try {\n      t = getTransformer(request);\n    } catch(Exception e) {\n      // TODO should our parent interface throw (IO)Exception?\n      throw new RuntimeException(\"getTransformer fails in getContentType\",e);\n    }\n    \n    final String mediaTypeFromXslt = t.getOutputProperty(\"media-type\");\n    if(mediaTypeFromXslt == null || mediaTypeFromXslt.length()==0) {\n      // This did not happen in my tests, mediaTypeFromXslt is set to \"text/xml\"\n      // if the XSLT transform does not contain an xsl:output element. Not sure\n      // if this is standard behavior or if it's just my JVM/libraries\n      return DEFAULT_CONTENT_TYPE;\n    }\n    return mediaTypeFromXslt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getContentType(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/response/XSLTResponseWriter#getContentType(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n    Transformer t = null;\n    try {\n      t = getTransformer(request);\n    } catch(Exception e) {\n      // TODO should our parent interface throw (IO)Exception?\n      throw new RuntimeException(\"getTransformer fails in getContentType\",e);\n    }\n    \n    final String mediaTypeFromXslt = t.getOutputProperty(\"media-type\");\n    if(mediaTypeFromXslt == null || mediaTypeFromXslt.length()==0) {\n      // This did not happen in my tests, mediaTypeFromXslt is set to \"text/xml\"\n      // if the XSLT transform does not contain an xsl:output element. Not sure\n      // if this is standard behavior or if it's just my JVM/libraries\n      return DEFAULT_CONTENT_TYPE;\n    }\n    return mediaTypeFromXslt;\n  }\n\n","sourceOld":"  public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n    Transformer t = null;\n    try {\n      t = getTransformer(request);\n    } catch(Exception e) {\n      // TODO should our parent interface throw (IO)Exception?\n      throw new RuntimeException(\"getTransformer fails in getContentType\",e);\n    }\n    \n    final String mediaTypeFromXslt = t.getOutputProperty(\"media-type\");\n    if(mediaTypeFromXslt == null || mediaTypeFromXslt.length()==0) {\n      // This did not happen in my tests, mediaTypeFromXslt is set to \"text/xml\"\n      // if the XSLT transform does not contain an xsl:output element. Not sure\n      // if this is standard behavior or if it's just my JVM/libraries\n      return DEFAULT_CONTENT_TYPE;\n    }\n    return mediaTypeFromXslt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getContentType(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n    Transformer t = null;\n    try {\n      t = getTransformer(request);\n    } catch(Exception e) {\n      // TODO should our parent interface throw (IO)Exception?\n      throw new RuntimeException(\"getTransformer fails in getContentType\",e);\n    }\n    \n    final String mediaTypeFromXslt = t.getOutputProperty(\"media-type\");\n    if(mediaTypeFromXslt == null || mediaTypeFromXslt.length()==0) {\n      // This did not happen in my tests, mediaTypeFromXslt is set to \"text/xml\"\n      // if the XSLT transform does not contain an xsl:output element. Not sure\n      // if this is standard behavior or if it's just my JVM/libraries\n      return DEFAULT_CONTENT_TYPE;\n    }\n    return mediaTypeFromXslt;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a90b76c28e3d82d234874d6cbfff50c145c9b7b","date":1298853692,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getContentType(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getContentType(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n    Transformer t = null;\n    try {\n      t = getTransformer(request);\n    } catch(Exception e) {\n      // TODO should our parent interface throw (IO)Exception?\n      throw new RuntimeException(\"getTransformer fails in getContentType\",e);\n    }\n    \n    String mediaType = t.getOutputProperty(\"media-type\");\n    if (mediaType == null || mediaType.length()==0) {\n      // This did not happen in my tests, mediaTypeFromXslt is set to \"text/xml\"\n      // if the XSLT transform does not contain an xsl:output element. Not sure\n      // if this is standard behavior or if it's just my JVM/libraries\n      mediaType = DEFAULT_CONTENT_TYPE;\n    }\n    \n    if (!mediaType.contains(\"charset\")) {\n      String encoding = t.getOutputProperty(\"encoding\");\n      if (encoding == null || encoding.length()==0) {\n        encoding = \"UTF-8\";\n      }\n      mediaType = mediaType + \"; charset=\" + encoding;\n    }\n    \n    return mediaType;\n  }\n\n","sourceOld":"  public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n    Transformer t = null;\n    try {\n      t = getTransformer(request);\n    } catch(Exception e) {\n      // TODO should our parent interface throw (IO)Exception?\n      throw new RuntimeException(\"getTransformer fails in getContentType\",e);\n    }\n    \n    final String mediaTypeFromXslt = t.getOutputProperty(\"media-type\");\n    if(mediaTypeFromXslt == null || mediaTypeFromXslt.length()==0) {\n      // This did not happen in my tests, mediaTypeFromXslt is set to \"text/xml\"\n      // if the XSLT transform does not contain an xsl:output element. Not sure\n      // if this is standard behavior or if it's just my JVM/libraries\n      return DEFAULT_CONTENT_TYPE;\n    }\n    return mediaTypeFromXslt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getContentType(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getContentType(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n    Transformer t = null;\n    try {\n      t = getTransformer(request);\n    } catch(Exception e) {\n      // TODO should our parent interface throw (IO)Exception?\n      throw new RuntimeException(\"getTransformer fails in getContentType\",e);\n    }\n    \n    String mediaType = t.getOutputProperty(\"media-type\");\n    if (mediaType == null || mediaType.length()==0) {\n      // This did not happen in my tests, mediaTypeFromXslt is set to \"text/xml\"\n      // if the XSLT transform does not contain an xsl:output element. Not sure\n      // if this is standard behavior or if it's just my JVM/libraries\n      mediaType = DEFAULT_CONTENT_TYPE;\n    }\n    \n    if (!mediaType.contains(\"charset\")) {\n      String encoding = t.getOutputProperty(\"encoding\");\n      if (encoding == null || encoding.length()==0) {\n        encoding = \"UTF-8\";\n      }\n      mediaType = mediaType + \"; charset=\" + encoding;\n    }\n    \n    return mediaType;\n  }\n\n","sourceOld":"  public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n    Transformer t = null;\n    try {\n      t = getTransformer(request);\n    } catch(Exception e) {\n      // TODO should our parent interface throw (IO)Exception?\n      throw new RuntimeException(\"getTransformer fails in getContentType\",e);\n    }\n    \n    final String mediaTypeFromXslt = t.getOutputProperty(\"media-type\");\n    if(mediaTypeFromXslt == null || mediaTypeFromXslt.length()==0) {\n      // This did not happen in my tests, mediaTypeFromXslt is set to \"text/xml\"\n      // if the XSLT transform does not contain an xsl:output element. Not sure\n      // if this is standard behavior or if it's just my JVM/libraries\n      return DEFAULT_CONTENT_TYPE;\n    }\n    return mediaTypeFromXslt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getContentType(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getContentType(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n    Transformer t = null;\n    try {\n      t = getTransformer(request);\n    } catch(Exception e) {\n      // TODO should our parent interface throw (IO)Exception?\n      throw new RuntimeException(\"getTransformer fails in getContentType\",e);\n    }\n    \n    String mediaType = t.getOutputProperty(\"media-type\");\n    if (mediaType == null || mediaType.length()==0) {\n      // This did not happen in my tests, mediaTypeFromXslt is set to \"text/xml\"\n      // if the XSLT transform does not contain an xsl:output element. Not sure\n      // if this is standard behavior or if it's just my JVM/libraries\n      mediaType = DEFAULT_CONTENT_TYPE;\n    }\n    \n    if (!mediaType.contains(\"charset\")) {\n      String encoding = t.getOutputProperty(\"encoding\");\n      if (encoding == null || encoding.length()==0) {\n        encoding = \"UTF-8\";\n      }\n      mediaType = mediaType + \"; charset=\" + encoding;\n    }\n    \n    return mediaType;\n  }\n\n","sourceOld":"  public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n    Transformer t = null;\n    try {\n      t = getTransformer(request);\n    } catch(Exception e) {\n      // TODO should our parent interface throw (IO)Exception?\n      throw new RuntimeException(\"getTransformer fails in getContentType\",e);\n    }\n    \n    final String mediaTypeFromXslt = t.getOutputProperty(\"media-type\");\n    if(mediaTypeFromXslt == null || mediaTypeFromXslt.length()==0) {\n      // This did not happen in my tests, mediaTypeFromXslt is set to \"text/xml\"\n      // if the XSLT transform does not contain an xsl:output element. Not sure\n      // if this is standard behavior or if it's just my JVM/libraries\n      return DEFAULT_CONTENT_TYPE;\n    }\n    return mediaTypeFromXslt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/XSLTResponseWriter#getContentType(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getContentType(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n    Transformer t = null;\n    try {\n      t = getTransformer(request);\n    } catch(Exception e) {\n      // TODO should our parent interface throw (IO)Exception?\n      throw new RuntimeException(\"getTransformer fails in getContentType\",e);\n    }\n    \n    String mediaType = t.getOutputProperty(\"media-type\");\n    if (mediaType == null || mediaType.length()==0) {\n      // This did not happen in my tests, mediaTypeFromXslt is set to \"text/xml\"\n      // if the XSLT transform does not contain an xsl:output element. Not sure\n      // if this is standard behavior or if it's just my JVM/libraries\n      mediaType = DEFAULT_CONTENT_TYPE;\n    }\n    \n    if (!mediaType.contains(\"charset\")) {\n      String encoding = t.getOutputProperty(\"encoding\");\n      if (encoding == null || encoding.length()==0) {\n        encoding = \"UTF-8\";\n      }\n      mediaType = mediaType + \"; charset=\" + encoding;\n    }\n    \n    return mediaType;\n  }\n\n","sourceOld":"  public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n    Transformer t = null;\n    try {\n      t = getTransformer(request);\n    } catch(Exception e) {\n      // TODO should our parent interface throw (IO)Exception?\n      throw new RuntimeException(\"getTransformer fails in getContentType\",e);\n    }\n    \n    String mediaType = t.getOutputProperty(\"media-type\");\n    if (mediaType == null || mediaType.length()==0) {\n      // This did not happen in my tests, mediaTypeFromXslt is set to \"text/xml\"\n      // if the XSLT transform does not contain an xsl:output element. Not sure\n      // if this is standard behavior or if it's just my JVM/libraries\n      mediaType = DEFAULT_CONTENT_TYPE;\n    }\n    \n    if (!mediaType.contains(\"charset\")) {\n      String encoding = t.getOutputProperty(\"encoding\");\n      if (encoding == null || encoding.length()==0) {\n        encoding = \"UTF-8\";\n      }\n      mediaType = mediaType + \"; charset=\" + encoding;\n    }\n    \n    return mediaType;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/XSLTResponseWriter#getContentType(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getContentType(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n    Transformer t = null;\n    try {\n      t = getTransformer(request);\n    } catch(Exception e) {\n      // TODO should our parent interface throw (IO)Exception?\n      throw new RuntimeException(\"getTransformer fails in getContentType\",e);\n    }\n    \n    String mediaType = t.getOutputProperty(\"media-type\");\n    if (mediaType == null || mediaType.length()==0) {\n      // This did not happen in my tests, mediaTypeFromXslt is set to \"text/xml\"\n      // if the XSLT transform does not contain an xsl:output element. Not sure\n      // if this is standard behavior or if it's just my JVM/libraries\n      mediaType = DEFAULT_CONTENT_TYPE;\n    }\n    \n    if (!mediaType.contains(\"charset\")) {\n      String encoding = t.getOutputProperty(\"encoding\");\n      if (encoding == null || encoding.length()==0) {\n        encoding = \"UTF-8\";\n      }\n      mediaType = mediaType + \"; charset=\" + encoding;\n    }\n    \n    return mediaType;\n  }\n\n","sourceOld":"  public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n    Transformer t = null;\n    try {\n      t = getTransformer(request);\n    } catch(Exception e) {\n      // TODO should our parent interface throw (IO)Exception?\n      throw new RuntimeException(\"getTransformer fails in getContentType\",e);\n    }\n    \n    String mediaType = t.getOutputProperty(\"media-type\");\n    if (mediaType == null || mediaType.length()==0) {\n      // This did not happen in my tests, mediaTypeFromXslt is set to \"text/xml\"\n      // if the XSLT transform does not contain an xsl:output element. Not sure\n      // if this is standard behavior or if it's just my JVM/libraries\n      mediaType = DEFAULT_CONTENT_TYPE;\n    }\n    \n    if (!mediaType.contains(\"charset\")) {\n      String encoding = t.getOutputProperty(\"encoding\");\n      if (encoding == null || encoding.length()==0) {\n        encoding = \"UTF-8\";\n      }\n      mediaType = mediaType + \"; charset=\" + encoding;\n    }\n    \n    return mediaType;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/XSLTResponseWriter#getContentType(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getContentType(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n    Transformer t = null;\n    try {\n      t = getTransformer(request);\n    } catch(Exception e) {\n      // TODO should our parent interface throw (IO)Exception?\n      throw new RuntimeException(\"getTransformer fails in getContentType\",e);\n    }\n    \n    String mediaType = t.getOutputProperty(\"media-type\");\n    if (mediaType == null || mediaType.length()==0) {\n      // This did not happen in my tests, mediaTypeFromXslt is set to \"text/xml\"\n      // if the XSLT transform does not contain an xsl:output element. Not sure\n      // if this is standard behavior or if it's just my JVM/libraries\n      mediaType = DEFAULT_CONTENT_TYPE;\n    }\n    \n    if (!mediaType.contains(\"charset\")) {\n      String encoding = t.getOutputProperty(\"encoding\");\n      if (encoding == null || encoding.length()==0) {\n        encoding = \"UTF-8\";\n      }\n      mediaType = mediaType + \"; charset=\" + encoding;\n    }\n    \n    return mediaType;\n  }\n\n","sourceOld":"  public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n    Transformer t = null;\n    try {\n      t = getTransformer(request);\n    } catch(Exception e) {\n      // TODO should our parent interface throw (IO)Exception?\n      throw new RuntimeException(\"getTransformer fails in getContentType\",e);\n    }\n    \n    String mediaType = t.getOutputProperty(\"media-type\");\n    if (mediaType == null || mediaType.length()==0) {\n      // This did not happen in my tests, mediaTypeFromXslt is set to \"text/xml\"\n      // if the XSLT transform does not contain an xsl:output element. Not sure\n      // if this is standard behavior or if it's just my JVM/libraries\n      mediaType = DEFAULT_CONTENT_TYPE;\n    }\n    \n    if (!mediaType.contains(\"charset\")) {\n      String encoding = t.getOutputProperty(\"encoding\");\n      if (encoding == null || encoding.length()==0) {\n        encoding = \"UTF-8\";\n      }\n      mediaType = mediaType + \"; charset=\" + encoding;\n    }\n    \n    return mediaType;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["7a90b76c28e3d82d234874d6cbfff50c145c9b7b","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7a90b76c28e3d82d234874d6cbfff50c145c9b7b":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["1da8d55113b689b06716246649de6f62430f15c0","7a90b76c28e3d82d234874d6cbfff50c145c9b7b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["7a90b76c28e3d82d234874d6cbfff50c145c9b7b"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["1da8d55113b689b06716246649de6f62430f15c0","7a90b76c28e3d82d234874d6cbfff50c145c9b7b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7a90b76c28e3d82d234874d6cbfff50c145c9b7b"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7a90b76c28e3d82d234874d6cbfff50c145c9b7b":["c26f00b574427b55127e869b935845554afde1fa","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee"],"1da8d55113b689b06716246649de6f62430f15c0":["7a90b76c28e3d82d234874d6cbfff50c145c9b7b","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}