{"path":"lucene/backwards/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(Similarity,int,List[Scorer],List[Scorer],List[Scorer]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(Similarity,int,List[Scorer],List[Scorer],List[Scorer]).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(Similarity,int,List[Scorer],List[Scorer],List[Scorer]).mjava","sourceNew":"  /**\n   * Creates a {@link Scorer} with the given similarity and lists of required,\n   * prohibited and optional scorers. In no required scorers are added, at least\n   * one of the optional scorers will have to match during the search.\n   * \n   * @param similarity\n   *          The similarity to be used.\n   * @param minNrShouldMatch\n   *          The minimum number of optional added scorers that should match\n   *          during the search. In case no required scorers are added, at least\n   *          one of the optional scorers will have to match during the search.\n   * @param required\n   *          the list of required scorers.\n   * @param prohibited\n   *          the list of prohibited scorers.\n   * @param optional\n   *          the list of optional scorers.\n   */\n  public BooleanScorer2(Similarity similarity, int minNrShouldMatch,\n      List<Scorer> required, List<Scorer> prohibited, List<Scorer> optional) throws IOException {\n    super(similarity);\n    if (minNrShouldMatch < 0) {\n      throw new IllegalArgumentException(\"Minimum number of optional scorers should not be negative\");\n    }\n    coordinator = new Coordinator();\n    this.minNrShouldMatch = minNrShouldMatch;\n\n    optionalScorers = optional;\n    coordinator.maxCoord += optional.size();\n\n    requiredScorers = required;\n    coordinator.maxCoord += required.size();\n    \n    prohibitedScorers = prohibited;\n    \n    coordinator.init();\n    countingSumScorer = makeCountingSumScorer();\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link Scorer} with the given similarity and lists of required,\n   * prohibited and optional scorers. In no required scorers are added, at least\n   * one of the optional scorers will have to match during the search.\n   * \n   * @param similarity\n   *          The similarity to be used.\n   * @param minNrShouldMatch\n   *          The minimum number of optional added scorers that should match\n   *          during the search. In case no required scorers are added, at least\n   *          one of the optional scorers will have to match during the search.\n   * @param required\n   *          the list of required scorers.\n   * @param prohibited\n   *          the list of prohibited scorers.\n   * @param optional\n   *          the list of optional scorers.\n   */\n  public BooleanScorer2(Similarity similarity, int minNrShouldMatch,\n      List<Scorer> required, List<Scorer> prohibited, List<Scorer> optional) throws IOException {\n    super(similarity);\n    if (minNrShouldMatch < 0) {\n      throw new IllegalArgumentException(\"Minimum number of optional scorers should not be negative\");\n    }\n    coordinator = new Coordinator();\n    this.minNrShouldMatch = minNrShouldMatch;\n\n    optionalScorers = optional;\n    coordinator.maxCoord += optional.size();\n\n    requiredScorers = required;\n    coordinator.maxCoord += required.size();\n    \n    prohibitedScorers = prohibited;\n    \n    coordinator.init();\n    countingSumScorer = makeCountingSumScorer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(Similarity,int,List[Scorer],List[Scorer],List[Scorer]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a {@link Scorer} with the given similarity and lists of required,\n   * prohibited and optional scorers. In no required scorers are added, at least\n   * one of the optional scorers will have to match during the search.\n   * \n   * @param similarity\n   *          The similarity to be used.\n   * @param minNrShouldMatch\n   *          The minimum number of optional added scorers that should match\n   *          during the search. In case no required scorers are added, at least\n   *          one of the optional scorers will have to match during the search.\n   * @param required\n   *          the list of required scorers.\n   * @param prohibited\n   *          the list of prohibited scorers.\n   * @param optional\n   *          the list of optional scorers.\n   */\n  public BooleanScorer2(Similarity similarity, int minNrShouldMatch,\n      List<Scorer> required, List<Scorer> prohibited, List<Scorer> optional) throws IOException {\n    super(similarity);\n    if (minNrShouldMatch < 0) {\n      throw new IllegalArgumentException(\"Minimum number of optional scorers should not be negative\");\n    }\n    coordinator = new Coordinator();\n    this.minNrShouldMatch = minNrShouldMatch;\n\n    optionalScorers = optional;\n    coordinator.maxCoord += optional.size();\n\n    requiredScorers = required;\n    coordinator.maxCoord += required.size();\n    \n    prohibitedScorers = prohibited;\n    \n    coordinator.init();\n    countingSumScorer = makeCountingSumScorer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}