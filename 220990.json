{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/lv/LatvianStemmer#unpalatalize(char[],int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/lv/LatvianStemmer#unpalatalize(char[],int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/lv/LatvianStemmer#unpalatalize(char[],int).mjava","sourceNew":"  /**\n   * Most cases are handled except for the ambiguous ones:\n   * <ul>\n   *  <li> s -> š\n   *  <li> t -> š\n   *  <li> d -> ž\n   *  <li> z -> ž\n   * </ul>\n   */\n  private int unpalatalize(char s[], int len) {\n    // we check the character removed: if its -u then \n    // its 2,5, or 6 gen pl., and these two can only apply then.\n    if (s[len] == 'u') {\n      // kš -> kst\n      if (endsWith(s, len, \"kš\")) {\n        len++;\n        s[len-2] = 's';\n        s[len-1] = 't';\n        return len;\n      }\n      // ņņ -> nn\n      if (endsWith(s, len, \"ņņ\")) {\n        s[len-2] = 'n';\n        s[len-1] = 'n';\n        return len;\n      }\n    }\n    \n    // otherwise all other rules\n    if (endsWith(s, len, \"pj\") || endsWith(s, len, \"bj\") \n        || endsWith(s, len, \"mj\") || endsWith(s, len, \"vj\")) {\n      // labial consonant\n      return len-1;\n    } else if (endsWith(s, len, \"šņ\")) {\n      s[len-2] = 's';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"žņ\")) {\n      s[len-2] = 'z';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"šļ\")) {\n      s[len-2] = 's';\n      s[len-1] = 'l';\n      return len;\n    } else if (endsWith(s, len, \"žļ\")) {\n      s[len-2] = 'z';\n      s[len-1] = 'l';\n      return len;\n    } else if (endsWith(s, len, \"ļņ\")) {\n      s[len-2] = 'l';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"ļļ\")) {\n      s[len-2] = 'l';\n      s[len-1] = 'l';\n      return len;\n    } else if (s[len-1] == 'č') {\n      s[len-1] = 'c';\n      return len;\n    } else if (s[len-1] == 'ļ') {\n      s[len-1] = 'l';\n      return len;\n    } else if (s[len-1] == 'ņ') {\n      s[len-1] = 'n';\n      return len;\n    }\n    \n    return len;\n  }\n\n","sourceOld":"  /**\n   * Most cases are handled except for the ambiguous ones:\n   * <ul>\n   *  <li> s -> š\n   *  <li> t -> š\n   *  <li> d -> ž\n   *  <li> z -> ž\n   * </ul>\n   */\n  private int unpalatalize(char s[], int len) {\n    // we check the character removed: if its -u then \n    // its 2,5, or 6 gen pl., and these two can only apply then.\n    if (s[len] == 'u') {\n      // kš -> kst\n      if (endsWith(s, len, \"kš\")) {\n        len++;\n        s[len-2] = 's';\n        s[len-1] = 't';\n        return len;\n      }\n      // ņņ -> nn\n      if (endsWith(s, len, \"ņņ\")) {\n        s[len-2] = 'n';\n        s[len-1] = 'n';\n        return len;\n      }\n    }\n    \n    // otherwise all other rules\n    if (endsWith(s, len, \"pj\") || endsWith(s, len, \"bj\") \n        || endsWith(s, len, \"mj\") || endsWith(s, len, \"vj\")) {\n      // labial consonant\n      return len-1;\n    } else if (endsWith(s, len, \"šņ\")) {\n      s[len-2] = 's';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"žņ\")) {\n      s[len-2] = 'z';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"šļ\")) {\n      s[len-2] = 's';\n      s[len-1] = 'l';\n      return len;\n    } else if (endsWith(s, len, \"žļ\")) {\n      s[len-2] = 'z';\n      s[len-1] = 'l';\n      return len;\n    } else if (endsWith(s, len, \"ļņ\")) {\n      s[len-2] = 'l';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"ļļ\")) {\n      s[len-2] = 'l';\n      s[len-1] = 'l';\n      return len;\n    } else if (s[len-1] == 'č') {\n      s[len-1] = 'c';\n      return len;\n    } else if (s[len-1] == 'ļ') {\n      s[len-1] = 'l';\n      return len;\n    } else if (s[len-1] == 'ņ') {\n      s[len-1] = 'n';\n      return len;\n    }\n    \n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/lv/LatvianStemmer#unpalatalize(char[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/lv/LatvianStemmer#unpalatalize(char[],int).mjava","sourceNew":"  /**\n   * Most cases are handled except for the ambiguous ones:\n   * <ul>\n   *  <li> s -&gt; š\n   *  <li> t -&gt; š\n   *  <li> d -&gt; ž\n   *  <li> z -&gt; ž\n   * </ul>\n   */\n  private int unpalatalize(char s[], int len) {\n    // we check the character removed: if its -u then \n    // its 2,5, or 6 gen pl., and these two can only apply then.\n    if (s[len] == 'u') {\n      // kš -> kst\n      if (endsWith(s, len, \"kš\")) {\n        len++;\n        s[len-2] = 's';\n        s[len-1] = 't';\n        return len;\n      }\n      // ņņ -> nn\n      if (endsWith(s, len, \"ņņ\")) {\n        s[len-2] = 'n';\n        s[len-1] = 'n';\n        return len;\n      }\n    }\n    \n    // otherwise all other rules\n    if (endsWith(s, len, \"pj\") || endsWith(s, len, \"bj\") \n        || endsWith(s, len, \"mj\") || endsWith(s, len, \"vj\")) {\n      // labial consonant\n      return len-1;\n    } else if (endsWith(s, len, \"šņ\")) {\n      s[len-2] = 's';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"žņ\")) {\n      s[len-2] = 'z';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"šļ\")) {\n      s[len-2] = 's';\n      s[len-1] = 'l';\n      return len;\n    } else if (endsWith(s, len, \"žļ\")) {\n      s[len-2] = 'z';\n      s[len-1] = 'l';\n      return len;\n    } else if (endsWith(s, len, \"ļņ\")) {\n      s[len-2] = 'l';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"ļļ\")) {\n      s[len-2] = 'l';\n      s[len-1] = 'l';\n      return len;\n    } else if (s[len-1] == 'č') {\n      s[len-1] = 'c';\n      return len;\n    } else if (s[len-1] == 'ļ') {\n      s[len-1] = 'l';\n      return len;\n    } else if (s[len-1] == 'ņ') {\n      s[len-1] = 'n';\n      return len;\n    }\n    \n    return len;\n  }\n\n","sourceOld":"  /**\n   * Most cases are handled except for the ambiguous ones:\n   * <ul>\n   *  <li> s -> š\n   *  <li> t -> š\n   *  <li> d -> ž\n   *  <li> z -> ž\n   * </ul>\n   */\n  private int unpalatalize(char s[], int len) {\n    // we check the character removed: if its -u then \n    // its 2,5, or 6 gen pl., and these two can only apply then.\n    if (s[len] == 'u') {\n      // kš -> kst\n      if (endsWith(s, len, \"kš\")) {\n        len++;\n        s[len-2] = 's';\n        s[len-1] = 't';\n        return len;\n      }\n      // ņņ -> nn\n      if (endsWith(s, len, \"ņņ\")) {\n        s[len-2] = 'n';\n        s[len-1] = 'n';\n        return len;\n      }\n    }\n    \n    // otherwise all other rules\n    if (endsWith(s, len, \"pj\") || endsWith(s, len, \"bj\") \n        || endsWith(s, len, \"mj\") || endsWith(s, len, \"vj\")) {\n      // labial consonant\n      return len-1;\n    } else if (endsWith(s, len, \"šņ\")) {\n      s[len-2] = 's';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"žņ\")) {\n      s[len-2] = 'z';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"šļ\")) {\n      s[len-2] = 's';\n      s[len-1] = 'l';\n      return len;\n    } else if (endsWith(s, len, \"žļ\")) {\n      s[len-2] = 'z';\n      s[len-1] = 'l';\n      return len;\n    } else if (endsWith(s, len, \"ļņ\")) {\n      s[len-2] = 'l';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"ļļ\")) {\n      s[len-2] = 'l';\n      s[len-1] = 'l';\n      return len;\n    } else if (s[len-1] == 'č') {\n      s[len-1] = 'c';\n      return len;\n    } else if (s[len-1] == 'ļ') {\n      s[len-1] = 'l';\n      return len;\n    } else if (s[len-1] == 'ņ') {\n      s[len-1] = 'n';\n      return len;\n    }\n    \n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/lv/LatvianStemmer#unpalatalize(char[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/lv/LatvianStemmer#unpalatalize(char[],int).mjava","sourceNew":"  /**\n   * Most cases are handled except for the ambiguous ones:\n   * <ul>\n   *  <li> s -&gt; š\n   *  <li> t -&gt; š\n   *  <li> d -&gt; ž\n   *  <li> z -&gt; ž\n   * </ul>\n   */\n  private int unpalatalize(char s[], int len) {\n    // we check the character removed: if it's -u then \n    // it's 2,5, or 6 gen pl., and these two can only apply then.\n    if (s[len] == 'u') {\n      // kš -> kst\n      if (endsWith(s, len, \"kš\")) {\n        len++;\n        s[len-2] = 's';\n        s[len-1] = 't';\n        return len;\n      }\n      // ņņ -> nn\n      if (endsWith(s, len, \"ņņ\")) {\n        s[len-2] = 'n';\n        s[len-1] = 'n';\n        return len;\n      }\n    }\n    \n    // otherwise all other rules\n    if (endsWith(s, len, \"pj\") || endsWith(s, len, \"bj\") \n        || endsWith(s, len, \"mj\") || endsWith(s, len, \"vj\")) {\n      // labial consonant\n      return len-1;\n    } else if (endsWith(s, len, \"šņ\")) {\n      s[len-2] = 's';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"žņ\")) {\n      s[len-2] = 'z';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"šļ\")) {\n      s[len-2] = 's';\n      s[len-1] = 'l';\n      return len;\n    } else if (endsWith(s, len, \"žļ\")) {\n      s[len-2] = 'z';\n      s[len-1] = 'l';\n      return len;\n    } else if (endsWith(s, len, \"ļņ\")) {\n      s[len-2] = 'l';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"ļļ\")) {\n      s[len-2] = 'l';\n      s[len-1] = 'l';\n      return len;\n    } else if (s[len-1] == 'č') {\n      s[len-1] = 'c';\n      return len;\n    } else if (s[len-1] == 'ļ') {\n      s[len-1] = 'l';\n      return len;\n    } else if (s[len-1] == 'ņ') {\n      s[len-1] = 'n';\n      return len;\n    }\n    \n    return len;\n  }\n\n","sourceOld":"  /**\n   * Most cases are handled except for the ambiguous ones:\n   * <ul>\n   *  <li> s -&gt; š\n   *  <li> t -&gt; š\n   *  <li> d -&gt; ž\n   *  <li> z -&gt; ž\n   * </ul>\n   */\n  private int unpalatalize(char s[], int len) {\n    // we check the character removed: if its -u then \n    // its 2,5, or 6 gen pl., and these two can only apply then.\n    if (s[len] == 'u') {\n      // kš -> kst\n      if (endsWith(s, len, \"kš\")) {\n        len++;\n        s[len-2] = 's';\n        s[len-1] = 't';\n        return len;\n      }\n      // ņņ -> nn\n      if (endsWith(s, len, \"ņņ\")) {\n        s[len-2] = 'n';\n        s[len-1] = 'n';\n        return len;\n      }\n    }\n    \n    // otherwise all other rules\n    if (endsWith(s, len, \"pj\") || endsWith(s, len, \"bj\") \n        || endsWith(s, len, \"mj\") || endsWith(s, len, \"vj\")) {\n      // labial consonant\n      return len-1;\n    } else if (endsWith(s, len, \"šņ\")) {\n      s[len-2] = 's';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"žņ\")) {\n      s[len-2] = 'z';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"šļ\")) {\n      s[len-2] = 's';\n      s[len-1] = 'l';\n      return len;\n    } else if (endsWith(s, len, \"žļ\")) {\n      s[len-2] = 'z';\n      s[len-1] = 'l';\n      return len;\n    } else if (endsWith(s, len, \"ļņ\")) {\n      s[len-2] = 'l';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"ļļ\")) {\n      s[len-2] = 'l';\n      s[len-1] = 'l';\n      return len;\n    } else if (s[len-1] == 'č') {\n      s[len-1] = 'c';\n      return len;\n    } else if (s[len-1] == 'ļ') {\n      s[len-1] = 'l';\n      return len;\n    } else if (s[len-1] == 'ņ') {\n      s[len-1] = 'n';\n      return len;\n    }\n    \n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}