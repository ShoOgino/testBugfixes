{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#incrementToken().mjava","commits":[{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#next(Token).mjava","sourceNew":"    public boolean incrementToken() throws IOException {\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) return flush();\n            else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush();\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    offset--;\n                    return flush();\n                }\n                push(c);\n                return flush();\n\n            default:\n                if (length>0) return flush();\n                break;\n            }\n        }\n\n    }\n\n","sourceOld":"    public final Token next(final Token reusableToken) throws java.io.IOException {\n        assert reusableToken != null;\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) return flush(reusableToken);\n            else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush(reusableToken);\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    offset--;\n                    return flush(reusableToken);\n                }\n                push(c);\n                return flush(reusableToken);\n\n            default:\n                if (length>0) return flush(reusableToken);\n                break;\n            }\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcfa6b605478a6bdb1757ac4e9c696b4aecd36ef","date":1249179046,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#incrementToken().mjava","sourceNew":"    public boolean incrementToken() throws IOException {\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) return flush();\n            else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush();\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    offset--;\n                    return flush();\n                }\n                push(c);\n                return flush();\n\n            default:\n                if (length>0) return flush();\n                break;\n            }\n        }\n    }\n\n","sourceOld":"    public boolean incrementToken() throws IOException {\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) return flush();\n            else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush();\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    offset--;\n                    return flush();\n                }\n                push(c);\n                return flush();\n\n            default:\n                if (length>0) return flush();\n                break;\n            }\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"91d0e16ae1a83f5658ad4d16453fb88650460140","date":1250287302,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#incrementToken().mjava","sourceNew":"    public boolean incrementToken() throws IOException {\n        clearAttributes();\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) return flush();\n            else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush();\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    offset--;\n                    return flush();\n                }\n                push(c);\n                return flush();\n\n            default:\n                if (length>0) return flush();\n                break;\n            }\n        }\n    }\n\n","sourceOld":"    public boolean incrementToken() throws IOException {\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) return flush();\n            else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush();\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    offset--;\n                    return flush();\n                }\n                push(c);\n                return flush();\n\n            default:\n                if (length>0) return flush();\n                break;\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n        clearAttributes();\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) return flush();\n            else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush();\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    offset--;\n                    return flush();\n                }\n                push(c);\n                return flush();\n\n            default:\n                if (length>0) return flush();\n                break;\n            }\n        }\n    }\n\n","sourceOld":"    public boolean incrementToken() throws IOException {\n        clearAttributes();\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) return flush();\n            else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush();\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    offset--;\n                    return flush();\n                }\n                push(c);\n                return flush();\n\n            default:\n                if (length>0) return flush();\n                break;\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e64a71406348a5942a2166256238aff8313d0914","date":1263756357,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n        clearAttributes();\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) {\n              offset--;\n              return flush();\n            } else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush();\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    offset--;\n                    return flush();\n                }\n                push(c);\n                return flush();\n\n            default:\n                if (length>0) return flush();\n                break;\n            }\n        }\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n        clearAttributes();\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) return flush();\n            else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush();\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    offset--;\n                    return flush();\n                }\n                push(c);\n                return flush();\n\n            default:\n                if (length>0) return flush();\n                break;\n            }\n        }\n    }\n\n","bugFix":["6e39939cf282e1d1d540335185b8ef575e4b5272","9b5756469957918cac40a831acec9cf01c8c2bb3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n        clearAttributes();\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) {\n              offset--;\n              return flush();\n            } else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush();\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    offset--;\n                    return flush();\n                }\n                push(c);\n                return flush();\n\n            default:\n                if (length>0) return flush();\n                break;\n            }\n        }\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n        clearAttributes();\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) {\n              offset--;\n              return flush();\n            } else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush();\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    offset--;\n                    return flush();\n                }\n                push(c);\n                return flush();\n\n            default:\n                if (length>0) return flush();\n                break;\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91d0e16ae1a83f5658ad4d16453fb88650460140":["dcfa6b605478a6bdb1757ac4e9c696b4aecd36ef"],"dcfa6b605478a6bdb1757ac4e9c696b4aecd36ef":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"e64a71406348a5942a2166256238aff8313d0914":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["91d0e16ae1a83f5658ad4d16453fb88650460140"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e64a71406348a5942a2166256238aff8313d0914"]},"commit2Childs":{"91d0e16ae1a83f5658ad4d16453fb88650460140":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"dcfa6b605478a6bdb1757ac4e9c696b4aecd36ef":["91d0e16ae1a83f5658ad4d16453fb88650460140"],"e64a71406348a5942a2166256238aff8313d0914":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["dcfa6b605478a6bdb1757ac4e9c696b4aecd36ef"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["e64a71406348a5942a2166256238aff8313d0914"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}