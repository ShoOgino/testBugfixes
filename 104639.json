{"path":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.Writer#Writer(DataOutput,int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.Writer#Writer(DataOutput,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedInts.Writer#Writer(DataOutput,int,int).mjava","sourceNew":"    protected Writer(DataOutput out, int valueCount, int bitsPerValue)\n      throws IOException {\n      assert bitsPerValue <= 64;\n\n      this.out = out;\n      this.valueCount = valueCount;\n      this.bitsPerValue = bitsPerValue;\n      CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT);\n      out.writeVInt(bitsPerValue);\n      out.writeVInt(valueCount);\n    }\n\n","sourceOld":"    protected Writer(DataOutput out, int valueCount, int bitsPerValue)\n      throws IOException {\n      assert bitsPerValue <= 64;\n\n      this.out = out;\n      this.valueCount = valueCount;\n      this.bitsPerValue = bitsPerValue;\n      CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT);\n      out.writeVInt(bitsPerValue);\n      out.writeVInt(valueCount);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.Writer#Writer(DataOutput,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.Writer#Writer(DataOutput,int,int).mjava","sourceNew":"    protected Writer(DataOutput out, int valueCount, int bitsPerValue)\n      throws IOException {\n      assert bitsPerValue <= 64;\n\n      this.out = out;\n      this.valueCount = valueCount;\n      this.bitsPerValue = bitsPerValue;\n      CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT);\n      out.writeVInt(bitsPerValue);\n      out.writeVInt(valueCount);\n      out.writeVInt(getFormat());\n    }\n\n","sourceOld":"    protected Writer(DataOutput out, int valueCount, int bitsPerValue)\n      throws IOException {\n      assert bitsPerValue <= 64;\n\n      this.out = out;\n      this.valueCount = valueCount;\n      this.bitsPerValue = bitsPerValue;\n      CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT);\n      out.writeVInt(bitsPerValue);\n      out.writeVInt(valueCount);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55110eb60c5105294fc2ae7912d82b750865aa58","date":1341389822,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.Writer#Writer(DataOutput,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.Writer#Writer(DataOutput,int,int).mjava","sourceNew":"    protected Writer(DataOutput out, int valueCount, int bitsPerValue)\n      throws IOException {\n      assert bitsPerValue <= 64;\n      assert valueCount >= 0 || valueCount == -1;\n      this.out = out;\n      this.valueCount = valueCount;\n      this.bitsPerValue = bitsPerValue;\n    }\n\n","sourceOld":"    protected Writer(DataOutput out, int valueCount, int bitsPerValue)\n      throws IOException {\n      assert bitsPerValue <= 64;\n\n      this.out = out;\n      this.valueCount = valueCount;\n      this.bitsPerValue = bitsPerValue;\n      CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT);\n      out.writeVInt(bitsPerValue);\n      out.writeVInt(valueCount);\n      out.writeVInt(getFormat());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.Writer#Writer(DataOutput,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.Writer#Writer(DataOutput,int,int).mjava","sourceNew":"    protected Writer(DataOutput out, int valueCount, int bitsPerValue)\n      throws IOException {\n      assert bitsPerValue <= 64;\n      assert valueCount >= 0 || valueCount == -1;\n      this.out = out;\n      this.valueCount = valueCount;\n      this.bitsPerValue = bitsPerValue;\n    }\n\n","sourceOld":"    protected Writer(DataOutput out, int valueCount, int bitsPerValue)\n      throws IOException {\n      assert bitsPerValue <= 64;\n\n      this.out = out;\n      this.valueCount = valueCount;\n      this.bitsPerValue = bitsPerValue;\n      CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT);\n      out.writeVInt(bitsPerValue);\n      out.writeVInt(valueCount);\n      out.writeVInt(getFormat());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"035130b0c342f404c027af8c8870587c3741cb1e","date":1342898805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.Writer#Writer(DataOutput,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.Writer#Writer(DataOutput,int,int).mjava","sourceNew":"    protected Writer(DataOutput out, int valueCount, int bitsPerValue) {\n      assert bitsPerValue <= 64;\n      assert valueCount >= 0 || valueCount == -1;\n      this.out = out;\n      this.valueCount = valueCount;\n      this.bitsPerValue = bitsPerValue;\n    }\n\n","sourceOld":"    protected Writer(DataOutput out, int valueCount, int bitsPerValue)\n      throws IOException {\n      assert bitsPerValue <= 64;\n      assert valueCount >= 0 || valueCount == -1;\n      this.out = out;\n      this.valueCount = valueCount;\n      this.bitsPerValue = bitsPerValue;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.Writer#Writer(DataOutput,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.Writer#Writer(DataOutput,int,int).mjava","sourceNew":"    protected Writer(DataOutput out, int valueCount, int bitsPerValue) {\n      assert bitsPerValue <= 64;\n      assert valueCount >= 0 || valueCount == -1;\n      this.out = out;\n      this.valueCount = valueCount;\n      this.bitsPerValue = bitsPerValue;\n    }\n\n","sourceOld":"    protected Writer(DataOutput out, int valueCount, int bitsPerValue)\n      throws IOException {\n      assert bitsPerValue <= 64;\n      assert valueCount >= 0 || valueCount == -1;\n      this.out = out;\n      this.valueCount = valueCount;\n      this.bitsPerValue = bitsPerValue;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.Writer#Writer(DataOutput,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.Writer#Writer(DataOutput,int,int).mjava","sourceNew":"    protected Writer(DataOutput out, int valueCount, int bitsPerValue) {\n      assert bitsPerValue <= 64;\n      assert valueCount >= 0 || valueCount == -1;\n      this.out = out;\n      this.valueCount = valueCount;\n      this.bitsPerValue = bitsPerValue;\n    }\n\n","sourceOld":"    protected Writer(DataOutput out, int valueCount, int bitsPerValue)\n      throws IOException {\n      assert bitsPerValue <= 64;\n      assert valueCount >= 0 || valueCount == -1;\n      this.out = out;\n      this.valueCount = valueCount;\n      this.bitsPerValue = bitsPerValue;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["55110eb60c5105294fc2ae7912d82b750865aa58","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"55110eb60c5105294fc2ae7912d82b750865aa58":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4a470c93b2b0f8f51241f52705fc110a01f27ad2","55110eb60c5105294fc2ae7912d82b750865aa58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["55110eb60c5105294fc2ae7912d82b750865aa58","035130b0c342f404c027af8c8870587c3741cb1e"],"035130b0c342f404c027af8c8870587c3741cb1e":["fe33227f6805edab2036cbb80645cc4e2d1fa424"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"55110eb60c5105294fc2ae7912d82b750865aa58":["001b25b42373b22a52f399dbf072f1224632e8e6","fe33227f6805edab2036cbb80645cc4e2d1fa424","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["035130b0c342f404c027af8c8870587c3741cb1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"035130b0c342f404c027af8c8870587c3741cb1e":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["55110eb60c5105294fc2ae7912d82b750865aa58","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}