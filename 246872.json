{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testRange().mjava","commits":[{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertQueryEquals(\"[ a TO z}\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO z]\", null, \"{a TO z]\"); \n\n     assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n\n    assertQueryEquals(\"[* TO Z]\",null,\"[* TO z]\");\n    assertQueryEquals(\"[A TO *]\",null,\"[a TO *]\");\n    assertQueryEquals(\"[* TO *]\",null,\"[* TO *]\");\n    assertQueryEquals(\"[\\\\* TO \\\"*\\\"]\",null,\"[\\\\* TO \\\\*]\");\n }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertQueryEquals(\"[ a TO z}\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO z]\", null, \"{a TO z]\"); \n\n     assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n\n    assertQueryEquals(\"[* TO Z]\",null,\"[* TO z]\");\n    assertQueryEquals(\"[A TO *]\",null,\"[a TO *]\");\n    assertQueryEquals(\"[* TO *]\",null,\"[* TO *]\");\n    assertQueryEquals(\"[\\\\* TO \\\"*\\\"]\",null,\"[\\\\* TO \\\\*]\");\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e91b7614171e0a6a82351457c2870d2a0124ba9a","date":1312225025,"type":3,"author":"Adriano Crestani Campos","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testRange().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertQueryEquals(\"[ a TO z}\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO z]\", null, \"{a TO z]\"); \n\n     assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    // test open ranges\n    assertQueryEquals(\"[ a TO * ]\", null, \"[a TO *]\");\n    assertQueryEquals(\"[ * TO z ]\", null, \"[* TO z]\");\n    assertQueryEquals(\"[ * TO * ]\", null, \"[* TO *]\");\n    \n    // mixing exclude and include bounds\n    assertQueryEquals(\"{ a TO z ]\", null, \"{a TO z]\");\n    assertQueryEquals(\"[ a TO z }\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO * ]\", null, \"{a TO *]\");\n    assertQueryEquals(\"[ * TO z }\", null, \"[* TO z}\");\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n\n    assertQueryEquals(\"[* TO Z]\",null,\"[* TO z]\");\n    assertQueryEquals(\"[A TO *]\",null,\"[a TO *]\");\n    assertQueryEquals(\"[* TO *]\",null,\"[* TO *]\");\n    assertQueryEquals(\"[\\\\* TO \\\"*\\\"]\",null,\"[\\\\* TO \\\\*]\");\n }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertQueryEquals(\"[ a TO z}\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO z]\", null, \"{a TO z]\"); \n\n     assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n\n    assertQueryEquals(\"[* TO Z]\",null,\"[* TO z]\");\n    assertQueryEquals(\"[A TO *]\",null,\"[a TO *]\");\n    assertQueryEquals(\"[* TO *]\",null,\"[* TO *]\");\n    assertQueryEquals(\"[\\\\* TO \\\"*\\\"]\",null,\"[\\\\* TO \\\\*]\");\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5629050969c1e696c5dc14e8639f3e733e8e33c","date":1313606044,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRange().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertQueryEquals(\"[ a TO z}\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO z]\", null, \"{a TO z]\"); \n\n     assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    // test open ranges\n    assertQueryEquals(\"[ a TO * ]\", null, \"[a TO *]\");\n    assertQueryEquals(\"[ * TO z ]\", null, \"[* TO z]\");\n    assertQueryEquals(\"[ * TO * ]\", null, \"[* TO *]\");\n    \n    // mixing exclude and include bounds\n    assertQueryEquals(\"{ a TO z ]\", null, \"{a TO z]\");\n    assertQueryEquals(\"[ a TO z }\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO * ]\", null, \"{a TO *]\");\n    assertQueryEquals(\"[ * TO z }\", null, \"[* TO z}\");\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n\n    assertQueryEquals(\"[* TO Z]\",null,\"[* TO z]\");\n    assertQueryEquals(\"[A TO *]\",null,\"[a TO *]\");\n    assertQueryEquals(\"[* TO *]\",null,\"[* TO *]\");\n    assertQueryEquals(\"[\\\\* TO \\\"*\\\"]\",null,\"[\\\\* TO \\\\*]\");\n }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertQueryEquals(\"[ a TO z}\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO z]\", null, \"{a TO z]\"); \n\n     assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    // test open ranges\n    assertQueryEquals(\"[ a TO * ]\", null, \"[a TO *]\");\n    assertQueryEquals(\"[ * TO z ]\", null, \"[* TO z]\");\n    assertQueryEquals(\"[ * TO * ]\", null, \"[* TO *]\");\n    \n    // mixing exclude and include bounds\n    assertQueryEquals(\"{ a TO z ]\", null, \"{a TO z]\");\n    assertQueryEquals(\"[ a TO z }\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO * ]\", null, \"{a TO *]\");\n    assertQueryEquals(\"[ * TO z }\", null, \"[* TO z}\");\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n\n    assertQueryEquals(\"[* TO Z]\",null,\"[* TO z]\");\n    assertQueryEquals(\"[A TO *]\",null,\"[a TO *]\");\n    assertQueryEquals(\"[* TO *]\",null,\"[* TO *]\");\n    assertQueryEquals(\"[\\\\* TO \\\"*\\\"]\",null,\"[\\\\* TO \\\\*]\");\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5629050969c1e696c5dc14e8639f3e733e8e33c":["e91b7614171e0a6a82351457c2870d2a0124ba9a"],"e91b7614171e0a6a82351457c2870d2a0124ba9a":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5629050969c1e696c5dc14e8639f3e733e8e33c"]},"commit2Childs":{"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["e91b7614171e0a6a82351457c2870d2a0124ba9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"b5629050969c1e696c5dc14e8639f3e733e8e33c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e91b7614171e0a6a82351457c2870d2a0124ba9a":["b5629050969c1e696c5dc14e8639f3e733e8e33c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}