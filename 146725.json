{"path":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7edb20114e86ec883b0b08bd624eee852c565c06","date":1273941247,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockAnalyzer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ade882efb2f2235dafb176284c1e35dbdb1c126","date":1274043418,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockAnalyzer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e9bbb27241bcf9645bb2f724c137537aa69918a","date":1287780008,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertQueryEquals(\"[ a TO z}\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO z]\", null, \"{a TO z]\"); \n\n     assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","bugFix":null,"bugIntro":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"65e2e921993a78565715c17f099593272b4a92bd","date":1287833451,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertQueryEquals(\"[ a TO z}\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO z]\", null, \"{a TO z]\"); \n\n     assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n\n    assertQueryEquals(\"[* TO Z]\",null,\"[* TO z]\");\n    assertQueryEquals(\"[A TO *]\",null,\"[a TO *]\");\n    assertQueryEquals(\"[* TO *]\",null,\"[* TO *]\");\n    assertQueryEquals(\"[\\\\* TO \\\"*\\\"]\",null,\"[\\\\* TO \\\\*]\");\n }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertQueryEquals(\"[ a TO z}\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO z]\", null, \"{a TO z]\"); \n\n     assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n }\n\n","bugFix":null,"bugIntro":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertQueryEquals(\"[ a TO z}\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO z]\", null, \"{a TO z]\"); \n\n     assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n\n    assertQueryEquals(\"[* TO Z]\",null,\"[* TO z]\");\n    assertQueryEquals(\"[A TO *]\",null,\"[a TO *]\");\n    assertQueryEquals(\"[* TO *]\",null,\"[* TO *]\");\n    assertQueryEquals(\"[\\\\* TO \\\"*\\\"]\",null,\"[\\\\* TO \\\\*]\");\n }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertQueryEquals(\"[ a TO z}\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO z]\", null, \"{a TO z]\"); \n\n     assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n\n    assertQueryEquals(\"[* TO Z]\",null,\"[* TO z]\");\n    assertQueryEquals(\"[A TO *]\",null,\"[a TO *]\");\n    assertQueryEquals(\"[* TO *]\",null,\"[* TO *]\");\n    assertQueryEquals(\"[\\\\* TO \\\"*\\\"]\",null,\"[\\\\* TO \\\\*]\");\n }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertQueryEquals(\"[ a TO z}\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO z]\", null, \"{a TO z]\"); \n\n     assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n\n    assertQueryEquals(\"[* TO Z]\",null,\"[* TO z]\");\n    assertQueryEquals(\"[A TO *]\",null,\"[a TO *]\");\n    assertQueryEquals(\"[* TO *]\",null,\"[* TO *]\");\n    assertQueryEquals(\"[\\\\* TO \\\"*\\\"]\",null,\"[\\\\* TO \\\\*]\");\n }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertQueryEquals(\"[ a TO z}\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO z]\", null, \"{a TO z]\"); \n\n     assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n\n    assertQueryEquals(\"[* TO Z]\",null,\"[* TO z]\");\n    assertQueryEquals(\"[A TO *]\",null,\"[a TO *]\");\n    assertQueryEquals(\"[* TO *]\",null,\"[* TO *]\");\n    assertQueryEquals(\"[\\\\* TO \\\"*\\\"]\",null,\"[\\\\* TO \\\\*]\");\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertQueryEquals(\"[ a TO z}\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO z]\", null, \"{a TO z]\"); \n\n     assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n\n    assertQueryEquals(\"[* TO Z]\",null,\"[* TO z]\");\n    assertQueryEquals(\"[A TO *]\",null,\"[a TO *]\");\n    assertQueryEquals(\"[* TO *]\",null,\"[* TO *]\");\n    assertQueryEquals(\"[\\\\* TO \\\"*\\\"]\",null,\"[\\\\* TO \\\\*]\");\n }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertQueryEquals(\"[ a TO z}\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO z]\", null, \"{a TO z]\"); \n\n     assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n\n    assertQueryEquals(\"[* TO Z]\",null,\"[* TO z]\");\n    assertQueryEquals(\"[A TO *]\",null,\"[a TO *]\");\n    assertQueryEquals(\"[* TO *]\",null,\"[* TO *]\");\n    assertQueryEquals(\"[\\\\* TO \\\"*\\\"]\",null,\"[\\\\* TO \\\\*]\");\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertQueryEquals(\"[ a TO z}\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO z]\", null, \"{a TO z]\"); \n\n     assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n\n    assertQueryEquals(\"[* TO Z]\",null,\"[* TO z]\");\n    assertQueryEquals(\"[A TO *]\",null,\"[a TO *]\");\n    assertQueryEquals(\"[* TO *]\",null,\"[* TO *]\");\n    assertQueryEquals(\"[\\\\* TO \\\"*\\\"]\",null,\"[\\\\* TO \\\\*]\");\n }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertQueryEquals(\"[ a TO z}\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO z]\", null, \"{a TO z]\"); \n\n     assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n\n    assertQueryEquals(\"[* TO Z]\",null,\"[* TO z]\");\n    assertQueryEquals(\"[A TO *]\",null,\"[a TO *]\");\n    assertQueryEquals(\"[* TO *]\",null,\"[* TO *]\");\n    assertQueryEquals(\"[\\\\* TO \\\"*\\\"]\",null,\"[\\\\* TO \\\\*]\");\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertQueryEquals(\"[ a TO z}\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO z]\", null, \"{a TO z]\"); \n\n     assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n\n    assertQueryEquals(\"[* TO Z]\",null,\"[* TO z]\");\n    assertQueryEquals(\"[A TO *]\",null,\"[a TO *]\");\n    assertQueryEquals(\"[* TO *]\",null,\"[* TO *]\");\n    assertQueryEquals(\"[\\\\* TO \\\"*\\\"]\",null,\"[\\\\* TO \\\\*]\");\n }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertQueryEquals(\"[ a TO z}\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO z]\", null, \"{a TO z]\"); \n\n     assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n\n    assertQueryEquals(\"[* TO Z]\",null,\"[* TO z]\");\n    assertQueryEquals(\"[A TO *]\",null,\"[a TO *]\");\n    assertQueryEquals(\"[* TO *]\",null,\"[* TO *]\");\n    assertQueryEquals(\"[\\\\* TO \\\"*\\\"]\",null,\"[\\\\* TO \\\\*]\");\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertQueryEquals(\"[ a TO z}\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO z]\", null, \"{a TO z]\"); \n\n     assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n\n    assertQueryEquals(\"[* TO Z]\",null,\"[* TO z]\");\n    assertQueryEquals(\"[A TO *]\",null,\"[a TO *]\");\n    assertQueryEquals(\"[* TO *]\",null,\"[* TO *]\");\n    assertQueryEquals(\"[\\\\* TO \\\"*\\\"]\",null,\"[\\\\* TO \\\\*]\");\n }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertQueryEquals(\"[ a TO z}\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO z]\", null, \"{a TO z]\"); \n\n     assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n\n    assertQueryEquals(\"[* TO Z]\",null,\"[* TO z]\");\n    assertQueryEquals(\"[A TO *]\",null,\"[a TO *]\");\n    assertQueryEquals(\"[* TO *]\",null,\"[* TO *]\");\n    assertQueryEquals(\"[\\\\* TO \\\"*\\\"]\",null,\"[\\\\* TO \\\\*]\");\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7edb20114e86ec883b0b08bd624eee852c565c06":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"65e2e921993a78565715c17f099593272b4a92bd":["4e9bbb27241bcf9645bb2f724c137537aa69918a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["b12d3e81e0f95a4527b5703953c503f71120ffcc","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["2ade882efb2f2235dafb176284c1e35dbdb1c126","65e2e921993a78565715c17f099593272b4a92bd"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["2ade882efb2f2235dafb176284c1e35dbdb1c126","65e2e921993a78565715c17f099593272b4a92bd"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["65e2e921993a78565715c17f099593272b4a92bd"],"4e9bbb27241bcf9645bb2f724c137537aa69918a":["2ade882efb2f2235dafb176284c1e35dbdb1c126"],"a3776dccca01c11e7046323cfad46a3b4a471233":["65e2e921993a78565715c17f099593272b4a92bd","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ade882efb2f2235dafb176284c1e35dbdb1c126":["7edb20114e86ec883b0b08bd624eee852c565c06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7edb20114e86ec883b0b08bd624eee852c565c06":["2ade882efb2f2235dafb176284c1e35dbdb1c126"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"65e2e921993a78565715c17f099593272b4a92bd":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"4e9bbb27241bcf9645bb2f724c137537aa69918a":["65e2e921993a78565715c17f099593272b4a92bd"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2ade882efb2f2235dafb176284c1e35dbdb1c126":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4e9bbb27241bcf9645bb2f724c137537aa69918a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7edb20114e86ec883b0b08bd624eee852c565c06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}