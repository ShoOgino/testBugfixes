{"path":"solr/core/src/test/org/apache/solr/cloud/SplitShardTest#getNumDocs(CloudSolrClient).mjava","commits":[{"id":"88922bf68f0b509aba218f1b9e7ef5981b4d13bc","date":1570820823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SplitShardTest#getNumDocs(CloudSolrClient).mjava","pathOld":"/dev/null","sourceNew":"  long getNumDocs(CloudSolrClient client) throws Exception {\n    String collectionName = client.getDefaultCollection();\n    DocCollection collection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n    Collection<Slice> slices = collection.getSlices();\n\n    long totCount = 0;\n    for (Slice slice : slices) {\n      if (!slice.getState().equals(Slice.State.ACTIVE)) continue;\n      long lastReplicaCount = -1;\n      for (Replica replica : slice.getReplicas()) {\n        SolrClient replicaClient = getHttpSolrClient(replica.getBaseUrl() + \"/\" + replica.getCoreName());\n        long numFound = 0;\n        try {\n          numFound = replicaClient.query(params(\"q\", \"*:*\", \"distrib\", \"false\")).getResults().getNumFound();\n          log.info(\"Replica count=\" + numFound + \" for \" + replica);\n        } finally {\n          replicaClient.close();\n        }\n        if (lastReplicaCount >= 0) {\n          assertEquals(\"Replica doc count for \" + replica, lastReplicaCount, numFound);\n        }\n        lastReplicaCount = numFound;\n      }\n      totCount += lastReplicaCount;\n    }\n\n\n    long cloudClientDocs = client.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(\"Sum of shard count should equal distrib query doc count\", totCount, cloudClientDocs);\n    return totCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SplitShardTest#getNumDocs(CloudSolrClient).mjava","pathOld":"/dev/null","sourceNew":"  long getNumDocs(CloudSolrClient client) throws Exception {\n    String collectionName = client.getDefaultCollection();\n    DocCollection collection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n    Collection<Slice> slices = collection.getSlices();\n\n    long totCount = 0;\n    for (Slice slice : slices) {\n      if (!slice.getState().equals(Slice.State.ACTIVE)) continue;\n      long lastReplicaCount = -1;\n      for (Replica replica : slice.getReplicas()) {\n        SolrClient replicaClient = getHttpSolrClient(replica.getBaseUrl() + \"/\" + replica.getCoreName());\n        long numFound = 0;\n        try {\n          numFound = replicaClient.query(params(\"q\", \"*:*\", \"distrib\", \"false\")).getResults().getNumFound();\n          log.info(\"Replica count=\" + numFound + \" for \" + replica);\n        } finally {\n          replicaClient.close();\n        }\n        if (lastReplicaCount >= 0) {\n          assertEquals(\"Replica doc count for \" + replica, lastReplicaCount, numFound);\n        }\n        lastReplicaCount = numFound;\n      }\n      totCount += lastReplicaCount;\n    }\n\n\n    long cloudClientDocs = client.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(\"Sum of shard count should equal distrib query doc count\", totCount, cloudClientDocs);\n    return totCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SplitShardTest#getNumDocs(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SplitShardTest#getNumDocs(CloudSolrClient).mjava","sourceNew":"  long getNumDocs(CloudSolrClient client) throws Exception {\n    String collectionName = client.getDefaultCollection();\n    DocCollection collection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n    Collection<Slice> slices = collection.getSlices();\n\n    long totCount = 0;\n    for (Slice slice : slices) {\n      if (!slice.getState().equals(Slice.State.ACTIVE)) continue;\n      long lastReplicaCount = -1;\n      for (Replica replica : slice.getReplicas()) {\n        SolrClient replicaClient = getHttpSolrClient(replica.getBaseUrl() + \"/\" + replica.getCoreName());\n        long numFound = 0;\n        try {\n          numFound = replicaClient.query(params(\"q\", \"*:*\", \"distrib\", \"false\")).getResults().getNumFound();\n          log.info(\"Replica count={} for {}\", numFound, replica);\n        } finally {\n          replicaClient.close();\n        }\n        if (lastReplicaCount >= 0) {\n          assertEquals(\"Replica doc count for \" + replica, lastReplicaCount, numFound);\n        }\n        lastReplicaCount = numFound;\n      }\n      totCount += lastReplicaCount;\n    }\n\n\n    long cloudClientDocs = client.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(\"Sum of shard count should equal distrib query doc count\", totCount, cloudClientDocs);\n    return totCount;\n  }\n\n","sourceOld":"  long getNumDocs(CloudSolrClient client) throws Exception {\n    String collectionName = client.getDefaultCollection();\n    DocCollection collection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n    Collection<Slice> slices = collection.getSlices();\n\n    long totCount = 0;\n    for (Slice slice : slices) {\n      if (!slice.getState().equals(Slice.State.ACTIVE)) continue;\n      long lastReplicaCount = -1;\n      for (Replica replica : slice.getReplicas()) {\n        SolrClient replicaClient = getHttpSolrClient(replica.getBaseUrl() + \"/\" + replica.getCoreName());\n        long numFound = 0;\n        try {\n          numFound = replicaClient.query(params(\"q\", \"*:*\", \"distrib\", \"false\")).getResults().getNumFound();\n          log.info(\"Replica count=\" + numFound + \" for \" + replica);\n        } finally {\n          replicaClient.close();\n        }\n        if (lastReplicaCount >= 0) {\n          assertEquals(\"Replica doc count for \" + replica, lastReplicaCount, numFound);\n        }\n        lastReplicaCount = numFound;\n      }\n      totCount += lastReplicaCount;\n    }\n\n\n    long cloudClientDocs = client.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(\"Sum of shard count should equal distrib query doc count\", totCount, cloudClientDocs);\n    return totCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"88922bf68f0b509aba218f1b9e7ef5981b4d13bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["88922bf68f0b509aba218f1b9e7ef5981b4d13bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","88922bf68f0b509aba218f1b9e7ef5981b4d13bc"]},"commit2Childs":{"88922bf68f0b509aba218f1b9e7ef5981b4d13bc":["a966532d92cf9ba2856f15a8140151bb6b518e4b","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["88922bf68f0b509aba218f1b9e7ef5981b4d13bc","b0b597c65628ca9e73913a07e81691f8229bae35"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}