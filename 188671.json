{"path":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSortField#testNeedsScores().mjava","commits":[{"id":"3afb98260e27c955941c5512c5c726458db9ab07","date":1379619434,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSortField#testNeedsScores().mjava","pathOld":"/dev/null","sourceNew":"  public void testNeedsScores() throws Exception {\n    SimpleBindings bindings = new SimpleBindings();\n    // refers to score directly\n    Expression exprA = JavascriptCompiler.compile(\"_score\");\n    // constant\n    Expression exprB = JavascriptCompiler.compile(\"0\");\n    // field\n    Expression exprC = JavascriptCompiler.compile(\"intfield\");\n    \n    // score + constant\n    Expression exprD = JavascriptCompiler.compile(\"_score + 0\");\n    // field + constant\n    Expression exprE = JavascriptCompiler.compile(\"intfield + 0\");\n    \n    // expression + constant (score ref'd)\n    Expression exprF = JavascriptCompiler.compile(\"a + 0\");\n    // expression + constant\n    Expression exprG = JavascriptCompiler.compile(\"e + 0\");\n    \n    // several variables (score ref'd)\n    Expression exprH = JavascriptCompiler.compile(\"b / c + e * g - sqrt(f)\");\n    // several variables\n    Expression exprI = JavascriptCompiler.compile(\"b / c + e * g\");\n    \n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n    bindings.add(new SortField(\"intfield\", SortField.Type.INT));\n    bindings.add(\"a\", exprA);\n    bindings.add(\"b\", exprB);\n    bindings.add(\"c\", exprC);\n    bindings.add(\"d\", exprD);\n    bindings.add(\"e\", exprE);\n    bindings.add(\"f\", exprF);\n    bindings.add(\"g\", exprG);\n    bindings.add(\"h\", exprH);\n    bindings.add(\"i\", exprI);\n    \n    assertTrue(exprA.getSortField(bindings, true).needsScores());\n    assertFalse(exprB.getSortField(bindings, true).needsScores());\n    assertFalse(exprC.getSortField(bindings, true).needsScores());\n    assertTrue(exprD.getSortField(bindings, true).needsScores());\n    assertFalse(exprE.getSortField(bindings, true).needsScores());\n    assertTrue(exprF.getSortField(bindings, true).needsScores());\n    assertFalse(exprG.getSortField(bindings, true).needsScores());\n    assertTrue(exprH.getSortField(bindings, true).needsScores());\n    assertFalse(exprI.getSortField(bindings, false).needsScores());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27d4663d3f6f21a687874d174b49d55645ce99db","date":1587726496,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSortField#testNeedsScores().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSortField#testNeedsScores().mjava","sourceNew":"  public void testNeedsScores() throws Exception {\n    SimpleBindings bindings = new SimpleBindings();\n    // refers to score directly\n    Expression exprA = JavascriptCompiler.compile(\"_score\");\n    // constant\n    Expression exprB = JavascriptCompiler.compile(\"0\");\n    // field\n    Expression exprC = JavascriptCompiler.compile(\"intfield\");\n    \n    // score + constant\n    Expression exprD = JavascriptCompiler.compile(\"_score + 0\");\n    // field + constant\n    Expression exprE = JavascriptCompiler.compile(\"intfield + 0\");\n    \n    // expression + constant (score ref'd)\n    Expression exprF = JavascriptCompiler.compile(\"a + 0\");\n    // expression + constant\n    Expression exprG = JavascriptCompiler.compile(\"e + 0\");\n    \n    // several variables (score ref'd)\n    Expression exprH = JavascriptCompiler.compile(\"b / c + e * g - sqrt(f)\");\n    // several variables\n    Expression exprI = JavascriptCompiler.compile(\"b / c + e * g\");\n\n    bindings.add(\"_score\", DoubleValuesSource.SCORES);\n    bindings.add(\"intfield\", DoubleValuesSource.fromIntField(\"intfield\"));\n    bindings.add(\"a\", exprA);\n    bindings.add(\"b\", exprB);\n    bindings.add(\"c\", exprC);\n    bindings.add(\"d\", exprD);\n    bindings.add(\"e\", exprE);\n    bindings.add(\"f\", exprF);\n    bindings.add(\"g\", exprG);\n    bindings.add(\"h\", exprH);\n    bindings.add(\"i\", exprI);\n    \n    assertTrue(exprA.getSortField(bindings, true).needsScores());\n    assertFalse(exprB.getSortField(bindings, true).needsScores());\n    assertFalse(exprC.getSortField(bindings, true).needsScores());\n    assertTrue(exprD.getSortField(bindings, true).needsScores());\n    assertFalse(exprE.getSortField(bindings, true).needsScores());\n    assertTrue(exprF.getSortField(bindings, true).needsScores());\n    assertFalse(exprG.getSortField(bindings, true).needsScores());\n    assertTrue(exprH.getSortField(bindings, true).needsScores());\n    assertFalse(exprI.getSortField(bindings, false).needsScores());\n  }\n\n","sourceOld":"  public void testNeedsScores() throws Exception {\n    SimpleBindings bindings = new SimpleBindings();\n    // refers to score directly\n    Expression exprA = JavascriptCompiler.compile(\"_score\");\n    // constant\n    Expression exprB = JavascriptCompiler.compile(\"0\");\n    // field\n    Expression exprC = JavascriptCompiler.compile(\"intfield\");\n    \n    // score + constant\n    Expression exprD = JavascriptCompiler.compile(\"_score + 0\");\n    // field + constant\n    Expression exprE = JavascriptCompiler.compile(\"intfield + 0\");\n    \n    // expression + constant (score ref'd)\n    Expression exprF = JavascriptCompiler.compile(\"a + 0\");\n    // expression + constant\n    Expression exprG = JavascriptCompiler.compile(\"e + 0\");\n    \n    // several variables (score ref'd)\n    Expression exprH = JavascriptCompiler.compile(\"b / c + e * g - sqrt(f)\");\n    // several variables\n    Expression exprI = JavascriptCompiler.compile(\"b / c + e * g\");\n    \n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n    bindings.add(new SortField(\"intfield\", SortField.Type.INT));\n    bindings.add(\"a\", exprA);\n    bindings.add(\"b\", exprB);\n    bindings.add(\"c\", exprC);\n    bindings.add(\"d\", exprD);\n    bindings.add(\"e\", exprE);\n    bindings.add(\"f\", exprF);\n    bindings.add(\"g\", exprG);\n    bindings.add(\"h\", exprH);\n    bindings.add(\"i\", exprI);\n    \n    assertTrue(exprA.getSortField(bindings, true).needsScores());\n    assertFalse(exprB.getSortField(bindings, true).needsScores());\n    assertFalse(exprC.getSortField(bindings, true).needsScores());\n    assertTrue(exprD.getSortField(bindings, true).needsScores());\n    assertFalse(exprE.getSortField(bindings, true).needsScores());\n    assertTrue(exprF.getSortField(bindings, true).needsScores());\n    assertFalse(exprG.getSortField(bindings, true).needsScores());\n    assertTrue(exprH.getSortField(bindings, true).needsScores());\n    assertFalse(exprI.getSortField(bindings, false).needsScores());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"27d4663d3f6f21a687874d174b49d55645ce99db":["3afb98260e27c955941c5512c5c726458db9ab07"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3afb98260e27c955941c5512c5c726458db9ab07":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["27d4663d3f6f21a687874d174b49d55645ce99db"]},"commit2Childs":{"27d4663d3f6f21a687874d174b49d55645ce99db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3afb98260e27c955941c5512c5c726458db9ab07"],"3afb98260e27c955941c5512c5c726458db9ab07":["27d4663d3f6f21a687874d174b49d55645ce99db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}