{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeLineQuery#queryMatches(byte[],int[]).mjava","commits":[{"id":"2aeefba8262036d422d639e48c49d51316bea138","date":1545148224,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeLineQuery#queryMatches(byte[],int[]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected boolean queryMatches(byte[] t, int[] scratchTriangle) {\n    LatLonShape.decodeTriangle(t, scratchTriangle);\n\n    double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle[0]);\n    double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle[1]);\n    double blat = GeoEncodingUtils.decodeLatitude(scratchTriangle[2]);\n    double blon = GeoEncodingUtils.decodeLongitude(scratchTriangle[3]);\n    double clat = GeoEncodingUtils.decodeLatitude(scratchTriangle[4]);\n    double clon = GeoEncodingUtils.decodeLongitude(scratchTriangle[5]);\n\n    if (queryRelation == LatLonShape.QueryRelation.WITHIN) {\n      return line2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_INSIDE_QUERY;\n    }\n    // INTERSECTS\n    return line2D.relateTriangle(alon, alat, blon, blat, clon, clat) != Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e8251ad51618827e557dd369f16921a666914b5","date":1548082828,"type":5,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeLineQuery#queryMatches(byte[],int[],QueryRelation).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeLineQuery#queryMatches(byte[],int[]).mjava","sourceNew":"  @Override\n  protected boolean queryMatches(byte[] t, int[] scratchTriangle, QueryRelation queryRelation) {\n    LatLonShape.decodeTriangle(t, scratchTriangle);\n\n    double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle[0]);\n    double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle[1]);\n    double blat = GeoEncodingUtils.decodeLatitude(scratchTriangle[2]);\n    double blon = GeoEncodingUtils.decodeLongitude(scratchTriangle[3]);\n    double clat = GeoEncodingUtils.decodeLatitude(scratchTriangle[4]);\n    double clon = GeoEncodingUtils.decodeLongitude(scratchTriangle[5]);\n\n    if (queryRelation == LatLonShape.QueryRelation.WITHIN) {\n      return line2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_INSIDE_QUERY;\n    }\n    // INTERSECTS\n    return line2D.relateTriangle(alon, alat, blon, blat, clon, clat) != Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  @Override\n  protected boolean queryMatches(byte[] t, int[] scratchTriangle) {\n    LatLonShape.decodeTriangle(t, scratchTriangle);\n\n    double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle[0]);\n    double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle[1]);\n    double blat = GeoEncodingUtils.decodeLatitude(scratchTriangle[2]);\n    double blon = GeoEncodingUtils.decodeLongitude(scratchTriangle[3]);\n    double clat = GeoEncodingUtils.decodeLatitude(scratchTriangle[4]);\n    double clon = GeoEncodingUtils.decodeLongitude(scratchTriangle[5]);\n\n    if (queryRelation == LatLonShape.QueryRelation.WITHIN) {\n      return line2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_INSIDE_QUERY;\n    }\n    // INTERSECTS\n    return line2D.relateTriangle(alon, alat, blon, blat, clon, clat) != Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":5,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeLineQuery#queryMatches(byte[],int[],QueryRelation).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeLineQuery#queryMatches(byte[],int[]).mjava","sourceNew":"  @Override\n  protected boolean queryMatches(byte[] t, int[] scratchTriangle, QueryRelation queryRelation) {\n    LatLonShape.decodeTriangle(t, scratchTriangle);\n\n    double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle[0]);\n    double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle[1]);\n    double blat = GeoEncodingUtils.decodeLatitude(scratchTriangle[2]);\n    double blon = GeoEncodingUtils.decodeLongitude(scratchTriangle[3]);\n    double clat = GeoEncodingUtils.decodeLatitude(scratchTriangle[4]);\n    double clon = GeoEncodingUtils.decodeLongitude(scratchTriangle[5]);\n\n    if (queryRelation == LatLonShape.QueryRelation.WITHIN) {\n      return line2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_INSIDE_QUERY;\n    }\n    // INTERSECTS\n    return line2D.relateTriangle(alon, alat, blon, blat, clon, clat) != Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  @Override\n  protected boolean queryMatches(byte[] t, int[] scratchTriangle) {\n    LatLonShape.decodeTriangle(t, scratchTriangle);\n\n    double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle[0]);\n    double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle[1]);\n    double blat = GeoEncodingUtils.decodeLatitude(scratchTriangle[2]);\n    double blon = GeoEncodingUtils.decodeLongitude(scratchTriangle[3]);\n    double clat = GeoEncodingUtils.decodeLatitude(scratchTriangle[4]);\n    double clon = GeoEncodingUtils.decodeLongitude(scratchTriangle[5]);\n\n    if (queryRelation == LatLonShape.QueryRelation.WITHIN) {\n      return line2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_INSIDE_QUERY;\n    }\n    // INTERSECTS\n    return line2D.relateTriangle(alon, alat, blon, blat, clon, clat) != Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2aeefba8262036d422d639e48c49d51316bea138":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5e8251ad51618827e557dd369f16921a666914b5":["2aeefba8262036d422d639e48c49d51316bea138"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e8251ad51618827e557dd369f16921a666914b5"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["2aeefba8262036d422d639e48c49d51316bea138","5e8251ad51618827e557dd369f16921a666914b5"]},"commit2Childs":{"2aeefba8262036d422d639e48c49d51316bea138":["5e8251ad51618827e557dd369f16921a666914b5","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2aeefba8262036d422d639e48c49d51316bea138"],"5e8251ad51618827e557dd369f16921a666914b5":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}