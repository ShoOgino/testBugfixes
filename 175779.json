{"path":"src/java/org/apache/lucene/search/BooleanClause#BooleanClause(Query,boolean,boolean).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanClause#BooleanClause(Query,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Constructs a BooleanClause with query <code>q</code>, required\n    <code>r</code> and prohibited <code>p</code>. */ \n  public BooleanClause(Query q, boolean r, boolean p) {\n    query = q;\n    required = r;\n    prohibited = p;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d1fc81afb0c32e0b7589e656cceb5cf177093fa","date":1093637352,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanClause#BooleanClause(Query,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanClause#BooleanClause(Query,boolean,boolean).mjava","sourceNew":"  /** Constructs a BooleanClause with query <code>q</code>, required\n   * <code>r</code> and prohibited <code>p</code>.\n   * @deprecated use BooleanClause(Query, Occur) instead\n   * <ul>\n   *  <li>For BooleanClause(query, true, false) use BooleanClause(query, BooleanClause.Occur.MUST)\n   *  <li>For BooleanClause(query, false, false) use BooleanClause(query, BooleanClause.Occur.SHOULD)\n   *  <li>For BooleanClause(query, false, true) use BooleanClause(query, BooleanClause.Occur.MUST_NOT)\n   * </ul>\n   */ \n  public BooleanClause(Query q, boolean r, boolean p) {\n    // TODO: remove for Lucene 2.0\n    query = q;\n    required = r;\n    prohibited = p;\n  }\n\n","sourceOld":"  /** Constructs a BooleanClause with query <code>q</code>, required\n    <code>r</code> and prohibited <code>p</code>. */ \n  public BooleanClause(Query q, boolean r, boolean p) {\n    query = q;\n    required = r;\n    prohibited = p;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06fe476d5a4c6372bafb2e6d2c5abdd8552ba95e","date":1107473726,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanClause#BooleanClause(Query,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanClause#BooleanClause(Query,boolean,boolean).mjava","sourceNew":"  /** Constructs a BooleanClause with query <code>q</code>, required\n   * <code>r</code> and prohibited <code>p</code>.\n   * @deprecated use BooleanClause(Query, Occur) instead\n   * <ul>\n   *  <li>For BooleanClause(query, true, false) use BooleanClause(query, BooleanClause.Occur.MUST)\n   *  <li>For BooleanClause(query, false, false) use BooleanClause(query, BooleanClause.Occur.SHOULD)\n   *  <li>For BooleanClause(query, false, true) use BooleanClause(query, BooleanClause.Occur.MUST_NOT)\n   * </ul>\n   */ \n  public BooleanClause(Query q, boolean r, boolean p) {\n    // TODO: remove for Lucene 2.0\n    query = q;\n    required = r;\n    prohibited = p;\n    if (required) {\n      if (prohibited) {\n        // prohibited && required doesn't make sense, but we want the old behaviour:\n        occur = Occur.MUST_NOT;\n      } else {\n         occur = Occur.MUST;\n      }\n    } else {\n      if (prohibited) {\n         occur = Occur.MUST_NOT;\n      } else {\n         occur = Occur.SHOULD;\n      }\n    }\n  }\n\n","sourceOld":"  /** Constructs a BooleanClause with query <code>q</code>, required\n   * <code>r</code> and prohibited <code>p</code>.\n   * @deprecated use BooleanClause(Query, Occur) instead\n   * <ul>\n   *  <li>For BooleanClause(query, true, false) use BooleanClause(query, BooleanClause.Occur.MUST)\n   *  <li>For BooleanClause(query, false, false) use BooleanClause(query, BooleanClause.Occur.SHOULD)\n   *  <li>For BooleanClause(query, false, true) use BooleanClause(query, BooleanClause.Occur.MUST_NOT)\n   * </ul>\n   */ \n  public BooleanClause(Query q, boolean r, boolean p) {\n    // TODO: remove for Lucene 2.0\n    query = q;\n    required = r;\n    prohibited = p;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/BooleanClause#BooleanClause(Query,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /** Constructs a BooleanClause with query <code>q</code>, required\n   * <code>r</code> and prohibited <code>p</code>.\n   * @deprecated use BooleanClause(Query, Occur) instead\n   * <ul>\n   *  <li>For BooleanClause(query, true, false) use BooleanClause(query, BooleanClause.Occur.MUST)\n   *  <li>For BooleanClause(query, false, false) use BooleanClause(query, BooleanClause.Occur.SHOULD)\n   *  <li>For BooleanClause(query, false, true) use BooleanClause(query, BooleanClause.Occur.MUST_NOT)\n   * </ul>\n   */ \n  public BooleanClause(Query q, boolean r, boolean p) {\n    // TODO: remove for Lucene 2.0\n    query = q;\n    required = r;\n    prohibited = p;\n    if (required) {\n      if (prohibited) {\n        // prohibited && required doesn't make sense, but we want the old behaviour:\n        occur = Occur.MUST_NOT;\n      } else {\n         occur = Occur.MUST;\n      }\n    } else {\n      if (prohibited) {\n         occur = Occur.MUST_NOT;\n      } else {\n         occur = Occur.SHOULD;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["06fe476d5a4c6372bafb2e6d2c5abdd8552ba95e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d1fc81afb0c32e0b7589e656cceb5cf177093fa":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"06fe476d5a4c6372bafb2e6d2c5abdd8552ba95e":["0d1fc81afb0c32e0b7589e656cceb5cf177093fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["0d1fc81afb0c32e0b7589e656cceb5cf177093fa"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"0d1fc81afb0c32e0b7589e656cceb5cf177093fa":["06fe476d5a4c6372bafb2e6d2c5abdd8552ba95e"],"06fe476d5a4c6372bafb2e6d2c5abdd8552ba95e":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}