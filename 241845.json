{"path":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() parentDoc=\" + parentDoc + \" childDoc=\" + childDoc);\n\n      // Loop until we hit a childDoc that's accepted\n      nextChildDoc:\n      while (true) {\n        if (childDoc+1 == parentDoc) {\n          // OK, we are done iterating through all children\n          // matching this one parent doc, so we now nextDoc()\n          // the parent.  Use a while loop because we may have\n          // to skip over some number of parents w/ no\n          // children:\n          while (true) {\n            parentDoc = parentScorer.nextDoc();\n\n            if (parentDoc == 0) {\n              // Degenerate but allowed: parent has no children\n              // TODO: would be nice to pull initial parent\n              // into ctor so we can skip this if... but it's\n              // tricky because scorer must return -1 for\n              // .doc() on init...\n              parentDoc = parentScorer.nextDoc();\n            }\n\n            if (parentDoc == NO_MORE_DOCS) {\n              childDoc = NO_MORE_DOCS;\n              //System.out.println(\"  END\");\n              return childDoc;\n            }\n\n            childDoc = 1 + parentBits.prevSetBit(parentDoc-1);\n\n            if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n              continue nextChildDoc;\n            }\n\n            if (childDoc < parentDoc) {\n              if (doScores) {\n                parentScore = parentScorer.score();\n              }\n              //System.out.println(\"  \" + childDoc);\n              return childDoc;\n            } else {\n              // Degenerate but allowed: parent has no children\n            }\n          }\n        } else {\n          assert childDoc < parentDoc: \"childDoc=\" + childDoc + \" parentDoc=\" + parentDoc;\n          childDoc++;\n          if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n            continue;\n          }\n          //System.out.println(\"  \" + childDoc);\n          return childDoc;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() parentDoc=\" + parentDoc + \" childDoc=\" + childDoc);\n\n      // Loop until we hit a childDoc that's accepted\n      nextChildDoc:\n      while (true) {\n        if (childDoc+1 == parentDoc) {\n          // OK, we are done iterating through all children\n          // matching this one parent doc, so we now nextDoc()\n          // the parent.  Use a while loop because we may have\n          // to skip over some number of parents w/ no\n          // children:\n          while (true) {\n            parentDoc = parentScorer.nextDoc();\n\n            if (parentDoc == 0) {\n              // Degenerate but allowed: parent has no children\n              // TODO: would be nice to pull initial parent\n              // into ctor so we can skip this if... but it's\n              // tricky because scorer must return -1 for\n              // .doc() on init...\n              parentDoc = parentScorer.nextDoc();\n            }\n\n            if (parentDoc == NO_MORE_DOCS) {\n              childDoc = NO_MORE_DOCS;\n              //System.out.println(\"  END\");\n              return childDoc;\n            }\n\n            childDoc = 1 + parentBits.prevSetBit(parentDoc-1);\n\n            if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n              continue nextChildDoc;\n            }\n\n            if (childDoc < parentDoc) {\n              if (doScores) {\n                parentScore = parentScorer.score();\n              }\n              //System.out.println(\"  \" + childDoc);\n              return childDoc;\n            } else {\n              // Degenerate but allowed: parent has no children\n            }\n          }\n        } else {\n          assert childDoc < parentDoc: \"childDoc=\" + childDoc + \" parentDoc=\" + parentDoc;\n          childDoc++;\n          if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n            continue;\n          }\n          //System.out.println(\"  \" + childDoc);\n          return childDoc;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","date":1342645458,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() parentDoc=\" + parentDoc + \" childDoc=\" + childDoc);\n\n      // Loop until we hit a childDoc that's accepted\n      nextChildDoc:\n      while (true) {\n        if (childDoc+1 == parentDoc) {\n          // OK, we are done iterating through all children\n          // matching this one parent doc, so we now nextDoc()\n          // the parent.  Use a while loop because we may have\n          // to skip over some number of parents w/ no\n          // children:\n          while (true) {\n            parentDoc = parentScorer.nextDoc();\n\n            if (parentDoc == 0) {\n              // Degenerate but allowed: parent has no children\n              // TODO: would be nice to pull initial parent\n              // into ctor so we can skip this if... but it's\n              // tricky because scorer must return -1 for\n              // .doc() on init...\n              parentDoc = parentScorer.nextDoc();\n            }\n\n            if (parentDoc == NO_MORE_DOCS) {\n              childDoc = NO_MORE_DOCS;\n              //System.out.println(\"  END\");\n              return childDoc;\n            }\n\n            childDoc = 1 + parentBits.prevSetBit(parentDoc-1);\n\n            if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n              continue nextChildDoc;\n            }\n\n            if (childDoc < parentDoc) {\n              if (doScores) {\n                parentScore = parentScorer.score();\n                parentFreq = parentScorer.freq();\n              }\n              //System.out.println(\"  \" + childDoc);\n              return childDoc;\n            } else {\n              // Degenerate but allowed: parent has no children\n            }\n          }\n        } else {\n          assert childDoc < parentDoc: \"childDoc=\" + childDoc + \" parentDoc=\" + parentDoc;\n          childDoc++;\n          if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n            continue;\n          }\n          //System.out.println(\"  \" + childDoc);\n          return childDoc;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() parentDoc=\" + parentDoc + \" childDoc=\" + childDoc);\n\n      // Loop until we hit a childDoc that's accepted\n      nextChildDoc:\n      while (true) {\n        if (childDoc+1 == parentDoc) {\n          // OK, we are done iterating through all children\n          // matching this one parent doc, so we now nextDoc()\n          // the parent.  Use a while loop because we may have\n          // to skip over some number of parents w/ no\n          // children:\n          while (true) {\n            parentDoc = parentScorer.nextDoc();\n\n            if (parentDoc == 0) {\n              // Degenerate but allowed: parent has no children\n              // TODO: would be nice to pull initial parent\n              // into ctor so we can skip this if... but it's\n              // tricky because scorer must return -1 for\n              // .doc() on init...\n              parentDoc = parentScorer.nextDoc();\n            }\n\n            if (parentDoc == NO_MORE_DOCS) {\n              childDoc = NO_MORE_DOCS;\n              //System.out.println(\"  END\");\n              return childDoc;\n            }\n\n            childDoc = 1 + parentBits.prevSetBit(parentDoc-1);\n\n            if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n              continue nextChildDoc;\n            }\n\n            if (childDoc < parentDoc) {\n              if (doScores) {\n                parentScore = parentScorer.score();\n              }\n              //System.out.println(\"  \" + childDoc);\n              return childDoc;\n            } else {\n              // Degenerate but allowed: parent has no children\n            }\n          }\n        } else {\n          assert childDoc < parentDoc: \"childDoc=\" + childDoc + \" parentDoc=\" + parentDoc;\n          childDoc++;\n          if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n            continue;\n          }\n          //System.out.println(\"  \" + childDoc);\n          return childDoc;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() parentDoc=\" + parentDoc + \" childDoc=\" + childDoc);\n\n      // Loop until we hit a childDoc that's accepted\n      nextChildDoc:\n      while (true) {\n        if (childDoc+1 == parentDoc) {\n          // OK, we are done iterating through all children\n          // matching this one parent doc, so we now nextDoc()\n          // the parent.  Use a while loop because we may have\n          // to skip over some number of parents w/ no\n          // children:\n          while (true) {\n            parentDoc = parentScorer.nextDoc();\n\n            if (parentDoc == 0) {\n              // Degenerate but allowed: parent has no children\n              // TODO: would be nice to pull initial parent\n              // into ctor so we can skip this if... but it's\n              // tricky because scorer must return -1 for\n              // .doc() on init...\n              parentDoc = parentScorer.nextDoc();\n            }\n\n            if (parentDoc == NO_MORE_DOCS) {\n              childDoc = NO_MORE_DOCS;\n              //System.out.println(\"  END\");\n              return childDoc;\n            }\n\n            childDoc = 1 + parentBits.prevSetBit(parentDoc-1);\n\n            if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n              continue nextChildDoc;\n            }\n\n            if (childDoc < parentDoc) {\n              if (doScores) {\n                parentScore = parentScorer.score();\n                parentFreq = parentScorer.freq();\n              }\n              //System.out.println(\"  \" + childDoc);\n              return childDoc;\n            } else {\n              // Degenerate but allowed: parent has no children\n            }\n          }\n        } else {\n          assert childDoc < parentDoc: \"childDoc=\" + childDoc + \" parentDoc=\" + parentDoc;\n          childDoc++;\n          if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n            continue;\n          }\n          //System.out.println(\"  \" + childDoc);\n          return childDoc;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() parentDoc=\" + parentDoc + \" childDoc=\" + childDoc);\n\n      // Loop until we hit a childDoc that's accepted\n      nextChildDoc:\n      while (true) {\n        if (childDoc+1 == parentDoc) {\n          // OK, we are done iterating through all children\n          // matching this one parent doc, so we now nextDoc()\n          // the parent.  Use a while loop because we may have\n          // to skip over some number of parents w/ no\n          // children:\n          while (true) {\n            parentDoc = parentScorer.nextDoc();\n\n            if (parentDoc == 0) {\n              // Degenerate but allowed: parent has no children\n              // TODO: would be nice to pull initial parent\n              // into ctor so we can skip this if... but it's\n              // tricky because scorer must return -1 for\n              // .doc() on init...\n              parentDoc = parentScorer.nextDoc();\n            }\n\n            if (parentDoc == NO_MORE_DOCS) {\n              childDoc = NO_MORE_DOCS;\n              //System.out.println(\"  END\");\n              return childDoc;\n            }\n\n            childDoc = 1 + parentBits.prevSetBit(parentDoc-1);\n\n            if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n              continue nextChildDoc;\n            }\n\n            if (childDoc < parentDoc) {\n              if (doScores) {\n                parentScore = parentScorer.score();\n              }\n              //System.out.println(\"  \" + childDoc);\n              return childDoc;\n            } else {\n              // Degenerate but allowed: parent has no children\n            }\n          }\n        } else {\n          assert childDoc < parentDoc: \"childDoc=\" + childDoc + \" parentDoc=\" + parentDoc;\n          childDoc++;\n          if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n            continue;\n          }\n          //System.out.println(\"  \" + childDoc);\n          return childDoc;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() parentDoc=\" + parentDoc + \" childDoc=\" + childDoc);\n\n      // Loop until we hit a childDoc that's accepted\n      nextChildDoc:\n      while (true) {\n        if (childDoc+1 == parentDoc) {\n          // OK, we are done iterating through all children\n          // matching this one parent doc, so we now nextDoc()\n          // the parent.  Use a while loop because we may have\n          // to skip over some number of parents w/ no\n          // children:\n          while (true) {\n            parentDoc = parentScorer.nextDoc();\n\n            if (parentDoc == 0) {\n              // Degenerate but allowed: parent has no children\n              // TODO: would be nice to pull initial parent\n              // into ctor so we can skip this if... but it's\n              // tricky because scorer must return -1 for\n              // .doc() on init...\n              parentDoc = parentScorer.nextDoc();\n            }\n\n            if (parentDoc == NO_MORE_DOCS) {\n              childDoc = NO_MORE_DOCS;\n              //System.out.println(\"  END\");\n              return childDoc;\n            }\n\n            childDoc = 1 + parentBits.prevSetBit(parentDoc-1);\n\n            if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n              continue nextChildDoc;\n            }\n\n            if (childDoc < parentDoc) {\n              if (doScores) {\n                parentScore = parentScorer.score();\n                parentFreq = parentScorer.freq();\n              }\n              //System.out.println(\"  \" + childDoc);\n              return childDoc;\n            } else {\n              // Degenerate but allowed: parent has no children\n            }\n          }\n        } else {\n          assert childDoc < parentDoc: \"childDoc=\" + childDoc + \" parentDoc=\" + parentDoc;\n          childDoc++;\n          if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n            continue;\n          }\n          //System.out.println(\"  \" + childDoc);\n          return childDoc;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() parentDoc=\" + parentDoc + \" childDoc=\" + childDoc);\n\n      // Loop until we hit a childDoc that's accepted\n      nextChildDoc:\n      while (true) {\n        if (childDoc+1 == parentDoc) {\n          // OK, we are done iterating through all children\n          // matching this one parent doc, so we now nextDoc()\n          // the parent.  Use a while loop because we may have\n          // to skip over some number of parents w/ no\n          // children:\n          while (true) {\n            parentDoc = parentScorer.nextDoc();\n\n            if (parentDoc == 0) {\n              // Degenerate but allowed: parent has no children\n              // TODO: would be nice to pull initial parent\n              // into ctor so we can skip this if... but it's\n              // tricky because scorer must return -1 for\n              // .doc() on init...\n              parentDoc = parentScorer.nextDoc();\n            }\n\n            if (parentDoc == NO_MORE_DOCS) {\n              childDoc = NO_MORE_DOCS;\n              //System.out.println(\"  END\");\n              return childDoc;\n            }\n\n            childDoc = 1 + parentBits.prevSetBit(parentDoc-1);\n\n            if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n              continue nextChildDoc;\n            }\n\n            if (childDoc < parentDoc) {\n              if (doScores) {\n                parentScore = parentScorer.score();\n              }\n              //System.out.println(\"  \" + childDoc);\n              return childDoc;\n            } else {\n              // Degenerate but allowed: parent has no children\n            }\n          }\n        } else {\n          assert childDoc < parentDoc: \"childDoc=\" + childDoc + \" parentDoc=\" + parentDoc;\n          childDoc++;\n          if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n            continue;\n          }\n          //System.out.println(\"  \" + childDoc);\n          return childDoc;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0f8ba65dfb38d7382b9dce6751c3060db644202","date":1389780711,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() parentDoc=\" + parentDoc + \" childDoc=\" + childDoc);\n\n      // Loop until we hit a childDoc that's accepted\n      nextChildDoc:\n      while (true) {\n        if (childDoc+1 == parentDoc) {\n          // OK, we are done iterating through all children\n          // matching this one parent doc, so we now nextDoc()\n          // the parent.  Use a while loop because we may have\n          // to skip over some number of parents w/ no\n          // children:\n          while (true) {\n            parentDoc = parentScorer.nextDoc();\n            validateParentDoc();\n\n            if (parentDoc == 0) {\n              // Degenerate but allowed: parent has no children\n              // TODO: would be nice to pull initial parent\n              // into ctor so we can skip this if... but it's\n              // tricky because scorer must return -1 for\n              // .doc() on init...\n              parentDoc = parentScorer.nextDoc();\n              validateParentDoc();\n            }\n\n            if (parentDoc == NO_MORE_DOCS) {\n              childDoc = NO_MORE_DOCS;\n              //System.out.println(\"  END\");\n              return childDoc;\n            }\n\n            childDoc = 1 + parentBits.prevSetBit(parentDoc-1);\n\n            if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n              continue nextChildDoc;\n            }\n\n            if (childDoc < parentDoc) {\n              if (doScores) {\n                parentScore = parentScorer.score();\n                parentFreq = parentScorer.freq();\n              }\n              //System.out.println(\"  \" + childDoc);\n              return childDoc;\n            } else {\n              // Degenerate but allowed: parent has no children\n            }\n          }\n        } else {\n          assert childDoc < parentDoc: \"childDoc=\" + childDoc + \" parentDoc=\" + parentDoc;\n          childDoc++;\n          if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n            continue;\n          }\n          //System.out.println(\"  \" + childDoc);\n          return childDoc;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() parentDoc=\" + parentDoc + \" childDoc=\" + childDoc);\n\n      // Loop until we hit a childDoc that's accepted\n      nextChildDoc:\n      while (true) {\n        if (childDoc+1 == parentDoc) {\n          // OK, we are done iterating through all children\n          // matching this one parent doc, so we now nextDoc()\n          // the parent.  Use a while loop because we may have\n          // to skip over some number of parents w/ no\n          // children:\n          while (true) {\n            parentDoc = parentScorer.nextDoc();\n\n            if (parentDoc == 0) {\n              // Degenerate but allowed: parent has no children\n              // TODO: would be nice to pull initial parent\n              // into ctor so we can skip this if... but it's\n              // tricky because scorer must return -1 for\n              // .doc() on init...\n              parentDoc = parentScorer.nextDoc();\n            }\n\n            if (parentDoc == NO_MORE_DOCS) {\n              childDoc = NO_MORE_DOCS;\n              //System.out.println(\"  END\");\n              return childDoc;\n            }\n\n            childDoc = 1 + parentBits.prevSetBit(parentDoc-1);\n\n            if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n              continue nextChildDoc;\n            }\n\n            if (childDoc < parentDoc) {\n              if (doScores) {\n                parentScore = parentScorer.score();\n                parentFreq = parentScorer.freq();\n              }\n              //System.out.println(\"  \" + childDoc);\n              return childDoc;\n            } else {\n              // Degenerate but allowed: parent has no children\n            }\n          }\n        } else {\n          assert childDoc < parentDoc: \"childDoc=\" + childDoc + \" parentDoc=\" + parentDoc;\n          childDoc++;\n          if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n            continue;\n          }\n          //System.out.println(\"  \" + childDoc);\n          return childDoc;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f1955b33190fda0d16dcbbd3d794e9d15cb692f","date":1394704239,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() parentDoc=\" + parentDoc + \" childDoc=\" + childDoc);\n\n      // Loop until we hit a childDoc that's accepted\n      nextChildDoc:\n      while (true) {\n        if (childDoc+1 == parentDoc) {\n          // OK, we are done iterating through all children\n          // matching this one parent doc, so we now nextDoc()\n          // the parent.  Use a while loop because we may have\n          // to skip over some number of parents w/ no\n          // children:\n          while (true) {\n            parentDoc = parentScorer.nextDoc();\n            validateParentDoc();\n\n            if (parentDoc == 0) {\n              // Degenerate but allowed: first parent doc has no children\n              // TODO: would be nice to pull initial parent\n              // into ctor so we can skip this if... but it's\n              // tricky because scorer must return -1 for\n              // .doc() on init...\n              parentDoc = parentScorer.nextDoc();\n              validateParentDoc();\n            }\n\n            if (parentDoc == NO_MORE_DOCS) {\n              childDoc = NO_MORE_DOCS;\n              //System.out.println(\"  END\");\n              return childDoc;\n            }\n\n            // Go to first child for this next parentDoc:\n            childDoc = 1 + parentBits.prevSetBit(parentDoc-1);\n\n            if (childDoc == parentDoc) {\n              // This parent has no children; continue\n              // parent loop so we move to next parent\n              continue;\n            }\n\n            if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n              continue nextChildDoc;\n            }\n\n            if (childDoc < parentDoc) {\n              if (doScores) {\n                parentScore = parentScorer.score();\n                parentFreq = parentScorer.freq();\n              }\n              //System.out.println(\"  \" + childDoc);\n              return childDoc;\n            } else {\n              // Degenerate but allowed: parent has no children\n            }\n          }\n        } else {\n          assert childDoc < parentDoc: \"childDoc=\" + childDoc + \" parentDoc=\" + parentDoc;\n          childDoc++;\n          if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n            continue;\n          }\n          //System.out.println(\"  \" + childDoc);\n          return childDoc;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() parentDoc=\" + parentDoc + \" childDoc=\" + childDoc);\n\n      // Loop until we hit a childDoc that's accepted\n      nextChildDoc:\n      while (true) {\n        if (childDoc+1 == parentDoc) {\n          // OK, we are done iterating through all children\n          // matching this one parent doc, so we now nextDoc()\n          // the parent.  Use a while loop because we may have\n          // to skip over some number of parents w/ no\n          // children:\n          while (true) {\n            parentDoc = parentScorer.nextDoc();\n            validateParentDoc();\n\n            if (parentDoc == 0) {\n              // Degenerate but allowed: parent has no children\n              // TODO: would be nice to pull initial parent\n              // into ctor so we can skip this if... but it's\n              // tricky because scorer must return -1 for\n              // .doc() on init...\n              parentDoc = parentScorer.nextDoc();\n              validateParentDoc();\n            }\n\n            if (parentDoc == NO_MORE_DOCS) {\n              childDoc = NO_MORE_DOCS;\n              //System.out.println(\"  END\");\n              return childDoc;\n            }\n\n            childDoc = 1 + parentBits.prevSetBit(parentDoc-1);\n\n            if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n              continue nextChildDoc;\n            }\n\n            if (childDoc < parentDoc) {\n              if (doScores) {\n                parentScore = parentScorer.score();\n                parentFreq = parentScorer.freq();\n              }\n              //System.out.println(\"  \" + childDoc);\n              return childDoc;\n            } else {\n              // Degenerate but allowed: parent has no children\n            }\n          }\n        } else {\n          assert childDoc < parentDoc: \"childDoc=\" + childDoc + \" parentDoc=\" + parentDoc;\n          childDoc++;\n          if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n            continue;\n          }\n          //System.out.println(\"  \" + childDoc);\n          return childDoc;\n        }\n      }\n    }\n\n","bugFix":["b5a3548d95924aea5ee6d88499a7d166498a8e49"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da6895c8fcaff91a5fcb72c54627339e3df1bb86","date":1435065290,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() parentDoc=\" + parentDoc + \" childDoc=\" + childDoc);\n\n      // Loop until we hit a childDoc that's accepted\n      nextChildDoc:\n      while (true) {\n        if (childDoc+1 == parentDoc) {\n          // OK, we are done iterating through all children\n          // matching this one parent doc, so we now nextDoc()\n          // the parent.  Use a while loop because we may have\n          // to skip over some number of parents w/ no\n          // children:\n          while (true) {\n            parentDoc = parentScorer.nextDoc();\n            validateParentDoc();\n\n            if (parentDoc == 0) {\n              // Degenerate but allowed: first parent doc has no children\n              // TODO: would be nice to pull initial parent\n              // into ctor so we can skip this if... but it's\n              // tricky because scorer must return -1 for\n              // .doc() on init...\n              parentDoc = parentScorer.nextDoc();\n              validateParentDoc();\n            }\n\n            if (parentDoc == NO_MORE_DOCS) {\n              childDoc = NO_MORE_DOCS;\n              //System.out.println(\"  END\");\n              return childDoc;\n            }\n\n            // Go to first child for this next parentDoc:\n            childDoc = 1 + parentBits.prevSetBit(parentDoc-1);\n\n            if (childDoc == parentDoc) {\n              // This parent has no children; continue\n              // parent loop so we move to next parent\n              continue;\n            }\n\n            if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n              // find the first child that is accepted\n              while (true) {\n                if (childDoc+1 < parentDoc) {\n                  childDoc++;\n                  if (acceptDocs.get(childDoc))\n                    break;\n                } else {\n                  // no child for this parent doc matches acceptDocs\n                  continue nextChildDoc;\n                }\n              }\n            }\n\n            if (childDoc < parentDoc) {\n              if (doScores) {\n                parentScore = parentScorer.score();\n                parentFreq = parentScorer.freq();\n              }\n              //System.out.println(\"  \" + childDoc);\n              return childDoc;\n            } else {\n              // Degenerate but allowed: parent has no children\n            }\n          }\n        } else {\n          assert childDoc < parentDoc: \"childDoc=\" + childDoc + \" parentDoc=\" + parentDoc;\n          childDoc++;\n          if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n            continue;\n          }\n          //System.out.println(\"  \" + childDoc);\n          return childDoc;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() parentDoc=\" + parentDoc + \" childDoc=\" + childDoc);\n\n      // Loop until we hit a childDoc that's accepted\n      nextChildDoc:\n      while (true) {\n        if (childDoc+1 == parentDoc) {\n          // OK, we are done iterating through all children\n          // matching this one parent doc, so we now nextDoc()\n          // the parent.  Use a while loop because we may have\n          // to skip over some number of parents w/ no\n          // children:\n          while (true) {\n            parentDoc = parentScorer.nextDoc();\n            validateParentDoc();\n\n            if (parentDoc == 0) {\n              // Degenerate but allowed: first parent doc has no children\n              // TODO: would be nice to pull initial parent\n              // into ctor so we can skip this if... but it's\n              // tricky because scorer must return -1 for\n              // .doc() on init...\n              parentDoc = parentScorer.nextDoc();\n              validateParentDoc();\n            }\n\n            if (parentDoc == NO_MORE_DOCS) {\n              childDoc = NO_MORE_DOCS;\n              //System.out.println(\"  END\");\n              return childDoc;\n            }\n\n            // Go to first child for this next parentDoc:\n            childDoc = 1 + parentBits.prevSetBit(parentDoc-1);\n\n            if (childDoc == parentDoc) {\n              // This parent has no children; continue\n              // parent loop so we move to next parent\n              continue;\n            }\n\n            if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n              continue nextChildDoc;\n            }\n\n            if (childDoc < parentDoc) {\n              if (doScores) {\n                parentScore = parentScorer.score();\n                parentFreq = parentScorer.freq();\n              }\n              //System.out.println(\"  \" + childDoc);\n              return childDoc;\n            } else {\n              // Degenerate but allowed: parent has no children\n            }\n          }\n        } else {\n          assert childDoc < parentDoc: \"childDoc=\" + childDoc + \" parentDoc=\" + parentDoc;\n          childDoc++;\n          if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n            continue;\n          }\n          //System.out.println(\"  \" + childDoc);\n          return childDoc;\n        }\n      }\n    }\n\n","bugFix":["f918f6e4bff7afea488f1928f7a7ec05338d479f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() parentDoc=\" + parentDoc + \" childDoc=\" + childDoc);\n\n      while (true) {\n        if (childDoc+1 == parentDoc) {\n          // OK, we are done iterating through all children\n          // matching this one parent doc, so we now nextDoc()\n          // the parent.  Use a while loop because we may have\n          // to skip over some number of parents w/ no\n          // children:\n          while (true) {\n            parentDoc = parentScorer.nextDoc();\n            validateParentDoc();\n\n            if (parentDoc == 0) {\n              // Degenerate but allowed: first parent doc has no children\n              // TODO: would be nice to pull initial parent\n              // into ctor so we can skip this if... but it's\n              // tricky because scorer must return -1 for\n              // .doc() on init...\n              parentDoc = parentScorer.nextDoc();\n              validateParentDoc();\n            }\n\n            if (parentDoc == NO_MORE_DOCS) {\n              childDoc = NO_MORE_DOCS;\n              //System.out.println(\"  END\");\n              return childDoc;\n            }\n\n            // Go to first child for this next parentDoc:\n            childDoc = 1 + parentBits.prevSetBit(parentDoc-1);\n\n            if (childDoc == parentDoc) {\n              // This parent has no children; continue\n              // parent loop so we move to next parent\n              continue;\n            }\n\n            if (childDoc < parentDoc) {\n              if (doScores) {\n                parentScore = parentScorer.score();\n                parentFreq = parentScorer.freq();\n              }\n              //System.out.println(\"  \" + childDoc);\n              return childDoc;\n            } else {\n              // Degenerate but allowed: parent has no children\n            }\n          }\n        } else {\n          assert childDoc < parentDoc: \"childDoc=\" + childDoc + \" parentDoc=\" + parentDoc;\n          childDoc++;\n          //System.out.println(\"  \" + childDoc);\n          return childDoc;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() parentDoc=\" + parentDoc + \" childDoc=\" + childDoc);\n\n      // Loop until we hit a childDoc that's accepted\n      nextChildDoc:\n      while (true) {\n        if (childDoc+1 == parentDoc) {\n          // OK, we are done iterating through all children\n          // matching this one parent doc, so we now nextDoc()\n          // the parent.  Use a while loop because we may have\n          // to skip over some number of parents w/ no\n          // children:\n          while (true) {\n            parentDoc = parentScorer.nextDoc();\n            validateParentDoc();\n\n            if (parentDoc == 0) {\n              // Degenerate but allowed: first parent doc has no children\n              // TODO: would be nice to pull initial parent\n              // into ctor so we can skip this if... but it's\n              // tricky because scorer must return -1 for\n              // .doc() on init...\n              parentDoc = parentScorer.nextDoc();\n              validateParentDoc();\n            }\n\n            if (parentDoc == NO_MORE_DOCS) {\n              childDoc = NO_MORE_DOCS;\n              //System.out.println(\"  END\");\n              return childDoc;\n            }\n\n            // Go to first child for this next parentDoc:\n            childDoc = 1 + parentBits.prevSetBit(parentDoc-1);\n\n            if (childDoc == parentDoc) {\n              // This parent has no children; continue\n              // parent loop so we move to next parent\n              continue;\n            }\n\n            if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n              // find the first child that is accepted\n              while (true) {\n                if (childDoc+1 < parentDoc) {\n                  childDoc++;\n                  if (acceptDocs.get(childDoc))\n                    break;\n                } else {\n                  // no child for this parent doc matches acceptDocs\n                  continue nextChildDoc;\n                }\n              }\n            }\n\n            if (childDoc < parentDoc) {\n              if (doScores) {\n                parentScore = parentScorer.score();\n                parentFreq = parentScorer.freq();\n              }\n              //System.out.println(\"  \" + childDoc);\n              return childDoc;\n            } else {\n              // Degenerate but allowed: parent has no children\n            }\n          }\n        } else {\n          assert childDoc < parentDoc: \"childDoc=\" + childDoc + \" parentDoc=\" + parentDoc;\n          childDoc++;\n          if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n            continue;\n          }\n          //System.out.println(\"  \" + childDoc);\n          return childDoc;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","sourceNew":null,"sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() parentDoc=\" + parentDoc + \" childDoc=\" + childDoc);\n\n      while (true) {\n        if (childDoc+1 == parentDoc) {\n          // OK, we are done iterating through all children\n          // matching this one parent doc, so we now nextDoc()\n          // the parent.  Use a while loop because we may have\n          // to skip over some number of parents w/ no\n          // children:\n          while (true) {\n            parentDoc = parentScorer.nextDoc();\n            validateParentDoc();\n\n            if (parentDoc == 0) {\n              // Degenerate but allowed: first parent doc has no children\n              // TODO: would be nice to pull initial parent\n              // into ctor so we can skip this if... but it's\n              // tricky because scorer must return -1 for\n              // .doc() on init...\n              parentDoc = parentScorer.nextDoc();\n              validateParentDoc();\n            }\n\n            if (parentDoc == NO_MORE_DOCS) {\n              childDoc = NO_MORE_DOCS;\n              //System.out.println(\"  END\");\n              return childDoc;\n            }\n\n            // Go to first child for this next parentDoc:\n            childDoc = 1 + parentBits.prevSetBit(parentDoc-1);\n\n            if (childDoc == parentDoc) {\n              // This parent has no children; continue\n              // parent loop so we move to next parent\n              continue;\n            }\n\n            if (childDoc < parentDoc) {\n              if (doScores) {\n                parentScore = parentScorer.score();\n                parentFreq = parentScorer.freq();\n              }\n              //System.out.println(\"  \" + childDoc);\n              return childDoc;\n            } else {\n              // Degenerate but allowed: parent has no children\n            }\n          }\n        } else {\n          assert childDoc < parentDoc: \"childDoc=\" + childDoc + \" parentDoc=\" + parentDoc;\n          childDoc++;\n          //System.out.println(\"  \" + childDoc);\n          return childDoc;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["da6895c8fcaff91a5fcb72c54627339e3df1bb86"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7f1955b33190fda0d16dcbbd3d794e9d15cb692f":["d0f8ba65dfb38d7382b9dce6751c3060db644202"],"aba371508186796cc6151d8223a5b4e16d02e26e":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dd748bb245633a8195281556bb0e68a6ea97d18":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"d0f8ba65dfb38d7382b9dce6751c3060db644202":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"da6895c8fcaff91a5fcb72c54627339e3df1bb86":["7f1955b33190fda0d16dcbbd3d794e9d15cb692f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["aba371508186796cc6151d8223a5b4e16d02e26e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"7f1955b33190fda0d16dcbbd3d794e9d15cb692f":["da6895c8fcaff91a5fcb72c54627339e3df1bb86"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","d0f8ba65dfb38d7382b9dce6751c3060db644202"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d0f8ba65dfb38d7382b9dce6751c3060db644202":["7f1955b33190fda0d16dcbbd3d794e9d15cb692f"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"da6895c8fcaff91a5fcb72c54627339e3df1bb86":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}