{"path":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"/dev/null","sourceNew":"  public void testHaversine() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0, true)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n\n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.30894'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + Constants.EARTH_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='7.0']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.30894'\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","sourceNew":null,"sourceOld":"  public void testHaversine() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0, true)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n\n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.30894'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + Constants.EARTH_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='7.0']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.30894'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","sourceNew":"  public void testHaversine() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0, true)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n\n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.309006'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + Constants.EARTH_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='7.0']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.309006'\");\n  }\n\n","sourceOld":"  public void testHaversine() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0, true)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n\n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.309006'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + Constants.EARTH_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='7.0']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.309006'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"/dev/null","sourceNew":"  public void testHaversine() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0, true)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n\n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.309006'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + Constants.EARTH_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='7.0']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.309006'\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a3ee7c72e7539c6ad4b8494808b7d64c210febf","date":1269122965,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","sourceNew":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0, true)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n\n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.309006'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + Constants.EARTH_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='7.0']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.309006'\");\n  }\n\n","sourceOld":"  public void testHaversine() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0, true)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n\n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.309006'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + Constants.EARTH_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='7.0']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.309006'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f900d5ce814fc22ea498d3303d1f833f5bf320c","date":1278720761,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","sourceNew":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0, true)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n\n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='7.0']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n  }\n\n","sourceOld":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0, true)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n\n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.309006'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + Constants.EARTH_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='7.0']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.309006'\");\n  }\n\n","bugFix":null,"bugIntro":["f7e2c5596ef3fbb03572368a66afb40a500404ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","sourceNew":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0, true)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n\n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='7.0']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n  }\n\n","sourceOld":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0, true)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n\n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.309006'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + Constants.EARTH_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='7.0']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.309006'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7fd616bd8e6f2a1d20f73c7f07b4df8fc00ec0fe","date":1283984972,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","sourceNew":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='7.0']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0, true)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n\n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='7.0']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n  }\n\n","bugFix":["7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564","abec2fd822be07fc74ef5ba3609b9c5625a87d6d","0b76616526aa00e6e6983cbd99b234605e00e3cf"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a88da65f7210ad629e64c0553232a63d5d1bdc7c","date":1285779929,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","sourceNew":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='7']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='7.0']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","sourceNew":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='7']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0, true)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n\n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='7.0']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7e2c5596ef3fbb03572368a66afb40a500404ab","date":1297903084,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","sourceNew":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s1\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='7']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='7']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n  }\n\n","bugFix":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d","5f900d5ce814fc22ea498d3303d1f833f5bf320c","0b76616526aa00e6e6983cbd99b234605e00e3cf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","sourceNew":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s1\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='7']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='7']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","sourceNew":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s1\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='7']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='7']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","sourceNew":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s1\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='7']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s1\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='7']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","sourceNew":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s1\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='7']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s1\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='7']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","sourceNew":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s1\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='7']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s1\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='7']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7fd616bd8e6f2a1d20f73c7f07b4df8fc00ec0fe":["5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["a88da65f7210ad629e64c0553232a63d5d1bdc7c","f7e2c5596ef3fbb03572368a66afb40a500404ab"],"9a3ee7c72e7539c6ad4b8494808b7d64c210febf":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["f7e2c5596ef3fbb03572368a66afb40a500404ab","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["9a3ee7c72e7539c6ad4b8494808b7d64c210febf","5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","a88da65f7210ad629e64c0553232a63d5d1bdc7c"],"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["9a3ee7c72e7539c6ad4b8494808b7d64c210febf"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"f7e2c5596ef3fbb03572368a66afb40a500404ab":["a88da65f7210ad629e64c0553232a63d5d1bdc7c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["f7e2c5596ef3fbb03572368a66afb40a500404ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["f7e2c5596ef3fbb03572368a66afb40a500404ab"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f7e2c5596ef3fbb03572368a66afb40a500404ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"a88da65f7210ad629e64c0553232a63d5d1bdc7c":["7fd616bd8e6f2a1d20f73c7f07b4df8fc00ec0fe"]},"commit2Childs":{"7fd616bd8e6f2a1d20f73c7f07b4df8fc00ec0fe":["a88da65f7210ad629e64c0553232a63d5d1bdc7c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"9a3ee7c72e7539c6ad4b8494808b7d64c210febf":["5f4e87790277826a2aea119328600dfb07761f32","5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["7fd616bd8e6f2a1d20f73c7f07b4df8fc00ec0fe","5f4e87790277826a2aea119328600dfb07761f32"],"1da8d55113b689b06716246649de6f62430f15c0":["9a3ee7c72e7539c6ad4b8494808b7d64c210febf"],"f7e2c5596ef3fbb03572368a66afb40a500404ab":["f1bdbf92da222965b46c0a942c3857ba56e5c638","c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"a88da65f7210ad629e64c0553232a63d5d1bdc7c":["f1bdbf92da222965b46c0a942c3857ba56e5c638","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f7e2c5596ef3fbb03572368a66afb40a500404ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}