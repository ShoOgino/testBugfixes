{"path":"lucene/core/src/test/org/apache/lucene/util/TestSloppyMath#testHaversinSortKey().mjava","commits":[{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSloppyMath#testHaversinSortKey().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testPartialHaversin().mjava","sourceNew":"  /** Test this method sorts the same way as real haversin */\n  public void testHaversinSortKey() {\n    for (int i = 0; i < 100000; i++) {\n      double centerLat = -90 + 180.0 * random().nextDouble();\n      double centerLon = -180 + 360.0 * random().nextDouble();\n\n      double lat1 = -90 + 180.0 * random().nextDouble();\n      double lon1 = -180 + 360.0 * random().nextDouble();\n\n      double lat2 = -90 + 180.0 * random().nextDouble();\n      double lon2 = -180 + 360.0 * random().nextDouble();\n\n      int expected = Integer.signum(Double.compare(haversinMeters(centerLat, centerLon, lat1, lon1),\n                                                   haversinMeters(centerLat, centerLon, lat2, lon2)));\n      int actual = Integer.signum(Double.compare(haversinSortKey(centerLat, centerLon, lat1, lon1),\n                                                 haversinSortKey(centerLat, centerLon, lat2, lon2)));\n      assertEquals(expected, actual);\n      assertEquals(haversinMeters(centerLat, centerLon, lat1, lon1), haversinMeters(haversinSortKey(centerLat, centerLon, lat1, lon1)), 0.0D);\n      assertEquals(haversinMeters(centerLat, centerLon, lat2, lon2), haversinMeters(haversinSortKey(centerLat, centerLon, lat2, lon2)), 0.0D);\n    }\n  }\n\n","sourceOld":"  /** Test this method sorts the same way as real haversin */\n  public void testPartialHaversin() {\n    for (int i = 0; i < 100000; i++) {\n      double centerLat = -90 + 180.0 * random().nextDouble();\n      double centerLon = -180 + 360.0 * random().nextDouble();\n\n      double lat1 = -90 + 180.0 * random().nextDouble();\n      double lon1 = -180 + 360.0 * random().nextDouble();\n\n      double lat2 = -90 + 180.0 * random().nextDouble();\n      double lon2 = -180 + 360.0 * random().nextDouble();\n\n      int expected = Integer.signum(Double.compare(GeoDistanceUtils.haversin(centerLat, centerLon, lat1, lon1),\n                                                   GeoDistanceUtils.haversin(centerLat, centerLon, lat2, lon2)));\n      int actual = Integer.signum(Double.compare(LatLonPointDistanceComparator.haversin1(centerLat, centerLon, lat1, lon1),\n                                                 LatLonPointDistanceComparator.haversin1(centerLat, centerLon, lat2, lon2)));\n      assertEquals(expected, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daf6e9d7d2b09412f97abae089a44cc03f5d5a14","date":1460042872,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSloppyMath#testHaversinSortKey().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestSloppyMath#testHaversinSortKey().mjava","sourceNew":"  /** Test this method sorts the same way as real haversin */\n  public void testHaversinSortKey() {\n    for (int i = 0; i < 100000; i++) {\n      double centerLat = GeoTestUtil.nextLatitude();\n      double centerLon = GeoTestUtil.nextLongitude();\n\n      double lat1 = GeoTestUtil.nextLatitude();\n      double lon1 = GeoTestUtil.nextLongitude();\n\n      double lat2 = GeoTestUtil.nextLatitude();\n      double lon2 = GeoTestUtil.nextLongitude();\n\n      int expected = Integer.signum(Double.compare(haversinMeters(centerLat, centerLon, lat1, lon1),\n                                                   haversinMeters(centerLat, centerLon, lat2, lon2)));\n      int actual = Integer.signum(Double.compare(haversinSortKey(centerLat, centerLon, lat1, lon1),\n                                                 haversinSortKey(centerLat, centerLon, lat2, lon2)));\n      assertEquals(expected, actual);\n      assertEquals(haversinMeters(centerLat, centerLon, lat1, lon1), haversinMeters(haversinSortKey(centerLat, centerLon, lat1, lon1)), 0.0D);\n      assertEquals(haversinMeters(centerLat, centerLon, lat2, lon2), haversinMeters(haversinSortKey(centerLat, centerLon, lat2, lon2)), 0.0D);\n    }\n  }\n\n","sourceOld":"  /** Test this method sorts the same way as real haversin */\n  public void testHaversinSortKey() {\n    for (int i = 0; i < 100000; i++) {\n      double centerLat = -90 + 180.0 * random().nextDouble();\n      double centerLon = -180 + 360.0 * random().nextDouble();\n\n      double lat1 = -90 + 180.0 * random().nextDouble();\n      double lon1 = -180 + 360.0 * random().nextDouble();\n\n      double lat2 = -90 + 180.0 * random().nextDouble();\n      double lon2 = -180 + 360.0 * random().nextDouble();\n\n      int expected = Integer.signum(Double.compare(haversinMeters(centerLat, centerLon, lat1, lon1),\n                                                   haversinMeters(centerLat, centerLon, lat2, lon2)));\n      int actual = Integer.signum(Double.compare(haversinSortKey(centerLat, centerLon, lat1, lon1),\n                                                 haversinSortKey(centerLat, centerLon, lat2, lon2)));\n      assertEquals(expected, actual);\n      assertEquals(haversinMeters(centerLat, centerLon, lat1, lon1), haversinMeters(haversinSortKey(centerLat, centerLon, lat1, lon1)), 0.0D);\n      assertEquals(haversinMeters(centerLat, centerLon, lat2, lon2), haversinMeters(haversinSortKey(centerLat, centerLon, lat2, lon2)), 0.0D);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09f15823cf5eb6e807005579e875e117d8598f95","date":1460066385,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSloppyMath#testHaversinSortKey().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestSloppyMath#testHaversinSortKey().mjava","sourceNew":"  /** Test this method sorts the same way as real haversin */\n  public void testHaversinSortKey() {\n    for (int i = 0; i < 100000; i++) {\n      double centerLat = GeoTestUtil.nextLatitude();\n      double centerLon = GeoTestUtil.nextLongitude();\n\n      double lat1 = GeoTestUtil.nextLatitude();\n      double lon1 = GeoTestUtil.nextLongitude();\n\n      double lat2 = GeoTestUtil.nextLatitude();\n      double lon2 = GeoTestUtil.nextLongitude();\n\n      int expected = Integer.signum(Double.compare(haversinMeters(centerLat, centerLon, lat1, lon1),\n                                                   haversinMeters(centerLat, centerLon, lat2, lon2)));\n      int actual = Integer.signum(Double.compare(haversinSortKey(centerLat, centerLon, lat1, lon1),\n                                                 haversinSortKey(centerLat, centerLon, lat2, lon2)));\n      assertEquals(expected, actual);\n      assertEquals(haversinMeters(centerLat, centerLon, lat1, lon1), haversinMeters(haversinSortKey(centerLat, centerLon, lat1, lon1)), 0.0D);\n      assertEquals(haversinMeters(centerLat, centerLon, lat2, lon2), haversinMeters(haversinSortKey(centerLat, centerLon, lat2, lon2)), 0.0D);\n    }\n  }\n\n","sourceOld":"  /** Test this method sorts the same way as real haversin */\n  public void testHaversinSortKey() {\n    for (int i = 0; i < 100000; i++) {\n      double centerLat = -90 + 180.0 * random().nextDouble();\n      double centerLon = -180 + 360.0 * random().nextDouble();\n\n      double lat1 = -90 + 180.0 * random().nextDouble();\n      double lon1 = -180 + 360.0 * random().nextDouble();\n\n      double lat2 = -90 + 180.0 * random().nextDouble();\n      double lon2 = -180 + 360.0 * random().nextDouble();\n\n      int expected = Integer.signum(Double.compare(haversinMeters(centerLat, centerLon, lat1, lon1),\n                                                   haversinMeters(centerLat, centerLon, lat2, lon2)));\n      int actual = Integer.signum(Double.compare(haversinSortKey(centerLat, centerLon, lat1, lon1),\n                                                 haversinSortKey(centerLat, centerLon, lat2, lon2)));\n      assertEquals(expected, actual);\n      assertEquals(haversinMeters(centerLat, centerLon, lat1, lon1), haversinMeters(haversinSortKey(centerLat, centerLon, lat1, lon1)), 0.0D);\n      assertEquals(haversinMeters(centerLat, centerLon, lat2, lon2), haversinMeters(haversinSortKey(centerLat, centerLon, lat2, lon2)), 0.0D);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4208ed8e426ae5f75a41d8b4ae53f4587e413061","date":1580475454,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSloppyMath#testHaversinSortKey().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestSloppyMath#testHaversinSortKey().mjava","sourceNew":"  /** Test this method sorts the same way as real haversin */\n  public void testHaversinSortKey() {\n    int iters = atLeast(10000);\n    for (int i = 0; i < iters; i++) {\n      double centerLat = GeoTestUtil.nextLatitude();\n      double centerLon = GeoTestUtil.nextLongitude();\n\n      double lat1 = GeoTestUtil.nextLatitude();\n      double lon1 = GeoTestUtil.nextLongitude();\n\n      double lat2 = GeoTestUtil.nextLatitude();\n      double lon2 = GeoTestUtil.nextLongitude();\n\n      int expected = Integer.signum(Double.compare(haversinMeters(centerLat, centerLon, lat1, lon1),\n                                                   haversinMeters(centerLat, centerLon, lat2, lon2)));\n      int actual = Integer.signum(Double.compare(haversinSortKey(centerLat, centerLon, lat1, lon1),\n                                                 haversinSortKey(centerLat, centerLon, lat2, lon2)));\n      assertEquals(expected, actual);\n      assertEquals(haversinMeters(centerLat, centerLon, lat1, lon1), haversinMeters(haversinSortKey(centerLat, centerLon, lat1, lon1)), 0.0D);\n      assertEquals(haversinMeters(centerLat, centerLon, lat2, lon2), haversinMeters(haversinSortKey(centerLat, centerLon, lat2, lon2)), 0.0D);\n    }\n  }\n\n","sourceOld":"  /** Test this method sorts the same way as real haversin */\n  public void testHaversinSortKey() {\n    for (int i = 0; i < 100000; i++) {\n      double centerLat = GeoTestUtil.nextLatitude();\n      double centerLon = GeoTestUtil.nextLongitude();\n\n      double lat1 = GeoTestUtil.nextLatitude();\n      double lon1 = GeoTestUtil.nextLongitude();\n\n      double lat2 = GeoTestUtil.nextLatitude();\n      double lon2 = GeoTestUtil.nextLongitude();\n\n      int expected = Integer.signum(Double.compare(haversinMeters(centerLat, centerLon, lat1, lon1),\n                                                   haversinMeters(centerLat, centerLon, lat2, lon2)));\n      int actual = Integer.signum(Double.compare(haversinSortKey(centerLat, centerLon, lat1, lon1),\n                                                 haversinSortKey(centerLat, centerLon, lat2, lon2)));\n      assertEquals(expected, actual);\n      assertEquals(haversinMeters(centerLat, centerLon, lat1, lon1), haversinMeters(haversinSortKey(centerLat, centerLon, lat1, lon1)), 0.0D);\n      assertEquals(haversinMeters(centerLat, centerLon, lat2, lon2), haversinMeters(haversinSortKey(centerLat, centerLon, lat2, lon2)), 0.0D);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["09f15823cf5eb6e807005579e875e117d8598f95"],"daf6e9d7d2b09412f97abae089a44cc03f5d5a14":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"09f15823cf5eb6e807005579e875e117d8598f95":["ec60431d008a694828dacb4bc3cda775b6c44a9f","daf6e9d7d2b09412f97abae089a44cc03f5d5a14"]},"commit2Childs":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["daf6e9d7d2b09412f97abae089a44cc03f5d5a14","09f15823cf5eb6e807005579e875e117d8598f95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"daf6e9d7d2b09412f97abae089a44cc03f5d5a14":["09f15823cf5eb6e807005579e875e117d8598f95"],"09f15823cf5eb6e807005579e875e117d8598f95":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}