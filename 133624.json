{"path":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","commits":[{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               boolean needsOffsets) throws IOException {\n    //System.out.println(\"D&P: field=\" + field.name);\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              needsOffsets);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, needsOffsets);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (field.indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      return null;\n    }\n    //System.out.println(\"D&P: field=\" + field.name);\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse));\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               boolean needsOffsets) throws IOException {\n    //System.out.println(\"D&P: field=\" + field.name);\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              needsOffsets);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, needsOffsets);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               boolean needsOffsets) throws IOException {\n    //System.out.println(\"D&P: field=\" + field.name);\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              needsOffsets);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, needsOffsets);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}