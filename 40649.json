{"path":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newSetQuery(String,byte[]...).mjava","commits":[{"id":"f429037bedccb27766e77f5e772b291a8d1bc97c","date":1456353956,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newSetQuery(String,byte[]...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param valuesIn all values to match\n   */\n  public static Query newSetQuery(String field, byte[]... valuesIn) throws IOException {\n\n    // Make sure all byte[] have the same length\n    int bytesPerDim = -1;\n    for(byte[] value : valuesIn) {\n      if (bytesPerDim == -1) {\n        bytesPerDim = value.length;\n      } else if (value.length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all byte[] must be the same length, but saw \" + bytesPerDim + \" and \" + value.length);\n      }\n    }\n\n    // Don't unexpectedly change the user's incoming values array:\n    byte[][] values = valuesIn.clone();\n\n    Arrays.sort(values,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(a.length, a, 0, b, 0);\n                  }\n                });\n\n    // Silliness:\n    if (bytesPerDim == -1) {\n      // nocommit make sure this is tested\n      bytesPerDim = 1;\n    }\n\n    final BytesRef value = new BytesRef(new byte[bytesPerDim]);\n    \n    return new PointInSetQuery(field, 1, bytesPerDim,\n                               new BytesRefIterator() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == values.length) {\n                                     return null;\n                                   } else {\n                                     value.bytes = values[upto];\n                                     upto++;\n                                     return value;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        return new BytesRef(value).toString();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b9ccce763ea3c7e51eff749e584c061d8744b72d","date":1456395668,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newSetQuery(String,byte[]...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newSetQuery(String,byte[]...).mjava","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param valuesIn all values to match\n   */\n  public static Query newSetQuery(String field, byte[]... valuesIn) throws IOException {\n\n    // Make sure all byte[] have the same length\n    int bytesPerDim = -1;\n    for(byte[] value : valuesIn) {\n      if (bytesPerDim == -1) {\n        bytesPerDim = value.length;\n      } else if (value.length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all byte[] must be the same length, but saw \" + bytesPerDim + \" and \" + value.length);\n      }\n    }\n\n    if (bytesPerDim == -1) {\n      // There are no points, and we cannot guess the bytesPerDim here, so we return an equivalent query:\n      return new MatchNoDocsQuery();\n    }\n\n    // Don't unexpectedly change the user's incoming values array:\n    byte[][] values = valuesIn.clone();\n\n    Arrays.sort(values,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(a.length, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef value = new BytesRef(new byte[bytesPerDim]);\n    \n    return new PointInSetQuery(field, 1, bytesPerDim,\n                               new BytesRefIterator() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == values.length) {\n                                     return null;\n                                   } else {\n                                     value.bytes = values[upto];\n                                     upto++;\n                                     return value;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        return new BytesRef(value).toString();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param valuesIn all values to match\n   */\n  public static Query newSetQuery(String field, byte[]... valuesIn) throws IOException {\n\n    // Make sure all byte[] have the same length\n    int bytesPerDim = -1;\n    for(byte[] value : valuesIn) {\n      if (bytesPerDim == -1) {\n        bytesPerDim = value.length;\n      } else if (value.length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all byte[] must be the same length, but saw \" + bytesPerDim + \" and \" + value.length);\n      }\n    }\n\n    // Don't unexpectedly change the user's incoming values array:\n    byte[][] values = valuesIn.clone();\n\n    Arrays.sort(values,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(a.length, a, 0, b, 0);\n                  }\n                });\n\n    // Silliness:\n    if (bytesPerDim == -1) {\n      // nocommit make sure this is tested\n      bytesPerDim = 1;\n    }\n\n    final BytesRef value = new BytesRef(new byte[bytesPerDim]);\n    \n    return new PointInSetQuery(field, 1, bytesPerDim,\n                               new BytesRefIterator() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == values.length) {\n                                     return null;\n                                   } else {\n                                     value.bytes = values[upto];\n                                     upto++;\n                                     return value;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        return new BytesRef(value).toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868f63baffb79407d4b49f3c0be8dc4725ffc6e1","date":1456423715,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newSetQuery(String,byte[]...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param valuesIn all values to match\n   */\n  public static Query newSetQuery(String field, byte[]... valuesIn) throws IOException {\n\n    // Make sure all byte[] have the same length\n    int bytesPerDim = -1;\n    for(byte[] value : valuesIn) {\n      if (bytesPerDim == -1) {\n        bytesPerDim = value.length;\n      } else if (value.length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all byte[] must be the same length, but saw \" + bytesPerDim + \" and \" + value.length);\n      }\n    }\n\n    if (bytesPerDim == -1) {\n      // There are no points, and we cannot guess the bytesPerDim here, so we return an equivalent query:\n      return new MatchNoDocsQuery();\n    }\n\n    // Don't unexpectedly change the user's incoming values array:\n    byte[][] values = valuesIn.clone();\n\n    Arrays.sort(values,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(a.length, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef value = new BytesRef(new byte[bytesPerDim]);\n    \n    return new PointInSetQuery(field, 1, bytesPerDim,\n                               new BytesRefIterator() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == values.length) {\n                                     return null;\n                                   } else {\n                                     value.bytes = values[upto];\n                                     upto++;\n                                     return value;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        return new BytesRef(value).toString();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newSetQuery(String,byte[]...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newSetQuery(String,byte[]...).mjava","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, byte[]... values) {\n\n    // Make sure all byte[] have the same length\n    int bytesPerDim = -1;\n    for(byte[] value : values) {\n      if (bytesPerDim == -1) {\n        bytesPerDim = value.length;\n      } else if (value.length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all byte[] must be the same length, but saw \" + bytesPerDim + \" and \" + value.length);\n      }\n    }\n\n    if (bytesPerDim == -1) {\n      // There are no points, and we cannot guess the bytesPerDim here, so we return an equivalent query:\n      return new MatchNoDocsQuery();\n    }\n\n    // Don't unexpectedly change the user's incoming values array:\n    byte[][] sortedValues = values.clone();\n    Arrays.sort(sortedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(a.length, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef encoded = new BytesRef(new byte[bytesPerDim]);\n    \n    return new PointInSetQuery(field, 1, bytesPerDim,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encoded.bytes = sortedValues[upto];\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        return new BytesRef(value).toString();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param valuesIn all values to match\n   */\n  public static Query newSetQuery(String field, byte[]... valuesIn) throws IOException {\n\n    // Make sure all byte[] have the same length\n    int bytesPerDim = -1;\n    for(byte[] value : valuesIn) {\n      if (bytesPerDim == -1) {\n        bytesPerDim = value.length;\n      } else if (value.length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all byte[] must be the same length, but saw \" + bytesPerDim + \" and \" + value.length);\n      }\n    }\n\n    if (bytesPerDim == -1) {\n      // There are no points, and we cannot guess the bytesPerDim here, so we return an equivalent query:\n      return new MatchNoDocsQuery();\n    }\n\n    // Don't unexpectedly change the user's incoming values array:\n    byte[][] values = valuesIn.clone();\n\n    Arrays.sort(values,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(a.length, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef value = new BytesRef(new byte[bytesPerDim]);\n    \n    return new PointInSetQuery(field, 1, bytesPerDim,\n                               new BytesRefIterator() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == values.length) {\n                                     return null;\n                                   } else {\n                                     value.bytes = values[upto];\n                                     upto++;\n                                     return value;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        return new BytesRef(value).toString();\n      }\n    };\n  }\n\n","bugFix":["f429037bedccb27766e77f5e772b291a8d1bc97c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newSetQuery(String,byte[]...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newSetQuery(String,byte[]...).mjava","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, byte[]... values) {\n\n    // Make sure all byte[] have the same length\n    int bytesPerDim = -1;\n    for(byte[] value : values) {\n      if (bytesPerDim == -1) {\n        bytesPerDim = value.length;\n      } else if (value.length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all byte[] must be the same length, but saw \" + bytesPerDim + \" and \" + value.length);\n      }\n    }\n\n    if (bytesPerDim == -1) {\n      // There are no points, and we cannot guess the bytesPerDim here, so we return an equivalent query:\n      return new MatchNoDocsQuery();\n    }\n\n    // Don't unexpectedly change the user's incoming values array:\n    byte[][] sortedValues = values.clone();\n    Arrays.sort(sortedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(a.length, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef encoded = new BytesRef(new byte[bytesPerDim]);\n    \n    return new PointInSetQuery(field, 1, bytesPerDim,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encoded.bytes = sortedValues[upto];\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        return new BytesRef(value).toString();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param valuesIn all values to match\n   */\n  public static Query newSetQuery(String field, byte[]... valuesIn) throws IOException {\n\n    // Make sure all byte[] have the same length\n    int bytesPerDim = -1;\n    for(byte[] value : valuesIn) {\n      if (bytesPerDim == -1) {\n        bytesPerDim = value.length;\n      } else if (value.length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all byte[] must be the same length, but saw \" + bytesPerDim + \" and \" + value.length);\n      }\n    }\n\n    if (bytesPerDim == -1) {\n      // There are no points, and we cannot guess the bytesPerDim here, so we return an equivalent query:\n      return new MatchNoDocsQuery();\n    }\n\n    // Don't unexpectedly change the user's incoming values array:\n    byte[][] values = valuesIn.clone();\n\n    Arrays.sort(values,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(a.length, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef value = new BytesRef(new byte[bytesPerDim]);\n    \n    return new PointInSetQuery(field, 1, bytesPerDim,\n                               new BytesRefIterator() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == values.length) {\n                                     return null;\n                                   } else {\n                                     value.bytes = values[upto];\n                                     upto++;\n                                     return value;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        return new BytesRef(value).toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newSetQuery(String,byte[]...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newSetQuery(String,byte[]...).mjava","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, byte[]... values) {\n\n    // Make sure all byte[] have the same length\n    int bytesPerDim = -1;\n    for(byte[] value : values) {\n      if (bytesPerDim == -1) {\n        bytesPerDim = value.length;\n      } else if (value.length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all byte[] must be the same length, but saw \" + bytesPerDim + \" and \" + value.length);\n      }\n    }\n\n    if (bytesPerDim == -1) {\n      // There are no points, and we cannot guess the bytesPerDim here, so we return an equivalent query:\n      return new MatchNoDocsQuery();\n    }\n\n    // Don't unexpectedly change the user's incoming values array:\n    byte[][] sortedValues = values.clone();\n    Arrays.sort(sortedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(a.length, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef encoded = new BytesRef(new byte[bytesPerDim]);\n    \n    return new PointInSetQuery(field, 1, bytesPerDim,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encoded.bytes = sortedValues[upto];\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        return new BytesRef(value).toString();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param valuesIn all values to match\n   */\n  public static Query newSetQuery(String field, byte[]... valuesIn) throws IOException {\n\n    // Make sure all byte[] have the same length\n    int bytesPerDim = -1;\n    for(byte[] value : valuesIn) {\n      if (bytesPerDim == -1) {\n        bytesPerDim = value.length;\n      } else if (value.length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all byte[] must be the same length, but saw \" + bytesPerDim + \" and \" + value.length);\n      }\n    }\n\n    if (bytesPerDim == -1) {\n      // There are no points, and we cannot guess the bytesPerDim here, so we return an equivalent query:\n      return new MatchNoDocsQuery();\n    }\n\n    // Don't unexpectedly change the user's incoming values array:\n    byte[][] values = valuesIn.clone();\n\n    Arrays.sort(values,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(a.length, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef value = new BytesRef(new byte[bytesPerDim]);\n    \n    return new PointInSetQuery(field, 1, bytesPerDim,\n                               new BytesRefIterator() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == values.length) {\n                                     return null;\n                                   } else {\n                                     value.bytes = values[upto];\n                                     upto++;\n                                     return value;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        return new BytesRef(value).toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4778b794a897685e2f6c62caa1ac04983d1e69f","date":1467997674,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newSetQuery(String,byte[]...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newSetQuery(String,byte[]...).mjava","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, byte[]... values) {\n\n    // Make sure all byte[] have the same length\n    int bytesPerDim = -1;\n    for(byte[] value : values) {\n      if (bytesPerDim == -1) {\n        bytesPerDim = value.length;\n      } else if (value.length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all byte[] must be the same length, but saw \" + bytesPerDim + \" and \" + value.length);\n      }\n    }\n\n    if (bytesPerDim == -1) {\n      // There are no points, and we cannot guess the bytesPerDim here, so we return an equivalent query:\n      return new MatchNoDocsQuery(\"empty BinaryPoint.newSetQuery\");\n    }\n\n    // Don't unexpectedly change the user's incoming values array:\n    byte[][] sortedValues = values.clone();\n    Arrays.sort(sortedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(a.length, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef encoded = new BytesRef(new byte[bytesPerDim]);\n    \n    return new PointInSetQuery(field, 1, bytesPerDim,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encoded.bytes = sortedValues[upto];\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        return new BytesRef(value).toString();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, byte[]... values) {\n\n    // Make sure all byte[] have the same length\n    int bytesPerDim = -1;\n    for(byte[] value : values) {\n      if (bytesPerDim == -1) {\n        bytesPerDim = value.length;\n      } else if (value.length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all byte[] must be the same length, but saw \" + bytesPerDim + \" and \" + value.length);\n      }\n    }\n\n    if (bytesPerDim == -1) {\n      // There are no points, and we cannot guess the bytesPerDim here, so we return an equivalent query:\n      return new MatchNoDocsQuery();\n    }\n\n    // Don't unexpectedly change the user's incoming values array:\n    byte[][] sortedValues = values.clone();\n    Arrays.sort(sortedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(a.length, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef encoded = new BytesRef(new byte[bytesPerDim]);\n    \n    return new PointInSetQuery(field, 1, bytesPerDim,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encoded.bytes = sortedValues[upto];\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        return new BytesRef(value).toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newSetQuery(String,byte[]...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newSetQuery(String,byte[]...).mjava","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, byte[]... values) {\n\n    // Make sure all byte[] have the same length\n    int bytesPerDim = -1;\n    for(byte[] value : values) {\n      if (bytesPerDim == -1) {\n        bytesPerDim = value.length;\n      } else if (value.length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all byte[] must be the same length, but saw \" + bytesPerDim + \" and \" + value.length);\n      }\n    }\n\n    if (bytesPerDim == -1) {\n      // There are no points, and we cannot guess the bytesPerDim here, so we return an equivalent query:\n      return new MatchNoDocsQuery(\"empty BinaryPoint.newSetQuery\");\n    }\n\n    // Don't unexpectedly change the user's incoming values array:\n    byte[][] sortedValues = values.clone();\n    Arrays.sort(sortedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(a.length, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef encoded = new BytesRef(new byte[bytesPerDim]);\n    \n    return new PointInSetQuery(field, 1, bytesPerDim,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encoded.bytes = sortedValues[upto];\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        return new BytesRef(value).toString();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, byte[]... values) {\n\n    // Make sure all byte[] have the same length\n    int bytesPerDim = -1;\n    for(byte[] value : values) {\n      if (bytesPerDim == -1) {\n        bytesPerDim = value.length;\n      } else if (value.length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all byte[] must be the same length, but saw \" + bytesPerDim + \" and \" + value.length);\n      }\n    }\n\n    if (bytesPerDim == -1) {\n      // There are no points, and we cannot guess the bytesPerDim here, so we return an equivalent query:\n      return new MatchNoDocsQuery();\n    }\n\n    // Don't unexpectedly change the user's incoming values array:\n    byte[][] sortedValues = values.clone();\n    Arrays.sort(sortedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(a.length, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef encoded = new BytesRef(new byte[bytesPerDim]);\n    \n    return new PointInSetQuery(field, 1, bytesPerDim,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encoded.bytes = sortedValues[upto];\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        return new BytesRef(value).toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"456d7e7092cb043c740b4674301660ee8abc26fe","date":1517645879,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newSetQuery(String,byte[]...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newSetQuery(String,byte[]...).mjava","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, byte[]... values) {\n\n    // Make sure all byte[] have the same length\n    int bytesPerDim = -1;\n    for(byte[] value : values) {\n      if (bytesPerDim == -1) {\n        bytesPerDim = value.length;\n      } else if (value.length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all byte[] must be the same length, but saw \" + bytesPerDim + \" and \" + value.length);\n      }\n    }\n\n    if (bytesPerDim == -1) {\n      // There are no points, and we cannot guess the bytesPerDim here, so we return an equivalent query:\n      return new MatchNoDocsQuery(\"empty BinaryPoint.newSetQuery\");\n    }\n\n    // Don't unexpectedly change the user's incoming values array:\n    byte[][] sortedValues = values.clone();\n    Arrays.sort(sortedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return FutureArrays.compareUnsigned(a, 0, a.length, b, 0, b.length);\n                  }\n                });\n\n    final BytesRef encoded = new BytesRef(new byte[bytesPerDim]);\n    \n    return new PointInSetQuery(field, 1, bytesPerDim,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encoded.bytes = sortedValues[upto];\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        return new BytesRef(value).toString();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, byte[]... values) {\n\n    // Make sure all byte[] have the same length\n    int bytesPerDim = -1;\n    for(byte[] value : values) {\n      if (bytesPerDim == -1) {\n        bytesPerDim = value.length;\n      } else if (value.length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all byte[] must be the same length, but saw \" + bytesPerDim + \" and \" + value.length);\n      }\n    }\n\n    if (bytesPerDim == -1) {\n      // There are no points, and we cannot guess the bytesPerDim here, so we return an equivalent query:\n      return new MatchNoDocsQuery(\"empty BinaryPoint.newSetQuery\");\n    }\n\n    // Don't unexpectedly change the user's incoming values array:\n    byte[][] sortedValues = values.clone();\n    Arrays.sort(sortedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(a.length, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef encoded = new BytesRef(new byte[bytesPerDim]);\n    \n    return new PointInSetQuery(field, 1, bytesPerDim,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encoded.bytes = sortedValues[upto];\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        return new BytesRef(value).toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newSetQuery(String,byte[]...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newSetQuery(String,byte[]...).mjava","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, byte[]... values) {\n\n    // Make sure all byte[] have the same length\n    int bytesPerDim = -1;\n    for(byte[] value : values) {\n      if (bytesPerDim == -1) {\n        bytesPerDim = value.length;\n      } else if (value.length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all byte[] must be the same length, but saw \" + bytesPerDim + \" and \" + value.length);\n      }\n    }\n\n    if (bytesPerDim == -1) {\n      // There are no points, and we cannot guess the bytesPerDim here, so we return an equivalent query:\n      return new MatchNoDocsQuery(\"empty BinaryPoint.newSetQuery\");\n    }\n\n    // Don't unexpectedly change the user's incoming values array:\n    byte[][] sortedValues = values.clone();\n    Arrays.sort(sortedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return Arrays.compareUnsigned(a, 0, a.length, b, 0, b.length);\n                  }\n                });\n\n    final BytesRef encoded = new BytesRef(new byte[bytesPerDim]);\n    \n    return new PointInSetQuery(field, 1, bytesPerDim,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encoded.bytes = sortedValues[upto];\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        return new BytesRef(value).toString();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, byte[]... values) {\n\n    // Make sure all byte[] have the same length\n    int bytesPerDim = -1;\n    for(byte[] value : values) {\n      if (bytesPerDim == -1) {\n        bytesPerDim = value.length;\n      } else if (value.length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all byte[] must be the same length, but saw \" + bytesPerDim + \" and \" + value.length);\n      }\n    }\n\n    if (bytesPerDim == -1) {\n      // There are no points, and we cannot guess the bytesPerDim here, so we return an equivalent query:\n      return new MatchNoDocsQuery(\"empty BinaryPoint.newSetQuery\");\n    }\n\n    // Don't unexpectedly change the user's incoming values array:\n    byte[][] sortedValues = values.clone();\n    Arrays.sort(sortedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return FutureArrays.compareUnsigned(a, 0, a.length, b, 0, b.length);\n                  }\n                });\n\n    final BytesRef encoded = new BytesRef(new byte[bytesPerDim]);\n    \n    return new PointInSetQuery(field, 1, bytesPerDim,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encoded.bytes = sortedValues[upto];\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        return new BytesRef(value).toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["456d7e7092cb043c740b4674301660ee8abc26fe"],"456d7e7092cb043c740b4674301660ee8abc26fe":["f4778b794a897685e2f6c62caa1ac04983d1e69f"],"f429037bedccb27766e77f5e772b291a8d1bc97c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b9ccce763ea3c7e51eff749e584c061d8744b72d"],"b9ccce763ea3c7e51eff749e584c061d8744b72d":["f429037bedccb27766e77f5e772b291a8d1bc97c"],"f4778b794a897685e2f6c62caa1ac04983d1e69f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1","c422e924212367b334b4938f1fd3e44438e88c40"],"c422e924212367b334b4938f1fd3e44438e88c40":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","f4778b794a897685e2f6c62caa1ac04983d1e69f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"456d7e7092cb043c740b4674301660ee8abc26fe":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"f429037bedccb27766e77f5e772b291a8d1bc97c":["b9ccce763ea3c7e51eff749e584c061d8744b72d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f429037bedccb27766e77f5e772b291a8d1bc97c","868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"b9ccce763ea3c7e51eff749e584c061d8744b72d":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"f4778b794a897685e2f6c62caa1ac04983d1e69f":["456d7e7092cb043c740b4674301660ee8abc26fe","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["f4778b794a897685e2f6c62caa1ac04983d1e69f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}