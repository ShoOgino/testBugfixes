{"path":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#internalComponentRelate(double,double,double,double).mjava","commits":[{"id":"e4fccad460342b1af30cb328cc8297751a218d78","date":1541177339,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#internalComponentRelate(double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns relation to the provided rectangle for this component */\n  protected Relation internalComponentRelate(double minLat, double maxLat, double minLon, double maxLon) {\n    // if the bounding boxes are disjoint then the shape does not cross\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    // if the rectangle fully encloses us, we cross.\n    if (minLat <= this.minLat && maxLat >= this.maxLat && minLon <= this.minLon && maxLon >= this.maxLon) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n\n    Relation shapeRelation = componentRelate(minLat, maxLat, minLon, maxLon);\n    if (shapeRelation != null) {\n      return shapeRelation;\n    }\n\n    // we cross\n    if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1277bce5122ddd82fb8cce58045ae85df0714a4","date":1549639178,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#internalComponentRelate(double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#internalComponentRelate(double,double,double,double).mjava","sourceNew":"  /** Returns relation to the provided rectangle for this component */\n  protected Relation internalComponentRelate(double minLat, double maxLat, double minLon, double maxLon) {\n    // if the bounding boxes are disjoint then the shape does not cross\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    // if the rectangle fully encloses us, we cross.\n    if (minLat <= this.minLat && maxLat >= this.maxLat && minLon <= this.minLon && maxLon >= this.maxLon) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return componentRelate(minLat, maxLat, minLon, maxLon);\n  }\n\n","sourceOld":"  /** Returns relation to the provided rectangle for this component */\n  protected Relation internalComponentRelate(double minLat, double maxLat, double minLon, double maxLon) {\n    // if the bounding boxes are disjoint then the shape does not cross\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    // if the rectangle fully encloses us, we cross.\n    if (minLat <= this.minLat && maxLat >= this.maxLat && minLon <= this.minLon && maxLon >= this.maxLon) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n\n    Relation shapeRelation = componentRelate(minLat, maxLat, minLon, maxLon);\n    if (shapeRelation != null) {\n      return shapeRelation;\n    }\n\n    // we cross\n    if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#internalComponentRelate(double,double,double,double).mjava","sourceNew":null,"sourceOld":"  /** Returns relation to the provided rectangle for this component */\n  protected Relation internalComponentRelate(double minLat, double maxLat, double minLon, double maxLon) {\n    // if the bounding boxes are disjoint then the shape does not cross\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    // if the rectangle fully encloses us, we cross.\n    if (minLat <= this.minLat && maxLat >= this.maxLat && minLon <= this.minLon && maxLon >= this.maxLon) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return componentRelate(minLat, maxLat, minLon, maxLon);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#internalComponentRelate(double,double,double,double).mjava","sourceNew":null,"sourceOld":"  /** Returns relation to the provided rectangle for this component */\n  protected Relation internalComponentRelate(double minLat, double maxLat, double minLon, double maxLon) {\n    // if the bounding boxes are disjoint then the shape does not cross\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    // if the rectangle fully encloses us, we cross.\n    if (minLat <= this.minLat && maxLat >= this.maxLat && minLon <= this.minLon && maxLon >= this.maxLon) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return componentRelate(minLat, maxLat, minLon, maxLon);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["f1277bce5122ddd82fb8cce58045ae85df0714a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e4fccad460342b1af30cb328cc8297751a218d78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f1277bce5122ddd82fb8cce58045ae85df0714a4":["e4fccad460342b1af30cb328cc8297751a218d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"b0b597c65628ca9e73913a07e81691f8229bae35":["f1277bce5122ddd82fb8cce58045ae85df0714a4","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4fccad460342b1af30cb328cc8297751a218d78"],"e4fccad460342b1af30cb328cc8297751a218d78":["f1277bce5122ddd82fb8cce58045ae85df0714a4"],"f1277bce5122ddd82fb8cce58045ae85df0714a4":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}