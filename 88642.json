{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator.EntryComparator#compare(Entry[String,Expression[]],Entry[String,Expression[]]).mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator.EntryComparator#compare(Entry[String,Expression[]],Entry[String,Expression[]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator.EntryComparator#compare(Entry[String,Expression[]],Entry[String,Expression[]]).mjava","sourceNew":"    @Override\n    public int compare(Entry<String,Expression[]> o1, Entry<String,Expression[]> o2) {\n      return comp.compare(o1.getValue()[comparatorExpressionPlace], o2.getValue()[comparatorExpressionPlace]);\n    }\n\n","sourceOld":"    @Override\n    public int compare(Entry<String,Expression[]> o1, Entry<String,Expression[]> o2) {\n      return comp.compare(o1.getValue()[comparatorExpressionPlace], o2.getValue()[comparatorExpressionPlace]);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b3034cd34b8cb87874ebdd7b1cfb2281200623","date":1498354741,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator.EntryComparator#compare(Entry[String,Expression[]],Entry[String,Expression[]]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator.EntryComparator#compare(Entry[String,Expression[]],Entry[String,Expression[]]).mjava","sourceNew":"    @Override\n    public int compare(Entry<String,Expression[]> o1, Entry<String,Expression[]> o2) {\n      \n      // Handle nulls. Null is treated as an infinitely big number so that in case of ASCENDING sorts, \n      // Nulls will appear last. In case of DESC sorts, Nulls will appear last. \n      boolean firstIsNull = false;\n      if (o1 == null || o1.getValue() == null || o1.getValue()[comparatorExpressionPlace] == null) \n        firstIsNull = true;\n      boolean secondIsNull = false;\n      if (o2 == null || o2.getValue() == null || o2.getValue()[comparatorExpressionPlace] == null) \n        secondIsNull  = true;\n      if (firstIsNull && secondIsNull)\n        return 0;\n      else if (firstIsNull)\n        return 1;\n      else if (secondIsNull)\n        return -1;\n      \n      return comp.compare(o1.getValue()[comparatorExpressionPlace], o2.getValue()[comparatorExpressionPlace]);\n    }\n\n","sourceOld":"    @Override\n    public int compare(Entry<String,Expression[]> o1, Entry<String,Expression[]> o2) {\n      return comp.compare(o1.getValue()[comparatorExpressionPlace], o2.getValue()[comparatorExpressionPlace]);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator.EntryComparator#compare(Entry[String,Expression[]],Entry[String,Expression[]]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator.EntryComparator#compare(Entry[String,Expression[]],Entry[String,Expression[]]).mjava","sourceNew":"    @Override\n    public int compare(Entry<String,Expression[]> o1, Entry<String,Expression[]> o2) {\n      \n      // Handle nulls. Null is treated as an infinitely big number so that in case of ASCENDING sorts, \n      // Nulls will appear last. In case of DESC sorts, Nulls will appear last. \n      boolean firstIsNull = false;\n      if (o1 == null || o1.getValue() == null || o1.getValue()[comparatorExpressionPlace] == null) \n        firstIsNull = true;\n      boolean secondIsNull = false;\n      if (o2 == null || o2.getValue() == null || o2.getValue()[comparatorExpressionPlace] == null) \n        secondIsNull  = true;\n      if (firstIsNull && secondIsNull)\n        return 0;\n      else if (firstIsNull)\n        return 1;\n      else if (secondIsNull)\n        return -1;\n      \n      return comp.compare(o1.getValue()[comparatorExpressionPlace], o2.getValue()[comparatorExpressionPlace]);\n    }\n\n","sourceOld":"    @Override\n    public int compare(Entry<String,Expression[]> o1, Entry<String,Expression[]> o2) {\n      return comp.compare(o1.getValue()[comparatorExpressionPlace], o2.getValue()[comparatorExpressionPlace]);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2d13525f1dc36cdefcb92f649c930405104dbe8","date":1498512806,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator.EntryComparator#compare(Entry[String,Expression[]],Entry[String,Expression[]]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator.EntryComparator#compare(Entry[String,Expression[]],Entry[String,Expression[]]).mjava","sourceNew":"    @Override\n    public int compare(Entry<String,Expression[]> o1, Entry<String,Expression[]> o2) {\n      return comp.compare(o1.getValue()[comparatorExpressionPlace], o2.getValue()[comparatorExpressionPlace]);\n    }\n\n","sourceOld":"    @Override\n    public int compare(Entry<String,Expression[]> o1, Entry<String,Expression[]> o2) {\n      \n      // Handle nulls. Null is treated as an infinitely big number so that in case of ASCENDING sorts, \n      // Nulls will appear last. In case of DESC sorts, Nulls will appear last. \n      boolean firstIsNull = false;\n      if (o1 == null || o1.getValue() == null || o1.getValue()[comparatorExpressionPlace] == null) \n        firstIsNull = true;\n      boolean secondIsNull = false;\n      if (o2 == null || o2.getValue() == null || o2.getValue()[comparatorExpressionPlace] == null) \n        secondIsNull  = true;\n      if (firstIsNull && secondIsNull)\n        return 0;\n      else if (firstIsNull)\n        return 1;\n      else if (secondIsNull)\n        return -1;\n      \n      return comp.compare(o1.getValue()[comparatorExpressionPlace], o2.getValue()[comparatorExpressionPlace]);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator.EntryComparator#compare(Entry[String,Expression[]],Entry[String,Expression[]]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator.EntryComparator#compare(Entry[String,Expression[]],Entry[String,Expression[]]).mjava","sourceNew":"    @Override\n    public int compare(Entry<String,Expression[]> o1, Entry<String,Expression[]> o2) {\n      return comp.compare(o1.getValue()[comparatorExpressionPlace], o2.getValue()[comparatorExpressionPlace]);\n    }\n\n","sourceOld":"    @Override\n    public int compare(Entry<String,Expression[]> o1, Entry<String,Expression[]> o2) {\n      \n      // Handle nulls. Null is treated as an infinitely big number so that in case of ASCENDING sorts, \n      // Nulls will appear last. In case of DESC sorts, Nulls will appear last. \n      boolean firstIsNull = false;\n      if (o1 == null || o1.getValue() == null || o1.getValue()[comparatorExpressionPlace] == null) \n        firstIsNull = true;\n      boolean secondIsNull = false;\n      if (o2 == null || o2.getValue() == null || o2.getValue()[comparatorExpressionPlace] == null) \n        secondIsNull  = true;\n      if (firstIsNull && secondIsNull)\n        return 0;\n      else if (firstIsNull)\n        return 1;\n      else if (secondIsNull)\n        return -1;\n      \n      return comp.compare(o1.getValue()[comparatorExpressionPlace], o2.getValue()[comparatorExpressionPlace]);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator.EntryComparator#compare(Entry[String,Expression[]],Entry[String,Expression[]]).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int compare(Entry<String,Expression[]> o1, Entry<String,Expression[]> o2) {\n      return comp.compare(o1.getValue()[comparatorExpressionPlace], o2.getValue()[comparatorExpressionPlace]);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator.EntryComparator#compare(Entry[String,Expression[]],Entry[String,Expression[]]).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int compare(Entry<String,Expression[]> o1, Entry<String,Expression[]> o2) {\n      return comp.compare(o1.getValue()[comparatorExpressionPlace], o2.getValue()[comparatorExpressionPlace]);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator.EntryComparator#compare(Entry[String,Expression[]],Entry[String,Expression[]]).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int compare(Entry<String,Expression[]> o1, Entry<String,Expression[]> o2) {\n      return comp.compare(o1.getValue()[comparatorExpressionPlace], o2.getValue()[comparatorExpressionPlace]);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a2d13525f1dc36cdefcb92f649c930405104dbe8":["43b3034cd34b8cb87874ebdd7b1cfb2281200623"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","a2d13525f1dc36cdefcb92f649c930405104dbe8"],"43b3034cd34b8cb87874ebdd7b1cfb2281200623":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"30c8e5574b55d57947e989443dfde611646530ee":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a2d13525f1dc36cdefcb92f649c930405104dbe8"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["0f719faa74f7213d4a395510dbc1f1b7cb178484","43b3034cd34b8cb87874ebdd7b1cfb2281200623"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["0f719faa74f7213d4a395510dbc1f1b7cb178484","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a2d13525f1dc36cdefcb92f649c930405104dbe8":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["30c8e5574b55d57947e989443dfde611646530ee"],"43b3034cd34b8cb87874ebdd7b1cfb2281200623":["a2d13525f1dc36cdefcb92f649c930405104dbe8","b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["43b3034cd34b8cb87874ebdd7b1cfb2281200623","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}