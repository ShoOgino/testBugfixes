{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testCloseWhileMergeIsRunning().mjava","commits":[{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testCloseWhileMergeIsRunning().mjava","pathOld":"/dev/null","sourceNew":"  public void testCloseWhileMergeIsRunning() throws IOException {\n    Directory dir = newDirectory();\n\n    final CountDownLatch mergeStarted = new CountDownLatch(1);\n    final CountDownLatch closeStarted = new CountDownLatch(1);\n\n    // If version is < 50 IW.close should throw an exception\n    // on still-running merges:\n    IndexWriterConfig iwc = newIndexWriterConfig(Version.LUCENE_48, new MockAnalyzer(random()));\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMergeFactor(2);\n    iwc.setMergePolicy(mp);\n    iwc.setInfoStream(new InfoStream() {\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n\n        @Override\n        public void message(String component, String message) {\n          if (message.equals(\"rollback\")) {\n            closeStarted.countDown();\n          }\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler() {\n        @Override\n        public void doMerge(MergePolicy.OneMerge merge) throws IOException {\n          mergeStarted.countDown();\n          try {\n            closeStarted.await();\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new RuntimeException(ie);\n          }\n          super.doMerge(merge);\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    w.addDocument(doc);\n    w.commit();\n    w.addDocument(doc);\n    w.commit();\n    try {\n      w.close();\n      fail(\"didn't hit exception\");\n    } catch (RuntimeException re) {\n      // expected\n      System.out.println(\"GOT: \" + re.getMessage());\n      assertTrue(re.getMessage().contains(\"this writer is closed, but some pending changes or running merges were discarded\"));\n    }\n    w.rollback();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1f3bfdf2fbf9eb7c32953111625b8149f767900","date":1398169177,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testCloseWhileMergeIsRunning().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testCloseWhileMergeIsRunning().mjava","sourceNew":"  public void testCloseWhileMergeIsRunning() throws IOException {\n    Directory dir = newDirectory();\n\n    final CountDownLatch mergeStarted = new CountDownLatch(1);\n    final CountDownLatch closeStarted = new CountDownLatch(1);\n\n    // If version is < 50 IW.close should throw an exception\n    // on still-running merges:\n    IndexWriterConfig iwc = newIndexWriterConfig(Version.LUCENE_48, new MockAnalyzer(random()));\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMergeFactor(2);\n    iwc.setMergePolicy(mp);\n    iwc.setInfoStream(new InfoStream() {\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n\n        @Override\n        public void message(String component, String message) {\n          if (message.equals(\"rollback\")) {\n            closeStarted.countDown();\n          }\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler() {\n        @Override\n        public void doMerge(MergePolicy.OneMerge merge) throws IOException {\n          mergeStarted.countDown();\n          try {\n            closeStarted.await();\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new RuntimeException(ie);\n          }\n          super.doMerge(merge);\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    w.addDocument(doc);\n    w.commit();\n    w.addDocument(doc);\n    w.commit();\n    try {\n      w.close();\n      fail(\"didn't hit exception\");\n    } catch (RuntimeException re) {\n      // expected\n      if (VERBOSE) {\n        System.out.println(\"GOT: \" + re.getMessage());\n      }\n      assertTrue(re.getMessage().contains(\"this writer is closed, but some pending changes or running merges were discarded\"));\n    }\n    w.rollback();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCloseWhileMergeIsRunning() throws IOException {\n    Directory dir = newDirectory();\n\n    final CountDownLatch mergeStarted = new CountDownLatch(1);\n    final CountDownLatch closeStarted = new CountDownLatch(1);\n\n    // If version is < 50 IW.close should throw an exception\n    // on still-running merges:\n    IndexWriterConfig iwc = newIndexWriterConfig(Version.LUCENE_48, new MockAnalyzer(random()));\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMergeFactor(2);\n    iwc.setMergePolicy(mp);\n    iwc.setInfoStream(new InfoStream() {\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n\n        @Override\n        public void message(String component, String message) {\n          if (message.equals(\"rollback\")) {\n            closeStarted.countDown();\n          }\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler() {\n        @Override\n        public void doMerge(MergePolicy.OneMerge merge) throws IOException {\n          mergeStarted.countDown();\n          try {\n            closeStarted.await();\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new RuntimeException(ie);\n          }\n          super.doMerge(merge);\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    w.addDocument(doc);\n    w.commit();\n    w.addDocument(doc);\n    w.commit();\n    try {\n      w.close();\n      fail(\"didn't hit exception\");\n    } catch (RuntimeException re) {\n      // expected\n      System.out.println(\"GOT: \" + re.getMessage());\n      assertTrue(re.getMessage().contains(\"this writer is closed, but some pending changes or running merges were discarded\"));\n    }\n    w.rollback();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518","date":1398331323,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testCloseWhileMergeIsRunning().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testCloseWhileMergeIsRunning().mjava","sourceNew":"  public void testCloseWhileMergeIsRunning() throws IOException {\n    Directory dir = newDirectory();\n\n    final CountDownLatch mergeStarted = new CountDownLatch(1);\n    final CountDownLatch closeStarted = new CountDownLatch(1);\n\n    // If version is < 50 IW.close should throw an exception\n    // on still-running merges:\n    IndexWriterConfig iwc = newIndexWriterConfig(Version.LUCENE_48, new MockAnalyzer(random()));\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMergeFactor(2);\n    iwc.setMergePolicy(mp);\n    iwc.setInfoStream(new InfoStream() {\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n\n        @Override\n        public void message(String component, String message) {\n          if (message.equals(\"rollback\")) {\n            closeStarted.countDown();\n          }\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler() {\n        @Override\n        public void doMerge(MergePolicy.OneMerge merge) throws IOException {\n          mergeStarted.countDown();\n          try {\n            closeStarted.await();\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new RuntimeException(ie);\n          }\n          super.doMerge(merge);\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    w.addDocument(doc);\n    w.commit();\n    w.addDocument(doc);\n    w.commit();\n    try {\n      w.close();\n      fail(\"didn't hit exception\");\n    } catch (RuntimeException re) {\n      // expected\n      if (VERBOSE) {\n        System.out.println(\"GOT: \" + re.getMessage());\n      }\n      assertTrue(re.getMessage().contains(\"this writer is closed, but some pending changes or running merges were discarded\"));\n    }\n    w.rollback();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCloseWhileMergeIsRunning() throws IOException {\n    Directory dir = newDirectory();\n\n    final CountDownLatch mergeStarted = new CountDownLatch(1);\n    final CountDownLatch closeStarted = new CountDownLatch(1);\n\n    // If version is < 50 IW.close should throw an exception\n    // on still-running merges:\n    IndexWriterConfig iwc = newIndexWriterConfig(Version.LUCENE_48, new MockAnalyzer(random()));\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMergeFactor(2);\n    iwc.setMergePolicy(mp);\n    iwc.setInfoStream(new InfoStream() {\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n\n        @Override\n        public void message(String component, String message) {\n          if (message.equals(\"rollback\")) {\n            closeStarted.countDown();\n          }\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler() {\n        @Override\n        public void doMerge(MergePolicy.OneMerge merge) throws IOException {\n          mergeStarted.countDown();\n          try {\n            closeStarted.await();\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new RuntimeException(ie);\n          }\n          super.doMerge(merge);\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    w.addDocument(doc);\n    w.commit();\n    w.addDocument(doc);\n    w.commit();\n    try {\n      w.close();\n      fail(\"didn't hit exception\");\n    } catch (RuntimeException re) {\n      // expected\n      System.out.println(\"GOT: \" + re.getMessage());\n      assertTrue(re.getMessage().contains(\"this writer is closed, but some pending changes or running merges were discarded\"));\n    }\n    w.rollback();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd330c9d05eacbd6e952fe0dea852e7ae037eb50","date":1398873035,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testCloseWhileMergeIsRunning().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testCloseWhileMergeIsRunning().mjava","sourceNew":"  public void testCloseWhileMergeIsRunning() throws IOException {\n    Directory dir = newDirectory();\n\n    final CountDownLatch mergeStarted = new CountDownLatch(1);\n    final CountDownLatch closeStarted = new CountDownLatch(1);\n\n    // If version is < 50 IW.close should throw an exception\n    // on still-running merges:\n    IndexWriterConfig iwc = newIndexWriterConfig(Version.LUCENE_4_8, new MockAnalyzer(random()));\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMergeFactor(2);\n    iwc.setMergePolicy(mp);\n    iwc.setInfoStream(new InfoStream() {\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n\n        @Override\n        public void message(String component, String message) {\n          if (message.equals(\"rollback\")) {\n            closeStarted.countDown();\n          }\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler() {\n        @Override\n        public void doMerge(MergePolicy.OneMerge merge) throws IOException {\n          mergeStarted.countDown();\n          try {\n            closeStarted.await();\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new RuntimeException(ie);\n          }\n          super.doMerge(merge);\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    w.addDocument(doc);\n    w.commit();\n    w.addDocument(doc);\n    w.commit();\n    try {\n      w.close();\n      fail(\"didn't hit exception\");\n    } catch (RuntimeException re) {\n      // expected\n      if (VERBOSE) {\n        System.out.println(\"GOT: \" + re.getMessage());\n      }\n      assertTrue(re.getMessage().contains(\"this writer is closed, but some pending changes or running merges were discarded\"));\n    }\n    w.rollback();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCloseWhileMergeIsRunning() throws IOException {\n    Directory dir = newDirectory();\n\n    final CountDownLatch mergeStarted = new CountDownLatch(1);\n    final CountDownLatch closeStarted = new CountDownLatch(1);\n\n    // If version is < 50 IW.close should throw an exception\n    // on still-running merges:\n    IndexWriterConfig iwc = newIndexWriterConfig(Version.LUCENE_48, new MockAnalyzer(random()));\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMergeFactor(2);\n    iwc.setMergePolicy(mp);\n    iwc.setInfoStream(new InfoStream() {\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n\n        @Override\n        public void message(String component, String message) {\n          if (message.equals(\"rollback\")) {\n            closeStarted.countDown();\n          }\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler() {\n        @Override\n        public void doMerge(MergePolicy.OneMerge merge) throws IOException {\n          mergeStarted.countDown();\n          try {\n            closeStarted.await();\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new RuntimeException(ie);\n          }\n          super.doMerge(merge);\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    w.addDocument(doc);\n    w.commit();\n    w.addDocument(doc);\n    w.commit();\n    try {\n      w.close();\n      fail(\"didn't hit exception\");\n    } catch (RuntimeException re) {\n      // expected\n      if (VERBOSE) {\n        System.out.println(\"GOT: \" + re.getMessage());\n      }\n      assertTrue(re.getMessage().contains(\"this writer is closed, but some pending changes or running merges were discarded\"));\n    }\n    w.rollback();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testCloseWhileMergeIsRunning().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testCloseWhileMergeIsRunning().mjava","sourceNew":"  public void testCloseWhileMergeIsRunning() throws IOException {\n    Directory dir = newDirectory();\n\n    final CountDownLatch mergeStarted = new CountDownLatch(1);\n    final CountDownLatch closeStarted = new CountDownLatch(1);\n\n    // If version is < 50 IW.close should throw an exception\n    // on still-running merges:\n    IndexWriterConfig iwc = newIndexWriterConfig(random(), Version.LUCENE_4_8, new MockAnalyzer(random()));\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMergeFactor(2);\n    iwc.setMergePolicy(mp);\n    iwc.setInfoStream(new InfoStream() {\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n\n        @Override\n        public void message(String component, String message) {\n          if (message.equals(\"rollback\")) {\n            closeStarted.countDown();\n          }\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler() {\n        @Override\n        public void doMerge(MergePolicy.OneMerge merge) throws IOException {\n          mergeStarted.countDown();\n          try {\n            closeStarted.await();\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new RuntimeException(ie);\n          }\n          super.doMerge(merge);\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    w.addDocument(doc);\n    w.commit();\n    w.addDocument(doc);\n    w.commit();\n    try {\n      w.close();\n      fail(\"didn't hit exception\");\n    } catch (RuntimeException re) {\n      // expected\n      if (VERBOSE) {\n        System.out.println(\"GOT: \" + re.getMessage());\n      }\n      assertTrue(re.getMessage().contains(\"this writer is closed, but some pending changes or running merges were discarded\"));\n    }\n    w.rollback();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCloseWhileMergeIsRunning() throws IOException {\n    Directory dir = newDirectory();\n\n    final CountDownLatch mergeStarted = new CountDownLatch(1);\n    final CountDownLatch closeStarted = new CountDownLatch(1);\n\n    // If version is < 50 IW.close should throw an exception\n    // on still-running merges:\n    IndexWriterConfig iwc = newIndexWriterConfig(Version.LUCENE_4_8, new MockAnalyzer(random()));\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMergeFactor(2);\n    iwc.setMergePolicy(mp);\n    iwc.setInfoStream(new InfoStream() {\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n\n        @Override\n        public void message(String component, String message) {\n          if (message.equals(\"rollback\")) {\n            closeStarted.countDown();\n          }\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler() {\n        @Override\n        public void doMerge(MergePolicy.OneMerge merge) throws IOException {\n          mergeStarted.countDown();\n          try {\n            closeStarted.await();\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new RuntimeException(ie);\n          }\n          super.doMerge(merge);\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    w.addDocument(doc);\n    w.commit();\n    w.addDocument(doc);\n    w.commit();\n    try {\n      w.close();\n      fail(\"didn't hit exception\");\n    } catch (RuntimeException re) {\n      // expected\n      if (VERBOSE) {\n        System.out.println(\"GOT: \" + re.getMessage());\n      }\n      assertTrue(re.getMessage().contains(\"this writer is closed, but some pending changes or running merges were discarded\"));\n    }\n    w.rollback();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testCloseWhileMergeIsRunning().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testCloseWhileMergeIsRunning().mjava","sourceNew":"  public void testCloseWhileMergeIsRunning() throws IOException {\n    Directory dir = newDirectory();\n\n    final CountDownLatch mergeStarted = new CountDownLatch(1);\n    final CountDownLatch closeStarted = new CountDownLatch(1);\n\n    IndexWriterConfig iwc = newIndexWriterConfig(random(), new MockAnalyzer(random())).setCommitOnClose(false);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMergeFactor(2);\n    iwc.setMergePolicy(mp);\n    iwc.setInfoStream(new InfoStream() {\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n\n        @Override\n        public void message(String component, String message) {\n          if (message.equals(\"rollback\")) {\n            closeStarted.countDown();\n          }\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler() {\n        @Override\n        public void doMerge(MergePolicy.OneMerge merge) throws IOException {\n          mergeStarted.countDown();\n          try {\n            closeStarted.await();\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new RuntimeException(ie);\n          }\n          super.doMerge(merge);\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    w.addDocument(doc);\n    w.commit();\n    w.addDocument(doc);\n    w.commit();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCloseWhileMergeIsRunning() throws IOException {\n    Directory dir = newDirectory();\n\n    final CountDownLatch mergeStarted = new CountDownLatch(1);\n    final CountDownLatch closeStarted = new CountDownLatch(1);\n\n    // If version is < 50 IW.close should throw an exception\n    // on still-running merges:\n    IndexWriterConfig iwc = newIndexWriterConfig(random(), Version.LUCENE_4_8, new MockAnalyzer(random()));\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMergeFactor(2);\n    iwc.setMergePolicy(mp);\n    iwc.setInfoStream(new InfoStream() {\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n\n        @Override\n        public void message(String component, String message) {\n          if (message.equals(\"rollback\")) {\n            closeStarted.countDown();\n          }\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler() {\n        @Override\n        public void doMerge(MergePolicy.OneMerge merge) throws IOException {\n          mergeStarted.countDown();\n          try {\n            closeStarted.await();\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new RuntimeException(ie);\n          }\n          super.doMerge(merge);\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    w.addDocument(doc);\n    w.commit();\n    w.addDocument(doc);\n    w.commit();\n    try {\n      w.close();\n      fail(\"didn't hit exception\");\n    } catch (RuntimeException re) {\n      // expected\n      if (VERBOSE) {\n        System.out.println(\"GOT: \" + re.getMessage());\n      }\n      assertTrue(re.getMessage().contains(\"this writer is closed, but some pending changes or running merges were discarded\"));\n    }\n    w.rollback();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testCloseWhileMergeIsRunning().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testCloseWhileMergeIsRunning().mjava","sourceNew":"  public void testCloseWhileMergeIsRunning() throws IOException {\n    Directory dir = newDirectory();\n\n    final CountDownLatch mergeStarted = new CountDownLatch(1);\n    final CountDownLatch closeStarted = new CountDownLatch(1);\n\n    IndexWriterConfig iwc = newIndexWriterConfig(random(), new MockAnalyzer(random())).setCommitOnClose(false);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMergeFactor(2);\n    iwc.setMergePolicy(mp);\n    iwc.setInfoStream(new InfoStream() {\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n\n        @Override\n        public void message(String component, String message) {\n          if (message.equals(\"rollback\")) {\n            closeStarted.countDown();\n          }\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler() {\n        @Override\n        public void doMerge(IndexWriter writer, MergePolicy.OneMerge merge) throws IOException {\n          mergeStarted.countDown();\n          try {\n            closeStarted.await();\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new RuntimeException(ie);\n          }\n          super.doMerge(writer, merge);\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    w.addDocument(doc);\n    w.commit();\n    w.addDocument(doc);\n    w.commit();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCloseWhileMergeIsRunning() throws IOException {\n    Directory dir = newDirectory();\n\n    final CountDownLatch mergeStarted = new CountDownLatch(1);\n    final CountDownLatch closeStarted = new CountDownLatch(1);\n\n    IndexWriterConfig iwc = newIndexWriterConfig(random(), new MockAnalyzer(random())).setCommitOnClose(false);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMergeFactor(2);\n    iwc.setMergePolicy(mp);\n    iwc.setInfoStream(new InfoStream() {\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n\n        @Override\n        public void message(String component, String message) {\n          if (message.equals(\"rollback\")) {\n            closeStarted.countDown();\n          }\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler() {\n        @Override\n        public void doMerge(MergePolicy.OneMerge merge) throws IOException {\n          mergeStarted.countDown();\n          try {\n            closeStarted.await();\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new RuntimeException(ie);\n          }\n          super.doMerge(merge);\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    w.addDocument(doc);\n    w.commit();\n    w.addDocument(doc);\n    w.commit();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89697e7abc9807639c384eecf5a2a6eef1080426","date":1587733375,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testCloseWhileMergeIsRunning().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testCloseWhileMergeIsRunning().mjava","sourceNew":"  public void testCloseWhileMergeIsRunning() throws IOException {\n    Directory dir = newDirectory();\n\n    final CountDownLatch mergeStarted = new CountDownLatch(1);\n    final CountDownLatch closeStarted = new CountDownLatch(1);\n\n    IndexWriterConfig iwc = newIndexWriterConfig(random(), new MockAnalyzer(random())).setCommitOnClose(false);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMergeFactor(2);\n    iwc.setMergePolicy(mp);\n    iwc.setInfoStream(new InfoStream() {\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n\n        @Override\n        public void message(String component, String message) {\n          if (message.equals(\"rollback\")) {\n            closeStarted.countDown();\n          }\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler() {\n        @Override\n        public void doMerge(MergeSource mergeSource, MergePolicy.OneMerge merge) throws IOException {\n          mergeStarted.countDown();\n          try {\n            closeStarted.await();\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new RuntimeException(ie);\n          }\n          super.doMerge(mergeSource, merge);\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    w.addDocument(doc);\n    w.commit();\n    w.addDocument(doc);\n    w.commit();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCloseWhileMergeIsRunning() throws IOException {\n    Directory dir = newDirectory();\n\n    final CountDownLatch mergeStarted = new CountDownLatch(1);\n    final CountDownLatch closeStarted = new CountDownLatch(1);\n\n    IndexWriterConfig iwc = newIndexWriterConfig(random(), new MockAnalyzer(random())).setCommitOnClose(false);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMergeFactor(2);\n    iwc.setMergePolicy(mp);\n    iwc.setInfoStream(new InfoStream() {\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n\n        @Override\n        public void message(String component, String message) {\n          if (message.equals(\"rollback\")) {\n            closeStarted.countDown();\n          }\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler() {\n        @Override\n        public void doMerge(IndexWriter writer, MergePolicy.OneMerge merge) throws IOException {\n          mergeStarted.countDown();\n          try {\n            closeStarted.await();\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new RuntimeException(ie);\n          }\n          super.doMerge(writer, merge);\n        }\n\n        @Override\n        public void close() {\n        }\n      });\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    w.addDocument(doc);\n    w.commit();\n    w.addDocument(doc);\n    w.commit();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89697e7abc9807639c384eecf5a2a6eef1080426":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["f1f3bfdf2fbf9eb7c32953111625b8149f767900"],"f1f3bfdf2fbf9eb7c32953111625b8149f767900":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89697e7abc9807639c384eecf5a2a6eef1080426"]},"commit2Childs":{"89697e7abc9807639c384eecf5a2a6eef1080426":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"f1f3bfdf2fbf9eb7c32953111625b8149f767900":["dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518":[],"5faf65b6692f15cca0f87bf8666c87899afc619f":["89697e7abc9807639c384eecf5a2a6eef1080426"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["f1f3bfdf2fbf9eb7c32953111625b8149f767900","e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}