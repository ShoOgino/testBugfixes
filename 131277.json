{"path":"src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","commits":[{"id":"bf0e17cfd70114fa265a0ac990861cc37685024e","date":1268618829,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"/dev/null","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n    TokenizerChain.TokenStreamInfo tsi = ana.getStream(\"textDefault\",new StringReader(\"\"));\n    StandardTokenizer tok = (StandardTokenizer) tsi.getTokenizer();\n    assertTrue(tok.isReplaceInvalidAcronym());\n    \n    type = schema.getFieldType(\"text20\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_20, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_24, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n    tsi = ana.getStream(\"text20\",new StringReader(\"\"));\n    tok = (StandardTokenizer) tsi.getTokenizer();\n    assertFalse(tok.isReplaceInvalidAcronym());\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer20\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_20, matchVersionField.get(ana1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n    TokenizerChain.TokenStreamInfo tsi = ana.getStream(\"textDefault\",new StringReader(\"\"));\n    StandardTokenizer tok = (StandardTokenizer) tsi.getTokenizer();\n    assertTrue(tok.isReplaceInvalidAcronym());\n    \n    type = schema.getFieldType(\"text20\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_20, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_24, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n    tsi = ana.getStream(\"text20\",new StringReader(\"\"));\n    tok = (StandardTokenizer) tsi.getTokenizer();\n    assertFalse(tok.isReplaceInvalidAcronym());\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer20\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_20, matchVersionField.get(ana1));\n  }\n\n","sourceOld":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n    TokenizerChain.TokenStreamInfo tsi = ana.getStream(\"textDefault\",new StringReader(\"\"));\n    StandardTokenizer tok = (StandardTokenizer) tsi.getTokenizer();\n    assertTrue(tok.isReplaceInvalidAcronym());\n    \n    type = schema.getFieldType(\"text20\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_20, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_24, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n    tsi = ana.getStream(\"text20\",new StringReader(\"\"));\n    tok = (StandardTokenizer) tsi.getTokenizer();\n    assertFalse(tok.isReplaceInvalidAcronym());\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer20\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_20, matchVersionField.get(ana1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"bf0e17cfd70114fa265a0ac990861cc37685024e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["bf0e17cfd70114fa265a0ac990861cc37685024e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["bf0e17cfd70114fa265a0ac990861cc37685024e"],"bf0e17cfd70114fa265a0ac990861cc37685024e":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}