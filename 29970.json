{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MonteCarloEvaluator#populateVariables(Tuple).mjava","commits":[{"id":"d8f3f292c7ac656734ed297fe52be0e012997e64","date":1523378182,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MonteCarloEvaluator#populateVariables(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  private void populateVariables(Tuple contextTuple) throws IOException {\n\n    Set<Map.Entry<String, Object>> entries = variables.entrySet();\n\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          contextTuple.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        Object eo = evaluator.evaluate(contextTuple);\n        contextTuple.put(name, eo);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MonteCarloEvaluator#populateVariables(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MonteCarloEvaluator#populateVariables(Tuple).mjava","sourceNew":"  private void populateVariables(Tuple contextTuple) throws IOException {\n\n    @SuppressWarnings({\"unchecked\"})\n    Set<Map.Entry<String, Object>> entries = variables.entrySet();\n\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList<>();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          contextTuple.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        Object eo = evaluator.evaluate(contextTuple);\n        contextTuple.put(name, eo);\n      }\n    }\n  }\n\n","sourceOld":"  private void populateVariables(Tuple contextTuple) throws IOException {\n\n    Set<Map.Entry<String, Object>> entries = variables.entrySet();\n\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          contextTuple.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        Object eo = evaluator.evaluate(contextTuple);\n        contextTuple.put(name, eo);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["d8f3f292c7ac656734ed297fe52be0e012997e64"],"d8f3f292c7ac656734ed297fe52be0e012997e64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8f3f292c7ac656734ed297fe52be0e012997e64":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d8f3f292c7ac656734ed297fe52be0e012997e64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}