{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestMultiRangeQueries#testToString().mjava","commits":[{"id":"bc29621aa343e88cbc47d168a1d556972a8d3851","date":1564149243,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestMultiRangeQueries#testToString().mjava","pathOld":"/dev/null","sourceNew":"  public void testToString() {\n    double[] firstDoubleLowerRange= {111, 294.3, 502.4};\n    double[] firstDoubleUpperRange = {117.3, 301.8, 514.3};\n\n    double[] secondDoubleLowerRange = {15.3, 412.8, 415.1};\n    double[] secondDoubleUpperRange = {200.4, 567.4, 642.2};\n\n    DoublePointMultiRangeBuilder stringTestbuilder = new DoublePointMultiRangeBuilder(\"point\", 3);\n\n    stringTestbuilder.add(firstDoubleLowerRange, firstDoubleUpperRange);\n    stringTestbuilder.add(secondDoubleLowerRange, secondDoubleUpperRange);\n\n    Query query = stringTestbuilder.build();\n\n    assertEquals(\"point:{[111.0 TO 117.3],[294.3 TO 301.8],[502.4 TO 514.3]},{[15.3 TO 200.4],[412.8 TO 567.4],[415.1 TO 642.2]}\",\n        query.toString());\n\n    long[] firstLongLowerRange= {111, 294, 502};\n    long[] firstLongUpperRange = {117, 301, 514};\n\n    long[] secondLongLowerRange = {15, 412, 415};\n    long[] secondLongUpperRange = {200, 567, 642};\n\n    LongPointMultiRangeBuilder stringLongTestbuilder = new LongPointMultiRangeBuilder(\"point\", 3);\n\n    stringLongTestbuilder.add(firstLongLowerRange, firstLongUpperRange);\n    stringLongTestbuilder.add(secondLongLowerRange, secondLongUpperRange);\n\n    query = stringLongTestbuilder.build();\n\n    assertEquals(\"point:{[111 TO 117],[294 TO 301],[502 TO 514]},{[15 TO 200],[412 TO 567],[415 TO 642]}\",\n        query.toString());\n\n    float[] firstFloatLowerRange= {111.3f, 294.4f, 502.2f};\n    float[] firstFloatUpperRange = {117.7f, 301.2f, 514.4f};\n\n    float[] secondFloatLowerRange = {15.3f, 412.2f, 415.9f};\n    float[] secondFloatUpperRange = {200.2f, 567.4f, 642.3f};\n\n    FloatPointMultiRangeBuilder stringFloatTestbuilder = new FloatPointMultiRangeBuilder(\"point\", 3);\n\n    stringFloatTestbuilder.add(firstFloatLowerRange, firstFloatUpperRange);\n    stringFloatTestbuilder.add(secondFloatLowerRange, secondFloatUpperRange);\n\n    query = stringFloatTestbuilder.build();\n\n    assertEquals(\"point:{[111.3 TO 117.7],[294.4 TO 301.2],[502.2 TO 514.4]},{[15.3 TO 200.2],[412.2 TO 567.4],[415.9 TO 642.3]}\",\n        query.toString());\n\n    int[] firstIntLowerRange= {111, 294, 502};\n    int[] firstIntUpperRange = {117, 301, 514};\n\n    int[] secondIntLowerRange = {15, 412, 415};\n    int[] secondIntUpperRange = {200, 567, 642};\n\n    IntPointMultiRangeBuilder stringIntTestbuilder = new IntPointMultiRangeBuilder(\"point\", 3);\n\n    stringIntTestbuilder.add(firstIntLowerRange, firstIntUpperRange);\n    stringIntTestbuilder.add(secondIntLowerRange, secondIntUpperRange);\n\n    query = stringIntTestbuilder.build();\n\n    assertEquals(\"point:{[111 TO 117],[294 TO 301],[502 TO 514]},{[15 TO 200],[412 TO 567],[415 TO 642]}\",\n        query.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf9da1d4a2d2f04a562030d1d46862163f506f62","date":1566205061,"type":0,"author":"Jim Ferenczi","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestMultiRangeQueries#testToString().mjava","pathOld":"/dev/null","sourceNew":"  public void testToString() {\n    double[] firstDoubleLowerRange= {111, 294.3, 502.4};\n    double[] firstDoubleUpperRange = {117.3, 301.8, 514.3};\n\n    double[] secondDoubleLowerRange = {15.3, 412.8, 415.1};\n    double[] secondDoubleUpperRange = {200.4, 567.4, 642.2};\n\n    DoublePointMultiRangeBuilder stringTestbuilder = new DoublePointMultiRangeBuilder(\"point\", 3);\n\n    stringTestbuilder.add(firstDoubleLowerRange, firstDoubleUpperRange);\n    stringTestbuilder.add(secondDoubleLowerRange, secondDoubleUpperRange);\n\n    Query query = stringTestbuilder.build();\n\n    assertEquals(\"point:{[111.0 TO 117.3],[294.3 TO 301.8],[502.4 TO 514.3]},{[15.3 TO 200.4],[412.8 TO 567.4],[415.1 TO 642.2]}\",\n        query.toString());\n\n    long[] firstLongLowerRange= {111, 294, 502};\n    long[] firstLongUpperRange = {117, 301, 514};\n\n    long[] secondLongLowerRange = {15, 412, 415};\n    long[] secondLongUpperRange = {200, 567, 642};\n\n    LongPointMultiRangeBuilder stringLongTestbuilder = new LongPointMultiRangeBuilder(\"point\", 3);\n\n    stringLongTestbuilder.add(firstLongLowerRange, firstLongUpperRange);\n    stringLongTestbuilder.add(secondLongLowerRange, secondLongUpperRange);\n\n    query = stringLongTestbuilder.build();\n\n    assertEquals(\"point:{[111 TO 117],[294 TO 301],[502 TO 514]},{[15 TO 200],[412 TO 567],[415 TO 642]}\",\n        query.toString());\n\n    float[] firstFloatLowerRange= {111.3f, 294.4f, 502.2f};\n    float[] firstFloatUpperRange = {117.7f, 301.2f, 514.4f};\n\n    float[] secondFloatLowerRange = {15.3f, 412.2f, 415.9f};\n    float[] secondFloatUpperRange = {200.2f, 567.4f, 642.3f};\n\n    FloatPointMultiRangeBuilder stringFloatTestbuilder = new FloatPointMultiRangeBuilder(\"point\", 3);\n\n    stringFloatTestbuilder.add(firstFloatLowerRange, firstFloatUpperRange);\n    stringFloatTestbuilder.add(secondFloatLowerRange, secondFloatUpperRange);\n\n    query = stringFloatTestbuilder.build();\n\n    assertEquals(\"point:{[111.3 TO 117.7],[294.4 TO 301.2],[502.2 TO 514.4]},{[15.3 TO 200.2],[412.2 TO 567.4],[415.9 TO 642.3]}\",\n        query.toString());\n\n    int[] firstIntLowerRange= {111, 294, 502};\n    int[] firstIntUpperRange = {117, 301, 514};\n\n    int[] secondIntLowerRange = {15, 412, 415};\n    int[] secondIntUpperRange = {200, 567, 642};\n\n    IntPointMultiRangeBuilder stringIntTestbuilder = new IntPointMultiRangeBuilder(\"point\", 3);\n\n    stringIntTestbuilder.add(firstIntLowerRange, firstIntUpperRange);\n    stringIntTestbuilder.add(secondIntLowerRange, secondIntUpperRange);\n\n    query = stringIntTestbuilder.build();\n\n    assertEquals(\"point:{[111 TO 117],[294 TO 301],[502 TO 514]},{[15 TO 200],[412 TO 567],[415 TO 642]}\",\n        query.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc29621aa343e88cbc47d168a1d556972a8d3851":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf9da1d4a2d2f04a562030d1d46862163f506f62":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc29621aa343e88cbc47d168a1d556972a8d3851"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf9da1d4a2d2f04a562030d1d46862163f506f62"]},"commit2Childs":{"bc29621aa343e88cbc47d168a1d556972a8d3851":["cf9da1d4a2d2f04a562030d1d46862163f506f62"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc29621aa343e88cbc47d168a1d556972a8d3851","cf9da1d4a2d2f04a562030d1d46862163f506f62"],"cf9da1d4a2d2f04a562030d1d46862163f506f62":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}