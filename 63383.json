{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#readfromRegExp(String,String,String,String).mjava","commits":[{"id":"fee52c628145c8dc485fb7902217fd0b96d7a237","date":1237276690,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#readfromRegExp(String,String,String,String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#readfromRegExp(String,String,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private Object readfromRegExp(String reStr, String value, String columnName, String gNames) {\n    String[] groupNames = null;\n    if(gNames != null && gNames.trim().length() >0){\n      groupNames =  gNames.split(\",\");\n    }\n    Pattern regexp = getPattern(reStr);\n    Matcher m = regexp.matcher(value);\n    if (m.find() && m.groupCount() > 0) {\n      if (m.groupCount() > 1) {\n        List l = null;\n        Map<String ,String > map = null;\n        if(groupNames == null){\n          l = new ArrayList();\n        } else {\n          map =  new HashMap<String, String>();\n        }\n        for (int i = 1; i <= m.groupCount(); i++) {\n          try {\n            if(l != null){\n              l.add(m.group(i));\n            } else if (map != null ){\n              if(i <= groupNames.length){\n                String nameOfGroup = groupNames[i-1];\n                if(nameOfGroup != null && nameOfGroup.trim().length() >0){\n                  map.put(nameOfGroup, m.group(i));\n                }\n              }\n            }\n          } catch (Exception e) {\n            LOG.warn(\"Parsing failed for field : \" + columnName, e);\n          }\n        }\n        return l == null ? map: l;\n      } else {\n        return m.group(1);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private Object readfromRegExp(String reStr, String value, String columnName) {\n    Pattern regexp = getPattern(reStr);\n    Matcher m = regexp.matcher(value);\n    if (m.find() && m.groupCount() > 0) {\n      if (m.groupCount() > 1) {\n        List l = new ArrayList();\n        for (int i = 1; i <= m.groupCount(); i++) {\n          try {\n            l.add(m.group(i));\n          } catch (Exception e) {\n            LOG.warn(\"Parsing failed for field : \" + columnName, e);\n          }\n        }\n        return l;\n      } else {\n        return m.group(1);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#readfromRegExp(String,String,String,String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#readfromRegExp(String,String,String,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private Object readfromRegExp(String reStr, String value, String columnName, String gNames) {\n    String[] groupNames = null;\n    if(gNames != null && gNames.trim().length() >0){\n      groupNames =  gNames.split(\",\");\n    }\n    Pattern regexp = getPattern(reStr);\n    Matcher m = regexp.matcher(value);\n    if (m.find() && m.groupCount() > 0) {\n      if (m.groupCount() > 1) {\n        List l = null;\n        Map<String ,String > map = null;\n        if(groupNames == null){\n          l = new ArrayList();\n        } else {\n          map =  new HashMap<String, String>();\n        }\n        for (int i = 1; i <= m.groupCount(); i++) {\n          try {\n            if(l != null){\n              l.add(m.group(i));\n            } else if (map != null ){\n              if(i <= groupNames.length){\n                String nameOfGroup = groupNames[i-1];\n                if(nameOfGroup != null && nameOfGroup.trim().length() >0){\n                  map.put(nameOfGroup, m.group(i));\n                }\n              }\n            }\n          } catch (Exception e) {\n            LOG.warn(\"Parsing failed for field : \" + columnName, e);\n          }\n        }\n        return l == null ? map: l;\n      } else {\n        return m.group(1);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private Object readfromRegExp(String reStr, String value, String columnName, String gNames) {\n    String[] groupNames = null;\n    if(gNames != null && gNames.trim().length() >0){\n      groupNames =  gNames.split(\",\");\n    }\n    Pattern regexp = getPattern(reStr);\n    Matcher m = regexp.matcher(value);\n    if (m.find() && m.groupCount() > 0) {\n      if (m.groupCount() > 1) {\n        List l = null;\n        Map<String ,String > map = null;\n        if(groupNames == null){\n          l = new ArrayList();\n        } else {\n          map =  new HashMap<String, String>();\n        }\n        for (int i = 1; i <= m.groupCount(); i++) {\n          try {\n            if(l != null){\n              l.add(m.group(i));\n            } else if (map != null ){\n              if(i <= groupNames.length){\n                String nameOfGroup = groupNames[i-1];\n                if(nameOfGroup != null && nameOfGroup.trim().length() >0){\n                  map.put(nameOfGroup, m.group(i));\n                }\n              }\n            }\n          } catch (Exception e) {\n            LOG.warn(\"Parsing failed for field : \" + columnName, e);\n          }\n        }\n        return l == null ? map: l;\n      } else {\n        return m.group(1);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["fee52c628145c8dc485fb7902217fd0b96d7a237"],"fee52c628145c8dc485fb7902217fd0b96d7a237":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["fee52c628145c8dc485fb7902217fd0b96d7a237"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"fee52c628145c8dc485fb7902217fd0b96d7a237":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}