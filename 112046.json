{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#testFieldMatcherTermQuery().mjava","commits":[{"id":"5675b3bced0b155f0ff8001ce2e1e502be7c92f6","date":1480972317,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#testFieldMatcherTermQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testFieldMatcherTermQuery() throws Exception {\n    IndexReader ir = indexSomeFields();\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighterNoFieldMatch = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected Predicate<String> getFieldMatcher(String field) {\n        // requireFieldMatch=false\n        return (qf) -> true;\n      }\n    };\n    UnifiedHighlighter highlighterFieldMatch = new UnifiedHighlighter(searcher, indexAnalyzer);\n    BooleanQuery.Builder queryBuilder =\n        new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"text\", \"some\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"text\", \"field\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"text\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"title\", \"is\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"title\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"some\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"category\")), BooleanClause.Occur.SHOULD);\n    Query query = queryBuilder.build();\n\n    // title\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the title <b>field</b>.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the title field.\", snippets[0]);\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"text\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the title <b>field</b>.\", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n\n    // text\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the text <b>field</b>. You can put <b>some</b> text if you want.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the text <b>field</b>. You can put <b>some</b> text if you want.\", snippets[0]);\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"title\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the text field. \", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n\n    // category\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the <b>category</b> <b>field</b>.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the <b>category</b> field.\", snippets[0]);\n\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"title\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the category field.\", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n    ir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","date":1481116359,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#testFieldMatcherTermQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testFieldMatcherTermQuery() throws Exception {\n    IndexReader ir = indexSomeFields();\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighterNoFieldMatch = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected Predicate<String> getFieldMatcher(String field) {\n        // requireFieldMatch=false\n        return (qf) -> true;\n      }\n    };\n    UnifiedHighlighter highlighterFieldMatch = new UnifiedHighlighter(searcher, indexAnalyzer);\n    BooleanQuery.Builder queryBuilder =\n        new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"text\", \"some\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"text\", \"field\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"text\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"title\", \"is\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"title\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"some\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"category\")), BooleanClause.Occur.SHOULD);\n    Query query = queryBuilder.build();\n\n    // title\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the title <b>field</b>.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the title field.\", snippets[0]);\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"text\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the title <b>field</b>.\", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n\n    // text\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the text <b>field</b>. You can put <b>some</b> text if you want.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the text <b>field</b>. You can put <b>some</b> text if you want.\", snippets[0]);\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"title\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the text field. \", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n\n    // category\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the <b>category</b> <b>field</b>.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the <b>category</b> field.\", snippets[0]);\n\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"title\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the category field.\", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n    ir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#testFieldMatcherTermQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testFieldMatcherTermQuery() throws Exception {\n    IndexReader ir = indexSomeFields();\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighterNoFieldMatch = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected Predicate<String> getFieldMatcher(String field) {\n        // requireFieldMatch=false\n        return (qf) -> true;\n      }\n    };\n    UnifiedHighlighter highlighterFieldMatch = new UnifiedHighlighter(searcher, indexAnalyzer);\n    BooleanQuery.Builder queryBuilder =\n        new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"text\", \"some\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"text\", \"field\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"text\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"title\", \"is\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"title\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"some\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"category\")), BooleanClause.Occur.SHOULD);\n    Query query = queryBuilder.build();\n\n    // title\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the title <b>field</b>.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the title field.\", snippets[0]);\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"text\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the title <b>field</b>.\", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n\n    // text\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the text <b>field</b>. You can put <b>some</b> text if you want.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the text <b>field</b>. You can put <b>some</b> text if you want.\", snippets[0]);\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"title\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the text field. \", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n\n    // category\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the <b>category</b> <b>field</b>.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the <b>category</b> field.\", snippets[0]);\n\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"title\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the category field.\", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n    ir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571","date":1515642580,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#testFieldMatcherTermQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#testFieldMatcherTermQuery().mjava","sourceNew":"  public void testFieldMatcherTermQuery() throws Exception {\n    IndexReader ir = indexSomeFields();\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighterNoFieldMatch = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected Predicate<String> getFieldMatcher(String field) {\n        // requireFieldMatch=false\n        return (qf) -> true;\n      }\n    };\n    UnifiedHighlighter highlighterFieldMatch = randomUnifiedHighlighter(searcher, indexAnalyzer);\n    highlighterFieldMatch.setFieldMatcher(null);//default\n    BooleanQuery.Builder queryBuilder =\n        new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"text\", \"some\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"text\", \"field\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"text\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"title\", \"is\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"title\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"some\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"category\")), BooleanClause.Occur.SHOULD);\n    Query query = queryBuilder.build();\n\n    // title\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the title <b>field</b>.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the title field.\", snippets[0]);\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"text\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the title <b>field</b>.\", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n\n    // text\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the text <b>field</b>. You can put <b>some</b> text if you want.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the text <b>field</b>. You can put <b>some</b> text if you want.\", snippets[0]);\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"title\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the text field. \", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n\n    // category\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the <b>category</b> <b>field</b>.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the <b>category</b> field.\", snippets[0]);\n\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"title\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the category field.\", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n    ir.close();\n  }\n\n","sourceOld":"  public void testFieldMatcherTermQuery() throws Exception {\n    IndexReader ir = indexSomeFields();\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighterNoFieldMatch = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected Predicate<String> getFieldMatcher(String field) {\n        // requireFieldMatch=false\n        return (qf) -> true;\n      }\n    };\n    UnifiedHighlighter highlighterFieldMatch = new UnifiedHighlighter(searcher, indexAnalyzer);\n    BooleanQuery.Builder queryBuilder =\n        new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"text\", \"some\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"text\", \"field\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"text\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"title\", \"is\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"title\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"some\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"category\")), BooleanClause.Occur.SHOULD);\n    Query query = queryBuilder.build();\n\n    // title\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the title <b>field</b>.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the title field.\", snippets[0]);\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"text\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the title <b>field</b>.\", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n\n    // text\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the text <b>field</b>. You can put <b>some</b> text if you want.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the text <b>field</b>. You can put <b>some</b> text if you want.\", snippets[0]);\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"title\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the text field. \", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n\n    // category\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the <b>category</b> <b>field</b>.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the <b>category</b> field.\", snippets[0]);\n\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"title\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the category field.\", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#testFieldMatcherTermQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#testFieldMatcherTermQuery().mjava","sourceNew":"  public void testFieldMatcherTermQuery() throws Exception {\n    IndexReader ir = indexSomeFields();\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighterNoFieldMatch = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected Predicate<String> getFieldMatcher(String field) {\n        // requireFieldMatch=false\n        return (qf) -> true;\n      }\n    };\n    UnifiedHighlighter highlighterFieldMatch = randomUnifiedHighlighter(searcher, indexAnalyzer);\n    highlighterFieldMatch.setFieldMatcher(null);//default\n    BooleanQuery.Builder queryBuilder =\n        new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"text\", \"some\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"text\", \"field\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"text\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"title\", \"is\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"title\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"some\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"category\")), BooleanClause.Occur.SHOULD);\n    Query query = queryBuilder.build();\n\n    // title\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the title <b>field</b>.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the title field.\", snippets[0]);\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"text\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the title <b>field</b>.\", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n\n    // text\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the text <b>field</b>. You can put <b>some</b> text if you want.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the text <b>field</b>. You can put <b>some</b> text if you want.\", snippets[0]);\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"title\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the text field. \", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n\n    // category\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the <b>category</b> <b>field</b>.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the <b>category</b> field.\", snippets[0]);\n\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"title\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the category field.\", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n    ir.close();\n  }\n\n","sourceOld":"  public void testFieldMatcherTermQuery() throws Exception {\n    IndexReader ir = indexSomeFields();\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighterNoFieldMatch = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected Predicate<String> getFieldMatcher(String field) {\n        // requireFieldMatch=false\n        return (qf) -> true;\n      }\n    };\n    UnifiedHighlighter highlighterFieldMatch = new UnifiedHighlighter(searcher, indexAnalyzer);\n    BooleanQuery.Builder queryBuilder =\n        new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"text\", \"some\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"text\", \"field\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"text\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"title\", \"is\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"title\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"some\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"category\")), BooleanClause.Occur.SHOULD);\n    Query query = queryBuilder.build();\n\n    // title\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the title <b>field</b>.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the title field.\", snippets[0]);\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"text\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the title <b>field</b>.\", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n\n    // text\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the text <b>field</b>. You can put <b>some</b> text if you want.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the text <b>field</b>. You can put <b>some</b> text if you want.\", snippets[0]);\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"title\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the text field. \", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n\n    // category\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the <b>category</b> <b>field</b>.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the <b>category</b> field.\", snippets[0]);\n\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"title\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the category field.\", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#testFieldMatcherTermQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#testFieldMatcherTermQuery().mjava","sourceNew":"  public void testFieldMatcherTermQuery() throws Exception {\n    IndexReader ir = indexSomeFields();\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighterNoFieldMatch = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected Predicate<String> getFieldMatcher(String field) {\n        // requireFieldMatch=false\n        return (qf) -> true;\n      }\n    };\n    UnifiedHighlighter highlighterFieldMatch = randomUnifiedHighlighter(searcher, indexAnalyzer);\n    highlighterFieldMatch.setFieldMatcher(null);//default\n    BooleanQuery.Builder queryBuilder =\n        new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"text\", \"some\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"text\", \"field\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"text\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"title\", \"is\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"title\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"some\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"category\")), BooleanClause.Occur.SHOULD);\n    Query query = queryBuilder.build();\n\n    // title\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits.value);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the title <b>field</b>.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the title field.\", snippets[0]);\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"text\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the title <b>field</b>.\", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n\n    // text\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits.value);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the text <b>field</b>. You can put <b>some</b> text if you want.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the text <b>field</b>. You can put <b>some</b> text if you want.\", snippets[0]);\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"title\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the text field. \", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n\n    // category\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits.value);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the <b>category</b> <b>field</b>.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the <b>category</b> field.\", snippets[0]);\n\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"title\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the category field.\", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n    ir.close();\n  }\n\n","sourceOld":"  public void testFieldMatcherTermQuery() throws Exception {\n    IndexReader ir = indexSomeFields();\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighterNoFieldMatch = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected Predicate<String> getFieldMatcher(String field) {\n        // requireFieldMatch=false\n        return (qf) -> true;\n      }\n    };\n    UnifiedHighlighter highlighterFieldMatch = randomUnifiedHighlighter(searcher, indexAnalyzer);\n    highlighterFieldMatch.setFieldMatcher(null);//default\n    BooleanQuery.Builder queryBuilder =\n        new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"text\", \"some\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"text\", \"field\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"text\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"title\", \"is\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"title\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"this\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"some\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"category\", \"category\")), BooleanClause.Occur.SHOULD);\n    Query query = queryBuilder.build();\n\n    // title\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the title <b>field</b>.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the title field.\", snippets[0]);\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"text\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"title\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the title <b>field</b>.\", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n\n    // text\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the text <b>field</b>. You can put <b>some</b> text if you want.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the text <b>field</b>. You can put <b>some</b> text if you want.\", snippets[0]);\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"title\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"text\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the text field. \", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n\n    // category\n    {\n      TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n      assertEquals(1, topDocs.totalHits);\n      String[] snippets = highlighterNoFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the <b>category</b> <b>field</b>.\", snippets[0]);\n\n      snippets = highlighterFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> is the <b>category</b> field.\", snippets[0]);\n\n\n      highlighterFieldMatch.setFieldMatcher((fq) -> \"title\".equals(fq));\n      snippets = highlighterFieldMatch.highlight(\"category\", query, topDocs, 10);\n      assertEquals(1, snippets.length);\n      assertEquals(\"<b>This</b> <b>is</b> the category field.\", snippets[0]);\n      highlighterFieldMatch.setFieldMatcher(null);\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5675b3bced0b155f0ff8001ce2e1e502be7c92f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b94236357aaa22b76c10629851fe4e376e0cea82":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5675b3bced0b155f0ff8001ce2e1e502be7c92f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"5675b3bced0b155f0ff8001ce2e1e502be7c92f6":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"b94236357aaa22b76c10629851fe4e376e0cea82":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d":["b94236357aaa22b76c10629851fe4e376e0cea82","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571","9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5675b3bced0b155f0ff8001ce2e1e502be7c92f6","ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","9856095f7afb5a607bf5e65077615ed91273508c"],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["b94236357aaa22b76c10629851fe4e376e0cea82"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}