{"path":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/server/GDataService#deleteEntry(GDataRequest,GDataResponse).mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/server/GDataService#deleteEntry(GDataRequest,GDataResponse).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataService#deleteEntry(GDataRequest,GDataResponse).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.server.Service#deleteEntry(org.apache.lucene.gdata.server.GDataRequest,\n     *      org.apache.lucene.gdata.server.GDataResponse)\n     */\n\n    public BaseEntry deleteEntry(GDataRequest request, GDataResponse response)\n            throws ServiceException {\n\n        ServerBaseEntry entry = new ServerBaseEntry();\n        entry.setServiceConfig(request.getConfigurator());\n        entry.setFeedId(request.getFeedId());\n        entry.setId(request.getEntryId());\n        setVersionId(entry,request,response);\n        if (entry.getId() == null)\n            throw new ServiceException(\n                    \"entry id is null -- can not delete null entry\",GDataResponse.SERVER_ERROR);\n        try {\n            this.storage.deleteEntry(entry);\n            \n        } catch (ResourceNotFoundException e) {\n            \n            ServiceException ex = new ServiceException(\n                    \"Could not delete entry\", e,GDataResponse.BAD_REQUEST);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }catch (ModificationConflictException e) {\n            \n            ServiceException ex = new ServiceException(\n                    \"Could not delete entry - version conflict\",e, GDataResponse.CONFLICT);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;  \n        }catch (StorageException e) {\n            \n            ServiceException ex = new ServiceException(\n                    \"Could not delete entry\", e,GDataResponse.SERVER_ERROR);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }\n        this.entryEventMediator.entryDeleted(entry);\n        //TODO change ret value\n        return null;\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.server.Service#deleteEntry(org.apache.lucene.gdata.server.GDataRequest,\n     *      org.apache.lucene.gdata.server.GDataResponse)\n     */\n\n    public BaseEntry deleteEntry(GDataRequest request, GDataResponse response)\n            throws ServiceException {\n\n        ServerBaseEntry entry = new ServerBaseEntry();\n        entry.setServiceConfig(request.getConfigurator());\n        entry.setFeedId(request.getFeedId());\n        entry.setId(request.getEntryId());\n        setVersionId(entry,request,response);\n        if (entry.getId() == null)\n            throw new ServiceException(\n                    \"entry id is null -- can not delete null entry\",GDataResponse.SERVER_ERROR);\n        try {\n            this.storage.deleteEntry(entry);\n            \n        } catch (ResourceNotFoundException e) {\n            \n            ServiceException ex = new ServiceException(\n                    \"Could not delete entry\", e,GDataResponse.BAD_REQUEST);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }catch (ModificationConflictException e) {\n            \n            ServiceException ex = new ServiceException(\n                    \"Could not delete entry - version conflict\",e, GDataResponse.CONFLICT);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;  \n        }catch (StorageException e) {\n            \n            ServiceException ex = new ServiceException(\n                    \"Could not delete entry\", e,GDataResponse.SERVER_ERROR);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }\n        this.entryEventMediator.entryDeleted(entry);\n        //TODO change ret value\n        return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/server/GDataService#deleteEntry(GDataRequest,GDataResponse).mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/server/GDataService#deleteEntry(GDataRequest,GDataResponse).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.server.Service#deleteEntry(org.apache.lucene.gdata.server.GDataRequest,\n     *      org.apache.lucene.gdata.server.GDataResponse)\n     */\n\n    public BaseEntry deleteEntry(GDataRequest request, GDataResponse response)\n            throws ServiceException {\n\n        ServerBaseEntry entry = new ServerBaseEntry();\n        entry.setServiceConfig(request.getConfigurator());\n        entry.setFeedId(request.getFeedId());\n        entry.setId(request.getEntryId());\n        setVersionId(entry,request,response);\n        if (entry.getId() == null)\n            throw new ServiceException(\n                    \"entry id is null -- can not delete null entry\",GDataResponse.SERVER_ERROR);\n        try {\n            this.storage.deleteEntry(entry);\n            \n        } catch (ResourceNotFoundException e) {\n            \n            ServiceException ex = new ServiceException(\n                    \"Could not delete entry\", e,GDataResponse.BAD_REQUEST);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }catch (ModificationConflictException e) {\n            \n            ServiceException ex = new ServiceException(\n                    \"Could not delete entry - version conflict\",e, GDataResponse.CONFLICT);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;  \n        }catch (StorageException e) {\n            \n            ServiceException ex = new ServiceException(\n                    \"Could not delete entry\", e,GDataResponse.SERVER_ERROR);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }\n        this.entryEventMediator.entryDeleted(entry);\n        //TODO change ret value\n        return null;\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.server.Service#deleteEntry(org.apache.lucene.gdata.server.GDataRequest,\n     *      org.apache.lucene.gdata.server.GDataResponse)\n     */\n\n    public BaseEntry deleteEntry(GDataRequest request, GDataResponse response)\n            throws ServiceException {\n\n        ServerBaseEntry entry = new ServerBaseEntry();\n        entry.setServiceConfig(request.getConfigurator());\n        entry.setFeedId(request.getFeedId());\n        entry.setId(request.getEntryId());\n        setVersionId(entry,request,response);\n        if (entry.getId() == null)\n            throw new ServiceException(\n                    \"entry id is null -- can not delete null entry\",GDataResponse.SERVER_ERROR);\n        try {\n            this.storage.deleteEntry(entry);\n            \n        } catch (ResourceNotFoundException e) {\n            \n            ServiceException ex = new ServiceException(\n                    \"Could not delete entry\", e,GDataResponse.BAD_REQUEST);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }catch (ModificationConflictException e) {\n            \n            ServiceException ex = new ServiceException(\n                    \"Could not delete entry - version conflict\",e, GDataResponse.CONFLICT);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;  \n        }catch (StorageException e) {\n            \n            ServiceException ex = new ServiceException(\n                    \"Could not delete entry\", e,GDataResponse.SERVER_ERROR);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }\n        this.entryEventMediator.entryDeleted(entry);\n        //TODO change ret value\n        return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}