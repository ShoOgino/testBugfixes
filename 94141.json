{"path":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,Collector).mjava","commits":[{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,Collector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,boolean,Collector).mjava","sourceNew":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(totalHitCountCollector.getTotalHits(), new ScoreDoc[0]);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        boolean fillFields = true;\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 fillFields,\n                                                 doDocScores,\n                                                 true); // TODO: can we disable exact hit counts\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after, true);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n    }\n    return topDocs;\n  }\n\n","sourceOld":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(totalHitCountCollector.getTotalHits(), new ScoreDoc[0], Float.NaN);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        boolean fillFields = true;\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 fillFields,\n                                                 doDocScores,\n                                                 doMaxScore,\n                                                 true); // TODO: can we disable exact hit counts\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after, true);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n    }\n    return topDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,Collector).mjava","pathOld":"/dev/null","sourceNew":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(totalHitCountCollector.getTotalHits(), new ScoreDoc[0]);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        boolean fillFields = true;\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 fillFields,\n                                                 doDocScores,\n                                                 true); // TODO: can we disable exact hit counts\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after, true);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n    }\n    return topDocs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c370507e5521b2eb998530736f1c19b851ed5a","date":1531911305,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,Collector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,Collector).mjava","sourceNew":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(totalHitCountCollector.getTotalHits(), new ScoreDoc[0]);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 doDocScores,\n                                                 true); // TODO: can we disable exact hit counts\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after, true);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n    }\n    return topDocs;\n  }\n\n","sourceOld":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(totalHitCountCollector.getTotalHits(), new ScoreDoc[0]);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        boolean fillFields = true;\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 fillFields,\n                                                 doDocScores,\n                                                 true); // TODO: can we disable exact hit counts\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after, true);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n    }\n    return topDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d3f7ab1a502671bbdb03bcced21e764d2483221","date":1532329609,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,Collector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,Collector).mjava","sourceNew":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(totalHitCountCollector.getTotalHits(), new ScoreDoc[0]);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 true); // TODO: can we disable exact hit counts\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after, true);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n      if (doDocScores) {\n        TopFieldCollector.populateScores(topDocs.scoreDocs, searcher, q);\n      }\n    }\n    return topDocs;\n  }\n\n","sourceOld":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(totalHitCountCollector.getTotalHits(), new ScoreDoc[0]);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 doDocScores,\n                                                 true); // TODO: can we disable exact hit counts\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after, true);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n    }\n    return topDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,Collector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,Collector).mjava","sourceNew":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(new TotalHits(totalHitCountCollector.getTotalHits(), TotalHits.Relation.EQUAL_TO), new ScoreDoc[0]);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 true); // TODO: can we disable exact hit counts\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after, true);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n      if (doDocScores) {\n        TopFieldCollector.populateScores(topDocs.scoreDocs, searcher, q);\n      }\n    }\n    return topDocs;\n  }\n\n","sourceOld":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(totalHitCountCollector.getTotalHits(), new ScoreDoc[0]);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 true); // TODO: can we disable exact hit counts\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after, true);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n      if (doDocScores) {\n        TopFieldCollector.populateScores(topDocs.scoreDocs, searcher, q);\n      }\n    }\n    return topDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe3c6364bed04a73ad0884b05401d80ce96027a9","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,Collector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,Collector).mjava","sourceNew":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(new TotalHits(totalHitCountCollector.getTotalHits(), TotalHits.Relation.EQUAL_TO), new ScoreDoc[0]);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 Integer.MAX_VALUE); // TODO: can we disable exact hit counts\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after, Integer.MAX_VALUE);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n      if (doDocScores) {\n        TopFieldCollector.populateScores(topDocs.scoreDocs, searcher, q);\n      }\n    }\n    return topDocs;\n  }\n\n","sourceOld":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(new TotalHits(totalHitCountCollector.getTotalHits(), TotalHits.Relation.EQUAL_TO), new ScoreDoc[0]);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 true); // TODO: can we disable exact hit counts\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after, true);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n      if (doDocScores) {\n        TopFieldCollector.populateScores(topDocs.scoreDocs, searcher, q);\n      }\n    }\n    return topDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"04c370507e5521b2eb998530736f1c19b851ed5a":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["04c370507e5521b2eb998530736f1c19b851ed5a"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"04c370507e5521b2eb998530736f1c19b851ed5a":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","04c370507e5521b2eb998530736f1c19b851ed5a"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}