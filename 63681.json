{"path":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#add(FSTCompiler[T],FSTCompiler.UnCompiledNode[T]).mjava","commits":[{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":1,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#add(FSTCompiler[T],FSTCompiler.UnCompiledNode[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#add(Builder[T],Builder.UnCompiledNode[T]).mjava","sourceNew":"  public long add(FSTCompiler<T> fstCompiler, FSTCompiler.UnCompiledNode<T> nodeIn) throws IOException {\n    //System.out.println(\"hash: add count=\" + count + \" vs \" + table.size() + \" mask=\" + mask);\n    final long h = hash(nodeIn);\n    long pos = h & mask;\n    int c = 0;\n    while(true) {\n      final long v = table.get(pos);\n      if (v == 0) {\n        // freeze & add\n        final long node = fst.addNode(fstCompiler, nodeIn);\n        //System.out.println(\"  now freeze node=\" + node);\n        assert hash(node) == h : \"frozenHash=\" + hash(node) + \" vs h=\" + h;\n        count++;\n        table.set(pos, node);\n        // Rehash at 2/3 occupancy:\n        if (count > 2*table.size()/3) {\n          rehash();\n        }\n        return node;\n      } else if (nodesEqual(nodeIn, v)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","sourceOld":"  public long add(Builder<T> builder, Builder.UnCompiledNode<T> nodeIn) throws IOException {\n    //System.out.println(\"hash: add count=\" + count + \" vs \" + table.size() + \" mask=\" + mask);\n    final long h = hash(nodeIn);\n    long pos = h & mask;\n    int c = 0;\n    while(true) {\n      final long v = table.get(pos);\n      if (v == 0) {\n        // freeze & add\n        final long node = fst.addNode(builder, nodeIn);\n        //System.out.println(\"  now freeze node=\" + node);\n        assert hash(node) == h : \"frozenHash=\" + hash(node) + \" vs h=\" + h;\n        count++;\n        table.set(pos, node);\n        // Rehash at 2/3 occupancy:\n        if (count > 2*table.size()/3) {\n          rehash();\n        }\n        return node;\n      } else if (nodesEqual(nodeIn, v)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#add(FSTCompiler[T],FSTCompiler.UnCompiledNode[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#add(Builder[T],Builder.UnCompiledNode[T]).mjava","sourceNew":"  public long add(FSTCompiler<T> fstCompiler, FSTCompiler.UnCompiledNode<T> nodeIn) throws IOException {\n    //System.out.println(\"hash: add count=\" + count + \" vs \" + table.size() + \" mask=\" + mask);\n    final long h = hash(nodeIn);\n    long pos = h & mask;\n    int c = 0;\n    while(true) {\n      final long v = table.get(pos);\n      if (v == 0) {\n        // freeze & add\n        final long node = fst.addNode(fstCompiler, nodeIn);\n        //System.out.println(\"  now freeze node=\" + node);\n        assert hash(node) == h : \"frozenHash=\" + hash(node) + \" vs h=\" + h;\n        count++;\n        table.set(pos, node);\n        // Rehash at 2/3 occupancy:\n        if (count > 2*table.size()/3) {\n          rehash();\n        }\n        return node;\n      } else if (nodesEqual(nodeIn, v)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","sourceOld":"  public long add(Builder<T> builder, Builder.UnCompiledNode<T> nodeIn) throws IOException {\n    //System.out.println(\"hash: add count=\" + count + \" vs \" + table.size() + \" mask=\" + mask);\n    final long h = hash(nodeIn);\n    long pos = h & mask;\n    int c = 0;\n    while(true) {\n      final long v = table.get(pos);\n      if (v == 0) {\n        // freeze & add\n        final long node = fst.addNode(builder, nodeIn);\n        //System.out.println(\"  now freeze node=\" + node);\n        assert hash(node) == h : \"frozenHash=\" + hash(node) + \" vs h=\" + h;\n        count++;\n        table.set(pos, node);\n        // Rehash at 2/3 occupancy:\n        if (count > 2*table.size()/3) {\n          rehash();\n        }\n        return node;\n      } else if (nodesEqual(nodeIn, v)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}