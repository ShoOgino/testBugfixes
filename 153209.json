{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell2/TestAllDictionaries#test().mjava","commits":[{"id":"c214bc712d04c78c4d434119d560d0a4dd2fce4f","date":1393216863,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell2/TestAllDictionaries#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    for (int i = 0; i < tests.length; i += 3) {\n      File f = new File(DICTIONARY_HOME, tests[i]);\n      assert f.exists();\n      \n      try (ZipFile zip = new ZipFile(f, IOUtils.CHARSET_UTF_8)) {\n        ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n        assert dicEntry != null;\n        ZipEntry affEntry = zip.getEntry(tests[i+2]);\n        assert affEntry != null;\n        \n        // get ram from previous impl\n        String oldRAM = \"FAIL\";\n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n            InputStream affix = zip.getInputStream(affEntry)) {\n          try {\n            HunspellDictionary dic = new HunspellDictionary(affix, dictionary, TEST_VERSION_CURRENT);\n            oldRAM = RamUsageEstimator.humanSizeOf(dic);\n          } catch (Throwable t) {}\n       }\n      \n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n             InputStream affix = zip.getInputStream(affEntry)) {\n          Dictionary dic = new Dictionary(affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + oldRAM + \"\\t\" + RamUsageEstimator.humanSizeOf(dic));\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e8f1276e0e817fd234b92c9ef95cb43e0466c3d","date":1393355889,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell2/TestAllDictionaries#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell2/TestAllDictionaries#test().mjava","sourceNew":"  public void test() throws Exception {\n    for (int i = 0; i < tests.length; i += 3) {\n      File f = new File(DICTIONARY_HOME, tests[i]);\n      assert f.exists();\n      \n      try (ZipFile zip = new ZipFile(f, IOUtils.CHARSET_UTF_8)) {\n        ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n        assert dicEntry != null;\n        ZipEntry affEntry = zip.getEntry(tests[i+2]);\n        assert affEntry != null;\n        \n        // get ram from previous impl\n        String oldRAM = \"FAIL\";\n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n            InputStream affix = zip.getInputStream(affEntry)) {\n          try {\n            HunspellDictionary dic = new HunspellDictionary(affix, dictionary, TEST_VERSION_CURRENT);\n            oldRAM = RamUsageEstimator.humanSizeOf(dic);\n          } catch (Throwable t) {}\n       }\n      \n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n             InputStream affix = zip.getInputStream(affEntry)) {\n          Dictionary dic = new Dictionary(affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + oldRAM + \"\\t\" + RamUsageEstimator.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageEstimator.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageEstimator.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"prefixes=\" + RamUsageEstimator.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageEstimator.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    for (int i = 0; i < tests.length; i += 3) {\n      File f = new File(DICTIONARY_HOME, tests[i]);\n      assert f.exists();\n      \n      try (ZipFile zip = new ZipFile(f, IOUtils.CHARSET_UTF_8)) {\n        ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n        assert dicEntry != null;\n        ZipEntry affEntry = zip.getEntry(tests[i+2]);\n        assert affEntry != null;\n        \n        // get ram from previous impl\n        String oldRAM = \"FAIL\";\n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n            InputStream affix = zip.getInputStream(affEntry)) {\n          try {\n            HunspellDictionary dic = new HunspellDictionary(affix, dictionary, TEST_VERSION_CURRENT);\n            oldRAM = RamUsageEstimator.humanSizeOf(dic);\n          } catch (Throwable t) {}\n       }\n      \n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n             InputStream affix = zip.getInputStream(affEntry)) {\n          Dictionary dic = new Dictionary(affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + oldRAM + \"\\t\" + RamUsageEstimator.humanSizeOf(dic));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26c5ee01d8657497f54f46447208768acc949d51","date":1393523610,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell2/TestAllDictionaries#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell2/TestAllDictionaries#test().mjava","sourceNew":"  public void test() throws Exception {\n    for (int i = 0; i < tests.length; i += 3) {\n      File f = new File(DICTIONARY_HOME, tests[i]);\n      assert f.exists();\n      \n      try (ZipFile zip = new ZipFile(f, IOUtils.CHARSET_UTF_8)) {\n        ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n        assert dicEntry != null;\n        ZipEntry affEntry = zip.getEntry(tests[i+2]);\n        assert affEntry != null;\n        \n        // get ram from previous impl\n        String oldRAM = \"FAIL\";\n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n            InputStream affix = zip.getInputStream(affEntry)) {\n          try {\n            HunspellDictionary dic = new HunspellDictionary(affix, dictionary, TEST_VERSION_CURRENT);\n            oldRAM = RamUsageEstimator.humanSizeOf(dic);\n          } catch (Throwable t) {}\n       }\n      \n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n             InputStream affix = zip.getInputStream(affEntry)) {\n          Dictionary dic = new Dictionary(affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + oldRAM + \"\\t\" + RamUsageEstimator.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageEstimator.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageEstimator.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageEstimator.humanSizeOf(dic.stripLookup) + \", \" +\n                             \"conditions=\" + RamUsageEstimator.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageEstimator.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageEstimator.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageEstimator.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    for (int i = 0; i < tests.length; i += 3) {\n      File f = new File(DICTIONARY_HOME, tests[i]);\n      assert f.exists();\n      \n      try (ZipFile zip = new ZipFile(f, IOUtils.CHARSET_UTF_8)) {\n        ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n        assert dicEntry != null;\n        ZipEntry affEntry = zip.getEntry(tests[i+2]);\n        assert affEntry != null;\n        \n        // get ram from previous impl\n        String oldRAM = \"FAIL\";\n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n            InputStream affix = zip.getInputStream(affEntry)) {\n          try {\n            HunspellDictionary dic = new HunspellDictionary(affix, dictionary, TEST_VERSION_CURRENT);\n            oldRAM = RamUsageEstimator.humanSizeOf(dic);\n          } catch (Throwable t) {}\n       }\n      \n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n             InputStream affix = zip.getInputStream(affEntry)) {\n          Dictionary dic = new Dictionary(affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + oldRAM + \"\\t\" + RamUsageEstimator.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageEstimator.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageEstimator.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"prefixes=\" + RamUsageEstimator.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageEstimator.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell2/TestAllDictionaries#test().mjava","sourceNew":"  public void test() throws Exception {\n    for (int i = 0; i < tests.length; i += 3) {\n      File f = new File(DICTIONARY_HOME, tests[i]);\n      assert f.exists();\n      \n      try (ZipFile zip = new ZipFile(f, IOUtils.CHARSET_UTF_8)) {\n        ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n        assert dicEntry != null;\n        ZipEntry affEntry = zip.getEntry(tests[i+2]);\n        assert affEntry != null;\n      \n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n             InputStream affix = zip.getInputStream(affEntry)) {\n          Dictionary dic = new Dictionary(affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageEstimator.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageEstimator.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageEstimator.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageEstimator.humanSizeOf(dic.stripLookup) + \", \" +\n                             \"conditions=\" + RamUsageEstimator.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageEstimator.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageEstimator.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageEstimator.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    for (int i = 0; i < tests.length; i += 3) {\n      File f = new File(DICTIONARY_HOME, tests[i]);\n      assert f.exists();\n      \n      try (ZipFile zip = new ZipFile(f, IOUtils.CHARSET_UTF_8)) {\n        ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n        assert dicEntry != null;\n        ZipEntry affEntry = zip.getEntry(tests[i+2]);\n        assert affEntry != null;\n        \n        // get ram from previous impl\n        String oldRAM = \"FAIL\";\n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n            InputStream affix = zip.getInputStream(affEntry)) {\n          try {\n            HunspellDictionary dic = new HunspellDictionary(affix, dictionary, TEST_VERSION_CURRENT);\n            oldRAM = RamUsageEstimator.humanSizeOf(dic);\n          } catch (Throwable t) {}\n       }\n      \n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n             InputStream affix = zip.getInputStream(affEntry)) {\n          Dictionary dic = new Dictionary(affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + oldRAM + \"\\t\" + RamUsageEstimator.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageEstimator.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageEstimator.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageEstimator.humanSizeOf(dic.stripLookup) + \", \" +\n                             \"conditions=\" + RamUsageEstimator.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageEstimator.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageEstimator.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageEstimator.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"26c5ee01d8657497f54f46447208768acc949d51":["9e8f1276e0e817fd234b92c9ef95cb43e0466c3d"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["26c5ee01d8657497f54f46447208768acc949d51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9e8f1276e0e817fd234b92c9ef95cb43e0466c3d":["c214bc712d04c78c4d434119d560d0a4dd2fce4f"],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"26c5ee01d8657497f54f46447208768acc949d51":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":[],"9e8f1276e0e817fd234b92c9ef95cb43e0466c3d":["26c5ee01d8657497f54f46447208768acc949d51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c214bc712d04c78c4d434119d560d0a4dd2fce4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["9e8f1276e0e817fd234b92c9ef95cb43e0466c3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}