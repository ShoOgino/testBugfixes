{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#randomNoOp(Automaton).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#randomNoOp(Automaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#randomNoOp(LightAutomaton).mjava","sourceNew":"  private Automaton randomNoOp(Automaton a) {\n    switch (random().nextInt(5)) {\n    case 0:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: determinize\");\n      }\n      return Operations.determinize(a);\n    case 1:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: minimize\");\n      }\n      return MinimizationOperations.minimize(a);\n    case 2:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: removeDeadStates\");\n      }\n      return Operations.removeDeadStates(a);\n    case 3:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: reverse reverse\");\n      }\n      a = Operations.reverse(a);\n      a = randomNoOp(a);\n      return Operations.reverse(a);\n    case 4:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: concat empty string\");\n      }\n      return Operations.concatenate(a, Automata.makeEmptyString());\n    case 5:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: union empty automaton\");\n      }\n      return Operations.union(a, Automata.makeEmpty());\n    }\n    assert false;\n    return null;\n  }\n\n","sourceOld":"  private LightAutomaton randomNoOp(LightAutomaton a) {\n    switch (random().nextInt(5)) {\n    case 0:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: determinize\");\n      }\n      return BasicOperations.determinize(a);\n    case 1:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: minimize\");\n      }\n      return MinimizationOperationsLight.minimize(a);\n    case 2:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: removeDeadStates\");\n      }\n      return BasicOperations.removeDeadStates(a);\n    case 3:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: reverse reverse\");\n      }\n      a = SpecialOperations.reverse(a);\n      a = randomNoOp(a);\n      return SpecialOperations.reverse(a);\n    case 4:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: concat empty string\");\n      }\n      return BasicOperations.concatenateLight(a, BasicAutomata.makeEmptyStringLight());\n    case 5:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: union empty automaton\");\n      }\n      return BasicOperations.unionLight(a, BasicAutomata.makeEmptyLight());\n    }\n    assert false;\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bab620c8ab32bb77a62753eca4afb8e47efa87c","date":1402997861,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#randomNoOp(Automaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#randomNoOp(Automaton).mjava","sourceNew":"  private Automaton randomNoOp(Automaton a) {\n    switch (random().nextInt(7)) {\n    case 0:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: determinize\");\n      }\n      return Operations.determinize(a);\n    case 1:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: minimize\");\n      }\n      return MinimizationOperations.minimize(a);\n    case 2:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: removeDeadStates\");\n      }\n      return Operations.removeDeadStates(a);\n    case 3:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: reverse reverse\");\n      }\n      a = Operations.reverse(a);\n      a = randomNoOp(a);\n      return Operations.reverse(a);\n    case 4:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: concat empty string\");\n      }\n      return Operations.concatenate(a, Automata.makeEmptyString());\n    case 5:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: union empty automaton\");\n      }\n      return Operations.union(a, Automata.makeEmpty());\n    case 6:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: do nothing!\");\n      }\n      return a;\n    }\n    assert false;\n    return null;\n  }\n\n","sourceOld":"  private Automaton randomNoOp(Automaton a) {\n    switch (random().nextInt(5)) {\n    case 0:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: determinize\");\n      }\n      return Operations.determinize(a);\n    case 1:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: minimize\");\n      }\n      return MinimizationOperations.minimize(a);\n    case 2:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: removeDeadStates\");\n      }\n      return Operations.removeDeadStates(a);\n    case 3:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: reverse reverse\");\n      }\n      a = Operations.reverse(a);\n      a = randomNoOp(a);\n      return Operations.reverse(a);\n    case 4:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: concat empty string\");\n      }\n      return Operations.concatenate(a, Automata.makeEmptyString());\n    case 5:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: union empty automaton\");\n      }\n      return Operations.union(a, Automata.makeEmpty());\n    }\n    assert false;\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#randomNoOp(Automaton).mjava","pathOld":"/dev/null","sourceNew":"  private Automaton randomNoOp(Automaton a) {\n    switch (random().nextInt(7)) {\n    case 0:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: determinize\");\n      }\n      return Operations.determinize(a);\n    case 1:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: minimize\");\n      }\n      return MinimizationOperations.minimize(a);\n    case 2:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: removeDeadStates\");\n      }\n      return Operations.removeDeadStates(a);\n    case 3:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: reverse reverse\");\n      }\n      a = Operations.reverse(a);\n      a = randomNoOp(a);\n      return Operations.reverse(a);\n    case 4:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: concat empty string\");\n      }\n      return Operations.concatenate(a, Automata.makeEmptyString());\n    case 5:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: union empty automaton\");\n      }\n      return Operations.union(a, Automata.makeEmpty());\n    case 6:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: do nothing!\");\n      }\n      return a;\n    }\n    assert false;\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c6ef4579ac33a8699af4e2c72f08960668af682","date":1408096212,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#randomNoOp(Automaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#randomNoOp(Automaton).mjava","sourceNew":"  private Automaton randomNoOp(Automaton a) {\n    switch (random().nextInt(7)) {\n    case 0:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: determinize\");\n      }\n      return Operations.determinize(a);\n    case 1:\n      if (a.getNumStates() < 100) {\n        if (VERBOSE) {\n          System.out.println(\"  randomNoOp: minimize\");\n        }\n        return MinimizationOperations.minimize(a);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  randomNoOp: skip op=minimize: too many states (\" + a.getNumStates() + \")\");\n        }\n      }\n    case 2:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: removeDeadStates\");\n      }\n      return Operations.removeDeadStates(a);\n    case 3:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: reverse reverse\");\n      }\n      a = Operations.reverse(a);\n      a = randomNoOp(a);\n      return Operations.reverse(a);\n    case 4:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: concat empty string\");\n      }\n      return Operations.concatenate(a, Automata.makeEmptyString());\n    case 5:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: union empty automaton\");\n      }\n      return Operations.union(a, Automata.makeEmpty());\n    case 6:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: do nothing!\");\n      }\n      return a;\n    }\n    assert false;\n    return null;\n  }\n\n","sourceOld":"  private Automaton randomNoOp(Automaton a) {\n    switch (random().nextInt(7)) {\n    case 0:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: determinize\");\n      }\n      return Operations.determinize(a);\n    case 1:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: minimize\");\n      }\n      return MinimizationOperations.minimize(a);\n    case 2:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: removeDeadStates\");\n      }\n      return Operations.removeDeadStates(a);\n    case 3:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: reverse reverse\");\n      }\n      a = Operations.reverse(a);\n      a = randomNoOp(a);\n      return Operations.reverse(a);\n    case 4:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: concat empty string\");\n      }\n      return Operations.concatenate(a, Automata.makeEmptyString());\n    case 5:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: union empty automaton\");\n      }\n      return Operations.union(a, Automata.makeEmpty());\n    case 6:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: do nothing!\");\n      }\n      return a;\n    }\n    assert false;\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c20597c663ca9716ee799c92a6d6ee2b6fef3cd","date":1408544372,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#randomNoOp(Automaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#randomNoOp(Automaton).mjava","sourceNew":"  private Automaton randomNoOp(Automaton a) {\n    switch (random().nextInt(7)) {\n    case 0:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: determinize\");\n      }\n      return Operations.determinize(a);\n    case 1:\n      if (a.getNumStates() < 100) {\n        if (VERBOSE) {\n          System.out.println(\"  randomNoOp: minimize\");\n        }\n        return MinimizationOperations.minimize(a);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  randomNoOp: skip op=minimize: too many states (\" + a.getNumStates() + \")\");\n        }\n        return a;\n      }\n    case 2:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: removeDeadStates\");\n      }\n      return Operations.removeDeadStates(a);\n    case 3:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: reverse reverse\");\n      }\n      a = Operations.reverse(a);\n      a = randomNoOp(a);\n      return Operations.reverse(a);\n    case 4:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: concat empty string\");\n      }\n      return Operations.concatenate(a, Automata.makeEmptyString());\n    case 5:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: union empty automaton\");\n      }\n      return Operations.union(a, Automata.makeEmpty());\n    case 6:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: do nothing!\");\n      }\n      return a;\n    }\n    assert false;\n    return null;\n  }\n\n","sourceOld":"  private Automaton randomNoOp(Automaton a) {\n    switch (random().nextInt(7)) {\n    case 0:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: determinize\");\n      }\n      return Operations.determinize(a);\n    case 1:\n      if (a.getNumStates() < 100) {\n        if (VERBOSE) {\n          System.out.println(\"  randomNoOp: minimize\");\n        }\n        return MinimizationOperations.minimize(a);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  randomNoOp: skip op=minimize: too many states (\" + a.getNumStates() + \")\");\n        }\n      }\n    case 2:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: removeDeadStates\");\n      }\n      return Operations.removeDeadStates(a);\n    case 3:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: reverse reverse\");\n      }\n      a = Operations.reverse(a);\n      a = randomNoOp(a);\n      return Operations.reverse(a);\n    case 4:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: concat empty string\");\n      }\n      return Operations.concatenate(a, Automata.makeEmptyString());\n    case 5:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: union empty automaton\");\n      }\n      return Operations.union(a, Automata.makeEmpty());\n    case 6:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: do nothing!\");\n      }\n      return a;\n    }\n    assert false;\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#randomNoOp(Automaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#randomNoOp(Automaton).mjava","sourceNew":"  private Automaton randomNoOp(Automaton a) {\n    switch (random().nextInt(7)) {\n    case 0:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: determinize\");\n      }\n      return Operations.determinize(a, DEFAULT_MAX_DETERMINIZED_STATES);\n    case 1:\n      if (a.getNumStates() < 100) {\n        if (VERBOSE) {\n          System.out.println(\"  randomNoOp: minimize\");\n        }\n        return MinimizationOperations.minimize(a, DEFAULT_MAX_DETERMINIZED_STATES);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  randomNoOp: skip op=minimize: too many states (\" + a.getNumStates() + \")\");\n        }\n        return a;\n      }\n    case 2:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: removeDeadStates\");\n      }\n      return Operations.removeDeadStates(a);\n    case 3:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: reverse reverse\");\n      }\n      a = Operations.reverse(a);\n      a = randomNoOp(a);\n      return Operations.reverse(a);\n    case 4:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: concat empty string\");\n      }\n      return Operations.concatenate(a, Automata.makeEmptyString());\n    case 5:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: union empty automaton\");\n      }\n      return Operations.union(a, Automata.makeEmpty());\n    case 6:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: do nothing!\");\n      }\n      return a;\n    }\n    assert false;\n    return null;\n  }\n\n","sourceOld":"  private Automaton randomNoOp(Automaton a) {\n    switch (random().nextInt(7)) {\n    case 0:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: determinize\");\n      }\n      return Operations.determinize(a);\n    case 1:\n      if (a.getNumStates() < 100) {\n        if (VERBOSE) {\n          System.out.println(\"  randomNoOp: minimize\");\n        }\n        return MinimizationOperations.minimize(a);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  randomNoOp: skip op=minimize: too many states (\" + a.getNumStates() + \")\");\n        }\n        return a;\n      }\n    case 2:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: removeDeadStates\");\n      }\n      return Operations.removeDeadStates(a);\n    case 3:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: reverse reverse\");\n      }\n      a = Operations.reverse(a);\n      a = randomNoOp(a);\n      return Operations.reverse(a);\n    case 4:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: concat empty string\");\n      }\n      return Operations.concatenate(a, Automata.makeEmptyString());\n    case 5:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: union empty automaton\");\n      }\n      return Operations.union(a, Automata.makeEmpty());\n    case 6:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: do nothing!\");\n      }\n      return a;\n    }\n    assert false;\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b2842292fa10ba000930b4d38a7f9abf20b589","date":1415179076,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#randomNoOp(Automaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#randomNoOp(Automaton).mjava","sourceNew":"  private Automaton randomNoOp(Automaton a) {\n    switch (random().nextInt(7)) {\n    case 0:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: determinize\");\n      }\n      return Operations.determinize(a, Integer.MAX_VALUE);\n    case 1:\n      if (a.getNumStates() < 100) {\n        if (VERBOSE) {\n          System.out.println(\"  randomNoOp: minimize\");\n        }\n        return MinimizationOperations.minimize(a, DEFAULT_MAX_DETERMINIZED_STATES);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  randomNoOp: skip op=minimize: too many states (\" + a.getNumStates() + \")\");\n        }\n        return a;\n      }\n    case 2:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: removeDeadStates\");\n      }\n      return Operations.removeDeadStates(a);\n    case 3:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: reverse reverse\");\n      }\n      a = Operations.reverse(a);\n      a = randomNoOp(a);\n      return Operations.reverse(a);\n    case 4:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: concat empty string\");\n      }\n      return Operations.concatenate(a, Automata.makeEmptyString());\n    case 5:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: union empty automaton\");\n      }\n      return Operations.union(a, Automata.makeEmpty());\n    case 6:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: do nothing!\");\n      }\n      return a;\n    }\n    assert false;\n    return null;\n  }\n\n","sourceOld":"  private Automaton randomNoOp(Automaton a) {\n    switch (random().nextInt(7)) {\n    case 0:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: determinize\");\n      }\n      return Operations.determinize(a, DEFAULT_MAX_DETERMINIZED_STATES);\n    case 1:\n      if (a.getNumStates() < 100) {\n        if (VERBOSE) {\n          System.out.println(\"  randomNoOp: minimize\");\n        }\n        return MinimizationOperations.minimize(a, DEFAULT_MAX_DETERMINIZED_STATES);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  randomNoOp: skip op=minimize: too many states (\" + a.getNumStates() + \")\");\n        }\n        return a;\n      }\n    case 2:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: removeDeadStates\");\n      }\n      return Operations.removeDeadStates(a);\n    case 3:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: reverse reverse\");\n      }\n      a = Operations.reverse(a);\n      a = randomNoOp(a);\n      return Operations.reverse(a);\n    case 4:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: concat empty string\");\n      }\n      return Operations.concatenate(a, Automata.makeEmptyString());\n    case 5:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: union empty automaton\");\n      }\n      return Operations.union(a, Automata.makeEmpty());\n    case 6:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: do nothing!\");\n      }\n      return a;\n    }\n    assert false;\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"55b2842292fa10ba000930b4d38a7f9abf20b589":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3c20597c663ca9716ee799c92a6d6ee2b6fef3cd":["8c6ef4579ac33a8699af4e2c72f08960668af682"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["3c20597c663ca9716ee799c92a6d6ee2b6fef3cd"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["55b2842292fa10ba000930b4d38a7f9abf20b589"],"8c6ef4579ac33a8699af4e2c72f08960668af682":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["5c84485629d80d203608e8975a1139de9933cc38"],"55b2842292fa10ba000930b4d38a7f9abf20b589":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"3c20597c663ca9716ee799c92a6d6ee2b6fef3cd":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["55b2842292fa10ba000930b4d38a7f9abf20b589"],"5c84485629d80d203608e8975a1139de9933cc38":["8c6ef4579ac33a8699af4e2c72f08960668af682"],"8c6ef4579ac33a8699af4e2c72f08960668af682":["3c20597c663ca9716ee799c92a6d6ee2b6fef3cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}