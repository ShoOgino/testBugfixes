{"path":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream]).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream]).mjava","sourceNew":"  public SolrQueryRequest buildRequestFrom( SolrCore core, SolrParams params, Collection<ContentStream> streams ) throws Exception\n  {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    SolrQueryRequestBase q = new SolrQueryRequestBase( core, params ) { };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","sourceOld":"  public SolrQueryRequest buildRequestFrom( SolrCore core, SolrParams params, Collection<ContentStream> streams ) throws Exception\n  {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    SolrQueryRequestBase q = new SolrQueryRequestBase( core, params ) { };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream]).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream]).mjava","sourceNew":"  public SolrQueryRequest buildRequestFrom( SolrCore core, SolrParams params, Collection<ContentStream> streams ) throws Exception\n  {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    SolrQueryRequestBase q = new SolrQueryRequestBase( core, params ) { };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","sourceOld":"  public SolrQueryRequest buildRequestFrom( SolrCore core, SolrParams params, Collection<ContentStream> streams ) throws Exception\n  {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    SolrQueryRequestBase q = new SolrQueryRequestBase( core, params ) { };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream]).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream]).mjava","sourceNew":"  public SolrQueryRequest buildRequestFrom( SolrCore core, SolrParams params, Collection<ContentStream> streams ) throws Exception\n  {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    SolrQueryRequestBase q = new SolrQueryRequestBase( core, params ) { };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","sourceOld":"  public SolrQueryRequest buildRequestFrom( SolrCore core, SolrParams params, Collection<ContentStream> streams ) throws Exception\n  {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    SolrQueryRequestBase q = new SolrQueryRequestBase( core, params ) { };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream]).mjava","sourceNew":"  public SolrQueryRequest buildRequestFrom( SolrCore core, SolrParams params, Collection<ContentStream> streams ) throws Exception\n  {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    SolrQueryRequestBase q = new SolrQueryRequestBase( core, params ) { };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","sourceOld":"  public SolrQueryRequest buildRequestFrom( SolrCore core, SolrParams params, Collection<ContentStream> streams ) throws Exception\n  {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    SolrQueryRequestBase q = new SolrQueryRequestBase( core, params ) { };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da41004e1997059b4d0549fbeb56bf0858d14689","date":1425425090,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream]).mjava","sourceNew":"  public SolrQueryRequest buildRequestFrom( SolrCore core, SolrParams params, Collection<ContentStream> streams ) throws Exception\n  {\n    return buildRequestFrom( core, params, streams, new RTimer() );\n  }\n\n","sourceOld":"  public SolrQueryRequest buildRequestFrom( SolrCore core, SolrParams params, Collection<ContentStream> streams ) throws Exception\n  {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    SolrQueryRequestBase q = new SolrQueryRequestBase( core, params ) { };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream]).mjava","sourceNew":"  public SolrQueryRequest buildRequestFrom( SolrCore core, SolrParams params, Collection<ContentStream> streams ) throws Exception\n  {\n    return buildRequestFrom( core, params, streams, new RTimer() );\n  }\n\n","sourceOld":"  public SolrQueryRequest buildRequestFrom( SolrCore core, SolrParams params, Collection<ContentStream> streams ) throws Exception\n  {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    SolrQueryRequestBase q = new SolrQueryRequestBase( core, params ) { };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3a34dae868734612eb6329aa0ef754f30bd2036","date":1438783154,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream]).mjava","sourceNew":"  public SolrQueryRequest buildRequestFrom(SolrCore core, SolrParams params, Collection<ContentStream> streams) throws Exception {\n    return buildRequestFrom(core, params, streams, new RTimer(), null);\n  }\n\n","sourceOld":"  public SolrQueryRequest buildRequestFrom( SolrCore core, SolrParams params, Collection<ContentStream> streams ) throws Exception\n  {\n    return buildRequestFrom( core, params, streams, new RTimer() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104456f4eeacc857f7e1e6408e1483de8c2bd658","date":1439164522,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream]).mjava","sourceNew":"  public SolrQueryRequest buildRequestFrom(SolrCore core, SolrParams params, Collection<ContentStream> streams) throws Exception {\n    return buildRequestFrom(core, params, streams, new RTimerTree(), null);\n  }\n\n","sourceOld":"  public SolrQueryRequest buildRequestFrom(SolrCore core, SolrParams params, Collection<ContentStream> streams) throws Exception {\n    return buildRequestFrom(core, params, streams, new RTimer(), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["08970e5b8411182a29412c177eff67ec1110095b","da41004e1997059b4d0549fbeb56bf0858d14689"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"da41004e1997059b4d0549fbeb56bf0858d14689":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3a34dae868734612eb6329aa0ef754f30bd2036":["da41004e1997059b4d0549fbeb56bf0858d14689"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"104456f4eeacc857f7e1e6408e1483de8c2bd658":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["104456f4eeacc857f7e1e6408e1483de8c2bd658"],"08970e5b8411182a29412c177eff67ec1110095b":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["08970e5b8411182a29412c177eff67ec1110095b"],"da41004e1997059b4d0549fbeb56bf0858d14689":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b3a34dae868734612eb6329aa0ef754f30bd2036"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b3a34dae868734612eb6329aa0ef754f30bd2036":["104456f4eeacc857f7e1e6408e1483de8c2bd658"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"104456f4eeacc857f7e1e6408e1483de8c2bd658":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"08970e5b8411182a29412c177eff67ec1110095b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","da41004e1997059b4d0549fbeb56bf0858d14689"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}