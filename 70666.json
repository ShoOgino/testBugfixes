{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/DateMathFunctionTest#singleValueParameterTest().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/DateMathFunctionTest#singleValueParameterTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void singleValueParameterTest() throws DateTimeParseException {\n    Date date1 = Date.from(Instant.parse(\"1810-12-02T10:30:15Z\"));\n    Date date2 = Date.from(Instant.parse(\"1931-03-16T18:15:45Z\"));\n    \n    TestDateValue val = new TestDateValue();\n\n    ConstantStringValue math1 = new ConstantStringValue(\"+1DAY\");\n    ConstantStringValue math2 = new ConstantStringValue(\"-1MONTH\");\n    ConstantStringValue math3 = new ConstantStringValue(\"+11YEARS\");\n\n    AnalyticsValueStream uncasted = DateMathFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, math1, math2, math3});\n    assertTrue(uncasted instanceof DateValue);\n    DateValue func = (DateValue) uncasted;\n\n    // Value doesn't exist\n    val.setExists(false);\n    func.getDate();\n    assertFalse(func.exists());\n    func.getLong();\n    assertFalse(func.exists());\n    \n    // Value exists\n    val.setValue(\"1800-01-01T10:30:15Z\").setExists(true);\n    assertEquals(date1, func.getDate());\n    assertTrue(func.exists());\n    assertEquals(date1.getTime(), func.getLong());\n    assertTrue(func.exists());\n\n    val.setValue(\"1920-04-15T18:15:45Z\").setExists(true);\n    assertEquals(date2, func.getDate());\n    assertTrue(func.exists());\n    assertEquals(date2.getTime(), func.getLong());\n    assertTrue(func.exists());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/DateMathFunctionTest#singleValueParameterTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/DateMathFunctionTest#singleValueParameterTest().mjava","sourceNew":"  @Test\n  public void singleValueParameterTest() throws DateTimeParseException {\n    Date date1 = Date.from(Instant.parse(\"1810-12-02T10:30:15Z\"));\n    Date date2 = Date.from(Instant.parse(\"1931-03-16T18:15:45Z\"));\n\n    TestDateValue val = new TestDateValue();\n\n    ConstantStringValue math1 = new ConstantStringValue(\"+1DAY\");\n    ConstantStringValue math2 = new ConstantStringValue(\"-1MONTH\");\n    ConstantStringValue math3 = new ConstantStringValue(\"+11YEARS\");\n\n    AnalyticsValueStream uncasted = DateMathFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, math1, math2, math3});\n    assertTrue(uncasted instanceof DateValue);\n    DateValue func = (DateValue) uncasted;\n\n    // Value doesn't exist\n    val.setExists(false);\n    func.getDate();\n    assertFalse(func.exists());\n    func.getLong();\n    assertFalse(func.exists());\n\n    // Value exists\n    val.setValue(\"1800-01-01T10:30:15Z\").setExists(true);\n    assertEquals(date1, func.getDate());\n    assertTrue(func.exists());\n    assertEquals(date1.getTime(), func.getLong());\n    assertTrue(func.exists());\n\n    val.setValue(\"1920-04-15T18:15:45Z\").setExists(true);\n    assertEquals(date2, func.getDate());\n    assertTrue(func.exists());\n    assertEquals(date2.getTime(), func.getLong());\n    assertTrue(func.exists());\n  }\n\n","sourceOld":"  @Test\n  public void singleValueParameterTest() throws DateTimeParseException {\n    Date date1 = Date.from(Instant.parse(\"1810-12-02T10:30:15Z\"));\n    Date date2 = Date.from(Instant.parse(\"1931-03-16T18:15:45Z\"));\n    \n    TestDateValue val = new TestDateValue();\n\n    ConstantStringValue math1 = new ConstantStringValue(\"+1DAY\");\n    ConstantStringValue math2 = new ConstantStringValue(\"-1MONTH\");\n    ConstantStringValue math3 = new ConstantStringValue(\"+11YEARS\");\n\n    AnalyticsValueStream uncasted = DateMathFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, math1, math2, math3});\n    assertTrue(uncasted instanceof DateValue);\n    DateValue func = (DateValue) uncasted;\n\n    // Value doesn't exist\n    val.setExists(false);\n    func.getDate();\n    assertFalse(func.exists());\n    func.getLong();\n    assertFalse(func.exists());\n    \n    // Value exists\n    val.setValue(\"1800-01-01T10:30:15Z\").setExists(true);\n    assertEquals(date1, func.getDate());\n    assertTrue(func.exists());\n    assertEquals(date1.getTime(), func.getLong());\n    assertTrue(func.exists());\n\n    val.setValue(\"1920-04-15T18:15:45Z\").setExists(true);\n    assertEquals(date2, func.getDate());\n    assertTrue(func.exists());\n    assertEquals(date2.getTime(), func.getLong());\n    assertTrue(func.exists());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/DateMathFunctionTest#singleValueParameterTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/DateMathFunctionTest#singleValueParameterTest().mjava","sourceNew":"  @Test\n  public void singleValueParameterTest() throws DateTimeParseException {\n    Date date1 = Date.from(Instant.parse(\"1810-12-02T10:30:15Z\"));\n    Date date2 = Date.from(Instant.parse(\"1931-03-16T18:15:45Z\"));\n\n    TestDateValue val = new TestDateValue();\n\n    ConstantStringValue math1 = new ConstantStringValue(\"+1DAY\");\n    ConstantStringValue math2 = new ConstantStringValue(\"-1MONTH\");\n    ConstantStringValue math3 = new ConstantStringValue(\"+11YEARS\");\n\n    AnalyticsValueStream uncasted = DateMathFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, math1, math2, math3});\n    assertTrue(uncasted instanceof DateValue);\n    DateValue func = (DateValue) uncasted;\n\n    // Value doesn't exist\n    val.setExists(false);\n    func.getDate();\n    assertFalse(func.exists());\n    func.getLong();\n    assertFalse(func.exists());\n\n    // Value exists\n    val.setValue(\"1800-01-01T10:30:15Z\").setExists(true);\n    assertEquals(date1, func.getDate());\n    assertTrue(func.exists());\n    assertEquals(date1.getTime(), func.getLong());\n    assertTrue(func.exists());\n\n    val.setValue(\"1920-04-15T18:15:45Z\").setExists(true);\n    assertEquals(date2, func.getDate());\n    assertTrue(func.exists());\n    assertEquals(date2.getTime(), func.getLong());\n    assertTrue(func.exists());\n  }\n\n","sourceOld":"  @Test\n  public void singleValueParameterTest() throws DateTimeParseException {\n    Date date1 = Date.from(Instant.parse(\"1810-12-02T10:30:15Z\"));\n    Date date2 = Date.from(Instant.parse(\"1931-03-16T18:15:45Z\"));\n    \n    TestDateValue val = new TestDateValue();\n\n    ConstantStringValue math1 = new ConstantStringValue(\"+1DAY\");\n    ConstantStringValue math2 = new ConstantStringValue(\"-1MONTH\");\n    ConstantStringValue math3 = new ConstantStringValue(\"+11YEARS\");\n\n    AnalyticsValueStream uncasted = DateMathFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, math1, math2, math3});\n    assertTrue(uncasted instanceof DateValue);\n    DateValue func = (DateValue) uncasted;\n\n    // Value doesn't exist\n    val.setExists(false);\n    func.getDate();\n    assertFalse(func.exists());\n    func.getLong();\n    assertFalse(func.exists());\n    \n    // Value exists\n    val.setValue(\"1800-01-01T10:30:15Z\").setExists(true);\n    assertEquals(date1, func.getDate());\n    assertTrue(func.exists());\n    assertEquals(date1.getTime(), func.getLong());\n    assertTrue(func.exists());\n\n    val.setValue(\"1920-04-15T18:15:45Z\").setExists(true);\n    assertEquals(date2, func.getDate());\n    assertTrue(func.exists());\n    assertEquals(date2.getTime(), func.getLong());\n    assertTrue(func.exists());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}