{"path":"lucene/src/test-framework/org/apache/lucene/analysis/CollationTestBase#assertMatches(IndexSearcher,Query,Sort,String).mjava","commits":[{"id":"d17d4fe0503a62f6522b1dd15204dd25cd231edf","date":1313599393,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/CollationTestBase#assertMatches(IndexSearcher,Query,Sort,String).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#assertMatches(IndexSearcher,Query,Sort,String).mjava","sourceNew":"  // Make sure the documents returned by the search match the expected list\n  // Copied from TestSort.java\n  private void assertMatches(IndexSearcher searcher, Query query, Sort sort, \n                             String expectedResult) throws IOException {\n    ScoreDoc[] result = searcher.search(query, null, 1000, sort).scoreDocs;\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i = 0 ; i < n ; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j = 0 ; j < v.length ; ++j) {\n        buff.append(v[j]);\n      }\n    }\n    assertEquals(expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // Make sure the documents returned by the search match the expected list\n  // Copied from TestSort.java\n  private void assertMatches(IndexSearcher searcher, Query query, Sort sort, \n                             String expectedResult) throws IOException {\n    ScoreDoc[] result = searcher.search(query, null, 1000, sort).scoreDocs;\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i = 0 ; i < n ; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j = 0 ; j < v.length ; ++j) {\n        buff.append(v[j]);\n      }\n    }\n    assertEquals(expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/CollationTestBase#assertMatches(IndexSearcher,Query,Sort,String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/CollationTestBase#assertMatches(IndexSearcher,Query,Sort,String).mjava","sourceNew":"  // Make sure the documents returned by the search match the expected list\n  // Copied from TestSort.java\n  private void assertMatches(IndexSearcher searcher, Query query, Sort sort, \n                             String expectedResult) throws IOException {\n    ScoreDoc[] result = searcher.search(query, null, 1000, sort).scoreDocs;\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i = 0 ; i < n ; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      IndexableField[] v = doc.getFields(\"tracer\");\n      for (int j = 0 ; j < v.length ; ++j) {\n        buff.append(v[j].stringValue());\n      }\n    }\n    assertEquals(expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // Make sure the documents returned by the search match the expected list\n  // Copied from TestSort.java\n  private void assertMatches(IndexSearcher searcher, Query query, Sort sort, \n                             String expectedResult) throws IOException {\n    ScoreDoc[] result = searcher.search(query, null, 1000, sort).scoreDocs;\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i = 0 ; i < n ; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j = 0 ; j < v.length ; ++j) {\n        buff.append(v[j]);\n      }\n    }\n    assertEquals(expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#assertMatches(IndexSearcher,Query,Sort,String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/CollationTestBase#assertMatches(IndexSearcher,Query,Sort,String).mjava","sourceNew":"  // Make sure the documents returned by the search match the expected list\n  // Copied from TestSort.java\n  private void assertMatches(IndexSearcher searcher, Query query, Sort sort, \n                             String expectedResult) throws IOException {\n    ScoreDoc[] result = searcher.search(query, null, 1000, sort).scoreDocs;\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i = 0 ; i < n ; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      IndexableField[] v = doc.getFields(\"tracer\");\n      for (int j = 0 ; j < v.length ; ++j) {\n        buff.append(v[j].stringValue());\n      }\n    }\n    assertEquals(expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // Make sure the documents returned by the search match the expected list\n  // Copied from TestSort.java\n  private void assertMatches(IndexSearcher searcher, Query query, Sort sort, \n                             String expectedResult) throws IOException {\n    ScoreDoc[] result = searcher.search(query, null, 1000, sort).scoreDocs;\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i = 0 ; i < n ; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      IndexableField[] v = doc.getFields(\"tracer\");\n      for (int j = 0 ; j < v.length ; ++j) {\n        buff.append(v[j].stringValue());\n      }\n    }\n    assertEquals(expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"d17d4fe0503a62f6522b1dd15204dd25cd231edf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d17d4fe0503a62f6522b1dd15204dd25cd231edf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d17d4fe0503a62f6522b1dd15204dd25cd231edf":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d17d4fe0503a62f6522b1dd15204dd25cd231edf"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}