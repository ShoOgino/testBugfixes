{"path":"solr/core/src/java/org/apache/solr/core/ConfigSolr#fromFile(File).mjava","commits":[{"id":"d264f386d864b5751209060e8886ca9845f70469","date":1372172126,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolr#fromFile(File).mjava","pathOld":"/dev/null","sourceNew":"  public static ConfigSolr fromFile(File configFile) {\n    log.info(\"Loading container configuration from {}\", configFile.getAbsolutePath());\n\n    String solrHome = configFile.getParent();\n    SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n    InputStream inputStream = null;\n\n    try {\n      if (!configFile.exists()) {\n        log.info(\"{} does not exist, using default configuration\", configFile.getAbsolutePath());\n        inputStream = new ByteArrayInputStream(ConfigSolrXmlOld.DEF_SOLR_XML.getBytes(Charsets.UTF_8));\n      }\n      else {\n        inputStream = new FileInputStream(configFile);\n      }\n      return fromInputStream(loader, inputStream);\n    }\n    catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load SOLR configuration\", e);\n    }\n    finally {\n      IOUtils.closeQuietly(inputStream);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"354983dcdf70c800bf2573d10b54a7391b1dc167","date":1372183171,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolr#fromFile(File).mjava","sourceNew":null,"sourceOld":"  public static ConfigSolr fromFile(File configFile) {\n    log.info(\"Loading container configuration from {}\", configFile.getAbsolutePath());\n\n    String solrHome = configFile.getParent();\n    SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n    InputStream inputStream = null;\n\n    try {\n      if (!configFile.exists()) {\n        log.info(\"{} does not exist, using default configuration\", configFile.getAbsolutePath());\n        inputStream = new ByteArrayInputStream(ConfigSolrXmlOld.DEF_SOLR_XML.getBytes(Charsets.UTF_8));\n      }\n      else {\n        inputStream = new FileInputStream(configFile);\n      }\n      return fromInputStream(loader, inputStream);\n    }\n    catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load SOLR configuration\", e);\n    }\n    finally {\n      IOUtils.closeQuietly(inputStream);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7116474e2e390259937401cf928323e0cbc75e60","date":1372780249,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolr#fromFile(File).mjava","pathOld":"/dev/null","sourceNew":"  public static ConfigSolr fromFile(File configFile) {\n    log.info(\"Loading container configuration from {}\", configFile.getAbsolutePath());\n\n    String solrHome = configFile.getParent();\n    SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n    InputStream inputStream = null;\n\n    try {\n      if (!configFile.exists()) {\n        log.info(\"{} does not exist, using default configuration\", configFile.getAbsolutePath());\n        inputStream = new ByteArrayInputStream(ConfigSolrXmlOld.DEF_SOLR_XML.getBytes(Charsets.UTF_8));\n      }\n      else {\n        inputStream = new FileInputStream(configFile);\n      }\n      return fromInputStream(loader, inputStream);\n    }\n    catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load SOLR configuration\", e);\n    }\n    finally {\n      IOUtils.closeQuietly(inputStream);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e0571cb12a71d379cc6bd0d3b70fe1d8867a109d","a877077e0a22a42eebce7d1052c58e97d3afb12d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7c43bd440d08d05f1c7db15f7f4001790db5859","date":1373064328,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolr#fromFile(SolrResourceLoader,File).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolr#fromFile(File).mjava","sourceNew":"  public static ConfigSolr fromFile(SolrResourceLoader loader, File configFile) {\n    log.info(\"Loading container configuration from {}\", configFile.getAbsolutePath());\n\n    InputStream inputStream = null;\n\n    try {\n      if (!configFile.exists()) {\n        log.info(\"{} does not exist, using default configuration\", configFile.getAbsolutePath());\n        inputStream = new ByteArrayInputStream(ConfigSolrXmlOld.DEF_SOLR_XML.getBytes(Charsets.UTF_8));\n      }\n      else {\n        inputStream = new FileInputStream(configFile);\n      }\n      return fromInputStream(loader, inputStream);\n    }\n    catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load SOLR configuration\", e);\n    }\n    finally {\n      IOUtils.closeQuietly(inputStream);\n    }\n  }\n\n","sourceOld":"  public static ConfigSolr fromFile(File configFile) {\n    log.info(\"Loading container configuration from {}\", configFile.getAbsolutePath());\n\n    String solrHome = configFile.getParent();\n    SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n    InputStream inputStream = null;\n\n    try {\n      if (!configFile.exists()) {\n        log.info(\"{} does not exist, using default configuration\", configFile.getAbsolutePath());\n        inputStream = new ByteArrayInputStream(ConfigSolrXmlOld.DEF_SOLR_XML.getBytes(Charsets.UTF_8));\n      }\n      else {\n        inputStream = new FileInputStream(configFile);\n      }\n      return fromInputStream(loader, inputStream);\n    }\n    catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load SOLR configuration\", e);\n    }\n    finally {\n      IOUtils.closeQuietly(inputStream);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c7c43bd440d08d05f1c7db15f7f4001790db5859":["7116474e2e390259937401cf928323e0cbc75e60"],"7116474e2e390259937401cf928323e0cbc75e60":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"354983dcdf70c800bf2573d10b54a7391b1dc167":["d264f386d864b5751209060e8886ca9845f70469"],"d264f386d864b5751209060e8886ca9845f70469":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7c43bd440d08d05f1c7db15f7f4001790db5859"]},"commit2Childs":{"c7c43bd440d08d05f1c7db15f7f4001790db5859":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7116474e2e390259937401cf928323e0cbc75e60":["c7c43bd440d08d05f1c7db15f7f4001790db5859"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d264f386d864b5751209060e8886ca9845f70469"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["7116474e2e390259937401cf928323e0cbc75e60"],"d264f386d864b5751209060e8886ca9845f70469":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}