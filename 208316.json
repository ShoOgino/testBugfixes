{"path":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processFacetFields(TaxonomyWriter,Map[String,List[FacetField]],Document).mjava","commits":[{"id":"755faee94413f220e729a0b60122d6b24f7a2468","date":1391011756,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processFacetFields(TaxonomyWriter,Map[String,List[FacetField]],Document).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processFacetFields(TaxonomyWriter,Map[String,List[FacetField]],List[Field],List[Field]).mjava","sourceNew":"  private void processFacetFields(TaxonomyWriter taxoWriter, Map<String,List<FacetField>> byField, Document doc) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  indexFieldName=\" + indexFieldName + \" fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = new FacetLabel(facetField.dim, facetField.path);\n\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(cp);\n        if (ordinals.length == ordinals.ints.length) {\n          ordinals.grow(ordinals.length+1);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"ords[\" + (ordinals.length-1) + \"]=\" + ordinal);\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.multiValued && (ft.hierarchical || ft.requireDimCount)) {\n          //System.out.println(\"  add parents\");\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n\n          if (ft.requireDimCount == false) {\n            // Remove last (dimension) ord:\n            ordinals.length--;\n          }\n        }\n\n        // Drill down:\n        for (int i=1;i<=cp.length;i++) {\n          doc.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      doc.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","sourceOld":"  private void processFacetFields(TaxonomyWriter taxoWriter, Map<String,List<FacetField>> byField, List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  indexFieldName=\" + indexFieldName + \" fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = new FacetLabel(facetField.dim, facetField.path);\n\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(cp);\n        if (ordinals.length == ordinals.ints.length) {\n          ordinals.grow(ordinals.length+1);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"ords[\" + (ordinals.length-1) + \"]=\" + ordinal);\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.multiValued && (ft.hierarchical || ft.requireDimCount)) {\n          //System.out.println(\"  add parents\");\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n\n          if (ft.requireDimCount == false) {\n            // Remove last (dimension) ord:\n            ordinals.length--;\n          }\n        }\n\n        // Drill down:\n        for(int i=1;i<=cp.length;i++) {\n          addedIndexedFields.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      addedStoredFields.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processFacetFields(TaxonomyWriter,Map[String,List[FacetField]],Document).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processFacetFields(TaxonomyWriter,Map[String,List[FacetField]],Document).mjava","sourceNew":"  private void processFacetFields(TaxonomyWriter taxoWriter, Map<String,List<FacetField>> byField, Document doc) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  indexFieldName=\" + indexFieldName + \" fields=\" + ent.getValue());\n\n      IntsRefBuilder ordinals = new IntsRefBuilder();\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = new FacetLabel(facetField.dim, facetField.path);\n\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(cp);\n        ordinals.append(ordinal);\n        //System.out.println(\"ords[\" + (ordinals.length-1) + \"]=\" + ordinal);\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.multiValued && (ft.hierarchical || ft.requireDimCount)) {\n          //System.out.println(\"  add parents\");\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            ordinals.append(parent);\n            parent = taxoWriter.getParent(parent);\n          }\n\n          if (ft.requireDimCount == false) {\n            // Remove last (dimension) ord:\n            ordinals.setLength(ordinals.length() - 1);\n          }\n        }\n\n        // Drill down:\n        for (int i=1;i<=cp.length;i++) {\n          doc.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      doc.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals.get())));\n    }\n  }\n\n","sourceOld":"  private void processFacetFields(TaxonomyWriter taxoWriter, Map<String,List<FacetField>> byField, Document doc) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  indexFieldName=\" + indexFieldName + \" fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = new FacetLabel(facetField.dim, facetField.path);\n\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(cp);\n        if (ordinals.length == ordinals.ints.length) {\n          ordinals.grow(ordinals.length+1);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"ords[\" + (ordinals.length-1) + \"]=\" + ordinal);\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.multiValued && (ft.hierarchical || ft.requireDimCount)) {\n          //System.out.println(\"  add parents\");\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n\n          if (ft.requireDimCount == false) {\n            // Remove last (dimension) ord:\n            ordinals.length--;\n          }\n        }\n\n        // Drill down:\n        for (int i=1;i<=cp.length;i++) {\n          doc.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      doc.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","bugFix":["755faee94413f220e729a0b60122d6b24f7a2468","006838107b0cd2051371f3470740d23ec91b1886","519ac3b8f2711b5bfeb1c90c77bb007032270a41"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be9dc9e17c1046a542423f69130abddef886f16","date":1530129441,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processFacetFields(TaxonomyWriter,Map[String,List[FacetField]],Document).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processFacetFields(TaxonomyWriter,Map[String,List[FacetField]],Document).mjava","sourceNew":"  private void processFacetFields(TaxonomyWriter taxoWriter, Map<String,List<FacetField>> byField, Document doc) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  indexFieldName=\" + indexFieldName + \" fields=\" + ent.getValue());\n\n      IntsRefBuilder ordinals = new IntsRefBuilder();\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = new FacetLabel(facetField.dim, facetField.path);\n\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(cp);\n        ordinals.append(ordinal);\n        //System.out.println(\"ords[\" + (ordinals.length-1) + \"]=\" + ordinal);\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.multiValued && (ft.hierarchical || ft.requireDimCount)) {\n          //System.out.println(\"  add parents\");\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            ordinals.append(parent);\n            parent = taxoWriter.getParent(parent);\n          }\n\n          if (ft.requireDimCount == false) {\n            // Remove last (dimension) ord:\n            ordinals.setLength(ordinals.length() - 1);\n          }\n        }\n\n        // Drill down:\n        int start;\n        if (ft.requireDimensionDrillDown) {\n          start = 1;\n        } else {\n          start = 2;\n        }\n        for (int i=start;i<=cp.length;i++) {\n          doc.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      doc.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals.get())));\n    }\n  }\n\n","sourceOld":"  private void processFacetFields(TaxonomyWriter taxoWriter, Map<String,List<FacetField>> byField, Document doc) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  indexFieldName=\" + indexFieldName + \" fields=\" + ent.getValue());\n\n      IntsRefBuilder ordinals = new IntsRefBuilder();\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = new FacetLabel(facetField.dim, facetField.path);\n\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(cp);\n        ordinals.append(ordinal);\n        //System.out.println(\"ords[\" + (ordinals.length-1) + \"]=\" + ordinal);\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.multiValued && (ft.hierarchical || ft.requireDimCount)) {\n          //System.out.println(\"  add parents\");\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            ordinals.append(parent);\n            parent = taxoWriter.getParent(parent);\n          }\n\n          if (ft.requireDimCount == false) {\n            // Remove last (dimension) ord:\n            ordinals.setLength(ordinals.length() - 1);\n          }\n        }\n\n        // Drill down:\n        for (int i=1;i<=cp.length;i++) {\n          doc.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      doc.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals.get())));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processFacetFields(TaxonomyWriter,Map[String,List[FacetField]],Document).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processFacetFields(TaxonomyWriter,Map[String,List[FacetField]],Document).mjava","sourceNew":"  private void processFacetFields(TaxonomyWriter taxoWriter, Map<String,List<FacetField>> byField, Document doc) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  indexFieldName=\" + indexFieldName + \" fields=\" + ent.getValue());\n\n      IntsRefBuilder ordinals = new IntsRefBuilder();\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = new FacetLabel(facetField.dim, facetField.path);\n\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(cp);\n        ordinals.append(ordinal);\n        //System.out.println(\"ords[\" + (ordinals.length-1) + \"]=\" + ordinal);\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.multiValued && (ft.hierarchical || ft.requireDimCount)) {\n          //System.out.println(\"  add parents\");\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            ordinals.append(parent);\n            parent = taxoWriter.getParent(parent);\n          }\n\n          if (ft.requireDimCount == false) {\n            // Remove last (dimension) ord:\n            ordinals.setLength(ordinals.length() - 1);\n          }\n        }\n\n        // Drill down:\n        int start;\n        if (ft.requireDimensionDrillDown) {\n          start = 1;\n        } else {\n          start = 2;\n        }\n        for (int i=start;i<=cp.length;i++) {\n          doc.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      doc.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals.get())));\n    }\n  }\n\n","sourceOld":"  private void processFacetFields(TaxonomyWriter taxoWriter, Map<String,List<FacetField>> byField, Document doc) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  indexFieldName=\" + indexFieldName + \" fields=\" + ent.getValue());\n\n      IntsRefBuilder ordinals = new IntsRefBuilder();\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = new FacetLabel(facetField.dim, facetField.path);\n\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(cp);\n        ordinals.append(ordinal);\n        //System.out.println(\"ords[\" + (ordinals.length-1) + \"]=\" + ordinal);\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.multiValued && (ft.hierarchical || ft.requireDimCount)) {\n          //System.out.println(\"  add parents\");\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            ordinals.append(parent);\n            parent = taxoWriter.getParent(parent);\n          }\n\n          if (ft.requireDimCount == false) {\n            // Remove last (dimension) ord:\n            ordinals.setLength(ordinals.length() - 1);\n          }\n        }\n\n        // Drill down:\n        for (int i=1;i<=cp.length;i++) {\n          doc.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      doc.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals.get())));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processFacetFields(TaxonomyWriter,Map[String,List[FacetField]],Document).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processFacetFields(TaxonomyWriter,Map[String,List[FacetField]],Document).mjava","sourceNew":"  private void processFacetFields(TaxonomyWriter taxoWriter, Map<String,List<FacetField>> byField, Document doc) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  indexFieldName=\" + indexFieldName + \" fields=\" + ent.getValue());\n\n      IntsRefBuilder ordinals = new IntsRefBuilder();\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = new FacetLabel(facetField.dim, facetField.path);\n\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(cp);\n        ordinals.append(ordinal);\n        //System.out.println(\"ords[\" + (ordinals.length-1) + \"]=\" + ordinal);\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.multiValued && (ft.hierarchical || ft.requireDimCount)) {\n          //System.out.println(\"  add parents\");\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            ordinals.append(parent);\n            parent = taxoWriter.getParent(parent);\n          }\n\n          if (ft.requireDimCount == false) {\n            // Remove last (dimension) ord:\n            ordinals.setLength(ordinals.length() - 1);\n          }\n        }\n\n        // Drill down:\n        int start;\n        if (ft.requireDimensionDrillDown) {\n          start = 1;\n        } else {\n          start = 2;\n        }\n        for (int i=start;i<=cp.length;i++) {\n          doc.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      doc.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals.get())));\n    }\n  }\n\n","sourceOld":"  private void processFacetFields(TaxonomyWriter taxoWriter, Map<String,List<FacetField>> byField, Document doc) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  indexFieldName=\" + indexFieldName + \" fields=\" + ent.getValue());\n\n      IntsRefBuilder ordinals = new IntsRefBuilder();\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = new FacetLabel(facetField.dim, facetField.path);\n\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(cp);\n        ordinals.append(ordinal);\n        //System.out.println(\"ords[\" + (ordinals.length-1) + \"]=\" + ordinal);\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.multiValued && (ft.hierarchical || ft.requireDimCount)) {\n          //System.out.println(\"  add parents\");\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            ordinals.append(parent);\n            parent = taxoWriter.getParent(parent);\n          }\n\n          if (ft.requireDimCount == false) {\n            // Remove last (dimension) ord:\n            ordinals.setLength(ordinals.length() - 1);\n          }\n        }\n\n        // Drill down:\n        for (int i=1;i<=cp.length;i++) {\n          doc.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      doc.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals.get())));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","8be9dc9e17c1046a542423f69130abddef886f16"],"8be9dc9e17c1046a542423f69130abddef886f16":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"755faee94413f220e729a0b60122d6b24f7a2468":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["755faee94413f220e729a0b60122d6b24f7a2468"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be9dc9e17c1046a542423f69130abddef886f16"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","8be9dc9e17c1046a542423f69130abddef886f16"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"8be9dc9e17c1046a542423f69130abddef886f16":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"755faee94413f220e729a0b60122d6b24f7a2468":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["755faee94413f220e729a0b60122d6b24f7a2468"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","8be9dc9e17c1046a542423f69130abddef886f16","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}