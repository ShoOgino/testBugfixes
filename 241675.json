{"path":"src/java/org/apache/lucene/search/Filter#getDocIdSet(IndexReader).mjava","commits":[{"id":"52ce7e961a8217faac8128e3c8fe67819eefdde9","date":1201979043,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Filter#getDocIdSet(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @return a DocIdSet that provides the documents which should be\n   * permitted or prohibited in search results.\n   * @see DocIdBitSet\n   */\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    return new DocIdBitSet(bits(reader));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d6c98c690b593cea727f68742684c979ead1a0a","date":1248688202,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Filter#getDocIdSet(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/Filter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   * \n   * @see DocIdBitSet\n   */\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    return new DocIdBitSet(bits(reader));\n  }\n\n","sourceOld":"  /**\n   * @return a DocIdSet that provides the documents which should be\n   * permitted or prohibited in search results.\n   * @see DocIdBitSet\n   */\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    return new DocIdBitSet(bits(reader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bd365049a486e1ddff4a17c8aaab9b002969a0","date":1254951825,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Filter#getDocIdSet(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/Filter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   * \n   * @see DocIdBitSet\n   */\n  public abstract DocIdSet getDocIdSet(IndexReader reader) throws IOException;\n\n","sourceOld":"  /**\n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   * \n   * @see DocIdBitSet\n   */\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    return new DocIdBitSet(bits(reader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f9c6c7abe2f7f9fdd4c838d1601dcd707946566","date":1259958704,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Filter#getDocIdSet(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/Filter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\n   * Creates a {@link DocIdSet} that provides the documents which should be\n   * permitted or prohibited in search results. <b>NOTE:</b> null can be\n   * returned if no documents will be accepted by this Filter.\n   * <p>\n   * Note: This method might be called more than once during a search if the\n   * index has more than one segment. In such a case the {@link DocIdSet}\n   * must be relative to the document base of the given reader. Yet, the\n   * segment readers are passed in increasing document base order.\n   * \n   * @param reader a {@link IndexReader} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   * \n   * @see DocIdBitSet\n   */\n  public abstract DocIdSet getDocIdSet(IndexReader reader) throws IOException;\n\n","sourceOld":"  /**\n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   * \n   * @see DocIdBitSet\n   */\n  public abstract DocIdSet getDocIdSet(IndexReader reader) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23eb285dc013532f8537832f2e119a0e25c973fe","date":1263500164,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Filter#getDocIdSet(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/Filter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\n   * Creates a {@link DocIdSet} enumerating the documents that should be\n   * permitted in search results. <b>NOTE:</b> null can be\n   * returned if no documents are accepted by this Filter.\n   * <p>\n   * Note: This method will be called once per segment in\n   * the index during searching.  The returned {@link DocIdSet}\n   * must refer to document IDs for that segment, not for\n   * the top-level reader.\n   * \n   * @param reader a {@link IndexReader} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   * \n   * @see DocIdBitSet\n   */\n  public abstract DocIdSet getDocIdSet(IndexReader reader) throws IOException;\n\n","sourceOld":"  /**\n   * Creates a {@link DocIdSet} that provides the documents which should be\n   * permitted or prohibited in search results. <b>NOTE:</b> null can be\n   * returned if no documents will be accepted by this Filter.\n   * <p>\n   * Note: This method might be called more than once during a search if the\n   * index has more than one segment. In such a case the {@link DocIdSet}\n   * must be relative to the document base of the given reader. Yet, the\n   * segment readers are passed in increasing document base order.\n   * \n   * @param reader a {@link IndexReader} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   * \n   * @see DocIdBitSet\n   */\n  public abstract DocIdSet getDocIdSet(IndexReader reader) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Filter#getDocIdSet(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/Filter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\n   * Creates a {@link DocIdSet} enumerating the documents that should be\n   * permitted in search results. <b>NOTE:</b> null can be\n   * returned if no documents are accepted by this Filter.\n   * <p>\n   * Note: This method will be called once per segment in\n   * the index during searching.  The returned {@link DocIdSet}\n   * must refer to document IDs for that segment, not for\n   * the top-level reader.\n   * \n   * @param reader a {@link IndexReader} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   * \n   * @see DocIdBitSet\n   */\n  public abstract DocIdSet getDocIdSet(IndexReader reader) throws IOException;\n\n","sourceOld":"  /**\n   * Creates a {@link DocIdSet} enumerating the documents that should be\n   * permitted in search results. <b>NOTE:</b> null can be\n   * returned if no documents are accepted by this Filter.\n   * <p>\n   * Note: This method will be called once per segment in\n   * the index during searching.  The returned {@link DocIdSet}\n   * must refer to document IDs for that segment, not for\n   * the top-level reader.\n   * \n   * @param reader a {@link IndexReader} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   * \n   * @see DocIdBitSet\n   */\n  public abstract DocIdSet getDocIdSet(IndexReader reader) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2f9c6c7abe2f7f9fdd4c838d1601dcd707946566":["15bd365049a486e1ddff4a17c8aaab9b002969a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8d6c98c690b593cea727f68742684c979ead1a0a":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"23eb285dc013532f8537832f2e119a0e25c973fe":["2f9c6c7abe2f7f9fdd4c838d1601dcd707946566"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["23eb285dc013532f8537832f2e119a0e25c973fe"],"15bd365049a486e1ddff4a17c8aaab9b002969a0":["8d6c98c690b593cea727f68742684c979ead1a0a"]},"commit2Childs":{"2f9c6c7abe2f7f9fdd4c838d1601dcd707946566":["23eb285dc013532f8537832f2e119a0e25c973fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["8d6c98c690b593cea727f68742684c979ead1a0a"],"8d6c98c690b593cea727f68742684c979ead1a0a":["15bd365049a486e1ddff4a17c8aaab9b002969a0"],"23eb285dc013532f8537832f2e119a0e25c973fe":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"15bd365049a486e1ddff4a17c8aaab9b002969a0":["2f9c6c7abe2f7f9fdd4c838d1601dcd707946566"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}