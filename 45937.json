{"path":"buildSrc/src/main/java/org/apache/lucene/gradle/ProfileResults#printReport(List[String],String,int,int,boolean).mjava","commits":[{"id":"b7027be5198d7e85d8d4700d8847815206f87f81","date":1580390950,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"buildSrc/src/main/java/org/apache/lucene/gradle/ProfileResults#printReport(List[String],String,int,int,boolean).mjava","pathOld":"buildSrc/src/main/java/org/apache/lucene/gradle/ProfileResults#printReport(List[String],int,int,boolean).mjava","sourceNew":"  /**\n   * Process all the JFR files passed in args and print a merged summary.\n   */\n  public static void printReport(List<String> files, String mode, int stacksize, int count, boolean lineNumbers) throws IOException {\n    if (!\"cpu\".equals(mode) && !\"heap\".equals(mode)) {\n      throw new IllegalArgumentException(\"tests.profile.mode must be one of (cpu,heap)\");\n    }\n    if (stacksize < 1) {\n      throw new IllegalArgumentException(\"tests.profile.stacksize must be positive\");\n    }\n    if (count < 1) {\n      throw new IllegalArgumentException(\"tests.profile.count must be positive\");\n    }\n    Map<String, SimpleEntry<String, Long>> histogram = new HashMap<>();\n    int totalEvents = 0;\n    long sumValues = 0;\n    String framePadding = \" \".repeat(COLUMN_SIZE * 2);\n    for (String file : files) {\n      try (RecordingFile recording = new RecordingFile(Paths.get(file))) {\n        while (recording.hasMoreEvents()) {\n          RecordedEvent event = recording.readEvent();\n          if (!isInteresting(mode, event)) {\n            continue;\n          }\n          RecordedStackTrace trace = event.getStackTrace();\n          if (trace != null) {\n            StringBuilder stack = new StringBuilder();\n            for (int i = 0; i < Math.min(stacksize, trace.getFrames().size()); i++) {\n              if (stack.length() > 0) {\n                stack.append(\"\\n\")\n                     .append(framePadding)\n                     .append(\"  at \");\n              }\n              stack.append(frameToString(trace.getFrames().get(i), lineNumbers));\n            }\n            String line = stack.toString();\n            SimpleEntry<String,Long> entry = histogram.computeIfAbsent(line, u -> new SimpleEntry<String, Long>(line, 0L));\n            long value = getValue(event);\n            entry.setValue(entry.getValue() + value);\n            totalEvents++;\n            sumValues += value;\n          }\n        }\n      }\n    }\n    // print summary from histogram\n    System.out.printf(Locale.ROOT, \"PROFILE SUMMARY from %d events (total: %s)\\n\", totalEvents, formatValue(sumValues));\n    System.out.printf(Locale.ROOT, \"  tests.profile.mode=%s\\n\", mode);\n    System.out.printf(Locale.ROOT, \"  tests.profile.count=%d\\n\", count);\n    System.out.printf(Locale.ROOT, \"  tests.profile.stacksize=%d\\n\", stacksize);\n    System.out.printf(Locale.ROOT, \"  tests.profile.linenumbers=%b\\n\", lineNumbers);\n    System.out.printf(Locale.ROOT, \"%s%sSTACK\\n\", pad(\"PERCENT\"), pad(mode.toUpperCase(Locale.ROOT) + \" SAMPLES\"));\n    List<SimpleEntry<String, Long>> entries = new ArrayList<>(histogram.values());\n    entries.sort((u, v) -> v.getValue().compareTo(u.getValue()));\n    int seen = 0;\n    for (SimpleEntry<String, Long> c : entries) {\n      if (seen++ == count) {\n        break;\n      }\n      String percent = String.format(\"%2.2f%%\", 100 * (c.getValue() / (float) sumValues));\n      System.out.printf(Locale.ROOT, \"%s%s%s\\n\", pad(percent), pad(formatValue(c.getValue())), c.getKey());\n    }\n  }\n\n","sourceOld":"  /**\n   * Process all the JFR files passed in args and print a merged summary.\n   */\n  public static void printReport(List<String> files, int stacksize, int count, boolean lineNumbers) throws IOException {\n    if (stacksize < 1) {\n      throw new IllegalArgumentException(\"tests.profile.stacksize must be positive\");\n    }\n    if (count < 1) {\n      throw new IllegalArgumentException(\"tests.profile.count must be positive\");\n    }\n    Map<String, SimpleEntry<String, Integer>> histogram = new HashMap<>();\n    int total = 0;\n    for (String file : files) {\n      try (RecordingFile recording = new RecordingFile(Paths.get(file))) {\n        while (recording.hasMoreEvents()) {\n          RecordedEvent event = recording.readEvent();\n          RecordedThread thread = event.getThread(\"sampledThread\");\n          // ignore gradle's epoll loop in the worker thread\n          if (thread != null && thread.getJavaName().startsWith(\"/127.0.0.1\")) {\n            continue;\n          }\n          // process java and native method samples\n          if (event.getEventType().getName().equals(\"jdk.ExecutionSample\") ||\n              event.getEventType().getName().equals(\"jdk.NativeMethodSample\")) {\n            RecordedStackTrace trace = event.getStackTrace();\n            if (trace != null) {\n              StringBuilder stack = new StringBuilder();\n              for (int i = 0; i < Math.min(stacksize, trace.getFrames().size()); i++) {\n                if (stack.length() > 0) {\n                  stack.append(\"\\n\\t\\t\\t  at \");\n                }\n                stack.append(frameToString(trace.getFrames().get(i), lineNumbers));\n              }\n              String line = stack.toString();\n              SimpleEntry<String,Integer> entry = histogram.computeIfAbsent(line, u -> new SimpleEntry<String, Integer>(line, 0));\n              entry.setValue(entry.getValue() + 1);\n              total++;\n            }\n          }\n        }\n      }\n    }\n    // print summary from histogram\n    System.out.printf(Locale.ROOT, \"PROFILE SUMMARY from %d samples\\n\", total);\n    System.out.printf(Locale.ROOT, \"  tests.profile.count=%d\\n\", count);\n    System.out.printf(Locale.ROOT, \"  tests.profile.stacksize=%d\\n\",  stacksize);\n    System.out.printf(Locale.ROOT, \"  tests.profile.linenumbers=%b\\n\",  lineNumbers);\n    System.out.printf(Locale.ROOT, \"PERCENT\\tSAMPLES\\tSTACK\\n\", total);\n    List<SimpleEntry<String, Integer>> entries = new ArrayList<>(histogram.values());\n    entries.sort((u, v) -> v.getValue().compareTo(u.getValue()));\n    int seen = 0;\n    for (SimpleEntry<String, Integer> c : entries) {\n      if (seen++ == count) {\n        break;\n      }\n      System.out.printf(Locale.ROOT, \"%2.2f%%\\t%d\\t%s\\n\", 100 * (float) c.getValue() / total, c.getValue(), c.getKey());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7027be5198d7e85d8d4700d8847815206f87f81":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b7027be5198d7e85d8d4700d8847815206f87f81"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7027be5198d7e85d8d4700d8847815206f87f81"],"b7027be5198d7e85d8d4700d8847815206f87f81":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}