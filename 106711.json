{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addZkWatch(String).mjava","commits":[{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addZkWatch(String).mjava","pathOld":"/dev/null","sourceNew":"  private void addZkWatch(final String coll) throws KeeperException, InterruptedException {\n    log.info(\"addZkWatch {}\", coll);\n    final String fullpath = getCollectionPath(coll);\n    synchronized (getUpdateLock()){\n\n      cmdExecutor.ensureExists(fullpath, zkClient);\n      log.info(\"Updating collection state at {} from ZooKeeper... \",fullpath);\n\n      Watcher watcher = new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n          // session events are not change events,\n          // and do not remove the watcher\n          if (EventType.None.equals(event.getType())) {\n            return;\n          }\n          log.info(\"A cluster state change: {}, has occurred - updating... \", (event), ZkStateReader.this.clusterState == null ? 0 : ZkStateReader.this.clusterState.getLiveNodes().size());\n          try {\n\n            // delayed approach\n            // ZkStateReader.this.updateClusterState(false, false);\n            synchronized (ZkStateReader.this.getUpdateLock()) {\n              if(!watchedCollections.contains(coll)) {\n                log.info(\"Unwatched collection {}\",coll);\n                return;\n              }\n              // remake watch\n              final Watcher thisWatch = this;\n              Stat stat = new Stat();\n              byte[] data = zkClient.getData(fullpath, thisWatch, stat, true);\n              if(data == null || data.length ==0){\n                log.warn(\"No value set for collection state : {}\", coll);\n                return;\n\n              }\n              ClusterState clusterState = ClusterState.load(stat.getVersion(), data, Collections.<String>emptySet(),ZkStateReader.this);\n              // update volatile\n\n              externalWatchedCollections.put(coll,clusterState.getCommonCollection(coll));\n              log.info(\"Updating data for {} \", coll);\n\n            }\n          } catch (KeeperException e) {\n            if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"Unwatched collection :\"+coll , e);\n            throw new ZooKeeperException(ErrorCode.SERVER_ERROR,\n                \"\", e);\n\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"Unwatched collection :\"+coll , e);\n            return;\n          }\n        }\n\n      };\n      zkClient.exists(fullpath, watcher, true);\n    }\n\n    externalWatchedCollections.put(coll, getExternCollectionFresh(this, coll));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addZkWatch(String).mjava","sourceNew":null,"sourceOld":"  private void addZkWatch(final String coll) throws KeeperException, InterruptedException {\n    log.info(\"addZkWatch {}\", coll);\n    final String fullpath = getCollectionPath(coll);\n    synchronized (getUpdateLock()){\n\n      cmdExecutor.ensureExists(fullpath, zkClient);\n      log.info(\"Updating collection state at {} from ZooKeeper... \",fullpath);\n\n      Watcher watcher = new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n          // session events are not change events,\n          // and do not remove the watcher\n          if (EventType.None.equals(event.getType())) {\n            return;\n          }\n          log.info(\"A cluster state change: {}, has occurred - updating... \", (event), ZkStateReader.this.clusterState == null ? 0 : ZkStateReader.this.clusterState.getLiveNodes().size());\n          try {\n\n            // delayed approach\n            // ZkStateReader.this.updateClusterState(false, false);\n            synchronized (ZkStateReader.this.getUpdateLock()) {\n              if(!watchedCollections.contains(coll)) {\n                log.info(\"Unwatched collection {}\",coll);\n                return;\n              }\n              // remake watch\n              final Watcher thisWatch = this;\n              Stat stat = new Stat();\n              byte[] data = zkClient.getData(fullpath, thisWatch, stat, true);\n              if(data == null || data.length ==0){\n                log.warn(\"No value set for collection state : {}\", coll);\n                return;\n\n              }\n              ClusterState clusterState = ClusterState.load(stat.getVersion(), data, Collections.<String>emptySet(),ZkStateReader.this);\n              // update volatile\n\n              externalWatchedCollections.put(coll,clusterState.getCommonCollection(coll));\n              log.info(\"Updating data for {} \", coll);\n\n            }\n          } catch (KeeperException e) {\n            if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"Unwatched collection :\"+coll , e);\n            throw new ZooKeeperException(ErrorCode.SERVER_ERROR,\n                \"\", e);\n\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"Unwatched collection :\"+coll , e);\n            return;\n          }\n        }\n\n      };\n      zkClient.exists(fullpath, watcher, true);\n    }\n\n    externalWatchedCollections.put(coll, getExternCollectionFresh(this, coll));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addZkWatch(String).mjava","pathOld":"/dev/null","sourceNew":"  private void addZkWatch(final String coll) throws KeeperException, InterruptedException {\n    log.info(\"addZkWatch {}\", coll);\n    final String fullpath = getCollectionPath(coll);\n    synchronized (getUpdateLock()){\n\n      cmdExecutor.ensureExists(fullpath, zkClient);\n      log.info(\"Updating collection state at {} from ZooKeeper... \",fullpath);\n\n      Watcher watcher = new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n          // session events are not change events,\n          // and do not remove the watcher\n          if (EventType.None.equals(event.getType())) {\n            return;\n          }\n          log.info(\"A cluster state change: {}, has occurred - updating... \", (event), ZkStateReader.this.clusterState == null ? 0 : ZkStateReader.this.clusterState.getLiveNodes().size());\n          try {\n\n            // delayed approach\n            // ZkStateReader.this.updateClusterState(false, false);\n            synchronized (ZkStateReader.this.getUpdateLock()) {\n              if(!watchedCollections.contains(coll)) {\n                log.info(\"Unwatched collection {}\",coll);\n                return;\n              }\n              // remake watch\n              final Watcher thisWatch = this;\n              Stat stat = new Stat();\n              byte[] data = zkClient.getData(fullpath, thisWatch, stat, true);\n\n              if(data == null || data.length ==0){\n                log.warn(\"No value set for collection state : {}\", coll);\n                return;\n\n              }\n              ClusterState clusterState = ClusterState.load(stat.getVersion(), data, Collections.<String>emptySet(),ZkStateReader.this,fullpath);\n              // update volatile\n\n              DocCollection newState = clusterState.getCollectionStates().get(coll);\n              watchedCollectionStates.put(coll, newState);\n              log.info(\"Updating data for {} to ver {} \", coll , newState.getZNodeVersion());\n\n            }\n          } catch (KeeperException e) {\n            if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"Unwatched collection :\"+coll , e);\n            throw new ZooKeeperException(ErrorCode.SERVER_ERROR,\n                \"\", e);\n\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.error(\"Unwatched collection :\"+coll , e);\n            return;\n          }\n        }\n\n      };\n      zkClient.exists(fullpath, watcher, true);\n    }\n\n    watchedCollectionStates.put(coll, getCollectionLive(this, coll));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addZkWatch(String).mjava","sourceNew":null,"sourceOld":"  private void addZkWatch(final String coll) throws KeeperException, InterruptedException {\n    log.info(\"addZkWatch {}\", coll);\n    final String fullpath = getCollectionPath(coll);\n    synchronized (getUpdateLock()){\n\n      cmdExecutor.ensureExists(fullpath, zkClient);\n      log.info(\"Updating collection state at {} from ZooKeeper... \",fullpath);\n\n      Watcher watcher = new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n          // session events are not change events,\n          // and do not remove the watcher\n          if (EventType.None.equals(event.getType())) {\n            return;\n          }\n          log.info(\"A cluster state change: {}, has occurred - updating... \", (event), ZkStateReader.this.clusterState == null ? 0 : ZkStateReader.this.clusterState.getLiveNodes().size());\n          try {\n\n            // delayed approach\n            // ZkStateReader.this.updateClusterState(false, false);\n            synchronized (ZkStateReader.this.getUpdateLock()) {\n              if(!watchedCollections.contains(coll)) {\n                log.info(\"Unwatched collection {}\",coll);\n                return;\n              }\n              // remake watch\n              final Watcher thisWatch = this;\n              Stat stat = new Stat();\n              byte[] data = zkClient.getData(fullpath, thisWatch, stat, true);\n\n              if(data == null || data.length ==0){\n                log.warn(\"No value set for collection state : {}\", coll);\n                return;\n\n              }\n              ClusterState clusterState = ClusterState.load(stat.getVersion(), data, Collections.<String>emptySet(),ZkStateReader.this,fullpath);\n              // update volatile\n\n              DocCollection newState = clusterState.getCollectionStates().get(coll);\n              watchedCollectionStates.put(coll, newState);\n              log.info(\"Updating data for {} to ver {} \", coll , newState.getZNodeVersion());\n\n            }\n          } catch (KeeperException e) {\n            if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"Unwatched collection :\"+coll , e);\n            throw new ZooKeeperException(ErrorCode.SERVER_ERROR,\n                \"\", e);\n\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.error(\"Unwatched collection :\"+coll , e);\n            return;\n          }\n        }\n\n      };\n      zkClient.exists(fullpath, watcher, true);\n    }\n\n    watchedCollectionStates.put(coll, getCollectionLive(this, coll));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addZkWatch(String).mjava","pathOld":"/dev/null","sourceNew":"  private void addZkWatch(final String coll) throws KeeperException,\n      InterruptedException {\n    log.info(\"addZkWatch {}\", coll);\n    final String fullpath = getCollectionPath(coll);\n    synchronized (getUpdateLock()) {\n      \n      cmdExecutor.ensureExists(fullpath, zkClient);\n      log.info(\"Updating collection state at {} from ZooKeeper... \", fullpath);\n      \n      Watcher watcher = new Watcher() {\n        \n        @Override\n        public void process(WatchedEvent event) {\n          // session events are not change events,\n          // and do not remove the watcher\n          if (EventType.None.equals(event.getType())) {\n            return;\n          }\n          log.info(\"A cluster state change: {}, has occurred - updating... \",\n              (event), ZkStateReader.this.clusterState == null ? 0\n                  : ZkStateReader.this.clusterState.getLiveNodes().size());\n          try {\n            \n            // delayed approach\n            // ZkStateReader.this.updateClusterState(false, false);\n            synchronized (ZkStateReader.this.getUpdateLock()) {\n              if (!watchedCollections.contains(coll)) {\n                log.info(\"Unwatched collection {}\", coll);\n                return;\n              }\n              // remake watch\n              final Watcher thisWatch = this;\n              Stat stat = new Stat();\n              byte[] data = zkClient.getData(fullpath, thisWatch, stat, true);\n              \n              if (data == null || data.length == 0) {\n                log.warn(\"No value set for collection state : {}\", coll);\n                return;\n                \n              }\n              ClusterState clusterState = ClusterState.load(stat.getVersion(),\n                  data, Collections.<String> emptySet(), fullpath);\n              // update volatile\n              \n              DocCollection newState = clusterState.getCollectionStates()\n                  .get(coll).get();\n              updateWatchedCollection(newState);\n              \n            }\n          } catch (KeeperException e) {\n            if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"Unwatched collection :\" + coll, e);\n            throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            \n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.error(\"Unwatched collection :\" + coll, e);\n            return;\n          }\n        }\n        \n      };\n      zkClient.exists(fullpath, watcher, true);\n    }\n    updateWatchedCollection(getCollectionLive(this, coll));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"624a78aada85c97f657fe582ce06976b10067343","date":1420577629,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addZkWatch(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addZkWatch(String).mjava","sourceNew":"  private void addZkWatch(final String coll) throws KeeperException,\n      InterruptedException {\n    log.info(\"addZkWatch {}\", coll);\n    final String fullpath = getCollectionPath(coll);\n    synchronized (getUpdateLock()) {\n      \n      cmdExecutor.ensureExists(fullpath, zkClient);\n      log.info(\"Updating collection state at {} from ZooKeeper... \", fullpath);\n      \n      Watcher watcher = new Watcher() {\n        \n        @Override\n        public void process(WatchedEvent event) {\n          // session events are not change events,\n          // and do not remove the watcher\n          if (EventType.None.equals(event.getType())) {\n            return;\n          }\n          log.info(\"A cluster state change: {}, has occurred - updating... \",\n              (event), ZkStateReader.this.clusterState == null ? 0\n                  : ZkStateReader.this.clusterState.getLiveNodes().size());\n          try {\n            \n            // delayed approach\n            // ZkStateReader.this.updateClusterState(false, false);\n            synchronized (ZkStateReader.this.getUpdateLock()) {\n              if (!watchedCollections.contains(coll)) {\n                log.info(\"Unwatched collection {}\", coll);\n                return;\n              }\n              // remake watch\n              final Watcher thisWatch = this;\n              Stat stat = new Stat();\n              byte[] data = zkClient.getData(fullpath, thisWatch, stat, true);\n              \n              if (data == null || data.length == 0) {\n                log.warn(\"No value set for collection state : {}\", coll);\n                return;\n                \n              }\n              ClusterState clusterState = ClusterState.load(stat.getVersion(),\n                  data, Collections.<String> emptySet(), fullpath);\n              // update volatile\n              \n              DocCollection newState = clusterState.getCollectionStates()\n                  .get(coll).get();\n              updateWatchedCollection(newState);\n              \n            }\n          } catch (KeeperException e) {\n            if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"Unwatched collection :\" + coll, e);\n            throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            \n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.error(\"Unwatched collection :\" + coll, e);\n            return;\n          }\n        }\n        \n      };\n      zkClient.exists(fullpath, watcher, true);\n    }\n    DocCollection collection = getCollectionLive(this, coll);\n    if (collection != null) {\n      updateWatchedCollection(collection);\n    }\n  }\n\n","sourceOld":"  private void addZkWatch(final String coll) throws KeeperException,\n      InterruptedException {\n    log.info(\"addZkWatch {}\", coll);\n    final String fullpath = getCollectionPath(coll);\n    synchronized (getUpdateLock()) {\n      \n      cmdExecutor.ensureExists(fullpath, zkClient);\n      log.info(\"Updating collection state at {} from ZooKeeper... \", fullpath);\n      \n      Watcher watcher = new Watcher() {\n        \n        @Override\n        public void process(WatchedEvent event) {\n          // session events are not change events,\n          // and do not remove the watcher\n          if (EventType.None.equals(event.getType())) {\n            return;\n          }\n          log.info(\"A cluster state change: {}, has occurred - updating... \",\n              (event), ZkStateReader.this.clusterState == null ? 0\n                  : ZkStateReader.this.clusterState.getLiveNodes().size());\n          try {\n            \n            // delayed approach\n            // ZkStateReader.this.updateClusterState(false, false);\n            synchronized (ZkStateReader.this.getUpdateLock()) {\n              if (!watchedCollections.contains(coll)) {\n                log.info(\"Unwatched collection {}\", coll);\n                return;\n              }\n              // remake watch\n              final Watcher thisWatch = this;\n              Stat stat = new Stat();\n              byte[] data = zkClient.getData(fullpath, thisWatch, stat, true);\n              \n              if (data == null || data.length == 0) {\n                log.warn(\"No value set for collection state : {}\", coll);\n                return;\n                \n              }\n              ClusterState clusterState = ClusterState.load(stat.getVersion(),\n                  data, Collections.<String> emptySet(), fullpath);\n              // update volatile\n              \n              DocCollection newState = clusterState.getCollectionStates()\n                  .get(coll).get();\n              updateWatchedCollection(newState);\n              \n            }\n          } catch (KeeperException e) {\n            if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"Unwatched collection :\" + coll, e);\n            throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            \n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.error(\"Unwatched collection :\" + coll, e);\n            return;\n          }\n        }\n        \n      };\n      zkClient.exists(fullpath, watcher, true);\n    }\n    updateWatchedCollection(getCollectionLive(this, coll));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"063b5f37ebe10b217037fc309b44a79b80b29b57","date":1424091264,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addZkWatch(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addZkWatch(String).mjava","sourceNew":"  private void addZkWatch(final String coll) throws KeeperException,\n      InterruptedException {\n    log.info(\"addZkWatch {}\", coll);\n    final String fullpath = getCollectionPath(coll);\n    synchronized (getUpdateLock()) {\n      \n      cmdExecutor.ensureExists(fullpath, zkClient);\n      log.info(\"Updating collection state at {} from ZooKeeper... \", fullpath);\n      \n      Watcher watcher = new Watcher() {\n        \n        @Override\n        public void process(WatchedEvent event) {\n          // session events are not change events,\n          // and do not remove the watcher\n          if (EventType.None.equals(event.getType())) {\n            return;\n          }\n          log.info(\"A cluster state change: {} for collection {} has occurred - updating... (live nodes size: {})\",\n              (event), coll, ZkStateReader.this.clusterState == null ? 0\n                  : ZkStateReader.this.clusterState.getLiveNodes().size());\n          try {\n            \n            // delayed approach\n            // ZkStateReader.this.updateClusterState(false, false);\n            synchronized (ZkStateReader.this.getUpdateLock()) {\n              if (!watchedCollections.contains(coll)) {\n                log.info(\"Unwatched collection {}\", coll);\n                return;\n              }\n              // remake watch\n              final Watcher thisWatch = this;\n              Stat stat = new Stat();\n              byte[] data = zkClient.getData(fullpath, thisWatch, stat, true);\n              \n              if (data == null || data.length == 0) {\n                log.warn(\"No value set for collection state : {}\", coll);\n                return;\n                \n              }\n              ClusterState clusterState = ClusterState.load(stat.getVersion(),\n                  data, Collections.<String> emptySet(), fullpath);\n              // update volatile\n              \n              DocCollection newState = clusterState.getCollectionStates()\n                  .get(coll).get();\n              updateWatchedCollection(newState);\n              \n            }\n          } catch (KeeperException e) {\n            if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"Unwatched collection :\" + coll, e);\n            throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            \n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.error(\"Unwatched collection :\" + coll, e);\n            return;\n          }\n        }\n        \n      };\n      zkClient.exists(fullpath, watcher, true);\n    }\n    DocCollection collection = getCollectionLive(this, coll);\n    if (collection != null) {\n      updateWatchedCollection(collection);\n    }\n  }\n\n","sourceOld":"  private void addZkWatch(final String coll) throws KeeperException,\n      InterruptedException {\n    log.info(\"addZkWatch {}\", coll);\n    final String fullpath = getCollectionPath(coll);\n    synchronized (getUpdateLock()) {\n      \n      cmdExecutor.ensureExists(fullpath, zkClient);\n      log.info(\"Updating collection state at {} from ZooKeeper... \", fullpath);\n      \n      Watcher watcher = new Watcher() {\n        \n        @Override\n        public void process(WatchedEvent event) {\n          // session events are not change events,\n          // and do not remove the watcher\n          if (EventType.None.equals(event.getType())) {\n            return;\n          }\n          log.info(\"A cluster state change: {}, has occurred - updating... \",\n              (event), ZkStateReader.this.clusterState == null ? 0\n                  : ZkStateReader.this.clusterState.getLiveNodes().size());\n          try {\n            \n            // delayed approach\n            // ZkStateReader.this.updateClusterState(false, false);\n            synchronized (ZkStateReader.this.getUpdateLock()) {\n              if (!watchedCollections.contains(coll)) {\n                log.info(\"Unwatched collection {}\", coll);\n                return;\n              }\n              // remake watch\n              final Watcher thisWatch = this;\n              Stat stat = new Stat();\n              byte[] data = zkClient.getData(fullpath, thisWatch, stat, true);\n              \n              if (data == null || data.length == 0) {\n                log.warn(\"No value set for collection state : {}\", coll);\n                return;\n                \n              }\n              ClusterState clusterState = ClusterState.load(stat.getVersion(),\n                  data, Collections.<String> emptySet(), fullpath);\n              // update volatile\n              \n              DocCollection newState = clusterState.getCollectionStates()\n                  .get(coll).get();\n              updateWatchedCollection(newState);\n              \n            }\n          } catch (KeeperException e) {\n            if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"Unwatched collection :\" + coll, e);\n            throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            \n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.error(\"Unwatched collection :\" + coll, e);\n            return;\n          }\n        }\n        \n      };\n      zkClient.exists(fullpath, watcher, true);\n    }\n    DocCollection collection = getCollectionLive(this, coll);\n    if (collection != null) {\n      updateWatchedCollection(collection);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addZkWatch(String).mjava","sourceNew":null,"sourceOld":"  private void addZkWatch(final String coll) throws KeeperException,\n      InterruptedException {\n    log.info(\"addZkWatch {}\", coll);\n    final String fullpath = getCollectionPath(coll);\n    synchronized (getUpdateLock()) {\n      \n      cmdExecutor.ensureExists(fullpath, zkClient);\n      log.info(\"Updating collection state at {} from ZooKeeper... \", fullpath);\n      \n      Watcher watcher = new Watcher() {\n        \n        @Override\n        public void process(WatchedEvent event) {\n          // session events are not change events,\n          // and do not remove the watcher\n          if (EventType.None.equals(event.getType())) {\n            return;\n          }\n          log.info(\"A cluster state change: {} for collection {} has occurred - updating... (live nodes size: {})\",\n              (event), coll, ZkStateReader.this.clusterState == null ? 0\n                  : ZkStateReader.this.clusterState.getLiveNodes().size());\n          try {\n            \n            // delayed approach\n            // ZkStateReader.this.updateClusterState(false, false);\n            synchronized (ZkStateReader.this.getUpdateLock()) {\n              if (!watchedCollections.contains(coll)) {\n                log.info(\"Unwatched collection {}\", coll);\n                return;\n              }\n              // remake watch\n              final Watcher thisWatch = this;\n              Stat stat = new Stat();\n              byte[] data = zkClient.getData(fullpath, thisWatch, stat, true);\n              \n              if (data == null || data.length == 0) {\n                log.warn(\"No value set for collection state : {}\", coll);\n                return;\n                \n              }\n              ClusterState clusterState = ClusterState.load(stat.getVersion(),\n                  data, Collections.<String> emptySet(), fullpath);\n              // update volatile\n              \n              DocCollection newState = clusterState.getCollectionStates()\n                  .get(coll).get();\n              updateWatchedCollection(newState);\n              \n            }\n          } catch (KeeperException e) {\n            if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"Unwatched collection :\" + coll, e);\n            throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            \n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.error(\"Unwatched collection :\" + coll, e);\n            return;\n          }\n        }\n        \n      };\n      zkClient.exists(fullpath, watcher, true);\n    }\n    DocCollection collection = getCollectionLive(this, coll);\n    if (collection != null) {\n      updateWatchedCollection(collection);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"063b5f37ebe10b217037fc309b44a79b80b29b57":["624a78aada85c97f657fe582ce06976b10067343"],"624a78aada85c97f657fe582ce06976b10067343":["9279b175e5e66258442d2123a50f052219a9cc1b"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["063b5f37ebe10b217037fc309b44a79b80b29b57"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"]},"commit2Childs":{"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"063b5f37ebe10b217037fc309b44a79b80b29b57":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"624a78aada85c97f657fe582ce06976b10067343":["063b5f37ebe10b217037fc309b44a79b80b29b57"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"9279b175e5e66258442d2123a50f052219a9cc1b":["624a78aada85c97f657fe582ce06976b10067343"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}