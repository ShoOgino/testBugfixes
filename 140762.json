{"path":"backwards/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"/dev/null","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    MockRAMDirectory rd = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(rd, new KeywordAnalyzer(), MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(new Field(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    w.close();\n\n    IndexReader reader = IndexReader.open(rd, true);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List terms = new ArrayList();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    MockRAMDirectory rd = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(rd, new KeywordAnalyzer(), MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(new Field(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    w.close();\n\n    IndexReader reader = IndexReader.open(rd, true);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List terms = new ArrayList();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    MockRAMDirectory rd = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(rd, new KeywordAnalyzer(), MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(new Field(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    w.close();\n\n    IndexReader reader = IndexReader.open(rd, true);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List terms = new ArrayList();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}