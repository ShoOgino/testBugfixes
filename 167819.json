{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","sourceNew":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","sourceOld":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","sourceNew":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","sourceOld":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","sourceNew":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","sourceOld":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","sourceNew":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null, false);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","sourceOld":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","sourceNew":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null, false);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","sourceOld":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","sourceNew":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null, false);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","sourceOld":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c8719b2c0b382be11f5b193b6fc14bc310e906b","date":1344770591,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","sourceNew":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null, false);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor(\n        new DefaultSolrThreadFactory(\"snapPuller\"));\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","sourceOld":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null, false);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","sourceNew":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null, false);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor(\n        new DefaultSolrThreadFactory(\"snapPuller\"));\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","sourceOld":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null, false);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","sourceNew":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null, false);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor(\n        new DefaultSolrThreadFactory(\"snapPuller\"));\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","sourceOld":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null, false);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","sourceNew":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      @Override\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null, false);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor(\n        new DefaultSolrThreadFactory(\"snapPuller\"));\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","sourceOld":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null, false);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor(\n        new DefaultSolrThreadFactory(\"snapPuller\"));\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","sourceNew":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      @Override\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null, false);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor(\n        new DefaultSolrThreadFactory(\"snapPuller\"));\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","sourceOld":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null, false);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor(\n        new DefaultSolrThreadFactory(\"snapPuller\"));\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25bbd8e76cd29f2d4b262a24d6a42c754706b143","date":1365910543,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","sourceNew":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      @Override\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          LOG.debug(\"Polling for index modifications\");\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null, false);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor(\n        new DefaultSolrThreadFactory(\"snapPuller\"));\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","sourceOld":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      @Override\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null, false);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor(\n        new DefaultSolrThreadFactory(\"snapPuller\"));\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":5,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#setupPolling(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","sourceNew":"  private void setupPolling(String intervalStr) {\n    pollIntervalStr = intervalStr;\n    pollInterval = readInterval(pollIntervalStr);\n    if (pollInterval == null || pollInterval <= 0) {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n      return;\n    }\n\n    Runnable task = new Runnable() {\n      @Override\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          LOG.debug(\"Polling for index modifications\");\n          executorStartTime = System.currentTimeMillis();\n          doFetch(null, false);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor(\n        new DefaultSolrThreadFactory(\"indexFetcher\"));\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","sourceOld":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      @Override\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          LOG.debug(\"Polling for index modifications\");\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null, false);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor(\n        new DefaultSolrThreadFactory(\"snapPuller\"));\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","sourceNew":null,"sourceOld":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      @Override\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          LOG.debug(\"Polling for index modifications\");\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null, false);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor(\n        new DefaultSolrThreadFactory(\"snapPuller\"));\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["1c8719b2c0b382be11f5b193b6fc14bc310e906b","7530de27b87b961b51f01bd1299b7004d46e8823"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["25bbd8e76cd29f2d4b262a24d6a42c754706b143","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["25bbd8e76cd29f2d4b262a24d6a42c754706b143"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"25bbd8e76cd29f2d4b262a24d6a42c754706b143":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"1c8719b2c0b382be11f5b193b6fc14bc310e906b":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c26f00b574427b55127e869b935845554afde1fa":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"25bbd8e76cd29f2d4b262a24d6a42c754706b143":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","25bbd8e76cd29f2d4b262a24d6a42c754706b143"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"1c8719b2c0b382be11f5b193b6fc14bc310e906b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7869f64c874ebf7f317d22c00baf2b6857797a6","7530de27b87b961b51f01bd1299b7004d46e8823","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d22ac6a4146774c1bc8400160fc0b6150294e92","c7869f64c874ebf7f317d22c00baf2b6857797a6","a258fbb26824fd104ed795e5d9033d2d040049ee","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}