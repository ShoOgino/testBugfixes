{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointFormat#TestLucene60PointFormat().mjava","commits":[{"id":"25b2820b242e28867a2f4edae536382216c511dc","date":1454059647,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointFormat#TestLucene60PointFormat().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#getCodec().mjava","sourceNew":"  public TestLucene60PointFormat() {\n    // standard issue\n    Codec defaultCodec = TestUtil.getDefaultCodec();\n    if (random().nextBoolean()) {\n      // randomize parameters\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 500);\n      double maxMBSortInHeap = 0.1 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60PointFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      // sneaky impersonation!\n      codec = new FilterCodec(defaultCodec.getName(), defaultCodec) {\n        @Override\n        public PointFormat pointFormat() {\n          return new PointFormat() {\n            @Override\n            public PointWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60PointWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public PointReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60PointReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      // standard issue\n      codec = defaultCodec;\n    }\n  }\n\n","sourceOld":"  private Codec getCodec() {\n    if (Codec.getDefault().getName().equals(\"Lucene60\")) {\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 500);\n      double maxMBSortInHeap = 0.1 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60PointFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      return new FilterCodec(\"Lucene60\", Codec.getDefault()) {\n        @Override\n        public PointFormat pointFormat() {\n          return new PointFormat() {\n            @Override\n            public PointWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60PointWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public PointReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60PointReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      return Codec.getDefault();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54cd7e42dba215ae45fc29134582ae1890bded87","date":1454061752,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointFormat#TestLucene60PointFormat().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointFormat#TestLucene60PointFormat().mjava","sourceNew":"  public TestLucene60PointFormat() {\n    // standard issue\n    Codec defaultCodec = TestUtil.getDefaultCodec();\n    if (random().nextBoolean()) {\n      // randomize parameters\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 500);\n      double maxMBSortInHeap = 3.0 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60PointFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      // sneaky impersonation!\n      codec = new FilterCodec(defaultCodec.getName(), defaultCodec) {\n        @Override\n        public PointFormat pointFormat() {\n          return new PointFormat() {\n            @Override\n            public PointWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60PointWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public PointReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60PointReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      // standard issue\n      codec = defaultCodec;\n    }\n  }\n\n","sourceOld":"  public TestLucene60PointFormat() {\n    // standard issue\n    Codec defaultCodec = TestUtil.getDefaultCodec();\n    if (random().nextBoolean()) {\n      // randomize parameters\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 500);\n      double maxMBSortInHeap = 0.1 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60PointFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      // sneaky impersonation!\n      codec = new FilterCodec(defaultCodec.getName(), defaultCodec) {\n        @Override\n        public PointFormat pointFormat() {\n          return new PointFormat() {\n            @Override\n            public PointWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60PointWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public PointReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60PointReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      // standard issue\n      codec = defaultCodec;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointFormat#TestLucene60PointFormat().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#getCodec().mjava","sourceNew":"  public TestLucene60PointFormat() {\n    // standard issue\n    Codec defaultCodec = TestUtil.getDefaultCodec();\n    if (random().nextBoolean()) {\n      // randomize parameters\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 500);\n      double maxMBSortInHeap = 3.0 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60PointFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      // sneaky impersonation!\n      codec = new FilterCodec(defaultCodec.getName(), defaultCodec) {\n        @Override\n        public PointFormat pointFormat() {\n          return new PointFormat() {\n            @Override\n            public PointWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60PointWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public PointReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60PointReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      // standard issue\n      codec = defaultCodec;\n    }\n  }\n\n","sourceOld":"  private Codec getCodec() {\n    if (Codec.getDefault().getName().equals(\"Lucene60\")) {\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 500);\n      double maxMBSortInHeap = 0.1 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60PointFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      return new FilterCodec(\"Lucene60\", Codec.getDefault()) {\n        @Override\n        public PointFormat pointFormat() {\n          return new PointFormat() {\n            @Override\n            public PointWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60PointWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public PointReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60PointReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      return Codec.getDefault();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointFormat#TestLucene60PointFormat().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#getCodec().mjava","sourceNew":"  public TestLucene60PointFormat() {\n    // standard issue\n    Codec defaultCodec = TestUtil.getDefaultCodec();\n    if (random().nextBoolean()) {\n      // randomize parameters\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 500);\n      double maxMBSortInHeap = 3.0 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60PointFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      // sneaky impersonation!\n      codec = new FilterCodec(defaultCodec.getName(), defaultCodec) {\n        @Override\n        public PointFormat pointFormat() {\n          return new PointFormat() {\n            @Override\n            public PointWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60PointWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public PointReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60PointReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      // standard issue\n      codec = defaultCodec;\n    }\n  }\n\n","sourceOld":"  private Codec getCodec() {\n    if (Codec.getDefault().getName().equals(\"Lucene60\")) {\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 500);\n      double maxMBSortInHeap = 0.1 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60PointFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      return new FilterCodec(\"Lucene60\", Codec.getDefault()) {\n        @Override\n        public PointFormat pointFormat() {\n          return new PointFormat() {\n            @Override\n            public PointWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60PointWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public PointReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60PointReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      return Codec.getDefault();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4522ffca5a1f420c6a02198c9332d7c596a30ca5","date":1457270822,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointsFormat#TestLucene60PointsFormat().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointFormat#TestLucene60PointFormat().mjava","sourceNew":"  public TestLucene60PointsFormat() {\n    // standard issue\n    Codec defaultCodec = TestUtil.getDefaultCodec();\n    if (random().nextBoolean()) {\n      // randomize parameters\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 500);\n      double maxMBSortInHeap = 3.0 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60PointsFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      // sneaky impersonation!\n      codec = new FilterCodec(defaultCodec.getName(), defaultCodec) {\n        @Override\n        public PointsFormat pointsFormat() {\n          return new PointsFormat() {\n            @Override\n            public PointsWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60PointsWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public PointsReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60PointsReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      // standard issue\n      codec = defaultCodec;\n    }\n  }\n\n","sourceOld":"  public TestLucene60PointFormat() {\n    // standard issue\n    Codec defaultCodec = TestUtil.getDefaultCodec();\n    if (random().nextBoolean()) {\n      // randomize parameters\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 500);\n      double maxMBSortInHeap = 3.0 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60PointFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      // sneaky impersonation!\n      codec = new FilterCodec(defaultCodec.getName(), defaultCodec) {\n        @Override\n        public PointFormat pointFormat() {\n          return new PointFormat() {\n            @Override\n            public PointWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60PointWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public PointReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60PointReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      // standard issue\n      codec = defaultCodec;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"25b2820b242e28867a2f4edae536382216c511dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d15e34266d75e4e8b95da046cd0afc812367b38"],"54cd7e42dba215ae45fc29134582ae1890bded87":["25b2820b242e28867a2f4edae536382216c511dc"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","54cd7e42dba215ae45fc29134582ae1890bded87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"]},"commit2Childs":{"25b2820b242e28867a2f4edae536382216c511dc":["54cd7e42dba215ae45fc29134582ae1890bded87"],"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25b2820b242e28867a2f4edae536382216c511dc","1e6acbaae7af722f17204ceccf0f7db5753eccf3","8d15e34266d75e4e8b95da046cd0afc812367b38"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"54cd7e42dba215ae45fc29134582ae1890bded87":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["4522ffca5a1f420c6a02198c9332d7c596a30ca5","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}