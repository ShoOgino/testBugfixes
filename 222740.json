{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#getReporters(String).mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#getReporters(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get a map of reporters for a registry. Keys are reporter names, values are reporter instances.\n   * @param registry registry name\n   * @return map of reporters and their names, may be empty but never null\n   */\n  public Map<String, SolrMetricReporter> getReporters(String registry) {\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        log.warn(\"Could not obtain lock to modify reporters registry: \" + registry);\n        return Collections.emptyMap();\n      }\n    } catch (InterruptedException e) {\n      log.warn(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n      return Collections.emptyMap();\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        return Collections.emptyMap();\n      } else {\n        // defensive copy - the original map may change after we release the lock\n        return Collections.unmodifiableMap(new HashMap<>(perRegistry));\n      }\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#getReporters(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get a map of reporters for a registry. Keys are reporter names, values are reporter instances.\n   * @param registry registry name\n   * @return map of reporters and their names, may be empty but never null\n   */\n  public Map<String, SolrMetricReporter> getReporters(String registry) {\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        log.warn(\"Could not obtain lock to modify reporters registry: \" + registry);\n        return Collections.emptyMap();\n      }\n    } catch (InterruptedException e) {\n      log.warn(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n      return Collections.emptyMap();\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        return Collections.emptyMap();\n      } else {\n        // defensive copy - the original map may change after we release the lock\n        return Collections.unmodifiableMap(new HashMap<>(perRegistry));\n      }\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c","date":1538077195,"type":3,"author":"Peter Somogyi","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#getReporters(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#getReporters(String).mjava","sourceNew":"  /**\n   * Get a map of reporters for a registry. Keys are reporter names, values are reporter instances.\n   * @param registry registry name\n   * @return map of reporters and their names, may be empty but never null\n   */\n  public Map<String, SolrMetricReporter> getReporters(String registry) {\n    // make sure we use a name with prefix\n    registry = enforcePrefix(registry);\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        log.warn(\"Could not obtain lock to modify reporters registry: \" + registry);\n        return Collections.emptyMap();\n      }\n    } catch (InterruptedException e) {\n      log.warn(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n      return Collections.emptyMap();\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        return Collections.emptyMap();\n      } else {\n        // defensive copy - the original map may change after we release the lock\n        return Collections.unmodifiableMap(new HashMap<>(perRegistry));\n      }\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Get a map of reporters for a registry. Keys are reporter names, values are reporter instances.\n   * @param registry registry name\n   * @return map of reporters and their names, may be empty but never null\n   */\n  public Map<String, SolrMetricReporter> getReporters(String registry) {\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        log.warn(\"Could not obtain lock to modify reporters registry: \" + registry);\n        return Collections.emptyMap();\n      }\n    } catch (InterruptedException e) {\n      log.warn(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n      return Collections.emptyMap();\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        return Collections.emptyMap();\n      } else {\n        // defensive copy - the original map may change after we release the lock\n        return Collections.unmodifiableMap(new HashMap<>(perRegistry));\n      }\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6224f40fcf60b05c62a88f50925c1bbae324bdfd","date":1565402430,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#getReporters(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#getReporters(String).mjava","sourceNew":"  /**\n   * Get a map of reporters for a registry. Keys are reporter names, values are reporter instances.\n   *\n   * @param registry registry name\n   * @return map of reporters and their names, may be empty but never null\n   */\n  public Map<String, SolrMetricReporter> getReporters(String registry) {\n    // make sure we use a name with prefix\n    registry = enforcePrefix(registry);\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        log.warn(\"Could not obtain lock to modify reporters registry: \" + registry);\n        return Collections.emptyMap();\n      }\n    } catch (InterruptedException e) {\n      log.warn(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n      return Collections.emptyMap();\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        return Collections.emptyMap();\n      } else {\n        // defensive copy - the original map may change after we release the lock\n        return Collections.unmodifiableMap(new HashMap<>(perRegistry));\n      }\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Get a map of reporters for a registry. Keys are reporter names, values are reporter instances.\n   * @param registry registry name\n   * @return map of reporters and their names, may be empty but never null\n   */\n  public Map<String, SolrMetricReporter> getReporters(String registry) {\n    // make sure we use a name with prefix\n    registry = enforcePrefix(registry);\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        log.warn(\"Could not obtain lock to modify reporters registry: \" + registry);\n        return Collections.emptyMap();\n      }\n    } catch (InterruptedException e) {\n      log.warn(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n      return Collections.emptyMap();\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        return Collections.emptyMap();\n      } else {\n        // defensive copy - the original map may change after we release the lock\n        return Collections.unmodifiableMap(new HashMap<>(perRegistry));\n      }\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#getReporters(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#getReporters(String).mjava","sourceNew":"  /**\n   * Get a map of reporters for a registry. Keys are reporter names, values are reporter instances.\n   *\n   * @param registry registry name\n   * @return map of reporters and their names, may be empty but never null\n   */\n  public Map<String, SolrMetricReporter> getReporters(String registry) {\n    // make sure we use a name with prefix\n    registry = enforcePrefix(registry);\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        log.warn(\"Could not obtain lock to modify reporters registry: {}\", registry);\n        return Collections.emptyMap();\n      }\n    } catch (InterruptedException e) {\n      log.warn(\"Interrupted while trying to obtain lock to modify reporters registry: {}\", registry);\n      return Collections.emptyMap();\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        return Collections.emptyMap();\n      } else {\n        // defensive copy - the original map may change after we release the lock\n        return Collections.unmodifiableMap(new HashMap<>(perRegistry));\n      }\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Get a map of reporters for a registry. Keys are reporter names, values are reporter instances.\n   *\n   * @param registry registry name\n   * @return map of reporters and their names, may be empty but never null\n   */\n  public Map<String, SolrMetricReporter> getReporters(String registry) {\n    // make sure we use a name with prefix\n    registry = enforcePrefix(registry);\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        log.warn(\"Could not obtain lock to modify reporters registry: \" + registry);\n        return Collections.emptyMap();\n      }\n    } catch (InterruptedException e) {\n      log.warn(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n      return Collections.emptyMap();\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        return Collections.emptyMap();\n      } else {\n        // defensive copy - the original map may change after we release the lock\n        return Collections.unmodifiableMap(new HashMap<>(perRegistry));\n      }\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c":["0265144286422ad99682a00904cc2536b79c8535"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9df8125ba9193a2e2e285ed92157810b1952a244"],"9df8125ba9193a2e2e285ed92157810b1952a244":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c"]},"commit2Childs":{"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9df8125ba9193a2e2e285ed92157810b1952a244":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["9df8125ba9193a2e2e285ed92157810b1952a244"]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}