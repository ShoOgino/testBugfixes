{"path":"lucene/backwards/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","pathOld":"backwards/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    RAMDirectory dirA = new RAMDirectory();\n    RAMDirectory dirB = new RAMDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, new WhitespaceAnalyzer(), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    IndexWriter wB = new IndexWriter(dirB, new WhitespaceAnalyzer(), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(new IndexReader[] { readerA, readerB });\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    RAMDirectory dirA = new RAMDirectory();\n    RAMDirectory dirB = new RAMDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, new WhitespaceAnalyzer(), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    IndexWriter wB = new IndexWriter(dirB, new WhitespaceAnalyzer(), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(new IndexReader[] { readerA, readerB });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    RAMDirectory dirA = new RAMDirectory();\n    RAMDirectory dirB = new RAMDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, new WhitespaceAnalyzer(), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    IndexWriter wB = new IndexWriter(dirB, new WhitespaceAnalyzer(), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(new IndexReader[] { readerA, readerB });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}