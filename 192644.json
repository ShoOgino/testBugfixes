{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#writeHeader().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#writeHeader().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#writeHeader().mjava","sourceNew":"  /**\n   * Write a header to the lines file - indicating how to read the file later \n   */\n  private void writeHeader() {\n    StringBuilder sb = threadBuffer.get();\n    if (sb == null) {\n      sb = new StringBuilder();\n      threadBuffer.set(sb);\n    }\n    sb.setLength(0);\n    sb.append(FIELDS_HEADER_INDICATOR);\n    for (String f : fieldsToWrite) {\n      sb.append(SEP).append(f);\n    }\n    lineFileOut.println(sb.toString());\n  }\n\n","sourceOld":"  /**\n   * Write a header to the lines file - indicating how to read the file later \n   */\n  private void writeHeader() {\n    StringBuilder sb = threadBuffer.get();\n    if (sb == null) {\n      sb = new StringBuilder();\n      threadBuffer.set(sb);\n    }\n    sb.setLength(0);\n    sb.append(FIELDS_HEADER_INDICATOR);\n    for (String f : fieldsToWrite) {\n      sb.append(SEP).append(f);\n    }\n    lineFileOut.println(sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f11aff2ac25cc001599c10577012e84297104c48","date":1355045169,"type":5,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#writeHeader(PrintWriter).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#writeHeader().mjava","sourceNew":"  /**\n   * Write header to the lines file - indicating how to read the file later.\n   */\n  protected void writeHeader(PrintWriter out) {\n    StringBuilder sb = threadBuffer.get();\n    if (sb == null) {\n      sb = new StringBuilder();\n      threadBuffer.set(sb);\n    }\n    sb.setLength(0);\n    sb.append(FIELDS_HEADER_INDICATOR);\n    for (String f : fieldsToWrite) {\n      sb.append(SEP).append(f);\n    }\n    out.println(sb.toString());\n  }\n\n","sourceOld":"  /**\n   * Write a header to the lines file - indicating how to read the file later \n   */\n  private void writeHeader() {\n    StringBuilder sb = threadBuffer.get();\n    if (sb == null) {\n      sb = new StringBuilder();\n      threadBuffer.set(sb);\n    }\n    sb.setLength(0);\n    sb.append(FIELDS_HEADER_INDICATOR);\n    for (String f : fieldsToWrite) {\n      sb.append(SEP).append(f);\n    }\n    lineFileOut.println(sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#writeHeader().mjava","sourceNew":null,"sourceOld":"  /**\n   * Write a header to the lines file - indicating how to read the file later \n   */\n  private void writeHeader() {\n    StringBuilder sb = threadBuffer.get();\n    if (sb == null) {\n      sb = new StringBuilder();\n      threadBuffer.set(sb);\n    }\n    sb.setLength(0);\n    sb.append(FIELDS_HEADER_INDICATOR);\n    for (String f : fieldsToWrite) {\n      sb.append(SEP).append(f);\n    }\n    lineFileOut.println(sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f11aff2ac25cc001599c10577012e84297104c48":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["b89678825b68eccaf09e6ab71675fc0b0af1e099","f11aff2ac25cc001599c10577012e84297104c48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f11aff2ac25cc001599c10577012e84297104c48"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f11aff2ac25cc001599c10577012e84297104c48","407687e67faf6e1f02a211ca078d8e3eed631027"],"f11aff2ac25cc001599c10577012e84297104c48":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}