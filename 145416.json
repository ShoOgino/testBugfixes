{"path":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#next().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#next().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public BytesRef next() throws IOException {\n    // restore queue\n    pushTop();\n\n    // gather equal top fields\n    if (queue.size() > 0) {\n      pullTop();\n    } else {\n      current = null;\n    }\n\n    return current;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35bc676cb5a9ea7713a7d8245cfbba0d3fea63c9","date":1279033387,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#next().mjava","sourceNew":"  @Override\n  public BytesRef next() throws IOException {\n    lastSeek = null;\n\n    // restore queue\n    pushTop();\n\n    // gather equal top fields\n    if (queue.size() > 0) {\n      pullTop();\n    } else {\n      current = null;\n    }\n\n    return current;\n  }\n\n","sourceOld":"  @Override\n  public BytesRef next() throws IOException {\n    // restore queue\n    pushTop();\n\n    // gather equal top fields\n    if (queue.size() > 0) {\n      pullTop();\n    } else {\n      current = null;\n    }\n\n    return current;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#next().mjava","sourceNew":"  @Override\n  public BytesRef next() throws IOException {\n    lastSeek = null;\n\n    // restore queue\n    pushTop();\n\n    // gather equal top fields\n    if (queue.size() > 0) {\n      pullTop();\n    } else {\n      current = null;\n    }\n\n    return current;\n  }\n\n","sourceOld":"  @Override\n  public BytesRef next() throws IOException {\n    // restore queue\n    pushTop();\n\n    // gather equal top fields\n    if (queue.size() > 0) {\n      pullTop();\n    } else {\n      current = null;\n    }\n\n    return current;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dbc7493b4f3e9c8bfa60028d6a4d82e2e9f0b67","date":1309449942,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#next().mjava","sourceNew":"  @Override\n  public BytesRef next() throws IOException {\n    if (lastSeekExact) {\n      // Must seekCeil at this point, so those subs that\n      // didn't have the term can find the following term.\n      // NOTE: we could save some CPU by only seekCeil the\n      // subs that didn't match the last exact seek... but\n      // most impls short-circuit if you seekCeil to term\n      // they are already on.\n      final SeekStatus status = seekCeil(current);\n      assert status == SeekStatus.FOUND;\n      lastSeekExact = false;\n    }\n    lastSeek = null;\n\n    // restore queue\n    pushTop();\n\n    // gather equal top fields\n    if (queue.size() > 0) {\n      pullTop();\n    } else {\n      current = null;\n    }\n\n    return current;\n  }\n\n","sourceOld":"  @Override\n  public BytesRef next() throws IOException {\n    lastSeek = null;\n\n    // restore queue\n    pushTop();\n\n    // gather equal top fields\n    if (queue.size() > 0) {\n      pullTop();\n    } else {\n      current = null;\n    }\n\n    return current;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#next().mjava","sourceNew":"  @Override\n  public BytesRef next() throws IOException {\n    if (lastSeekExact) {\n      // Must seekCeil at this point, so those subs that\n      // didn't have the term can find the following term.\n      // NOTE: we could save some CPU by only seekCeil the\n      // subs that didn't match the last exact seek... but\n      // most impls short-circuit if you seekCeil to term\n      // they are already on.\n      final SeekStatus status = seekCeil(current);\n      assert status == SeekStatus.FOUND;\n      lastSeekExact = false;\n    }\n    lastSeek = null;\n\n    // restore queue\n    pushTop();\n\n    // gather equal top fields\n    if (queue.size() > 0) {\n      pullTop();\n    } else {\n      current = null;\n    }\n\n    return current;\n  }\n\n","sourceOld":"  @Override\n  public BytesRef next() throws IOException {\n    lastSeek = null;\n\n    // restore queue\n    pushTop();\n\n    // gather equal top fields\n    if (queue.size() > 0) {\n      pullTop();\n    } else {\n      current = null;\n    }\n\n    return current;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#next().mjava","sourceNew":"  @Override\n  public BytesRef next() throws IOException {\n    if (lastSeekExact) {\n      // Must seekCeil at this point, so those subs that\n      // didn't have the term can find the following term.\n      // NOTE: we could save some CPU by only seekCeil the\n      // subs that didn't match the last exact seek... but\n      // most impls short-circuit if you seekCeil to term\n      // they are already on.\n      final SeekStatus status = seekCeil(current);\n      assert status == SeekStatus.FOUND;\n      lastSeekExact = false;\n    }\n    lastSeek = null;\n\n    // restore queue\n    pushTop();\n\n    // gather equal top fields\n    if (queue.size() > 0) {\n      pullTop();\n    } else {\n      current = null;\n    }\n\n    return current;\n  }\n\n","sourceOld":"  @Override\n  public BytesRef next() throws IOException {\n    lastSeek = null;\n\n    // restore queue\n    pushTop();\n\n    // gather equal top fields\n    if (queue.size() > 0) {\n      pullTop();\n    } else {\n      current = null;\n    }\n\n    return current;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#next().mjava","sourceNew":"  @Override\n  public BytesRef next() throws IOException {\n    if (lastSeekExact) {\n      // Must seekCeil at this point, so those subs that\n      // didn't have the term can find the following term.\n      // NOTE: we could save some CPU by only seekCeil the\n      // subs that didn't match the last exact seek... but\n      // most impls short-circuit if you seekCeil to term\n      // they are already on.\n      final SeekStatus status = seekCeil(current);\n      assert status == SeekStatus.FOUND;\n      lastSeekExact = false;\n    }\n    lastSeek = null;\n\n    // restore queue\n    pushTop();\n\n    // gather equal top fields\n    if (queue.size() > 0) {\n      pullTop();\n    } else {\n      current = null;\n    }\n\n    return current;\n  }\n\n","sourceOld":"  @Override\n  public BytesRef next() throws IOException {\n    if (lastSeekExact) {\n      // Must seekCeil at this point, so those subs that\n      // didn't have the term can find the following term.\n      // NOTE: we could save some CPU by only seekCeil the\n      // subs that didn't match the last exact seek... but\n      // most impls short-circuit if you seekCeil to term\n      // they are already on.\n      final SeekStatus status = seekCeil(current);\n      assert status == SeekStatus.FOUND;\n      lastSeekExact = false;\n    }\n    lastSeek = null;\n\n    // restore queue\n    pushTop();\n\n    // gather equal top fields\n    if (queue.size() > 0) {\n      pullTop();\n    } else {\n      current = null;\n    }\n\n    return current;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0dbc7493b4f3e9c8bfa60028d6a4d82e2e9f0b67"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","35bc676cb5a9ea7713a7d8245cfbba0d3fea63c9"],"0dbc7493b4f3e9c8bfa60028d6a4d82e2e9f0b67":["35bc676cb5a9ea7713a7d8245cfbba0d3fea63c9"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["35bc676cb5a9ea7713a7d8245cfbba0d3fea63c9","0dbc7493b4f3e9c8bfa60028d6a4d82e2e9f0b67"],"35bc676cb5a9ea7713a7d8245cfbba0d3fea63c9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["35bc676cb5a9ea7713a7d8245cfbba0d3fea63c9","0dbc7493b4f3e9c8bfa60028d6a4d82e2e9f0b67"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5f4e87790277826a2aea119328600dfb07761f32","35bc676cb5a9ea7713a7d8245cfbba0d3fea63c9"],"5f4e87790277826a2aea119328600dfb07761f32":[],"0dbc7493b4f3e9c8bfa60028d6a4d82e2e9f0b67":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"35bc676cb5a9ea7713a7d8245cfbba0d3fea63c9":["5f4e87790277826a2aea119328600dfb07761f32","0dbc7493b4f3e9c8bfa60028d6a4d82e2e9f0b67","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}