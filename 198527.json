{"path":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,int,Locale,FieldComparatorSource).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,int,Locale,FieldComparatorSource).mjava","pathOld":"/dev/null","sourceNew":"  Comparator getCachedComparator(String fieldname, int type, Locale locale, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SortField.SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case SortField.STRING:\n      if (locale != null)\n        comparator = comparatorStringLocale(fieldname, locale);\n      else\n        comparator = comparatorNatural(fieldname);\n      break;\n    case SortField.CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case SortField.DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,int,Locale,FieldComparatorSource).mjava","sourceNew":null,"sourceOld":"  Comparator getCachedComparator(String fieldname, int type, Locale locale, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SortField.SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case SortField.STRING:\n      if (locale != null)\n        comparator = comparatorStringLocale(fieldname, locale);\n      else\n        comparator = comparatorNatural(fieldname);\n      break;\n    case SortField.CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case SortField.DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,int,Locale,FieldComparatorSource).mjava","pathOld":"src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,int,Locale,FieldComparatorSource).mjava","sourceNew":"  Comparator getCachedComparator(String fieldname, int type, Locale locale, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SortField.SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case SortField.STRING:\n      if (locale != null)\n        comparator = comparatorStringLocale(fieldname, locale);\n      else\n        comparator = comparatorNatural(fieldname);\n      break;\n    case SortField.CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case SortField.DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","sourceOld":"  Comparator getCachedComparator(String fieldname, int type, Locale locale, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SortField.SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case SortField.STRING:\n      if (locale != null)\n        comparator = comparatorStringLocale(fieldname, locale);\n      else\n        comparator = comparatorNatural(fieldname);\n      break;\n    case SortField.CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case SortField.DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,int,Locale,FieldComparatorSource).mjava","pathOld":"/dev/null","sourceNew":"  Comparator getCachedComparator(String fieldname, int type, Locale locale, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SortField.SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case SortField.STRING:\n      if (locale != null)\n        comparator = comparatorStringLocale(fieldname, locale);\n      else\n        comparator = comparatorNatural(fieldname);\n      break;\n    case SortField.CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case SortField.DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,int,FieldComparatorSource).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,int,Locale,FieldComparatorSource).mjava","sourceNew":"  Comparator getCachedComparator(String fieldname, int type, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SortField.SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case SortField.STRING:\n      comparator = comparatorNatural(fieldname);\n      break;\n    case SortField.CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case SortField.DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","sourceOld":"  Comparator getCachedComparator(String fieldname, int type, Locale locale, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SortField.SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case SortField.STRING:\n      if (locale != null)\n        comparator = comparatorStringLocale(fieldname, locale);\n      else\n        comparator = comparatorNatural(fieldname);\n      break;\n    case SortField.CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case SortField.DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,int,Locale,FieldComparatorSource).mjava","sourceNew":null,"sourceOld":"  Comparator getCachedComparator(String fieldname, int type, Locale locale, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SortField.SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case SortField.STRING:\n      if (locale != null)\n        comparator = comparatorStringLocale(fieldname, locale);\n      else\n        comparator = comparatorNatural(fieldname);\n      break;\n    case SortField.CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case SortField.DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,int,Locale,FieldComparatorSource).mjava","sourceNew":null,"sourceOld":"  Comparator getCachedComparator(String fieldname, int type, Locale locale, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SortField.SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case SortField.STRING:\n      if (locale != null)\n        comparator = comparatorStringLocale(fieldname, locale);\n      else\n        comparator = comparatorNatural(fieldname);\n      break;\n    case SortField.CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case SortField.DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["1da8d55113b689b06716246649de6f62430f15c0","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["1da8d55113b689b06716246649de6f62430f15c0","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e492fb0f2bb0b4b47208286f9331ff55963c656"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}