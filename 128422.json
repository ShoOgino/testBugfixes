{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestEventQueueAction#process(TriggerEvent,ActionContext).mjava","commits":[{"id":"1f6b20dc453cee198956989b90aa24bef0232bcf","date":1498221066,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestEventQueueAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestEventQueueAction#process(TriggerEvent).mjava","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      log.info(\"-- event: \" + event);\n      events.add(event);\n      getActionStarted().countDown();\n      try {\n        Thread.sleep(eventQueueActionWait);\n        triggerFired.compareAndSet(false, true);\n        getActionCompleted().countDown();\n      } catch (InterruptedException e) {\n        getActionInterrupted().countDown();\n        return;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(TriggerEvent event) {\n      log.info(\"-- event: \" + event);\n      events.add(event);\n      getActionStarted().countDown();\n      try {\n        Thread.sleep(eventQueueActionWait);\n        triggerFired.compareAndSet(false, true);\n        getActionCompleted().countDown();\n      } catch (InterruptedException e) {\n        getActionInterrupted().countDown();\n        return;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestEventQueueAction#process(TriggerEvent,ActionContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      log.info(\"-- event: \" + event);\n      events.add(event);\n      getActionStarted().countDown();\n      try {\n        Thread.sleep(eventQueueActionWait);\n        triggerFired.compareAndSet(false, true);\n        getActionCompleted().countDown();\n      } catch (InterruptedException e) {\n        getActionInterrupted().countDown();\n        return;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestEventQueueAction#process(TriggerEvent,ActionContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      log.info(\"-- event: \" + event);\n      events.add(event);\n      getActionStarted().countDown();\n      try {\n        Thread.sleep(eventQueueActionWait);\n        triggerFired.compareAndSet(false, true);\n        getActionCompleted().countDown();\n      } catch (InterruptedException e) {\n        getActionInterrupted().countDown();\n        return;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ebf2a4e9fec7a202108e0897879cc366c3da296","date":1522408355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestEventQueueAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestEventQueueAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      log.info(\"-- event: \" + event);\n      events.add(event);\n      long eventQueueActionWaitCopy = eventQueueActionWait;\n      getActionStarted().countDown();\n      try {\n        log.info(\"-- Going to sleep for {} ms\", eventQueueActionWaitCopy);\n        Thread.sleep(eventQueueActionWaitCopy);\n        log.info(\"-- Woke up after sleeping for {} ms\", eventQueueActionWaitCopy);\n        triggerFired.compareAndSet(false, true);\n        getActionCompleted().countDown();\n      } catch (InterruptedException e) {\n        log.info(\"-- Interrupted\");\n        getActionInterrupted().countDown();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      log.info(\"-- event: \" + event);\n      events.add(event);\n      getActionStarted().countDown();\n      try {\n        Thread.sleep(eventQueueActionWait);\n        triggerFired.compareAndSet(false, true);\n        getActionCompleted().countDown();\n      } catch (InterruptedException e) {\n        getActionInterrupted().countDown();\n        return;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca5eaeddb09b39cefceaf853898ae6188400ae37","date":1522413426,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestEventQueueAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestEventQueueAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      log.info(\"-- event: \" + event);\n      events.add(event);\n      long eventQueueActionWaitCopy = eventQueueActionWait;\n      getActionStarted().countDown();\n      try {\n        log.info(\"-- Going to sleep for {} ms\", eventQueueActionWaitCopy);\n        Thread.sleep(eventQueueActionWaitCopy);\n        log.info(\"-- Woke up after sleeping for {} ms\", eventQueueActionWaitCopy);\n        triggerFired.compareAndSet(false, true);\n        getActionCompleted().countDown();\n      } catch (InterruptedException e) {\n        log.info(\"-- Interrupted\");\n        getActionInterrupted().countDown();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      log.info(\"-- event: \" + event);\n      events.add(event);\n      getActionStarted().countDown();\n      try {\n        Thread.sleep(eventQueueActionWait);\n        triggerFired.compareAndSet(false, true);\n        getActionCompleted().countDown();\n      } catch (InterruptedException e) {\n        getActionInterrupted().countDown();\n        return;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba6afbcc1d4884e6e28d624a8a9bc666c6a42445","date":1551718463,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestEventQueueAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestEventQueueAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      // make a local copy of the latch so we're using it consistently even as test thread changes tings\n      final CountDownLatch stallLatch = stall;\n      log.info(\"processing: stall={} event={} \", stallLatch, event);\n      events.add(event);\n      getActionStarted().countDown();\n      try {\n        if (stallLatch.await(60, TimeUnit.SECONDS)) {\n          log.info(\"Firing trigger event after await()ing 'stall' countdown\");\n          triggerFired.set(true);\n        } else {\n          log.error(\"Timed out await()ing 'stall' countdown\");\n        }\n        getActionCompleted().countDown();\n      } catch (InterruptedException e) {\n        log.info(\"Interrupted\");\n        getActionInterrupted().countDown();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      log.info(\"-- event: \" + event);\n      events.add(event);\n      long eventQueueActionWaitCopy = eventQueueActionWait;\n      getActionStarted().countDown();\n      try {\n        log.info(\"-- Going to sleep for {} ms\", eventQueueActionWaitCopy);\n        Thread.sleep(eventQueueActionWaitCopy);\n        log.info(\"-- Woke up after sleeping for {} ms\", eventQueueActionWaitCopy);\n        triggerFired.compareAndSet(false, true);\n        getActionCompleted().countDown();\n      } catch (InterruptedException e) {\n        log.info(\"-- Interrupted\");\n        getActionInterrupted().countDown();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestEventQueueAction#process(TriggerEvent,ActionContext).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      // make a local copy of the latch so we're using it consistently even as test thread changes tings\n      final CountDownLatch stallLatch = stall;\n      log.info(\"processing: stall={} event={} \", stallLatch, event);\n      events.add(event);\n      getActionStarted().countDown();\n      try {\n        if (stallLatch.await(60, TimeUnit.SECONDS)) {\n          log.info(\"Firing trigger event after await()ing 'stall' countdown\");\n          triggerFired.set(true);\n        } else {\n          log.error(\"Timed out await()ing 'stall' countdown\");\n        }\n        getActionCompleted().countDown();\n      } catch (InterruptedException e) {\n        log.info(\"Interrupted\");\n        getActionInterrupted().countDown();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ca5eaeddb09b39cefceaf853898ae6188400ae37":["560c18d71dad43d675158783c3840f8c80d6d39c","4ebf2a4e9fec7a202108e0897879cc366c3da296"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f6b20dc453cee198956989b90aa24bef0232bcf"],"ba6afbcc1d4884e6e28d624a8a9bc666c6a42445":["ca5eaeddb09b39cefceaf853898ae6188400ae37"],"3f504512a03d978990cbff30db0522b354e846db":["ba6afbcc1d4884e6e28d624a8a9bc666c6a42445"],"4ebf2a4e9fec7a202108e0897879cc366c3da296":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"ca5eaeddb09b39cefceaf853898ae6188400ae37":["ba6afbcc1d4884e6e28d624a8a9bc666c6a42445"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"ba6afbcc1d4884e6e28d624a8a9bc666c6a42445":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ebf2a4e9fec7a202108e0897879cc366c3da296":["ca5eaeddb09b39cefceaf853898ae6188400ae37"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","1f6b20dc453cee198956989b90aa24bef0232bcf"],"560c18d71dad43d675158783c3840f8c80d6d39c":["ca5eaeddb09b39cefceaf853898ae6188400ae37","4ebf2a4e9fec7a202108e0897879cc366c3da296"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}