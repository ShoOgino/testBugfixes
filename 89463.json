{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestFastInputStream#testgzip().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestFastInputStream#testgzip().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/TestFastInputStream#testgzip().mjava","sourceNew":"  @Test\n  public void testgzip() throws Exception {\n    ByteArrayOutputStream b = new ByteArrayOutputStream();\n    FastOutputStream fos = new FastOutputStream(b);\n    GZIPOutputStream gzos = new GZIPOutputStream(fos);\n    String ss = \"Helloooooooooooooooooooo\";\n    writeChars(gzos, ss, 0, ss.length());\n    gzos.close();\n    JavaBinCodec.writeVInt(10, fos);\n    fos.flushBuffer();\n    GZIPInputStream gzis = new GZIPInputStream(new ByteArrayInputStream(b.toByteArray(), 0, b.size()));\n    char[] cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    // System.out.println(\"passes w/o FastInputStream\");\n\n    ByteArrayInputStream bis = new ByteArrayInputStream(b.toByteArray(), 0, b.size());\n    gzis = new GZIPInputStream(new FastInputStream(bis));\n    cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    // System.out.println(\"passes w FastInputStream\");\n  }\n\n","sourceOld":"  @Test\n  public void testgzip() throws Exception {\n    ByteArrayOutputStream b = new ByteArrayOutputStream();\n    FastOutputStream fos = new FastOutputStream(b);\n    GZIPOutputStream gzos = new GZIPOutputStream(fos);\n    String ss = \"Helloooooooooooooooooooo\";\n    writeChars(gzos, ss, 0, ss.length());\n    gzos.close();\n    JavaBinCodec.writeVInt(10, fos);\n    fos.flushBuffer();\n    GZIPInputStream gzis = new GZIPInputStream(new ByteArrayInputStream(b.toByteArray(), 0, b.size()));\n    char[] cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    // System.out.println(\"passes w/o FastInputStream\");\n\n    ByteArrayInputStream bis = new ByteArrayInputStream(b.toByteArray(), 0, b.size());\n    gzis = new GZIPInputStream(new FastInputStream(bis));\n    cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    // System.out.println(\"passes w FastInputStream\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestFastInputStream#testgzip().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/TestFastInputStream#testgzip().mjava","sourceNew":"  @Test\n  public void testgzip() throws Exception {\n    ByteArrayOutputStream b = new ByteArrayOutputStream();\n    FastOutputStream fos = new FastOutputStream(b);\n    GZIPOutputStream gzos = new GZIPOutputStream(fos);\n    String ss = \"Helloooooooooooooooooooo\";\n    writeChars(gzos, ss, 0, ss.length());\n    gzos.close();\n    JavaBinCodec.writeVInt(10, fos);\n    fos.flushBuffer();\n    GZIPInputStream gzis = new GZIPInputStream(new ByteArrayInputStream(b.toByteArray(), 0, b.size()));\n    char[] cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    // System.out.println(\"passes w/o FastInputStream\");\n\n    ByteArrayInputStream bis = new ByteArrayInputStream(b.toByteArray(), 0, b.size());\n    gzis = new GZIPInputStream(new FastInputStream(bis));\n    cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    // System.out.println(\"passes w FastInputStream\");\n  }\n\n","sourceOld":"  @Test\n  public void testgzip() throws Exception {\n    ByteArrayOutputStream b = new ByteArrayOutputStream();\n    FastOutputStream fos = new FastOutputStream(b);\n    GZIPOutputStream gzos = new GZIPOutputStream(fos);\n    String ss = \"Helloooooooooooooooooooo\";\n    writeChars(gzos, ss, 0, ss.length());\n    gzos.close();\n    JavaBinCodec.writeVInt(10, fos);\n    fos.flushBuffer();\n    GZIPInputStream gzis = new GZIPInputStream(new ByteArrayInputStream(b.toByteArray(), 0, b.size()));\n    char[] cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    // System.out.println(\"passes w/o FastInputStream\");\n\n    ByteArrayInputStream bis = new ByteArrayInputStream(b.toByteArray(), 0, b.size());\n    gzis = new GZIPInputStream(new FastInputStream(bis));\n    cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    // System.out.println(\"passes w FastInputStream\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestFastInputStream#testgzip().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/TestFastInputStream#testgzip().mjava","sourceNew":"  @Test\n  public void testgzip() throws Exception {\n    ByteArrayOutputStream b = new ByteArrayOutputStream();\n    FastOutputStream fos = new FastOutputStream(b);\n    GZIPOutputStream gzos = new GZIPOutputStream(fos);\n    String ss = \"Helloooooooooooooooooooo\";\n    writeChars(gzos, ss, 0, ss.length());\n    gzos.close();\n    JavaBinCodec.writeVInt(10, fos);\n    fos.flushBuffer();\n    GZIPInputStream gzis = new GZIPInputStream(new ByteArrayInputStream(b.toByteArray(), 0, b.size()));\n    char[] cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    // System.out.println(\"passes w/o FastInputStream\");\n\n    ByteArrayInputStream bis = new ByteArrayInputStream(b.toByteArray(), 0, b.size());\n    gzis = new GZIPInputStream(new FastInputStream(bis));\n    cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    // System.out.println(\"passes w FastInputStream\");\n  }\n\n","sourceOld":"  @Test\n  public void testgzip() throws Exception {\n    ByteArrayOutputStream b = new ByteArrayOutputStream();\n    FastOutputStream fos = new FastOutputStream(b);\n    GZIPOutputStream gzos = new GZIPOutputStream(fos);\n    String ss = \"Helloooooooooooooooooooo\";\n    writeChars(gzos, ss, 0, ss.length());\n    gzos.close();\n    JavaBinCodec.writeVInt(10, fos);\n    fos.flushBuffer();\n    GZIPInputStream gzis = new GZIPInputStream(new ByteArrayInputStream(b.toByteArray(), 0, b.size()));\n    char[] cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    // System.out.println(\"passes w/o FastInputStream\");\n\n    ByteArrayInputStream bis = new ByteArrayInputStream(b.toByteArray(), 0, b.size());\n    gzis = new GZIPInputStream(new FastInputStream(bis));\n    cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    // System.out.println(\"passes w FastInputStream\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cba13865da71de3b9b0937fcbc66d726089356d","date":1537507909,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestFastInputStream#testgzip().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestFastInputStream#testgzip().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testgzip() throws Exception {\n    ByteArrayOutputStream b = new ByteArrayOutputStream();\n    FastOutputStream fos = new FastOutputStream(b);\n    GZIPOutputStream gzos = new GZIPOutputStream(fos);\n    String ss = \"Helloooooooooooooooooooo\";\n    writeChars(gzos, ss, 0, ss.length());\n    gzos.close();\n    JavaBinCodec.writeVInt(10, fos);\n    fos.flushBuffer();\n    GZIPInputStream gzis = new GZIPInputStream(new ByteArrayInputStream(b.toByteArray(), 0, b.size()));\n    char[] cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    // System.out.println(\"passes w/o FastInputStream\");\n\n    ByteArrayInputStream bis = new ByteArrayInputStream(b.toByteArray(), 0, b.size());\n    gzis = new GZIPInputStream(new FastInputStream(bis));\n    cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    // System.out.println(\"passes w FastInputStream\");\n  }\n\n","sourceOld":"  @Test\n  public void testgzip() throws Exception {\n    ByteArrayOutputStream b = new ByteArrayOutputStream();\n    FastOutputStream fos = new FastOutputStream(b);\n    GZIPOutputStream gzos = new GZIPOutputStream(fos);\n    String ss = \"Helloooooooooooooooooooo\";\n    writeChars(gzos, ss, 0, ss.length());\n    gzos.close();\n    JavaBinCodec.writeVInt(10, fos);\n    fos.flushBuffer();\n    GZIPInputStream gzis = new GZIPInputStream(new ByteArrayInputStream(b.toByteArray(), 0, b.size()));\n    char[] cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    // System.out.println(\"passes w/o FastInputStream\");\n\n    ByteArrayInputStream bis = new ByteArrayInputStream(b.toByteArray(), 0, b.size());\n    gzis = new GZIPInputStream(new FastInputStream(bis));\n    cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    // System.out.println(\"passes w FastInputStream\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestFastInputStream#testgzip().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestFastInputStream#testgzip().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testgzip() throws Exception {\n    ByteArrayOutputStream b = new ByteArrayOutputStream();\n    FastOutputStream fos = new FastOutputStream(b);\n    GZIPOutputStream gzos = new GZIPOutputStream(fos);\n    String ss = \"Helloooooooooooooooooooo\";\n    writeChars(gzos, ss, 0, ss.length());\n    gzos.close();\n    JavaBinCodec.writeVInt(10, fos);\n    fos.flushBuffer();\n    GZIPInputStream gzis = new GZIPInputStream(new ByteArrayInputStream(b.toByteArray(), 0, b.size()));\n    char[] cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    // System.out.println(\"passes w/o FastInputStream\");\n\n    ByteArrayInputStream bis = new ByteArrayInputStream(b.toByteArray(), 0, b.size());\n    gzis = new GZIPInputStream(new FastInputStream(bis));\n    cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    // System.out.println(\"passes w FastInputStream\");\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testgzip() throws Exception {\n    ByteArrayOutputStream b = new ByteArrayOutputStream();\n    FastOutputStream fos = new FastOutputStream(b);\n    GZIPOutputStream gzos = new GZIPOutputStream(fos);\n    String ss = \"Helloooooooooooooooooooo\";\n    writeChars(gzos, ss, 0, ss.length());\n    gzos.close();\n    JavaBinCodec.writeVInt(10, fos);\n    fos.flushBuffer();\n    GZIPInputStream gzis = new GZIPInputStream(new ByteArrayInputStream(b.toByteArray(), 0, b.size()));\n    char[] cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    // System.out.println(\"passes w/o FastInputStream\");\n\n    ByteArrayInputStream bis = new ByteArrayInputStream(b.toByteArray(), 0, b.size());\n    gzis = new GZIPInputStream(new FastInputStream(bis));\n    cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    // System.out.println(\"passes w FastInputStream\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cba13865da71de3b9b0937fcbc66d726089356d":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["4cba13865da71de3b9b0937fcbc66d726089356d"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["4cba13865da71de3b9b0937fcbc66d726089356d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"4cba13865da71de3b9b0937fcbc66d726089356d":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8d35c84fdef07284c122012ca4000d3b7285a66e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}