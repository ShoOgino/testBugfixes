{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[String],SolrCloudManager).mjava","commits":[{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[String],SolrCloudManager).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[String],ClusterDataProvider).mjava","sourceNew":"  public Row(String node, List<String> params, SolrCloudManager cloudManager) {\n    NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n    collectionVsShardVsReplicas = nodeStateProvider.getReplicaInfo(node, params);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    isLive = cloudManager.getClusterStateProvider().getLiveNodes().contains(node);\n    Map<String, Object> vals = isLive ? nodeStateProvider.getNodeValues(node, params) : Collections.emptyMap();\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, Clause.validate(s,vals.get(s), false));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","sourceOld":"  public Row(String node, List<String> params, ClusterDataProvider dataProvider) {\n    collectionVsShardVsReplicas = dataProvider.getReplicaInfo(node, params);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    isLive = dataProvider.getNodes().contains(node);\n    Map<String, Object> vals = isLive ? dataProvider.getNodeValues(node, params) : Collections.emptyMap();\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, Clause.validate(s,vals.get(s), false));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[String],List[String],SolrCloudManager).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[String],SolrCloudManager).mjava","sourceNew":"  public Row(String node, List<String> params, List<String> perReplicaAttributes, SolrCloudManager cloudManager) {\n    NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n    collectionVsShardVsReplicas = nodeStateProvider.getReplicaInfo(node, perReplicaAttributes);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    isLive = cloudManager.getClusterStateProvider().getLiveNodes().contains(node);\n    Map<String, Object> vals = isLive ? nodeStateProvider.getNodeValues(node, params) : Collections.emptyMap();\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, Clause.validate(s,vals.get(s), false));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","sourceOld":"  public Row(String node, List<String> params, SolrCloudManager cloudManager) {\n    NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n    collectionVsShardVsReplicas = nodeStateProvider.getReplicaInfo(node, params);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    isLive = cloudManager.getClusterStateProvider().getLiveNodes().contains(node);\n    Map<String, Object> vals = isLive ? nodeStateProvider.getNodeValues(node, params) : Collections.emptyMap();\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, Clause.validate(s,vals.get(s), false));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1bbcda32e5cd37ef61ea1190bacd080308e22070"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}