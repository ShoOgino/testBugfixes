{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testAnalyzerReturningNull().mjava","commits":[{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testAnalyzerReturningNull().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testAnalyzerReturningNull().mjava","sourceNew":"  public void testAnalyzerReturningNull() throws ParseException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new AnalyzerReturningNull());\n    Query q = parser.parse(\"bla AND blo\");\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not analyzed anyway:\n    q = parser.parse(\"bla*\");\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\");\n    assertEquals(\"f1:bla~2.0 f2:bla~2.0 f3:bla~2.0\", q.toString());\n    q = parser.parse(\"[a TO c]\");\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","sourceOld":"  public void testAnalyzerReturningNull() throws ParseException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new AnalyzerReturningNull());\n    Query q = parser.parse(\"bla AND blo\");\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not analyzed anyway:\n    q = parser.parse(\"bla*\");\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\");\n    assertEquals(\"f1:bla~2.0 f2:bla~2.0 f3:bla~2.0\", q.toString());\n    q = parser.parse(\"[a TO c]\");\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testAnalyzerReturningNull().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testAnalyzerReturningNull().mjava","sourceNew":"  public void testAnalyzerReturningNull() throws ParseException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new AnalyzerReturningNull());\n    Query q = parser.parse(\"bla AND blo\");\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not analyzed anyway:\n    q = parser.parse(\"bla*\");\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\");\n    assertEquals(\"f1:bla~2.0 f2:bla~2.0 f3:bla~2.0\", q.toString());\n    q = parser.parse(\"[a TO c]\");\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","sourceOld":"  public void testAnalyzerReturningNull() throws ParseException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new AnalyzerReturningNull());\n    Query q = parser.parse(\"bla AND blo\");\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not analyzed anyway:\n    q = parser.parse(\"bla*\");\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\");\n    assertEquals(\"f1:bla~2.0 f2:bla~2.0 f3:bla~2.0\", q.toString());\n    q = parser.parse(\"[a TO c]\");\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}