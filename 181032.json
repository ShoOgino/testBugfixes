{"path":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#toString(String).mjava","commits":[{"id":"c2042d3e27841c5b60112990fc33559e10ccf6dd","date":1424537395,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#toString(String).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsFilter#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String defaultField) {\n    StringBuilder builder = new StringBuilder();\n    BytesRef spare = new BytesRef(termsBytes);\n    boolean first = true;\n    for (int i = 0; i < termsAndFields.length; i++) {\n      TermsAndField current = termsAndFields[i];\n      for (int j = current.start; j < current.end; j++) {\n        spare.offset = offsets[j];\n        spare.length = offsets[j+1] - offsets[j];\n        if (!first) {\n          builder.append(' ');\n        }\n        first = false;\n        builder.append(current.field).append(':');\n        builder.append(spare.utf8ToString());\n      }\n    }\n    builder.append(ToStringUtils.boost(getBoost()));\n\n    return builder.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String defaultField) {\n    StringBuilder builder = new StringBuilder();\n    BytesRef spare = new BytesRef(termsBytes);\n    boolean first = true;\n    for (int i = 0; i < termsAndFields.length; i++) {\n      TermsAndField current = termsAndFields[i];\n      for (int j = current.start; j < current.end; j++) {\n        spare.offset = offsets[j];\n        spare.length = offsets[j+1] - offsets[j];\n        if (!first) {\n          builder.append(' ');\n        }\n        first = false;\n        builder.append(current.field).append(':');\n        builder.append(spare.utf8ToString());\n      }\n    }\n\n    return builder.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a54410d37fe11baed59cc55dcad44db795f732c2","date":1430995912,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#toString(String).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String defaultField) {\n    StringBuilder builder = new StringBuilder();\n    boolean first = true;\n    TermIterator iterator = termData.iterator();\n    for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n      if (!first) {\n        builder.append(' ');\n      }\n      first = false;\n      builder.append(iterator.field()).append(':');\n      builder.append(term.utf8ToString());\n    }\n    builder.append(ToStringUtils.boost(getBoost()));\n\n    return builder.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String defaultField) {\n    StringBuilder builder = new StringBuilder();\n    BytesRef spare = new BytesRef(termsBytes);\n    boolean first = true;\n    for (int i = 0; i < termsAndFields.length; i++) {\n      TermsAndField current = termsAndFields[i];\n      for (int j = current.start; j < current.end; j++) {\n        spare.offset = offsets[j];\n        spare.length = offsets[j+1] - offsets[j];\n        if (!first) {\n          builder.append(' ');\n        }\n        first = false;\n        builder.append(current.field).append(':');\n        builder.append(spare.utf8ToString());\n      }\n    }\n    builder.append(ToStringUtils.boost(getBoost()));\n\n    return builder.toString();\n  }\n\n","bugFix":null,"bugIntro":["3a4e4581ae77bec38d26e3094293951a63e5eee7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#toString(String).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String defaultField) {\n    StringBuilder builder = new StringBuilder();\n    boolean first = true;\n    TermIterator iterator = termData.iterator();\n    for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n      if (!first) {\n        builder.append(' ');\n      }\n      first = false;\n      builder.append(iterator.field()).append(':');\n      builder.append(term.utf8ToString());\n    }\n\n    return builder.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String defaultField) {\n    StringBuilder builder = new StringBuilder();\n    boolean first = true;\n    TermIterator iterator = termData.iterator();\n    for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n      if (!first) {\n        builder.append(' ');\n      }\n      first = false;\n      builder.append(iterator.field()).append(':');\n      builder.append(term.utf8ToString());\n    }\n    builder.append(ToStringUtils.boost(getBoost()));\n\n    return builder.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a4e4581ae77bec38d26e3094293951a63e5eee7","date":1441982778,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#toString(String).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String defaultField) {\n    StringBuilder builder = new StringBuilder();\n    boolean first = true;\n    TermIterator iterator = termData.iterator();\n    for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n      if (!first) {\n        builder.append(' ');\n      }\n      first = false;\n      builder.append(new Term(iterator.field(), term).toString());\n    }\n\n    return builder.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String defaultField) {\n    StringBuilder builder = new StringBuilder();\n    boolean first = true;\n    TermIterator iterator = termData.iterator();\n    for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n      if (!first) {\n        builder.append(' ');\n      }\n      first = false;\n      builder.append(iterator.field()).append(':');\n      builder.append(term.utf8ToString());\n    }\n\n    return builder.toString();\n  }\n\n","bugFix":["a54410d37fe11baed59cc55dcad44db795f732c2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d73510b39df24d6b65de48e56f8dccb136b9d01","date":1483971905,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermInSetQuery#toString(String).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String defaultField) {\n    StringBuilder builder = new StringBuilder();\n    boolean first = true;\n    TermIterator iterator = termData.iterator();\n    for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n      if (!first) {\n        builder.append(' ');\n      }\n      first = false;\n      builder.append(new Term(iterator.field(), term).toString());\n    }\n\n    return builder.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String defaultField) {\n    StringBuilder builder = new StringBuilder();\n    boolean first = true;\n    TermIterator iterator = termData.iterator();\n    for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n      if (!first) {\n        builder.append(' ');\n      }\n      first = false;\n      builder.append(new Term(iterator.field(), term).toString());\n    }\n\n    return builder.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermInSetQuery#toString(String).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String defaultField) {\n    StringBuilder builder = new StringBuilder();\n    boolean first = true;\n    TermIterator iterator = termData.iterator();\n    for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n      if (!first) {\n        builder.append(' ');\n      }\n      first = false;\n      builder.append(new Term(iterator.field(), term).toString());\n    }\n\n    return builder.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String defaultField) {\n    StringBuilder builder = new StringBuilder();\n    boolean first = true;\n    TermIterator iterator = termData.iterator();\n    for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n      if (!first) {\n        builder.append(' ');\n      }\n      first = false;\n      builder.append(new Term(iterator.field(), term).toString());\n    }\n\n    return builder.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["3a4e4581ae77bec38d26e3094293951a63e5eee7"],"3a4e4581ae77bec38d26e3094293951a63e5eee7":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["a54410d37fe11baed59cc55dcad44db795f732c2"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["3a4e4581ae77bec38d26e3094293951a63e5eee7","8d73510b39df24d6b65de48e56f8dccb136b9d01"],"a54410d37fe11baed59cc55dcad44db795f732c2":["c2042d3e27841c5b60112990fc33559e10ccf6dd"],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d73510b39df24d6b65de48e56f8dccb136b9d01"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2042d3e27841c5b60112990fc33559e10ccf6dd"],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a4e4581ae77bec38d26e3094293951a63e5eee7":["8d73510b39df24d6b65de48e56f8dccb136b9d01","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3a4e4581ae77bec38d26e3094293951a63e5eee7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"a54410d37fe11baed59cc55dcad44db795f732c2":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["a54410d37fe11baed59cc55dcad44db795f732c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}