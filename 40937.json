{"path":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#document(int,FieldSelector).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#document(int,FieldSelector).mjava","pathOld":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#document(int,FieldSelector).mjava","sourceNew":"  /**\n   * Return the {@link org.apache.lucene.document.Document} at the <code>n</code><sup>th</sup>\n   * position.\n     <p>\n   * <b>Warning!</b>\n   * The resulting document is the actual stored document instance\n   * and not a deserialized clone as retuned by an IndexReader\n   * over a {@link org.apache.lucene.store.Directory}.\n   * I.e., if you need to touch the document, clone it first!\n   * <p>\n   * This can also be seen as a feature for live changes of stored values,\n   * but be careful! Adding a field with an name unknown to the index\n   * or to a field with previously no stored values will make\n   * {@link org.apache.lucene.store.instantiated.InstantiatedIndexReader#getFieldNames(org.apache.lucene.index.IndexReader.FieldOption)}\n   * out of sync, causing problems for instance when merging the\n   * instantiated index to another index.\n     <p>\n   * This implementation ignores the field selector! All stored fields are always returned!\n   * <p>\n   *\n   * @param n document number\n   * @param fieldSelector ignored\n   * @return The stored fields of the {@link org.apache.lucene.document.Document} at the nth position\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * \n   * @see org.apache.lucene.document.Fieldable\n   * @see org.apache.lucene.document.FieldSelector\n   * @see org.apache.lucene.document.SetBasedFieldSelector\n   * @see org.apache.lucene.document.LoadFirstFieldSelector\n   */\n  @Override\n  public Document document(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    return document(n);\n  }\n\n","sourceOld":"  /**\n   * Return the {@link org.apache.lucene.document.Document} at the <code>n</code><sup>th</sup>\n   * position.\n     <p>\n   * <b>Warning!</b>\n   * The resulting document is the actual stored document instance\n   * and not a deserialized clone as retuned by an IndexReader\n   * over a {@link org.apache.lucene.store.Directory}.\n   * I.e., if you need to touch the document, clone it first!\n   * <p>\n   * This can also be seen as a feature for live changes of stored values,\n   * but be careful! Adding a field with an name unknown to the index\n   * or to a field with previously no stored values will make\n   * {@link org.apache.lucene.store.instantiated.InstantiatedIndexReader#getFieldNames(org.apache.lucene.index.IndexReader.FieldOption)}\n   * out of sync, causing problems for instance when merging the\n   * instantiated index to another index.\n     <p>\n   * This implementation ignores the field selector! All stored fields are always returned!\n   * <p>\n   *\n   * @param n document number\n   * @param fieldSelector ignored\n   * @return The stored fields of the {@link org.apache.lucene.document.Document} at the nth position\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * \n   * @see org.apache.lucene.document.Fieldable\n   * @see org.apache.lucene.document.FieldSelector\n   * @see org.apache.lucene.document.SetBasedFieldSelector\n   * @see org.apache.lucene.document.LoadFirstFieldSelector\n   */\n  @Override\n  public Document document(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    return document(n);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#document(int,FieldSelector).mjava","sourceNew":null,"sourceOld":"  /**\n   * Return the {@link org.apache.lucene.document.Document} at the <code>n</code><sup>th</sup>\n   * position.\n     <p>\n   * <b>Warning!</b>\n   * The resulting document is the actual stored document instance\n   * and not a deserialized clone as retuned by an IndexReader\n   * over a {@link org.apache.lucene.store.Directory}.\n   * I.e., if you need to touch the document, clone it first!\n   * <p>\n   * This can also be seen as a feature for live changes of stored values,\n   * but be careful! Adding a field with an name unknown to the index\n   * or to a field with previously no stored values will make\n   * {@link org.apache.lucene.store.instantiated.InstantiatedIndexReader#getFieldNames(org.apache.lucene.index.IndexReader.FieldOption)}\n   * out of sync, causing problems for instance when merging the\n   * instantiated index to another index.\n     <p>\n   * This implementation ignores the field selector! All stored fields are always returned!\n   * <p>\n   *\n   * @param n document number\n   * @param fieldSelector ignored\n   * @return The stored fields of the {@link org.apache.lucene.document.Document} at the nth position\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * \n   * @see org.apache.lucene.document.Fieldable\n   * @see org.apache.lucene.document.FieldSelector\n   * @see org.apache.lucene.document.SetBasedFieldSelector\n   * @see org.apache.lucene.document.LoadFirstFieldSelector\n   */\n  @Override\n  public Document document(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    return document(n);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}