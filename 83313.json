{"path":"lucene/backwards/src/test/org/apache/lucene/util/TestNumericUtils#testIntConversionAndOrdering().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/util/TestNumericUtils#testIntConversionAndOrdering().mjava","pathOld":"backwards/src/test/org/apache/lucene/util/TestNumericUtils#testIntConversionAndOrdering().mjava","sourceNew":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    String last=null;\n    for (int i=-100000; i<100000; i++) {\n      String act=NumericUtils.intToPrefixCoded(i);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last\", last.compareTo(act) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, NumericUtils.prefixCodedToInt(act));\n      // next step\n      last=act;\n    }\n  }\n\n","sourceOld":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    String last=null;\n    for (int i=-100000; i<100000; i++) {\n      String act=NumericUtils.intToPrefixCoded(i);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last\", last.compareTo(act) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, NumericUtils.prefixCodedToInt(act));\n      // next step\n      last=act;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/util/TestNumericUtils#testIntConversionAndOrdering().mjava","sourceNew":null,"sourceOld":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    String last=null;\n    for (int i=-100000; i<100000; i++) {\n      String act=NumericUtils.intToPrefixCoded(i);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last\", last.compareTo(act) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, NumericUtils.prefixCodedToInt(act));\n      // next step\n      last=act;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}