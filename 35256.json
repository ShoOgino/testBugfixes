{"path":"src/test/org/apache/lucene/index/store/TestRAMDirectory#testRAMDirectorySize().mjava","commits":[{"id":"5657b669e16b843aac69f0ba7e89def1f93f6ea0","date":1164163669,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"/dev/null","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    final RAMDirectory ramDir = new RAMDirectory(indexDir.getCanonicalPath());\n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.UN_TOKENIZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n            synchronized (ramDir) {\n              assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeefd99c477417e5c7c574228461ebafe92469d4","date":1166460329,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"src/test/org/apache/lucene/index/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    final MockRAMDirectory ramDir = new MockRAMDirectory(indexDir.getCanonicalPath());\n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.UN_TOKENIZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n            synchronized (ramDir) {\n              assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    final RAMDirectory ramDir = new RAMDirectory(indexDir.getCanonicalPath());\n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.UN_TOKENIZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n            synchronized (ramDir) {\n              assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"src/test/org/apache/lucene/index/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    final MockRAMDirectory ramDir = new MockRAMDirectory(indexDir.getCanonicalPath());\n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.UN_TOKENIZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n            synchronized (ramDir) {\n              assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    final MockRAMDirectory ramDir = new MockRAMDirectory(indexDir.getCanonicalPath());\n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.UN_TOKENIZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n            synchronized (ramDir) {\n              assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"src/test/org/apache/lucene/index/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    final MockRAMDirectory ramDir = new MockRAMDirectory(indexDir.getCanonicalPath());\n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n            synchronized (ramDir) {\n              assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    final MockRAMDirectory ramDir = new MockRAMDirectory(indexDir.getCanonicalPath());\n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.UN_TOKENIZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n            synchronized (ramDir) {\n              assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0ccb38525d59e4082f912797fe4d0a7d9bead43","date":1245100309,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"src/test/org/apache/lucene/index/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    final MockRAMDirectory ramDir = new MockRAMDirectory(indexDir.getCanonicalPath());\n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n            synchronized (ramDir) {\n              assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    final MockRAMDirectory ramDir = new MockRAMDirectory(indexDir.getCanonicalPath());\n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n            synchronized (ramDir) {\n              assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeefd99c477417e5c7c574228461ebafe92469d4":["5657b669e16b843aac69f0ba7e89def1f93f6ea0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["eeefd99c477417e5c7c574228461ebafe92469d4"],"5657b669e16b843aac69f0ba7e89def1f93f6ea0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0ccb38525d59e4082f912797fe4d0a7d9bead43"],"f0ccb38525d59e4082f912797fe4d0a7d9bead43":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"]},"commit2Childs":{"eeefd99c477417e5c7c574228461ebafe92469d4":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5657b669e16b843aac69f0ba7e89def1f93f6ea0"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["f0ccb38525d59e4082f912797fe4d0a7d9bead43"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"5657b669e16b843aac69f0ba7e89def1f93f6ea0":["eeefd99c477417e5c7c574228461ebafe92469d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f0ccb38525d59e4082f912797fe4d0a7d9bead43":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}