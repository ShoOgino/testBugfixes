{"path":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testCodecUsesOwnSortedBytesEachTime().mjava","commits":[{"id":"c62e7afee69a9aa7036185473ffd37ed723755b3","date":1359388738,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testCodecUsesOwnSortedBytesEachTime().mjava","pathOld":"/dev/null","sourceNew":"  public void testCodecUsesOwnSortedBytesEachTime() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"bar!\")));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    dv.get(0, scratch);\n    assertEquals(\"foo!\", scratch.utf8ToString());\n    \n    BytesRef scratch2 = new BytesRef();\n    dv.get(1, scratch2);\n    assertEquals(\"bar!\", scratch2.utf8ToString());\n    // check scratch is still valid\n    assertEquals(\"foo!\", scratch.utf8ToString());\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ec08217282b5e9df023dcdff55c745ff68b1c7d","date":1359392781,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testCodecUsesOwnSortedBytesEachTime().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testCodecUsesOwnSortedBytesEachTime().mjava","sourceNew":"  public void testCodecUsesOwnSortedBytesEachTime() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setCodec(getCodec());\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, conf);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"bar!\")));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    dv.get(0, scratch);\n    assertEquals(\"foo!\", scratch.utf8ToString());\n    \n    BytesRef scratch2 = new BytesRef();\n    dv.get(1, scratch2);\n    assertEquals(\"bar!\", scratch2.utf8ToString());\n    // check scratch is still valid\n    assertEquals(\"foo!\", scratch.utf8ToString());\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testCodecUsesOwnSortedBytesEachTime() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"bar!\")));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    dv.get(0, scratch);\n    assertEquals(\"foo!\", scratch.utf8ToString());\n    \n    BytesRef scratch2 = new BytesRef();\n    dv.get(1, scratch2);\n    assertEquals(\"bar!\", scratch2.utf8ToString());\n    // check scratch is still valid\n    assertEquals(\"foo!\", scratch.utf8ToString());\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c62e7afee69a9aa7036185473ffd37ed723755b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ec08217282b5e9df023dcdff55c745ff68b1c7d":["c62e7afee69a9aa7036185473ffd37ed723755b3"]},"commit2Childs":{"c62e7afee69a9aa7036185473ffd37ed723755b3":["2ec08217282b5e9df023dcdff55c745ff68b1c7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c62e7afee69a9aa7036185473ffd37ed723755b3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2ec08217282b5e9df023dcdff55c745ff68b1c7d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2ec08217282b5e9df023dcdff55c745ff68b1c7d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}