{"path":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#circleToPoly(double,double,double).mjava","commits":[{"id":"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d","date":1437181221,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#circleToPoly(double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Converts a given circle (defined as a point/radius) to an approximated line-segment polygon\n   *\n   * @param lon longitudinal center of circle (in degrees)\n   * @param lat latitudinal center of circle (in degrees)\n   * @param radius distance radius of circle (in meters)\n   * @return a list of lon/lat points representing the circle\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public static ArrayList<double[]> circleToPoly(final double lon, final double lat, final double radius) {\n    double angle;\n    // a little under-sampling (to limit the number of polygonal points): using archimedes estimation of pi\n    final int sides = 25;\n    ArrayList<double[]> geometry = new ArrayList();\n    double[] lons = new double[sides];\n    double[] lats = new double[sides];\n\n    double[] pt = new double[2];\n    final int sidesLen = sides-1;\n    for (int i=0; i<sidesLen; ++i) {\n      angle = (i*360/sides);\n      pt = GeoProjectionUtils.pointFromLonLatBearing(lon, lat, angle, radius, pt);\n      lons[i] = pt[0];\n      lats[i] = pt[1];\n    }\n    // close the poly\n    lons[sidesLen] = lons[0];\n    lats[sidesLen] = lats[0];\n    geometry.add(lons);\n    geometry.add(lats);\n\n    return geometry;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07c50cb1eca5629cac5b6702dd0f5e06157af61a","date":1445464748,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#circleToPoly(double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#circleToPoly(double,double,double).mjava","sourceNew":"  /**\n   * Converts a given circle (defined as a point/radius) to an approximated line-segment polygon\n   *\n   * @param lon longitudinal center of circle (in degrees)\n   * @param lat latitudinal center of circle (in degrees)\n   * @param radiusMeters distance radius of circle (in meters)\n   * @return a list of lon/lat points representing the circle\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public static ArrayList<double[]> circleToPoly(final double lon, final double lat, final double radiusMeters) {\n    double angle;\n    // a little under-sampling (to limit the number of polygonal points): using archimedes estimation of pi\n    final int sides = 25;\n    ArrayList<double[]> geometry = new ArrayList();\n    double[] lons = new double[sides];\n    double[] lats = new double[sides];\n\n    double[] pt = new double[2];\n    final int sidesLen = sides-1;\n    for (int i=0; i<sidesLen; ++i) {\n      angle = (i*360/sides);\n      pt = GeoProjectionUtils.pointFromLonLatBearing(lon, lat, angle, radiusMeters, pt);\n      lons[i] = pt[0];\n      lats[i] = pt[1];\n    }\n    // close the poly\n    lons[sidesLen] = lons[0];\n    lats[sidesLen] = lats[0];\n    geometry.add(lons);\n    geometry.add(lats);\n\n    return geometry;\n  }\n\n","sourceOld":"  /**\n   * Converts a given circle (defined as a point/radius) to an approximated line-segment polygon\n   *\n   * @param lon longitudinal center of circle (in degrees)\n   * @param lat latitudinal center of circle (in degrees)\n   * @param radius distance radius of circle (in meters)\n   * @return a list of lon/lat points representing the circle\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public static ArrayList<double[]> circleToPoly(final double lon, final double lat, final double radius) {\n    double angle;\n    // a little under-sampling (to limit the number of polygonal points): using archimedes estimation of pi\n    final int sides = 25;\n    ArrayList<double[]> geometry = new ArrayList();\n    double[] lons = new double[sides];\n    double[] lats = new double[sides];\n\n    double[] pt = new double[2];\n    final int sidesLen = sides-1;\n    for (int i=0; i<sidesLen; ++i) {\n      angle = (i*360/sides);\n      pt = GeoProjectionUtils.pointFromLonLatBearing(lon, lat, angle, radius, pt);\n      lons[i] = pt[0];\n      lats[i] = pt[1];\n    }\n    // close the poly\n    lons[sidesLen] = lons[0];\n    lats[sidesLen] = lats[0];\n    geometry.add(lons);\n    geometry.add(lats);\n\n    return geometry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33bb6bd7295e66f93f182556f5353b97243e62ba","date":1449525768,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#circleToPoly(double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#circleToPoly(double,double,double).mjava","sourceNew":"  /**\n   * Converts a given circle (defined as a point/radius) to an approximated line-segment polygon\n   *\n   * @param lon longitudinal center of circle (in degrees)\n   * @param lat latitudinal center of circle (in degrees)\n   * @param radiusMeters distance radius of circle (in meters)\n   * @return a list of lon/lat points representing the circle\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public static ArrayList<double[]> circleToPoly(final double lon, final double lat, final double radiusMeters) {\n    double angle;\n    // a little under-sampling (to limit the number of polygonal points): using archimedes estimation of pi\n    final int sides = 25;\n    ArrayList<double[]> geometry = new ArrayList();\n    double[] lons = new double[sides];\n    double[] lats = new double[sides];\n\n    double[] pt = new double[2];\n    final int sidesLen = sides-1;\n    for (int i=0; i<sidesLen; ++i) {\n      angle = (i*360/sides);\n      pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(lon, lat, angle, radiusMeters, pt);\n      lons[i] = pt[0];\n      lats[i] = pt[1];\n    }\n    // close the poly\n    lons[sidesLen] = lons[0];\n    lats[sidesLen] = lats[0];\n    geometry.add(lons);\n    geometry.add(lats);\n\n    return geometry;\n  }\n\n","sourceOld":"  /**\n   * Converts a given circle (defined as a point/radius) to an approximated line-segment polygon\n   *\n   * @param lon longitudinal center of circle (in degrees)\n   * @param lat latitudinal center of circle (in degrees)\n   * @param radiusMeters distance radius of circle (in meters)\n   * @return a list of lon/lat points representing the circle\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public static ArrayList<double[]> circleToPoly(final double lon, final double lat, final double radiusMeters) {\n    double angle;\n    // a little under-sampling (to limit the number of polygonal points): using archimedes estimation of pi\n    final int sides = 25;\n    ArrayList<double[]> geometry = new ArrayList();\n    double[] lons = new double[sides];\n    double[] lats = new double[sides];\n\n    double[] pt = new double[2];\n    final int sidesLen = sides-1;\n    for (int i=0; i<sidesLen; ++i) {\n      angle = (i*360/sides);\n      pt = GeoProjectionUtils.pointFromLonLatBearing(lon, lat, angle, radiusMeters, pt);\n      lons[i] = pt[0];\n      lats[i] = pt[1];\n    }\n    // close the poly\n    lons[sidesLen] = lons[0];\n    lats[sidesLen] = lats[0];\n    geometry.add(lons);\n    geometry.add(lats);\n\n    return geometry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#circleToPoly(double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#circleToPoly(double,double,double).mjava","sourceNew":"  /**\n   * Converts a given circle (defined as a point/radius) to an approximated line-segment polygon\n   *\n   * @param lon longitudinal center of circle (in degrees)\n   * @param lat latitudinal center of circle (in degrees)\n   * @param radiusMeters distance radius of circle (in meters)\n   * @return a list of lon/lat points representing the circle\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public static ArrayList<double[]> circleToPoly(final double lon, final double lat, final double radiusMeters) {\n    double angle;\n    // a little under-sampling (to limit the number of polygonal points): using archimedes estimation of pi\n    final int sides = 25;\n    ArrayList<double[]> geometry = new ArrayList();\n    double[] lons = new double[sides];\n    double[] lats = new double[sides];\n\n    double[] pt = new double[2];\n    final int sidesLen = sides-1;\n    for (int i=0; i<sidesLen; ++i) {\n      angle = (i*360/sides);\n      pt = pointFromLonLatBearingGreatCircle(lon, lat, angle, radiusMeters, pt);\n      lons[i] = pt[0];\n      lats[i] = pt[1];\n    }\n    // close the poly\n    lons[sidesLen] = lons[0];\n    lats[sidesLen] = lats[0];\n    geometry.add(lons);\n    geometry.add(lats);\n\n    return geometry;\n  }\n\n","sourceOld":"  /**\n   * Converts a given circle (defined as a point/radius) to an approximated line-segment polygon\n   *\n   * @param lon longitudinal center of circle (in degrees)\n   * @param lat latitudinal center of circle (in degrees)\n   * @param radiusMeters distance radius of circle (in meters)\n   * @return a list of lon/lat points representing the circle\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public static ArrayList<double[]> circleToPoly(final double lon, final double lat, final double radiusMeters) {\n    double angle;\n    // a little under-sampling (to limit the number of polygonal points): using archimedes estimation of pi\n    final int sides = 25;\n    ArrayList<double[]> geometry = new ArrayList();\n    double[] lons = new double[sides];\n    double[] lats = new double[sides];\n\n    double[] pt = new double[2];\n    final int sidesLen = sides-1;\n    for (int i=0; i<sidesLen; ++i) {\n      angle = (i*360/sides);\n      pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(lon, lat, angle, radiusMeters, pt);\n      lons[i] = pt[0];\n      lats[i] = pt[1];\n    }\n    // close the poly\n    lons[sidesLen] = lons[0];\n    lats[sidesLen] = lats[0];\n    geometry.add(lons);\n    geometry.add(lats);\n\n    return geometry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#circleToPoly(double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#circleToPoly(double,double,double).mjava","sourceNew":"  /**\n   * Converts a given circle (defined as a point/radius) to an approximated line-segment polygon\n   *\n   * @param lon          longitudinal center of circle (in degrees)\n   * @param lat          latitudinal center of circle (in degrees)\n   * @param radiusMeters distance radius of circle (in meters)\n   * @return a list of lon/lat points representing the circle\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public static ArrayList<double[]> circleToPoly(final double lon, final double lat, final double radiusMeters) {\n    double angle;\n    // a little under-sampling (to limit the number of polygonal points): using archimedes estimation of pi\n    final int sides = 25;\n    ArrayList<double[]> geometry = new ArrayList();\n    double[] lons = new double[sides];\n    double[] lats = new double[sides];\n\n    double[] pt = new double[2];\n    final int sidesLen = sides - 1;\n    for (int i = 0; i < sidesLen; ++i) {\n      angle = (i * 360 / sides);\n      pt = pointFromLonLatBearingGreatCircle(lon, lat, angle, radiusMeters, pt);\n      lons[i] = pt[0];\n      lats[i] = pt[1];\n    }\n    // close the poly\n    lons[sidesLen] = lons[0];\n    lats[sidesLen] = lats[0];\n    geometry.add(lons);\n    geometry.add(lats);\n\n    return geometry;\n  }\n\n","sourceOld":"  /**\n   * Converts a given circle (defined as a point/radius) to an approximated line-segment polygon\n   *\n   * @param lon longitudinal center of circle (in degrees)\n   * @param lat latitudinal center of circle (in degrees)\n   * @param radiusMeters distance radius of circle (in meters)\n   * @return a list of lon/lat points representing the circle\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public static ArrayList<double[]> circleToPoly(final double lon, final double lat, final double radiusMeters) {\n    double angle;\n    // a little under-sampling (to limit the number of polygonal points): using archimedes estimation of pi\n    final int sides = 25;\n    ArrayList<double[]> geometry = new ArrayList();\n    double[] lons = new double[sides];\n    double[] lats = new double[sides];\n\n    double[] pt = new double[2];\n    final int sidesLen = sides-1;\n    for (int i=0; i<sidesLen; ++i) {\n      angle = (i*360/sides);\n      pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(lon, lat, angle, radiusMeters, pt);\n      lons[i] = pt[0];\n      lats[i] = pt[1];\n    }\n    // close the poly\n    lons[sidesLen] = lons[0];\n    lats[sidesLen] = lats[0];\n    geometry.add(lons);\n    geometry.add(lats);\n\n    return geometry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["33bb6bd7295e66f93f182556f5353b97243e62ba","937923083e4d137932336fc80f3d78758ff698a6"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["a4c5421d43870949fb33be27fc9cba0f8f3a7c8d"],"937923083e4d137932336fc80f3d78758ff698a6":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"],"33bb6bd7295e66f93f182556f5353b97243e62ba":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"]},"commit2Childs":{"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4c5421d43870949fb33be27fc9cba0f8f3a7c8d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33bb6bd7295e66f93f182556f5353b97243e62ba":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}