{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","commits":[{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\" );\n    expectError(\"replica\",\"hello\", \"not a valid number\" );\n    assertEquals( 1l,   Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\",   Clause.validate(\"collection\", \"c\", true));\n    assertEquals( \"s\",   Clause.validate(\"shard\", \"s\",true));\n    assertEquals( \"overseer\",   Clause.validate(\"nodeRole\", \"overseer\",true));\n\n    expectError(\"nodeRole\", \"wrong\",\"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\",\"must be less than \");\n    expectError(\"sysLoadAvg\", 101,\"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\",\"must be greater than\");\n    expectError(\"sysLoadAvg\", -1,\"must be greater than\");\n\n    assertEquals(12.46d,Clause.validate(\"sysLoadAvg\", \"12.46\",true));\n    assertEquals(12.46,Clause.validate(\"sysLoadAvg\", 12.46d,true));\n\n\n    expectError(\"ip_1\", \"300\",\"must be less than \");\n    expectError(\"ip_1\", 300,\"must be less than \");\n    expectError(\"ip_1\", \"-1\",\"must be greater than\");\n    expectError(\"ip_1\", -1,\"must be greater than\");\n\n    assertEquals(1l,Clause.validate(\"ip_1\", \"1\",true));\n\n    expectError(\"heapUsage\", \"-1\",\"must be greater than\");\n    expectError(\"heapUsage\", -1,\"must be greater than\");\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", \"69.9\",true));\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", 69.9d,true));\n\n    expectError(\"port\", \"70000\",\"must be less than \");\n    expectError(\"port\", 70000,\"must be less than \");\n    expectError(\"port\", \"0\",\"must be greater than\");\n    expectError(\"port\", 0,\"must be greater than\");\n\n    expectError(\"cores\", \"-1\",\"must be greater than\");\n\n\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\" );\n    expectError(\"replica\",\"hello\", \"not a valid number\" );\n    assertEquals( 1l,   Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\",   Clause.validate(\"collection\", \"c\", true));\n    assertEquals( \"s\",   Clause.validate(\"shard\", \"s\",true));\n    assertEquals( \"overseer\",   Clause.validate(\"nodeRole\", \"overseer\",true));\n\n    expectError(\"nodeRole\", \"wrong\",\"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\",\"must be less than \");\n    expectError(\"sysLoadAvg\", 101,\"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\",\"must be greater than\");\n    expectError(\"sysLoadAvg\", -1,\"must be greater than\");\n\n    assertEquals(12.46d,Clause.validate(\"sysLoadAvg\", \"12.46\",true));\n    assertEquals(12.46,Clause.validate(\"sysLoadAvg\", 12.46d,true));\n\n\n    expectError(\"ip_1\", \"300\",\"must be less than \");\n    expectError(\"ip_1\", 300,\"must be less than \");\n    expectError(\"ip_1\", \"-1\",\"must be greater than\");\n    expectError(\"ip_1\", -1,\"must be greater than\");\n\n    assertEquals(1l,Clause.validate(\"ip_1\", \"1\",true));\n\n    expectError(\"heapUsage\", \"-1\",\"must be greater than\");\n    expectError(\"heapUsage\", -1,\"must be greater than\");\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", \"69.9\",true));\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", 69.9d,true));\n\n    expectError(\"port\", \"70000\",\"must be less than \");\n    expectError(\"port\", 70000,\"must be less than \");\n    expectError(\"port\", \"0\",\"must be greater than\");\n    expectError(\"port\", 0,\"must be greater than\");\n\n    expectError(\"cores\", \"-1\",\"must be greater than\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\" );\n    expectError(\"replica\",\"hello\", \"not a valid number\" );\n    assertEquals( 1l,   Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\",   Clause.validate(\"collection\", \"c\", true));\n    assertEquals( \"s\",   Clause.validate(\"shard\", \"s\",true));\n    assertEquals( \"overseer\",   Clause.validate(\"nodeRole\", \"overseer\",true));\n\n    expectError(\"nodeRole\", \"wrong\",\"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\",\"must be less than \");\n    expectError(\"sysLoadAvg\", 101,\"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\",\"must be greater than\");\n    expectError(\"sysLoadAvg\", -1,\"must be greater than\");\n\n    assertEquals(12.46d,Clause.validate(\"sysLoadAvg\", \"12.46\",true));\n    assertEquals(12.46,Clause.validate(\"sysLoadAvg\", 12.46d,true));\n\n\n    expectError(\"ip_1\", \"300\",\"must be less than \");\n    expectError(\"ip_1\", 300,\"must be less than \");\n    expectError(\"ip_1\", \"-1\",\"must be greater than\");\n    expectError(\"ip_1\", -1,\"must be greater than\");\n\n    assertEquals(1l,Clause.validate(\"ip_1\", \"1\",true));\n\n    expectError(\"heapUsage\", \"-1\",\"must be greater than\");\n    expectError(\"heapUsage\", -1,\"must be greater than\");\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", \"69.9\",true));\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", 69.9d,true));\n\n    expectError(\"port\", \"70000\",\"must be less than \");\n    expectError(\"port\", 70000,\"must be less than \");\n    expectError(\"port\", \"0\",\"must be greater than\");\n    expectError(\"port\", 0,\"must be greater than\");\n\n    expectError(\"cores\", \"-1\",\"must be greater than\");\n\n\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\" );\n    expectError(\"replica\",\"hello\", \"not a valid number\" );\n    assertEquals( 1l,   Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\",   Clause.validate(\"collection\", \"c\", true));\n    assertEquals( \"s\",   Clause.validate(\"shard\", \"s\",true));\n    assertEquals( \"overseer\",   Clause.validate(\"nodeRole\", \"overseer\",true));\n\n    expectError(\"nodeRole\", \"wrong\",\"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\",\"must be less than \");\n    expectError(\"sysLoadAvg\", 101,\"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\",\"must be greater than\");\n    expectError(\"sysLoadAvg\", -1,\"must be greater than\");\n\n    assertEquals(12.46d,Clause.validate(\"sysLoadAvg\", \"12.46\",true));\n    assertEquals(12.46,Clause.validate(\"sysLoadAvg\", 12.46d,true));\n\n\n    expectError(\"ip_1\", \"300\",\"must be less than \");\n    expectError(\"ip_1\", 300,\"must be less than \");\n    expectError(\"ip_1\", \"-1\",\"must be greater than\");\n    expectError(\"ip_1\", -1,\"must be greater than\");\n\n    assertEquals(1l,Clause.validate(\"ip_1\", \"1\",true));\n\n    expectError(\"heapUsage\", \"-1\",\"must be greater than\");\n    expectError(\"heapUsage\", -1,\"must be greater than\");\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", \"69.9\",true));\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", 69.9d,true));\n\n    expectError(\"port\", \"70000\",\"must be less than \");\n    expectError(\"port\", 70000,\"must be less than \");\n    expectError(\"port\", \"0\",\"must be greater than\");\n    expectError(\"port\", 0,\"must be greater than\");\n\n    expectError(\"cores\", \"-1\",\"must be greater than\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"/dev/null","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\" );\n    expectError(\"replica\",\"hello\", \"not a valid number\" );\n    assertEquals( 1l,   Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\",   Clause.validate(\"collection\", \"c\", true));\n    assertEquals( \"s\",   Clause.validate(\"shard\", \"s\",true));\n    assertEquals( \"overseer\",   Clause.validate(\"nodeRole\", \"overseer\",true));\n\n    expectError(\"nodeRole\", \"wrong\",\"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\",\"must be less than \");\n    expectError(\"sysLoadAvg\", 101,\"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\",\"must be greater than\");\n    expectError(\"sysLoadAvg\", -1,\"must be greater than\");\n\n    assertEquals(12.46d,Clause.validate(\"sysLoadAvg\", \"12.46\",true));\n    assertEquals(12.46,Clause.validate(\"sysLoadAvg\", 12.46d,true));\n\n\n    expectError(\"ip_1\", \"300\",\"must be less than \");\n    expectError(\"ip_1\", 300,\"must be less than \");\n    expectError(\"ip_1\", \"-1\",\"must be greater than\");\n    expectError(\"ip_1\", -1,\"must be greater than\");\n\n    assertEquals(1l,Clause.validate(\"ip_1\", \"1\",true));\n\n    expectError(\"heapUsage\", \"-1\",\"must be greater than\");\n    expectError(\"heapUsage\", -1,\"must be greater than\");\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", \"69.9\",true));\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", 69.9d,true));\n\n    expectError(\"port\", \"70000\",\"must be less than \");\n    expectError(\"port\", 70000,\"must be less than \");\n    expectError(\"port\", \"0\",\"must be greater than\");\n    expectError(\"port\", 0,\"must be greater than\");\n\n    expectError(\"cores\", \"-1\",\"must be greater than\");\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1l, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1l, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\" );\n    expectError(\"replica\",\"hello\", \"not a valid number\" );\n    assertEquals( 1l,   Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\",   Clause.validate(\"collection\", \"c\", true));\n    assertEquals( \"s\",   Clause.validate(\"shard\", \"s\",true));\n    assertEquals( \"overseer\",   Clause.validate(\"nodeRole\", \"overseer\",true));\n\n    expectError(\"nodeRole\", \"wrong\",\"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\",\"must be less than \");\n    expectError(\"sysLoadAvg\", 101,\"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\",\"must be greater than\");\n    expectError(\"sysLoadAvg\", -1,\"must be greater than\");\n\n    assertEquals(12.46d,Clause.validate(\"sysLoadAvg\", \"12.46\",true));\n    assertEquals(12.46,Clause.validate(\"sysLoadAvg\", 12.46d,true));\n\n\n    expectError(\"ip_1\", \"300\",\"must be less than \");\n    expectError(\"ip_1\", 300,\"must be less than \");\n    expectError(\"ip_1\", \"-1\",\"must be greater than\");\n    expectError(\"ip_1\", -1,\"must be greater than\");\n\n    assertEquals(1l,Clause.validate(\"ip_1\", \"1\",true));\n\n    expectError(\"heapUsage\", \"-1\",\"must be greater than\");\n    expectError(\"heapUsage\", -1,\"must be greater than\");\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", \"69.9\",true));\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", 69.9d,true));\n\n    expectError(\"port\", \"70000\",\"must be less than \");\n    expectError(\"port\", 70000,\"must be less than \");\n    expectError(\"port\", \"0\",\"must be greater than\");\n    expectError(\"port\", 0,\"must be greater than\");\n\n    expectError(\"cores\", \"-1\",\"must be greater than\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33ae23947c41339ea2b352422bb762dfb4a17077","date":1524235117,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1L, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1l, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1l, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '1.23', node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '<1.23', node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '!1.23', node:'#ANY'}\"));\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: 1.23, node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause =  Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '33%', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue( clause.getReplica().isPass(2));\n\n    clause =  Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '3 - 5', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL,  clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0 , range.min);\n    assertEquals(5.0 , range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(new Double(1.0), clause.replica.delta(6));\n    assertEquals(new Double(-1.0), clause.replica.delta(2));\n    assertEquals(new Double(0.0), clause.replica.delta(4));\n\n\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1L, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9377904aee9eb531b6368b0af6b8a531d7f7b0a4","date":1530247994,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '1.23', node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '<1.23', node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '!1.23', node:'#ANY'}\"));\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: 1.23, node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause =  Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '33%', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue( clause.getReplica().isPass(2));\n\n    clause =  Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '3 - 5', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL,  clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0 , range.min);\n    assertEquals(5.0 , range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(new Double(1.0), clause.replica.delta(6));\n    assertEquals(new Double(-1.0), clause.replica.delta(2));\n    assertEquals(new Double(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '-33%', node:'#ANY'}\")));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: 'x%', node:'#ANY'}\")));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '20%-33%', node:'#ANY'}\")));\n\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '1.23', node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '<1.23', node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '!1.23', node:'#ANY'}\"));\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: 1.23, node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause =  Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '33%', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue( clause.getReplica().isPass(2));\n\n    clause =  Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '3 - 5', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL,  clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0 , range.min);\n    assertEquals(5.0 , range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(new Double(1.0), clause.replica.delta(6));\n    assertEquals(new Double(-1.0), clause.replica.delta(2));\n    assertEquals(new Double(0.0), clause.replica.delta(4));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6bec22994bec86702ad05304ae983f7be5b5a7","date":1530715192,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '1.23', node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '<1.23', node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '!1.23', node:'#ANY'}\"));\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: 1.23, node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause =  Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '33%', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue( clause.getReplica().isPass(2));\n\n    clause =  Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '3 - 5', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL,  clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0 , range.min);\n    assertEquals(5.0 , range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(new Double(1.0), clause.replica.delta(6));\n    assertEquals(new Double(-1.0), clause.replica.delta(2));\n    assertEquals(new Double(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '-33%', node:'#ANY'}\")));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: 'x%', node:'#ANY'}\")));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '20%-33%', node:'#ANY'}\")));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '#EQUAL', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '#EQUAL', node:'node_1'}\")));\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '1.23', node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '<1.23', node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '!1.23', node:'#ANY'}\"));\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: 1.23, node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause =  Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '33%', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue( clause.getReplica().isPass(2));\n\n    clause =  Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '3 - 5', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL,  clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0 , range.min);\n    assertEquals(5.0 , range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(new Double(1.0), clause.replica.delta(6));\n    assertEquals(new Double(-1.0), clause.replica.delta(2));\n    assertEquals(new Double(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '-33%', node:'#ANY'}\")));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: 'x%', node:'#ANY'}\")));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '20%-33%', node:'#ANY'}\")));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '1.23', node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '<1.23', node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '!1.23', node:'#ANY'}\"));\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: 1.23, node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause =  Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '33%', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue( clause.getReplica().isPass(2));\n\n    clause =  Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '3 - 5', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL,  clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0 , range.min);\n    assertEquals(5.0 , range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(new Double(1.0), clause.replica.delta(6));\n    assertEquals(new Double(-1.0), clause.replica.delta(2));\n    assertEquals(new Double(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '-33%', node:'#ANY'}\")));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: 'x%', node:'#ANY'}\")));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '20%-33%', node:'#ANY'}\")));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '#EQUAL', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '#EQUAL', node:'node_1'}\")));\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1L, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2874ca85dea1fabb662494e4166584c3b7cd2873","date":1531591685,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '1.23', node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '<1.23', node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '!1.23', node:'#ANY'}\"));\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: 1.23, node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause =  Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '33%', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue( clause.getReplica().isPass(2));\n\n    clause =  Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '3 - 5', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL,  clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0 , range.min);\n    assertEquals(5.0 , range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(Double.valueOf(1.0), clause.replica.delta(6));\n    assertEquals(Double.valueOf(-1.0), clause.replica.delta(2));\n    assertEquals(Double.valueOf(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '-33%', node:'#ANY'}\")));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: 'x%', node:'#ANY'}\")));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '20%-33%', node:'#ANY'}\")));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '#EQUAL', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '#EQUAL', node:'node_1'}\")));\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '1.23', node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '<1.23', node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '!1.23', node:'#ANY'}\"));\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: 1.23, node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause =  Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '33%', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue( clause.getReplica().isPass(2));\n\n    clause =  Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '3 - 5', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL,  clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0 , range.min);\n    assertEquals(5.0 , range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(new Double(1.0), clause.replica.delta(6));\n    assertEquals(new Double(-1.0), clause.replica.delta(2));\n    assertEquals(new Double(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '-33%', node:'#ANY'}\")));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: 'x%', node:'#ANY'}\")));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '20%-33%', node:'#ANY'}\")));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '#EQUAL', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '#EQUAL', node:'node_1'}\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78231225260fb5b3bf9920f203d71477d5501c65","date":1531726165,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '!1.23', node:'#ANY'}\");\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue( clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL,  clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0 , range.min);\n    assertEquals(5.0 , range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(new Double(1.0), clause.replica.delta(6));\n    assertEquals(new Double(-1.0), clause.replica.delta(2));\n    assertEquals(new Double(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, Clause.ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '1.23', node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '<1.23', node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '!1.23', node:'#ANY'}\"));\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: 1.23, node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause =  Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '33%', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue( clause.getReplica().isPass(2));\n\n    clause =  Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '3 - 5', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL,  clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0 , range.min);\n    assertEquals(5.0 , range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(new Double(1.0), clause.replica.delta(6));\n    assertEquals(new Double(-1.0), clause.replica.delta(2));\n    assertEquals(new Double(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '-33%', node:'#ANY'}\")));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: 'x%', node:'#ANY'}\")));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '20%-33%', node:'#ANY'}\")));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '#EQUAL', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '#EQUAL', node:'node_1'}\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10a24d2afdf00bbe1013706b80c989315772dc9","date":1531726431,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '1.23', node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '<1.23', node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '!1.23', node:'#ANY'}\"));\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: 1.23, node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause =  Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '33%', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue( clause.getReplica().isPass(2));\n\n    clause =  Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '3 - 5', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL,  clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0 , range.min);\n    assertEquals(5.0 , range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(new Double(1.0), clause.replica.delta(6));\n    assertEquals(new Double(-1.0), clause.replica.delta(2));\n    assertEquals(new Double(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '-33%', node:'#ANY'}\")));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: 'x%', node:'#ANY'}\")));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '20%-33%', node:'#ANY'}\")));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '#EQUAL', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '#EQUAL', node:'node_1'}\")));\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '!1.23', node:'#ANY'}\");\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue( clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL,  clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0 , range.min);\n    assertEquals(5.0 , range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(new Double(1.0), clause.replica.delta(6));\n    assertEquals(new Double(-1.0), clause.replica.delta(2));\n    assertEquals(new Double(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, Clause.ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f91616b62c917fffa5286c4ef2d21b10cc56f8e","date":1531726562,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '!1.23', node:'#ANY'}\");\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue( clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL,  clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0 , range.min);\n    assertEquals(5.0 , range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(new Double(1.0), clause.replica.delta(6));\n    assertEquals(new Double(-1.0), clause.replica.delta(2));\n    assertEquals(new Double(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, Clause.ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '1.23', node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '<1.23', node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '!1.23', node:'#ANY'}\"));\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: 1.23, node:'#ANY'}\"));\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause =  Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '33%', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue( clause.getReplica().isPass(2));\n\n    clause =  Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '3 - 5', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL,  clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0 , range.min);\n    assertEquals(5.0 , range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(new Double(1.0), clause.replica.delta(6));\n    assertEquals(new Double(-1.0), clause.replica.delta(2));\n    assertEquals(new Double(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '-33%', node:'#ANY'}\")));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: 'x%', node:'#ANY'}\")));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '20%-33%', node:'#ANY'}\")));\n\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '#EQUAL', node:'#ANY'}\"));\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica: '#EQUAL', node:'node_1'}\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '!1.23', node:'#ANY'}\");\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue( clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL,  clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0 , range.min);\n    assertEquals(5.0 , range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(Double.valueOf(1.0), clause.replica.delta(6));\n    assertEquals(Double.valueOf(-1.0), clause.replica.delta(2));\n    assertEquals(Double.valueOf(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, Clause.ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '!1.23', node:'#ANY'}\");\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue( clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL,  clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0 , range.min);\n    assertEquals(5.0 , range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(new Double(1.0), clause.replica.delta(6));\n    assertEquals(new Double(-1.0), clause.replica.delta(2));\n    assertEquals(new Double(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, Clause.ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cd9806d2cef5f74400b2c18d3e38b8af25e8485","date":1531806022,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '!1.23', node:'#ANY'}\");\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue( clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL,  clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0 , range.min);\n    assertEquals(5.0 , range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(Double.valueOf(1.0), clause.replica.delta(6));\n    assertEquals(Double.valueOf(-1.0), clause.replica.delta(2));\n    assertEquals(Double.valueOf(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, Clause.ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n\n    clause = Clause.create(\"{replica: '#ALL',  freedisk:'>20%'}\");\n    clause = Clause.create(\"{replica: '#ALL',  sysprop.zone :'west'}\");\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '!1.23', node:'#ANY'}\");\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue( clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL,  clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0 , range.min);\n    assertEquals(5.0 , range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(Double.valueOf(1.0), clause.replica.delta(6));\n    assertEquals(Double.valueOf(-1.0), clause.replica.delta(2));\n    assertEquals(Double.valueOf(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, Clause.ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '!1.23', node:'#ANY'}\");\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue( clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL,  clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0 , range.min);\n    assertEquals(5.0 , range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(Double.valueOf(1.0), clause.replica.delta(6));\n    assertEquals(Double.valueOf(-1.0), clause.replica.delta(2));\n    assertEquals(Double.valueOf(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, Clause.ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n\n    clause = Clause.create(\"{replica: '#ALL',  freedisk:'>20%'}\");\n    clause = Clause.create(\"{replica: '#ALL',  sysprop.zone :'west'}\");\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1L, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733","date":1532604765,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '!1.23', node:'#ANY'}\");\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue( clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL,  clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0 , range.min);\n    assertEquals(5.0 , range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(Double.valueOf(1.0), clause.replica.delta(6));\n    assertEquals(Double.valueOf(-1.0), clause.replica.delta(2));\n    assertEquals(Double.valueOf(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, Clause.ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n    try {\n      Clause.create(\"{replica:0, 'ip_1':'<30%'}\");\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n    }\n\n    clause = Clause.create(\"{replica: '#ALL',  freedisk:'>20%'}\");\n    clause = Clause.create(\"{replica: '#ALL',  sysprop.zone :'west'}\");\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: [3,4] ,  freedisk:'>20'}\"));\n    clause = Clause.create(\"{replica: 3 ,  port:[8983, 7574]}\");\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['east', ' ', 'west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :[]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['!east','west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:[east, west]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:'#EACH'}\"));\n    clause = Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east, west]}\");\n    assertEquals(Clause.ComputedType.EQUAL, clause.replica.computedType);\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east]}\"));\n\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '!1.23', node:'#ANY'}\");\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue( clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL,  clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0 , range.min);\n    assertEquals(5.0 , range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(Double.valueOf(1.0), clause.replica.delta(6));\n    assertEquals(Double.valueOf(-1.0), clause.replica.delta(2));\n    assertEquals(Double.valueOf(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, Clause.ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n\n    clause = Clause.create(\"{replica: '#ALL',  freedisk:'>20%'}\");\n    clause = Clause.create(\"{replica: '#ALL',  sysprop.zone :'west'}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52316373036b9f161a08896e7c9ebf4389790a47","date":1533187246,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '!1.23', node:'#ANY'}\");\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue( clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL,  clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0 , range.min);\n    assertEquals(5.0 , range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(Double.valueOf(1.0), clause.replica.delta(6));\n    assertEquals(Double.valueOf(-1.0), clause.replica.delta(2));\n    assertEquals(Double.valueOf(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, Clause.ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n    try {\n      Clause.create(\"{replica:0, 'ip_1':'<30%'}\");\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n    }\n\n    clause = Clause.create(\"{replica: '#ALL',  freedisk:'>20%'}\");\n    clause = Clause.create(\"{replica: '#ALL',  sysprop.zone :'west'}\");\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: [3,4] ,  freedisk:'>20'}\"));\n    clause = Clause.create(\"{replica: 3 ,  port:[8983, 7574]}\");\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['east', ' ', 'west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :[]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['!east','west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:[east, west]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:'#EACH'}\"));\n    clause = Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east, west]}\");\n    assertEquals(Clause.ComputedType.EQUAL, clause.replica.computedType);\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east]}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:'#ANY'}\");\n    assertEquals(Clause.ComputedType.EQUAL, clause.globalTag.computedType);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '#EQUAL' , node:'node1'}\"));\n\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '!1.23', node:'#ANY'}\");\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue( clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL,  clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0 , range.min);\n    assertEquals(5.0 , range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(Double.valueOf(1.0), clause.replica.delta(6));\n    assertEquals(Double.valueOf(-1.0), clause.replica.delta(2));\n    assertEquals(Double.valueOf(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, Clause.ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n    try {\n      Clause.create(\"{replica:0, 'ip_1':'<30%'}\");\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n    }\n\n    clause = Clause.create(\"{replica: '#ALL',  freedisk:'>20%'}\");\n    clause = Clause.create(\"{replica: '#ALL',  sysprop.zone :'west'}\");\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: [3,4] ,  freedisk:'>20'}\"));\n    clause = Clause.create(\"{replica: 3 ,  port:[8983, 7574]}\");\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['east', ' ', 'west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :[]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['!east','west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:[east, west]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:'#EACH'}\"));\n    clause = Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east, west]}\");\n    assertEquals(Clause.ComputedType.EQUAL, clause.replica.computedType);\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east]}\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb","date":1533364463,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '!1.23', node:'#ANY'}\");\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0, range.min);\n    assertEquals(5.0, range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(Double.valueOf(1.0), clause.replica.delta(6));\n    assertEquals(Double.valueOf(-1.0), clause.replica.delta(2));\n    assertEquals(Double.valueOf(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n    try {\n      Clause.create(\"{replica:0, 'ip_1':'<30%'}\");\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n    }\n\n    clause = Clause.create(\"{replica: '#ALL',  freedisk:'>20%'}\");\n    clause = Clause.create(\"{replica: '#ALL',  sysprop.zone :'west'}\");\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: [3,4] ,  freedisk:'>20'}\"));\n    clause = Clause.create(\"{replica: 3 ,  port:[8983, 7574]}\");\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['east', ' ', 'west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :[]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['!east','west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:[east, west]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:'#EACH'}\"));\n    clause = Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east, west]}\");\n    assertEquals(ComputedType.EQUAL, clause.replica.computedType);\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east]}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:'#ANY'}\");\n    assertEquals(ComputedType.EQUAL, clause.globalTag.computedType);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '#EQUAL' , node:'node1'}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:[node1 , node2 , node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n    assertEquals(ComputedType.EQUAL, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '3-5' , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(3.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(5.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n\n    clause = Clause.create(\"{cores: 1.66 , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(1.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(2.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n    assertEquals(1.66d, ((RangeVal) clause.globalTag.val).actual.doubleValue(), 0.001);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores:5, sysprop.zone : west}\"));\n\n    clause = Clause.create(\"{cores: '14%' , node:'#ANY'}\");\n    assertEquals(ComputedType.PERCENT, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '14%' , node:[node1, node2, node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '!1.23', node:'#ANY'}\");\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue( clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL,  clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0 , range.min);\n    assertEquals(5.0 , range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(Double.valueOf(1.0), clause.replica.delta(6));\n    assertEquals(Double.valueOf(-1.0), clause.replica.delta(2));\n    assertEquals(Double.valueOf(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, Clause.ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n    try {\n      Clause.create(\"{replica:0, 'ip_1':'<30%'}\");\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n    }\n\n    clause = Clause.create(\"{replica: '#ALL',  freedisk:'>20%'}\");\n    clause = Clause.create(\"{replica: '#ALL',  sysprop.zone :'west'}\");\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: [3,4] ,  freedisk:'>20'}\"));\n    clause = Clause.create(\"{replica: 3 ,  port:[8983, 7574]}\");\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['east', ' ', 'west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :[]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['!east','west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:[east, west]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:'#EACH'}\"));\n    clause = Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east, west]}\");\n    assertEquals(Clause.ComputedType.EQUAL, clause.replica.computedType);\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east]}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:'#ANY'}\");\n    assertEquals(Clause.ComputedType.EQUAL, clause.globalTag.computedType);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '#EQUAL' , node:'node1'}\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29944148cc0dc98687ff45e8a1eaa937a9bcf9ff","date":1534173061,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '!1.23', node:'#ANY'}\"));\n\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0, range.min);\n    assertEquals(5.0, range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(Double.valueOf(1.0), clause.replica.delta(6));\n    assertEquals(Double.valueOf(-1.0), clause.replica.delta(2));\n    assertEquals(Double.valueOf(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n    try {\n      Clause.create(\"{replica:0, 'ip_1':'<30%'}\");\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n    }\n\n    clause = Clause.create(\"{replica: '#ALL',  freedisk:'>20%'}\");\n    clause = Clause.create(\"{replica: '#ALL',  sysprop.zone :'west'}\");\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: [3,4] ,  freedisk:'>20'}\"));\n    clause = Clause.create(\"{replica: 3 ,  port:[8983, 7574]}\");\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['east', ' ', 'west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :[]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['!east','west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:[east, west]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:'#EACH'}\"));\n    clause = Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east, west]}\");\n    assertEquals(ComputedType.EQUAL, clause.replica.computedType);\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east]}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:'#ANY'}\");\n    assertEquals(ComputedType.EQUAL, clause.globalTag.computedType);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '#EQUAL' , node:'node1'}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:[node1 , node2 , node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n    assertEquals(ComputedType.EQUAL, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '3-5' , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(3.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(5.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n\n    clause = Clause.create(\"{cores: 1.66 , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(1.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(2.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n    assertEquals(1.66d, ((RangeVal) clause.globalTag.val).actual.doubleValue(), 0.001);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores:5, sysprop.zone : west}\"));\n\n    clause = Clause.create(\"{cores: '14%' , node:'#ANY'}\");\n    assertEquals(ComputedType.PERCENT, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '14%' , node:[node1, node2, node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '!14%' , node:'#ANY'}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '!14%' , node:[node1, node2, node3]}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '!1.66' , node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '<14%' , node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '>14%' , node:'#ANY'}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '>14%' , node:'#ANY'}\"));\n\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n    assertEquals(Operand.RANGE_NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '!1.23', node:'#ANY'}\");\n    assertFalse(clause.getReplica().isPass(2));\n    assertFalse(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertTrue(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0, range.min);\n    assertEquals(5.0, range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(Double.valueOf(1.0), clause.replica.delta(6));\n    assertEquals(Double.valueOf(-1.0), clause.replica.delta(2));\n    assertEquals(Double.valueOf(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n    try {\n      Clause.create(\"{replica:0, 'ip_1':'<30%'}\");\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n    }\n\n    clause = Clause.create(\"{replica: '#ALL',  freedisk:'>20%'}\");\n    clause = Clause.create(\"{replica: '#ALL',  sysprop.zone :'west'}\");\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: [3,4] ,  freedisk:'>20'}\"));\n    clause = Clause.create(\"{replica: 3 ,  port:[8983, 7574]}\");\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['east', ' ', 'west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :[]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['!east','west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:[east, west]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:'#EACH'}\"));\n    clause = Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east, west]}\");\n    assertEquals(ComputedType.EQUAL, clause.replica.computedType);\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east]}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:'#ANY'}\");\n    assertEquals(ComputedType.EQUAL, clause.globalTag.computedType);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '#EQUAL' , node:'node1'}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:[node1 , node2 , node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n    assertEquals(ComputedType.EQUAL, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '3-5' , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(3.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(5.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n\n    clause = Clause.create(\"{cores: 1.66 , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(1.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(2.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n    assertEquals(1.66d, ((RangeVal) clause.globalTag.val).actual.doubleValue(), 0.001);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores:5, sysprop.zone : west}\"));\n\n    clause = Clause.create(\"{cores: '14%' , node:'#ANY'}\");\n    assertEquals(ComputedType.PERCENT, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '14%' , node:[node1, node2, node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddd9a76400512cda8f22bbc69e3d8b85672a91a","date":1559288755,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '!1.23', node:'#ANY'}\"));\n\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0, range.min);\n    assertEquals(5.0, range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(Double.valueOf(1.0), clause.replica.delta(6));\n    assertEquals(Double.valueOf(-1.0), clause.replica.delta(2));\n    assertEquals(Double.valueOf(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n    try {\n      Clause.create(\"{replica:0, 'ip_1':'<30%'}\");\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n    }\n\n    clause = Clause.create(\"{replica: '#ALL',  freedisk:'>20%'}\");\n    clause = Clause.create(\"{replica: '#ALL',  sysprop.zone :'west'}\");\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: [3,4] ,  freedisk:'>20'}\"));\n    clause = Clause.create(\"{replica: 3 ,  port:[8983, 7574]}\");\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['east', ' ', 'west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :[]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['!east','west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:[east, west]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:'#EACH'}\"));\n    clause = Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east, west]}\");\n    assertEquals(ComputedType.EQUAL, clause.replica.computedType);\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east]}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:'#ANY'}\");\n    assertEquals(ComputedType.EQUAL, clause.globalTag.computedType);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '#EQUAL' , node:'node1'}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:[node1 , node2 , node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n    assertEquals(ComputedType.EQUAL, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '3-5' , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(3.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(5.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n\n    clause = Clause.create(\"{cores: 1.66 , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(1.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(2.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n    assertEquals(1.66d, ((RangeVal) clause.globalTag.val).actual.doubleValue(), 0.001);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores:5, sysprop.zone : west}\"));\n\n    clause = Clause.create(\"{cores: '14%' , node:'#ANY'}\");\n    assertEquals(ComputedType.PERCENT, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '14%' , node:[node1, node2, node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '!14%' , node:'#ANY'}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '!14%' , node:[node1, node2, node3]}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '!1.66' , node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '<14%' , node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '>14%' , node:'#ANY'}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '>14%' , node:'#ANY'}\"));\n     clause  = Clause.create(\"{replica:1, nodeset : {sysprop.zone : east}}\");\n     assertEquals(Variable.Type.STRING, clause.tag.varType);\n     clause  =Clause.create(\"{replica:1, nodeset : [node1, node2, node3]}\");\n     assertEquals(Variable.Type.NODE, clause.tag.varType);\n     assertEquals(Operand.IN, clause.tag.op);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, node: n1, nodeset : {sysprop.zone : east}}\"));\n\n    IllegalArgumentException exp = expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, nodeset : {sysprop.zone : east  , port: 8983 }}\"));\n    assertTrue(exp.getMessage().contains(\"nodeset must only have one and only one key\"));\n    clause = Clause.create(\"{'replica': '#ALL', 'nodeset': {'freedisk': '>700'}, 'strict': false}\");\n    assertEquals(Operand.GREATER_THAN , clause.tag.op);\n\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '!1.23', node:'#ANY'}\"));\n\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0, range.min);\n    assertEquals(5.0, range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(Double.valueOf(1.0), clause.replica.delta(6));\n    assertEquals(Double.valueOf(-1.0), clause.replica.delta(2));\n    assertEquals(Double.valueOf(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n    try {\n      Clause.create(\"{replica:0, 'ip_1':'<30%'}\");\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n    }\n\n    clause = Clause.create(\"{replica: '#ALL',  freedisk:'>20%'}\");\n    clause = Clause.create(\"{replica: '#ALL',  sysprop.zone :'west'}\");\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: [3,4] ,  freedisk:'>20'}\"));\n    clause = Clause.create(\"{replica: 3 ,  port:[8983, 7574]}\");\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['east', ' ', 'west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :[]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['!east','west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:[east, west]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:'#EACH'}\"));\n    clause = Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east, west]}\");\n    assertEquals(ComputedType.EQUAL, clause.replica.computedType);\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east]}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:'#ANY'}\");\n    assertEquals(ComputedType.EQUAL, clause.globalTag.computedType);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '#EQUAL' , node:'node1'}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:[node1 , node2 , node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n    assertEquals(ComputedType.EQUAL, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '3-5' , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(3.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(5.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n\n    clause = Clause.create(\"{cores: 1.66 , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(1.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(2.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n    assertEquals(1.66d, ((RangeVal) clause.globalTag.val).actual.doubleValue(), 0.001);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores:5, sysprop.zone : west}\"));\n\n    clause = Clause.create(\"{cores: '14%' , node:'#ANY'}\");\n    assertEquals(ComputedType.PERCENT, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '14%' , node:[node1, node2, node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '!14%' , node:'#ANY'}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '!14%' , node:[node1, node2, node3]}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '!1.66' , node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '<14%' , node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '>14%' , node:'#ANY'}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '>14%' , node:'#ANY'}\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '!1.23', node:'#ANY'}\"));\n\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0, range.min);\n    assertEquals(5.0, range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(Double.valueOf(1.0), clause.replica.delta(6));\n    assertEquals(Double.valueOf(-1.0), clause.replica.delta(2));\n    assertEquals(Double.valueOf(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n    try {\n      Clause.create(\"{replica:0, 'ip_1':'<30%'}\");\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n    }\n\n    clause = Clause.create(\"{replica: '#ALL',  freedisk:'>20%'}\");\n    clause = Clause.create(\"{replica: '#ALL',  sysprop.zone :'west'}\");\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: [3,4] ,  freedisk:'>20'}\"));\n    clause = Clause.create(\"{replica: 3 ,  port:[8983, 7574]}\");\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['east', ' ', 'west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :[]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['!east','west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:[east, west]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:'#EACH'}\"));\n    clause = Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east, west]}\");\n    assertEquals(ComputedType.EQUAL, clause.replica.computedType);\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east]}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:'#ANY'}\");\n    assertEquals(ComputedType.EQUAL, clause.globalTag.computedType);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '#EQUAL' , node:'node1'}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:[node1 , node2 , node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n    assertEquals(ComputedType.EQUAL, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '3-5' , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(3.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(5.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n\n    clause = Clause.create(\"{cores: 1.66 , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(1.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(2.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n    assertEquals(1.66d, ((RangeVal) clause.globalTag.val).actual.doubleValue(), 0.001);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores:5, sysprop.zone : west}\"));\n\n    clause = Clause.create(\"{cores: '14%' , node:'#ANY'}\");\n    assertEquals(ComputedType.PERCENT, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '14%' , node:[node1, node2, node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '!14%' , node:'#ANY'}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '!14%' , node:[node1, node2, node3]}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '!1.66' , node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '<14%' , node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '>14%' , node:'#ANY'}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '>14%' , node:'#ANY'}\"));\n     clause  = Clause.create(\"{replica:1, nodeset : {sysprop.zone : east}}\");\n     assertEquals(Variable.Type.STRING, clause.tag.varType);\n     clause  =Clause.create(\"{replica:1, nodeset : [node1, node2, node3]}\");\n     assertEquals(Variable.Type.NODE, clause.tag.varType);\n     assertEquals(Operand.IN, clause.tag.op);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, node: n1, nodeset : {sysprop.zone : east}}\"));\n\n    IllegalArgumentException exp = expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, nodeset : {sysprop.zone : east  , port: 8983 }}\"));\n    assertTrue(exp.getMessage().contains(\"nodeset must only have one and only one key\"));\n    clause = Clause.create(\"{'replica': '#ALL', 'nodeset': {'freedisk': '>700'}, 'strict': false}\");\n    assertEquals(Operand.GREATER_THAN , clause.tag.op);\n\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '!1.23', node:'#ANY'}\"));\n\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0, range.min);\n    assertEquals(5.0, range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(Double.valueOf(1.0), clause.replica.delta(6));\n    assertEquals(Double.valueOf(-1.0), clause.replica.delta(2));\n    assertEquals(Double.valueOf(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n    try {\n      Clause.create(\"{replica:0, 'ip_1':'<30%'}\");\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n    }\n\n    clause = Clause.create(\"{replica: '#ALL',  freedisk:'>20%'}\");\n    clause = Clause.create(\"{replica: '#ALL',  sysprop.zone :'west'}\");\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: [3,4] ,  freedisk:'>20'}\"));\n    clause = Clause.create(\"{replica: 3 ,  port:[8983, 7574]}\");\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['east', ' ', 'west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :[]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['!east','west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:[east, west]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:'#EACH'}\"));\n    clause = Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east, west]}\");\n    assertEquals(ComputedType.EQUAL, clause.replica.computedType);\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east]}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:'#ANY'}\");\n    assertEquals(ComputedType.EQUAL, clause.globalTag.computedType);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '#EQUAL' , node:'node1'}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:[node1 , node2 , node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n    assertEquals(ComputedType.EQUAL, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '3-5' , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(3.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(5.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n\n    clause = Clause.create(\"{cores: 1.66 , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(1.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(2.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n    assertEquals(1.66d, ((RangeVal) clause.globalTag.val).actual.doubleValue(), 0.001);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores:5, sysprop.zone : west}\"));\n\n    clause = Clause.create(\"{cores: '14%' , node:'#ANY'}\");\n    assertEquals(ComputedType.PERCENT, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '14%' , node:[node1, node2, node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '!14%' , node:'#ANY'}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '!14%' , node:[node1, node2, node3]}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '!1.66' , node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '<14%' , node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '>14%' , node:'#ANY'}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '>14%' , node:'#ANY'}\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3501ebc2bbcfa61e7fc22e7d18f68d83b367093","date":1559465668,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '!1.23', node:'#ANY'}\"));\n\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0, range.min);\n    assertEquals(5.0, range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(Double.valueOf(1.0), clause.replica.delta(6));\n    assertEquals(Double.valueOf(-1.0), clause.replica.delta(2));\n    assertEquals(Double.valueOf(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n    try {\n      Clause.create(\"{replica:0, 'ip_1':'<30%'}\");\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n    }\n\n    clause = Clause.create(\"{replica: '#ALL',  freedisk:'>20%'}\");\n    clause = Clause.create(\"{replica: '#ALL',  sysprop.zone :'west'}\");\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: [3,4] ,  freedisk:'>20'}\"));\n    clause = Clause.create(\"{replica: 3 ,  port:[8983, 7574]}\");\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['east', ' ', 'west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :[]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['!east','west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:[east, west]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:'#EACH'}\"));\n    clause = Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east, west]}\");\n    assertEquals(ComputedType.EQUAL, clause.replica.computedType);\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east]}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:'#ANY'}\");\n    assertEquals(ComputedType.EQUAL, clause.globalTag.computedType);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '#EQUAL' , node:'node1'}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:[node1 , node2 , node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n    assertEquals(ComputedType.EQUAL, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '3-5' , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(3.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(5.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n\n    clause = Clause.create(\"{cores: 1.66 , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(1.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(2.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n    assertEquals(1.66d, ((RangeVal) clause.globalTag.val).actual.doubleValue(), 0.001);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores:5, sysprop.zone : west}\"));\n\n    clause = Clause.create(\"{cores: '14%' , node:'#ANY'}\");\n    assertEquals(ComputedType.PERCENT, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '14%' , node:[node1, node2, node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '!14%' , node:'#ANY'}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '!14%' , node:[node1, node2, node3]}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '!1.66' , node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '<14%' , node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '>14%' , node:'#ANY'}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '>14%' , node:'#ANY'}\"));\n     clause  = Clause.create(\"{replica:1, nodeset : {sysprop.zone : east}}\");\n     assertEquals(Variable.Type.STRING, clause.tag.varType);\n     clause  =Clause.create(\"{replica:1, nodeset : [node1, node2, node3]}\");\n     assertEquals(Variable.Type.NODE, clause.tag.varType);\n     assertEquals(Operand.IN, clause.tag.op);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, nodeset : {sysprop.zone : '#EACH'}}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, nodeset : {host : '#EACH'}}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, node: n1, nodeset : {sysprop.zone : east}}\"));\n\n    IllegalArgumentException exp = expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, nodeset : {sysprop.zone : east  , port: 8983 }}\"));\n    assertTrue(exp.getMessage().contains(\"nodeset must only have one and only one key\"));\n    clause = Clause.create(\"{'replica': '#ALL', 'nodeset': {'freedisk': '>700'}, 'strict': false}\");\n    assertEquals(Operand.GREATER_THAN , clause.tag.op);\n\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '!1.23', node:'#ANY'}\"));\n\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0, range.min);\n    assertEquals(5.0, range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(Double.valueOf(1.0), clause.replica.delta(6));\n    assertEquals(Double.valueOf(-1.0), clause.replica.delta(2));\n    assertEquals(Double.valueOf(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n    try {\n      Clause.create(\"{replica:0, 'ip_1':'<30%'}\");\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n    }\n\n    clause = Clause.create(\"{replica: '#ALL',  freedisk:'>20%'}\");\n    clause = Clause.create(\"{replica: '#ALL',  sysprop.zone :'west'}\");\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: [3,4] ,  freedisk:'>20'}\"));\n    clause = Clause.create(\"{replica: 3 ,  port:[8983, 7574]}\");\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['east', ' ', 'west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :[]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['!east','west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:[east, west]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:'#EACH'}\"));\n    clause = Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east, west]}\");\n    assertEquals(ComputedType.EQUAL, clause.replica.computedType);\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east]}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:'#ANY'}\");\n    assertEquals(ComputedType.EQUAL, clause.globalTag.computedType);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '#EQUAL' , node:'node1'}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:[node1 , node2 , node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n    assertEquals(ComputedType.EQUAL, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '3-5' , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(3.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(5.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n\n    clause = Clause.create(\"{cores: 1.66 , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(1.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(2.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n    assertEquals(1.66d, ((RangeVal) clause.globalTag.val).actual.doubleValue(), 0.001);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores:5, sysprop.zone : west}\"));\n\n    clause = Clause.create(\"{cores: '14%' , node:'#ANY'}\");\n    assertEquals(ComputedType.PERCENT, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '14%' , node:[node1, node2, node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '!14%' , node:'#ANY'}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '!14%' , node:[node1, node2, node3]}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '!1.66' , node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '<14%' , node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '>14%' , node:'#ANY'}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '>14%' , node:'#ANY'}\"));\n     clause  = Clause.create(\"{replica:1, nodeset : {sysprop.zone : east}}\");\n     assertEquals(Variable.Type.STRING, clause.tag.varType);\n     clause  =Clause.create(\"{replica:1, nodeset : [node1, node2, node3]}\");\n     assertEquals(Variable.Type.NODE, clause.tag.varType);\n     assertEquals(Operand.IN, clause.tag.op);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, node: n1, nodeset : {sysprop.zone : east}}\"));\n\n    IllegalArgumentException exp = expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, nodeset : {sysprop.zone : east  , port: 8983 }}\"));\n    assertTrue(exp.getMessage().contains(\"nodeset must only have one and only one key\"));\n    clause = Clause.create(\"{'replica': '#ALL', 'nodeset': {'freedisk': '>700'}, 'strict': false}\");\n    assertEquals(Operand.GREATER_THAN , clause.tag.op);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa","date":1559549598,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '!1.23', node:'#ANY'}\"));\n\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0, range.min);\n    assertEquals(5.0, range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(Double.valueOf(1.0), clause.replica.delta(6));\n    assertEquals(Double.valueOf(-1.0), clause.replica.delta(2));\n    assertEquals(Double.valueOf(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n    try {\n      Clause.create(\"{replica:0, 'ip_1':'<30%'}\");\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n    }\n\n    clause = Clause.create(\"{replica: '#ALL',  freedisk:'>20%'}\");\n    clause = Clause.create(\"{replica: '#ALL',  sysprop.zone :'west'}\");\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: [3,4] ,  freedisk:'>20'}\"));\n    clause = Clause.create(\"{replica: 3 ,  port:[8983, 7574]}\");\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['east', ' ', 'west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :[]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['!east','west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:[east, west]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:'#EACH'}\"));\n    clause = Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east, west]}\");\n    assertEquals(ComputedType.EQUAL, clause.replica.computedType);\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east]}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:'#ANY'}\");\n    assertEquals(ComputedType.EQUAL, clause.globalTag.computedType);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '#EQUAL' , node:'node1'}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:[node1 , node2 , node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n    assertEquals(ComputedType.EQUAL, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '3-5' , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(3.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(5.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n\n    clause = Clause.create(\"{cores: 1.66 , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(1.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(2.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n    assertEquals(1.66d, ((RangeVal) clause.globalTag.val).actual.doubleValue(), 0.001);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores:5, sysprop.zone : west}\"));\n\n    clause = Clause.create(\"{cores: '14%' , node:'#ANY'}\");\n    assertEquals(ComputedType.PERCENT, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '14%' , node:[node1, node2, node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '!14%' , node:'#ANY'}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '!14%' , node:[node1, node2, node3]}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '!1.66' , node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '<14%' , node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '>14%' , node:'#ANY'}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '>14%' , node:'#ANY'}\"));\n     clause  = Clause.create(\"{replica:1, nodeset : {sysprop.zone : east}}\");\n     assertEquals(Variable.Type.SYSPROP, clause.tag.varType);\n     clause  =Clause.create(\"{replica:1, nodeset : [node1, node2, node3]}\");\n     assertEquals(Variable.Type.NODE, clause.tag.varType);\n     assertEquals(Operand.IN, clause.tag.op);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, nodeset : {sysprop.zone : '#EACH'}}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, nodeset : {host : '#EACH'}}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, node: n1, nodeset : {sysprop.zone : east}}\"));\n\n    IllegalArgumentException exp = expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, nodeset : {sysprop.zone : east  , port: 8983 }}\"));\n    assertTrue(exp.getMessage().contains(\"nodeset must only have one and only one key\"));\n    clause = Clause.create(\"{'replica': '#ALL', 'nodeset': {'freedisk': '>700'}, 'strict': false}\");\n    assertEquals(clause.put, Clause.Put.ON_ALL);\n    assertEquals(Operand.GREATER_THAN , clause.tag.op);\n    clause = Clause.create(\"{'replica': '#ALL', put: on-each,  'nodeset': {sysprop.zone : east}}\");\n    assertEquals(clause.put, Clause.Put.ON_EACH);\n    exp = expectThrows(IllegalArgumentException.class, ()-> Clause.create(\"{'replica': '#ALL', put: on-Each,  'nodeset': {sysprop.zone : east}}\"));\n    assertTrue(exp.getMessage().contains(\"invalid value for put : on-Each\"));\n\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '!1.23', node:'#ANY'}\"));\n\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0, range.min);\n    assertEquals(5.0, range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(Double.valueOf(1.0), clause.replica.delta(6));\n    assertEquals(Double.valueOf(-1.0), clause.replica.delta(2));\n    assertEquals(Double.valueOf(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n    try {\n      Clause.create(\"{replica:0, 'ip_1':'<30%'}\");\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n    }\n\n    clause = Clause.create(\"{replica: '#ALL',  freedisk:'>20%'}\");\n    clause = Clause.create(\"{replica: '#ALL',  sysprop.zone :'west'}\");\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: [3,4] ,  freedisk:'>20'}\"));\n    clause = Clause.create(\"{replica: 3 ,  port:[8983, 7574]}\");\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['east', ' ', 'west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :[]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['!east','west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:[east, west]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:'#EACH'}\"));\n    clause = Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east, west]}\");\n    assertEquals(ComputedType.EQUAL, clause.replica.computedType);\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east]}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:'#ANY'}\");\n    assertEquals(ComputedType.EQUAL, clause.globalTag.computedType);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '#EQUAL' , node:'node1'}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:[node1 , node2 , node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n    assertEquals(ComputedType.EQUAL, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '3-5' , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(3.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(5.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n\n    clause = Clause.create(\"{cores: 1.66 , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(1.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(2.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n    assertEquals(1.66d, ((RangeVal) clause.globalTag.val).actual.doubleValue(), 0.001);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores:5, sysprop.zone : west}\"));\n\n    clause = Clause.create(\"{cores: '14%' , node:'#ANY'}\");\n    assertEquals(ComputedType.PERCENT, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '14%' , node:[node1, node2, node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '!14%' , node:'#ANY'}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '!14%' , node:[node1, node2, node3]}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '!1.66' , node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '<14%' , node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '>14%' , node:'#ANY'}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '>14%' , node:'#ANY'}\"));\n     clause  = Clause.create(\"{replica:1, nodeset : {sysprop.zone : east}}\");\n     assertEquals(Variable.Type.STRING, clause.tag.varType);\n     clause  =Clause.create(\"{replica:1, nodeset : [node1, node2, node3]}\");\n     assertEquals(Variable.Type.NODE, clause.tag.varType);\n     assertEquals(Operand.IN, clause.tag.op);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, nodeset : {sysprop.zone : '#EACH'}}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, nodeset : {host : '#EACH'}}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, node: n1, nodeset : {sysprop.zone : east}}\"));\n\n    IllegalArgumentException exp = expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, nodeset : {sysprop.zone : east  , port: 8983 }}\"));\n    assertTrue(exp.getMessage().contains(\"nodeset must only have one and only one key\"));\n    clause = Clause.create(\"{'replica': '#ALL', 'nodeset': {'freedisk': '>700'}, 'strict': false}\");\n    assertEquals(Operand.GREATER_THAN , clause.tag.op);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7194afdfe9b45ca331c1cd5001cd9766688688b","date":1560867417,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '!1.23', node:'#ANY'}\"));\n\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0, range.min);\n    assertEquals(5.0, range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(Double.valueOf(1.0), clause.replica.delta(6));\n    assertEquals(Double.valueOf(-1.0), clause.replica.delta(2));\n    assertEquals(Double.valueOf(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n    try {\n      Clause.create(\"{replica:0, 'ip_1':'<30%'}\");\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n    }\n\n    clause = Clause.create(\"{replica: '#ALL',  freedisk:'>20%'}\");\n    clause = Clause.create(\"{replica: '#ALL',  sysprop.zone :'west'}\");\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: [3,4] ,  freedisk:'>20'}\"));\n    clause = Clause.create(\"{replica: 3 ,  port:[8983, 7574]}\");\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['east', ' ', 'west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :[]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['!east','west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:[east, west]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:'#EACH'}\"));\n    clause = Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east, west]}\");\n    assertEquals(ComputedType.EQUAL, clause.replica.computedType);\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east]}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:'#ANY'}\");\n    assertEquals(ComputedType.EQUAL, clause.globalTag.computedType);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '#EQUAL' , node:'node1'}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:[node1 , node2 , node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n    assertEquals(ComputedType.EQUAL, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '3-5' , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(3.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(5.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n\n    clause = Clause.create(\"{cores: 1.66 , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(1.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(2.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n    assertEquals(1.66d, ((RangeVal) clause.globalTag.val).actual.doubleValue(), 0.001);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores:5, sysprop.zone : west}\"));\n\n    clause = Clause.create(\"{cores: '14%' , node:'#ANY'}\");\n    assertEquals(ComputedType.PERCENT, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '14%' , node:[node1, node2, node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '!14%' , node:'#ANY'}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '!14%' , node:[node1, node2, node3]}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '!1.66' , node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '<14%' , node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '>14%' , node:'#ANY'}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '>14%' , node:'#ANY'}\"));\n     clause  = Clause.create(\"{replica:1, nodeset : {sysprop.zone : east}}\");\n     assertEquals(Variable.Type.SYSPROP, clause.tag.varType);\n     clause  =Clause.create(\"{replica:1, nodeset : [node1, node2, node3]}\");\n     assertEquals(Variable.Type.NODE, clause.tag.varType);\n     assertEquals(Operand.IN, clause.tag.op);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, nodeset : {sysprop.zone : '#EACH'}}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, nodeset : {host : '#EACH'}}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, node: n1, nodeset : {sysprop.zone : east}}\"));\n\n    IllegalArgumentException exp = expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, nodeset : {sysprop.zone : east  , port: 8983 }}\"));\n    assertTrue(exp.getMessage().contains(\"nodeset must only have one and only one key\"));\n    clause = Clause.create(\"{'replica': '#ALL', 'nodeset': {'freedisk': '>700'}, 'strict': false}\");\n    assertEquals(clause.put, Clause.Put.ON_ALL);\n    assertEquals(Operand.GREATER_THAN , clause.tag.op);\n    clause = Clause.create(\"{'replica': '#ALL', put: on-each-node,  'nodeset': {sysprop.zone : east}}\");\n    assertEquals(clause.put, Clause.Put.ON_EACH);\n    exp = expectThrows(IllegalArgumentException.class, ()-> Clause.create(\"{'replica': '#ALL', put: on-Each,  'nodeset': {sysprop.zone : east}}\"));\n    assertTrue(exp.getMessage().contains(\"invalid value for put : on-Each\"));\n\n    clause = Clause.create(\"{replica : '#EQUAL', nodeset : [{sysprop.zone : east}, {sysprop.zone : west}]}\");\n    assertTrue(((List)clause.tag.val).get(0) instanceof Condition);\n    assertTrue( Utils.fromJSONString(Utils.toJSONString(clause)) instanceof Map);\n    exp = expectThrows(IllegalArgumentException.class, ()-> Clause.create(\"{replica : '#EQUAL', nodeset : [{sysprop.zone : east}, {port : '8983'}]}\"));\n    assertTrue(exp.getMessage().contains(\"all element must have same key\"));\n    exp = expectThrows(IllegalArgumentException.class, ()-> Clause.create(\"{replica : '#EQUAL', nodeset : [{sysprop.zone : east}, {sysprop.zone : '#EACH'}]}\"));\n    assertTrue(exp.getMessage().contains(\"computed  value #EACH not allowed in nodeset\"));\n    exp = expectThrows(IllegalArgumentException.class, ()->  Clause.create(\"{replica : '#EQUAL', nodeset : {sysprop.zone : east}}\"));\n    assertTrue(exp.getMessage().contains(\"'nodeset' must have an array value when 'replica': '#EQUAL` is used\"));\n    exp = expectThrows(IllegalArgumentException.class, ()-> Clause.create(\"{replica : '#ALL', nodeset : [{sysprop.zone : east}, {sysprop.zone : west}]}\"));\n    assertTrue(exp.getMessage().contains(\"cannot use array value for nodeset if replica : '#EQUAL' is not used\"));\n    exp = expectThrows(IllegalArgumentException.class, ()-> Clause.create(\"{replica : '50%', nodeset : [{sysprop.zone : east}, {sysprop.zone : west}]}\"));\n    assertTrue(exp.getMessage().contains(\"cannot use array value for nodeset if replica : '#EQUAL' is not used\"));\n    exp = expectThrows(IllegalArgumentException.class, ()-> Clause.create(\"{replica : 3, nodeset : [{sysprop.zone : east}, {sysprop.zone : west}]}\"));\n    assertTrue(exp.getMessage().contains(\"cannot use array value for nodeset if replica : '#EQUAL' is not used\"));\n    exp = expectThrows(IllegalArgumentException.class, ()-> Clause.create(\"{replica : '#EQUAL', put: on-each-node, nodeset : [{sysprop.zone : east}, {sysprop.zone : west}]}\"));\n    assertTrue(exp.getMessage().contains(\"cannot use put: 'on-each-node'  with an array value in nodeset \"));\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '!1.23', node:'#ANY'}\"));\n\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0, range.min);\n    assertEquals(5.0, range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(Double.valueOf(1.0), clause.replica.delta(6));\n    assertEquals(Double.valueOf(-1.0), clause.replica.delta(2));\n    assertEquals(Double.valueOf(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n    try {\n      Clause.create(\"{replica:0, 'ip_1':'<30%'}\");\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n    }\n\n    clause = Clause.create(\"{replica: '#ALL',  freedisk:'>20%'}\");\n    clause = Clause.create(\"{replica: '#ALL',  sysprop.zone :'west'}\");\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: [3,4] ,  freedisk:'>20'}\"));\n    clause = Clause.create(\"{replica: 3 ,  port:[8983, 7574]}\");\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['east', ' ', 'west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :[]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['!east','west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:[east, west]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:'#EACH'}\"));\n    clause = Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east, west]}\");\n    assertEquals(ComputedType.EQUAL, clause.replica.computedType);\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east]}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:'#ANY'}\");\n    assertEquals(ComputedType.EQUAL, clause.globalTag.computedType);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '#EQUAL' , node:'node1'}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:[node1 , node2 , node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n    assertEquals(ComputedType.EQUAL, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '3-5' , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(3.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(5.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n\n    clause = Clause.create(\"{cores: 1.66 , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(1.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(2.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n    assertEquals(1.66d, ((RangeVal) clause.globalTag.val).actual.doubleValue(), 0.001);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores:5, sysprop.zone : west}\"));\n\n    clause = Clause.create(\"{cores: '14%' , node:'#ANY'}\");\n    assertEquals(ComputedType.PERCENT, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '14%' , node:[node1, node2, node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '!14%' , node:'#ANY'}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '!14%' , node:[node1, node2, node3]}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '!1.66' , node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '<14%' , node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '>14%' , node:'#ANY'}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '>14%' , node:'#ANY'}\"));\n     clause  = Clause.create(\"{replica:1, nodeset : {sysprop.zone : east}}\");\n     assertEquals(Variable.Type.SYSPROP, clause.tag.varType);\n     clause  =Clause.create(\"{replica:1, nodeset : [node1, node2, node3]}\");\n     assertEquals(Variable.Type.NODE, clause.tag.varType);\n     assertEquals(Operand.IN, clause.tag.op);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, nodeset : {sysprop.zone : '#EACH'}}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, nodeset : {host : '#EACH'}}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, node: n1, nodeset : {sysprop.zone : east}}\"));\n\n    IllegalArgumentException exp = expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, nodeset : {sysprop.zone : east  , port: 8983 }}\"));\n    assertTrue(exp.getMessage().contains(\"nodeset must only have one and only one key\"));\n    clause = Clause.create(\"{'replica': '#ALL', 'nodeset': {'freedisk': '>700'}, 'strict': false}\");\n    assertEquals(clause.put, Clause.Put.ON_ALL);\n    assertEquals(Operand.GREATER_THAN , clause.tag.op);\n    clause = Clause.create(\"{'replica': '#ALL', put: on-each,  'nodeset': {sysprop.zone : east}}\");\n    assertEquals(clause.put, Clause.Put.ON_EACH);\n    exp = expectThrows(IllegalArgumentException.class, ()-> Clause.create(\"{'replica': '#ALL', put: on-Each,  'nodeset': {sysprop.zone : east}}\"));\n    assertTrue(exp.getMessage().contains(\"invalid value for put : on-Each\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":null,"sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\");\n    expectError(\"replica\", \"hello\", \"not a valid number\");\n    assertEquals(1d, Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\", Clause.validate(\"collection\", \"c\", true));\n    assertEquals(\"s\", Clause.validate(\"shard\", \"s\", true));\n    assertEquals(\"overseer\", Clause.validate(\"nodeRole\", \"overseer\", true));\n\n    expectError(\"nodeRole\", \"wrong\", \"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\", \"must be less than \");\n    expectError(\"sysLoadAvg\", 101, \"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\", \"must be greater than\");\n    expectError(\"sysLoadAvg\", -1, \"must be greater than\");\n\n    assertEquals(12.46d, Clause.validate(\"sysLoadAvg\", \"12.46\", true));\n    assertEquals(12.46, Clause.validate(\"sysLoadAvg\", 12.46d, true));\n\n\n    expectError(\"ip_1\", \"300\", \"must be less than \");\n    expectError(\"ip_1\", 300, \"must be less than \");\n    expectError(\"ip_1\", \"-1\", \"must be greater than\");\n    expectError(\"ip_1\", -1, \"must be greater than\");\n\n    assertEquals(1L, Clause.validate(\"ip_1\", \"1\", true));\n\n    expectError(\"heapUsage\", \"-1\", \"must be greater than\");\n    expectError(\"heapUsage\", -1, \"must be greater than\");\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", \"69.9\", true));\n    assertEquals(69.9d, Clause.validate(\"heapUsage\", 69.9d, true));\n\n    expectError(\"port\", \"70000\", \"must be less than \");\n    expectError(\"port\", 70000, \"must be less than \");\n    expectError(\"port\", \"0\", \"must be greater than\");\n    expectError(\"port\", 0, \"must be greater than\");\n\n    expectError(\"cores\", \"-1\", \"must be greater than\");\n\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.0\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2.0\", null));\n    assertEquals(Operand.EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2\", null));\n    assertEquals(Operand.NOT_EQUAL, REPLICA.getOperand(Operand.NOT_EQUAL, \"2\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.1\", null));\n    assertEquals(Operand.RANGE_EQUAL, REPLICA.getOperand(Operand.EQUAL, \"2.01\", null));\n\n    Clause clause = Clause.create(\"{replica: '1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '<1.23', node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(1));\n    assertTrue(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(2));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '!1.23', node:'#ANY'}\"));\n\n\n    clause = Clause.create(\"{replica: 1.23, node:'#ANY'}\");\n    assertTrue(clause.getReplica().isPass(2));\n    assertTrue(clause.getReplica().isPass(1));\n    assertFalse(clause.getReplica().isPass(0));\n    assertFalse(clause.getReplica().isPass(3));\n\n    clause = Clause.create(\"{replica: '33%', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().op);\n    clause = clause.getSealedClause(condition -> {\n      if (condition.name.equals(\"replica\")) {\n        return 2.0d;\n      }\n      throw new RuntimeException(\"\");\n    });\n    assertTrue(clause.getReplica().isPass(2));\n\n    clause = Clause.create(\"{replica: '3 - 5', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.getReplica().getOperand());\n    RangeVal range = (RangeVal) clause.getReplica().getValue();\n    assertEquals(3.0, range.min);\n    assertEquals(5.0, range.max);\n    assertTrue(clause.replica.isPass(3));\n    assertTrue(clause.replica.isPass(4));\n    assertTrue(clause.replica.isPass(5));\n    assertFalse(clause.replica.isPass(6));\n    assertFalse(clause.replica.isPass(2));\n\n    assertEquals(Double.valueOf(1.0), clause.replica.delta(6));\n    assertEquals(Double.valueOf(-1.0), clause.replica.delta(2));\n    assertEquals(Double.valueOf(0.0), clause.replica.delta(4));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '-33%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 'x%', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '20%-33%', node:'#ANY'}\"));\n\n    clause = Clause.create(\"{replica: '#EQUAL', shard:'#EACH', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    clause = Clause.create(\"{replica: '#EQUAL', node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.replica.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL', node:'node_1'}\"));\n    clause = Clause.create(\"{replica : 0, freedisk:'<20%'}\");\n    assertEquals(clause.tag.computedType, ComputedType.PERCENT);\n    assertEquals(clause.tag.op, Operand.LESS_THAN);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica : 0, INDEX.sizeInGB:'>300'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#ANV', node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:'<3', shard: '#EACH', node:'#E4CH'}\"));\n    try {\n      Clause.create(\"{replica:0, 'ip_1':'<30%'}\");\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n    }\n\n    clause = Clause.create(\"{replica: '#ALL',  freedisk:'>20%'}\");\n    clause = Clause.create(\"{replica: '#ALL',  sysprop.zone :'west'}\");\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: [3,4] ,  freedisk:'>20'}\"));\n    clause = Clause.create(\"{replica: 3 ,  port:[8983, 7574]}\");\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['east', ' ', 'west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :[]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: 3 ,  sysprop.zone :['!east','west']}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:[east, west]}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#ALL' , shard: '#EACH' , sysprop.zone:'#EACH'}\"));\n    clause = Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east, west]}\");\n    assertEquals(ComputedType.EQUAL, clause.replica.computedType);\n    assertEquals(Operand.IN, clause.tag.op);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '#EQUAL' , shard: '#EACH' , sysprop.zone:[east]}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:'#ANY'}\");\n    assertEquals(ComputedType.EQUAL, clause.globalTag.computedType);\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '#EQUAL' , node:'node1'}\"));\n\n    clause = Clause.create(\"{cores: '#EQUAL' , node:[node1 , node2 , node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n    assertEquals(ComputedType.EQUAL, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '3-5' , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(3.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(5.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n\n    clause = Clause.create(\"{cores: 1.66 , node:'#ANY'}\");\n    assertEquals(Operand.RANGE_EQUAL, clause.globalTag.op);\n    assertEquals(1.0d, ((RangeVal) clause.globalTag.val).min.doubleValue(), 0.001);\n    assertEquals(2.0d, ((RangeVal) clause.globalTag.val).max.doubleValue(), 0.001);\n    assertEquals(1.66d, ((RangeVal) clause.globalTag.val).actual.doubleValue(), 0.001);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores:5, sysprop.zone : west}\"));\n\n    clause = Clause.create(\"{cores: '14%' , node:'#ANY'}\");\n    assertEquals(ComputedType.PERCENT, clause.getGlobalTag().computedType);\n\n    clause = Clause.create(\"{cores: '14%' , node:[node1, node2, node3]}\");\n    assertEquals(Operand.IN, clause.getTag().op);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '!14%' , node:'#ANY'}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '!14%' , node:[node1, node2, node3]}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '!1.66' , node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '<14%' , node:'#ANY'}\"));\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica: '>14%' , node:'#ANY'}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{cores: '>14%' , node:'#ANY'}\"));\n     clause  = Clause.create(\"{replica:1, nodeset : {sysprop.zone : east}}\");\n     assertEquals(Variable.Type.SYSPROP, clause.tag.varType);\n     clause  =Clause.create(\"{replica:1, nodeset : [node1, node2, node3]}\");\n     assertEquals(Variable.Type.NODE, clause.tag.varType);\n     assertEquals(Operand.IN, clause.tag.op);\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, nodeset : {sysprop.zone : '#EACH'}}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, nodeset : {host : '#EACH'}}\"));\n\n    expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, node: n1, nodeset : {sysprop.zone : east}}\"));\n\n    IllegalArgumentException exp = expectThrows(IllegalArgumentException.class,\n        () -> Clause.create(\"{replica:1, nodeset : {sysprop.zone : east  , port: 8983 }}\"));\n    assertTrue(exp.getMessage().contains(\"nodeset must only have one and only one key\"));\n    clause = Clause.create(\"{'replica': '#ALL', 'nodeset': {'freedisk': '>700'}, 'strict': false}\");\n    assertEquals(clause.put, Clause.Put.ON_ALL);\n    assertEquals(Operand.GREATER_THAN , clause.tag.op);\n    clause = Clause.create(\"{'replica': '#ALL', put: on-each-node,  'nodeset': {sysprop.zone : east}}\");\n    assertEquals(clause.put, Clause.Put.ON_EACH);\n    exp = expectThrows(IllegalArgumentException.class, ()-> Clause.create(\"{'replica': '#ALL', put: on-Each,  'nodeset': {sysprop.zone : east}}\"));\n    assertTrue(exp.getMessage().contains(\"invalid value for put : on-Each\"));\n\n    clause = Clause.create(\"{replica : '#EQUAL', nodeset : [{sysprop.zone : east}, {sysprop.zone : west}]}\");\n    assertTrue(((List)clause.tag.val).get(0) instanceof Condition);\n    assertTrue( Utils.fromJSONString(Utils.toJSONString(clause)) instanceof Map);\n    exp = expectThrows(IllegalArgumentException.class, ()-> Clause.create(\"{replica : '#EQUAL', nodeset : [{sysprop.zone : east}, {port : '8983'}]}\"));\n    assertTrue(exp.getMessage().contains(\"all element must have same key\"));\n    exp = expectThrows(IllegalArgumentException.class, ()-> Clause.create(\"{replica : '#EQUAL', nodeset : [{sysprop.zone : east}, {sysprop.zone : '#EACH'}]}\"));\n    assertTrue(exp.getMessage().contains(\"computed  value #EACH not allowed in nodeset\"));\n    exp = expectThrows(IllegalArgumentException.class, ()->  Clause.create(\"{replica : '#EQUAL', nodeset : {sysprop.zone : east}}\"));\n    assertTrue(exp.getMessage().contains(\"'nodeset' must have an array value when 'replica': '#EQUAL` is used\"));\n    exp = expectThrows(IllegalArgumentException.class, ()-> Clause.create(\"{replica : '#ALL', nodeset : [{sysprop.zone : east}, {sysprop.zone : west}]}\"));\n    assertTrue(exp.getMessage().contains(\"cannot use array value for nodeset if replica : '#EQUAL' is not used\"));\n    exp = expectThrows(IllegalArgumentException.class, ()-> Clause.create(\"{replica : '50%', nodeset : [{sysprop.zone : east}, {sysprop.zone : west}]}\"));\n    assertTrue(exp.getMessage().contains(\"cannot use array value for nodeset if replica : '#EQUAL' is not used\"));\n    exp = expectThrows(IllegalArgumentException.class, ()-> Clause.create(\"{replica : 3, nodeset : [{sysprop.zone : east}, {sysprop.zone : west}]}\"));\n    assertTrue(exp.getMessage().contains(\"cannot use array value for nodeset if replica : '#EQUAL' is not used\"));\n    exp = expectThrows(IllegalArgumentException.class, ()-> Clause.create(\"{replica : '#EQUAL', put: on-each-node, nodeset : [{sysprop.zone : east}, {sysprop.zone : west}]}\"));\n    assertTrue(exp.getMessage().contains(\"cannot use put: 'on-each-node'  with an array value in nodeset \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a7194afdfe9b45ca331c1cd5001cd9766688688b":["081849c2756a6c9b9883ab9e332f3f3fcf2f05fa"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["28288370235ed02234a64753cdbf0c6ec096304a"],"52316373036b9f161a08896e7c9ebf4389790a47":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["9377904aee9eb531b6368b0af6b8a531d7f7b0a4"],"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa":["d3501ebc2bbcfa61e7fc22e7d18f68d83b367093"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"e4848fb683db0790f2847173af06e2ad2d03328e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9377904aee9eb531b6368b0af6b8a531d7f7b0a4":["9837f40c922407d857991971de6def18eda0857b"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["78231225260fb5b3bf9920f203d71477d5501c65"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["33ae23947c41339ea2b352422bb762dfb4a17077","7cd9806d2cef5f74400b2c18d3e38b8af25e8485"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["29944148cc0dc98687ff45e8a1eaa937a9bcf9ff","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["52316373036b9f161a08896e7c9ebf4389790a47"],"2874ca85dea1fabb662494e4166584c3b7cd2873":["7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"9837f40c922407d857991971de6def18eda0857b":["33ae23947c41339ea2b352422bb762dfb4a17077"],"d3501ebc2bbcfa61e7fc22e7d18f68d83b367093":["9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"7cd9806d2cef5f74400b2c18d3e38b8af25e8485":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["33ae23947c41339ea2b352422bb762dfb4a17077","7d6bec22994bec86702ad05304ae983f7be5b5a7"],"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4848fb683db0790f2847173af06e2ad2d03328e"],"3f504512a03d978990cbff30db0522b354e846db":["a7194afdfe9b45ca331c1cd5001cd9766688688b"],"78231225260fb5b3bf9920f203d71477d5501c65":["7d6bec22994bec86702ad05304ae983f7be5b5a7"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["7cd9806d2cef5f74400b2c18d3e38b8af25e8485"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4848fb683db0790f2847173af06e2ad2d03328e"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e","2874ca85dea1fabb662494e4166584c3b7cd2873"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["29944148cc0dc98687ff45e8a1eaa937a9bcf9ff"],"33ae23947c41339ea2b352422bb762dfb4a17077":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"29944148cc0dc98687ff45e8a1eaa937a9bcf9ff":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"a7194afdfe9b45ca331c1cd5001cd9766688688b":["3f504512a03d978990cbff30db0522b354e846db"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["33ae23947c41339ea2b352422bb762dfb4a17077"],"52316373036b9f161a08896e7c9ebf4389790a47":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","78231225260fb5b3bf9920f203d71477d5501c65"],"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa":["a7194afdfe9b45ca331c1cd5001cd9766688688b"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","28288370235ed02234a64753cdbf0c6ec096304a"],"9377904aee9eb531b6368b0af6b8a531d7f7b0a4":["7d6bec22994bec86702ad05304ae983f7be5b5a7"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4848fb683db0790f2847173af06e2ad2d03328e","00e2ae9cb51fd0d4f12faf216db2810237cb5116","28288370235ed02234a64753cdbf0c6ec096304a"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["29944148cc0dc98687ff45e8a1eaa937a9bcf9ff"],"2874ca85dea1fabb662494e4166584c3b7cd2873":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"9837f40c922407d857991971de6def18eda0857b":["9377904aee9eb531b6368b0af6b8a531d7f7b0a4"],"d3501ebc2bbcfa61e7fc22e7d18f68d83b367093":["081849c2756a6c9b9883ab9e332f3f3fcf2f05fa"],"7cd9806d2cef5f74400b2c18d3e38b8af25e8485":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["2874ca85dea1fabb662494e4166584c3b7cd2873"],"00e2ae9cb51fd0d4f12faf216db2810237cb5116":[],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"78231225260fb5b3bf9920f203d71477d5501c65":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["52316373036b9f161a08896e7c9ebf4389790a47"],"28288370235ed02234a64753cdbf0c6ec096304a":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["7cd9806d2cef5f74400b2c18d3e38b8af25e8485"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","d3501ebc2bbcfa61e7fc22e7d18f68d83b367093"],"33ae23947c41339ea2b352422bb762dfb4a17077":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"29944148cc0dc98687ff45e8a1eaa937a9bcf9ff":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","58af973abe9f7c0faa777c1a6285fc7f72c171c5","00e2ae9cb51fd0d4f12faf216db2810237cb5116","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}