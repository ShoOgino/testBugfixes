{"path":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#indexInBackground(int).mjava","commits":[{"id":"4c835cc1a7b07477a469cdb1bf6c67bc05b85c07","date":1471849333,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#indexInBackground(int).mjava","pathOld":"/dev/null","sourceNew":"  private Future<Void> indexInBackground(int numDocs) {\n    ExecutorService executorService = Executors.newSingleThreadExecutor();\n    Future<Void> f = (Future<Void>) executorService.submit(new Callable<Void>() {\n\n      @Override\n      public Void call() throws Exception {\n          for (int i = 0; i < numDocs; i++) {\n            indexDoc(id, docId, i1, 50, tlong, 50, t1, \"document number \" + docId++);\n            // slow down adds, to get documents indexed while in PeerSync\n            Thread.sleep(100);\n          }\n        return null;\n      }\n    });\n\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af1db3812c9e07d1abd11594d52cd757124f9985","date":1471854483,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#indexInBackground(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#indexInBackground(int).mjava","sourceNew":"  private void indexInBackground(int numDocs) {\n    new Thread(() -> {\n      try {\n        for (int i = 0; i < numDocs; i++) {\n          indexDoc(id, docId, i1, 50, tlong, 50, t1, \"document number \" + docId++);\n          // slow down adds, to get documents indexed while in PeerSync\n          Thread.sleep(100);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n\n      }\n    }, getClassName())\n        .start();\n\n\n  }\n\n","sourceOld":"  private Future<Void> indexInBackground(int numDocs) {\n    ExecutorService executorService = Executors.newSingleThreadExecutor();\n    Future<Void> f = (Future<Void>) executorService.submit(new Callable<Void>() {\n\n      @Override\n      public Void call() throws Exception {\n          for (int i = 0; i < numDocs; i++) {\n            indexDoc(id, docId, i1, 50, tlong, 50, t1, \"document number \" + docId++);\n            // slow down adds, to get documents indexed while in PeerSync\n            Thread.sleep(100);\n          }\n        return null;\n      }\n    });\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7255731749ac320782120db03569b7430084f04d","date":1471932367,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#indexInBackground(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#indexInBackground(int).mjava","sourceNew":"  private void indexInBackground(int numDocs) {\n    new Thread(() -> {\n      try {\n        for (int i = 0; i < numDocs; i++) {\n          indexDoc(id, docId, i1, 50, tlong, 50, t1, \"document number \" + docId);\n          docId++;\n          // slow down adds, to get documents indexed while in PeerSync\n          Thread.sleep(100);\n        }\n      } catch (Exception e) {\n        log.error(\"Error indexing doc in background\", e);\n        //Throwing an error here will kill the thread\n      }\n    }, getClassName())\n        .start();\n\n\n  }\n\n","sourceOld":"  private void indexInBackground(int numDocs) {\n    new Thread(() -> {\n      try {\n        for (int i = 0; i < numDocs; i++) {\n          indexDoc(id, docId, i1, 50, tlong, 50, t1, \"document number \" + docId++);\n          // slow down adds, to get documents indexed while in PeerSync\n          Thread.sleep(100);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n\n      }\n    }, getClassName())\n        .start();\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#indexInBackground(int).mjava","pathOld":"/dev/null","sourceNew":"  private void indexInBackground(int numDocs) {\n    new Thread(() -> {\n      try {\n        for (int i = 0; i < numDocs; i++) {\n          indexDoc(id, docId, i1, 50, tlong, 50, t1, \"document number \" + docId);\n          docId++;\n          // slow down adds, to get documents indexed while in PeerSync\n          Thread.sleep(100);\n        }\n      } catch (Exception e) {\n        log.error(\"Error indexing doc in background\", e);\n        //Throwing an error here will kill the thread\n      }\n    }, getClassName())\n        .start();\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#indexInBackground(int).mjava","pathOld":"/dev/null","sourceNew":"  private void indexInBackground(int numDocs) {\n    new Thread(() -> {\n      try {\n        for (int i = 0; i < numDocs; i++) {\n          indexDoc(id, docId, i1, 50, tlong, 50, t1, \"document number \" + docId);\n          docId++;\n          // slow down adds, to get documents indexed while in PeerSync\n          Thread.sleep(100);\n        }\n      } catch (Exception e) {\n        log.error(\"Error indexing doc in background\", e);\n        //Throwing an error here will kill the thread\n      }\n    }, getClassName())\n        .start();\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"919560b37ad88ad944e3073977d184fd663f2981","date":1487792657,"type":5,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest.IndexInBackGround#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#indexInBackground(int).mjava","sourceNew":"    public void run() {\n      try {\n        for (int i = 0; i < numDocs; i++) {\n          indexDoc(id, docId, i1, 50, tlong, 50, t1, \"document number \" + docId);\n          docId++;\n          // slow down adds, to get documents indexed while in PeerSync\n          Thread.sleep(100);\n        }\n      } catch (Exception e) {\n        log.error(\"Error indexing doc in background\", e);\n        //Throwing an error here will kill the thread\n      }\n    }\n\n","sourceOld":"  private void indexInBackground(int numDocs) {\n    new Thread(() -> {\n      try {\n        for (int i = 0; i < numDocs; i++) {\n          indexDoc(id, docId, i1, 50, tlong, 50, t1, \"document number \" + docId);\n          docId++;\n          // slow down adds, to get documents indexed while in PeerSync\n          Thread.sleep(100);\n        }\n      } catch (Exception e) {\n        log.error(\"Error indexing doc in background\", e);\n        //Throwing an error here will kill the thread\n      }\n    }, getClassName())\n        .start();\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"919560b37ad88ad944e3073977d184fd663f2981":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"4c835cc1a7b07477a469cdb1bf6c67bc05b85c07":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7255731749ac320782120db03569b7430084f04d":["af1db3812c9e07d1abd11594d52cd757124f9985"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"af1db3812c9e07d1abd11594d52cd757124f9985":["4c835cc1a7b07477a469cdb1bf6c67bc05b85c07"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7255731749ac320782120db03569b7430084f04d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["919560b37ad88ad944e3073977d184fd663f2981"]},"commit2Childs":{"919560b37ad88ad944e3073977d184fd663f2981":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c835cc1a7b07477a469cdb1bf6c67bc05b85c07":["af1db3812c9e07d1abd11594d52cd757124f9985"],"7255731749ac320782120db03569b7430084f04d":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c835cc1a7b07477a469cdb1bf6c67bc05b85c07","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"af1db3812c9e07d1abd11594d52cd757124f9985":["7255731749ac320782120db03569b7430084f04d"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["919560b37ad88ad944e3073977d184fd663f2981","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}