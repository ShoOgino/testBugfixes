{"path":"src/test/org/apache/lucene/index/TestPayloads.PayloadFilter#next(Token).mjava","commits":[{"id":"97c663a0e8cf62834049da11ecd70bd4a639ac9c","date":1195852652,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads.PayloadFilter#next(Token).mjava","pathOld":"/dev/null","sourceNew":"        public Token next(Token token) throws IOException {\r\n            token = input.next(token);\r\n            if (token != null) {\r\n                if (offset + length <= data.length) {\r\n                    Payload p = null;\r\n                    if (p == null) {\r\n                        p = new Payload();\r\n                        token.setPayload(p);\r\n                    }\r\n                    p.setData(data, offset, length);\r\n                    offset += length;                \r\n                } else {\r\n                    token.setPayload(null);\r\n                }\r\n            }\r\n            \r\n            return token;\r\n        }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads.PayloadFilter#next(Token).mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads.PayloadFilter#next(Token).mjava","sourceNew":"        public Token next(Token token) throws IOException {\n            token = input.next(token);\n            if (token != null) {\n                if (offset + length <= data.length) {\n                    Payload p = null;\n                    if (p == null) {\n                        p = new Payload();\n                        token.setPayload(p);\n                    }\n                    p.setData(data, offset, length);\n                    offset += length;                \n                } else {\n                    token.setPayload(null);\n                }\n            }\n            \n            return token;\n        }\n\n","sourceOld":"        public Token next(Token token) throws IOException {\r\n            token = input.next(token);\r\n            if (token != null) {\r\n                if (offset + length <= data.length) {\r\n                    Payload p = null;\r\n                    if (p == null) {\r\n                        p = new Payload();\r\n                        token.setPayload(p);\r\n                    }\r\n                    p.setData(data, offset, length);\r\n                    offset += length;                \r\n                } else {\r\n                    token.setPayload(null);\r\n                }\r\n            }\r\n            \r\n            return token;\r\n        }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads.PayloadFilter#next(Token).mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads.PayloadFilter#next(Token).mjava","sourceNew":"        public Token next(final Token reusableToken) throws IOException {\n            assert reusableToken != null;\n            Token nextToken = input.next(reusableToken);\n            if (nextToken != null) {\n                if (offset + length <= data.length) {\n                    Payload p = null;\n                    if (p == null) {\n                        p = new Payload();\n                        nextToken.setPayload(p);\n                    }\n                    p.setData(data, offset, length);\n                    offset += length;                \n                } else {\n                    nextToken.setPayload(null);\n                }\n            }\n            \n            return nextToken;\n        }\n\n","sourceOld":"        public Token next(Token token) throws IOException {\n            token = input.next(token);\n            if (token != null) {\n                if (offset + length <= data.length) {\n                    Payload p = null;\n                    if (p == null) {\n                        p = new Payload();\n                        token.setPayload(p);\n                    }\n                    p.setData(data, offset, length);\n                    offset += length;                \n                } else {\n                    token.setPayload(null);\n                }\n            }\n            \n            return token;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads.PayloadFilter#incrementToken().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads.PayloadFilter#next(Token).mjava","sourceNew":"        public boolean incrementToken() throws IOException {\n            boolean hasNext = input.incrementToken();\n            if (hasNext) {\n                if (offset + length <= data.length) {\n                    Payload p = null;\n                    if (p == null) {\n                        p = new Payload();\n                        payloadAtt.setPayload(p);\n                    }\n                    p.setData(data, offset, length);\n                    offset += length;                \n                } else {\n                    payloadAtt.setPayload(null);\n                }\n            }\n            \n            return hasNext;\n        }\n\n","sourceOld":"        public Token next(final Token reusableToken) throws IOException {\n            assert reusableToken != null;\n            Token nextToken = input.next(reusableToken);\n            if (nextToken != null) {\n                if (offset + length <= data.length) {\n                    Payload p = null;\n                    if (p == null) {\n                        p = new Payload();\n                        nextToken.setPayload(p);\n                    }\n                    p.setData(data, offset, length);\n                    offset += length;                \n                } else {\n                    nextToken.setPayload(null);\n                }\n            }\n            \n            return nextToken;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["2123bddbd65dea198cac380540636ce43a880403"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["97c663a0e8cf62834049da11ecd70bd4a639ac9c"],"97c663a0e8cf62834049da11ecd70bd4a639ac9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97c663a0e8cf62834049da11ecd70bd4a639ac9c"],"2123bddbd65dea198cac380540636ce43a880403":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"97c663a0e8cf62834049da11ecd70bd4a639ac9c":["2123bddbd65dea198cac380540636ce43a880403"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}