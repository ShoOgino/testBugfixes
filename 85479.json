{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","commits":[{"id":"42f51b3ab4258ff4623227b0db011b8bb83db5c7","date":1358164991,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n        return new AssertingCategoryListIterator(super.createCategoryListIterator(partition));\n      }\n    });\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    indexTwoDocs(indexWriter, facetFields, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 6th segment, with content, with categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    ArrayList<FacetRequest> requests = new ArrayList<FacetRequest>(1);\n    CountFacetRequest countNoComplements = new CountFacetRequest(new CategoryPath(\"A\"), 10) {\n      @Override\n      public boolean supportsComplements() {\n        return false; // disable complements\n      }\n    };\n    requests.add(countNoComplements);\n    FacetSearchParams fsp = new FacetSearchParams(requests, fip);\n    FacetsCollector fc = new FacetsCollector(fsp , indexReader, taxoReader);\n    indexSearcher.search(q, fc);\n    List<FacetResult> results = fc.getFacetResults();\n    assertEquals(\"received too many facet results\", 1, results.size());\n    FacetResultNode frn = results.get(0).getFacetResultNode();\n    assertEquals(\"wrong weight for \\\"A\\\"\", 4, (int) frn.getValue());\n    assertEquals(\"wrong number of children\", 2, frn.getNumSubResults());\n    for (FacetResultNode node : frn.getSubResults()) {\n      assertEquals(\"wrong weight for child \" + node.getLabel(), 2, (int) node.getValue());\n    }\n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n        return new AssertingCategoryListIterator(super.createCategoryListIterator(partition));\n      }\n    });\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    indexTwoDocs(indexWriter, facetFields, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 6th segment, with content, with categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    ArrayList<FacetRequest> requests = new ArrayList<FacetRequest>(1);\n    CountFacetRequest countNoComplements = new CountFacetRequest(new CategoryPath(\"A\"), 10) {\n      @Override\n      public boolean supportsComplements() {\n        return false; // disable complements\n      }\n    };\n    requests.add(countNoComplements);\n    FacetSearchParams fsp = new FacetSearchParams(requests, fip);\n    FacetsCollector fc = new FacetsCollector(fsp , indexReader, taxoReader);\n    indexSearcher.search(q, fc);\n    List<FacetResult> results = fc.getFacetResults();\n    assertEquals(\"received too many facet results\", 1, results.size());\n    FacetResultNode frn = results.get(0).getFacetResultNode();\n    assertEquals(\"wrong weight for \\\"A\\\"\", 4, (int) frn.getValue());\n    assertEquals(\"wrong number of children\", 2, frn.getNumSubResults());\n    for (FacetResultNode node : frn.getSubResults()) {\n      assertEquals(\"wrong weight for child \" + node.getLabel(), 2, (int) node.getValue());\n    }\n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","sourceNew":"  @Test\n  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n        return new AssertingCategoryListIterator(super.createCategoryListIterator(partition));\n      }\n    });\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    indexTwoDocs(indexWriter, facetFields, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 6th segment, with content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    ArrayList<FacetRequest> requests = new ArrayList<FacetRequest>(1);\n    CountFacetRequest countNoComplements = new CountFacetRequest(new CategoryPath(\"A\"), 10) {\n      @Override\n      public boolean supportsComplements() {\n        return false; // disable complements\n      }\n    };\n    requests.add(countNoComplements);\n    FacetSearchParams fsp = new FacetSearchParams(requests, fip);\n    FacetsCollector fc = new FacetsCollector(fsp , indexReader, taxoReader);\n    indexSearcher.search(q, fc);\n    List<FacetResult> results = fc.getFacetResults();\n    assertEquals(\"received too many facet results\", 1, results.size());\n    FacetResultNode frn = results.get(0).getFacetResultNode();\n    assertEquals(\"wrong weight for \\\"A\\\"\", 4, (int) frn.getValue());\n    assertEquals(\"wrong number of children\", 2, frn.getNumSubResults());\n    for (FacetResultNode node : frn.getSubResults()) {\n      assertEquals(\"wrong weight for child \" + node.getLabel(), 2, (int) node.getValue());\n    }\n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n        return new AssertingCategoryListIterator(super.createCategoryListIterator(partition));\n      }\n    });\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    indexTwoDocs(indexWriter, facetFields, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 6th segment, with content, with categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    ArrayList<FacetRequest> requests = new ArrayList<FacetRequest>(1);\n    CountFacetRequest countNoComplements = new CountFacetRequest(new CategoryPath(\"A\"), 10) {\n      @Override\n      public boolean supportsComplements() {\n        return false; // disable complements\n      }\n    };\n    requests.add(countNoComplements);\n    FacetSearchParams fsp = new FacetSearchParams(requests, fip);\n    FacetsCollector fc = new FacetsCollector(fsp , indexReader, taxoReader);\n    indexSearcher.search(q, fc);\n    List<FacetResult> results = fc.getFacetResults();\n    assertEquals(\"received too many facet results\", 1, results.size());\n    FacetResultNode frn = results.get(0).getFacetResultNode();\n    assertEquals(\"wrong weight for \\\"A\\\"\", 4, (int) frn.getValue());\n    assertEquals(\"wrong number of children\", 2, frn.getNumSubResults());\n    for (FacetResultNode node : frn.getSubResults()) {\n      assertEquals(\"wrong weight for child \" + node.getLabel(), 2, (int) node.getValue());\n    }\n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","sourceNew":"  @Test\n  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n        return new AssertingCategoryListIterator(super.createCategoryListIterator(partition));\n      }\n    });\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    indexTwoDocs(indexWriter, facetFields, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 6th segment, with content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    ArrayList<FacetRequest> requests = new ArrayList<FacetRequest>(1);\n    CountFacetRequest countNoComplements = new CountFacetRequest(new CategoryPath(\"A\"), 10) {\n      @Override\n      public boolean supportsComplements() {\n        return false; // disable complements\n      }\n    };\n    requests.add(countNoComplements);\n    FacetSearchParams fsp = new FacetSearchParams(requests, fip);\n    FacetsCollector fc = new FacetsCollector(fsp , indexReader, taxoReader);\n    indexSearcher.search(q, fc);\n    List<FacetResult> results = fc.getFacetResults();\n    assertEquals(\"received too many facet results\", 1, results.size());\n    FacetResultNode frn = results.get(0).getFacetResultNode();\n    assertEquals(\"wrong weight for \\\"A\\\"\", 4, (int) frn.getValue());\n    assertEquals(\"wrong number of children\", 2, frn.getNumSubResults());\n    for (FacetResultNode node : frn.getSubResults()) {\n      assertEquals(\"wrong weight for child \" + node.getLabel(), 2, (int) node.getValue());\n    }\n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n        return new AssertingCategoryListIterator(super.createCategoryListIterator(partition));\n      }\n    });\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    indexTwoDocs(indexWriter, facetFields, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 6th segment, with content, with categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    ArrayList<FacetRequest> requests = new ArrayList<FacetRequest>(1);\n    CountFacetRequest countNoComplements = new CountFacetRequest(new CategoryPath(\"A\"), 10) {\n      @Override\n      public boolean supportsComplements() {\n        return false; // disable complements\n      }\n    };\n    requests.add(countNoComplements);\n    FacetSearchParams fsp = new FacetSearchParams(requests, fip);\n    FacetsCollector fc = new FacetsCollector(fsp , indexReader, taxoReader);\n    indexSearcher.search(q, fc);\n    List<FacetResult> results = fc.getFacetResults();\n    assertEquals(\"received too many facet results\", 1, results.size());\n    FacetResultNode frn = results.get(0).getFacetResultNode();\n    assertEquals(\"wrong weight for \\\"A\\\"\", 4, (int) frn.getValue());\n    assertEquals(\"wrong number of children\", 2, frn.getNumSubResults());\n    for (FacetResultNode node : frn.getSubResults()) {\n      assertEquals(\"wrong weight for child \" + node.getLabel(), 2, (int) node.getValue());\n    }\n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","sourceNew":"  @Test\n  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n        return new AssertingCategoryListIterator(super.createCategoryListIterator(partition));\n      }\n    });\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    indexTwoDocs(indexWriter, facetFields, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 6th segment, with content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    ArrayList<FacetRequest> requests = new ArrayList<FacetRequest>(1);\n    CountFacetRequest countNoComplements = new CountFacetRequest(new CategoryPath(\"A\"), 10) {\n      @Override\n      public boolean supportsComplements() {\n        return false; // disable complements\n      }\n    };\n    requests.add(countNoComplements);\n    FacetSearchParams fsp = new FacetSearchParams(requests, fip);\n    FacetsCollector fc = new FacetsCollector(fsp , indexReader, taxoReader);\n    indexSearcher.search(q, fc);\n    List<FacetResult> results = fc.getFacetResults();\n    assertEquals(\"received too many facet results\", 1, results.size());\n    FacetResultNode frn = results.get(0).getFacetResultNode();\n    assertEquals(\"wrong weight for \\\"A\\\"\", 4, (int) frn.value);\n    assertEquals(\"wrong number of children\", 2, frn.subResults.size());\n    for (FacetResultNode node : frn.subResults) {\n      assertEquals(\"wrong weight for child \" + node.label, 2, (int) node.value);\n    }\n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n        return new AssertingCategoryListIterator(super.createCategoryListIterator(partition));\n      }\n    });\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    indexTwoDocs(indexWriter, facetFields, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 6th segment, with content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    ArrayList<FacetRequest> requests = new ArrayList<FacetRequest>(1);\n    CountFacetRequest countNoComplements = new CountFacetRequest(new CategoryPath(\"A\"), 10) {\n      @Override\n      public boolean supportsComplements() {\n        return false; // disable complements\n      }\n    };\n    requests.add(countNoComplements);\n    FacetSearchParams fsp = new FacetSearchParams(requests, fip);\n    FacetsCollector fc = new FacetsCollector(fsp , indexReader, taxoReader);\n    indexSearcher.search(q, fc);\n    List<FacetResult> results = fc.getFacetResults();\n    assertEquals(\"received too many facet results\", 1, results.size());\n    FacetResultNode frn = results.get(0).getFacetResultNode();\n    assertEquals(\"wrong weight for \\\"A\\\"\", 4, (int) frn.getValue());\n    assertEquals(\"wrong number of children\", 2, frn.getNumSubResults());\n    for (FacetResultNode node : frn.getSubResults()) {\n      assertEquals(\"wrong weight for child \" + node.getLabel(), 2, (int) node.getValue());\n    }\n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","sourceNew":"  @Test\n  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n        return new AssertingCategoryListIterator(super.createCategoryListIterator(partition));\n      }\n    });\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    indexTwoDocs(indexWriter, facetFields, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 6th segment, with content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    FacetRequest countNoComplements = new CountFacetRequest(new CategoryPath(\"A\"), 10) {\n      @Override\n      public boolean supportsComplements() {\n        return false; // disable complements\n      }\n    };\n    FacetSearchParams fsp = new FacetSearchParams(fip, countNoComplements);\n    FacetsCollector fc = new StandardFacetsCollector(fsp , indexReader, taxoReader);\n    indexSearcher.search(q, fc);\n    List<FacetResult> results = fc.getFacetResults();\n    assertEquals(\"received too many facet results\", 1, results.size());\n    FacetResultNode frn = results.get(0).getFacetResultNode();\n    assertEquals(\"wrong weight for \\\"A\\\"\", 4, (int) frn.value);\n    assertEquals(\"wrong number of children\", 2, frn.subResults.size());\n    for (FacetResultNode node : frn.subResults) {\n      assertEquals(\"wrong weight for child \" + node.label, 2, (int) node.value);\n    }\n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n        return new AssertingCategoryListIterator(super.createCategoryListIterator(partition));\n      }\n    });\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    indexTwoDocs(indexWriter, facetFields, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 6th segment, with content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    ArrayList<FacetRequest> requests = new ArrayList<FacetRequest>(1);\n    CountFacetRequest countNoComplements = new CountFacetRequest(new CategoryPath(\"A\"), 10) {\n      @Override\n      public boolean supportsComplements() {\n        return false; // disable complements\n      }\n    };\n    requests.add(countNoComplements);\n    FacetSearchParams fsp = new FacetSearchParams(requests, fip);\n    FacetsCollector fc = new FacetsCollector(fsp , indexReader, taxoReader);\n    indexSearcher.search(q, fc);\n    List<FacetResult> results = fc.getFacetResults();\n    assertEquals(\"received too many facet results\", 1, results.size());\n    FacetResultNode frn = results.get(0).getFacetResultNode();\n    assertEquals(\"wrong weight for \\\"A\\\"\", 4, (int) frn.value);\n    assertEquals(\"wrong number of children\", 2, frn.subResults.size());\n    for (FacetResultNode node : frn.subResults) {\n      assertEquals(\"wrong weight for child \" + node.label, 2, (int) node.value);\n    }\n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","sourceNew":"  @Test\n  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n        return new AssertingCategoryListIterator(super.createCategoryListIterator(partition));\n      }\n    });\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    indexTwoDocs(indexWriter, facetFields, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 6th segment, with content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    FacetRequest countNoComplements = new CountFacetRequest(new CategoryPath(\"A\"), 10) {\n      @Override\n      public boolean supportsComplements() {\n        return false; // disable complements\n      }\n    };\n    FacetSearchParams fsp = new FacetSearchParams(fip, countNoComplements);\n    FacetsCollector fc = new StandardFacetsCollector(fsp , indexReader, taxoReader);\n    indexSearcher.search(q, fc);\n    List<FacetResult> results = fc.getFacetResults();\n    assertEquals(\"received too many facet results\", 1, results.size());\n    FacetResultNode frn = results.get(0).getFacetResultNode();\n    assertEquals(\"wrong weight for \\\"A\\\"\", 4, (int) frn.value);\n    assertEquals(\"wrong number of children\", 2, frn.subResults.size());\n    for (FacetResultNode node : frn.subResults) {\n      assertEquals(\"wrong weight for child \" + node.label, 2, (int) node.value);\n    }\n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n        return new AssertingCategoryListIterator(super.createCategoryListIterator(partition));\n      }\n    });\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    indexTwoDocs(indexWriter, facetFields, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 6th segment, with content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    ArrayList<FacetRequest> requests = new ArrayList<FacetRequest>(1);\n    CountFacetRequest countNoComplements = new CountFacetRequest(new CategoryPath(\"A\"), 10) {\n      @Override\n      public boolean supportsComplements() {\n        return false; // disable complements\n      }\n    };\n    requests.add(countNoComplements);\n    FacetSearchParams fsp = new FacetSearchParams(requests, fip);\n    FacetsCollector fc = new FacetsCollector(fsp , indexReader, taxoReader);\n    indexSearcher.search(q, fc);\n    List<FacetResult> results = fc.getFacetResults();\n    assertEquals(\"received too many facet results\", 1, results.size());\n    FacetResultNode frn = results.get(0).getFacetResultNode();\n    assertEquals(\"wrong weight for \\\"A\\\"\", 4, (int) frn.getValue());\n    assertEquals(\"wrong number of children\", 2, frn.getNumSubResults());\n    for (FacetResultNode node : frn.getSubResults()) {\n      assertEquals(\"wrong weight for child \" + node.getLabel(), 2, (int) node.getValue());\n    }\n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"239f79ed06f0979cfe1911ec5fba32b94fda43c1","date":1359553898,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","sourceNew":"  @Test\n  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n        return new AssertingCategoryListIterator(super.createCategoryListIterator(partition));\n      }\n    });\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    indexTwoDocs(indexWriter, facetFields, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 6th segment, with content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    FacetRequest countNoComplements = new CountFacetRequest(new CategoryPath(\"A\"), 10) {\n      @Override\n      public boolean supportsComplements() {\n        return false; // disable complements\n      }\n    };\n    FacetSearchParams fsp = new FacetSearchParams(fip, countNoComplements);\n    FacetsCollector fc = new StandardFacetsCollector(fsp , indexReader, taxoReader);\n    indexSearcher.search(q, fc);\n    List<FacetResult> results = fc.getFacetResults();\n    assertEquals(\"received too many facet results\", 1, results.size());\n    FacetResultNode frn = results.get(0).getFacetResultNode();\n    assertEquals(\"wrong number of children\", 2, frn.subResults.size());\n    for (FacetResultNode node : frn.subResults) {\n      assertEquals(\"wrong weight for child \" + node.label, 2, (int) node.value);\n    }\n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n        return new AssertingCategoryListIterator(super.createCategoryListIterator(partition));\n      }\n    });\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    indexTwoDocs(indexWriter, facetFields, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 6th segment, with content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    FacetRequest countNoComplements = new CountFacetRequest(new CategoryPath(\"A\"), 10) {\n      @Override\n      public boolean supportsComplements() {\n        return false; // disable complements\n      }\n    };\n    FacetSearchParams fsp = new FacetSearchParams(fip, countNoComplements);\n    FacetsCollector fc = new StandardFacetsCollector(fsp , indexReader, taxoReader);\n    indexSearcher.search(q, fc);\n    List<FacetResult> results = fc.getFacetResults();\n    assertEquals(\"received too many facet results\", 1, results.size());\n    FacetResultNode frn = results.get(0).getFacetResultNode();\n    assertEquals(\"wrong weight for \\\"A\\\"\", 4, (int) frn.value);\n    assertEquals(\"wrong number of children\", 2, frn.subResults.size());\n    for (FacetResultNode node : frn.subResults) {\n      assertEquals(\"wrong weight for child \" + node.label, 2, (int) node.value);\n    }\n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","sourceNew":"  @Test\n  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n        return new AssertingCategoryListIterator(super.createCategoryListIterator(partition));\n      }\n    });\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    indexTwoDocs(indexWriter, facetFields, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 6th segment, with content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    FacetRequest countNoComplements = new CountFacetRequest(new CategoryPath(\"A\"), 10) {\n      @Override\n      public boolean supportsComplements() {\n        return false; // disable complements\n      }\n    };\n    FacetSearchParams fsp = new FacetSearchParams(fip, countNoComplements);\n    FacetsCollector fc = new StandardFacetsCollector(fsp , indexReader, taxoReader);\n    indexSearcher.search(q, fc);\n    List<FacetResult> results = fc.getFacetResults();\n    assertEquals(\"received too many facet results\", 1, results.size());\n    FacetResultNode frn = results.get(0).getFacetResultNode();\n    assertEquals(\"wrong number of children\", 2, frn.subResults.size());\n    for (FacetResultNode node : frn.subResults) {\n      assertEquals(\"wrong weight for child \" + node.label, 2, (int) node.value);\n    }\n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n        return new AssertingCategoryListIterator(super.createCategoryListIterator(partition));\n      }\n    });\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    indexTwoDocs(indexWriter, facetFields, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 6th segment, with content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    FacetRequest countNoComplements = new CountFacetRequest(new CategoryPath(\"A\"), 10) {\n      @Override\n      public boolean supportsComplements() {\n        return false; // disable complements\n      }\n    };\n    FacetSearchParams fsp = new FacetSearchParams(fip, countNoComplements);\n    FacetsCollector fc = new StandardFacetsCollector(fsp , indexReader, taxoReader);\n    indexSearcher.search(q, fc);\n    List<FacetResult> results = fc.getFacetResults();\n    assertEquals(\"received too many facet results\", 1, results.size());\n    FacetResultNode frn = results.get(0).getFacetResultNode();\n    assertEquals(\"wrong weight for \\\"A\\\"\", 4, (int) frn.value);\n    assertEquals(\"wrong number of children\", 2, frn.subResults.size());\n    for (FacetResultNode node : frn.subResults) {\n      assertEquals(\"wrong weight for child \" + node.label, 2, (int) node.value);\n    }\n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","sourceNew":"  @Test\n  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n        return new AssertingCategoryListIterator(super.createCategoryListIterator(partition));\n      }\n    });\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    indexTwoDocs(indexWriter, facetFields, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 6th segment, with content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    FacetRequest countNoComplements = new CountFacetRequest(new CategoryPath(\"A\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(fip, countNoComplements);\n    FacetsCollector fc = FacetsCollector.create(fsp , indexReader, taxoReader);\n    indexSearcher.search(q, fc);\n    List<FacetResult> results = fc.getFacetResults();\n    assertEquals(\"received too many facet results\", 1, results.size());\n    FacetResultNode frn = results.get(0).getFacetResultNode();\n    assertEquals(\"wrong number of children\", 2, frn.subResults.size());\n    for (FacetResultNode node : frn.subResults) {\n      assertEquals(\"wrong weight for child \" + node.label, 2, (int) node.value);\n    }\n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n        return new AssertingCategoryListIterator(super.createCategoryListIterator(partition));\n      }\n    });\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    indexTwoDocs(indexWriter, facetFields, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 6th segment, with content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    FacetRequest countNoComplements = new CountFacetRequest(new CategoryPath(\"A\"), 10) {\n      @Override\n      public boolean supportsComplements() {\n        return false; // disable complements\n      }\n    };\n    FacetSearchParams fsp = new FacetSearchParams(fip, countNoComplements);\n    FacetsCollector fc = new StandardFacetsCollector(fsp , indexReader, taxoReader);\n    indexSearcher.search(q, fc);\n    List<FacetResult> results = fc.getFacetResults();\n    assertEquals(\"received too many facet results\", 1, results.size());\n    FacetResultNode frn = results.get(0).getFacetResultNode();\n    assertEquals(\"wrong number of children\", 2, frn.subResults.size());\n    for (FacetResultNode node : frn.subResults) {\n      assertEquals(\"wrong weight for child \" + node.label, 2, (int) node.value);\n    }\n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","date":1366056945,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","sourceNew":"  @Test\n  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n        return new AssertingCategoryListIterator(super.createCategoryListIterator(partition));\n      }\n    });\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    indexTwoDocs(indexWriter, facetFields, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 6th segment, with content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    FacetRequest countNoComplements = new CountFacetRequest(new CategoryPath(\"A\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(fip, countNoComplements);\n    FacetsCollector fc = FacetsCollector.create(fsp , indexReader, taxoReader);\n    indexSearcher.search(q, fc);\n    List<FacetResult> results = fc.getFacetResults();\n    assertEquals(\"received too many facet results\", 1, results.size());\n    FacetResultNode frn = results.get(0).getFacetResultNode();\n    assertEquals(\"wrong number of children\", 2, frn.subResults.size());\n    for (FacetResultNode node : frn.subResults) {\n      assertEquals(\"wrong weight for child \" + node.label, 2, (int) node.value);\n    }\n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n        return new AssertingCategoryListIterator(super.createCategoryListIterator(partition));\n      }\n    });\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    indexTwoDocs(indexWriter, facetFields, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 6th segment, with content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    FacetRequest countNoComplements = new CountFacetRequest(new CategoryPath(\"A\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(fip, countNoComplements);\n    FacetsCollector fc = FacetsCollector.create(fsp , indexReader, taxoReader);\n    indexSearcher.search(q, fc);\n    List<FacetResult> results = fc.getFacetResults();\n    assertEquals(\"received too many facet results\", 1, results.size());\n    FacetResultNode frn = results.get(0).getFacetResultNode();\n    assertEquals(\"wrong number of children\", 2, frn.subResults.size());\n    for (FacetResultNode node : frn.subResults) {\n      assertEquals(\"wrong weight for child \" + node.label, 2, (int) node.value);\n    }\n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","sourceNew":"  @Test\n  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n        return new AssertingCategoryListIterator(super.createCategoryListIterator(partition));\n      }\n    });\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    indexTwoDocs(indexWriter, facetFields, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 6th segment, with content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    FacetRequest countNoComplements = new CountFacetRequest(new FacetLabel(\"A\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(fip, countNoComplements);\n    FacetsCollector fc = FacetsCollector.create(fsp , indexReader, taxoReader);\n    indexSearcher.search(q, fc);\n    List<FacetResult> results = fc.getFacetResults();\n    assertEquals(\"received too many facet results\", 1, results.size());\n    FacetResultNode frn = results.get(0).getFacetResultNode();\n    assertEquals(\"wrong number of children\", 2, frn.subResults.size());\n    for (FacetResultNode node : frn.subResults) {\n      assertEquals(\"wrong weight for child \" + node.label, 2, (int) node.value);\n    }\n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n        return new AssertingCategoryListIterator(super.createCategoryListIterator(partition));\n      }\n    });\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    indexTwoDocs(indexWriter, facetFields, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 6th segment, with content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    FacetRequest countNoComplements = new CountFacetRequest(new CategoryPath(\"A\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(fip, countNoComplements);\n    FacetsCollector fc = FacetsCollector.create(fsp , indexReader, taxoReader);\n    indexSearcher.search(q, fc);\n    List<FacetResult> results = fc.getFacetResults();\n    assertEquals(\"received too many facet results\", 1, results.size());\n    FacetResultNode frn = results.get(0).getFacetResultNode();\n    assertEquals(\"wrong number of children\", 2, frn.subResults.size());\n    for (FacetResultNode node : frn.subResults) {\n      assertEquals(\"wrong weight for child \" + node.label, 2, (int) node.value);\n    }\n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f01616d06510fc630b6ef0ec324bdebc2fc49b3c","date":1385331328,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts#testSegmentsWithoutCategoriesOrResults().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","sourceNew":"  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n    indexTwoDocs(indexWriter, config, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, config, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, config, true);  // 6th segment, with content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    SimpleFacetsCollector sfc = new SimpleFacetsCollector();\n    indexSearcher.search(q, sfc);\n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, sfc);\n    SimpleFacetResult result = facets.getTopChildren(10, \"A\");\n    assertEquals(\"wrong number of children\", 2, result.labelValues.length);\n    for (LabelAndValue labelValue : result.labelValues) {\n      assertEquals(\"wrong weight for child \" + labelValue.label, 2, labelValue.value.intValue());\n    }\n\n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n        return new AssertingCategoryListIterator(super.createCategoryListIterator(partition));\n      }\n    });\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    indexTwoDocs(indexWriter, facetFields, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 6th segment, with content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    FacetRequest countNoComplements = new CountFacetRequest(new FacetLabel(\"A\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(fip, countNoComplements);\n    FacetsCollector fc = FacetsCollector.create(fsp , indexReader, taxoReader);\n    indexSearcher.search(q, fc);\n    List<FacetResult> results = fc.getFacetResults();\n    assertEquals(\"received too many facet results\", 1, results.size());\n    FacetResultNode frn = results.get(0).getFacetResultNode();\n    assertEquals(\"wrong number of children\", 2, frn.subResults.size());\n    for (FacetResultNode node : frn.subResults) {\n      assertEquals(\"wrong weight for child \" + node.label, 2, (int) node.value);\n    }\n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestStandardFacetsAccumulator#testSegmentsWithoutCategoriesOrResults().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n        return new AssertingCategoryListIterator(super.createCategoryListIterator(partition));\n      }\n    });\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    indexTwoDocs(indexWriter, facetFields, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, facetFields, true);  // 6th segment, with content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    FacetRequest countNoComplements = new CountFacetRequest(new CategoryPath(\"A\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(fip, countNoComplements);\n    FacetsCollector fc = FacetsCollector.create(fsp , indexReader, taxoReader);\n    indexSearcher.search(q, fc);\n    List<FacetResult> results = fc.getFacetResults();\n    assertEquals(\"received too many facet results\", 1, results.size());\n    FacetResultNode frn = results.get(0).getFacetResultNode();\n    assertEquals(\"wrong number of children\", 2, frn.subResults.size());\n    for (FacetResultNode node : frn.subResults) {\n      assertEquals(\"wrong weight for child \" + node.label, 2, (int) node.value);\n    }\n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["811cdb4a80352766eb0c762e48972707a924e5cd"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["8917bfede3b4ca30f4305c1e391e9218959cd723","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"07155cdd910937cdf6877e48884d5782845c8b8b":["c4015cd39dff8d4dec562d909f9766debac53aa6","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"61d5f95d14e5b9b046998c51e16709a398c15226":["07155cdd910937cdf6877e48884d5782845c8b8b","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"811cdb4a80352766eb0c762e48972707a924e5cd":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"]},"commit2Childs":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["07155cdd910937cdf6877e48884d5782845c8b8b","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["8917bfede3b4ca30f4305c1e391e9218959cd723","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["07155cdd910937cdf6877e48884d5782845c8b8b"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"07155cdd910937cdf6877e48884d5782845c8b8b":["61d5f95d14e5b9b046998c51e16709a398c15226"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["42f51b3ab4258ff4623227b0db011b8bb83db5c7","8917bfede3b4ca30f4305c1e391e9218959cd723"],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["571abba77e55fea386a38c0024f72ffa5b37a9ad","61d5f95d14e5b9b046998c51e16709a398c15226"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["c4015cd39dff8d4dec562d909f9766debac53aa6","811cdb4a80352766eb0c762e48972707a924e5cd"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["c190847801a50f4dd20fd639bdc29b54ea3b288b","3cc728b07df73b197e6d940d27f9b08b63918f13"],"811cdb4a80352766eb0c762e48972707a924e5cd":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}