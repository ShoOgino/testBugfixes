{"path":"solr/core/src/java/org/apache/solr/search/DocSetBase[DocSet]#equals(Object).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase[DocSet]#equals(Object).mjava","pathOld":"solr/src/java/org/apache/solr/search/DocSetBase[DocSet]#equals(Object).mjava","sourceNew":"  // Not implemented efficiently... for testing purposes only\n  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof DocSet)) return false;\n    DocSet other = (DocSet)obj;\n    if (this.size() != other.size()) return false;\n\n    if (this instanceof DocList && other instanceof DocList) {\n      // compare ordering\n      DocIterator i1=this.iterator();\n      DocIterator i2=other.iterator();\n      while(i1.hasNext() && i2.hasNext()) {\n        if (i1.nextDoc() != i2.nextDoc()) return false;\n      }\n      return true;\n      // don't compare matches\n    }\n\n    // if (this.size() != other.size()) return false;\n    return this.getBits().equals(other.getBits());\n  }\n\n","sourceOld":"  // Not implemented efficiently... for testing purposes only\n  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof DocSet)) return false;\n    DocSet other = (DocSet)obj;\n    if (this.size() != other.size()) return false;\n\n    if (this instanceof DocList && other instanceof DocList) {\n      // compare ordering\n      DocIterator i1=this.iterator();\n      DocIterator i2=other.iterator();\n      while(i1.hasNext() && i2.hasNext()) {\n        if (i1.nextDoc() != i2.nextDoc()) return false;\n      }\n      return true;\n      // don't compare matches\n    }\n\n    // if (this.size() != other.size()) return false;\n    return this.getBits().equals(other.getBits());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase[DocSet]#equals(Object).mjava","pathOld":"solr/src/java/org/apache/solr/search/DocSetBase[DocSet]#equals(Object).mjava","sourceNew":"  // Not implemented efficiently... for testing purposes only\n  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof DocSet)) return false;\n    DocSet other = (DocSet)obj;\n    if (this.size() != other.size()) return false;\n\n    if (this instanceof DocList && other instanceof DocList) {\n      // compare ordering\n      DocIterator i1=this.iterator();\n      DocIterator i2=other.iterator();\n      while(i1.hasNext() && i2.hasNext()) {\n        if (i1.nextDoc() != i2.nextDoc()) return false;\n      }\n      return true;\n      // don't compare matches\n    }\n\n    // if (this.size() != other.size()) return false;\n    return this.getBits().equals(other.getBits());\n  }\n\n","sourceOld":"  // Not implemented efficiently... for testing purposes only\n  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof DocSet)) return false;\n    DocSet other = (DocSet)obj;\n    if (this.size() != other.size()) return false;\n\n    if (this instanceof DocList && other instanceof DocList) {\n      // compare ordering\n      DocIterator i1=this.iterator();\n      DocIterator i2=other.iterator();\n      while(i1.hasNext() && i2.hasNext()) {\n        if (i1.nextDoc() != i2.nextDoc()) return false;\n      }\n      return true;\n      // don't compare matches\n    }\n\n    // if (this.size() != other.size()) return false;\n    return this.getBits().equals(other.getBits());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase[DocSet]#equals(Object).mjava","pathOld":"solr/src/java/org/apache/solr/search/DocSetBase[DocSet]#equals(Object).mjava","sourceNew":"  // Not implemented efficiently... for testing purposes only\n  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof DocSet)) return false;\n    DocSet other = (DocSet)obj;\n    if (this.size() != other.size()) return false;\n\n    if (this instanceof DocList && other instanceof DocList) {\n      // compare ordering\n      DocIterator i1=this.iterator();\n      DocIterator i2=other.iterator();\n      while(i1.hasNext() && i2.hasNext()) {\n        if (i1.nextDoc() != i2.nextDoc()) return false;\n      }\n      return true;\n      // don't compare matches\n    }\n\n    // if (this.size() != other.size()) return false;\n    return this.getBits().equals(other.getBits());\n  }\n\n","sourceOld":"  // Not implemented efficiently... for testing purposes only\n  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof DocSet)) return false;\n    DocSet other = (DocSet)obj;\n    if (this.size() != other.size()) return false;\n\n    if (this instanceof DocList && other instanceof DocList) {\n      // compare ordering\n      DocIterator i1=this.iterator();\n      DocIterator i2=other.iterator();\n      while(i1.hasNext() && i2.hasNext()) {\n        if (i1.nextDoc() != i2.nextDoc()) return false;\n      }\n      return true;\n      // don't compare matches\n    }\n\n    // if (this.size() != other.size()) return false;\n    return this.getBits().equals(other.getBits());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22e7d2e6a853c3178eccc356ffa07e7ebca55cdd","date":1332689453,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#equals(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase[DocSet]#equals(Object).mjava","sourceNew":"  // Not implemented efficiently... for testing purposes only\n  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof DocSet)) return false;\n    DocSet other = (DocSet)obj;\n    if (this.size() != other.size()) return false;\n\n    if (this instanceof DocList && other instanceof DocList) {\n      // compare ordering\n      DocIterator i1=this.iterator();\n      DocIterator i2=other.iterator();\n      while(i1.hasNext() && i2.hasNext()) {\n        if (i1.nextDoc() != i2.nextDoc()) return false;\n      }\n      return true;\n      // don't compare matches\n    }\n\n    // if (this.size() != other.size()) return false;\n    return this.getBits().equals(other.getBits());\n  }\n\n","sourceOld":"  // Not implemented efficiently... for testing purposes only\n  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof DocSet)) return false;\n    DocSet other = (DocSet)obj;\n    if (this.size() != other.size()) return false;\n\n    if (this instanceof DocList && other instanceof DocList) {\n      // compare ordering\n      DocIterator i1=this.iterator();\n      DocIterator i2=other.iterator();\n      while(i1.hasNext() && i2.hasNext()) {\n        if (i1.nextDoc() != i2.nextDoc()) return false;\n      }\n      return true;\n      // don't compare matches\n    }\n\n    // if (this.size() != other.size()) return false;\n    return this.getBits().equals(other.getBits());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"22e7d2e6a853c3178eccc356ffa07e7ebca55cdd":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22e7d2e6a853c3178eccc356ffa07e7ebca55cdd"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["22e7d2e6a853c3178eccc356ffa07e7ebca55cdd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"22e7d2e6a853c3178eccc356ffa07e7ebca55cdd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}