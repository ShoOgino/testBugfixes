{"path":"lucene/backwards/src/java/org/apache/lucene/index/TermInfosWriter#writeTerm(int,byte[],int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/TermInfosWriter#writeTerm(int,byte[],int).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/TermInfosWriter#writeTerm(int,byte[],int).mjava","sourceNew":"  private void writeTerm(int fieldNumber, byte[] termBytes, int termBytesLength)\n       throws IOException {\n\n    // TODO: UTF16toUTF8 could tell us this prefix\n    // Compute prefix in common with last term:\n    int start = 0;\n    final int limit = termBytesLength < lastTermBytesLength ? termBytesLength : lastTermBytesLength;\n    while(start < limit) {\n      if (termBytes[start] != lastTermBytes[start])\n        break;\n      start++;\n    }\n\n    final int length = termBytesLength - start;\n    output.writeVInt(start);                     // write shared prefix length\n    output.writeVInt(length);                  // write delta length\n    output.writeBytes(termBytes, start, length);  // write delta bytes\n    output.writeVInt(fieldNumber); // write field num\n    if (lastTermBytes.length < termBytesLength) {\n      byte[] newArray = new byte[(int) (termBytesLength*1.5)];\n      System.arraycopy(lastTermBytes, 0, newArray, 0, start);\n      lastTermBytes = newArray;\n    }\n    System.arraycopy(termBytes, start, lastTermBytes, start, length);\n    lastTermBytesLength = termBytesLength;\n  }\n\n","sourceOld":"  private void writeTerm(int fieldNumber, byte[] termBytes, int termBytesLength)\n       throws IOException {\n\n    // TODO: UTF16toUTF8 could tell us this prefix\n    // Compute prefix in common with last term:\n    int start = 0;\n    final int limit = termBytesLength < lastTermBytesLength ? termBytesLength : lastTermBytesLength;\n    while(start < limit) {\n      if (termBytes[start] != lastTermBytes[start])\n        break;\n      start++;\n    }\n\n    final int length = termBytesLength - start;\n    output.writeVInt(start);                     // write shared prefix length\n    output.writeVInt(length);                  // write delta length\n    output.writeBytes(termBytes, start, length);  // write delta bytes\n    output.writeVInt(fieldNumber); // write field num\n    if (lastTermBytes.length < termBytesLength) {\n      byte[] newArray = new byte[(int) (termBytesLength*1.5)];\n      System.arraycopy(lastTermBytes, 0, newArray, 0, start);\n      lastTermBytes = newArray;\n    }\n    System.arraycopy(termBytes, start, lastTermBytes, start, length);\n    lastTermBytesLength = termBytesLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/TermInfosWriter#writeTerm(int,byte[],int).mjava","sourceNew":null,"sourceOld":"  private void writeTerm(int fieldNumber, byte[] termBytes, int termBytesLength)\n       throws IOException {\n\n    // TODO: UTF16toUTF8 could tell us this prefix\n    // Compute prefix in common with last term:\n    int start = 0;\n    final int limit = termBytesLength < lastTermBytesLength ? termBytesLength : lastTermBytesLength;\n    while(start < limit) {\n      if (termBytes[start] != lastTermBytes[start])\n        break;\n      start++;\n    }\n\n    final int length = termBytesLength - start;\n    output.writeVInt(start);                     // write shared prefix length\n    output.writeVInt(length);                  // write delta length\n    output.writeBytes(termBytes, start, length);  // write delta bytes\n    output.writeVInt(fieldNumber); // write field num\n    if (lastTermBytes.length < termBytesLength) {\n      byte[] newArray = new byte[(int) (termBytesLength*1.5)];\n      System.arraycopy(lastTermBytes, 0, newArray, 0, start);\n      lastTermBytes = newArray;\n    }\n    System.arraycopy(termBytes, start, lastTermBytes, start, length);\n    lastTermBytesLength = termBytesLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}