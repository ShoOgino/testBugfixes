{"path":"src/test/org/apache/lucene/search/payloads/TestBoostingTermQuery.PayloadFilter#incrementToken().mjava","commits":[{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/payloads/TestBoostingTermQuery.PayloadFilter#incrementToken().mjava","pathOld":"src/test/org/apache/lucene/search/payloads/TestBoostingTermQuery.PayloadFilter#next(Token).mjava","sourceNew":"    public boolean incrementToken() throws IOException {\n      boolean hasNext = input.incrementToken();\n      if (hasNext) {\n        if (fieldName.equals(\"field\")) {\n          payloadAtt.setPayload(new Payload(payloadField));\n        } else if (fieldName.equals(\"multiField\")) {\n          if (numSeen % 2 == 0) {\n            payloadAtt.setPayload(new Payload(payloadMultiField1));\n          } else {\n            payloadAtt.setPayload(new Payload(payloadMultiField2));\n          }\n          numSeen++;\n        }\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    public Token next(final Token reusableToken) throws IOException {\n      assert reusableToken != null;\n      Token nextToken = input.next(reusableToken);\n      if (nextToken != null) {\n        if (fieldName.equals(\"field\")) {\n          nextToken.setPayload(new Payload(payloadField));\n        } else if (fieldName.equals(\"multiField\")) {\n          if (numSeen % 2 == 0) {\n            nextToken.setPayload(new Payload(payloadMultiField1));\n          } else {\n            nextToken.setPayload(new Payload(payloadMultiField2));\n          }\n          numSeen++;\n        }\n\n      }\n      return nextToken;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/payloads/TestBoostingTermQuery.PayloadFilter#incrementToken().mjava","sourceNew":null,"sourceOld":"    public boolean incrementToken() throws IOException {\n      boolean hasNext = input.incrementToken();\n      if (hasNext) {\n        if (fieldName.equals(\"field\")) {\n          payloadAtt.setPayload(new Payload(payloadField));\n        } else if (fieldName.equals(\"multiField\")) {\n          if (numSeen % 2 == 0) {\n            payloadAtt.setPayload(new Payload(payloadMultiField1));\n          } else {\n            payloadAtt.setPayload(new Payload(payloadMultiField2));\n          }\n          numSeen++;\n        }\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/payloads/TestBoostingTermQuery.PayloadFilter#incrementToken().mjava","sourceNew":null,"sourceOld":"    public boolean incrementToken() throws IOException {\n      boolean hasNext = input.incrementToken();\n      if (hasNext) {\n        if (fieldName.equals(\"field\")) {\n          payloadAtt.setPayload(new Payload(payloadField));\n        } else if (fieldName.equals(\"multiField\")) {\n          if (numSeen % 2 == 0) {\n            payloadAtt.setPayload(new Payload(payloadMultiField1));\n          } else {\n            payloadAtt.setPayload(new Payload(payloadMultiField2));\n          }\n          numSeen++;\n        }\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"0a046c0c310bc77931fc8441bd920053b607dd14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}