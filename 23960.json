{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#getTrivialSortingSlotAcc(FacetRequest.FacetSort).mjava","commits":[{"id":"94ce69d020f939568b84a1dbbfbd11bfd9907b73","date":1543618146,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#getTrivialSortingSlotAcc(FacetRequest.FacetSort).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Simple helper for checking if a {@FacetRequest.FacetSort} is on \"count\" or \"index\" and picking \n   * the existing SlotAcc \n   * @return an existing SlotAcc for sorting, else null if it should be built from the Aggs\n   */\n  private SlotAcc getTrivialSortingSlotAcc(FacetRequest.FacetSort fsort) {\n    if (\"count\".equals(fsort.sortVariable)) {\n      assert null != countAcc;\n      return countAcc;\n    } else if (\"index\".equals(fsort.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      return indexOrderAcc;\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["055706edcc08dfbacd42d8ed4144209d3dc05b67"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"055706edcc08dfbacd42d8ed4144209d3dc05b67","date":1569388195,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#getTrivialSortingSlotAcc(FacetRequest.FacetSort).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#getTrivialSortingSlotAcc(FacetRequest.FacetSort).mjava","sourceNew":"  /** \n   * Simple helper for checking if a {@link FacetRequest.FacetSort} is on \"count\" or \"index\" and picking\n   * the existing SlotAcc \n   * @return an existing SlotAcc for sorting, else null if it should be built from the Aggs\n   */\n  private SlotAcc getTrivialSortingSlotAcc(FacetRequest.FacetSort fsort) {\n    if (\"count\".equals(fsort.sortVariable)) {\n      assert null != countAcc;\n      return countAcc;\n    } else if (\"index\".equals(fsort.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      return indexOrderAcc;\n    }\n    return null;\n  }\n\n","sourceOld":"  /** \n   * Simple helper for checking if a {@FacetRequest.FacetSort} is on \"count\" or \"index\" and picking \n   * the existing SlotAcc \n   * @return an existing SlotAcc for sorting, else null if it should be built from the Aggs\n   */\n  private SlotAcc getTrivialSortingSlotAcc(FacetRequest.FacetSort fsort) {\n    if (\"count\".equals(fsort.sortVariable)) {\n      assert null != countAcc;\n      return countAcc;\n    } else if (\"index\".equals(fsort.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      return indexOrderAcc;\n    }\n    return null;\n  }\n\n","bugFix":["94ce69d020f939568b84a1dbbfbd11bfd9907b73"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#getTrivialSortingSlotAcc(FacetRequest.FacetSort).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#getTrivialSortingSlotAcc(FacetRequest.FacetSort).mjava","sourceNew":"  /** \n   * Simple helper for checking if a {@link FacetRequest.FacetSort} is on \"count\" or \"index\" and picking\n   * the existing SlotAcc \n   * @return an existing SlotAcc for sorting, else null if it should be built from the Aggs\n   */\n  private SlotAcc getTrivialSortingSlotAcc(FacetRequest.FacetSort fsort) {\n    if (\"count\".equals(fsort.sortVariable)) {\n      assert null != countAcc;\n      return countAcc;\n    } else if (\"index\".equals(fsort.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SlotAcc.SortSlotAcc(fcontext);\n      }\n      return indexOrderAcc;\n    }\n    return null;\n  }\n\n","sourceOld":"  /** \n   * Simple helper for checking if a {@link FacetRequest.FacetSort} is on \"count\" or \"index\" and picking\n   * the existing SlotAcc \n   * @return an existing SlotAcc for sorting, else null if it should be built from the Aggs\n   */\n  private SlotAcc getTrivialSortingSlotAcc(FacetRequest.FacetSort fsort) {\n    if (\"count\".equals(fsort.sortVariable)) {\n      assert null != countAcc;\n      return countAcc;\n    } else if (\"index\".equals(fsort.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      return indexOrderAcc;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["055706edcc08dfbacd42d8ed4144209d3dc05b67"],"055706edcc08dfbacd42d8ed4144209d3dc05b67":["94ce69d020f939568b84a1dbbfbd11bfd9907b73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"94ce69d020f939568b84a1dbbfbd11bfd9907b73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"055706edcc08dfbacd42d8ed4144209d3dc05b67":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["94ce69d020f939568b84a1dbbfbd11bfd9907b73"],"94ce69d020f939568b84a1dbbfbd11bfd9907b73":["055706edcc08dfbacd42d8ed4144209d3dc05b67"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}