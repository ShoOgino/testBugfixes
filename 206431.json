{"path":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getDirectReader(IndexInput).mjava","commits":[{"id":"142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb","date":1320691430,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getDirectReader(IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getRandomAccessReaderIterator(IndexInput).mjava","sourceNew":"  /**\n   * Retrieve PackedInts.Reader that does not load values\n   * into RAM but rather accesses all values via the\n   * provided IndexInput.\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an Reader to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static Reader getDirectReader(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    return new DirectReader(bitsPerValue, valueCount, in);\n  }\n\n","sourceOld":"  /**\n   * Retrieve PackedInts as a {@link RandomAccessReaderIterator}\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an iterator to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static RandomAccessReaderIterator getRandomAccessReaderIterator(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    return new PackedReaderIterator(bitsPerValue, valueCount, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getDirectReader(IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getDirectReader(IndexInput).mjava","sourceNew":"  /**\n   * Retrieve PackedInts.Reader that does not load values\n   * into RAM but rather accesses all values via the\n   * provided IndexInput.\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an Reader to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static Reader getDirectReader(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    return new DirectReader(bitsPerValue, valueCount, in);\n  }\n\n","sourceOld":"  /**\n   * Retrieve PackedInts.Reader that does not load values\n   * into RAM but rather accesses all values via the\n   * provided IndexInput.\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an Reader to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static Reader getDirectReader(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    return new DirectReader(bitsPerValue, valueCount, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb"],"142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}