{"path":"lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#testTerminatedEarly().mjava","commits":[{"id":"ff0a9c7bbae145588b269529bb55009dec1bb733","date":1438605556,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#testTerminatedEarly().mjava","pathOld":"/dev/null","sourceNew":"  public void testTerminatedEarly() throws IOException {\n    final int iters = atLeast(8);\n    for (int i = 0; i < iters; ++i) {\n      createRandomIndex(1);\n\n      final IndexSearcher searcher = newSearcherForTestTerminatedEarly(reader); // future TODO: use newSearcher(reader);\n      final Query query = new MatchAllDocsQuery(); // search for everything/anything\n\n      final TestTerminatedEarlySimpleCollector collector1 = new TestTerminatedEarlySimpleCollector();\n      searcher.search(query, collector1);\n\n      final TestTerminatedEarlySimpleCollector collector2 = new TestTerminatedEarlySimpleCollector();\n      final EarlyTerminatingSortingCollector etsCollector = new EarlyTerminatingSortingCollector(collector2, sort, 1, mergePolicy.getSort());\n      searcher.search(query, etsCollector);\n\n      assertTrue(\"collector1=\"+collector1.collectedSomething()+\" vs. collector2=\"+collector2.collectedSomething(), collector1.collectedSomething() == collector2.collectedSomething());\n\n      if (collector1.collectedSomething()) {\n        // we collected something and since we modestly asked for just one document we should have terminated early\n        assertTrue(\"should have terminated early (searcher.reader=\"+searcher.reader+\")\", etsCollector.terminatedEarly());\n      }\n      closeIndex();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75f521a62662f1ec69a2107e8ca6d1e37d54c033","date":1438786323,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#testTerminatedEarly().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#testTerminatedEarly().mjava","sourceNew":"  public void testTerminatedEarly() throws IOException {\n    final int iters = atLeast(8);\n    for (int i = 0; i < iters; ++i) {\n      createRandomIndex(true);\n\n      final IndexSearcher searcher = newSearcherForTestTerminatedEarly(reader); // future TODO: use newSearcher(reader);\n      final Query query = new MatchAllDocsQuery(); // search for everything/anything\n\n      final TestTerminatedEarlySimpleCollector collector1 = new TestTerminatedEarlySimpleCollector();\n      searcher.search(query, collector1);\n\n      final TestTerminatedEarlySimpleCollector collector2 = new TestTerminatedEarlySimpleCollector();\n      final EarlyTerminatingSortingCollector etsCollector = new EarlyTerminatingSortingCollector(collector2, sort, 1, mergePolicy.getSort());\n      searcher.search(query, etsCollector);\n\n      assertTrue(\"collector1=\"+collector1.collectedSomething()+\" vs. collector2=\"+collector2.collectedSomething(), collector1.collectedSomething() == collector2.collectedSomething());\n\n      if (collector1.collectedSomething()) {\n        // we collected something and since we modestly asked for just one document we should have terminated early\n        assertTrue(\"should have terminated early (searcher.reader=\"+searcher.reader+\")\", etsCollector.terminatedEarly());\n      }\n      closeIndex();\n    }\n  }\n\n","sourceOld":"  public void testTerminatedEarly() throws IOException {\n    final int iters = atLeast(8);\n    for (int i = 0; i < iters; ++i) {\n      createRandomIndex(1);\n\n      final IndexSearcher searcher = newSearcherForTestTerminatedEarly(reader); // future TODO: use newSearcher(reader);\n      final Query query = new MatchAllDocsQuery(); // search for everything/anything\n\n      final TestTerminatedEarlySimpleCollector collector1 = new TestTerminatedEarlySimpleCollector();\n      searcher.search(query, collector1);\n\n      final TestTerminatedEarlySimpleCollector collector2 = new TestTerminatedEarlySimpleCollector();\n      final EarlyTerminatingSortingCollector etsCollector = new EarlyTerminatingSortingCollector(collector2, sort, 1, mergePolicy.getSort());\n      searcher.search(query, etsCollector);\n\n      assertTrue(\"collector1=\"+collector1.collectedSomething()+\" vs. collector2=\"+collector2.collectedSomething(), collector1.collectedSomething() == collector2.collectedSomething());\n\n      if (collector1.collectedSomething()) {\n        // we collected something and since we modestly asked for just one document we should have terminated early\n        assertTrue(\"should have terminated early (searcher.reader=\"+searcher.reader+\")\", etsCollector.terminatedEarly());\n      }\n      closeIndex();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#testTerminatedEarly().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#testTerminatedEarly().mjava","sourceNew":"  public void testTerminatedEarly() throws IOException {\n    final int iters = atLeast(8);\n    for (int i = 0; i < iters; ++i) {\n      createRandomIndex(true);\n\n      final IndexSearcher searcher = newSearcherForTestTerminatedEarly(reader); // future TODO: use newSearcher(reader);\n      final Query query = new MatchAllDocsQuery(); // search for everything/anything\n\n      final TestTerminatedEarlySimpleCollector collector1 = new TestTerminatedEarlySimpleCollector();\n      searcher.search(query, collector1);\n\n      final TestTerminatedEarlySimpleCollector collector2 = new TestTerminatedEarlySimpleCollector();\n      final EarlyTerminatingSortingCollector etsCollector = new EarlyTerminatingSortingCollector(collector2, sort, 1);\n      searcher.search(query, etsCollector);\n\n      assertTrue(\"collector1=\"+collector1.collectedSomething()+\" vs. collector2=\"+collector2.collectedSomething(), collector1.collectedSomething() == collector2.collectedSomething());\n\n      if (collector1.collectedSomething()) {\n        // we collected something and since we modestly asked for just one document we should have terminated early\n        assertTrue(\"should have terminated early (searcher.reader=\"+searcher.reader+\")\", etsCollector.terminatedEarly());\n      }\n      closeIndex();\n    }\n  }\n\n","sourceOld":"  public void testTerminatedEarly() throws IOException {\n    final int iters = atLeast(8);\n    for (int i = 0; i < iters; ++i) {\n      createRandomIndex(true);\n\n      final IndexSearcher searcher = newSearcherForTestTerminatedEarly(reader); // future TODO: use newSearcher(reader);\n      final Query query = new MatchAllDocsQuery(); // search for everything/anything\n\n      final TestTerminatedEarlySimpleCollector collector1 = new TestTerminatedEarlySimpleCollector();\n      searcher.search(query, collector1);\n\n      final TestTerminatedEarlySimpleCollector collector2 = new TestTerminatedEarlySimpleCollector();\n      final EarlyTerminatingSortingCollector etsCollector = new EarlyTerminatingSortingCollector(collector2, sort, 1, mergePolicy.getSort());\n      searcher.search(query, etsCollector);\n\n      assertTrue(\"collector1=\"+collector1.collectedSomething()+\" vs. collector2=\"+collector2.collectedSomething(), collector1.collectedSomething() == collector2.collectedSomething());\n\n      if (collector1.collectedSomething()) {\n        // we collected something and since we modestly asked for just one document we should have terminated early\n        assertTrue(\"should have terminated early (searcher.reader=\"+searcher.reader+\")\", etsCollector.terminatedEarly());\n      }\n      closeIndex();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8","date":1462567286,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#testTerminatedEarly().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#testTerminatedEarly().mjava","sourceNew":"  public void testTerminatedEarly() throws IOException {\n    final int iters = atLeast(8);\n    for (int i = 0; i < iters; ++i) {\n      createRandomIndex(true);\n\n      final IndexSearcher searcher = new IndexSearcher(reader); // future TODO: use newSearcher(reader);\n      final Query query = new MatchAllDocsQuery(); // search for everything/anything\n\n      final TestTerminatedEarlySimpleCollector collector1 = new TestTerminatedEarlySimpleCollector();\n      searcher.search(query, collector1);\n\n      final TestTerminatedEarlySimpleCollector collector2 = new TestTerminatedEarlySimpleCollector();\n      final EarlyTerminatingSortingCollector etsCollector = new EarlyTerminatingSortingCollector(collector2, sort, 1);\n      searcher.search(query, etsCollector);\n\n      assertTrue(\"collector1=\"+collector1.collectedSomething()+\" vs. collector2=\"+collector2.collectedSomething(), collector1.collectedSomething() == collector2.collectedSomething());\n\n      if (collector1.collectedSomething()) {\n        // we collected something and since we modestly asked for just one document we should have terminated early\n        assertTrue(\"should have terminated early (searcher.reader=\"+searcher.reader+\")\", etsCollector.terminatedEarly());\n      }\n      closeIndex();\n    }\n  }\n\n","sourceOld":"  public void testTerminatedEarly() throws IOException {\n    final int iters = atLeast(8);\n    for (int i = 0; i < iters; ++i) {\n      createRandomIndex(true);\n\n      final IndexSearcher searcher = newSearcherForTestTerminatedEarly(reader); // future TODO: use newSearcher(reader);\n      final Query query = new MatchAllDocsQuery(); // search for everything/anything\n\n      final TestTerminatedEarlySimpleCollector collector1 = new TestTerminatedEarlySimpleCollector();\n      searcher.search(query, collector1);\n\n      final TestTerminatedEarlySimpleCollector collector2 = new TestTerminatedEarlySimpleCollector();\n      final EarlyTerminatingSortingCollector etsCollector = new EarlyTerminatingSortingCollector(collector2, sort, 1);\n      searcher.search(query, etsCollector);\n\n      assertTrue(\"collector1=\"+collector1.collectedSomething()+\" vs. collector2=\"+collector2.collectedSomething(), collector1.collectedSomething() == collector2.collectedSomething());\n\n      if (collector1.collectedSomething()) {\n        // we collected something and since we modestly asked for just one document we should have terminated early\n        assertTrue(\"should have terminated early (searcher.reader=\"+searcher.reader+\")\", etsCollector.terminatedEarly());\n      }\n      closeIndex();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb0345a2d45479f891041f8b3ce351bc975e64ac","date":1462708700,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#testTerminatedEarly().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#testTerminatedEarly().mjava","sourceNew":"  public void testTerminatedEarly() throws IOException {\n    final int iters = atLeast(8);\n    for (int i = 0; i < iters; ++i) {\n      createRandomIndex(true);\n\n      final IndexSearcher searcher = new IndexSearcher(reader); // future TODO: use newSearcher(reader);\n      final Query query = new MatchAllDocsQuery(); // search for everything/anything\n\n      final TestTerminatedEarlySimpleCollector collector1 = new TestTerminatedEarlySimpleCollector();\n      searcher.search(query, collector1);\n\n      final TestTerminatedEarlySimpleCollector collector2 = new TestTerminatedEarlySimpleCollector();\n      final EarlyTerminatingSortingCollector etsCollector = new EarlyTerminatingSortingCollector(collector2, sort, 1);\n      searcher.search(query, etsCollector);\n\n      assertTrue(\"collector1=\"+collector1.collectedSomething()+\" vs. collector2=\"+collector2.collectedSomething(), collector1.collectedSomething() == collector2.collectedSomething());\n\n      if (collector1.collectedSomething()) {\n        // we collected something and since we modestly asked for just one document we should have terminated early\n        assertTrue(\"should have terminated early (searcher.reader=\"+searcher.reader+\")\", etsCollector.terminatedEarly());\n      }\n      closeIndex();\n    }\n  }\n\n","sourceOld":"  public void testTerminatedEarly() throws IOException {\n    final int iters = atLeast(8);\n    for (int i = 0; i < iters; ++i) {\n      createRandomIndex(true);\n\n      final IndexSearcher searcher = new IndexSearcher(reader); // future TODO: use newSearcher(reader);\n      final Query query = new MatchAllDocsQuery(); // search for everything/anything\n\n      final TestTerminatedEarlySimpleCollector collector1 = new TestTerminatedEarlySimpleCollector();\n      searcher.search(query, collector1);\n\n      final TestTerminatedEarlySimpleCollector collector2 = new TestTerminatedEarlySimpleCollector();\n      final EarlyTerminatingSortingCollector etsCollector = new EarlyTerminatingSortingCollector(collector2, sort, 1);\n      searcher.search(query, etsCollector);\n\n      assertTrue(\"collector1=\"+collector1.collectedSomething()+\" vs. collector2=\"+collector2.collectedSomething(), collector1.collectedSomething() == collector2.collectedSomething());\n\n      if (collector1.collectedSomething()) {\n        // we collected something and since we modestly asked for just one document we should have terminated early\n        assertTrue(\"should have terminated early (searcher.reader=\"+searcher.reader+\")\", etsCollector.terminatedEarly());\n      }\n      closeIndex();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#testTerminatedEarly().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#testTerminatedEarly().mjava","sourceNew":"  public void testTerminatedEarly() throws IOException {\n    final int iters = atLeast(8);\n    for (int i = 0; i < iters; ++i) {\n      createRandomIndex(true);\n\n      final IndexSearcher searcher = new IndexSearcher(reader); // future TODO: use newSearcher(reader);\n      final Query query = new MatchAllDocsQuery(); // search for everything/anything\n\n      final TestTerminatedEarlySimpleCollector collector1 = new TestTerminatedEarlySimpleCollector();\n      searcher.search(query, collector1);\n\n      final TestTerminatedEarlySimpleCollector collector2 = new TestTerminatedEarlySimpleCollector();\n      final EarlyTerminatingSortingCollector etsCollector = new EarlyTerminatingSortingCollector(collector2, sort, 1);\n      searcher.search(query, etsCollector);\n\n      assertTrue(\"collector1=\"+collector1.collectedSomething()+\" vs. collector2=\"+collector2.collectedSomething(), collector1.collectedSomething() == collector2.collectedSomething());\n\n      if (collector1.collectedSomething()) {\n        // we collected something and since we modestly asked for just one document we should have terminated early\n        assertTrue(\"should have terminated early (searcher.reader=\"+searcher.reader+\")\", etsCollector.terminatedEarly());\n      }\n      closeIndex();\n    }\n  }\n\n","sourceOld":"  public void testTerminatedEarly() throws IOException {\n    final int iters = atLeast(8);\n    for (int i = 0; i < iters; ++i) {\n      createRandomIndex(true);\n\n      final IndexSearcher searcher = newSearcherForTestTerminatedEarly(reader); // future TODO: use newSearcher(reader);\n      final Query query = new MatchAllDocsQuery(); // search for everything/anything\n\n      final TestTerminatedEarlySimpleCollector collector1 = new TestTerminatedEarlySimpleCollector();\n      searcher.search(query, collector1);\n\n      final TestTerminatedEarlySimpleCollector collector2 = new TestTerminatedEarlySimpleCollector();\n      final EarlyTerminatingSortingCollector etsCollector = new EarlyTerminatingSortingCollector(collector2, sort, 1, mergePolicy.getSort());\n      searcher.search(query, etsCollector);\n\n      assertTrue(\"collector1=\"+collector1.collectedSomething()+\" vs. collector2=\"+collector2.collectedSomething(), collector1.collectedSomething() == collector2.collectedSomething());\n\n      if (collector1.collectedSomething()) {\n        // we collected something and since we modestly asked for just one document we should have terminated early\n        assertTrue(\"should have terminated early (searcher.reader=\"+searcher.reader+\")\", etsCollector.terminatedEarly());\n      }\n      closeIndex();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#testTerminatedEarly().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#testTerminatedEarly().mjava","sourceNew":"  public void testTerminatedEarly() throws IOException {\n    final int iters = atLeast(8);\n    for (int i = 0; i < iters; ++i) {\n      createRandomIndex(true);\n\n      final IndexSearcher searcher = new IndexSearcher(reader); // future TODO: use newSearcher(reader);\n      final Query query = new MatchAllDocsQuery(); // search for everything/anything\n\n      final TestTerminatedEarlySimpleCollector collector1 = new TestTerminatedEarlySimpleCollector();\n      searcher.search(query, collector1);\n\n      final TestTerminatedEarlySimpleCollector collector2 = new TestTerminatedEarlySimpleCollector();\n      final EarlyTerminatingSortingCollector etsCollector = new EarlyTerminatingSortingCollector(collector2, sort, 1);\n      searcher.search(query, etsCollector);\n\n      assertTrue(\"collector1=\"+collector1.collectedSomething()+\" vs. collector2=\"+collector2.collectedSomething(), collector1.collectedSomething() == collector2.collectedSomething());\n\n      if (collector1.collectedSomething()) {\n        // we collected something and since we modestly asked for just one document we should have terminated early\n        assertTrue(\"should have terminated early (searcher.reader=\"+searcher.reader+\")\", etsCollector.terminatedEarly());\n      }\n      closeIndex();\n    }\n  }\n\n","sourceOld":"  public void testTerminatedEarly() throws IOException {\n    final int iters = atLeast(8);\n    for (int i = 0; i < iters; ++i) {\n      createRandomIndex(true);\n\n      final IndexSearcher searcher = newSearcherForTestTerminatedEarly(reader); // future TODO: use newSearcher(reader);\n      final Query query = new MatchAllDocsQuery(); // search for everything/anything\n\n      final TestTerminatedEarlySimpleCollector collector1 = new TestTerminatedEarlySimpleCollector();\n      searcher.search(query, collector1);\n\n      final TestTerminatedEarlySimpleCollector collector2 = new TestTerminatedEarlySimpleCollector();\n      final EarlyTerminatingSortingCollector etsCollector = new EarlyTerminatingSortingCollector(collector2, sort, 1, mergePolicy.getSort());\n      searcher.search(query, etsCollector);\n\n      assertTrue(\"collector1=\"+collector1.collectedSomething()+\" vs. collector2=\"+collector2.collectedSomething(), collector1.collectedSomething() == collector2.collectedSomething());\n\n      if (collector1.collectedSomething()) {\n        // we collected something and since we modestly asked for just one document we should have terminated early\n        assertTrue(\"should have terminated early (searcher.reader=\"+searcher.reader+\")\", etsCollector.terminatedEarly());\n      }\n      closeIndex();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#testTerminatedEarly().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#testTerminatedEarly().mjava","sourceNew":"  public void testTerminatedEarly() throws IOException {\n    final int iters = atLeast(8);\n    for (int i = 0; i < iters; ++i) {\n      createRandomIndex(true);\n\n      final IndexSearcher searcher = new IndexSearcher(reader); // future TODO: use newSearcher(reader);\n      final Query query = new MatchAllDocsQuery(); // search for everything/anything\n\n      final TestTerminatedEarlySimpleCollector collector1 = new TestTerminatedEarlySimpleCollector();\n      searcher.search(query, collector1);\n\n      final TestTerminatedEarlySimpleCollector collector2 = new TestTerminatedEarlySimpleCollector();\n      final EarlyTerminatingSortingCollector etsCollector = new EarlyTerminatingSortingCollector(collector2, sort, 1);\n      searcher.search(query, etsCollector);\n\n      assertTrue(\"collector1=\"+collector1.collectedSomething()+\" vs. collector2=\"+collector2.collectedSomething(), collector1.collectedSomething() == collector2.collectedSomething());\n\n      if (collector1.collectedSomething()) {\n        // we collected something and since we modestly asked for just one document we should have terminated early\n        assertTrue(\"should have terminated early (searcher.reader=\"+searcher.reader+\")\", etsCollector.terminatedEarly());\n      }\n      closeIndex();\n    }\n  }\n\n","sourceOld":"  public void testTerminatedEarly() throws IOException {\n    final int iters = atLeast(8);\n    for (int i = 0; i < iters; ++i) {\n      createRandomIndex(true);\n\n      final IndexSearcher searcher = newSearcherForTestTerminatedEarly(reader); // future TODO: use newSearcher(reader);\n      final Query query = new MatchAllDocsQuery(); // search for everything/anything\n\n      final TestTerminatedEarlySimpleCollector collector1 = new TestTerminatedEarlySimpleCollector();\n      searcher.search(query, collector1);\n\n      final TestTerminatedEarlySimpleCollector collector2 = new TestTerminatedEarlySimpleCollector();\n      final EarlyTerminatingSortingCollector etsCollector = new EarlyTerminatingSortingCollector(collector2, sort, 1, mergePolicy.getSort());\n      searcher.search(query, etsCollector);\n\n      assertTrue(\"collector1=\"+collector1.collectedSomething()+\" vs. collector2=\"+collector2.collectedSomething(), collector1.collectedSomething() == collector2.collectedSomething());\n\n      if (collector1.collectedSomething()) {\n        // we collected something and since we modestly asked for just one document we should have terminated early\n        assertTrue(\"should have terminated early (searcher.reader=\"+searcher.reader+\")\", etsCollector.terminatedEarly());\n      }\n      closeIndex();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#testTerminatedEarly().mjava","sourceNew":null,"sourceOld":"  public void testTerminatedEarly() throws IOException {\n    final int iters = atLeast(8);\n    for (int i = 0; i < iters; ++i) {\n      createRandomIndex(true);\n\n      final IndexSearcher searcher = newSearcherForTestTerminatedEarly(reader); // future TODO: use newSearcher(reader);\n      final Query query = new MatchAllDocsQuery(); // search for everything/anything\n\n      final TestTerminatedEarlySimpleCollector collector1 = new TestTerminatedEarlySimpleCollector();\n      searcher.search(query, collector1);\n\n      final TestTerminatedEarlySimpleCollector collector2 = new TestTerminatedEarlySimpleCollector();\n      final EarlyTerminatingSortingCollector etsCollector = new EarlyTerminatingSortingCollector(collector2, sort, 1, mergePolicy.getSort());\n      searcher.search(query, etsCollector);\n\n      assertTrue(\"collector1=\"+collector1.collectedSomething()+\" vs. collector2=\"+collector2.collectedSomething(), collector1.collectedSomething() == collector2.collectedSomething());\n\n      if (collector1.collectedSomething()) {\n        // we collected something and since we modestly asked for just one document we should have terminated early\n        assertTrue(\"should have terminated early (searcher.reader=\"+searcher.reader+\")\", etsCollector.terminatedEarly());\n      }\n      closeIndex();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["75f521a62662f1ec69a2107e8ca6d1e37d54c033"],"ff0a9c7bbae145588b269529bb55009dec1bb733":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"75f521a62662f1ec69a2107e8ca6d1e37d54c033":["ff0a9c7bbae145588b269529bb55009dec1bb733"],"0ad30c6a479e764150a3316e57263319775f1df2":["75f521a62662f1ec69a2107e8ca6d1e37d54c033","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["75f521a62662f1ec69a2107e8ca6d1e37d54c033","fb0345a2d45479f891041f8b3ce351bc975e64ac"],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["75f521a62662f1ec69a2107e8ca6d1e37d54c033","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["75f521a62662f1ec69a2107e8ca6d1e37d54c033","0ad30c6a479e764150a3316e57263319775f1df2"],"fb0345a2d45479f891041f8b3ce351bc975e64ac":["fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8"]},"commit2Childs":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8"],"ff0a9c7bbae145588b269529bb55009dec1bb733":["75f521a62662f1ec69a2107e8ca6d1e37d54c033"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff0a9c7bbae145588b269529bb55009dec1bb733"],"75f521a62662f1ec69a2107e8ca6d1e37d54c033":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["fb0345a2d45479f891041f8b3ce351bc975e64ac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"fb0345a2d45479f891041f8b3ce351bc975e64ac":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}