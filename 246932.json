{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#deleteReplicaProp(ClusterState,ZkNodeProps).mjava","commits":[{"id":"dc2bafa00000be70227a04c29e3f885ff41e531d","date":1412182669,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#deleteReplicaProp(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"    private ClusterState deleteReplicaProp(ClusterState clusterState, ZkNodeProps message) {\n\n      if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Overseer DELETEREPLICAPROPERTY requires \" +\n                ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n                ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n      }\n      String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n      String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n\n      Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n            collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n      }\n\n      log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n          \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n      String curProp = replica.getStr(property);\n      if (curProp == null) return clusterState; // not there anyway, nothing to do.\n\n      Map<String, Replica> replicas = clusterState.getSlice(collectionName, sliceName).getReplicasCopy();\n      replica = replicas.get(replicaName);\n      replica.getProperties().remove(property);\n      Slice newSlice = new Slice(sliceName, replicas, clusterState.getSlice(collectionName, sliceName).shallowCopy());\n      return updateSlice(clusterState, collectionName, newSlice);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57517fbf5120ed94888bc0bfb86f9a81094059cf","date":1412273713,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#deleteReplicaProp(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#deleteReplicaProp(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState deleteReplicaProp(ClusterState clusterState, ZkNodeProps message) {\n\n      if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Overseer DELETEREPLICAPROPERTY requires \" +\n                ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n                ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n      }\n      String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n      String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n      if (property.startsWith(OverseerCollectionProcessor.COLL_PROP_PREFIX) == false) {\n        property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;\n      }\n\n      Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n            collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n      }\n\n      log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n          \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n      String curProp = replica.getStr(property);\n      if (curProp == null) return clusterState; // not there anyway, nothing to do.\n\n      Map<String, Replica> replicas = clusterState.getSlice(collectionName, sliceName).getReplicasCopy();\n      replica = replicas.get(replicaName);\n      replica.getProperties().remove(property);\n      Slice newSlice = new Slice(sliceName, replicas, clusterState.getSlice(collectionName, sliceName).shallowCopy());\n      return updateSlice(clusterState, collectionName, newSlice);\n    }\n\n","sourceOld":"    private ClusterState deleteReplicaProp(ClusterState clusterState, ZkNodeProps message) {\n\n      if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Overseer DELETEREPLICAPROPERTY requires \" +\n                ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n                ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n      }\n      String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n      String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n\n      Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n            collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n      }\n\n      log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n          \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n      String curProp = replica.getStr(property);\n      if (curProp == null) return clusterState; // not there anyway, nothing to do.\n\n      Map<String, Replica> replicas = clusterState.getSlice(collectionName, sliceName).getReplicasCopy();\n      replica = replicas.get(replicaName);\n      replica.getProperties().remove(property);\n      Slice newSlice = new Slice(sliceName, replicas, clusterState.getSlice(collectionName, sliceName).shallowCopy());\n      return updateSlice(clusterState, collectionName, newSlice);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#deleteReplicaProp(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"    private ClusterState deleteReplicaProp(ClusterState clusterState, ZkNodeProps message) {\n\n      if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Overseer DELETEREPLICAPROPERTY requires \" +\n                ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n                ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n      }\n      String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n      String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n      if (property.startsWith(OverseerCollectionProcessor.COLL_PROP_PREFIX) == false) {\n        property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;\n      }\n\n      Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n            collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n      }\n\n      log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n          \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n      String curProp = replica.getStr(property);\n      if (curProp == null) return clusterState; // not there anyway, nothing to do.\n\n      Map<String, Replica> replicas = clusterState.getSlice(collectionName, sliceName).getReplicasCopy();\n      replica = replicas.get(replicaName);\n      replica.getProperties().remove(property);\n      Slice newSlice = new Slice(sliceName, replicas, clusterState.getSlice(collectionName, sliceName).shallowCopy());\n      return updateSlice(clusterState, collectionName, newSlice);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64707d25b6352cf02909d3916038a3b3cec7f0a8","date":1412782122,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#deleteReplicaProp(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#deleteReplicaProp(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState deleteReplicaProp(ClusterState clusterState, ZkNodeProps message) {\n\n      if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Overseer DELETEREPLICAPROPERTY requires \" +\n                ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n                ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n      }\n      String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n      String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n      if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n        property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;\n      }\n\n      Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n            collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n      }\n\n      log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n          \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n      String curProp = replica.getStr(property);\n      if (curProp == null) return clusterState; // not there anyway, nothing to do.\n\n      Map<String, Replica> replicas = clusterState.getSlice(collectionName, sliceName).getReplicasCopy();\n      replica = replicas.get(replicaName);\n      replica.getProperties().remove(property);\n      Slice newSlice = new Slice(sliceName, replicas, clusterState.getSlice(collectionName, sliceName).shallowCopy());\n      return updateSlice(clusterState, collectionName, newSlice);\n    }\n\n","sourceOld":"    private ClusterState deleteReplicaProp(ClusterState clusterState, ZkNodeProps message) {\n\n      if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Overseer DELETEREPLICAPROPERTY requires \" +\n                ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n                ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n      }\n      String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n      String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n      if (property.startsWith(OverseerCollectionProcessor.COLL_PROP_PREFIX) == false) {\n        property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;\n      }\n\n      Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n            collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n      }\n\n      log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n          \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n      String curProp = replica.getStr(property);\n      if (curProp == null) return clusterState; // not there anyway, nothing to do.\n\n      Map<String, Replica> replicas = clusterState.getSlice(collectionName, sliceName).getReplicasCopy();\n      replica = replicas.get(replicaName);\n      replica.getProperties().remove(property);\n      Slice newSlice = new Slice(sliceName, replicas, clusterState.getSlice(collectionName, sliceName).shallowCopy());\n      return updateSlice(clusterState, collectionName, newSlice);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#deleteReplicaProp(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#deleteReplicaProp(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState deleteReplicaProp(ClusterState clusterState, ZkNodeProps message) {\n\n      if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Overseer DELETEREPLICAPROPERTY requires \" +\n                ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n                ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n      }\n      String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n      String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n      if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n        property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;\n      }\n\n      Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n            collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n      }\n\n      log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n          \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n      String curProp = replica.getStr(property);\n      if (curProp == null) return clusterState; // not there anyway, nothing to do.\n\n      Map<String, Replica> replicas = clusterState.getSlice(collectionName, sliceName).getReplicasCopy();\n      replica = replicas.get(replicaName);\n      replica.getProperties().remove(property);\n      Slice newSlice = new Slice(sliceName, replicas, clusterState.getSlice(collectionName, sliceName).shallowCopy());\n      return updateSlice(clusterState, collectionName, newSlice);\n    }\n\n","sourceOld":"    private ClusterState deleteReplicaProp(ClusterState clusterState, ZkNodeProps message) {\n\n      if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Overseer DELETEREPLICAPROPERTY requires \" +\n                ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n                ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n      }\n      String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n      String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n      if (property.startsWith(OverseerCollectionProcessor.COLL_PROP_PREFIX) == false) {\n        property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;\n      }\n\n      Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n            collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n      }\n\n      log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n          \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n      String curProp = replica.getStr(property);\n      if (curProp == null) return clusterState; // not there anyway, nothing to do.\n\n      Map<String, Replica> replicas = clusterState.getSlice(collectionName, sliceName).getReplicasCopy();\n      replica = replicas.get(replicaName);\n      replica.getProperties().remove(property);\n      Slice newSlice = new Slice(sliceName, replicas, clusterState.getSlice(collectionName, sliceName).shallowCopy());\n      return updateSlice(clusterState, collectionName, newSlice);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#deleteReplicaProp(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#deleteReplicaProp(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ZkWriteCommand deleteReplicaProp(ClusterState clusterState, ZkNodeProps message) {\n      return new ReplicaMutator(getZkStateReader()).removeReplicaProperty(clusterState, message);\n    }\n\n","sourceOld":"    private ClusterState deleteReplicaProp(ClusterState clusterState, ZkNodeProps message) {\n\n      if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n          checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Overseer DELETEREPLICAPROPERTY requires \" +\n                ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n                ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n      }\n      String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n      String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n      if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n        property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;\n      }\n\n      Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n            collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n      }\n\n      log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n          \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n      String curProp = replica.getStr(property);\n      if (curProp == null) return clusterState; // not there anyway, nothing to do.\n\n      Map<String, Replica> replicas = clusterState.getSlice(collectionName, sliceName).getReplicasCopy();\n      replica = replicas.get(replicaName);\n      replica.getProperties().remove(property);\n      Slice newSlice = new Slice(sliceName, replicas, clusterState.getSlice(collectionName, sliceName).shallowCopy());\n      return updateSlice(clusterState, collectionName, newSlice);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03f6fef27e0d27edc875c720e6ce5db17480a562","date":1417277285,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#deleteReplicaProp(ClusterState,ZkNodeProps).mjava","sourceNew":null,"sourceOld":"    private ZkWriteCommand deleteReplicaProp(ClusterState clusterState, ZkNodeProps message) {\n      return new ReplicaMutator(getZkStateReader()).removeReplicaProperty(clusterState, message);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["64707d25b6352cf02909d3916038a3b3cec7f0a8"],"55980207f1977bd1463465de1659b821347e2fa8":["d9a47902d6207303f5ed3e7aaca62ca33433af66","64707d25b6352cf02909d3916038a3b3cec7f0a8"],"03f6fef27e0d27edc875c720e6ce5db17480a562":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["57517fbf5120ed94888bc0bfb86f9a81094059cf"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","57517fbf5120ed94888bc0bfb86f9a81094059cf"],"dc2bafa00000be70227a04c29e3f885ff41e531d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"57517fbf5120ed94888bc0bfb86f9a81094059cf":["dc2bafa00000be70227a04c29e3f885ff41e531d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03f6fef27e0d27edc875c720e6ce5db17480a562"]},"commit2Childs":{"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["03f6fef27e0d27edc875c720e6ce5db17480a562"],"55980207f1977bd1463465de1659b821347e2fa8":[],"03f6fef27e0d27edc875c720e6ce5db17480a562":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","dc2bafa00000be70227a04c29e3f885ff41e531d"],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a","55980207f1977bd1463465de1659b821347e2fa8"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["55980207f1977bd1463465de1659b821347e2fa8"],"dc2bafa00000be70227a04c29e3f885ff41e531d":["57517fbf5120ed94888bc0bfb86f9a81094059cf"],"57517fbf5120ed94888bc0bfb86f9a81094059cf":["64707d25b6352cf02909d3916038a3b3cec7f0a8","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}