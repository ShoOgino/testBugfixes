{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(LightAutomaton,int,boolean).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(LightAutomaton,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public RunAutomaton(LightAutomaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    //System.out.println(\"before det a=\" + a.getNumStates());\n    a = BasicOperations.determinize(a);\n    this.a = a;\n    //System.out.println(\"AFTER DET tableize= \" + tableize + \": \");\n    //System.out.println(a.toDot());\n    points = a.getStartPoints();\n    //System.out.println(\"  points=\" + Arrays.toString(points));\n    initial = 0;\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    //System.out.println(\"RA: size=\" + size + \" points.length=\" + points.length + \" total=\" + (size * points.length));\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      //System.out.println(\"n=\" + n + \" acc=\" + accept[n] + \" size=\" + size);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        //System.out.println(\"  step from point=\" + c + \" n=\" + n + \" label=\" + (char) points[c] + \" -> \" + dest);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n        //System.out.println(\"  trans label=\" + points[c] + \" dest=\" + transitions[n * points.length + c]);\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1]) {\n          i++;\n        }\n        classmap[j] = i;\n        //System.out.println(\"classmap[\" + (char) j + \"]=\" + i);\n      }\n      //System.out.println(\"  after classmap i=\" + i + \" maxInterval=\" + maxInterval);\n    } else {\n      classmap = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(LightAutomaton,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(LightAutomaton,int,boolean).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(LightAutomaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    //System.out.println(\"before det a=\" + a.getNumStates());\n    a = BasicOperations.determinize(a);\n    this.a = a;\n    //System.out.println(\"AFTER DET tableize= \" + tableize + \": \");\n    //System.out.println(a.toDot());\n    points = a.getStartPoints();\n    //System.out.println(\"  points=\" + Arrays.toString(points));\n    initial = 0;\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    //System.out.println(\"RA: size=\" + size + \" points.length=\" + points.length + \" total=\" + (size * points.length));\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      //System.out.println(\"n=\" + n + \" acc=\" + accept[n] + \" size=\" + size);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        //System.out.println(\"  step from point=\" + c + \" n=\" + n + \" label=\" + (char) points[c] + \" -> \" + dest);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n        //System.out.println(\"  trans label=\" + points[c] + \" dest=\" + transitions[n * points.length + c]);\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1]) {\n          i++;\n        }\n        classmap[j] = i;\n        //System.out.println(\"classmap[\" + (char) j + \"]=\" + i);\n      }\n      //System.out.println(\"  after classmap i=\" + i + \" maxInterval=\" + maxInterval);\n    } else {\n      classmap = null;\n    }\n  }\n\n","sourceOld":"  public RunAutomaton(LightAutomaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    //System.out.println(\"before det a=\" + a.getNumStates());\n    a = BasicOperations.determinize(a);\n    this.a = a;\n    //System.out.println(\"AFTER DET tableize= \" + tableize + \": \");\n    //System.out.println(a.toDot());\n    points = a.getStartPoints();\n    //System.out.println(\"  points=\" + Arrays.toString(points));\n    initial = 0;\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    //System.out.println(\"RA: size=\" + size + \" points.length=\" + points.length + \" total=\" + (size * points.length));\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      //System.out.println(\"n=\" + n + \" acc=\" + accept[n] + \" size=\" + size);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        //System.out.println(\"  step from point=\" + c + \" n=\" + n + \" label=\" + (char) points[c] + \" -> \" + dest);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n        //System.out.println(\"  trans label=\" + points[c] + \" dest=\" + transitions[n * points.length + c]);\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1]) {\n          i++;\n        }\n        classmap[j] = i;\n        //System.out.println(\"classmap[\" + (char) j + \"]=\" + i);\n      }\n      //System.out.println(\"  after classmap i=\" + i + \" maxInterval=\" + maxInterval);\n    } else {\n      classmap = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(LightAutomaton,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(LightAutomaton,int,boolean).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(LightAutomaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    //System.out.println(\"before det a=\" + a.getNumStates());\n    a = BasicOperations.determinize(a);\n    this.automaton = a;\n    //System.out.println(\"AFTER DET tableize= \" + tableize + \": \");\n    //System.out.println(a.toDot());\n    points = a.getStartPoints();\n    //System.out.println(\"  points=\" + Arrays.toString(points));\n    initial = 0;\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    //System.out.println(\"RA: size=\" + size + \" points.length=\" + points.length + \" total=\" + (size * points.length));\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      //System.out.println(\"n=\" + n + \" acc=\" + accept[n] + \" size=\" + size);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        //System.out.println(\"  step from point=\" + c + \" n=\" + n + \" label=\" + (char) points[c] + \" -> \" + dest);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n        //System.out.println(\"  trans label=\" + points[c] + \" dest=\" + transitions[n * points.length + c]);\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1]) {\n          i++;\n        }\n        classmap[j] = i;\n        //System.out.println(\"classmap[\" + (char) j + \"]=\" + i);\n      }\n      //System.out.println(\"  after classmap i=\" + i + \" maxInterval=\" + maxInterval);\n    } else {\n      classmap = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(LightAutomaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    //System.out.println(\"before det a=\" + a.getNumStates());\n    a = BasicOperations.determinize(a);\n    this.a = a;\n    //System.out.println(\"AFTER DET tableize= \" + tableize + \": \");\n    //System.out.println(a.toDot());\n    points = a.getStartPoints();\n    //System.out.println(\"  points=\" + Arrays.toString(points));\n    initial = 0;\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    //System.out.println(\"RA: size=\" + size + \" points.length=\" + points.length + \" total=\" + (size * points.length));\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      //System.out.println(\"n=\" + n + \" acc=\" + accept[n] + \" size=\" + size);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        //System.out.println(\"  step from point=\" + c + \" n=\" + n + \" label=\" + (char) points[c] + \" -> \" + dest);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n        //System.out.println(\"  trans label=\" + points[c] + \" dest=\" + transitions[n * points.length + c]);\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1]) {\n          i++;\n        }\n        classmap[j] = i;\n        //System.out.println(\"classmap[\" + (char) j + \"]=\" + i);\n      }\n      //System.out.println(\"  after classmap i=\" + i + \" maxInterval=\" + maxInterval);\n    } else {\n      classmap = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(LightAutomaton,int,boolean).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    //System.out.println(\"before det a=\" + a.getNumStates());\n    a = Operations.determinize(a);\n    this.automaton = a;\n    //System.out.println(\"AFTER DET tableize= \" + tableize + \": \");\n    //System.out.println(a.toDot());\n    points = a.getStartPoints();\n    //System.out.println(\"  points=\" + Arrays.toString(points));\n    initial = 0;\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    //System.out.println(\"RA: size=\" + size + \" points.length=\" + points.length + \" total=\" + (size * points.length));\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      //System.out.println(\"n=\" + n + \" acc=\" + accept[n] + \" size=\" + size);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        //System.out.println(\"  step from point=\" + c + \" n=\" + n + \" label=\" + (char) points[c] + \" -> \" + dest);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n        //System.out.println(\"  trans label=\" + points[c] + \" dest=\" + transitions[n * points.length + c]);\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1]) {\n          i++;\n        }\n        classmap[j] = i;\n        //System.out.println(\"classmap[\" + (char) j + \"]=\" + i);\n      }\n      //System.out.println(\"  after classmap i=\" + i + \" maxInterval=\" + maxInterval);\n    } else {\n      classmap = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(LightAutomaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    //System.out.println(\"before det a=\" + a.getNumStates());\n    a = BasicOperations.determinize(a);\n    this.automaton = a;\n    //System.out.println(\"AFTER DET tableize= \" + tableize + \": \");\n    //System.out.println(a.toDot());\n    points = a.getStartPoints();\n    //System.out.println(\"  points=\" + Arrays.toString(points));\n    initial = 0;\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    //System.out.println(\"RA: size=\" + size + \" points.length=\" + points.length + \" total=\" + (size * points.length));\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      //System.out.println(\"n=\" + n + \" acc=\" + accept[n] + \" size=\" + size);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        //System.out.println(\"  step from point=\" + c + \" n=\" + n + \" label=\" + (char) points[c] + \" -> \" + dest);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n        //System.out.println(\"  trans label=\" + points[c] + \" dest=\" + transitions[n * points.length + c]);\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1]) {\n          i++;\n        }\n        classmap[j] = i;\n        //System.out.println(\"classmap[\" + (char) j + \"]=\" + i);\n      }\n      //System.out.println(\"  after classmap i=\" + i + \" maxInterval=\" + maxInterval);\n    } else {\n      classmap = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}