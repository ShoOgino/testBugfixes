{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n    name= checkDefault(name);\n    SolrCore core;\n    synchronized(cores) {\n      core = cores.get(name);\n    }\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    SolrCore newCore = core.reload(libLoader);\n    register(name, newCore, false);\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n    name= checkDefault(name);\n    SolrCore core;\n    synchronized(cores) {\n      core = cores.get(name);\n    }\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    SolrCore newCore = core.reload(libLoader);\n    register(name, newCore, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n    name= checkDefault(name);\n    SolrCore core;\n    synchronized(cores) {\n      core = cores.get(name);\n    }\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    SolrCore newCore = core.reload(libLoader);\n    register(name, newCore, false);\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n    name= checkDefault(name);\n    SolrCore core;\n    synchronized(cores) {\n      core = cores.get(name);\n    }\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    SolrCore newCore = core.reload(libLoader);\n    register(name, newCore, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n    name= checkDefault(name);\n    SolrCore core;\n    synchronized(cores) {\n      core = cores.get(name);\n    }\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    SolrCore newCore = core.reload(libLoader);\n    register(name, newCore, false);\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n    name= checkDefault(name);\n    SolrCore core;\n    synchronized(cores) {\n      core = cores.get(name);\n    }\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    SolrCore newCore = core.reload(libLoader);\n    register(name, newCore, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"971c36528e9394e6a97c8703e4663f578e765eff","date":1310679787,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n    name= checkDefault(name);\n    SolrCore core;\n    synchronized(cores) {\n      core = cores.get(name);\n    }\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n  \n    File instanceDir = new File(cd.getInstanceDir());\n    if (!instanceDir.isAbsolute()) {\n      instanceDir = new File(getSolrHome(), instanceDir.getName());\n    }\n    \n    SolrResourceLoader solrLoader;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n    } else {\n      try {\n        String collection = cd.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n        String zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore newCore = core.reload(solrLoader);\n    register(name, newCore, false);\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n    name= checkDefault(name);\n    SolrCore core;\n    synchronized(cores) {\n      core = cores.get(name);\n    }\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    SolrCore newCore = core.reload(libLoader);\n    register(name, newCore, false);\n  }\n\n","bugFix":null,"bugIntro":["41d8182fd2ab7b3bc57ffd7eb6491dddcb70c27d","c9767265f21f7d1246b13dd7e73e8a4ad88b4384","ed32d8e4e6f80a018e7092cc35f204dcef1e87ec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"41d8182fd2ab7b3bc57ffd7eb6491dddcb70c27d","date":1310740159,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n    name= checkDefault(name);\n    SolrCore core;\n    synchronized(cores) {\n      core = cores.get(name);\n    }\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n  \n    File instanceDir = new File(cd.getInstanceDir());\n    if (!instanceDir.isAbsolute()) {\n      instanceDir = new File(getSolrHome(), cd.getInstanceDir());\n    }\n    \n    SolrResourceLoader solrLoader;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n    } else {\n      try {\n        String collection = cd.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n        String zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore newCore = core.reload(solrLoader);\n    register(name, newCore, false);\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n    name= checkDefault(name);\n    SolrCore core;\n    synchronized(cores) {\n      core = cores.get(name);\n    }\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n  \n    File instanceDir = new File(cd.getInstanceDir());\n    if (!instanceDir.isAbsolute()) {\n      instanceDir = new File(getSolrHome(), instanceDir.getName());\n    }\n    \n    SolrResourceLoader solrLoader;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n    } else {\n      try {\n        String collection = cd.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n        String zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore newCore = core.reload(solrLoader);\n    register(name, newCore, false);\n  }\n\n","bugFix":["971c36528e9394e6a97c8703e4663f578e765eff"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4901f8624f774c2b648e66567b63c59e901ac7c8","date":1329431044,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n    name= checkDefault(name);\n    SolrCore core;\n    synchronized(cores) {\n      core = cores.get(name);\n    }\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n  \n    File instanceDir = new File(cd.getInstanceDir());\n    if (!instanceDir.isAbsolute()) {\n      instanceDir = new File(getSolrHome(), cd.getInstanceDir());\n    }\n    \n    SolrResourceLoader solrLoader;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n    } else {\n      try {\n        String collection = cd.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n        String zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore newCore = core.reload(solrLoader);\n    // keep core to orig name link\n    String origName = coreToOrigName.remove(core);\n    coreToOrigName.put(newCore, origName);\n    register(name, newCore, false);\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n    name= checkDefault(name);\n    SolrCore core;\n    synchronized(cores) {\n      core = cores.get(name);\n    }\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n  \n    File instanceDir = new File(cd.getInstanceDir());\n    if (!instanceDir.isAbsolute()) {\n      instanceDir = new File(getSolrHome(), cd.getInstanceDir());\n    }\n    \n    SolrResourceLoader solrLoader;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n    } else {\n      try {\n        String collection = cd.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n        String zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore newCore = core.reload(solrLoader);\n    register(name, newCore, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e5741c9fe46e3c5f38d297c778637ede3e2f2e66","date":1329587405,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n    name= checkDefault(name);\n    SolrCore core;\n    synchronized(cores) {\n      core = cores.get(name);\n    }\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n  \n    File instanceDir = new File(cd.getInstanceDir());\n    if (!instanceDir.isAbsolute()) {\n      instanceDir = new File(getSolrHome(), cd.getInstanceDir());\n    }\n    \n    SolrResourceLoader solrLoader;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n    } else {\n      try {\n        String collection = cd.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n        String zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore newCore = core.reload(solrLoader);\n    // keep core to orig name link\n    String origName = coreToOrigName.remove(core);\n    if (origName != null) {\n      coreToOrigName.put(newCore, origName);\n    }\n    register(name, newCore, false);\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n    name= checkDefault(name);\n    SolrCore core;\n    synchronized(cores) {\n      core = cores.get(name);\n    }\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n  \n    File instanceDir = new File(cd.getInstanceDir());\n    if (!instanceDir.isAbsolute()) {\n      instanceDir = new File(getSolrHome(), cd.getInstanceDir());\n    }\n    \n    SolrResourceLoader solrLoader;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n    } else {\n      try {\n        String collection = cd.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n        String zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore newCore = core.reload(solrLoader);\n    // keep core to orig name link\n    String origName = coreToOrigName.remove(core);\n    coreToOrigName.put(newCore, origName);\n    register(name, newCore, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"083df6f7d2115772bdcf0f53c63aa859e664c69e","date":1332809829,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n    name= checkDefault(name);\n    SolrCore core;\n    synchronized(cores) {\n      core = cores.get(name);\n    }\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n  \n    File instanceDir = new File(cd.getInstanceDir());\n    if (!instanceDir.isAbsolute()) {\n      instanceDir = new File(getSolrHome(), cd.getInstanceDir());\n    }\n\n    log.info(\"Reloading SolrCore '{}' using instanceDir: {}\", \n             cd.getName(), instanceDir.getAbsolutePath());\n    \n    SolrResourceLoader solrLoader;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n    } else {\n      try {\n        String collection = cd.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n        String zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore newCore = core.reload(solrLoader);\n    // keep core to orig name link\n    String origName = coreToOrigName.remove(core);\n    if (origName != null) {\n      coreToOrigName.put(newCore, origName);\n    }\n    register(name, newCore, false);\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n    name= checkDefault(name);\n    SolrCore core;\n    synchronized(cores) {\n      core = cores.get(name);\n    }\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n  \n    File instanceDir = new File(cd.getInstanceDir());\n    if (!instanceDir.isAbsolute()) {\n      instanceDir = new File(getSolrHome(), cd.getInstanceDir());\n    }\n    \n    SolrResourceLoader solrLoader;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n    } else {\n      try {\n        String collection = cd.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n        String zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore newCore = core.reload(solrLoader);\n    // keep core to orig name link\n    String origName = coreToOrigName.remove(core);\n    if (origName != null) {\n      coreToOrigName.put(newCore, origName);\n    }\n    register(name, newCore, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9767265f21f7d1246b13dd7e73e8a4ad88b4384","date":1342986300,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n    name= checkDefault(name);\n    SolrCore core;\n    synchronized(cores) {\n      core = cores.get(name);\n    }\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n  \n    File instanceDir = new File(cd.getInstanceDir());\n    if (!instanceDir.isAbsolute()) {\n      instanceDir = new File(getSolrHome(), cd.getInstanceDir());\n    }\n\n    log.info(\"Reloading SolrCore '{}' using instanceDir: {}\", \n             cd.getName(), instanceDir.getAbsolutePath());\n    \n    SolrResourceLoader solrLoader;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n    } else {\n      try {\n        String collection = cd.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n        String zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore newCore = core.reload(solrLoader, core);\n    // keep core to orig name link\n    String origName = coreToOrigName.remove(core);\n    if (origName != null) {\n      coreToOrigName.put(newCore, origName);\n    }\n    register(name, newCore, false);\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n    name= checkDefault(name);\n    SolrCore core;\n    synchronized(cores) {\n      core = cores.get(name);\n    }\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n  \n    File instanceDir = new File(cd.getInstanceDir());\n    if (!instanceDir.isAbsolute()) {\n      instanceDir = new File(getSolrHome(), cd.getInstanceDir());\n    }\n\n    log.info(\"Reloading SolrCore '{}' using instanceDir: {}\", \n             cd.getName(), instanceDir.getAbsolutePath());\n    \n    SolrResourceLoader solrLoader;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n    } else {\n      try {\n        String collection = cd.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n        String zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore newCore = core.reload(solrLoader);\n    // keep core to orig name link\n    String origName = coreToOrigName.remove(core);\n    if (origName != null) {\n      coreToOrigName.put(newCore, origName);\n    }\n    register(name, newCore, false);\n  }\n\n","bugFix":["971c36528e9394e6a97c8703e4663f578e765eff"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n    name= checkDefault(name);\n    SolrCore core;\n    synchronized(cores) {\n      core = cores.get(name);\n    }\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n  \n    File instanceDir = new File(cd.getInstanceDir());\n    if (!instanceDir.isAbsolute()) {\n      instanceDir = new File(getSolrHome(), cd.getInstanceDir());\n    }\n\n    log.info(\"Reloading SolrCore '{}' using instanceDir: {}\", \n             cd.getName(), instanceDir.getAbsolutePath());\n    \n    SolrResourceLoader solrLoader;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n    } else {\n      try {\n        String collection = cd.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n        String zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore newCore = core.reload(solrLoader, core);\n    // keep core to orig name link\n    String origName = coreToOrigName.remove(core);\n    if (origName != null) {\n      coreToOrigName.put(newCore, origName);\n    }\n    register(name, newCore, false);\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n    name= checkDefault(name);\n    SolrCore core;\n    synchronized(cores) {\n      core = cores.get(name);\n    }\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n  \n    File instanceDir = new File(cd.getInstanceDir());\n    if (!instanceDir.isAbsolute()) {\n      instanceDir = new File(getSolrHome(), cd.getInstanceDir());\n    }\n\n    log.info(\"Reloading SolrCore '{}' using instanceDir: {}\", \n             cd.getName(), instanceDir.getAbsolutePath());\n    \n    SolrResourceLoader solrLoader;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n    } else {\n      try {\n        String collection = cd.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n        String zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore newCore = core.reload(solrLoader);\n    // keep core to orig name link\n    String origName = coreToOrigName.remove(core);\n    if (origName != null) {\n      coreToOrigName.put(newCore, origName);\n    }\n    register(name, newCore, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"044244fb346dc6965d217fce709880d0e3bc2e9f","date":1343347260,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    Exception failure = null;\n    try {\n      // :nocommit: refactor doReload completley into this method - only did it this way so patch would be straight forward w/o huge amounts of indenting changes\n      doReload(name);\n      coreInitFailures.remove(name);\n      return;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      if (null != failure) {\n        synchronized (coreInitFailures) {\n          // remove first so insertion order is updated and newest is last\n          coreInitFailures.remove(name);\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n    name= checkDefault(name);\n    SolrCore core;\n    synchronized(cores) {\n      core = cores.get(name);\n    }\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n  \n    File instanceDir = new File(cd.getInstanceDir());\n    if (!instanceDir.isAbsolute()) {\n      instanceDir = new File(getSolrHome(), cd.getInstanceDir());\n    }\n\n    log.info(\"Reloading SolrCore '{}' using instanceDir: {}\", \n             cd.getName(), instanceDir.getAbsolutePath());\n    \n    SolrResourceLoader solrLoader;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n    } else {\n      try {\n        String collection = cd.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n        String zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore newCore = core.reload(solrLoader, core);\n    // keep core to orig name link\n    String origName = coreToOrigName.remove(core);\n    if (origName != null) {\n      coreToOrigName.put(newCore, origName);\n    }\n    register(name, newCore, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cee0d276a5aee45373d831d0328b4544eec95754","date":1343349574,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    Exception failure = null;\n    try {\n\n      name= checkDefault(name);\n      SolrCore core;\n      synchronized(cores) {\n        core = cores.get(name);\n      }\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      CoreDescriptor cd = core.getCoreDescriptor();\n  \n      File instanceDir = new File(cd.getInstanceDir());\n      if (!instanceDir.isAbsolute()) {\n        instanceDir = new File(getSolrHome(), cd.getInstanceDir());\n      }\n\n      log.info(\"Reloading SolrCore '{}' using instanceDir: {}\", \n               cd.getName(), instanceDir.getAbsolutePath());\n    \n      SolrResourceLoader solrLoader;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n      } else {\n        try {\n          String collection = cd.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n          String zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      SolrCore newCore = core.reload(solrLoader, core);\n      // keep core to orig name link\n      String origName = coreToOrigName.remove(core);\n      if (origName != null) {\n        coreToOrigName.put(newCore, origName);\n      }\n      register(name, newCore, false);\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    Exception failure = null;\n    try {\n      // :nocommit: refactor doReload completley into this method - only did it this way so patch would be straight forward w/o huge amounts of indenting changes\n      doReload(name);\n      coreInitFailures.remove(name);\n      return;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      if (null != failure) {\n        synchronized (coreInitFailures) {\n          // remove first so insertion order is updated and newest is last\n          coreInitFailures.remove(name);\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["46083459332303d872db23d62e641cc6165fe93c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    Exception failure = null;\n    try {\n\n      name= checkDefault(name);\n      SolrCore core;\n      synchronized(cores) {\n        core = cores.get(name);\n      }\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      CoreDescriptor cd = core.getCoreDescriptor();\n  \n      File instanceDir = new File(cd.getInstanceDir());\n      if (!instanceDir.isAbsolute()) {\n        instanceDir = new File(getSolrHome(), cd.getInstanceDir());\n      }\n\n      log.info(\"Reloading SolrCore '{}' using instanceDir: {}\", \n               cd.getName(), instanceDir.getAbsolutePath());\n    \n      SolrResourceLoader solrLoader;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n      } else {\n        try {\n          String collection = cd.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n          String zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      SolrCore newCore = core.reload(solrLoader, core);\n      // keep core to orig name link\n      String origName = coreToOrigName.remove(core);\n      if (origName != null) {\n        coreToOrigName.put(newCore, origName);\n      }\n      register(name, newCore, false);\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n    name= checkDefault(name);\n    SolrCore core;\n    synchronized(cores) {\n      core = cores.get(name);\n    }\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n  \n    File instanceDir = new File(cd.getInstanceDir());\n    if (!instanceDir.isAbsolute()) {\n      instanceDir = new File(getSolrHome(), cd.getInstanceDir());\n    }\n\n    log.info(\"Reloading SolrCore '{}' using instanceDir: {}\", \n             cd.getName(), instanceDir.getAbsolutePath());\n    \n    SolrResourceLoader solrLoader;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n    } else {\n      try {\n        String collection = cd.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n        String zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore newCore = core.reload(solrLoader);\n    // keep core to orig name link\n    String origName = coreToOrigName.remove(core);\n    if (origName != null) {\n      coreToOrigName.put(newCore, origName);\n    }\n    register(name, newCore, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    Exception failure = null;\n    try {\n\n      name= checkDefault(name);\n      SolrCore core;\n      synchronized(cores) {\n        core = cores.get(name);\n      }\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      CoreDescriptor cd = core.getCoreDescriptor();\n  \n      File instanceDir = new File(cd.getInstanceDir());\n      if (!instanceDir.isAbsolute()) {\n        instanceDir = new File(getSolrHome(), cd.getInstanceDir());\n      }\n\n      log.info(\"Reloading SolrCore '{}' using instanceDir: {}\", \n               cd.getName(), instanceDir.getAbsolutePath());\n    \n      SolrResourceLoader solrLoader;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n      } else {\n        try {\n          String collection = cd.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n          String zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      SolrCore newCore = core.reload(solrLoader, core);\n      // keep core to orig name link\n      String origName = coreToOrigName.remove(core);\n      if (origName != null) {\n        coreToOrigName.put(newCore, origName);\n      }\n      register(name, newCore, false);\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n    name= checkDefault(name);\n    SolrCore core;\n    synchronized(cores) {\n      core = cores.get(name);\n    }\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n  \n    File instanceDir = new File(cd.getInstanceDir());\n    if (!instanceDir.isAbsolute()) {\n      instanceDir = new File(getSolrHome(), cd.getInstanceDir());\n    }\n\n    log.info(\"Reloading SolrCore '{}' using instanceDir: {}\", \n             cd.getName(), instanceDir.getAbsolutePath());\n    \n    SolrResourceLoader solrLoader;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n    } else {\n      try {\n        String collection = cd.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n        String zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore newCore = core.reload(solrLoader, core);\n    // keep core to orig name link\n    String origName = coreToOrigName.remove(core);\n    if (origName != null) {\n      coreToOrigName.put(newCore, origName);\n    }\n    register(name, newCore, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4d5fc8284faca306256427bbbb86017a32002cf","date":1347055110,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    Exception failure = null;\n    try {\n\n      name= checkDefault(name);\n      SolrCore core;\n      synchronized(cores) {\n        core = cores.get(name);\n      }\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      CoreDescriptor cd = core.getCoreDescriptor();\n  \n      File instanceDir = new File(cd.getInstanceDir());\n      if (!instanceDir.isAbsolute()) {\n        instanceDir = new File(getSolrHome(), cd.getInstanceDir());\n      }\n\n      log.info(\"Reloading SolrCore '{}' using instanceDir: {}\", \n               cd.getName(), instanceDir.getAbsolutePath());\n    \n      SolrResourceLoader solrLoader;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n      } else {\n        try {\n          String collection = cd.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n          String zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      SolrCore newCore = core.reload(solrLoader, core);\n      // keep core to orig name link\n      String origName = coreToOrigName.remove(core);\n      if (origName != null) {\n        coreToOrigName.put(newCore, origName);\n      }\n      register(name, newCore, false);\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      if (null != failure) {\n        log.error(\"Unable to reload core: \" + name, failure);\n      }\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    Exception failure = null;\n    try {\n\n      name= checkDefault(name);\n      SolrCore core;\n      synchronized(cores) {\n        core = cores.get(name);\n      }\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      CoreDescriptor cd = core.getCoreDescriptor();\n  \n      File instanceDir = new File(cd.getInstanceDir());\n      if (!instanceDir.isAbsolute()) {\n        instanceDir = new File(getSolrHome(), cd.getInstanceDir());\n      }\n\n      log.info(\"Reloading SolrCore '{}' using instanceDir: {}\", \n               cd.getName(), instanceDir.getAbsolutePath());\n    \n      SolrResourceLoader solrLoader;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n      } else {\n        try {\n          String collection = cd.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n          String zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      SolrCore newCore = core.reload(solrLoader, core);\n      // keep core to orig name link\n      String origName = coreToOrigName.remove(core);\n      if (origName != null) {\n        coreToOrigName.put(newCore, origName);\n      }\n      register(name, newCore, false);\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    Exception failure = null;\n    try {\n\n      name= checkDefault(name);\n      SolrCore core;\n      synchronized(cores) {\n        core = cores.get(name);\n      }\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      CoreDescriptor cd = core.getCoreDescriptor();\n  \n      File instanceDir = new File(cd.getInstanceDir());\n      if (!instanceDir.isAbsolute()) {\n        instanceDir = new File(getSolrHome(), cd.getInstanceDir());\n      }\n\n      log.info(\"Reloading SolrCore '{}' using instanceDir: {}\", \n               cd.getName(), instanceDir.getAbsolutePath());\n    \n      SolrResourceLoader solrLoader;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n      } else {\n        try {\n          String collection = cd.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n          String zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      SolrCore newCore = core.reload(solrLoader, core);\n      // keep core to orig name link\n      String origName = coreToOrigName.remove(core);\n      if (origName != null) {\n        coreToOrigName.put(newCore, origName);\n      }\n      register(name, newCore, false);\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      if (null != failure) {\n        log.error(\"Unable to reload core: \" + name, failure);\n      }\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    Exception failure = null;\n    try {\n\n      name= checkDefault(name);\n      SolrCore core;\n      synchronized(cores) {\n        core = cores.get(name);\n      }\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      CoreDescriptor cd = core.getCoreDescriptor();\n  \n      File instanceDir = new File(cd.getInstanceDir());\n      if (!instanceDir.isAbsolute()) {\n        instanceDir = new File(getSolrHome(), cd.getInstanceDir());\n      }\n\n      log.info(\"Reloading SolrCore '{}' using instanceDir: {}\", \n               cd.getName(), instanceDir.getAbsolutePath());\n    \n      SolrResourceLoader solrLoader;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n      } else {\n        try {\n          String collection = cd.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n          String zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      SolrCore newCore = core.reload(solrLoader, core);\n      // keep core to orig name link\n      String origName = coreToOrigName.remove(core);\n      if (origName != null) {\n        coreToOrigName.put(newCore, origName);\n      }\n      register(name, newCore, false);\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      if (null != failure) {\n        log.error(\"Unable to reload core: \" + name, failure);\n      }\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46083459332303d872db23d62e641cc6165fe93c","date":1351189543,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    Exception failure = null;\n    try {\n\n      name= checkDefault(name);\n      SolrCore core;\n      synchronized(cores) {\n        core = cores.get(name);\n      }\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      CoreDescriptor cd = core.getCoreDescriptor();\n  \n      File instanceDir = new File(cd.getInstanceDir());\n\n      log.info(\"Reloading SolrCore '{}' using instanceDir: {}\", \n               cd.getName(), instanceDir.getAbsolutePath());\n    \n      SolrResourceLoader solrLoader;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n      } else {\n        try {\n          String collection = cd.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n          String zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      SolrCore newCore = core.reload(solrLoader, core);\n      // keep core to orig name link\n      String origName = coreToOrigName.remove(core);\n      if (origName != null) {\n        coreToOrigName.put(newCore, origName);\n      }\n      register(name, newCore, false);\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      if (null != failure) {\n        log.error(\"Unable to reload core: \" + name, failure);\n      }\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    Exception failure = null;\n    try {\n\n      name= checkDefault(name);\n      SolrCore core;\n      synchronized(cores) {\n        core = cores.get(name);\n      }\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      CoreDescriptor cd = core.getCoreDescriptor();\n  \n      File instanceDir = new File(cd.getInstanceDir());\n      if (!instanceDir.isAbsolute()) {\n        instanceDir = new File(getSolrHome(), cd.getInstanceDir());\n      }\n\n      log.info(\"Reloading SolrCore '{}' using instanceDir: {}\", \n               cd.getName(), instanceDir.getAbsolutePath());\n    \n      SolrResourceLoader solrLoader;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n      } else {\n        try {\n          String collection = cd.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n          String zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      SolrCore newCore = core.reload(solrLoader, core);\n      // keep core to orig name link\n      String origName = coreToOrigName.remove(core);\n      if (origName != null) {\n        coreToOrigName.put(newCore, origName);\n      }\n      register(name, newCore, false);\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      if (null != failure) {\n        log.error(\"Unable to reload core: \" + name, failure);\n      }\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","bugFix":["cee0d276a5aee45373d831d0328b4544eec95754"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    Exception failure = null;\n    try {\n\n      name= checkDefault(name);\n      SolrCore core;\n      synchronized(cores) {\n        core = cores.get(name);\n      }\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      CoreDescriptor cd = core.getCoreDescriptor();\n  \n      File instanceDir = new File(cd.getInstanceDir());\n\n      log.info(\"Reloading SolrCore '{}' using instanceDir: {}\", \n               cd.getName(), instanceDir.getAbsolutePath());\n    \n      SolrResourceLoader solrLoader;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n      } else {\n        try {\n          String collection = cd.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n          String zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      SolrCore newCore = core.reload(solrLoader, core);\n      // keep core to orig name link\n      String origName = coreToOrigName.remove(core);\n      if (origName != null) {\n        coreToOrigName.put(newCore, origName);\n      }\n      register(name, newCore, false);\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      if (null != failure) {\n        log.error(\"Unable to reload core: \" + name, failure);\n      }\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    Exception failure = null;\n    try {\n\n      name= checkDefault(name);\n      SolrCore core;\n      synchronized(cores) {\n        core = cores.get(name);\n      }\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      CoreDescriptor cd = core.getCoreDescriptor();\n  \n      File instanceDir = new File(cd.getInstanceDir());\n      if (!instanceDir.isAbsolute()) {\n        instanceDir = new File(getSolrHome(), cd.getInstanceDir());\n      }\n\n      log.info(\"Reloading SolrCore '{}' using instanceDir: {}\", \n               cd.getName(), instanceDir.getAbsolutePath());\n    \n      SolrResourceLoader solrLoader;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n      } else {\n        try {\n          String collection = cd.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n          String zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      SolrCore newCore = core.reload(solrLoader, core);\n      // keep core to orig name link\n      String origName = coreToOrigName.remove(core);\n      if (origName != null) {\n        coreToOrigName.put(newCore, origName);\n      }\n      register(name, newCore, false);\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      if (null != failure) {\n        log.error(\"Unable to reload core: \" + name, failure);\n      }\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b374d78db8148ec6796fdf37148b33897ab40a8c","date":1351606544,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n\n      name= checkDefault(name);\n      SolrCore core;\n      synchronized(cores) {\n        core = cores.get(name);\n      }\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      CoreDescriptor cd = core.getCoreDescriptor();\n  \n      File instanceDir = new File(cd.getInstanceDir());\n\n      log.info(\"Reloading SolrCore '{}' using instanceDir: {}\", \n               cd.getName(), instanceDir.getAbsolutePath());\n    \n      SolrResourceLoader solrLoader;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n      } else {\n        try {\n          String collection = cd.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n          String zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      SolrCore newCore = core.reload(solrLoader, core);\n      // keep core to orig name link\n      String origName = coreToOrigName.remove(core);\n      if (origName != null) {\n        coreToOrigName.put(newCore, origName);\n      }\n      register(name, newCore, false);\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    Exception failure = null;\n    try {\n\n      name= checkDefault(name);\n      SolrCore core;\n      synchronized(cores) {\n        core = cores.get(name);\n      }\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      CoreDescriptor cd = core.getCoreDescriptor();\n  \n      File instanceDir = new File(cd.getInstanceDir());\n\n      log.info(\"Reloading SolrCore '{}' using instanceDir: {}\", \n               cd.getName(), instanceDir.getAbsolutePath());\n    \n      SolrResourceLoader solrLoader;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n      } else {\n        try {\n          String collection = cd.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n          String zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      SolrCore newCore = core.reload(solrLoader, core);\n      // keep core to orig name link\n      String origName = coreToOrigName.remove(core);\n      if (origName != null) {\n        coreToOrigName.put(newCore, origName);\n      }\n      register(name, newCore, false);\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      if (null != failure) {\n        log.error(\"Unable to reload core: \" + name, failure);\n      }\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n\n      name= checkDefault(name);\n      SolrCore core = coreMaps.getCore(name);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      CoreDescriptor cd = core.getCoreDescriptor();\n  \n      File instanceDir = new File(cd.getInstanceDir());\n\n      log.info(\"Reloading SolrCore '{}' using instanceDir: {}\", \n               cd.getName(), instanceDir.getAbsolutePath());\n    \n      SolrResourceLoader solrLoader;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, SolrProperties.getCoreProperties(instanceDir.getAbsolutePath(), cd));\n      } else {\n        try {\n          String collection = cd.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n          String zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader,\n              SolrProperties.getCoreProperties(instanceDir.getAbsolutePath(), cd), zkController);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n      SolrCore newCore = core.reload(solrLoader, core);\n      // keep core to orig name link\n      coreMaps.removeCoreToOrigName(newCore, core);\n\n      registerCore(false, name, newCore, false);\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n\n      name= checkDefault(name);\n      SolrCore core;\n      synchronized(cores) {\n        core = cores.get(name);\n      }\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      CoreDescriptor cd = core.getCoreDescriptor();\n  \n      File instanceDir = new File(cd.getInstanceDir());\n\n      log.info(\"Reloading SolrCore '{}' using instanceDir: {}\", \n               cd.getName(), instanceDir.getAbsolutePath());\n    \n      SolrResourceLoader solrLoader;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));\n      } else {\n        try {\n          String collection = cd.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n          String zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      SolrCore newCore = core.reload(solrLoader, core);\n      // keep core to orig name link\n      String origName = coreToOrigName.remove(core);\n      if (origName != null) {\n        coreToOrigName.put(newCore, origName);\n      }\n      register(name, newCore, false);\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b6f42dee5a60f46a3fdf3ab93b39aefb356e245","date":1363106546,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = coreMaps.getCore(name);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        coreMaps.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkController == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, SolrProperties.getCoreProperties(instanceDir.getAbsolutePath(), cd));\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkController.readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader,\n                SolrProperties.getCoreProperties(instanceDir.getAbsolutePath(), cd), zkController);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        coreMaps.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        coreMaps.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n\n      name= checkDefault(name);\n      SolrCore core = coreMaps.getCore(name);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      CoreDescriptor cd = core.getCoreDescriptor();\n  \n      File instanceDir = new File(cd.getInstanceDir());\n\n      log.info(\"Reloading SolrCore '{}' using instanceDir: {}\", \n               cd.getName(), instanceDir.getAbsolutePath());\n    \n      SolrResourceLoader solrLoader;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, SolrProperties.getCoreProperties(instanceDir.getAbsolutePath(), cd));\n      } else {\n        try {\n          String collection = cd.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n          String zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader,\n              SolrProperties.getCoreProperties(instanceDir.getAbsolutePath(), cd), zkController);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n      SolrCore newCore = core.reload(solrLoader, core);\n      // keep core to orig name link\n      coreMaps.removeCoreToOrigName(newCore, core);\n\n      registerCore(false, name, newCore, false);\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":["4cc2a5e90b34bfc6bb00b6261a7956c2c022c275","54a122cfe3c6260dda11b43e6872d443ec0538b9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9818efa55563ddfecdecafbdd43f4bee9f252e7d","date":1364853872,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = coreMaps.getCore(name);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        coreMaps.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkController == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd));\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkController.readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader,\n                ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd), zkController);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        coreMaps.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        coreMaps.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = coreMaps.getCore(name);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        coreMaps.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkController == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, SolrProperties.getCoreProperties(instanceDir.getAbsolutePath(), cd));\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkController.readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader,\n                SolrProperties.getCoreProperties(instanceDir.getAbsolutePath(), cd), zkController);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        coreMaps.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        coreMaps.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":["4cc2a5e90b34bfc6bb00b6261a7956c2c022c275"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cc2a5e90b34bfc6bb00b6261a7956c2c022c275","date":1364946285,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = coreMaps.getCore(name);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        coreMaps.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkController == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(), ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd));\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkController.readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd), zkController);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        coreMaps.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        coreMaps.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = coreMaps.getCore(name);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        coreMaps.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkController == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd));\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkController.readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader,\n                ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd), zkController);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        coreMaps.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        coreMaps.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","bugFix":["8b6f42dee5a60f46a3fdf3ab93b39aefb356e245","9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0cf46558b3f7708ed3a21e174b9e11cd30e26be","date":1365551184,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      if (cfg != null) { // Another test artifact.\n        String badMsg = cfg.getBadCoreMessage(name);\n        if (badMsg != null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, badMsg);\n        }\n      }\n\n      SolrCore core = coreMaps.getCore(name);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        coreMaps.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkController == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(), ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd));\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkController.readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd), zkController);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        coreMaps.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        coreMaps.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = coreMaps.getCore(name);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        coreMaps.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkController == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(), ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd));\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkController.readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd), zkController);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        coreMaps.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        coreMaps.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3278df77f7f499b55fdb79861c0641450444e7d0","date":1366238988,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      if (cfg != null) { // Another test artifact.\n        String badMsg = cfg.getBadConfigCoreMessage(name);\n        if (badMsg != null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, badMsg);\n        }\n      }\n\n      SolrCore core = coreMaps.getCore(name);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        coreMaps.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkController == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(), ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd));\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkController.readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd), zkController);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        coreMaps.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        coreMaps.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      if (cfg != null) { // Another test artifact.\n        String badMsg = cfg.getBadCoreMessage(name);\n        if (badMsg != null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, badMsg);\n        }\n      }\n\n      SolrCore core = coreMaps.getCore(name);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        coreMaps.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkController == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(), ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd));\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkController.readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd), zkController);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        coreMaps.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        coreMaps.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9409650933cc688e77e565092a25e58adfc2e18d","date":1366663164,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCore(name);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkController == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(), ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd));\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkController.readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd), zkController);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      if (cfg != null) { // Another test artifact.\n        String badMsg = cfg.getBadConfigCoreMessage(name);\n        if (badMsg != null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, badMsg);\n        }\n      }\n\n      SolrCore core = coreMaps.getCore(name);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        coreMaps.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkController == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(), ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd));\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkController.readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd), zkController);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        coreMaps.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        coreMaps.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b29abed5661c7911e4b45d5a3d79a186268e28c4","date":1366675770,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCore(name);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkSys.getZkController() == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(), ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd));\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkSys.getZkController().createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkSys.getZkController().readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd), zkSys.getZkController());\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCore(name);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkController == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(), ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd));\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkController.createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkController.readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd), zkController);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc6e48afbb50ae0a22fa76e226f04fd585532938","date":1371429211,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkSys.getZkController() == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(), ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd));\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkSys.getZkController().createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkSys.getZkController().readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd), zkSys.getZkController());\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCore(name);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkSys.getZkController() == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(), ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd));\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkSys.getZkController().createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkSys.getZkController().readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd), zkSys.getZkController());\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"86184cf8c7654ee1badea2a629b8bc0487c7f690","date":1372190237,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name, false);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkSys.getZkController() == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(), ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd));\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkSys.getZkController().createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkSys.getZkController().readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd), zkSys.getZkController());\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkSys.getZkController() == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(), ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd));\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkSys.getZkController().createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkSys.getZkController().readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd), zkSys.getZkController());\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name, false);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkSys.getZkController() == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(),\n                                                cd.getCoreProperties());\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkSys.getZkController().createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkSys.getZkController().readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                cd.getCoreProperties(), zkSys.getZkController());\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name, false);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkSys.getZkController() == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(), ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd));\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkSys.getZkController().createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkSys.getZkController().readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd), zkSys.getZkController());\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name, false);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkSys.getZkController() == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(),\n                                                cd.getCoreProperties());\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkSys.getZkController().createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkSys.getZkController().readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                cd.getCoreProperties(), zkSys.getZkController());\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCore(name);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkSys.getZkController() == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(), ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd));\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkSys.getZkController().createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkSys.getZkController().readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(), cd), zkSys.getZkController());\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e9769bcabf28416689da7ec56a0c799b2a66b87","date":1376765390,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name, false);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkSys.getZkController() == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(),\n                                                cd.getSubstitutableProperties());\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkSys.getZkController().createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkSys.getZkController().readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                cd.getSubstitutableProperties(), zkSys.getZkController());\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name, false);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkSys.getZkController() == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(),\n                                                cd.getCoreProperties());\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkSys.getZkController().createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkSys.getZkController().readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                cd.getCoreProperties(), zkSys.getZkController());\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name, false);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkSys.getZkController() == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(),\n                                                cd.getSubstitutableProperties());\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkSys.getZkController().createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkSys.getZkController().readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                cd.getSubstitutableProperties(), zkSys.getZkController());\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name, false);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkSys.getZkController() == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(),\n                                                cd.getCoreProperties());\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkSys.getZkController().createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkSys.getZkController().readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                cd.getCoreProperties(), zkSys.getZkController());\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name, false);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkSys.getZkController() == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(),\n                                                cd.getSubstitutableProperties());\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkSys.getZkController().createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkSys.getZkController().readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                cd.getSubstitutableProperties(), zkSys.getZkController());\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name, false);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkSys.getZkController() == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(),\n                                                cd.getCoreProperties());\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkSys.getZkController().createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkSys.getZkController().readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                cd.getCoreProperties(), zkSys.getZkController());\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1dca57049fb75fd60d90723d142769094a0402be","date":1385096736,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name, false);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkSys.getZkController() == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(),\n                                                cd.getSubstitutableProperties());\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkSys.getZkController().createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkSys.getZkController().getZkStateReader().readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                cd.getSubstitutableProperties(), zkSys.getZkController());\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name, false);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkSys.getZkController() == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(),\n                                                cd.getSubstitutableProperties());\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkSys.getZkController().createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkSys.getZkController().readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                cd.getSubstitutableProperties(), zkSys.getZkController());\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name, false);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkSys.getZkController() == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(),\n                                                cd.getSubstitutableProperties());\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkSys.getZkController().createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkSys.getZkController().getZkStateReader().readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                cd.getSubstitutableProperties(), zkSys.getZkController());\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name, false);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkSys.getZkController() == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(),\n                                                cd.getSubstitutableProperties());\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkSys.getZkController().createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkSys.getZkController().readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                cd.getSubstitutableProperties(), zkSys.getZkController());\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a122cfe3c6260dda11b43e6872d443ec0538b9","date":1390163692,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name, false);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkSys.getZkController() == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(),\n                                                cd.getSubstitutableProperties());\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkSys.getZkController().createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkSys.getZkController().getZkStateReader().readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                cd.getSubstitutableProperties(), zkSys.getZkController());\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name, false);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkSys.getZkController() == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(),\n                                                cd.getSubstitutableProperties());\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkSys.getZkController().createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkSys.getZkController().getZkStateReader().readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                cd.getSubstitutableProperties(), zkSys.getZkController());\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","bugFix":["8b6f42dee5a60f46a3fdf3ab93b39aefb356e245"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2d4e985daefcb892b529223b478c47985fc3c483","date":1395658491,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name, false);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name, false);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n\n        File instanceDir = new File(cd.getInstanceDir());\n\n        log.info(\"Reloading SolrCore '{}' using instanceDir: {}\",\n                 cd.getName(), instanceDir.getAbsolutePath());\n        SolrResourceLoader solrLoader;\n        if(zkSys.getZkController() == null) {\n          solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), loader.getClassLoader(),\n                                                cd.getSubstitutableProperties());\n        } else {\n          try {\n            String collection = cd.getCloudDescriptor().getCollectionName();\n            zkSys.getZkController().createCollectionZkNode(cd.getCloudDescriptor());\n\n            String zkConfigName = zkSys.getZkController().getZkStateReader().readConfigName(collection);\n            if (zkConfigName == null) {\n              log.error(\"Could not find config name for collection:\" + collection);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                           \"Could not find config name for collection:\" + collection);\n            }\n            solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, loader.getClassLoader(),\n                cd.getSubstitutableProperties(), zkSys.getZkController());\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        }\n        SolrCore newCore = core.reload(solrLoader, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85032ab568b3f50eabd577aaa994ba197db93758","date":1404157267,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name, false);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name, false);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(false, name, newCore, false, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4d419cdab641a032f3e0d0fa8167a5252be0ae3","date":1404159924,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name, false);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig, core);\n        registerCore(name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name, false);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig, core);\n        // keep core to orig name link\n        solrCores.removeCoreToOrigName(newCore, core);\n        registerCore(name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2d629ca62e3b8ab6e29a127aebe213163d490413","date":1405524223,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n\n    name = checkDefault(name);\n\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n    try {\n      solrCores.waitAddPendingCoreOps(name);\n      ConfigSet coreConfig = coreConfigService.getConfig(cd);\n      log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n      SolrCore newCore = core.reload(coreConfig, core);\n      registerCore(name, newCore, false);\n    }\n    catch (Exception e) {\n      coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n    }\n    finally {\n      solrCores.removeFromPendingOps(name);\n    }\n\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    try {\n      name = checkDefault(name);\n\n      SolrCore core = solrCores.getCoreFromAnyList(name, false);\n      if (core == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n      try {\n        solrCores.waitAddPendingCoreOps(name);\n        CoreDescriptor cd = core.getCoreDescriptor();\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig, core);\n        registerCore(name, newCore, false);\n      } finally {\n        solrCores.removeFromPendingOps(name);\n      }\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to reload core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":["ed32d8e4e6f80a018e7092cc35f204dcef1e87ec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ea4e4b34672fd15dc900deeb7085bfc1e2d4eb1","date":1417011337,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n\n    name = checkDefault(name);\n\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n    try {\n      solrCores.waitAddPendingCoreOps(name);\n      ConfigSet coreConfig = coreConfigService.getConfig(cd);\n      log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n      SolrCore newCore = core.reload(coreConfig);\n      registerCore(name, newCore, false);\n    }\n    catch (Exception e) {\n      coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n    }\n    finally {\n      solrCores.removeFromPendingOps(name);\n    }\n\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n\n    name = checkDefault(name);\n\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n    try {\n      solrCores.waitAddPendingCoreOps(name);\n      ConfigSet coreConfig = coreConfigService.getConfig(cd);\n      log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n      SolrCore newCore = core.reload(coreConfig, core);\n      registerCore(name, newCore, false);\n    }\n    catch (Exception e) {\n      coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n    }\n    finally {\n      solrCores.removeFromPendingOps(name);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n    try {\n      solrCores.waitAddPendingCoreOps(name);\n      ConfigSet coreConfig = coreConfigService.getConfig(cd);\n      log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n      SolrCore newCore = core.reload(coreConfig);\n      registerCore(name, newCore, false);\n    }\n    catch (Exception e) {\n      coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n    }\n    finally {\n      solrCores.removeFromPendingOps(name);\n    }\n\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n\n    name = checkDefault(name);\n\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n    try {\n      solrCores.waitAddPendingCoreOps(name);\n      ConfigSet coreConfig = coreConfigService.getConfig(cd);\n      log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n      SolrCore newCore = core.reload(coreConfig);\n      registerCore(name, newCore, false);\n    }\n    catch (Exception e) {\n      coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n    }\n    finally {\n      solrCores.removeFromPendingOps(name);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ed32d8e4e6f80a018e7092cc35f204dcef1e87ec","date":1457637589,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n    try {\n      solrCores.waitAddPendingCoreOps(name);\n      ConfigSet coreConfig = coreConfigService.getConfig(cd);\n      log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n      SolrCore newCore = core.reload(coreConfig);\n      registerCore(name, newCore, false);\n    } catch (SolrCoreState.CoreIsClosedException e) {\n      throw e;\n    } catch (Exception e) {\n      coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n    }\n    finally {\n      solrCores.removeFromPendingOps(name);\n    }\n\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n    try {\n      solrCores.waitAddPendingCoreOps(name);\n      ConfigSet coreConfig = coreConfigService.getConfig(cd);\n      log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n      SolrCore newCore = core.reload(coreConfig);\n      registerCore(name, newCore, false);\n    }\n    catch (Exception e) {\n      coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n    }\n    finally {\n      solrCores.removeFromPendingOps(name);\n    }\n\n  }\n\n","bugFix":["971c36528e9394e6a97c8703e4663f578e765eff","2d629ca62e3b8ab6e29a127aebe213163d490413"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d528fd7ae22865015b756e0a03832e2051de2a9c","date":1476721105,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n    try {\n      solrCores.waitAddPendingCoreOps(name);\n      ConfigSet coreConfig = coreConfigService.getConfig(cd);\n      log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n      SolrCore newCore = core.reload(coreConfig);\n      registerCore(name, newCore, false, false);\n    } catch (SolrCoreState.CoreIsClosedException e) {\n      throw e;\n    } catch (Exception e) {\n      coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n    }\n    finally {\n      solrCores.removeFromPendingOps(name);\n    }\n\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n    try {\n      solrCores.waitAddPendingCoreOps(name);\n      ConfigSet coreConfig = coreConfigService.getConfig(cd);\n      log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n      SolrCore newCore = core.reload(coreConfig);\n      registerCore(name, newCore, false);\n    } catch (SolrCoreState.CoreIsClosedException e) {\n      throw e;\n    } catch (Exception e) {\n      coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n    }\n    finally {\n      solrCores.removeFromPendingOps(name);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n    try {\n      solrCores.waitAddPendingCoreOps(name);\n      ConfigSet coreConfig = coreConfigService.getConfig(cd);\n      log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n      SolrCore newCore = core.reload(coreConfig);\n      registerCore(name, newCore, false, false);\n    } catch (SolrCoreState.CoreIsClosedException e) {\n      throw e;\n    } catch (Exception e) {\n      coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n    }\n    finally {\n      solrCores.removeFromPendingOps(name);\n    }\n\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n    try {\n      solrCores.waitAddPendingCoreOps(name);\n      ConfigSet coreConfig = coreConfigService.getConfig(cd);\n      log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n      SolrCore newCore = core.reload(coreConfig);\n      registerCore(name, newCore, false);\n    } catch (SolrCoreState.CoreIsClosedException e) {\n      throw e;\n    } catch (Exception e) {\n      coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n    }\n    finally {\n      solrCores.removeFromPendingOps(name);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d48ddeb7e5d775a58702f6c2aaf0d501b12f0e6","date":1487814396,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n      CoreDescriptor cd = core.getCoreDescriptor();\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd.getName(), newCore, false, false);\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core == null)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n\n    CoreDescriptor cd = core.getCoreDescriptor();\n    try {\n      solrCores.waitAddPendingCoreOps(name);\n      ConfigSet coreConfig = coreConfigService.getConfig(cd);\n      log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n      SolrCore newCore = core.reload(coreConfig);\n      registerCore(name, newCore, false, false);\n    } catch (SolrCoreState.CoreIsClosedException e) {\n      throw e;\n    } catch (Exception e) {\n      coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n    }\n    finally {\n      solrCores.removeFromPendingOps(name);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be320990bdc77e643388fa801e75017f19289c42","date":1489477067,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n      CoreDescriptor cd = core.getCoreDescriptor();\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd.getName(), newCore, false, false);\n        if (getZkController() != null) {\n          boolean onlyLeaderIndexes = getZkController().getClusterState().getCollection(cd.getCollectionName()).getRealtimeReplicas() == 1;\n          if (onlyLeaderIndexes && !cd.getCloudDescriptor().isLeader()) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName());\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n      CoreDescriptor cd = core.getCoreDescriptor();\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd.getName(), newCore, false, false);\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f996f8177b9204bdc92f7164460c6cefad9ac99a","date":1489482690,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n      CoreDescriptor cd = core.getCoreDescriptor();\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd.getName(), newCore, false, false);\n        if (getZkController() != null) {\n          boolean onlyLeaderIndexes = getZkController().getClusterState().getCollection(cd.getCollectionName()).getRealtimeReplicas() == 1;\n          if (onlyLeaderIndexes && !cd.getCloudDescriptor().isLeader()) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName());\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n      CoreDescriptor cd = core.getCoreDescriptor();\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd.getName(), newCore, false, false);\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n      CoreDescriptor cd = core.getCoreDescriptor();\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd.getName(), newCore, false, false);\n        if (getZkController() != null) {\n          boolean onlyLeaderIndexes = getZkController().getClusterState().getCollection(cd.getCollectionName()).getRealtimeReplicas() == 1;\n          if (onlyLeaderIndexes && !cd.getCloudDescriptor().isLeader()) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName());\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n      CoreDescriptor cd = core.getCoreDescriptor();\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd.getName(), newCore, false, false);\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor we need to reload it if it's out there. \n      CorePropertiesLocator cpl = new CorePropertiesLocator(null);\n      CoreDescriptor cd = cpl.reload(this, core.getCoreDescriptor());\n      if (cd == null) cd = core.getCoreDescriptor();\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          boolean onlyLeaderIndexes = getZkController().getClusterState().getCollection(cd.getCollectionName()).getRealtimeReplicas() == 1;\n          if (onlyLeaderIndexes && !cd.getCloudDescriptor().isLeader()) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName());\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n      CoreDescriptor cd = core.getCoreDescriptor();\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd.getName(), newCore, false, false);\n        if (getZkController() != null) {\n          boolean onlyLeaderIndexes = getZkController().getClusterState().getCollection(cd.getCollectionName()).getRealtimeReplicas() == 1;\n          if (onlyLeaderIndexes && !cd.getCloudDescriptor().isLeader()) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName());\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor we need to reload it if it's out there. \n      CorePropertiesLocator cpl = new CorePropertiesLocator(null);\n      CoreDescriptor cd = cpl.reload(this, core.getCoreDescriptor());\n      if (cd == null) cd = core.getCoreDescriptor();\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          boolean onlyLeaderIndexes = getZkController().getClusterState().getCollection(cd.getCollectionName()).getRealtimeReplicas() == 1;\n          if (onlyLeaderIndexes && !cd.getCloudDescriptor().isLeader()) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName());\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n      CoreDescriptor cd = core.getCoreDescriptor();\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd.getName(), newCore, false, false);\n        if (getZkController() != null) {\n          boolean onlyLeaderIndexes = getZkController().getClusterState().getCollection(cd.getCollectionName()).getRealtimeReplicas() == 1;\n          if (onlyLeaderIndexes && !cd.getCloudDescriptor().isLeader()) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName());\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5","date":1493061731,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n      \n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          boolean onlyLeaderIndexes = getZkController().getClusterState().getCollection(cd.getCollectionName()).getRealtimeReplicas() == 1;\n          if (onlyLeaderIndexes && !cd.getCloudDescriptor().isLeader()) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName());\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor we need to reload it if it's out there. \n      CorePropertiesLocator cpl = new CorePropertiesLocator(null);\n      CoreDescriptor cd = cpl.reload(this, core.getCoreDescriptor());\n      if (cd == null) cd = core.getCoreDescriptor();\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          boolean onlyLeaderIndexes = getZkController().getClusterState().getCollection(cd.getCollectionName()).getRealtimeReplicas() == 1;\n          if (onlyLeaderIndexes && !cd.getCloudDescriptor().isLeader()) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName());\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n      \n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n            \n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n      \n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          boolean onlyLeaderIndexes = getZkController().getClusterState().getCollection(cd.getCollectionName()).getRealtimeReplicas() == 1;\n          if (onlyLeaderIndexes && !cd.getCloudDescriptor().isLeader()) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName());\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n      \n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n            \n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n      \n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n            \n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","sourceOld":"  // ---------------- Core name related methods --------------- \n  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor we need to reload it if it's out there. \n      CorePropertiesLocator cpl = new CorePropertiesLocator(null);\n      CoreDescriptor cd = cpl.reload(this, core.getCoreDescriptor());\n      if (cd == null) cd = core.getCoreDescriptor();\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          boolean onlyLeaderIndexes = getZkController().getClusterState().getCollection(cd.getCollectionName()).getRealtimeReplicas() == 1;\n          if (onlyLeaderIndexes && !cd.getCloudDescriptor().isLeader()) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName());\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n      \n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n            \n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd7a2b4785d366164d3cd69f9948de6ff34d23a1","date":1500527874,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        createFromDescriptor(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["004ec9e26487ae9b6205e790f8f77ef5e98d8daf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d301cb76d81de80d07b44735622a04d49ed938eb","date":1500536382,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        createFromDescriptor(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        createFromDescriptor(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        create(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"004ec9e26487ae9b6205e790f8f77ef5e98d8daf","date":1506366751,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        createFromDescriptor(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","bugFix":["bd7a2b4785d366164d3cd69f9948de6ff34d23a1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9efa9c0fcd87863d1a86eed29d4304c11bc7d50a","date":1506410441,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        createFromDescriptor(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        createFromDescriptor(clf.cd, true, false);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37fd782242ee26ee7b4ad18dddec17004c1da7ff","date":1516061714,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          } else if(replica.getType() == Replica.Type.PULL) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName(), false);\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          } else if(replica.getType() == Replica.Type.PULL) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName(), false);\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    if (isShutDown) {\n      throw new AlreadyClosedException();\n    }\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          } else if(replica.getType() == Replica.Type.PULL) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName(), false);\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          } else if(replica.getType() == Replica.Type.PULL) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName(), false);\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dff274f347ef702a3c44718e8801230a478a8f73","date":1544662146,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    if (isShutDown) {\n      throw new AlreadyClosedException();\n    }\n    SolrCore newCore = null;\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      Closeable oldCore = null;\n      boolean success = false;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        newCore = core.reload(coreConfig);\n\n        registerCore(cd, newCore, false, false);\n\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { // TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          } else if (replica.getType() == Replica.Type.PULL) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName(), false);\n          }\n        }\n        success = true;\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, (Exception) e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      } finally {\n        if (!success && newCore != null && newCore.getOpenCount() > 0) {\n          IOUtils.closeQuietly(newCore);\n        }\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    if (isShutDown) {\n      throw new AlreadyClosedException();\n    }\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        SolrCore newCore = core.reload(coreConfig);\n        registerCore(cd, newCore, false, false);\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { //TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          } else if(replica.getType() == Replica.Type.PULL) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName(), false);\n          }\n        }\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      }\n      finally {\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc48b0cd4ac45fae4c9660d1828b3fbafffdd12e","date":1551802585,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    if (isShutDown) {\n      throw new AlreadyClosedException();\n    }\n    SolrCore newCore = null;\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      Closeable oldCore = null;\n      boolean success = false;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        newCore = core.reload(coreConfig);\n\n        DocCollection docCollection = null;\n        if (getZkController() != null) {\n          docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          // turn off indexing now, before the new core is registered\n          if (docCollection.getBool(ZkStateReader.READ_ONLY, false)) {\n            newCore.readOnly = true;\n          }\n        }\n\n        registerCore(cd, newCore, false, false);\n\n        // force commit on old core if the new one is readOnly and prevent any new updates\n        if (newCore.readOnly) {\n          RefCounted<IndexWriter> iwRef = core.getSolrCoreState().getIndexWriter(null);\n          if (iwRef != null) {\n            IndexWriter iw = iwRef.get();\n            // switch old core to readOnly\n            core.readOnly = true;\n            try {\n              if (iw != null) {\n                iw.commit();\n              }\n            } finally {\n              iwRef.decref();\n            }\n          }\n        }\n\n\n        if (docCollection != null) {\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { // TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          } else if (replica.getType() == Replica.Type.PULL) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName(), false);\n          }\n        }\n        success = true;\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, (Exception) e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      } finally {\n        if (!success && newCore != null && newCore.getOpenCount() > 0) {\n          IOUtils.closeQuietly(newCore);\n        }\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    if (isShutDown) {\n      throw new AlreadyClosedException();\n    }\n    SolrCore newCore = null;\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      Closeable oldCore = null;\n      boolean success = false;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        newCore = core.reload(coreConfig);\n\n        registerCore(cd, newCore, false, false);\n\n        if (getZkController() != null) {\n          DocCollection docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { // TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          } else if (replica.getType() == Replica.Type.PULL) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName(), false);\n          }\n        }\n        success = true;\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, (Exception) e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      } finally {\n        if (!success && newCore != null && newCore.getOpenCount() > 0) {\n          IOUtils.closeQuietly(newCore);\n        }\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   *\n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    if (isShutDown) {\n      throw new AlreadyClosedException();\n    }\n    SolrCore newCore = null;\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      Closeable oldCore = null;\n      boolean success = false;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        newCore = core.reload(coreConfig);\n\n        DocCollection docCollection = null;\n        if (getZkController() != null) {\n          docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          // turn off indexing now, before the new core is registered\n          if (docCollection.getBool(ZkStateReader.READ_ONLY, false)) {\n            newCore.readOnly = true;\n          }\n        }\n\n        registerCore(cd, newCore, false, false);\n\n        // force commit on old core if the new one is readOnly and prevent any new updates\n        if (newCore.readOnly) {\n          RefCounted<IndexWriter> iwRef = core.getSolrCoreState().getIndexWriter(null);\n          if (iwRef != null) {\n            IndexWriter iw = iwRef.get();\n            // switch old core to readOnly\n            core.readOnly = true;\n            try {\n              if (iw != null) {\n                iw.commit();\n              }\n            } finally {\n              iwRef.decref();\n            }\n          }\n        }\n\n\n        if (docCollection != null) {\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { // TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          } else if (replica.getType() == Replica.Type.PULL) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName(), false);\n          }\n        }\n        success = true;\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, (Exception) e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      } finally {\n        if (!success && newCore != null && newCore.getOpenCount() > 0) {\n          IOUtils.closeQuietly(newCore);\n        }\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   * \n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    if (isShutDown) {\n      throw new AlreadyClosedException();\n    }\n    SolrCore newCore = null;\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      Closeable oldCore = null;\n      boolean success = false;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        newCore = core.reload(coreConfig);\n\n        DocCollection docCollection = null;\n        if (getZkController() != null) {\n          docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          // turn off indexing now, before the new core is registered\n          if (docCollection.getBool(ZkStateReader.READ_ONLY, false)) {\n            newCore.readOnly = true;\n          }\n        }\n\n        registerCore(cd, newCore, false, false);\n\n        // force commit on old core if the new one is readOnly and prevent any new updates\n        if (newCore.readOnly) {\n          RefCounted<IndexWriter> iwRef = core.getSolrCoreState().getIndexWriter(null);\n          if (iwRef != null) {\n            IndexWriter iw = iwRef.get();\n            // switch old core to readOnly\n            core.readOnly = true;\n            try {\n              if (iw != null) {\n                iw.commit();\n              }\n            } finally {\n              iwRef.decref();\n            }\n          }\n        }\n\n\n        if (docCollection != null) {\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { // TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          } else if (replica.getType() == Replica.Type.PULL) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName(), false);\n          }\n        }\n        success = true;\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, (Exception) e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      } finally {\n        if (!success && newCore != null && newCore.getOpenCount() > 0) {\n          IOUtils.closeQuietly(newCore);\n        }\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99d6782cf9de8c5ffeb8d0b0f103b578205af068","date":1566878682,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   *\n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    if (isShutDown) {\n      throw new AlreadyClosedException();\n    }\n    SolrCore newCore = null;\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      Closeable oldCore = null;\n      boolean success = false;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        newCore = core.reload(coreConfig);\n\n        DocCollection docCollection = null;\n        if (getZkController() != null) {\n          docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          // turn off indexing now, before the new core is registered\n          if (docCollection.getBool(ZkStateReader.READ_ONLY, false)) {\n            newCore.readOnly = true;\n          }\n        }\n\n        registerCore(cd, newCore, false, false);\n\n        // force commit on old core if the new one is readOnly and prevent any new updates\n        if (newCore.readOnly) {\n          RefCounted<IndexWriter> iwRef = core.getSolrCoreState().getIndexWriter(null);\n          if (iwRef != null) {\n            IndexWriter iw = iwRef.get();\n            // switch old core to readOnly\n            core.readOnly = true;\n            try {\n              if (iw != null) {\n                iw.commit();\n              }\n            } finally {\n              iwRef.decref();\n            }\n          }\n        }\n\n\n        if (docCollection != null) {\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { // TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          } else if (replica.getType() == Replica.Type.PULL) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName(), false);\n          }\n        }\n        success = true;\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      } finally {\n        if (!success && newCore != null && newCore.getOpenCount() > 0) {\n          IOUtils.closeQuietly(newCore);\n        }\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   *\n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    if (isShutDown) {\n      throw new AlreadyClosedException();\n    }\n    SolrCore newCore = null;\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      Closeable oldCore = null;\n      boolean success = false;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        newCore = core.reload(coreConfig);\n\n        DocCollection docCollection = null;\n        if (getZkController() != null) {\n          docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          // turn off indexing now, before the new core is registered\n          if (docCollection.getBool(ZkStateReader.READ_ONLY, false)) {\n            newCore.readOnly = true;\n          }\n        }\n\n        registerCore(cd, newCore, false, false);\n\n        // force commit on old core if the new one is readOnly and prevent any new updates\n        if (newCore.readOnly) {\n          RefCounted<IndexWriter> iwRef = core.getSolrCoreState().getIndexWriter(null);\n          if (iwRef != null) {\n            IndexWriter iw = iwRef.get();\n            // switch old core to readOnly\n            core.readOnly = true;\n            try {\n              if (iw != null) {\n                iw.commit();\n              }\n            } finally {\n              iwRef.decref();\n            }\n          }\n        }\n\n\n        if (docCollection != null) {\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { // TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          } else if (replica.getType() == Replica.Type.PULL) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName(), false);\n          }\n        }\n        success = true;\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, (Exception) e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      } finally {\n        if (!success && newCore != null && newCore.getOpenCount() > 0) {\n          IOUtils.closeQuietly(newCore);\n        }\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   *\n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    if (isShutDown) {\n      throw new AlreadyClosedException();\n    }\n    SolrCore newCore = null;\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      Closeable oldCore = null;\n      boolean success = false;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        newCore = core.reload(coreConfig);\n\n        DocCollection docCollection = null;\n        if (getZkController() != null) {\n          docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          // turn off indexing now, before the new core is registered\n          if (docCollection.getBool(ZkStateReader.READ_ONLY, false)) {\n            newCore.readOnly = true;\n          }\n        }\n\n        registerCore(cd, newCore, false, false);\n\n        // force commit on old core if the new one is readOnly and prevent any new updates\n        if (newCore.readOnly) {\n          RefCounted<IndexWriter> iwRef = core.getSolrCoreState().getIndexWriter(null);\n          if (iwRef != null) {\n            IndexWriter iw = iwRef.get();\n            // switch old core to readOnly\n            core.readOnly = true;\n            try {\n              if (iw != null) {\n                iw.commit();\n              }\n            } finally {\n              iwRef.decref();\n            }\n          }\n        }\n\n\n        if (docCollection != null) {\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { // TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          } else if (replica.getType() == Replica.Type.PULL) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName(), false);\n          }\n        }\n        success = true;\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, (Exception) e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      } finally {\n        if (!success && newCore != null && newCore.getOpenCount() > 0) {\n          IOUtils.closeQuietly(newCore);\n        }\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   *\n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    if (isShutDown) {\n      throw new AlreadyClosedException();\n    }\n    SolrCore newCore = null;\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      Closeable oldCore = null;\n      boolean success = false;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        newCore = core.reload(coreConfig);\n\n        DocCollection docCollection = null;\n        if (getZkController() != null) {\n          docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          // turn off indexing now, before the new core is registered\n          if (docCollection.getBool(ZkStateReader.READ_ONLY, false)) {\n            newCore.readOnly = true;\n          }\n        }\n\n        registerCore(cd, newCore, false, false);\n\n        // force commit on old core if the new one is readOnly and prevent any new updates\n        if (newCore.readOnly) {\n          RefCounted<IndexWriter> iwRef = core.getSolrCoreState().getIndexWriter(null);\n          if (iwRef != null) {\n            IndexWriter iw = iwRef.get();\n            // switch old core to readOnly\n            core.readOnly = true;\n            try {\n              if (iw != null) {\n                iw.commit();\n              }\n            } finally {\n              iwRef.decref();\n            }\n          }\n        }\n\n\n        if (docCollection != null) {\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { // TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          } else if (replica.getType() == Replica.Type.PULL) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName(), false);\n          }\n        }\n        success = true;\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      } finally {\n        if (!success && newCore != null && newCore.getOpenCount() > 0) {\n          IOUtils.closeQuietly(newCore);\n        }\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   *\n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    if (isShutDown) {\n      throw new AlreadyClosedException();\n    }\n    SolrCore newCore = null;\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      Closeable oldCore = null;\n      boolean success = false;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        newCore = core.reload(coreConfig);\n\n        DocCollection docCollection = null;\n        if (getZkController() != null) {\n          docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          // turn off indexing now, before the new core is registered\n          if (docCollection.getBool(ZkStateReader.READ_ONLY, false)) {\n            newCore.readOnly = true;\n          }\n        }\n\n        registerCore(cd, newCore, false, false);\n\n        // force commit on old core if the new one is readOnly and prevent any new updates\n        if (newCore.readOnly) {\n          RefCounted<IndexWriter> iwRef = core.getSolrCoreState().getIndexWriter(null);\n          if (iwRef != null) {\n            IndexWriter iw = iwRef.get();\n            // switch old core to readOnly\n            core.readOnly = true;\n            try {\n              if (iw != null) {\n                iw.commit();\n              }\n            } finally {\n              iwRef.decref();\n            }\n          }\n        }\n\n\n        if (docCollection != null) {\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { // TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          } else if (replica.getType() == Replica.Type.PULL) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName(), false);\n          }\n        }\n        success = true;\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, (Exception) e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      } finally {\n        if (!success && newCore != null && newCore.getOpenCount() > 0) {\n          IOUtils.closeQuietly(newCore);\n        }\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   *\n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    if (isShutDown) {\n      throw new AlreadyClosedException();\n    }\n    SolrCore newCore = null;\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      Closeable oldCore = null;\n      boolean success = false;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        newCore = core.reload(coreConfig);\n\n        DocCollection docCollection = null;\n        if (getZkController() != null) {\n          docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          // turn off indexing now, before the new core is registered\n          if (docCollection.getBool(ZkStateReader.READ_ONLY, false)) {\n            newCore.readOnly = true;\n          }\n        }\n\n        registerCore(cd, newCore, false, false);\n\n        // force commit on old core if the new one is readOnly and prevent any new updates\n        if (newCore.readOnly) {\n          RefCounted<IndexWriter> iwRef = core.getSolrCoreState().getIndexWriter(null);\n          if (iwRef != null) {\n            IndexWriter iw = iwRef.get();\n            // switch old core to readOnly\n            core.readOnly = true;\n            try {\n              if (iw != null) {\n                iw.commit();\n              }\n            } finally {\n              iwRef.decref();\n            }\n          }\n        }\n\n\n        if (docCollection != null) {\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { // TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          } else if (replica.getType() == Replica.Type.PULL) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName(), false);\n          }\n        }\n        success = true;\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      } finally {\n        if (!success && newCore != null && newCore.getOpenCount() > 0) {\n          IOUtils.closeQuietly(newCore);\n        }\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4fb176991e13ab85dfe62dceeb287dde115745","date":1579630717,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   *\n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    if (isShutDown) {\n      throw new AlreadyClosedException();\n    }\n    SolrCore newCore = null;\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      Closeable oldCore = null;\n      boolean success = false;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.loadConfigSet(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        newCore = core.reload(coreConfig);\n\n        DocCollection docCollection = null;\n        if (getZkController() != null) {\n          docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          // turn off indexing now, before the new core is registered\n          if (docCollection.getBool(ZkStateReader.READ_ONLY, false)) {\n            newCore.readOnly = true;\n          }\n        }\n\n        registerCore(cd, newCore, false, false);\n\n        // force commit on old core if the new one is readOnly and prevent any new updates\n        if (newCore.readOnly) {\n          RefCounted<IndexWriter> iwRef = core.getSolrCoreState().getIndexWriter(null);\n          if (iwRef != null) {\n            IndexWriter iw = iwRef.get();\n            // switch old core to readOnly\n            core.readOnly = true;\n            try {\n              if (iw != null) {\n                iw.commit();\n              }\n            } finally {\n              iwRef.decref();\n            }\n          }\n        }\n\n\n        if (docCollection != null) {\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { // TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          } else if (replica.getType() == Replica.Type.PULL) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName(), false);\n          }\n        }\n        success = true;\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, (Exception) e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      } finally {\n        if (!success && newCore != null && newCore.getOpenCount() > 0) {\n          IOUtils.closeQuietly(newCore);\n        }\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   *\n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    if (isShutDown) {\n      throw new AlreadyClosedException();\n    }\n    SolrCore newCore = null;\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      Closeable oldCore = null;\n      boolean success = false;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.getConfig(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        newCore = core.reload(coreConfig);\n\n        DocCollection docCollection = null;\n        if (getZkController() != null) {\n          docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          // turn off indexing now, before the new core is registered\n          if (docCollection.getBool(ZkStateReader.READ_ONLY, false)) {\n            newCore.readOnly = true;\n          }\n        }\n\n        registerCore(cd, newCore, false, false);\n\n        // force commit on old core if the new one is readOnly and prevent any new updates\n        if (newCore.readOnly) {\n          RefCounted<IndexWriter> iwRef = core.getSolrCoreState().getIndexWriter(null);\n          if (iwRef != null) {\n            IndexWriter iw = iwRef.get();\n            // switch old core to readOnly\n            core.readOnly = true;\n            try {\n              if (iw != null) {\n                iw.commit();\n              }\n            } finally {\n              iwRef.decref();\n            }\n          }\n        }\n\n\n        if (docCollection != null) {\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { // TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          } else if (replica.getType() == Replica.Type.PULL) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName(), false);\n          }\n        }\n        success = true;\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, (Exception) e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      } finally {\n        if (!success && newCore != null && newCore.getOpenCount() > 0) {\n          IOUtils.closeQuietly(newCore);\n        }\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   *\n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    if (isShutDown) {\n      throw new AlreadyClosedException();\n    }\n    SolrCore newCore = null;\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      Closeable oldCore = null;\n      boolean success = false;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.loadConfigSet(cd);\n        if (log.isInfoEnabled()) {\n          log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        }\n        newCore = core.reload(coreConfig);\n\n        DocCollection docCollection = null;\n        if (getZkController() != null) {\n          docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          // turn off indexing now, before the new core is registered\n          if (docCollection.getBool(ZkStateReader.READ_ONLY, false)) {\n            newCore.readOnly = true;\n          }\n        }\n\n        registerCore(cd, newCore, false, false);\n\n        // force commit on old core if the new one is readOnly and prevent any new updates\n        if (newCore.readOnly) {\n          RefCounted<IndexWriter> iwRef = core.getSolrCoreState().getIndexWriter(null);\n          if (iwRef != null) {\n            IndexWriter iw = iwRef.get();\n            // switch old core to readOnly\n            core.readOnly = true;\n            try {\n              if (iw != null) {\n                iw.commit();\n              }\n            } finally {\n              iwRef.decref();\n            }\n          }\n        }\n\n\n        if (docCollection != null) {\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { // TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          } else if (replica.getType() == Replica.Type.PULL) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName(), false);\n          }\n        }\n        success = true;\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, (Exception) e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      } finally {\n        if (!success && newCore != null && newCore.getOpenCount() > 0) {\n          IOUtils.closeQuietly(newCore);\n        }\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   *\n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    if (isShutDown) {\n      throw new AlreadyClosedException();\n    }\n    SolrCore newCore = null;\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      Closeable oldCore = null;\n      boolean success = false;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.loadConfigSet(cd);\n        log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        newCore = core.reload(coreConfig);\n\n        DocCollection docCollection = null;\n        if (getZkController() != null) {\n          docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          // turn off indexing now, before the new core is registered\n          if (docCollection.getBool(ZkStateReader.READ_ONLY, false)) {\n            newCore.readOnly = true;\n          }\n        }\n\n        registerCore(cd, newCore, false, false);\n\n        // force commit on old core if the new one is readOnly and prevent any new updates\n        if (newCore.readOnly) {\n          RefCounted<IndexWriter> iwRef = core.getSolrCoreState().getIndexWriter(null);\n          if (iwRef != null) {\n            IndexWriter iw = iwRef.get();\n            // switch old core to readOnly\n            core.readOnly = true;\n            try {\n              if (iw != null) {\n                iw.commit();\n              }\n            } finally {\n              iwRef.decref();\n            }\n          }\n        }\n\n\n        if (docCollection != null) {\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { // TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          } else if (replica.getType() == Replica.Type.PULL) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName(), false);\n          }\n        }\n        success = true;\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, (Exception) e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      } finally {\n        if (!success && newCore != null && newCore.getOpenCount() > 0) {\n          IOUtils.closeQuietly(newCore);\n        }\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   *\n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    if (isShutDown) {\n      throw new AlreadyClosedException();\n    }\n    SolrCore newCore = null;\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      Closeable oldCore = null;\n      boolean success = false;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.loadConfigSet(cd);\n        if (log.isInfoEnabled()) {\n          log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        }\n        newCore = core.reload(coreConfig);\n\n        DocCollection docCollection = null;\n        if (getZkController() != null) {\n          docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          // turn off indexing now, before the new core is registered\n          if (docCollection.getBool(ZkStateReader.READ_ONLY, false)) {\n            newCore.readOnly = true;\n          }\n        }\n\n        registerCore(cd, newCore, false, false);\n\n        // force commit on old core if the new one is readOnly and prevent any new updates\n        if (newCore.readOnly) {\n          RefCounted<IndexWriter> iwRef = core.getSolrCoreState().getIndexWriter(null);\n          if (iwRef != null) {\n            IndexWriter iw = iwRef.get();\n            // switch old core to readOnly\n            core.readOnly = true;\n            try {\n              if (iw != null) {\n                iw.commit();\n              }\n            } finally {\n              iwRef.decref();\n            }\n          }\n        }\n\n\n        if (docCollection != null) {\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { // TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          } else if (replica.getType() == Replica.Type.PULL) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName(), false);\n          }\n        }\n        success = true;\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      } finally {\n        if (!success && newCore != null && newCore.getOpenCount() > 0) {\n          IOUtils.closeQuietly(newCore);\n        }\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   *\n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    if (isShutDown) {\n      throw new AlreadyClosedException();\n    }\n    SolrCore newCore = null;\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      Closeable oldCore = null;\n      boolean success = false;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.loadConfigSet(cd);\n        if (log.isInfoEnabled()) {\n          log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        }\n        newCore = core.reload(coreConfig);\n\n        DocCollection docCollection = null;\n        if (getZkController() != null) {\n          docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          // turn off indexing now, before the new core is registered\n          if (docCollection.getBool(ZkStateReader.READ_ONLY, false)) {\n            newCore.readOnly = true;\n          }\n        }\n\n        registerCore(cd, newCore, false, false);\n\n        // force commit on old core if the new one is readOnly and prevent any new updates\n        if (newCore.readOnly) {\n          RefCounted<IndexWriter> iwRef = core.getSolrCoreState().getIndexWriter(null);\n          if (iwRef != null) {\n            IndexWriter iw = iwRef.get();\n            // switch old core to readOnly\n            core.readOnly = true;\n            try {\n              if (iw != null) {\n                iw.commit();\n              }\n            } finally {\n              iwRef.decref();\n            }\n          }\n        }\n\n\n        if (docCollection != null) {\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { // TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          } else if (replica.getType() == Replica.Type.PULL) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName(), false);\n          }\n        }\n        success = true;\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, (Exception) e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      } finally {\n        if (!success && newCore != null && newCore.getOpenCount() > 0) {\n          IOUtils.closeQuietly(newCore);\n        }\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2ed9b72e5fa27a7bd4857f222ca815341979d4a","date":1594879524,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reload(String).mjava","sourceNew":"  /**\n   * reloads a core\n   * refer {@link CoreContainer#reload(String, UUID)} for details\n   */\n  public void reload(String name) {\n    reload(name, null);\n  }\n\n","sourceOld":"  /**\n   * Recreates a SolrCore.\n   * While the new core is loading, requests will continue to be dispatched to\n   * and processed by the old core\n   *\n   * @param name the name of the SolrCore to reload\n   */\n  public void reload(String name) {\n    if (isShutDown) {\n      throw new AlreadyClosedException();\n    }\n    SolrCore newCore = null;\n    SolrCore core = solrCores.getCoreFromAnyList(name, false);\n    if (core != null) {\n\n      // The underlying core properties files may have changed, we don't really know. So we have a (perhaps) stale\n      // CoreDescriptor and we need to reload it from the disk files\n      CoreDescriptor cd = reloadCoreDescriptor(core.getCoreDescriptor());\n      solrCores.addCoreDescriptor(cd);\n      Closeable oldCore = null;\n      boolean success = false;\n      try {\n        solrCores.waitAddPendingCoreOps(cd.getName());\n        ConfigSet coreConfig = coreConfigService.loadConfigSet(cd);\n        if (log.isInfoEnabled()) {\n          log.info(\"Reloading SolrCore '{}' using configuration from {}\", cd.getName(), coreConfig.getName());\n        }\n        newCore = core.reload(coreConfig);\n\n        DocCollection docCollection = null;\n        if (getZkController() != null) {\n          docCollection = getZkController().getClusterState().getCollection(cd.getCollectionName());\n          // turn off indexing now, before the new core is registered\n          if (docCollection.getBool(ZkStateReader.READ_ONLY, false)) {\n            newCore.readOnly = true;\n          }\n        }\n\n        registerCore(cd, newCore, false, false);\n\n        // force commit on old core if the new one is readOnly and prevent any new updates\n        if (newCore.readOnly) {\n          RefCounted<IndexWriter> iwRef = core.getSolrCoreState().getIndexWriter(null);\n          if (iwRef != null) {\n            IndexWriter iw = iwRef.get();\n            // switch old core to readOnly\n            core.readOnly = true;\n            try {\n              if (iw != null) {\n                iw.commit();\n              }\n            } finally {\n              iwRef.decref();\n            }\n          }\n        }\n\n\n        if (docCollection != null) {\n          Replica replica = docCollection.getReplica(cd.getCloudDescriptor().getCoreNodeName());\n          assert replica != null;\n          if (replica.getType() == Replica.Type.TLOG) { // TODO: needed here?\n            getZkController().stopReplicationFromLeader(core.getName());\n            if (!cd.getCloudDescriptor().isLeader()) {\n              getZkController().startReplicationFromLeader(newCore.getName(), true);\n            }\n\n          } else if (replica.getType() == Replica.Type.PULL) {\n            getZkController().stopReplicationFromLeader(core.getName());\n            getZkController().startReplicationFromLeader(newCore.getName(), false);\n          }\n        }\n        success = true;\n      } catch (SolrCoreState.CoreIsClosedException e) {\n        throw e;\n      } catch (Exception e) {\n        coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e));\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to reload core [\" + cd.getName() + \"]\", e);\n      } finally {\n        if (!success && newCore != null && newCore.getOpenCount() > 0) {\n          IOUtils.closeQuietly(newCore);\n        }\n        solrCores.removeFromPendingOps(cd.getName());\n      }\n    } else {\n      CoreLoadFailure clf = coreInitFailures.get(name);\n      if (clf != null) {\n        try {\n          solrCores.waitAddPendingCoreOps(clf.cd.getName());\n          createFromDescriptor(clf.cd, true, false);\n        } finally {\n          solrCores.removeFromPendingOps(clf.cd.getName());\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9efa9c0fcd87863d1a86eed29d4304c11bc7d50a":["d301cb76d81de80d07b44735622a04d49ed938eb","004ec9e26487ae9b6205e790f8f77ef5e98d8daf"],"b94236357aaa22b76c10629851fe4e376e0cea82":["9efa9c0fcd87863d1a86eed29d4304c11bc7d50a","37fd782242ee26ee7b4ad18dddec17004c1da7ff"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["b29abed5661c7911e4b45d5a3d79a186268e28c4","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"971c36528e9394e6a97c8703e4663f578e765eff":["c26f00b574427b55127e869b935845554afde1fa"],"41d8182fd2ab7b3bc57ffd7eb6491dddcb70c27d":["971c36528e9394e6a97c8703e4663f578e765eff"],"dff274f347ef702a3c44718e8801230a478a8f73":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"dc6e48afbb50ae0a22fa76e226f04fd585532938":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["9409650933cc688e77e565092a25e58adfc2e18d"],"aba371508186796cc6151d8223a5b4e16d02e26e":["083df6f7d2115772bdcf0f53c63aa859e664c69e","cee0d276a5aee45373d831d0328b4544eec95754"],"140be51d03394488536f4aacedace29f9b318347":["3e4fb176991e13ab85dfe62dceeb287dde115745"],"1d48ddeb7e5d775a58702f6c2aaf0d501b12f0e6":["d528fd7ae22865015b756e0a03832e2051de2a9c"],"f2126b84bd093fa3d921582a109a0ee578c28126":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","46083459332303d872db23d62e641cc6165fe93c"],"be320990bdc77e643388fa801e75017f19289c42":["1d48ddeb7e5d775a58702f6c2aaf0d501b12f0e6"],"ab68488225b6a6c357dda72ed11dedca9914a192":["1d48ddeb7e5d775a58702f6c2aaf0d501b12f0e6","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"ed32d8e4e6f80a018e7092cc35f204dcef1e87ec":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"004ec9e26487ae9b6205e790f8f77ef5e98d8daf":["d301cb76d81de80d07b44735622a04d49ed938eb"],"37fd782242ee26ee7b4ad18dddec17004c1da7ff":["9efa9c0fcd87863d1a86eed29d4304c11bc7d50a"],"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["4cc2a5e90b34bfc6bb00b6261a7956c2c022c275"],"54a122cfe3c6260dda11b43e6872d443ec0538b9":["1dca57049fb75fd60d90723d142769094a0402be"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["be320990bdc77e643388fa801e75017f19289c42"],"083df6f7d2115772bdcf0f53c63aa859e664c69e":["e5741c9fe46e3c5f38d297c778637ede3e2f2e66"],"e4d5fc8284faca306256427bbbb86017a32002cf":["cee0d276a5aee45373d831d0328b4544eec95754"],"d301cb76d81de80d07b44735622a04d49ed938eb":["28288370235ed02234a64753cdbf0c6ec096304a","bd7a2b4785d366164d3cd69f9948de6ff34d23a1"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"e5741c9fe46e3c5f38d297c778637ede3e2f2e66":["4901f8624f774c2b648e66567b63c59e901ac7c8"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["1d48ddeb7e5d775a58702f6c2aaf0d501b12f0e6"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["936cdd5882761db3b844afd6f84ab81cbb011a75","9efa9c0fcd87863d1a86eed29d4304c11bc7d50a"],"86184cf8c7654ee1badea2a629b8bc0487c7f690":["dc6e48afbb50ae0a22fa76e226f04fd585532938"],"1dca57049fb75fd60d90723d142769094a0402be":["1e9769bcabf28416689da7ec56a0c799b2a66b87"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["1e9769bcabf28416689da7ec56a0c799b2a66b87","1dca57049fb75fd60d90723d142769094a0402be"],"8b6f42dee5a60f46a3fdf3ab93b39aefb356e245":["a837c064b67fa63a9394136e31218b908cdcf783"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["ab68488225b6a6c357dda72ed11dedca9914a192"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["140be51d03394488536f4aacedace29f9b318347"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["b94236357aaa22b76c10629851fe4e376e0cea82"],"3e4fb176991e13ab85dfe62dceeb287dde115745":["c44cc06c26e456fe9c215072b79fce30babe3975"],"4cc2a5e90b34bfc6bb00b6261a7956c2c022c275":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["9ea4e4b34672fd15dc900deeb7085bfc1e2d4eb1"],"c44cc06c26e456fe9c215072b79fce30babe3975":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"1e9769bcabf28416689da7ec56a0c799b2a66b87":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["61c45e99cf6676da48f19d7511c73712ad39402b","a513b6a92751e54c76fb5447948c9e7d437163a7"],"9409650933cc688e77e565092a25e58adfc2e18d":["3278df77f7f499b55fdb79861c0641450444e7d0"],"3278df77f7f499b55fdb79861c0641450444e7d0":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a4d419cdab641a032f3e0d0fa8167a5252be0ae3":["85032ab568b3f50eabd577aaa994ba197db93758"],"b374d78db8148ec6796fdf37148b33897ab40a8c":["46083459332303d872db23d62e641cc6165fe93c"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["083df6f7d2115772bdcf0f53c63aa859e664c69e","c9767265f21f7d1246b13dd7e73e8a4ad88b4384"],"9ea4e4b34672fd15dc900deeb7085bfc1e2d4eb1":["2d629ca62e3b8ab6e29a127aebe213163d490413"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["86184cf8c7654ee1badea2a629b8bc0487c7f690"],"46083459332303d872db23d62e641cc6165fe93c":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"bd7a2b4785d366164d3cd69f9948de6ff34d23a1":["28288370235ed02234a64753cdbf0c6ec096304a"],"fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["e4d5fc8284faca306256427bbbb86017a32002cf"],"61c45e99cf6676da48f19d7511c73712ad39402b":["fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5"],"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["b627755385655c7cd3fb296f17593658805cf4d5"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["37a0f60745e53927c4c876cfe5b5a58170f0646c","1e9769bcabf28416689da7ec56a0c799b2a66b87"],"31d4861802ca404d78ca1d15f4550eec415b9199":["6e764e9a107f93be9fa3c922bc6a197b3eec387e","1e9769bcabf28416689da7ec56a0c799b2a66b87"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["e9017cf144952056066919f1ebc7897ff9bd71b1","d301cb76d81de80d07b44735622a04d49ed938eb"],"d528fd7ae22865015b756e0a03832e2051de2a9c":["ed32d8e4e6f80a018e7092cc35f204dcef1e87ec"],"28288370235ed02234a64753cdbf0c6ec096304a":["61c45e99cf6676da48f19d7511c73712ad39402b","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ed32d8e4e6f80a018e7092cc35f204dcef1e87ec","d528fd7ae22865015b756e0a03832e2051de2a9c"],"044244fb346dc6965d217fce709880d0e3bc2e9f":["c9767265f21f7d1246b13dd7e73e8a4ad88b4384"],"fc48b0cd4ac45fae4c9660d1828b3fbafffdd12e":["dff274f347ef702a3c44718e8801230a478a8f73"],"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["8b6f42dee5a60f46a3fdf3ab93b39aefb356e245"],"4901f8624f774c2b648e66567b63c59e901ac7c8":["41d8182fd2ab7b3bc57ffd7eb6491dddcb70c27d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["61c45e99cf6676da48f19d7511c73712ad39402b"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cee0d276a5aee45373d831d0328b4544eec95754"],"2d629ca62e3b8ab6e29a127aebe213163d490413":["a4d419cdab641a032f3e0d0fa8167a5252be0ae3"],"cee0d276a5aee45373d831d0328b4544eec95754":["044244fb346dc6965d217fce709880d0e3bc2e9f"],"b627755385655c7cd3fb296f17593658805cf4d5":["fc48b0cd4ac45fae4c9660d1828b3fbafffdd12e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2d4e985daefcb892b529223b478c47985fc3c483":["54a122cfe3c6260dda11b43e6872d443ec0538b9"],"a837c064b67fa63a9394136e31218b908cdcf783":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"c9767265f21f7d1246b13dd7e73e8a4ad88b4384":["083df6f7d2115772bdcf0f53c63aa859e664c69e"],"85032ab568b3f50eabd577aaa994ba197db93758":["2d4e985daefcb892b529223b478c47985fc3c483"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"b0b597c65628ca9e73913a07e81691f8229bae35":["99d6782cf9de8c5ffeb8d0b0f103b578205af068","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"9efa9c0fcd87863d1a86eed29d4304c11bc7d50a":["b94236357aaa22b76c10629851fe4e376e0cea82","37fd782242ee26ee7b4ad18dddec17004c1da7ff","6240b74b884c5587f2a4062dd27d6c32bf228889"],"b94236357aaa22b76c10629851fe4e376e0cea82":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"971c36528e9394e6a97c8703e4663f578e765eff":["41d8182fd2ab7b3bc57ffd7eb6491dddcb70c27d"],"41d8182fd2ab7b3bc57ffd7eb6491dddcb70c27d":["4901f8624f774c2b648e66567b63c59e901ac7c8"],"dff274f347ef702a3c44718e8801230a478a8f73":["fc48b0cd4ac45fae4c9660d1828b3fbafffdd12e"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["37a0f60745e53927c4c876cfe5b5a58170f0646c","dc6e48afbb50ae0a22fa76e226f04fd585532938"],"dc6e48afbb50ae0a22fa76e226f04fd585532938":["86184cf8c7654ee1badea2a629b8bc0487c7f690"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"140be51d03394488536f4aacedace29f9b318347":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"1d48ddeb7e5d775a58702f6c2aaf0d501b12f0e6":["be320990bdc77e643388fa801e75017f19289c42","ab68488225b6a6c357dda72ed11dedca9914a192","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"be320990bdc77e643388fa801e75017f19289c42":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"ab68488225b6a6c357dda72ed11dedca9914a192":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"004ec9e26487ae9b6205e790f8f77ef5e98d8daf":["9efa9c0fcd87863d1a86eed29d4304c11bc7d50a"],"ed32d8e4e6f80a018e7092cc35f204dcef1e87ec":["d528fd7ae22865015b756e0a03832e2051de2a9c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"37fd782242ee26ee7b4ad18dddec17004c1da7ff":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["3278df77f7f499b55fdb79861c0641450444e7d0"],"54a122cfe3c6260dda11b43e6872d443ec0538b9":["2d4e985daefcb892b529223b478c47985fc3c483"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5"],"083df6f7d2115772bdcf0f53c63aa859e664c69e":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","c9767265f21f7d1246b13dd7e73e8a4ad88b4384"],"d301cb76d81de80d07b44735622a04d49ed938eb":["9efa9c0fcd87863d1a86eed29d4304c11bc7d50a","004ec9e26487ae9b6205e790f8f77ef5e98d8daf","936cdd5882761db3b844afd6f84ab81cbb011a75"],"e4d5fc8284faca306256427bbbb86017a32002cf":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["ab68488225b6a6c357dda72ed11dedca9914a192"],"e5741c9fe46e3c5f38d297c778637ede3e2f2e66":["083df6f7d2115772bdcf0f53c63aa859e664c69e"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"86184cf8c7654ee1badea2a629b8bc0487c7f690":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"1dca57049fb75fd60d90723d142769094a0402be":["54a122cfe3c6260dda11b43e6872d443ec0538b9","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"8b6f42dee5a60f46a3fdf3ab93b39aefb356e245":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["dff274f347ef702a3c44718e8801230a478a8f73"],"c26f00b574427b55127e869b935845554afde1fa":["971c36528e9394e6a97c8703e4663f578e765eff"],"3e4fb176991e13ab85dfe62dceeb287dde115745":["140be51d03394488536f4aacedace29f9b318347"],"4cc2a5e90b34bfc6bb00b6261a7956c2c022c275":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["ed32d8e4e6f80a018e7092cc35f204dcef1e87ec"],"c44cc06c26e456fe9c215072b79fce30babe3975":["3e4fb176991e13ab85dfe62dceeb287dde115745","b0b597c65628ca9e73913a07e81691f8229bae35"],"1e9769bcabf28416689da7ec56a0c799b2a66b87":["1dca57049fb75fd60d90723d142769094a0402be","74f45af4339b0daf7a95c820ab88c1aea74fbce0","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"9409650933cc688e77e565092a25e58adfc2e18d":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"3278df77f7f499b55fdb79861c0641450444e7d0":["9409650933cc688e77e565092a25e58adfc2e18d"],"a4d419cdab641a032f3e0d0fa8167a5252be0ae3":["2d629ca62e3b8ab6e29a127aebe213163d490413"],"b374d78db8148ec6796fdf37148b33897ab40a8c":["a837c064b67fa63a9394136e31218b908cdcf783"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","1e9769bcabf28416689da7ec56a0c799b2a66b87","31d4861802ca404d78ca1d15f4550eec415b9199"],"46083459332303d872db23d62e641cc6165fe93c":["f2126b84bd093fa3d921582a109a0ee578c28126","b374d78db8148ec6796fdf37148b33897ab40a8c"],"bd7a2b4785d366164d3cd69f9948de6ff34d23a1":["d301cb76d81de80d07b44735622a04d49ed938eb"],"9ea4e4b34672fd15dc900deeb7085bfc1e2d4eb1":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5":["61c45e99cf6676da48f19d7511c73712ad39402b"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["f2126b84bd093fa3d921582a109a0ee578c28126","46083459332303d872db23d62e641cc6165fe93c"],"61c45e99cf6676da48f19d7511c73712ad39402b":["74aea047dff7f7c38a2d766827bd20d356f98c6a","28288370235ed02234a64753cdbf0c6ec096304a","a513b6a92751e54c76fb5447948c9e7d437163a7"],"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"d528fd7ae22865015b756e0a03832e2051de2a9c":["1d48ddeb7e5d775a58702f6c2aaf0d501b12f0e6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"28288370235ed02234a64753cdbf0c6ec096304a":["d301cb76d81de80d07b44735622a04d49ed938eb","bd7a2b4785d366164d3cd69f9948de6ff34d23a1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"044244fb346dc6965d217fce709880d0e3bc2e9f":["cee0d276a5aee45373d831d0328b4544eec95754"],"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["4cc2a5e90b34bfc6bb00b6261a7956c2c022c275"],"fc48b0cd4ac45fae4c9660d1828b3fbafffdd12e":["b627755385655c7cd3fb296f17593658805cf4d5"],"4901f8624f774c2b648e66567b63c59e901ac7c8":["e5741c9fe46e3c5f38d297c778637ede3e2f2e66"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"cee0d276a5aee45373d831d0328b4544eec95754":["aba371508186796cc6151d8223a5b4e16d02e26e","e4d5fc8284faca306256427bbbb86017a32002cf","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"2d629ca62e3b8ab6e29a127aebe213163d490413":["9ea4e4b34672fd15dc900deeb7085bfc1e2d4eb1"],"b627755385655c7cd3fb296f17593658805cf4d5":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2d4e985daefcb892b529223b478c47985fc3c483":["85032ab568b3f50eabd577aaa994ba197db93758"],"a837c064b67fa63a9394136e31218b908cdcf783":["8b6f42dee5a60f46a3fdf3ab93b39aefb356e245"],"c9767265f21f7d1246b13dd7e73e8a4ad88b4384":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","044244fb346dc6965d217fce709880d0e3bc2e9f"],"85032ab568b3f50eabd577aaa994ba197db93758":["a4d419cdab641a032f3e0d0fa8167a5252be0ae3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","f2126b84bd093fa3d921582a109a0ee578c28126","6240b74b884c5587f2a4062dd27d6c32bf228889","74f45af4339b0daf7a95c820ab88c1aea74fbce0","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}