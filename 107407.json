{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","commits":[{"id":"72ba12f3c327c892d69cfdd5ac98ec5cfc05ce10","date":1288892232,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#setIndexWriterConfig(IndexWriter,Config).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.setDefaultCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static void setIndexWriterConfig(IndexWriter writer, Config config) throws IOException {\n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      writer.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        writer.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.setDefaultCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      writer.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        writer.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      writer.setUseCompoundFile(isCompound);\n      writer.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n    }\n    writer.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      writer.setRAMBufferSizeMB(ramBuffer);\n      writer.setMaxBufferedDocs(maxBuffered);\n    } else {\n      writer.setMaxBufferedDocs(maxBuffered);\n      writer.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    String infoStreamVal = config.get(\"writer.info.stream\", null);\n    if (infoStreamVal != null) {\n      if (infoStreamVal.equals(\"SystemOut\")) {\n        writer.setInfoStream(System.out);\n      } else if (infoStreamVal.equals(\"SystemErr\")) {\n        writer.setInfoStream(System.err);\n      } else {\n        File f = new File(infoStreamVal).getAbsoluteFile();\n        writer.setInfoStream(new PrintStream(new BufferedOutputStream(new FileOutputStream(f))));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.setDefaultCodec(defaultCodec);\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.setDefaultCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#setIndexWriterConfig(IndexWriter,Config).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.setDefaultCodec(defaultCodec);\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static void setIndexWriterConfig(IndexWriter writer, Config config) throws IOException {\n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      writer.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        writer.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.setDefaultCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      writer.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        writer.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      writer.setUseCompoundFile(isCompound);\n      writer.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n    }\n    writer.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      writer.setRAMBufferSizeMB(ramBuffer);\n      writer.setMaxBufferedDocs(maxBuffered);\n    } else {\n      writer.setMaxBufferedDocs(maxBuffered);\n      writer.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    String infoStreamVal = config.get(\"writer.info.stream\", null);\n    if (infoStreamVal != null) {\n      if (infoStreamVal.equals(\"SystemOut\")) {\n        writer.setInfoStream(System.out);\n      } else if (infoStreamVal.equals(\"SystemErr\")) {\n        writer.setInfoStream(System.err);\n      } else {\n        File f = new File(infoStreamVal).getAbsoluteFile();\n        writer.setInfoStream(new PrintStream(new BufferedOutputStream(new FileOutputStream(f))));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13452165d8bf3d45a72f572aaed3c679735d3af2","date":1290101307,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.setDefaultCodec(defaultCodec);\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bce89597a7c3a4535b5b7f8100c2078e520f6e57","date":1290106041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.setDefaultCodec(defaultCodec);\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eeebcf026b55d8ce3ac8165210782b26cc4efe30","date":1290108396,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.setDefaultCodec(defaultCodec);\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.setDefaultCodec(defaultCodec);\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"/dev/null","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["3bb13258feba31ab676502787ab2e1779f129b7a","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["72ba12f3c327c892d69cfdd5ac98ec5cfc05ce10"],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eeebcf026b55d8ce3ac8165210782b26cc4efe30"],"72ba12f3c327c892d69cfdd5ac98ec5cfc05ce10":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["eeebcf026b55d8ce3ac8165210782b26cc4efe30"],"bce89597a7c3a4535b5b7f8100c2078e520f6e57":["13452165d8bf3d45a72f572aaed3c679735d3af2"],"13452165d8bf3d45a72f572aaed3c679735d3af2":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eeebcf026b55d8ce3ac8165210782b26cc4efe30":["bce89597a7c3a4535b5b7f8100c2078e520f6e57"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"3bb13258feba31ab676502787ab2e1779f129b7a":["85a883878c0af761245ab048babc63d099f835f3","eeebcf026b55d8ce3ac8165210782b26cc4efe30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["85a883878c0af761245ab048babc63d099f835f3","13452165d8bf3d45a72f572aaed3c679735d3af2"],"85a883878c0af761245ab048babc63d099f835f3":["3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"72ba12f3c327c892d69cfdd5ac98ec5cfc05ce10":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bce89597a7c3a4535b5b7f8100c2078e520f6e57":["eeebcf026b55d8ce3ac8165210782b26cc4efe30"],"13452165d8bf3d45a72f572aaed3c679735d3af2":["bce89597a7c3a4535b5b7f8100c2078e520f6e57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","72ba12f3c327c892d69cfdd5ac98ec5cfc05ce10"],"eeebcf026b55d8ce3ac8165210782b26cc4efe30":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ecc11368dc265bfdad90214f8bf5da99016ab1e2","3bb13258feba31ab676502787ab2e1779f129b7a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["70ad682703b8585f5d0a637efec044d57ec05efb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}