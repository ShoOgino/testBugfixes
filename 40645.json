{"path":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListWriter#bufferSkip(int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListWriter#bufferSkip(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Writes the current skip data to the buffers. The current document frequency determines\n   * the max level is skip data is to be written to. \n   * \n   * @param df the current document frequency \n   * @throws IOException\n   */\n  public void bufferSkip(int df) throws IOException {\n    int numLevels;\n   \n    // determine max level\n    for (numLevels = 0; (df % skipInterval) == 0 && numLevels < numberOfSkipLevels; df /= skipInterval) {\n      numLevels++;\n    }\n    \n    long childPointer = 0;\n    \n    for (int level = 0; level < numLevels; level++) {\n      writeSkipData(level, skipBuffer[level]);\n      \n      long newChildPointer = skipBuffer[level].getFilePointer();\n      \n      if (level != 0) {\n        // store child pointers for all levels except the lowest\n        skipBuffer[level].writeVLong(childPointer);\n      }\n      \n      //remember the childPointer for the next level\n      childPointer = newChildPointer;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter#bufferSkip(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListWriter#bufferSkip(int).mjava","sourceNew":"  /**\n   * Writes the current skip data to the buffers. The current document frequency determines\n   * the max level is skip data is to be written to. \n   * \n   * @param df the current document frequency \n   * @throws IOException\n   */\n  public void bufferSkip(int df) throws IOException {\n    int numLevels;\n   \n    // determine max level\n    for (numLevels = 0; (df % skipInterval) == 0 && numLevels < numberOfSkipLevels; df /= skipInterval) {\n      numLevels++;\n    }\n    \n    long childPointer = 0;\n    \n    for (int level = 0; level < numLevels; level++) {\n      writeSkipData(level, skipBuffer[level]);\n      \n      long newChildPointer = skipBuffer[level].getFilePointer();\n      \n      if (level != 0) {\n        // store child pointers for all levels except the lowest\n        skipBuffer[level].writeVLong(childPointer);\n      }\n      \n      //remember the childPointer for the next level\n      childPointer = newChildPointer;\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes the current skip data to the buffers. The current document frequency determines\n   * the max level is skip data is to be written to. \n   * \n   * @param df the current document frequency \n   * @throws IOException\n   */\n  public void bufferSkip(int df) throws IOException {\n    int numLevels;\n   \n    // determine max level\n    for (numLevels = 0; (df % skipInterval) == 0 && numLevels < numberOfSkipLevels; df /= skipInterval) {\n      numLevels++;\n    }\n    \n    long childPointer = 0;\n    \n    for (int level = 0; level < numLevels; level++) {\n      writeSkipData(level, skipBuffer[level]);\n      \n      long newChildPointer = skipBuffer[level].getFilePointer();\n      \n      if (level != 0) {\n        // store child pointers for all levels except the lowest\n        skipBuffer[level].writeVLong(childPointer);\n      }\n      \n      //remember the childPointer for the next level\n      childPointer = newChildPointer;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}