{"path":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCloneThreadSafety().mjava","commits":[{"id":"441013c453e5dc822f80c10f014c221e7156d985","date":1440081570,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCloneThreadSafety().mjava","pathOld":"/dev/null","sourceNew":"  public void testCloneThreadSafety() throws Exception {\n    Directory dir = getDirectory(createTempDir());\n    IndexOutput out = dir.createOutput(\"randombytes\", IOContext.DEFAULT);\n\n    // Write file with at least 20 K random bytes:\n    final int numBytes = atLeast(20*1024);\n    final byte[] bytes = new byte[numBytes];\n    random().nextBytes(bytes);\n    out.writeBytes(bytes, 0, bytes.length);\n    out.close();\n\n    // Then read the bytes back at random seek points from multiple threads:\n    final IndexInput in = dir.openInput(\"randombytes\", IOContext.DEFAULT);\n\n    int numThreads = 4;\n    Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int numIters = atLeast(1000);\n            byte[] scratch = new byte[numBytes];\n            for(int iter=0;iter<numIters;iter++) {\n              // First thread uses the original IndexInput, all other threads use clone:\n              IndexInput myIn;\n              if (finalI == 0) {\n                myIn = in;\n              } else {\n                myIn = in.clone();\n              }\n              int spot = random().nextInt(numBytes/2);\n              try {\n                myIn.seek(spot);\n                int length = numBytes-spot;\n                myIn.readBytes(scratch, 0, length);\n                for(int i=0;i<length;i++) {\n                  assertEquals(bytes[spot+i], scratch[i]);\n                }\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b28c8c24efe925d64d643c57b569d4fdf8616e9","date":1440170643,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCloneThreadSafety().mjava","sourceNew":null,"sourceOld":"  public void testCloneThreadSafety() throws Exception {\n    Directory dir = getDirectory(createTempDir());\n    IndexOutput out = dir.createOutput(\"randombytes\", IOContext.DEFAULT);\n\n    // Write file with at least 20 K random bytes:\n    final int numBytes = atLeast(20*1024);\n    final byte[] bytes = new byte[numBytes];\n    random().nextBytes(bytes);\n    out.writeBytes(bytes, 0, bytes.length);\n    out.close();\n\n    // Then read the bytes back at random seek points from multiple threads:\n    final IndexInput in = dir.openInput(\"randombytes\", IOContext.DEFAULT);\n\n    int numThreads = 4;\n    Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int numIters = atLeast(1000);\n            byte[] scratch = new byte[numBytes];\n            for(int iter=0;iter<numIters;iter++) {\n              // First thread uses the original IndexInput, all other threads use clone:\n              IndexInput myIn;\n              if (finalI == 0) {\n                myIn = in;\n              } else {\n                myIn = in.clone();\n              }\n              int spot = random().nextInt(numBytes/2);\n              try {\n                myIn.seek(spot);\n                int length = numBytes-spot;\n                myIn.readBytes(scratch, 0, length);\n                for(int i=0;i<length;i++) {\n                  assertEquals(bytes[spot+i], scratch[i]);\n                }\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0b28c8c24efe925d64d643c57b569d4fdf8616e9":["441013c453e5dc822f80c10f014c221e7156d985"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"441013c453e5dc822f80c10f014c221e7156d985":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0b28c8c24efe925d64d643c57b569d4fdf8616e9"]},"commit2Childs":{"0b28c8c24efe925d64d643c57b569d4fdf8616e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["441013c453e5dc822f80c10f014c221e7156d985"],"441013c453e5dc822f80c10f014c221e7156d985":["0b28c8c24efe925d64d643c57b569d4fdf8616e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}