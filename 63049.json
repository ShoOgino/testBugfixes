{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"8497bb4f9de61b5520423bd9af88ea11a6e109e7","date":1393245090,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n\n    if(node== null){\n      node = getNodesForNewShard(clusterState,collection, coll.getSlices().size() , coll.getInt(MAX_SHARDS_PER_NODE, 1),coll.getInt(REPLICATION_FACTOR, 1),null).get(0).nodeName;\n      log.info(\"node not provided , Identified {} for creating new replica\",node);\n    }\n\n\n    if (!clusterState.liveNodesContain(node))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;)  {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.SHARD_ID_PROP, shard,\n          ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n          ZkStateReader.BASE_URL_PROP,zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n    }\n\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null)  {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null)  {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else  {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null)  {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null)  {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n\n    sendShardRequest(node, params);\n\n    collectShardResponses(results, true,\n      \"ADDREPLICA failed to create replica\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["15e5c6e9cbb262742d1c0e5a3b42c87f97918e1d","3fd3cdfbce4b551bb8ca4678682a5a891d0890ca"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"840fc95f31a25d020cd825e880018bcfa0bacc71","date":1393483822,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n\n    if(node== null){\n      node = getNodesForNewShard(clusterState,collection, coll.getSlices().size() , coll.getInt(MAX_SHARDS_PER_NODE, 1),coll.getInt(REPLICATION_FACTOR, 1),null).get(0).nodeName;\n      log.info(\"node not provided , Identified {} for creating new replica\",node);\n    }\n\n\n    if (!clusterState.liveNodesContain(node))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;)  {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.SHARD_ID_PROP, shard,\n          ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n          ZkStateReader.BASE_URL_PROP,zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME, lookupReplicas(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null)  {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null)  {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else  {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null)  {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null)  {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n\n    sendShardRequest(node, params);\n\n    collectShardResponses(results, true,\n      \"ADDREPLICA failed to create replica\");\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n\n    if(node== null){\n      node = getNodesForNewShard(clusterState,collection, coll.getSlices().size() , coll.getInt(MAX_SHARDS_PER_NODE, 1),coll.getInt(REPLICATION_FACTOR, 1),null).get(0).nodeName;\n      log.info(\"node not provided , Identified {} for creating new replica\",node);\n    }\n\n\n    if (!clusterState.liveNodesContain(node))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;)  {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.SHARD_ID_PROP, shard,\n          ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n          ZkStateReader.BASE_URL_PROP,zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n    }\n\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null)  {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null)  {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else  {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null)  {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null)  {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n\n    sendShardRequest(node, params);\n\n    collectShardResponses(results, true,\n      \"ADDREPLICA failed to create replica\");\n  }\n\n","bugFix":null,"bugIntro":["eb4db141b31e99d2285436da1428411ed5501f56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n\n    if(node== null){\n      node = getNodesForNewShard(clusterState,collection, coll.getSlices().size() , coll.getInt(MAX_SHARDS_PER_NODE, 1),coll.getInt(REPLICATION_FACTOR, 1),null).get(0).nodeName;\n      log.info(\"node not provided , Identified {} for creating new replica\",node);\n    }\n\n\n    if (!clusterState.liveNodesContain(node))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;)  {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.SHARD_ID_PROP, shard,\n          ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n          ZkStateReader.BASE_URL_PROP,zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME, lookupReplicas(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null)  {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null)  {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else  {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null)  {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null)  {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n\n    sendShardRequest(node, params);\n\n    collectShardResponses(results, true,\n      \"ADDREPLICA failed to create replica\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb4db141b31e99d2285436da1428411ed5501f56","date":1394114795,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n\n    if(node== null){\n      node = getNodesForNewShard(clusterState,collection, coll.getSlices().size() , coll.getInt(MAX_SHARDS_PER_NODE, 1),coll.getInt(REPLICATION_FACTOR, 1),null).get(0).nodeName;\n      log.info(\"node not provided , Identified {} for creating new replica\",node);\n    }\n\n\n    if (!clusterState.liveNodesContain(node))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;)  {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.SHARD_ID_PROP, shard,\n          ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n          ZkStateReader.BASE_URL_PROP,zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null)  {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null)  {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else  {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null)  {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null)  {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n\n    sendShardRequest(node, params);\n\n    collectShardResponses(results, true,\n      \"ADDREPLICA failed to create replica\");\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n\n    if(node== null){\n      node = getNodesForNewShard(clusterState,collection, coll.getSlices().size() , coll.getInt(MAX_SHARDS_PER_NODE, 1),coll.getInt(REPLICATION_FACTOR, 1),null).get(0).nodeName;\n      log.info(\"node not provided , Identified {} for creating new replica\",node);\n    }\n\n\n    if (!clusterState.liveNodesContain(node))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;)  {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.SHARD_ID_PROP, shard,\n          ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n          ZkStateReader.BASE_URL_PROP,zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME, lookupReplicas(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null)  {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null)  {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else  {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null)  {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null)  {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n\n    sendShardRequest(node, params);\n\n    collectShardResponses(results, true,\n      \"ADDREPLICA failed to create replica\");\n  }\n\n","bugFix":["840fc95f31a25d020cd825e880018bcfa0bacc71"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b51e891605604cf911ab579fb28c49b26749f93","date":1394126258,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n\n    if(node== null){\n      node = getNodesForNewShard(clusterState,collection, coll.getSlices().size() , coll.getInt(MAX_SHARDS_PER_NODE, 1),coll.getInt(REPLICATION_FACTOR, 1),null).get(0).nodeName;\n      log.info(\"node not provided , Identified {} for creating new replica\",node);\n    }\n\n\n    if (!clusterState.liveNodesContain(node))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;)  {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.SHARD_ID_PROP, shard,\n          ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n          ZkStateReader.BASE_URL_PROP,zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null)  {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null)  {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else  {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null)  {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null)  {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n\n    sendShardRequest(node, params);\n\n    collectShardResponses(results, true,\n      \"ADDREPLICA failed to create replica\");\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n\n    if(node== null){\n      node = getNodesForNewShard(clusterState,collection, coll.getSlices().size() , coll.getInt(MAX_SHARDS_PER_NODE, 1),coll.getInt(REPLICATION_FACTOR, 1),null).get(0).nodeName;\n      log.info(\"node not provided , Identified {} for creating new replica\",node);\n    }\n\n\n    if (!clusterState.liveNodesContain(node))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;)  {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.SHARD_ID_PROP, shard,\n          ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n          ZkStateReader.BASE_URL_PROP,zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME, lookupReplicas(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null)  {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null)  {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else  {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null)  {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null)  {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n\n    sendShardRequest(node, params);\n\n    collectShardResponses(results, true,\n      \"ADDREPLICA failed to create replica\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n\n    if(node== null){\n      node = getNodesForNewShard(clusterState,collection, coll.getSlices().size() , coll.getInt(MAX_SHARDS_PER_NODE, 1),coll.getInt(REPLICATION_FACTOR, 1),null).get(0).nodeName;\n      log.info(\"node not provided , Identified {} for creating new replica\",node);\n    }\n\n\n    if (!clusterState.liveNodesContain(node))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;)  {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.SHARD_ID_PROP, shard,\n          ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n          ZkStateReader.BASE_URL_PROP,zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null)  {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null)  {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else  {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null)  {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null)  {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n\n    sendShardRequest(node, params);\n\n    collectShardResponses(results, true,\n      \"ADDREPLICA failed to create replica\");\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n\n    if(node== null){\n      node = getNodesForNewShard(clusterState,collection, coll.getSlices().size() , coll.getInt(MAX_SHARDS_PER_NODE, 1),coll.getInt(REPLICATION_FACTOR, 1),null).get(0).nodeName;\n      log.info(\"node not provided , Identified {} for creating new replica\",node);\n    }\n\n\n    if (!clusterState.liveNodesContain(node))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;)  {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.SHARD_ID_PROP, shard,\n          ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n          ZkStateReader.BASE_URL_PROP,zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME, lookupReplicas(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null)  {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null)  {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else  {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null)  {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null)  {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n\n    sendShardRequest(node, params);\n\n    collectShardResponses(results, true,\n      \"ADDREPLICA failed to create replica\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f26f74e4969851a019d28f10315cb1c77786f22","date":1400539241,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    if(node== null){\n      node = getNodesForNewShard(clusterState,collection, coll.getSlices().size() , coll.getInt(MAX_SHARDS_PER_NODE, 1),coll.getInt(REPLICATION_FACTOR, 1),null).get(0).nodeName;\n      log.info(\"node not provided , Identified {} for creating new replica\",node);\n    }\n\n\n    if (!clusterState.liveNodesContain(node))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;)  {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.SHARD_ID_PROP, shard,\n          ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n          ZkStateReader.BASE_URL_PROP,zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null)  {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null)  {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else  {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null)  {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null)  {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n\n    sendShardRequest(node, params, shardHandler);\n\n    collectShardResponses(results, true,\n        \"ADDREPLICA failed to create replica\", shardHandler);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n\n    if(node== null){\n      node = getNodesForNewShard(clusterState,collection, coll.getSlices().size() , coll.getInt(MAX_SHARDS_PER_NODE, 1),coll.getInt(REPLICATION_FACTOR, 1),null).get(0).nodeName;\n      log.info(\"node not provided , Identified {} for creating new replica\",node);\n    }\n\n\n    if (!clusterState.liveNodesContain(node))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;)  {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.SHARD_ID_PROP, shard,\n          ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n          ZkStateReader.BASE_URL_PROP,zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null)  {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null)  {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else  {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null)  {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null)  {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n\n    sendShardRequest(node, params);\n\n    collectShardResponses(results, true,\n      \"ADDREPLICA failed to create replica\");\n  }\n\n","bugFix":null,"bugIntro":["ee31282189f924712ed9ad83e3073e0c207a1a53"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    if(node== null){\n      node = getNodesForNewShard(clusterState,collection, coll.getSlices().size() , coll.getInt(MAX_SHARDS_PER_NODE, 1),coll.getInt(REPLICATION_FACTOR, 1),null).get(0).nodeName;\n      log.info(\"node not provided , Identified {} for creating new replica\",node);\n    }\n\n\n    if (!clusterState.liveNodesContain(node))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;)  {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.SHARD_ID_PROP, shard,\n          ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n          ZkStateReader.BASE_URL_PROP,zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null)  {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null)  {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else  {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null)  {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null)  {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n\n    sendShardRequest(node, params, shardHandler);\n\n    collectShardResponses(results, true,\n        \"ADDREPLICA failed to create replica\", shardHandler);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n\n    if(node== null){\n      node = getNodesForNewShard(clusterState,collection, coll.getSlices().size() , coll.getInt(MAX_SHARDS_PER_NODE, 1),coll.getInt(REPLICATION_FACTOR, 1),null).get(0).nodeName;\n      log.info(\"node not provided , Identified {} for creating new replica\",node);\n    }\n\n\n    if (!clusterState.liveNodesContain(node))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;)  {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.SHARD_ID_PROP, shard,\n          ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n          ZkStateReader.BASE_URL_PROP,zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null)  {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null)  {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else  {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null)  {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null)  {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n\n    sendShardRequest(node, params);\n\n    collectShardResponses(results, true,\n      \"ADDREPLICA failed to create replica\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e5c6e9cbb262742d1c0e5a3b42c87f97918e1d","date":1400759887,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String asyncId = message.getStr(\"async\");\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    if (node == null) {\n      node = getNodesForNewShard(clusterState, collection, coll.getSlices().size(), coll.getInt(MAX_SHARDS_PER_NODE, 1), coll.getInt(REPLICATION_FACTOR, 1), null).get(0).nodeName;\n      log.info(\"Node not provided, Identified {} for creating new replica\", node);\n    }\n\n\n    if (!clusterState.liveNodesContain(node))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;)  {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.SHARD_ID_PROP, shard,\n          ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n          ZkStateReader.BASE_URL_PROP,zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null)  {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null)  {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else  {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null)  {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null)  {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n\n    // For tracking async calls.\n    HashMap<String, String> requestMap = new HashMap<>();\n    setupAsyncRequest(asyncId, requestMap, params, node);\n    sendShardRequest(node, params, shardHandler);\n\n    collectShardResponses(results, true,\n        \"ADDREPLICA failed to create replica\", shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    if(node== null){\n      node = getNodesForNewShard(clusterState,collection, coll.getSlices().size() , coll.getInt(MAX_SHARDS_PER_NODE, 1),coll.getInt(REPLICATION_FACTOR, 1),null).get(0).nodeName;\n      log.info(\"node not provided , Identified {} for creating new replica\",node);\n    }\n\n\n    if (!clusterState.liveNodesContain(node))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;)  {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.SHARD_ID_PROP, shard,\n          ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n          ZkStateReader.BASE_URL_PROP,zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null)  {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null)  {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else  {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null)  {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null)  {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n\n    sendShardRequest(node, params, shardHandler);\n\n    collectShardResponses(results, true,\n        \"ADDREPLICA failed to create replica\", shardHandler);\n  }\n\n","bugFix":["8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"bugIntro":["ee31282189f924712ed9ad83e3073e0c207a1a53"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String asyncId = message.getStr(\"async\");\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    if (node == null) {\n      node = getNodesForNewShard(clusterState, collection, coll.getSlices().size(), coll.getInt(ZkStateReader.MAX_SHARDS_PER_NODE, 1), coll.getInt(ZkStateReader.REPLICATION_FACTOR, 1), null).get(0).nodeName;\n      log.info(\"Node not provided, Identified {} for creating new replica\", node);\n    }\n\n\n    if (!clusterState.liveNodesContain(node))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;)  {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.SHARD_ID_PROP, shard,\n          ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n          ZkStateReader.BASE_URL_PROP,zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null)  {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null)  {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else  {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null)  {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null)  {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n\n    // For tracking async calls.\n    HashMap<String, String> requestMap = new HashMap<>();\n    setupAsyncRequest(asyncId, requestMap, params, node);\n    sendShardRequest(node, params, shardHandler);\n\n    collectShardResponses(results, true,\n        \"ADDREPLICA failed to create replica\", shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String asyncId = message.getStr(\"async\");\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    if (node == null) {\n      node = getNodesForNewShard(clusterState, collection, coll.getSlices().size(), coll.getInt(MAX_SHARDS_PER_NODE, 1), coll.getInt(REPLICATION_FACTOR, 1), null).get(0).nodeName;\n      log.info(\"Node not provided, Identified {} for creating new replica\", node);\n    }\n\n\n    if (!clusterState.liveNodesContain(node))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;)  {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.SHARD_ID_PROP, shard,\n          ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n          ZkStateReader.BASE_URL_PROP,zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null)  {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null)  {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else  {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null)  {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null)  {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n\n    // For tracking async calls.\n    HashMap<String, String> requestMap = new HashMap<>();\n    setupAsyncRequest(asyncId, requestMap, params, node);\n    sendShardRequest(node, params, shardHandler);\n\n    collectShardResponses(results, true,\n        \"ADDREPLICA failed to create replica\", shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30c688f7052130cef7bd419c85e3c5be214f7b9e","date":1411018984,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String asyncId = message.getStr(\"async\");\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    if (node == null) {\n      node = getNodesForNewShard(clusterState, collection, coll.getSlices().size(), coll.getInt(ZkStateReader.MAX_SHARDS_PER_NODE, 1), coll.getInt(ZkStateReader.REPLICATION_FACTOR, 1), null).get(0).nodeName;\n      log.info(\"Node not provided, Identified {} for creating new replica\", node);\n    }\n\n\n    if (!clusterState.liveNodesContain(node))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;)  {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.SHARD_ID_PROP, shard,\n          ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n          ZkStateReader.BASE_URL_PROP,zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null)  {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null)  {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else  {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null)  {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null)  {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n\n    // For tracking async calls.\n    HashMap<String, String> requestMap = new HashMap<>();\n    setupAsyncRequest(asyncId, requestMap, params, node);\n    sendShardRequest(node, params, shardHandler);\n\n    collectShardResponses(results, true,\n        \"ADDREPLICA failed to create replica\", shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String asyncId = message.getStr(\"async\");\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    if (node == null) {\n      node = getNodesForNewShard(clusterState, collection, coll.getSlices().size(), coll.getInt(ZkStateReader.MAX_SHARDS_PER_NODE, 1), coll.getInt(ZkStateReader.REPLICATION_FACTOR, 1), null).get(0).nodeName;\n      log.info(\"Node not provided, Identified {} for creating new replica\", node);\n    }\n\n\n    if (!clusterState.liveNodesContain(node))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;)  {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.SHARD_ID_PROP, shard,\n          ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n          ZkStateReader.BASE_URL_PROP,zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null)  {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null)  {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else  {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null)  {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null)  {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n\n    // For tracking async calls.\n    HashMap<String, String> requestMap = new HashMap<>();\n    setupAsyncRequest(asyncId, requestMap, params, node);\n    sendShardRequest(node, params, shardHandler);\n\n    collectShardResponses(results, true,\n        \"ADDREPLICA failed to create replica\", shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ee31282189f924712ed9ad83e3073e0c207a1a53","date":1427223880,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String asyncId = message.getStr(\"async\");\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    if (node == null) {\n      node = getNodesForNewShard(clusterState, collection, coll.getSlices().size(), coll.getInt(ZkStateReader.MAX_SHARDS_PER_NODE, 1), coll.getInt(ZkStateReader.REPLICATION_FACTOR, 1), null).get(0).nodeName;\n      log.info(\"Node not provided, Identified {} for creating new replica\", node);\n    }\n\n\n    if (!clusterState.liveNodesContain(node))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;)  {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.SHARD_ID_PROP, shard,\n          ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n          ZkStateReader.BASE_URL_PROP,zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null)  {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null)  {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else  {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null)  {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null)  {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n\n    // For tracking async calls.\n    HashMap<String, String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    collectShardResponses(results, true,\n        \"ADDREPLICA failed to create replica\", shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String asyncId = message.getStr(\"async\");\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    if (node == null) {\n      node = getNodesForNewShard(clusterState, collection, coll.getSlices().size(), coll.getInt(ZkStateReader.MAX_SHARDS_PER_NODE, 1), coll.getInt(ZkStateReader.REPLICATION_FACTOR, 1), null).get(0).nodeName;\n      log.info(\"Node not provided, Identified {} for creating new replica\", node);\n    }\n\n\n    if (!clusterState.liveNodesContain(node))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;)  {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.SHARD_ID_PROP, shard,\n          ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n          ZkStateReader.BASE_URL_PROP,zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null)  {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null)  {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else  {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null)  {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null)  {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n\n    // For tracking async calls.\n    HashMap<String, String> requestMap = new HashMap<>();\n    setupAsyncRequest(asyncId, requestMap, params, node);\n    sendShardRequest(node, params, shardHandler);\n\n    collectShardResponses(results, true,\n        \"ADDREPLICA failed to create replica\", shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","bugFix":["6f26f74e4969851a019d28f10315cb1c77786f22","15e5c6e9cbb262742d1c0e5a3b42c87f97918e1d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dbf528c0e702c5cbd1339b2da1cdc823fd44a925","date":1427230904,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Map previousMDCContext = MDC.getCopyOfContextMap();\n    MDCUtils.setMDC(collection, shard, null, coreName);\n    try {\n      String asyncId = message.getStr(\"async\");\n\n      DocCollection coll = clusterState.getCollection(collection);\n      if (coll == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n      }\n      if (coll.getSlice(shard) == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n      }\n      ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n      if (node == null) {\n        node = getNodesForNewShard(clusterState, collection, coll.getSlices().size(), coll.getInt(ZkStateReader.MAX_SHARDS_PER_NODE, 1), coll.getInt(ZkStateReader.REPLICATION_FACTOR, 1), null).get(0).nodeName;\n        log.info(\"Node not provided, Identified {} for creating new replica\", node);\n      }\n\n\n      if (!clusterState.liveNodesContain(node)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n      }\n      if (coreName == null) {\n        // assign a name to this core\n        Slice slice = coll.getSlice(shard);\n        int replicaNum = slice.getReplicas().size();\n        for (; ; ) {\n          String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n          boolean exists = false;\n          for (Replica replica : slice.getReplicas()) {\n            if (replicaName.equals(replica.getStr(\"core\"))) {\n              exists = true;\n              break;\n            }\n          }\n          if (exists) replicaNum++;\n          else break;\n        }\n        coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n      if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node));\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n        params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n      }\n\n\n      String configName = zkStateReader.readConfigName(collection);\n      String routeKey = message.getStr(ShardParams._ROUTE_);\n      String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n      String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, coreName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collection);\n      if (shard != null) {\n        params.set(CoreAdminParams.SHARD, shard);\n      } else if (routeKey != null) {\n        Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n        if (slices.isEmpty()) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n        } else {\n          params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n        }\n      } else  {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n      }\n      if (dataDir != null) {\n        params.set(CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (instanceDir != null) {\n        params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n      }\n      addPropertyParams(message, params);\n\n      // For tracking async calls.\n      HashMap<String, String> requestMap = new HashMap<>();\n      sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n      collectShardResponses(results, true,\n          \"ADDREPLICA failed to create replica\", shardHandler);\n\n      completeAsyncRequest(asyncId, requestMap, results);\n    } finally {\n      MDCUtils.cleanupMDC(previousMDCContext);\n    }\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String asyncId = message.getStr(\"async\");\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    if (node == null) {\n      node = getNodesForNewShard(clusterState, collection, coll.getSlices().size(), coll.getInt(ZkStateReader.MAX_SHARDS_PER_NODE, 1), coll.getInt(ZkStateReader.REPLICATION_FACTOR, 1), null).get(0).nodeName;\n      log.info(\"Node not provided, Identified {} for creating new replica\", node);\n    }\n\n\n    if (!clusterState.liveNodesContain(node))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;)  {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.SHARD_ID_PROP, shard,\n          ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n          ZkStateReader.BASE_URL_PROP,zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null)  {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null)  {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else  {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null)  {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null)  {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n\n    // For tracking async calls.\n    HashMap<String, String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    collectShardResponses(results, true,\n        \"ADDREPLICA failed to create replica\", shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Map previousMDCContext = MDC.getCopyOfContextMap();\n    MDCUtils.setMDC(collection, shard, null, coreName);\n    try {\n      String asyncId = message.getStr(\"async\");\n\n      DocCollection coll = clusterState.getCollection(collection);\n      if (coll == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n      }\n      if (coll.getSlice(shard) == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n      }\n      ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n      if (node == null) {\n        node = getNodesForNewShard(clusterState, collection, coll.getSlices().size(), coll.getInt(ZkStateReader.MAX_SHARDS_PER_NODE, 1), coll.getInt(ZkStateReader.REPLICATION_FACTOR, 1), null).get(0).nodeName;\n        log.info(\"Node not provided, Identified {} for creating new replica\", node);\n      }\n\n\n      if (!clusterState.liveNodesContain(node)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n      }\n      if (coreName == null) {\n        // assign a name to this core\n        Slice slice = coll.getSlice(shard);\n        int replicaNum = slice.getReplicas().size();\n        for (; ; ) {\n          String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n          boolean exists = false;\n          for (Replica replica : slice.getReplicas()) {\n            if (replicaName.equals(replica.getStr(\"core\"))) {\n              exists = true;\n              break;\n            }\n          }\n          if (exists) replicaNum++;\n          else break;\n        }\n        coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n      if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node));\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n        params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n      }\n\n\n      String configName = zkStateReader.readConfigName(collection);\n      String routeKey = message.getStr(ShardParams._ROUTE_);\n      String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n      String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, coreName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collection);\n      if (shard != null) {\n        params.set(CoreAdminParams.SHARD, shard);\n      } else if (routeKey != null) {\n        Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n        if (slices.isEmpty()) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n        } else {\n          params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n        }\n      } else  {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n      }\n      if (dataDir != null) {\n        params.set(CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (instanceDir != null) {\n        params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n      }\n      addPropertyParams(message, params);\n\n      // For tracking async calls.\n      HashMap<String, String> requestMap = new HashMap<>();\n      sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n      collectShardResponses(results, true,\n          \"ADDREPLICA failed to create replica\", shardHandler);\n\n      completeAsyncRequest(asyncId, requestMap, results);\n    } finally {\n      MDCUtils.cleanupMDC(previousMDCContext);\n    }\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String asyncId = message.getStr(\"async\");\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    if (node == null) {\n      node = getNodesForNewShard(clusterState, collection, coll.getSlices().size(), coll.getInt(ZkStateReader.MAX_SHARDS_PER_NODE, 1), coll.getInt(ZkStateReader.REPLICATION_FACTOR, 1), null).get(0).nodeName;\n      log.info(\"Node not provided, Identified {} for creating new replica\", node);\n    }\n\n\n    if (!clusterState.liveNodesContain(node))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;)  {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.SHARD_ID_PROP, shard,\n          ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n          ZkStateReader.BASE_URL_PROP,zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null)  {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null)  {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else  {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null)  {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null)  {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n\n    // For tracking async calls.\n    HashMap<String, String> requestMap = new HashMap<>();\n    setupAsyncRequest(asyncId, requestMap, params, node);\n    sendShardRequest(node, params, shardHandler);\n\n    collectShardResponses(results, true,\n        \"ADDREPLICA failed to create replica\", shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Map previousMDCContext = MDC.getCopyOfContextMap();\n    MDCUtils.setMDC(collection, shard, null, coreName);\n    try {\n      String asyncId = message.getStr(\"async\");\n\n      DocCollection coll = clusterState.getCollection(collection);\n      if (coll == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n      }\n      if (coll.getSlice(shard) == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n      }\n      ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n      if (node == null) {\n        node = getNodesForNewShard(clusterState, collection, coll.getSlices().size(), coll.getInt(ZkStateReader.MAX_SHARDS_PER_NODE, 1), coll.getInt(ZkStateReader.REPLICATION_FACTOR, 1), null).get(0).nodeName;\n        log.info(\"Node not provided, Identified {} for creating new replica\", node);\n      }\n\n\n      if (!clusterState.liveNodesContain(node)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n      }\n      if (coreName == null) {\n        // assign a name to this core\n        Slice slice = coll.getSlice(shard);\n        int replicaNum = slice.getReplicas().size();\n        for (; ; ) {\n          String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n          boolean exists = false;\n          for (Replica replica : slice.getReplicas()) {\n            if (replicaName.equals(replica.getStr(\"core\"))) {\n              exists = true;\n              break;\n            }\n          }\n          if (exists) replicaNum++;\n          else break;\n        }\n        coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n      if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node));\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n        params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n      }\n\n\n      String configName = zkStateReader.readConfigName(collection);\n      String routeKey = message.getStr(ShardParams._ROUTE_);\n      String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n      String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, coreName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collection);\n      if (shard != null) {\n        params.set(CoreAdminParams.SHARD, shard);\n      } else if (routeKey != null) {\n        Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n        if (slices.isEmpty()) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n        } else {\n          params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n        }\n      } else  {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n      }\n      if (dataDir != null) {\n        params.set(CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (instanceDir != null) {\n        params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n      }\n      addPropertyParams(message, params);\n\n      // For tracking async calls.\n      HashMap<String, String> requestMap = new HashMap<>();\n      sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n      collectShardResponses(results, true,\n          \"ADDREPLICA failed to create replica\", shardHandler);\n\n      completeAsyncRequest(asyncId, requestMap, results);\n    } finally {\n      MDCUtils.cleanupMDC(previousMDCContext);\n    }\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Map previousMDCContext = MDC.getCopyOfContextMap();\n    MDCUtils.setMDC(collection, shard, null, coreName);\n    try {\n      String asyncId = message.getStr(\"async\");\n\n      DocCollection coll = clusterState.getCollection(collection);\n      if (coll == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n      }\n      if (coll.getSlice(shard) == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n      }\n      ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n      if (node == null) {\n        node = getNodesForNewShard(clusterState, collection, coll.getSlices().size(), coll.getInt(ZkStateReader.MAX_SHARDS_PER_NODE, 1), coll.getInt(ZkStateReader.REPLICATION_FACTOR, 1), null).get(0).nodeName;\n        log.info(\"Node not provided, Identified {} for creating new replica\", node);\n      }\n\n\n      if (!clusterState.liveNodesContain(node)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n      }\n      if (coreName == null) {\n        // assign a name to this core\n        Slice slice = coll.getSlice(shard);\n        int replicaNum = slice.getReplicas().size();\n        for (; ; ) {\n          String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n          boolean exists = false;\n          for (Replica replica : slice.getReplicas()) {\n            if (replicaName.equals(replica.getStr(\"core\"))) {\n              exists = true;\n              break;\n            }\n          }\n          if (exists) replicaNum++;\n          else break;\n        }\n        coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n      if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, ZkStateReader.DOWN,\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node));\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n        params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n      }\n\n\n      String configName = zkStateReader.readConfigName(collection);\n      String routeKey = message.getStr(ShardParams._ROUTE_);\n      String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n      String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, coreName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collection);\n      if (shard != null) {\n        params.set(CoreAdminParams.SHARD, shard);\n      } else if (routeKey != null) {\n        Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n        if (slices.isEmpty()) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n        } else {\n          params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n        }\n      } else  {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n      }\n      if (dataDir != null) {\n        params.set(CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (instanceDir != null) {\n        params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n      }\n      addPropertyParams(message, params);\n\n      // For tracking async calls.\n      HashMap<String, String> requestMap = new HashMap<>();\n      sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n      collectShardResponses(results, true,\n          \"ADDREPLICA failed to create replica\", shardHandler);\n\n      completeAsyncRequest(asyncId, requestMap, results);\n    } finally {\n      MDCUtils.cleanupMDC(previousMDCContext);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8","date":1431966199,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Map previousMDCContext = MDC.getCopyOfContextMap();\n    MDCUtils.setMDC(collection, shard, null, coreName);\n    try {\n      String asyncId = message.getStr(\"async\");\n\n      DocCollection coll = clusterState.getCollection(collection);\n      if (coll == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n      }\n      if (coll.getSlice(shard) == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n      }\n      ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n      if (node == null) {\n        node = getNodesForNewShard(clusterState, collection, coll.getSlices().size(), coll.getInt(MAX_SHARDS_PER_NODE, 1), coll.getInt(REPLICATION_FACTOR, 1), null).get(0).nodeName;\n        log.info(\"Node not provided, Identified {} for creating new replica\", node);\n      }\n\n\n      if (!clusterState.liveNodesContain(node)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n      }\n      if (coreName == null) {\n        // assign a name to this core\n        Slice slice = coll.getSlice(shard);\n        int replicaNum = slice.getReplicas().size();\n        for (; ; ) {\n          String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n          boolean exists = false;\n          for (Replica replica : slice.getReplicas()) {\n            if (replicaName.equals(replica.getStr(\"core\"))) {\n              exists = true;\n              break;\n            }\n          }\n          if (exists) replicaNum++;\n          else break;\n        }\n        coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n      if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node));\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n        params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n      }\n\n\n      String configName = zkStateReader.readConfigName(collection);\n      String routeKey = message.getStr(ShardParams._ROUTE_);\n      String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n      String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, coreName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collection);\n      if (shard != null) {\n        params.set(CoreAdminParams.SHARD, shard);\n      } else if (routeKey != null) {\n        Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n        if (slices.isEmpty()) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n        } else {\n          params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n        }\n      } else  {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n      }\n      if (dataDir != null) {\n        params.set(CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (instanceDir != null) {\n        params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n      }\n      addPropertyParams(message, params);\n\n      // For tracking async calls.\n      HashMap<String, String> requestMap = new HashMap<>();\n      sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n      collectShardResponses(results, true,\n          \"ADDREPLICA failed to create replica\", shardHandler);\n\n      completeAsyncRequest(asyncId, requestMap, results);\n    } finally {\n      MDCUtils.cleanupMDC(previousMDCContext);\n    }\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Map previousMDCContext = MDC.getCopyOfContextMap();\n    MDCUtils.setMDC(collection, shard, null, coreName);\n    try {\n      String asyncId = message.getStr(\"async\");\n\n      DocCollection coll = clusterState.getCollection(collection);\n      if (coll == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n      }\n      if (coll.getSlice(shard) == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n      }\n      ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n      if (node == null) {\n        node = getNodesForNewShard(clusterState, collection, coll.getSlices().size(), coll.getInt(ZkStateReader.MAX_SHARDS_PER_NODE, 1), coll.getInt(ZkStateReader.REPLICATION_FACTOR, 1), null).get(0).nodeName;\n        log.info(\"Node not provided, Identified {} for creating new replica\", node);\n      }\n\n\n      if (!clusterState.liveNodesContain(node)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n      }\n      if (coreName == null) {\n        // assign a name to this core\n        Slice slice = coll.getSlice(shard);\n        int replicaNum = slice.getReplicas().size();\n        for (; ; ) {\n          String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n          boolean exists = false;\n          for (Replica replica : slice.getReplicas()) {\n            if (replicaName.equals(replica.getStr(\"core\"))) {\n              exists = true;\n              break;\n            }\n          }\n          if (exists) replicaNum++;\n          else break;\n        }\n        coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n      if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node));\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n        params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n      }\n\n\n      String configName = zkStateReader.readConfigName(collection);\n      String routeKey = message.getStr(ShardParams._ROUTE_);\n      String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n      String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, coreName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collection);\n      if (shard != null) {\n        params.set(CoreAdminParams.SHARD, shard);\n      } else if (routeKey != null) {\n        Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n        if (slices.isEmpty()) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n        } else {\n          params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n        }\n      } else  {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n      }\n      if (dataDir != null) {\n        params.set(CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (instanceDir != null) {\n        params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n      }\n      addPropertyParams(message, params);\n\n      // For tracking async calls.\n      HashMap<String, String> requestMap = new HashMap<>();\n      sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n      collectShardResponses(results, true,\n          \"ADDREPLICA failed to create replica\", shardHandler);\n\n      completeAsyncRequest(asyncId, requestMap, results);\n    } finally {\n      MDCUtils.cleanupMDC(previousMDCContext);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ec4fc24ecd353171e03bd016c1681cd97476015f","date":1432214672,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Map previousMDCContext = MDC.getCopyOfContextMap();\n    MDCUtils.setMDC(collection, shard, null, coreName);\n    try {\n      String asyncId = message.getStr(\"async\");\n\n      DocCollection coll = clusterState.getCollection(collection);\n      if (coll == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n      }\n      if (coll.getSlice(shard) == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n      }\n      ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n      if (node == null) {\n\n        node = getNodesForNewShard(clusterState, collection, shard, 1,\n            null, overseer.getZkController().getCoreContainer()).get(0).nodeName;\n        log.info(\"Node not provided, Identified {} for creating new replica\", node);\n      }\n\n\n      if (!clusterState.liveNodesContain(node)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n      }\n      if (coreName == null) {\n        // assign a name to this core\n        Slice slice = coll.getSlice(shard);\n        int replicaNum = slice.getReplicas().size();\n        for (; ; ) {\n          String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n          boolean exists = false;\n          for (Replica replica : slice.getReplicas()) {\n            if (replicaName.equals(replica.getStr(\"core\"))) {\n              exists = true;\n              break;\n            }\n          }\n          if (exists) replicaNum++;\n          else break;\n        }\n        coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n      if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node));\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n        params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n      }\n\n\n      String configName = zkStateReader.readConfigName(collection);\n      String routeKey = message.getStr(ShardParams._ROUTE_);\n      String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n      String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, coreName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collection);\n      if (shard != null) {\n        params.set(CoreAdminParams.SHARD, shard);\n      } else if (routeKey != null) {\n        Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n        if (slices.isEmpty()) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n        } else {\n          params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n        }\n      } else  {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n      }\n      if (dataDir != null) {\n        params.set(CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (instanceDir != null) {\n        params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n      }\n      addPropertyParams(message, params);\n\n      // For tracking async calls.\n      HashMap<String, String> requestMap = new HashMap<>();\n      sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n      collectShardResponses(results, true,\n          \"ADDREPLICA failed to create replica\", shardHandler);\n\n      completeAsyncRequest(asyncId, requestMap, results);\n    } finally {\n      MDCUtils.cleanupMDC(previousMDCContext);\n    }\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Map previousMDCContext = MDC.getCopyOfContextMap();\n    MDCUtils.setMDC(collection, shard, null, coreName);\n    try {\n      String asyncId = message.getStr(\"async\");\n\n      DocCollection coll = clusterState.getCollection(collection);\n      if (coll == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n      }\n      if (coll.getSlice(shard) == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n      }\n      ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n      if (node == null) {\n        node = getNodesForNewShard(clusterState, collection, coll.getSlices().size(), coll.getInt(MAX_SHARDS_PER_NODE, 1), coll.getInt(REPLICATION_FACTOR, 1), null).get(0).nodeName;\n        log.info(\"Node not provided, Identified {} for creating new replica\", node);\n      }\n\n\n      if (!clusterState.liveNodesContain(node)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n      }\n      if (coreName == null) {\n        // assign a name to this core\n        Slice slice = coll.getSlice(shard);\n        int replicaNum = slice.getReplicas().size();\n        for (; ; ) {\n          String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n          boolean exists = false;\n          for (Replica replica : slice.getReplicas()) {\n            if (replicaName.equals(replica.getStr(\"core\"))) {\n              exists = true;\n              break;\n            }\n          }\n          if (exists) replicaNum++;\n          else break;\n        }\n        coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n      if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node));\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n        params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n      }\n\n\n      String configName = zkStateReader.readConfigName(collection);\n      String routeKey = message.getStr(ShardParams._ROUTE_);\n      String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n      String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, coreName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collection);\n      if (shard != null) {\n        params.set(CoreAdminParams.SHARD, shard);\n      } else if (routeKey != null) {\n        Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n        if (slices.isEmpty()) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n        } else {\n          params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n        }\n      } else  {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n      }\n      if (dataDir != null) {\n        params.set(CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (instanceDir != null) {\n        params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n      }\n      addPropertyParams(message, params);\n\n      // For tracking async calls.\n      HashMap<String, String> requestMap = new HashMap<>();\n      sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n      collectShardResponses(results, true,\n          \"ADDREPLICA failed to create replica\", shardHandler);\n\n      completeAsyncRequest(asyncId, requestMap, results);\n    } finally {\n      MDCUtils.cleanupMDC(previousMDCContext);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"439c63ae5d22132fca810a0029a854e97d2c1a3e","date":1432733612,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    \n    String asyncId = message.getStr(\"async\");\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    if (node == null) {\n      \n      node = getNodesForNewShard(clusterState, collection, shard, 1, null,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n      log.info(\"Node not provided, Identified {} for creating new replica\", node);\n    }\n    \n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;) {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n          collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n          zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    HashMap<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n    \n    collectShardResponses(results, true, \"ADDREPLICA failed to create replica\", shardHandler);\n    \n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Map previousMDCContext = MDC.getCopyOfContextMap();\n    MDCUtils.setMDC(collection, shard, null, coreName);\n    try {\n      String asyncId = message.getStr(\"async\");\n\n      DocCollection coll = clusterState.getCollection(collection);\n      if (coll == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n      }\n      if (coll.getSlice(shard) == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n      }\n      ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n      if (node == null) {\n\n        node = getNodesForNewShard(clusterState, collection, shard, 1,\n            null, overseer.getZkController().getCoreContainer()).get(0).nodeName;\n        log.info(\"Node not provided, Identified {} for creating new replica\", node);\n      }\n\n\n      if (!clusterState.liveNodesContain(node)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n      }\n      if (coreName == null) {\n        // assign a name to this core\n        Slice slice = coll.getSlice(shard);\n        int replicaNum = slice.getReplicas().size();\n        for (; ; ) {\n          String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n          boolean exists = false;\n          for (Replica replica : slice.getReplicas()) {\n            if (replicaName.equals(replica.getStr(\"core\"))) {\n              exists = true;\n              break;\n            }\n          }\n          if (exists) replicaNum++;\n          else break;\n        }\n        coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n      if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node));\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n        params.set(CoreAdminParams.CORE_NODE_NAME, waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n      }\n\n\n      String configName = zkStateReader.readConfigName(collection);\n      String routeKey = message.getStr(ShardParams._ROUTE_);\n      String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n      String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, coreName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collection);\n      if (shard != null) {\n        params.set(CoreAdminParams.SHARD, shard);\n      } else if (routeKey != null) {\n        Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n        if (slices.isEmpty()) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n        } else {\n          params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n        }\n      } else  {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n      }\n      if (dataDir != null) {\n        params.set(CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (instanceDir != null) {\n        params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n      }\n      addPropertyParams(message, params);\n\n      // For tracking async calls.\n      HashMap<String, String> requestMap = new HashMap<>();\n      sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n      collectShardResponses(results, true,\n          \"ADDREPLICA failed to create replica\", shardHandler);\n\n      completeAsyncRequest(asyncId, requestMap, results);\n    } finally {\n      MDCUtils.cleanupMDC(previousMDCContext);\n    }\n  }\n\n","bugFix":null,"bugIntro":["8b81868c96ab084d96d4589dd330753c529bc450","9942a098be9e045925c48c55fe39f6ffb9667744","3fd3cdfbce4b551bb8ca4678682a5a891d0890ca"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8c5997453bf2d3c85add46a572ff2912ad04c99","date":1434968375,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    \n    String asyncId = message.getStr(\"async\");\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    if (node == null) {\n      \n      node = getNodesForNewShard(clusterState, collection, shard, 1, null,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n      log.info(\"Node not provided, Identified {} for creating new replica\", node);\n    }\n    \n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;) {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(CORE_NAME_PROP))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    } else {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n          collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n          zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    HashMap<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n    \n    collectShardResponses(results, true, \"ADDREPLICA failed to create replica\", shardHandler);\n    \n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    \n    String asyncId = message.getStr(\"async\");\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    if (node == null) {\n      \n      node = getNodesForNewShard(clusterState, collection, shard, 1, null,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n      log.info(\"Node not provided, Identified {} for creating new replica\", node);\n    }\n    \n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;) {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(\"core\"))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n          collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n          zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    HashMap<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n    \n    collectShardResponses(results, true, \"ADDREPLICA failed to create replica\", shardHandler);\n    \n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","bugFix":null,"bugIntro":["8b81868c96ab084d96d4589dd330753c529bc450"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f222f4f2bda21ffd6b39b3362b2412e98e4d5e31","date":1435517625,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    if (node == null) {\n      \n      node = getNodesForNewShard(clusterState, collection, shard, 1, null,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n      log.info(\"Node not provided, Identified {} for creating new replica\", node);\n    }\n    \n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;) {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(CORE_NAME_PROP))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    } else {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n          collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n          zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    HashMap<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n    \n    collectShardResponses(results, true, \"ADDREPLICA failed to create replica\", shardHandler);\n    \n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    \n    String asyncId = message.getStr(\"async\");\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    if (node == null) {\n      \n      node = getNodesForNewShard(clusterState, collection, shard, 1, null,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n      log.info(\"Node not provided, Identified {} for creating new replica\", node);\n    }\n    \n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;) {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(CORE_NAME_PROP))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    } else {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n          collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n          zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    HashMap<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n    \n    collectShardResponses(results, true, \"ADDREPLICA failed to create replica\", shardHandler);\n    \n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b81868c96ab084d96d4589dd330753c529bc450","date":1435652870,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    if (node == null) {\n      \n      node = getNodesForNewShard(clusterState, collection, shard, 1, null,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n      log.info(\"Node not provided, Identified {} for creating new replica\", node);\n    }\n    \n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    HashMap<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n    \n    collectShardResponses(results, true, \"ADDREPLICA failed to create replica\", shardHandler);\n    \n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    if (node == null) {\n      \n      node = getNodesForNewShard(clusterState, collection, shard, 1, null,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n      log.info(\"Node not provided, Identified {} for creating new replica\", node);\n    }\n    \n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      // assign a name to this core\n      Slice slice = coll.getSlice(shard);\n      int replicaNum = slice.getReplicas().size();\n      for (;;) {\n        String replicaName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n        boolean exists = false;\n        for (Replica replica : slice.getReplicas()) {\n          if (replicaName.equals(replica.getStr(CORE_NAME_PROP))) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists) replicaNum++;\n        else break;\n      }\n      coreName = collection + \"_\" + shard + \"_replica\" + replicaNum;\n    } else {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n          collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n          zkStateReader.getBaseUrlForNodeName(node));\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    HashMap<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n    \n    collectShardResponses(results, true, \"ADDREPLICA failed to create replica\", shardHandler);\n    \n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","bugFix":["f8c5997453bf2d3c85add46a572ff2912ad04c99","439c63ae5d22132fca810a0029a854e97d2c1a3e"],"bugIntro":["b06ed1eeeb56011711007f5cd8aae89edff6a196"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9942a098be9e045925c48c55fe39f6ffb9667744","date":1436492864,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    if (node == null) {\n      node = getNodesForNewShard(clusterState, collection, shard, 1, null,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n      log.info(\"Node not provided, Identified {} for creating new replica\", node);\n    }\n    \n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    HashMap<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n    \n    collectShardResponses(results, true, \"ADDREPLICA failed to create replica\", shardHandler);\n    \n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    if (node == null) {\n      \n      node = getNodesForNewShard(clusterState, collection, shard, 1, null,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n      log.info(\"Node not provided, Identified {} for creating new replica\", node);\n    }\n    \n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    HashMap<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n    \n    collectShardResponses(results, true, \"ADDREPLICA failed to create replica\", shardHandler);\n    \n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","bugFix":["439c63ae5d22132fca810a0029a854e97d2c1a3e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3fd3cdfbce4b551bb8ca4678682a5a891d0890ca","date":1436588269,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n        overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    HashMap<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n    \n    collectShardResponses(results, true, \"ADDREPLICA failed to create replica\", shardHandler);\n    \n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(\"node\");\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    if (node == null) {\n      node = getNodesForNewShard(clusterState, collection, shard, 1, null,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n      log.info(\"Node not provided, Identified {} for creating new replica\", node);\n    }\n    \n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    HashMap<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n    \n    collectShardResponses(results, true, \"ADDREPLICA failed to create replica\", shardHandler);\n    \n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","bugFix":["8497bb4f9de61b5520423bd9af88ea11a6e109e7","439c63ae5d22132fca810a0029a854e97d2c1a3e"],"bugIntro":["5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n        overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    HashMap<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n    \n    collectShardResponses(results, true, \"ADDREPLICA failed to create replica\", shardHandler);\n    \n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n        overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    HashMap<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n    \n    collectShardResponses(results, true, \"ADDREPLICA failed to create replica\", shardHandler);\n    \n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n        overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    HashMap<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n    \n    collectShardResponses(results, true, \"ADDREPLICA failed to create replica\", shardHandler);\n    \n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n        overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    HashMap<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n    \n    collectShardResponses(results, true, \"ADDREPLICA failed to create replica\", shardHandler);\n    \n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f222f4f2bda21ffd6b39b3362b2412e98e4d5e31":["f8c5997453bf2d3c85add46a572ff2912ad04c99"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["840fc95f31a25d020cd825e880018bcfa0bacc71","eb4db141b31e99d2285436da1428411ed5501f56"],"6b51e891605604cf911ab579fb28c49b26749f93":["840fc95f31a25d020cd825e880018bcfa0bacc71","eb4db141b31e99d2285436da1428411ed5501f56"],"9942a098be9e045925c48c55fe39f6ffb9667744":["8b81868c96ab084d96d4589dd330753c529bc450"],"b7605579001505896d48b07160075a5c8b8e128e":["eb4db141b31e99d2285436da1428411ed5501f56","6f26f74e4969851a019d28f10315cb1c77786f22"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","840fc95f31a25d020cd825e880018bcfa0bacc71"],"439c63ae5d22132fca810a0029a854e97d2c1a3e":["ec4fc24ecd353171e03bd016c1681cd97476015f"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["dbf528c0e702c5cbd1339b2da1cdc823fd44a925"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["30c688f7052130cef7bd419c85e3c5be214f7b9e","dbf528c0e702c5cbd1339b2da1cdc823fd44a925"],"15e5c6e9cbb262742d1c0e5a3b42c87f97918e1d":["6f26f74e4969851a019d28f10315cb1c77786f22"],"07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee31282189f924712ed9ad83e3073e0c207a1a53":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"3fd3cdfbce4b551bb8ca4678682a5a891d0890ca":["9942a098be9e045925c48c55fe39f6ffb9667744"],"6f26f74e4969851a019d28f10315cb1c77786f22":["eb4db141b31e99d2285436da1428411ed5501f56"],"8b81868c96ab084d96d4589dd330753c529bc450":["f222f4f2bda21ffd6b39b3362b2412e98e4d5e31"],"eb4db141b31e99d2285436da1428411ed5501f56":["840fc95f31a25d020cd825e880018bcfa0bacc71"],"ec4fc24ecd353171e03bd016c1681cd97476015f":["07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["3fd3cdfbce4b551bb8ca4678682a5a891d0890ca"],"f8c5997453bf2d3c85add46a572ff2912ad04c99":["439c63ae5d22132fca810a0029a854e97d2c1a3e"],"840fc95f31a25d020cd825e880018bcfa0bacc71":["8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["15e5c6e9cbb262742d1c0e5a3b42c87f97918e1d"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"dbf528c0e702c5cbd1339b2da1cdc823fd44a925":["ee31282189f924712ed9ad83e3073e0c207a1a53"]},"commit2Childs":{"f222f4f2bda21ffd6b39b3362b2412e98e4d5e31":["8b81868c96ab084d96d4589dd330753c529bc450"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"6b51e891605604cf911ab579fb28c49b26749f93":[],"9942a098be9e045925c48c55fe39f6ffb9667744":["3fd3cdfbce4b551bb8ca4678682a5a891d0890ca"],"b7605579001505896d48b07160075a5c8b8e128e":[],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ee31282189f924712ed9ad83e3073e0c207a1a53"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"439c63ae5d22132fca810a0029a854e97d2c1a3e":["f8c5997453bf2d3c85add46a572ff2912ad04c99"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"15e5c6e9cbb262742d1c0e5a3b42c87f97918e1d":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8":["ec4fc24ecd353171e03bd016c1681cd97476015f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"ee31282189f924712ed9ad83e3073e0c207a1a53":["dbf528c0e702c5cbd1339b2da1cdc823fd44a925"],"3fd3cdfbce4b551bb8ca4678682a5a891d0890ca":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"6f26f74e4969851a019d28f10315cb1c77786f22":["b7605579001505896d48b07160075a5c8b8e128e","15e5c6e9cbb262742d1c0e5a3b42c87f97918e1d"],"8b81868c96ab084d96d4589dd330753c529bc450":["9942a098be9e045925c48c55fe39f6ffb9667744"],"eb4db141b31e99d2285436da1428411ed5501f56":["96ea64d994d340044e0d57aeb6a5871539d10ca5","6b51e891605604cf911ab579fb28c49b26749f93","b7605579001505896d48b07160075a5c8b8e128e","6f26f74e4969851a019d28f10315cb1c77786f22"],"ec4fc24ecd353171e03bd016c1681cd97476015f":["439c63ae5d22132fca810a0029a854e97d2c1a3e"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"f8c5997453bf2d3c85add46a572ff2912ad04c99":["f222f4f2bda21ffd6b39b3362b2412e98e4d5e31"],"840fc95f31a25d020cd825e880018bcfa0bacc71":["96ea64d994d340044e0d57aeb6a5871539d10ca5","6b51e891605604cf911ab579fb28c49b26749f93","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","eb4db141b31e99d2285436da1428411ed5501f56"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["840fc95f31a25d020cd825e880018bcfa0bacc71"],"dbf528c0e702c5cbd1339b2da1cdc823fd44a925":["a219f1dcad1700e84807666bdbd2b573e8de7021","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","6b51e891605604cf911ab579fb28c49b26749f93","b7605579001505896d48b07160075a5c8b8e128e","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}