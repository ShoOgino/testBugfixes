{"path":"modules/spatial/src/test/java/org/apache/lucene/spatial/base/distance/TestDistances#testDistCalcPointOnBearing_geo().mjava","commits":[{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/test/java/org/apache/lucene/spatial/base/distance/TestDistances#testDistCalcPointOnBearing_geo().mjava","pathOld":"modules/spatial-lucene/src/test/java/org/apache/lucene/spatial/base/distance/TestDistances#testDistCalcPointOnBearing_geo().mjava","sourceNew":"  @Test\n  public void testDistCalcPointOnBearing_geo() {\n    //The haversine formula has a higher error if the points are near antipodal. We adjust EPS tolerance for this case.\n    //TODO Eventually we should add the Vincenty formula for improved accuracy, or try some other cleverness.\n\n    //test known high delta\n//    {\n//      Point c = ctx.makePoint(-103,-79);\n//      double angRAD = Math.toRadians(236);\n//      double dist = 20025;\n//      Point p2 = dc().pointOnBearingRAD(c, dist, angRAD, ctx);\n//      //Pt(x=76.61200011750923,y=79.04946929870962)\n//      double calcDist = dc().distance(c, p2);\n//      assertEqualsRatio(dist, calcDist);\n//    }\n    double maxDist = ctx.getUnits().earthCircumference() / 2;\n    for(int i = 0; i < 1000; i++) {\n      int dist = random.nextInt((int) maxDist);\n      EPS = (dist < maxDist*0.75 ? 10e-6 : 10e-3);\n      testDistCalcPointOnBearing(dist);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDistCalcPointOnBearing_geo() {\n    //The haversine formula has a higher error if the points are near antipodal. We adjust EPS tolerance for this case.\n    //TODO Eventually we should add the Vincenty formula for improved accuracy, or try some other cleverness.\n\n    //test known high delta\n//    {\n//      Point c = ctx.makePoint(-103,-79);\n//      double angRAD = Math.toRadians(236);\n//      double dist = 20025;\n//      Point p2 = dc().pointOnBearingRAD(c, dist, angRAD, ctx);\n//      //Pt(x=76.61200011750923,y=79.04946929870962)\n//      double calcDist = dc().distance(c, p2);\n//      assertEqualsRatio(dist, calcDist);\n//    }\n    double maxDist = ctx.getUnits().earthCircumference() / 2;\n    for(int i = 0; i < 1000; i++) {\n      int dist = random.nextInt((int) maxDist);\n      EPS = (dist < maxDist*0.75 ? 10e-6 : 10e-3);\n      testDistCalcPointOnBearing(dist);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"935445a30e9e8dc0240a7c78efc73d08c2faa6a8","date":1329778521,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/test/org/apache/lucene/spatial/base/distance/TestDistances#testDistCalcPointOnBearing_geo().mjava","pathOld":"modules/spatial/src/test/java/org/apache/lucene/spatial/base/distance/TestDistances#testDistCalcPointOnBearing_geo().mjava","sourceNew":"  @Test\n  public void testDistCalcPointOnBearing_geo() {\n    //The haversine formula has a higher error if the points are near antipodal. We adjust EPS tolerance for this case.\n    //TODO Eventually we should add the Vincenty formula for improved accuracy, or try some other cleverness.\n\n    //test known high delta\n//    {\n//      Point c = ctx.makePoint(-103,-79);\n//      double angRAD = Math.toRadians(236);\n//      double dist = 20025;\n//      Point p2 = dc().pointOnBearingRAD(c, dist, angRAD, ctx);\n//      //Pt(x=76.61200011750923,y=79.04946929870962)\n//      double calcDist = dc().distance(c, p2);\n//      assertEqualsRatio(dist, calcDist);\n//    }\n    double maxDist = ctx.getUnits().earthCircumference() / 2;\n    for(int i = 0; i < 1000; i++) {\n      int dist = random.nextInt((int) maxDist);\n      EPS = (dist < maxDist*0.75 ? 10e-6 : 10e-3);\n      testDistCalcPointOnBearing(dist);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDistCalcPointOnBearing_geo() {\n    //The haversine formula has a higher error if the points are near antipodal. We adjust EPS tolerance for this case.\n    //TODO Eventually we should add the Vincenty formula for improved accuracy, or try some other cleverness.\n\n    //test known high delta\n//    {\n//      Point c = ctx.makePoint(-103,-79);\n//      double angRAD = Math.toRadians(236);\n//      double dist = 20025;\n//      Point p2 = dc().pointOnBearingRAD(c, dist, angRAD, ctx);\n//      //Pt(x=76.61200011750923,y=79.04946929870962)\n//      double calcDist = dc().distance(c, p2);\n//      assertEqualsRatio(dist, calcDist);\n//    }\n    double maxDist = ctx.getUnits().earthCircumference() / 2;\n    for(int i = 0; i < 1000; i++) {\n      int dist = random.nextInt((int) maxDist);\n      EPS = (dist < maxDist*0.75 ? 10e-6 : 10e-3);\n      testDistCalcPointOnBearing(dist);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}