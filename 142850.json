{"path":"solr/core/src/test/org/apache/solr/internal/csv/CSVParserTest#testBackslashEscaping().mjava","commits":[{"id":"a62060bf935e54f2cf73861fbc773508ab49aeb9","date":1333411307,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/internal/csv/CSVParserTest#testBackslashEscaping().mjava","pathOld":"/dev/null","sourceNew":"  public void testBackslashEscaping() throws IOException {\n\n    // To avoid confusion over the need for escaping chars in java code,\n    // We will test with a forward slash as the escape char, and a single\n    // quote as the encapsulator.\n\n    String code =\n      \"one,two,three\\n\" // 0\n      + \"'',''\\n\"       // 1) empty encapsulators\n      + \"/',/'\\n\"       // 2) single encapsulators\n      + \"'/'','/''\\n\"   // 3) single encapsulators encapsulated via escape\n      + \"'''',''''\\n\"   // 4) single encapsulators encapsulated via doubling\n      + \"/,,/,\\n\"       // 5) separator escaped\n      + \"//,//\\n\"       // 6) escape escaped\n      + \"'//','//'\\n\"   // 7) escape escaped in encapsulation\n      + \"   8   ,   \\\"quoted \\\"\\\" /\\\" // string\\\"   \\n\"     // don't eat spaces\n      + \"9,   /\\n   \\n\"  // escaped newline\n      + \"\";\n    String[][] res = {\n        { \"one\", \"two\", \"three\" }, // 0\n        { \"\", \"\" },                // 1\n        { \"'\", \"'\" },              // 2\n        { \"'\", \"'\" },              // 3\n        { \"'\", \"'\" },              // 4\n        { \",\", \",\" },              // 5\n        { \"/\", \"/\" },              // 6\n        { \"/\", \"/\" },              // 7\n        { \"   8   \", \"   \\\"quoted \\\"\\\" \\\" / string\\\"   \" },\n        { \"9\", \"   \\n   \" },\n      };\n\n\n    CSVStrategy strategy = new CSVStrategy(',','\\'',CSVStrategy.COMMENTS_DISABLED,'/',false,false,true,true);\n\n    CSVParser parser = new CSVParser(new StringReader(code), strategy);\n    String[][] tmp = parser.getAllValues();\n    assertTrue(tmp.length > 0);\n    for (int i = 0; i < res.length; i++) {\n      assertTrue(Arrays.equals(res[i], tmp[i]));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["df476dd588f9e2c99c43fd9d3d896fd30221938f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df476dd588f9e2c99c43fd9d3d896fd30221938f","date":1457020485,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/internal/csv/CSVParserTest#testBackslashEscaping().mjava","pathOld":"solr/core/src/test/org/apache/solr/internal/csv/CSVParserTest#testBackslashEscaping().mjava","sourceNew":"  public void testBackslashEscaping() throws IOException {\n\n    // To avoid confusion over the need for escaping chars in java code,\n    // We will test with a forward slash as the escape char, and a single\n    // quote as the encapsulator.\n\n    String code =\n      \"one,two,three\\n\" // 0\n      + \"'',''\\n\"       // 1) empty encapsulators\n      + \"/',/'\\n\"       // 2) single encapsulators\n      + \"'/'','/''\\n\"   // 3) single encapsulators encapsulated via escape\n      + \"'''',''''\\n\"   // 4) single encapsulators encapsulated via doubling\n      + \"/,,/,\\n\"       // 5) separator escaped\n      + \"//,//\\n\"       // 6) escape escaped\n      + \"'//','//'\\n\"   // 7) escape escaped in encapsulation\n      + \"   8   ,   \\\"quoted \\\"\\\" /\\\" // string\\\"   \\n\"     // don't eat spaces\n      + \"9,   /\\n   \\n\"  // escaped newline\n      + \"\";\n    String[][] res = {\n        { \"one\", \"two\", \"three\" }, // 0\n        { \"\", \"\" },                // 1\n        { \"'\", \"'\" },              // 2\n        { \"'\", \"'\" },              // 3\n        { \"'\", \"'\" },              // 4\n        { \",\", \",\" },              // 5\n        { \"/\", \"/\" },              // 6\n        { \"/\", \"/\" },              // 7\n        { \"   8   \", \"   \\\"quoted \\\"\\\" \\\" / string\\\"   \" },\n        { \"9\", \"   \\n   \" },\n      };\n\n\n    CSVStrategy strategy = new CSVStrategy(',','\\'',CSVStrategy.COMMENTS_DISABLED,'/',false,false,true,true,\"\\n\");\n\n    CSVParser parser = new CSVParser(new StringReader(code), strategy);\n    String[][] tmp = parser.getAllValues();\n    assertTrue(tmp.length > 0);\n    for (int i = 0; i < res.length; i++) {\n      assertTrue(Arrays.equals(res[i], tmp[i]));\n    }\n  }\n\n","sourceOld":"  public void testBackslashEscaping() throws IOException {\n\n    // To avoid confusion over the need for escaping chars in java code,\n    // We will test with a forward slash as the escape char, and a single\n    // quote as the encapsulator.\n\n    String code =\n      \"one,two,three\\n\" // 0\n      + \"'',''\\n\"       // 1) empty encapsulators\n      + \"/',/'\\n\"       // 2) single encapsulators\n      + \"'/'','/''\\n\"   // 3) single encapsulators encapsulated via escape\n      + \"'''',''''\\n\"   // 4) single encapsulators encapsulated via doubling\n      + \"/,,/,\\n\"       // 5) separator escaped\n      + \"//,//\\n\"       // 6) escape escaped\n      + \"'//','//'\\n\"   // 7) escape escaped in encapsulation\n      + \"   8   ,   \\\"quoted \\\"\\\" /\\\" // string\\\"   \\n\"     // don't eat spaces\n      + \"9,   /\\n   \\n\"  // escaped newline\n      + \"\";\n    String[][] res = {\n        { \"one\", \"two\", \"three\" }, // 0\n        { \"\", \"\" },                // 1\n        { \"'\", \"'\" },              // 2\n        { \"'\", \"'\" },              // 3\n        { \"'\", \"'\" },              // 4\n        { \",\", \",\" },              // 5\n        { \"/\", \"/\" },              // 6\n        { \"/\", \"/\" },              // 7\n        { \"   8   \", \"   \\\"quoted \\\"\\\" \\\" / string\\\"   \" },\n        { \"9\", \"   \\n   \" },\n      };\n\n\n    CSVStrategy strategy = new CSVStrategy(',','\\'',CSVStrategy.COMMENTS_DISABLED,'/',false,false,true,true);\n\n    CSVParser parser = new CSVParser(new StringReader(code), strategy);\n    String[][] tmp = parser.getAllValues();\n    assertTrue(tmp.length > 0);\n    for (int i = 0; i < res.length; i++) {\n      assertTrue(Arrays.equals(res[i], tmp[i]));\n    }\n  }\n\n","bugFix":["a62060bf935e54f2cf73861fbc773508ab49aeb9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/internal/csv/CSVParserTest#testBackslashEscaping().mjava","pathOld":"solr/core/src/test/org/apache/solr/internal/csv/CSVParserTest#testBackslashEscaping().mjava","sourceNew":"  public void testBackslashEscaping() throws IOException {\n\n    // To avoid confusion over the need for escaping chars in java code,\n    // We will test with a forward slash as the escape char, and a single\n    // quote as the encapsulator.\n\n    String code =\n      \"one,two,three\\n\" // 0\n      + \"'',''\\n\"       // 1) empty encapsulators\n      + \"/',/'\\n\"       // 2) single encapsulators\n      + \"'/'','/''\\n\"   // 3) single encapsulators encapsulated via escape\n      + \"'''',''''\\n\"   // 4) single encapsulators encapsulated via doubling\n      + \"/,,/,\\n\"       // 5) separator escaped\n      + \"//,//\\n\"       // 6) escape escaped\n      + \"'//','//'\\n\"   // 7) escape escaped in encapsulation\n      + \"   8   ,   \\\"quoted \\\"\\\" /\\\" // string\\\"   \\n\"     // don't eat spaces\n      + \"9,   /\\n   \\n\"  // escaped newline\n      + \"\";\n    String[][] res = {\n        { \"one\", \"two\", \"three\" }, // 0\n        { \"\", \"\" },                // 1\n        { \"'\", \"'\" },              // 2\n        { \"'\", \"'\" },              // 3\n        { \"'\", \"'\" },              // 4\n        { \",\", \",\" },              // 5\n        { \"/\", \"/\" },              // 6\n        { \"/\", \"/\" },              // 7\n        { \"   8   \", \"   \\\"quoted \\\"\\\" \\\" / string\\\"   \" },\n        { \"9\", \"   \\n   \" },\n      };\n\n\n    CSVStrategy strategy = new CSVStrategy(',','\\'',CSVStrategy.COMMENTS_DISABLED,'/',false,false,true,true,\"\\n\");\n\n    CSVParser parser = new CSVParser(new StringReader(code), strategy);\n    String[][] tmp = parser.getAllValues();\n    assertTrue(tmp.length > 0);\n    for (int i = 0; i < res.length; i++) {\n      assertTrue(Arrays.equals(res[i], tmp[i]));\n    }\n  }\n\n","sourceOld":"  public void testBackslashEscaping() throws IOException {\n\n    // To avoid confusion over the need for escaping chars in java code,\n    // We will test with a forward slash as the escape char, and a single\n    // quote as the encapsulator.\n\n    String code =\n      \"one,two,three\\n\" // 0\n      + \"'',''\\n\"       // 1) empty encapsulators\n      + \"/',/'\\n\"       // 2) single encapsulators\n      + \"'/'','/''\\n\"   // 3) single encapsulators encapsulated via escape\n      + \"'''',''''\\n\"   // 4) single encapsulators encapsulated via doubling\n      + \"/,,/,\\n\"       // 5) separator escaped\n      + \"//,//\\n\"       // 6) escape escaped\n      + \"'//','//'\\n\"   // 7) escape escaped in encapsulation\n      + \"   8   ,   \\\"quoted \\\"\\\" /\\\" // string\\\"   \\n\"     // don't eat spaces\n      + \"9,   /\\n   \\n\"  // escaped newline\n      + \"\";\n    String[][] res = {\n        { \"one\", \"two\", \"three\" }, // 0\n        { \"\", \"\" },                // 1\n        { \"'\", \"'\" },              // 2\n        { \"'\", \"'\" },              // 3\n        { \"'\", \"'\" },              // 4\n        { \",\", \",\" },              // 5\n        { \"/\", \"/\" },              // 6\n        { \"/\", \"/\" },              // 7\n        { \"   8   \", \"   \\\"quoted \\\"\\\" \\\" / string\\\"   \" },\n        { \"9\", \"   \\n   \" },\n      };\n\n\n    CSVStrategy strategy = new CSVStrategy(',','\\'',CSVStrategy.COMMENTS_DISABLED,'/',false,false,true,true);\n\n    CSVParser parser = new CSVParser(new StringReader(code), strategy);\n    String[][] tmp = parser.getAllValues();\n    assertTrue(tmp.length > 0);\n    for (int i = 0; i < res.length; i++) {\n      assertTrue(Arrays.equals(res[i], tmp[i]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a62060bf935e54f2cf73861fbc773508ab49aeb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"df476dd588f9e2c99c43fd9d3d896fd30221938f":["a62060bf935e54f2cf73861fbc773508ab49aeb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a62060bf935e54f2cf73861fbc773508ab49aeb9","df476dd588f9e2c99c43fd9d3d896fd30221938f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"a62060bf935e54f2cf73861fbc773508ab49aeb9":["df476dd588f9e2c99c43fd9d3d896fd30221938f","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"df476dd588f9e2c99c43fd9d3d896fd30221938f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a62060bf935e54f2cf73861fbc773508ab49aeb9"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}