{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ops/GroupOperation#reduce().mjava","commits":[{"id":"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7","date":1449800905,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ops/GroupOperation#reduce().mjava","pathOld":"/dev/null","sourceNew":"  public Tuple reduce() {\n    Map map = new HashMap();\n    List<Map> list = new ArrayList();\n    LinkedList ll = new LinkedList();\n    while(priorityQueue.size() > 0) {\n      ll.addFirst(priorityQueue.poll().getMap());\n      //This will clear priority queue and so it will be ready for the next group.\n    }\n\n    list.addAll(ll);\n    Map groupHead = list.get(0);\n    map.putAll(groupHead);\n    map.put(\"group\", list);\n    return new Tuple(map);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","date":1571071547,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ops/GroupOperation#reduce().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ops/GroupOperation#reduce().mjava","sourceNew":"  public Tuple reduce() {\n    LinkedList ll = new LinkedList();\n    while(priorityQueue.size() > 0) {\n      ll.addFirst(priorityQueue.poll().getMap());\n      //This will clear priority queue and so it will be ready for the next group.\n    }\n\n    List<Map> list = new ArrayList(ll);\n    Map groupHead = list.get(0);\n    Map map = new HashMap(groupHead);\n    map.put(\"group\", list);\n    return new Tuple(map);\n  }\n\n","sourceOld":"  public Tuple reduce() {\n    Map map = new HashMap();\n    List<Map> list = new ArrayList();\n    LinkedList ll = new LinkedList();\n    while(priorityQueue.size() > 0) {\n      ll.addFirst(priorityQueue.poll().getMap());\n      //This will clear priority queue and so it will be ready for the next group.\n    }\n\n    list.addAll(ll);\n    Map groupHead = list.get(0);\n    map.putAll(groupHead);\n    map.put(\"group\", list);\n    return new Tuple(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ops/GroupOperation#reduce().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ops/GroupOperation#reduce().mjava","sourceNew":"  public Tuple reduce() {\n    LinkedList ll = new LinkedList();\n    while(priorityQueue.size() > 0) {\n      ll.addFirst(priorityQueue.poll().getMap());\n      //This will clear priority queue and so it will be ready for the next group.\n    }\n\n    List<Map> list = new ArrayList(ll);\n    Map groupHead = list.get(0);\n    Map map = new HashMap(groupHead);\n    map.put(\"group\", list);\n    return new Tuple(map);\n  }\n\n","sourceOld":"  public Tuple reduce() {\n    Map map = new HashMap();\n    List<Map> list = new ArrayList();\n    LinkedList ll = new LinkedList();\n    while(priorityQueue.size() > 0) {\n      ll.addFirst(priorityQueue.poll().getMap());\n      //This will clear priority queue and so it will be ready for the next group.\n    }\n\n    list.addAll(ll);\n    Map groupHead = list.get(0);\n    map.putAll(groupHead);\n    map.put(\"group\", list);\n    return new Tuple(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ops/GroupOperation#reduce().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ops/GroupOperation#reduce().mjava","sourceNew":"  public Tuple reduce() {\n    LinkedList ll = new LinkedList();\n    while(priorityQueue.size() > 0) {\n      ll.addFirst(priorityQueue.poll().getFields());\n      //This will clear priority queue and so it will be ready for the next group.\n    }\n\n    List<Map> list = new ArrayList(ll);\n    Map groupHead = list.get(0);\n    Tuple tuple = new Tuple(groupHead);\n    tuple.put(\"group\", list);\n    return tuple;\n  }\n\n","sourceOld":"  public Tuple reduce() {\n    LinkedList ll = new LinkedList();\n    while(priorityQueue.size() > 0) {\n      ll.addFirst(priorityQueue.poll().getMap());\n      //This will clear priority queue and so it will be ready for the next group.\n    }\n\n    List<Map> list = new ArrayList(ll);\n    Map groupHead = list.get(0);\n    Map map = new HashMap(groupHead);\n    map.put(\"group\", list);\n    return new Tuple(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ops/GroupOperation#reduce().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ops/GroupOperation#reduce().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public Tuple reduce() {\n    @SuppressWarnings({\"rawtypes\"})\n    LinkedList ll = new LinkedList();\n    while(priorityQueue.size() > 0) {\n      ll.addFirst(priorityQueue.poll().getFields());\n      //This will clear priority queue and so it will be ready for the next group.\n    }\n\n    @SuppressWarnings({\"rawtypes\"})\n    List<Map> list = new ArrayList<>(ll);\n    @SuppressWarnings({\"rawtypes\"})\n    Map groupHead = list.get(0);\n    Tuple tuple = new Tuple(groupHead);\n    tuple.put(\"group\", list);\n    return tuple;\n  }\n\n","sourceOld":"  public Tuple reduce() {\n    LinkedList ll = new LinkedList();\n    while(priorityQueue.size() > 0) {\n      ll.addFirst(priorityQueue.poll().getFields());\n      //This will clear priority queue and so it will be ready for the next group.\n    }\n\n    List<Map> list = new ArrayList(ll);\n    Map groupHead = list.get(0);\n    Tuple tuple = new Tuple(groupHead);\n    tuple.put(\"group\", list);\n    return tuple;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["804a8d5358fe7b7563b85ee7838714d720b89272"],"804a8d5358fe7b7563b85ee7838714d720b89272":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"b0b597c65628ca9e73913a07e81691f8229bae35":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7","23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"]},"commit2Childs":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["804a8d5358fe7b7563b85ee7838714d720b89272","b0b597c65628ca9e73913a07e81691f8229bae35"],"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"804a8d5358fe7b7563b85ee7838714d720b89272":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}