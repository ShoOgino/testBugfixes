{"path":"lucene/core/src/test/org/apache/lucene/util/TestByteBlockPool#testLargeRandomBlocks().mjava","commits":[{"id":"22f56bf98bcc4bbd169ab6c3d65b65d9f84d8e57","date":1491925651,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestByteBlockPool#testLargeRandomBlocks().mjava","pathOld":"/dev/null","sourceNew":"  public void testLargeRandomBlocks() throws IOException {\n    Counter bytesUsed = Counter.newCounter();\n    ByteBlockPool pool = new ByteBlockPool(new ByteBlockPool.DirectTrackingAllocator(bytesUsed));\n    pool.nextBuffer();\n\n    List<byte[]> items = new ArrayList<>();\n    for (int i=0;i<100;i++) {\n      int size;\n      if (random().nextBoolean()) {\n        size = TestUtil.nextInt(random(), 100, 1000);\n      } else {\n        size = TestUtil.nextInt(random(), 50000, 100000);\n      }\n      byte[] bytes = new byte[size];\n      random().nextBytes(bytes);\n      items.add(bytes);\n      pool.append(new BytesRef(bytes));\n    }\n\n    long position = 0;\n    for (byte[] expected : items) {\n      byte[] actual = new byte[expected.length];\n      pool.readBytes(position, actual, 0, actual.length);\n      assertTrue(Arrays.equals(expected, actual));\n      position += expected.length;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestByteBlockPool#testLargeRandomBlocks().mjava","pathOld":"/dev/null","sourceNew":"  public void testLargeRandomBlocks() throws IOException {\n    Counter bytesUsed = Counter.newCounter();\n    ByteBlockPool pool = new ByteBlockPool(new ByteBlockPool.DirectTrackingAllocator(bytesUsed));\n    pool.nextBuffer();\n\n    List<byte[]> items = new ArrayList<>();\n    for (int i=0;i<100;i++) {\n      int size;\n      if (random().nextBoolean()) {\n        size = TestUtil.nextInt(random(), 100, 1000);\n      } else {\n        size = TestUtil.nextInt(random(), 50000, 100000);\n      }\n      byte[] bytes = new byte[size];\n      random().nextBytes(bytes);\n      items.add(bytes);\n      pool.append(new BytesRef(bytes));\n    }\n\n    long position = 0;\n    for (byte[] expected : items) {\n      byte[] actual = new byte[expected.length];\n      pool.readBytes(position, actual, 0, actual.length);\n      assertTrue(Arrays.equals(expected, actual));\n      position += expected.length;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22f56bf98bcc4bbd169ab6c3d65b65d9f84d8e57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22f56bf98bcc4bbd169ab6c3d65b65d9f84d8e57"]},"commit2Childs":{"22f56bf98bcc4bbd169ab6c3d65b65d9f84d8e57":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22f56bf98bcc4bbd169ab6c3d65b65d9f84d8e57","54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}