{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();\n    IndexWriter writer = new IndexWriter(ramDir, analyzer, MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();\n    IndexWriter writer = new IndexWriter(ramDir, analyzer, MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":null,"sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();\n    IndexWriter writer = new IndexWriter(ramDir, analyzer, MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}