{"path":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#next(int).mjava","commits":[{"id":"55110eb60c5105294fc2ae7912d82b750865aa58","date":1341389822,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#next(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public LongsRef next(int count) throws IOException {\n    assert nextValues.length >= 0;\n    assert count > 0;\n    assert nextValues.offset + nextValues.length <= nextValues.longs.length;\n    \n    nextValues.offset += nextValues.length;\n\n    final int remaining = valueCount - position - 1;\n    if (remaining <= 0) {\n      throw new EOFException();\n    }\n    count = Math.min(remaining, count);\n\n    if (nextValues.offset == nextValues.longs.length) {\n      final int remainingBlocks = format.nblocks(bitsPerValue, remaining);\n      final int blocksToRead = Math.min(remainingBlocks, nextBlocks.length);\n      for (int i = 0; i < blocksToRead; ++i) {\n        nextBlocks[i] = in.readLong();\n      }\n      for (int i = blocksToRead; i < nextBlocks.length; ++i) {\n        nextBlocks[i] = 0L;\n      }\n\n      bulkOperation.get(nextBlocks, 0, nextValues.longs, 0, iterations);\n      nextValues.offset = 0;\n    }\n\n    nextValues.length = Math.min(nextValues.longs.length - nextValues.offset, count);\n    position += nextValues.length;\n    return nextValues;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#next(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public LongsRef next(int count) throws IOException {\n    assert nextValues.length >= 0;\n    assert count > 0;\n    assert nextValues.offset + nextValues.length <= nextValues.longs.length;\n    \n    nextValues.offset += nextValues.length;\n\n    final int remaining = valueCount - position - 1;\n    if (remaining <= 0) {\n      throw new EOFException();\n    }\n    count = Math.min(remaining, count);\n\n    if (nextValues.offset == nextValues.longs.length) {\n      final int remainingBlocks = format.nblocks(bitsPerValue, remaining);\n      final int blocksToRead = Math.min(remainingBlocks, nextBlocks.length);\n      for (int i = 0; i < blocksToRead; ++i) {\n        nextBlocks[i] = in.readLong();\n      }\n      for (int i = blocksToRead; i < nextBlocks.length; ++i) {\n        nextBlocks[i] = 0L;\n      }\n\n      bulkOperation.get(nextBlocks, 0, nextValues.longs, 0, iterations);\n      nextValues.offset = 0;\n    }\n\n    nextValues.length = Math.min(nextValues.longs.length - nextValues.offset, count);\n    position += nextValues.length;\n    return nextValues;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"035130b0c342f404c027af8c8870587c3741cb1e","date":1342898805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#next(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#next(int).mjava","sourceNew":"  @Override\n  public LongsRef next(int count) throws IOException {\n    assert nextValues.length >= 0;\n    assert count > 0;\n    assert nextValues.offset + nextValues.length <= nextValues.longs.length;\n\n    final long[] nextBlocks = this.nextBlocks.array();\n\n    nextValues.offset += nextValues.length;\n\n    final int remaining = valueCount - position - 1;\n    if (remaining <= 0) {\n      throw new EOFException();\n    }\n    count = Math.min(remaining, count);\n\n    if (nextValues.offset == nextValues.longs.length) {\n      final int remainingBlocks = format.nblocks(bitsPerValue, remaining);\n      final int blocksToRead = Math.min(remainingBlocks, nextBlocks.length);\n      for (int i = 0; i < blocksToRead; ++i) {\n        nextBlocks[i] = in.readLong();\n      }\n      for (int i = blocksToRead; i < nextBlocks.length; ++i) {\n        nextBlocks[i] = 0L;\n      }\n\n      this.nextBlocks.rewind();\n      nextValuesBuffer.clear();\n      bulkOperation.decode(this.nextBlocks, nextValuesBuffer, iterations);\n      nextValues.offset = 0;\n    }\n\n    nextValues.length = Math.min(nextValues.longs.length - nextValues.offset, count);\n    position += nextValues.length;\n    return nextValues;\n  }\n\n","sourceOld":"  @Override\n  public LongsRef next(int count) throws IOException {\n    assert nextValues.length >= 0;\n    assert count > 0;\n    assert nextValues.offset + nextValues.length <= nextValues.longs.length;\n    \n    nextValues.offset += nextValues.length;\n\n    final int remaining = valueCount - position - 1;\n    if (remaining <= 0) {\n      throw new EOFException();\n    }\n    count = Math.min(remaining, count);\n\n    if (nextValues.offset == nextValues.longs.length) {\n      final int remainingBlocks = format.nblocks(bitsPerValue, remaining);\n      final int blocksToRead = Math.min(remainingBlocks, nextBlocks.length);\n      for (int i = 0; i < blocksToRead; ++i) {\n        nextBlocks[i] = in.readLong();\n      }\n      for (int i = blocksToRead; i < nextBlocks.length; ++i) {\n        nextBlocks[i] = 0L;\n      }\n\n      bulkOperation.get(nextBlocks, 0, nextValues.longs, 0, iterations);\n      nextValues.offset = 0;\n    }\n\n    nextValues.length = Math.min(nextValues.longs.length - nextValues.offset, count);\n    position += nextValues.length;\n    return nextValues;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#next(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#next(int).mjava","sourceNew":"  @Override\n  public LongsRef next(int count) throws IOException {\n    assert nextValues.length >= 0;\n    assert count > 0;\n    assert nextValues.offset + nextValues.length <= nextValues.longs.length;\n    \n    nextValues.offset += nextValues.length;\n\n    final int remaining = valueCount - position - 1;\n    if (remaining <= 0) {\n      throw new EOFException();\n    }\n    count = Math.min(remaining, count);\n\n    if (nextValues.offset == nextValues.longs.length) {\n      final int remainingBlocks = format.nblocks(bitsPerValue, remaining);\n      final int blocksToRead = Math.min(remainingBlocks, nextBlocks.length);\n      for (int i = 0; i < blocksToRead; ++i) {\n        nextBlocks[i] = in.readLong();\n      }\n      for (int i = blocksToRead; i < nextBlocks.length; ++i) {\n        nextBlocks[i] = 0L;\n      }\n\n      bulkOperation.decode(nextBlocks, 0, nextValues.longs, 0, iterations);\n      nextValues.offset = 0;\n    }\n\n    nextValues.length = Math.min(nextValues.longs.length - nextValues.offset, count);\n    position += nextValues.length;\n    return nextValues;\n  }\n\n","sourceOld":"  @Override\n  public LongsRef next(int count) throws IOException {\n    assert nextValues.length >= 0;\n    assert count > 0;\n    assert nextValues.offset + nextValues.length <= nextValues.longs.length;\n\n    final long[] nextBlocks = this.nextBlocks.array();\n\n    nextValues.offset += nextValues.length;\n\n    final int remaining = valueCount - position - 1;\n    if (remaining <= 0) {\n      throw new EOFException();\n    }\n    count = Math.min(remaining, count);\n\n    if (nextValues.offset == nextValues.longs.length) {\n      final int remainingBlocks = format.nblocks(bitsPerValue, remaining);\n      final int blocksToRead = Math.min(remainingBlocks, nextBlocks.length);\n      for (int i = 0; i < blocksToRead; ++i) {\n        nextBlocks[i] = in.readLong();\n      }\n      for (int i = blocksToRead; i < nextBlocks.length; ++i) {\n        nextBlocks[i] = 0L;\n      }\n\n      this.nextBlocks.rewind();\n      nextValuesBuffer.clear();\n      bulkOperation.decode(this.nextBlocks, nextValuesBuffer, iterations);\n      nextValues.offset = 0;\n    }\n\n    nextValues.length = Math.min(nextValues.longs.length - nextValues.offset, count);\n    position += nextValues.length;\n    return nextValues;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#next(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#next(int).mjava","sourceNew":"  @Override\n  public LongsRef next(int count) throws IOException {\n    assert nextValues.length >= 0;\n    assert count > 0;\n    assert nextValues.offset + nextValues.length <= nextValues.longs.length;\n    \n    nextValues.offset += nextValues.length;\n\n    final int remaining = valueCount - position - 1;\n    if (remaining <= 0) {\n      throw new EOFException();\n    }\n    count = Math.min(remaining, count);\n\n    if (nextValues.offset == nextValues.longs.length) {\n      final int remainingBlocks = format.nblocks(bitsPerValue, remaining);\n      final int blocksToRead = Math.min(remainingBlocks, nextBlocks.length);\n      for (int i = 0; i < blocksToRead; ++i) {\n        nextBlocks[i] = in.readLong();\n      }\n      for (int i = blocksToRead; i < nextBlocks.length; ++i) {\n        nextBlocks[i] = 0L;\n      }\n\n      bulkOperation.decode(nextBlocks, 0, nextValues.longs, 0, iterations);\n      nextValues.offset = 0;\n    }\n\n    nextValues.length = Math.min(nextValues.longs.length - nextValues.offset, count);\n    position += nextValues.length;\n    return nextValues;\n  }\n\n","sourceOld":"  @Override\n  public LongsRef next(int count) throws IOException {\n    assert nextValues.length >= 0;\n    assert count > 0;\n    assert nextValues.offset + nextValues.length <= nextValues.longs.length;\n    \n    nextValues.offset += nextValues.length;\n\n    final int remaining = valueCount - position - 1;\n    if (remaining <= 0) {\n      throw new EOFException();\n    }\n    count = Math.min(remaining, count);\n\n    if (nextValues.offset == nextValues.longs.length) {\n      final int remainingBlocks = format.nblocks(bitsPerValue, remaining);\n      final int blocksToRead = Math.min(remainingBlocks, nextBlocks.length);\n      for (int i = 0; i < blocksToRead; ++i) {\n        nextBlocks[i] = in.readLong();\n      }\n      for (int i = blocksToRead; i < nextBlocks.length; ++i) {\n        nextBlocks[i] = 0L;\n      }\n\n      bulkOperation.get(nextBlocks, 0, nextValues.longs, 0, iterations);\n      nextValues.offset = 0;\n    }\n\n    nextValues.length = Math.min(nextValues.longs.length - nextValues.offset, count);\n    position += nextValues.length;\n    return nextValues;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#next(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#next(int).mjava","sourceNew":"  @Override\n  public LongsRef next(int count) throws IOException {\n    assert nextValues.length >= 0;\n    assert count > 0;\n    assert nextValues.offset + nextValues.length <= nextValues.longs.length;\n    \n    nextValues.offset += nextValues.length;\n\n    final int remaining = valueCount - position - 1;\n    if (remaining <= 0) {\n      throw new EOFException();\n    }\n    count = Math.min(remaining, count);\n\n    if (nextValues.offset == nextValues.longs.length) {\n      final int remainingBlocks = format.nblocks(bitsPerValue, remaining);\n      final int blocksToRead = Math.min(remainingBlocks, nextBlocks.length);\n      for (int i = 0; i < blocksToRead; ++i) {\n        nextBlocks[i] = in.readLong();\n      }\n      for (int i = blocksToRead; i < nextBlocks.length; ++i) {\n        nextBlocks[i] = 0L;\n      }\n\n      bulkOperation.decode(nextBlocks, 0, nextValues.longs, 0, iterations);\n      nextValues.offset = 0;\n    }\n\n    nextValues.length = Math.min(nextValues.longs.length - nextValues.offset, count);\n    position += nextValues.length;\n    return nextValues;\n  }\n\n","sourceOld":"  @Override\n  public LongsRef next(int count) throws IOException {\n    assert nextValues.length >= 0;\n    assert count > 0;\n    assert nextValues.offset + nextValues.length <= nextValues.longs.length;\n    \n    nextValues.offset += nextValues.length;\n\n    final int remaining = valueCount - position - 1;\n    if (remaining <= 0) {\n      throw new EOFException();\n    }\n    count = Math.min(remaining, count);\n\n    if (nextValues.offset == nextValues.longs.length) {\n      final int remainingBlocks = format.nblocks(bitsPerValue, remaining);\n      final int blocksToRead = Math.min(remainingBlocks, nextBlocks.length);\n      for (int i = 0; i < blocksToRead; ++i) {\n        nextBlocks[i] = in.readLong();\n      }\n      for (int i = blocksToRead; i < nextBlocks.length; ++i) {\n        nextBlocks[i] = 0L;\n      }\n\n      bulkOperation.get(nextBlocks, 0, nextValues.longs, 0, iterations);\n      nextValues.offset = 0;\n    }\n\n    nextValues.length = Math.min(nextValues.longs.length - nextValues.offset, count);\n    position += nextValues.length;\n    return nextValues;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c661dcad9680b8a6ce5bf2cc583a69ec965328bc","date":1352297862,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#next(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#next(int).mjava","sourceNew":"  @Override\n  public LongsRef next(int count) throws IOException {\n    assert nextValues.length >= 0;\n    assert count > 0;\n    assert nextValues.offset + nextValues.length <= nextValues.longs.length;\n    \n    nextValues.offset += nextValues.length;\n\n    final int remaining = valueCount - position - 1;\n    if (remaining <= 0) {\n      throw new EOFException();\n    }\n    count = Math.min(remaining, count);\n\n    if (nextValues.offset == nextValues.longs.length) {\n      final long remainingBlocks = format.byteCount(packedIntsVersion, remaining, bitsPerValue);\n      final int blocksToRead = (int) Math.min(remainingBlocks, nextBlocks.length);\n      in.readBytes(nextBlocks, 0, blocksToRead);\n      if (blocksToRead < nextBlocks.length) {\n        Arrays.fill(nextBlocks, blocksToRead, nextBlocks.length, (byte) 0);\n      }\n\n      bulkOperation.decode(nextBlocks, 0, nextValues.longs, 0, iterations);\n      nextValues.offset = 0;\n    }\n\n    nextValues.length = Math.min(nextValues.longs.length - nextValues.offset, count);\n    position += nextValues.length;\n    return nextValues;\n  }\n\n","sourceOld":"  @Override\n  public LongsRef next(int count) throws IOException {\n    assert nextValues.length >= 0;\n    assert count > 0;\n    assert nextValues.offset + nextValues.length <= nextValues.longs.length;\n    \n    nextValues.offset += nextValues.length;\n\n    final int remaining = valueCount - position - 1;\n    if (remaining <= 0) {\n      throw new EOFException();\n    }\n    count = Math.min(remaining, count);\n\n    if (nextValues.offset == nextValues.longs.length) {\n      final int remainingBlocks = format.nblocks(bitsPerValue, remaining);\n      final int blocksToRead = Math.min(remainingBlocks, nextBlocks.length);\n      for (int i = 0; i < blocksToRead; ++i) {\n        nextBlocks[i] = in.readLong();\n      }\n      for (int i = blocksToRead; i < nextBlocks.length; ++i) {\n        nextBlocks[i] = 0L;\n      }\n\n      bulkOperation.decode(nextBlocks, 0, nextValues.longs, 0, iterations);\n      nextValues.offset = 0;\n    }\n\n    nextValues.length = Math.min(nextValues.longs.length - nextValues.offset, count);\n    position += nextValues.length;\n    return nextValues;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["55110eb60c5105294fc2ae7912d82b750865aa58","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"55110eb60c5105294fc2ae7912d82b750865aa58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","55110eb60c5105294fc2ae7912d82b750865aa58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c661dcad9680b8a6ce5bf2cc583a69ec965328bc":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["035130b0c342f404c027af8c8870587c3741cb1e"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["55110eb60c5105294fc2ae7912d82b750865aa58","0e3359210474c12c0b79e6400450313e3d7ef2bb"],"035130b0c342f404c027af8c8870587c3741cb1e":["fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c661dcad9680b8a6ce5bf2cc583a69ec965328bc"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"55110eb60c5105294fc2ae7912d82b750865aa58":["001b25b42373b22a52f399dbf072f1224632e8e6","fe33227f6805edab2036cbb80645cc4e2d1fa424","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["035130b0c342f404c027af8c8870587c3741cb1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55110eb60c5105294fc2ae7912d82b750865aa58","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c661dcad9680b8a6ce5bf2cc583a69ec965328bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["001b25b42373b22a52f399dbf072f1224632e8e6","c661dcad9680b8a6ce5bf2cc583a69ec965328bc"],"035130b0c342f404c027af8c8870587c3741cb1e":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}