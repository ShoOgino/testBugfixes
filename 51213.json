{"path":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#hashCode().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#hashCode().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#hashCode().mjava","sourceNew":"  /**\n   * Hashcode is similar to {@link #equals(Object)}, in that it uses\n   * the term that defines this category list to derive the hashcode.\n   * Subclasses need to ensure that equality/hashcode is correctly defined,\n   * or there could be side-effects in the {@link TotalFacetCounts} caching \n   * mechanism (as the filename for a Total Facet Counts array cache \n   * is dependent on the hashCode, so it should consistently return the same\n   * hash for identity).\n   */\n  @Override\n  public int hashCode() {\n    return this.hashCode;\n  }\n\n","sourceOld":"  /**\n   * Hashcode is similar to {@link #equals(Object)}, in that it uses\n   * the term that defines this category list to derive the hashcode.\n   * Subclasses need to ensure that equality/hashcode is correctly defined,\n   * or there could be side-effects in the {@link TotalFacetCounts} caching \n   * mechanism (as the filename for a Total Facet Counts array cache \n   * is dependent on the hashCode, so it should consistently return the same\n   * hash for identity).\n   */\n  @Override\n  public int hashCode() {\n    return this.hashCode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f51b3ab4258ff4623227b0db011b8bb83db5c7","date":1358164991,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#hashCode().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    return this.hashCode;\n  }\n\n","sourceOld":"  /**\n   * Hashcode is similar to {@link #equals(Object)}, in that it uses\n   * the term that defines this category list to derive the hashcode.\n   * Subclasses need to ensure that equality/hashcode is correctly defined,\n   * or there could be side-effects in the {@link TotalFacetCounts} caching \n   * mechanism (as the filename for a Total Facet Counts array cache \n   * is dependent on the hashCode, so it should consistently return the same\n   * hash for identity).\n   */\n  @Override\n  public int hashCode() {\n    return this.hashCode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#hashCode().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    return this.hashCode;\n  }\n\n","sourceOld":"  /**\n   * Hashcode is similar to {@link #equals(Object)}, in that it uses\n   * the term that defines this category list to derive the hashcode.\n   * Subclasses need to ensure that equality/hashcode is correctly defined,\n   * or there could be side-effects in the {@link TotalFacetCounts} caching \n   * mechanism (as the filename for a Total Facet Counts array cache \n   * is dependent on the hashCode, so it should consistently return the same\n   * hash for identity).\n   */\n  @Override\n  public int hashCode() {\n    return this.hashCode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"239f79ed06f0979cfe1911ec5fba32b94fda43c1","date":1359553898,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#hashCode().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    return hashCode;\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    return this.hashCode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#hashCode().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    return hashCode;\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    return this.hashCode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/params/CategoryListParams#hashCode().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    return hashCode;\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    return hashCode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"61d5f95d14e5b9b046998c51e16709a398c15226":["8917bfede3b4ca30f4305c1e391e9218959cd723","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["b89678825b68eccaf09e6ab71675fc0b0af1e099","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["42f51b3ab4258ff4623227b0db011b8bb83db5c7","8917bfede3b4ca30f4305c1e391e9218959cd723"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["8917bfede3b4ca30f4305c1e391e9218959cd723","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"8917bfede3b4ca30f4305c1e391e9218959cd723":["61d5f95d14e5b9b046998c51e16709a398c15226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["607428da722dcb3e86bbd11c63de8986e6275c36","61d5f95d14e5b9b046998c51e16709a398c15226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}