{"path":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#emitConflicts().mjava","commits":[{"id":"b3e4bd3aed493904d0bbb6c6e0394f619e175087","date":1401446035,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#emitConflicts().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the number of direct dependencies in conflict with indirect\n   * dependencies.\n   */\n  private int emitConflicts() {\n    int conflicts = 0;\n    StringBuilder builder = new StringBuilder();\n    for (Map.Entry<String,Versions> directDependency : directDependencies.entrySet()) {\n      String coordinate = directDependency.getKey();\n      Set<Map.Entry<IvyNodeElement,Set<String>>> entrySet\n          = directDependency.getValue().conflictLocations.entrySet();\n      if (entrySet.isEmpty()) {\n        continue;\n      }\n      ++conflicts;\n      Map.Entry<IvyNodeElement,Set<String>> first = entrySet.iterator().next();\n      int notPrinted = entrySet.size() - 1;\n      builder.append(\"VERSION CONFLICT: transitive dependency in module(s) \");\n      boolean isFirst = true;\n      for (String moduleName : first.getValue()) {\n        if (isFirst) {\n          isFirst = false;\n        } else {\n          builder.append(\", \");\n        }\n        builder.append(moduleName);\n      }\n      builder.append(\":\\n\");\n      IvyNodeElement element = first.getKey();\n      builder.append('/').append(element.getOrganization()).append('/').append(element.getName())\n             .append('=').append(element.getRevision()).append('\\n');\n      emitConflict(builder, coordinate, first.getKey(), 1);\n        \n      if (notPrinted > 0) {\n        builder.append(\"... and \").append(notPrinted).append(\" more\\n\");\n      }\n      builder.append(\"\\n\");\n    }\n    if (builder.length() > 0) {\n      log(builder.toString());\n    }\n    return conflicts;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"151d28379beec3adbc4c091c633cb33e496a2de3","date":1401909314,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#emitConflicts().mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#emitConflicts().mjava","sourceNew":"  /**\n   * Returns the number of direct dependencies in conflict with indirect\n   * dependencies.\n   */\n  private int emitConflicts() {\n    int conflicts = 0;\n    StringBuilder builder = new StringBuilder();\n    for (Map.Entry<String,Dependency> directDependency : directDependencies.entrySet()) {\n      String coordinate = directDependency.getKey();\n      Set<Map.Entry<IvyNodeElement,Set<String>>> entrySet\n          = directDependency.getValue().conflictLocations.entrySet();\n      if (entrySet.isEmpty()) {\n        continue;\n      }\n      ++conflicts;\n      Map.Entry<IvyNodeElement,Set<String>> first = entrySet.iterator().next();\n      int notPrinted = entrySet.size() - 1;\n      builder.append(\"VERSION CONFLICT: transitive dependency in module(s) \");\n      boolean isFirst = true;\n      for (String moduleName : first.getValue()) {\n        if (isFirst) {\n          isFirst = false;\n        } else {\n          builder.append(\", \");\n        }\n        builder.append(moduleName);\n      }\n      builder.append(\":\\n\");\n      IvyNodeElement element = first.getKey();\n      builder.append('/').append(element.getOrganization()).append('/').append(element.getName())\n             .append('=').append(element.getRevision()).append('\\n');\n      emitConflict(builder, coordinate, first.getKey(), 1);\n        \n      if (notPrinted > 0) {\n        builder.append(\"... and \").append(notPrinted).append(\" more\\n\");\n      }\n      builder.append(\"\\n\");\n    }\n    if (builder.length() > 0) {\n      log(builder.toString());\n    }\n    return conflicts;\n  }\n\n","sourceOld":"  /**\n   * Returns the number of direct dependencies in conflict with indirect\n   * dependencies.\n   */\n  private int emitConflicts() {\n    int conflicts = 0;\n    StringBuilder builder = new StringBuilder();\n    for (Map.Entry<String,Versions> directDependency : directDependencies.entrySet()) {\n      String coordinate = directDependency.getKey();\n      Set<Map.Entry<IvyNodeElement,Set<String>>> entrySet\n          = directDependency.getValue().conflictLocations.entrySet();\n      if (entrySet.isEmpty()) {\n        continue;\n      }\n      ++conflicts;\n      Map.Entry<IvyNodeElement,Set<String>> first = entrySet.iterator().next();\n      int notPrinted = entrySet.size() - 1;\n      builder.append(\"VERSION CONFLICT: transitive dependency in module(s) \");\n      boolean isFirst = true;\n      for (String moduleName : first.getValue()) {\n        if (isFirst) {\n          isFirst = false;\n        } else {\n          builder.append(\", \");\n        }\n        builder.append(moduleName);\n      }\n      builder.append(\":\\n\");\n      IvyNodeElement element = first.getKey();\n      builder.append('/').append(element.getOrganization()).append('/').append(element.getName())\n             .append('=').append(element.getRevision()).append('\\n');\n      emitConflict(builder, coordinate, first.getKey(), 1);\n        \n      if (notPrinted > 0) {\n        builder.append(\"... and \").append(notPrinted).append(\" more\\n\");\n      }\n      builder.append(\"\\n\");\n    }\n    if (builder.length() > 0) {\n      log(builder.toString());\n    }\n    return conflicts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e025cf1c07150c8db28879d785db17eb3a66ca9f","date":1598788864,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#emitConflicts().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the number of direct dependencies in conflict with indirect\n   * dependencies.\n   */\n  private int emitConflicts() {\n    int conflicts = 0;\n    StringBuilder builder = new StringBuilder();\n    for (Map.Entry<String,Dependency> directDependency : directDependencies.entrySet()) {\n      String coordinate = directDependency.getKey();\n      Set<Map.Entry<IvyNodeElement,Set<String>>> entrySet\n          = directDependency.getValue().conflictLocations.entrySet();\n      if (entrySet.isEmpty()) {\n        continue;\n      }\n      ++conflicts;\n      Map.Entry<IvyNodeElement,Set<String>> first = entrySet.iterator().next();\n      int notPrinted = entrySet.size() - 1;\n      builder.append(\"VERSION CONFLICT: transitive dependency in module(s) \");\n      boolean isFirst = true;\n      for (String moduleName : first.getValue()) {\n        if (isFirst) {\n          isFirst = false;\n        } else {\n          builder.append(\", \");\n        }\n        builder.append(moduleName);\n      }\n      builder.append(\":\\n\");\n      IvyNodeElement element = first.getKey();\n      builder.append('/').append(element.getOrganization()).append('/').append(element.getName())\n             .append('=').append(element.getRevision()).append('\\n');\n      emitConflict(builder, coordinate, first.getKey(), 1);\n        \n      if (notPrinted > 0) {\n        builder.append(\"... and \").append(notPrinted).append(\" more\\n\");\n      }\n      builder.append(\"\\n\");\n    }\n    if (builder.length() > 0) {\n      log(builder.toString());\n    }\n    return conflicts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"151d28379beec3adbc4c091c633cb33e496a2de3":["b3e4bd3aed493904d0bbb6c6e0394f619e175087"],"e025cf1c07150c8db28879d785db17eb3a66ca9f":["151d28379beec3adbc4c091c633cb33e496a2de3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3e4bd3aed493904d0bbb6c6e0394f619e175087":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e025cf1c07150c8db28879d785db17eb3a66ca9f"]},"commit2Childs":{"151d28379beec3adbc4c091c633cb33e496a2de3":["e025cf1c07150c8db28879d785db17eb3a66ca9f"],"e025cf1c07150c8db28879d785db17eb3a66ca9f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3e4bd3aed493904d0bbb6c6e0394f619e175087"],"b3e4bd3aed493904d0bbb6c6e0394f619e175087":["151d28379beec3adbc4c091c633cb33e496a2de3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}