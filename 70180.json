{"path":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#parallel(Random).mjava","commits":[{"id":"6e09a3a223be07d75777515a717312813221fe58","date":1328908385,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#parallel(Random).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelReader#parallel(Random).mjava","sourceNew":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    ParallelAtomicReader pr = new ParallelAtomicReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n    return newSearcher(pr);\n  }\n\n","sourceOld":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)));\n    pr.add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n    return newSearcher(pr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e99275efa2c9c9ae3bdba986218af82f2bf3dc30","date":1354658499,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#parallel(Random).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#parallel(Random).mjava","sourceNew":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    ParallelAtomicReader pr = new ParallelAtomicReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n    _TestUtil.checkReader(pr);\n    return newSearcher(pr);\n  }\n\n","sourceOld":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    ParallelAtomicReader pr = new ParallelAtomicReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n    return newSearcher(pr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#parallel(Random).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#parallel(Random).mjava","sourceNew":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    ParallelAtomicReader pr = new ParallelAtomicReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n    _TestUtil.checkReader(pr);\n    return newSearcher(pr);\n  }\n\n","sourceOld":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    ParallelAtomicReader pr = new ParallelAtomicReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n    return newSearcher(pr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#parallel(Random).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#parallel(Random).mjava","sourceNew":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    ParallelAtomicReader pr = new ParallelAtomicReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n    TestUtil.checkReader(pr);\n    return newSearcher(pr);\n  }\n\n","sourceOld":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    ParallelAtomicReader pr = new ParallelAtomicReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n    _TestUtil.checkReader(pr);\n    return newSearcher(pr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#parallel(Random).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#parallel(Random).mjava","sourceNew":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    ParallelLeafReader pr = new ParallelLeafReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n    TestUtil.checkReader(pr);\n    return newSearcher(pr);\n  }\n\n","sourceOld":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    ParallelAtomicReader pr = new ParallelAtomicReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n    TestUtil.checkReader(pr);\n    return newSearcher(pr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9644a32526f2e2ae87543b00e8be543aa25f29c","date":1411548458,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelLeafReader#parallel(Random).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#parallel(Random).mjava","sourceNew":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    ParallelLeafReader pr = new ParallelLeafReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n    TestUtil.checkReader(pr);\n    return newSearcher(pr);\n  }\n\n","sourceOld":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    ParallelLeafReader pr = new ParallelLeafReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n    TestUtil.checkReader(pr);\n    return newSearcher(pr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c9644a32526f2e2ae87543b00e8be543aa25f29c":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["6e09a3a223be07d75777515a717312813221fe58","e99275efa2c9c9ae3bdba986218af82f2bf3dc30"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e99275efa2c9c9ae3bdba986218af82f2bf3dc30":["6e09a3a223be07d75777515a717312813221fe58"],"6e09a3a223be07d75777515a717312813221fe58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9644a32526f2e2ae87543b00e8be543aa25f29c"]},"commit2Childs":{"c9644a32526f2e2ae87543b00e8be543aa25f29c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"e99275efa2c9c9ae3bdba986218af82f2bf3dc30":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e09a3a223be07d75777515a717312813221fe58"],"6e09a3a223be07d75777515a717312813221fe58":["d4d69c535930b5cce125cff868d40f6373dc27d4","e99275efa2c9c9ae3bdba986218af82f2bf3dc30"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["c9644a32526f2e2ae87543b00e8be543aa25f29c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}