{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteTerms(terms);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteTerms(terms);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteTerms(terms);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteTerms(terms);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":["334c1175813aea771a71728cd2c4ee4754fd0603"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteTerms(terms);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteTerms(terms);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteTerms(terms)) {\n        processEvents(true, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteTerms(terms);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteTerms(terms)) {\n        processEvents(true, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteTerms(terms);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteTerms(terms)) {\n        processEvents(true, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteTerms(terms);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"949847c0040cd70a68222d526cb0da7bf6cbb3c2","date":1410997182,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteTerms(terms)) {\n        processEvents(true, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      tragicEvent(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteTerms(terms)) {\n        processEvents(true, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["c48871ed951104729f5e17a8ee1091b43fa18980"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c48871ed951104729f5e17a8ee1091b43fa18980","date":1446564542,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteTerms(terms)) {\n        processEvents(true, false);\n      }\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteTerms(terms)) {\n        processEvents(true, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      tragicEvent(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":["01deb9e9fb9dbd5fddce32a5fcd952bbb611fe63","949847c0040cd70a68222d526cb0da7bf6cbb3c2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f492fe129985750df09c8dac738aecc503158bb3","date":1464099630,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      long seqNo = docWriter.deleteTerms(terms);\n      if (seqNo < 0) {\n        seqNo = -seqNo;\n        processEvents(true, false);\n      }\n      return seqNo;\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"deleteDocuments(Term..)\");\n\n      // dead code but javac disagrees:\n      return -1;\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteTerms(terms)) {\n        processEvents(true, false);\n      }\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16ebfabc294f23b88b6a39722a02c9d39b353195","date":1464343867,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      long seqNo = docWriter.deleteTerms(terms);\n      if (seqNo < 0) {\n        seqNo = -seqNo;\n        processEvents(true, false);\n      }\n      return seqNo;\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"deleteDocuments(Term..)\");\n\n      // dead code but javac disagrees:\n      return -1;\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      long seqNo = docWriter.deleteTerms(terms);\n      if (seqNo < 0) {\n        seqNo = -seqNo;\n        processEvents(true, false);\n      }\n      return seqNo;\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"deleteDocuments(Term..)\");\n\n      // dead code but javac disagrees:\n      return -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6483e4260c08168709c02238ae083a51519a28dd","date":1465117546,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      long seqNo = docWriter.deleteTerms(terms);\n      if (seqNo < 0) {\n        seqNo = -seqNo;\n        processEvents(true, false);\n      }\n      return seqNo;\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"deleteDocuments(Term..)\");\n\n      // dead code but javac disagrees:\n      return -1;\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteTerms(terms)) {\n        processEvents(true, false);\n      }\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      long seqNo = docWriter.deleteTerms(terms);\n      if (seqNo < 0) {\n        seqNo = -seqNo;\n        processEvents(true, false);\n      }\n      return seqNo;\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"deleteDocuments(Term..)\");\n\n      // dead code but javac disagrees:\n      return -1;\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteTerms(terms)) {\n        processEvents(true, false);\n      }\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      long seqNo = docWriter.deleteTerms(terms);\n      if (seqNo < 0) {\n        seqNo = -seqNo;\n        processEvents(true, false);\n      }\n      return seqNo;\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"deleteDocuments(Term..)\");\n\n      // dead code but javac disagrees:\n      return -1;\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteTerms(terms)) {\n        processEvents(true, false);\n      }\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"845b760a99e5f369fcd0a5d723a87b8def6a3f56","date":1521117993,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      long seqNo = docWriter.deleteTerms(terms);\n      if (seqNo < 0) {\n        seqNo = -seqNo;\n        processEvents(true);\n      }\n      return seqNo;\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"deleteDocuments(Term..)\");\n      throw tragedy;\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      long seqNo = docWriter.deleteTerms(terms);\n      if (seqNo < 0) {\n        seqNo = -seqNo;\n        processEvents(true, false);\n      }\n      return seqNo;\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"deleteDocuments(Term..)\");\n\n      // dead code but javac disagrees:\n      return -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a9b6ed5e493fd780f940f307e17673df92a4419","date":1583776063,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      return maybeProcessEvents(docWriter.deleteTerms(terms));\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"deleteDocuments(Term..)\");\n      throw tragedy;\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long deleteDocuments(Term... terms) throws IOException {\n    ensureOpen();\n    try {\n      long seqNo = docWriter.deleteTerms(terms);\n      if (seqNo < 0) {\n        seqNo = -seqNo;\n        processEvents(true);\n      }\n      return seqNo;\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"deleteDocuments(Term..)\");\n      throw tragedy;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"845b760a99e5f369fcd0a5d723a87b8def6a3f56":["191128ac5b85671b1671e2c857437694283b6ebf"],"7af110b00ea8df9429309d83e38e0533d82e144f":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"0a9b6ed5e493fd780f940f307e17673df92a4419":["845b760a99e5f369fcd0a5d723a87b8def6a3f56"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","7af110b00ea8df9429309d83e38e0533d82e144f"],"6483e4260c08168709c02238ae083a51519a28dd":["c48871ed951104729f5e17a8ee1091b43fa18980","16ebfabc294f23b88b6a39722a02c9d39b353195"],"191128ac5b85671b1671e2c857437694283b6ebf":["c48871ed951104729f5e17a8ee1091b43fa18980","6483e4260c08168709c02238ae083a51519a28dd"],"16ebfabc294f23b88b6a39722a02c9d39b353195":["f492fe129985750df09c8dac738aecc503158bb3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c48871ed951104729f5e17a8ee1091b43fa18980","191128ac5b85671b1671e2c857437694283b6ebf"],"c48871ed951104729f5e17a8ee1091b43fa18980":["949847c0040cd70a68222d526cb0da7bf6cbb3c2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f492fe129985750df09c8dac738aecc503158bb3":["c48871ed951104729f5e17a8ee1091b43fa18980"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"949847c0040cd70a68222d526cb0da7bf6cbb3c2":["7af110b00ea8df9429309d83e38e0533d82e144f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a9b6ed5e493fd780f940f307e17673df92a4419"]},"commit2Childs":{"845b760a99e5f369fcd0a5d723a87b8def6a3f56":["0a9b6ed5e493fd780f940f307e17673df92a4419"],"7af110b00ea8df9429309d83e38e0533d82e144f":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","949847c0040cd70a68222d526cb0da7bf6cbb3c2"],"0a9b6ed5e493fd780f940f307e17673df92a4419":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"6483e4260c08168709c02238ae083a51519a28dd":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["845b760a99e5f369fcd0a5d723a87b8def6a3f56","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"16ebfabc294f23b88b6a39722a02c9d39b353195":["6483e4260c08168709c02238ae083a51519a28dd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c48871ed951104729f5e17a8ee1091b43fa18980":["6483e4260c08168709c02238ae083a51519a28dd","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f492fe129985750df09c8dac738aecc503158bb3"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f492fe129985750df09c8dac738aecc503158bb3":["16ebfabc294f23b88b6a39722a02c9d39b353195"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"949847c0040cd70a68222d526cb0da7bf6cbb3c2":["c48871ed951104729f5e17a8ee1091b43fa18980"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}