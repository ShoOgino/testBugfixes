{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilterFactory#testCustomTypes().mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilterFactory#testCustomTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","sourceNew":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","sourceOld":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10ddcde450bb525af01593bf6aa68f1f67e81b0d","date":1343104612,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilterFactory#testCustomTypes().mjava","sourceNew":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","sourceOld":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"10ddcde450bb525af01593bf6aa68f1f67e81b0d":["3241e06e642196396b80bb293acd9c0814d079e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"10ddcde450bb525af01593bf6aa68f1f67e81b0d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3241e06e642196396b80bb293acd9c0814d079e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3241e06e642196396b80bb293acd9c0814d079e0":["10ddcde450bb525af01593bf6aa68f1f67e81b0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["10ddcde450bb525af01593bf6aa68f1f67e81b0d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}