{"path":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testAllLatEqual().mjava","commits":[{"id":"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96","date":1433340999,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testAllLatEqual().mjava","pathOld":"/dev/null","sourceNew":"  public void testAllLatEqual() throws Exception {\n    int numPoints = atLeast(10000);\n    double lat = randomLat();\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    for(int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x == 14 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        // Fully identical point:\n        lons[docID] = lons[oldDocID];\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lat + \" lon=\" + lons[docID] + \" (same lat/lon as doc=\" + oldDocID + \")\");\n        }\n      } else {\n        lons[docID] = randomLon();\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lat + \" lon=\" + lons[docID]);\n        }\n      }\n      lats[docID] = lat;\n    }\n\n    verify(lats, lons);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07c50cb1eca5629cac5b6702dd0f5e06157af61a","date":1445464748,"type":4,"author":"Nick Knize","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testAllLatEqual().mjava","sourceNew":null,"sourceOld":"  public void testAllLatEqual() throws Exception {\n    int numPoints = atLeast(10000);\n    double lat = randomLat();\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    for(int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x == 14 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        // Fully identical point:\n        lons[docID] = lons[oldDocID];\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lat + \" lon=\" + lons[docID] + \" (same lat/lon as doc=\" + oldDocID + \")\");\n        }\n      } else {\n        lons[docID] = randomLon();\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lat + \" lon=\" + lons[docID]);\n        }\n      }\n      lats[docID] = lat;\n    }\n\n    verify(lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}