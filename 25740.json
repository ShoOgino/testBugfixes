{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#TopicStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"10b9c6c42133576daaccbd79bd04c88511b9caca","date":1455930223,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#TopicStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public TopicStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String checkpointCollectionName = factory.getValueOperand(expression, 0);\n    String collectionName = factory.getValueOperand(expression, 1);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    StreamExpressionNamedParameter idParam = factory.getNamedOperand(expression, \"id\");\n    if(null == idParam) {\n      throw new IOException(\"invalid TopicStream id cannot be null\");\n    }\n\n    StreamExpressionNamedParameter flParam = factory.getNamedOperand(expression, \"fl\");\n\n    if(null == flParam) {\n      throw new IOException(\"invalid TopicStream fl cannot be null\");\n    }\n\n    long checkpointEvery = -1;\n    StreamExpressionNamedParameter checkpointEveryParam = factory.getNamedOperand(expression, \"checkpointEvery\");\n\n    if(checkpointEveryParam != null) {\n      checkpointEvery = Long.parseLong(((StreamExpressionValue) checkpointEveryParam.getParameter()).getValue());\n    }\n\n    //  Checkpoint Collection Name\n    if(null == checkpointCollectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - checkpointCollectionName expected as first operand\",expression));\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as second operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"id\") &&\n          !namedParam.getName().equals(\"checkpointEvery\")) {\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost,\n        checkpointCollectionName,\n        collectionName,\n        ((StreamExpressionValue) idParam.getParameter()).getValue(),\n        checkpointEvery,\n        params);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#TopicStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#TopicStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public TopicStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String checkpointCollectionName = factory.getValueOperand(expression, 0);\n    String collectionName = factory.getValueOperand(expression, 1);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    StreamExpressionNamedParameter idParam = factory.getNamedOperand(expression, \"id\");\n    if(null == idParam) {\n      throw new IOException(\"invalid TopicStream id cannot be null\");\n    }\n\n    StreamExpressionNamedParameter flParam = factory.getNamedOperand(expression, \"fl\");\n\n    if(null == flParam) {\n      throw new IOException(\"invalid TopicStream fl cannot be null\");\n    }\n\n    long checkpointEvery = -1;\n    StreamExpressionNamedParameter checkpointEveryParam = factory.getNamedOperand(expression, \"checkpointEvery\");\n\n    if(checkpointEveryParam != null) {\n      checkpointEvery = Long.parseLong(((StreamExpressionValue) checkpointEveryParam.getParameter()).getValue());\n    }\n\n    //  Checkpoint Collection Name\n    if(null == checkpointCollectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - checkpointCollectionName expected as first operand\",expression));\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as second operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"id\") &&\n          !namedParam.getName().equals(\"checkpointEvery\")) {\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost,\n        checkpointCollectionName,\n        collectionName,\n        ((StreamExpressionValue) idParam.getParameter()).getValue(),\n        checkpointEvery,\n        params);\n  }\n\n","sourceOld":"  public TopicStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String checkpointCollectionName = factory.getValueOperand(expression, 0);\n    String collectionName = factory.getValueOperand(expression, 1);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    StreamExpressionNamedParameter idParam = factory.getNamedOperand(expression, \"id\");\n    if(null == idParam) {\n      throw new IOException(\"invalid TopicStream id cannot be null\");\n    }\n\n    StreamExpressionNamedParameter flParam = factory.getNamedOperand(expression, \"fl\");\n\n    if(null == flParam) {\n      throw new IOException(\"invalid TopicStream fl cannot be null\");\n    }\n\n    long checkpointEvery = -1;\n    StreamExpressionNamedParameter checkpointEveryParam = factory.getNamedOperand(expression, \"checkpointEvery\");\n\n    if(checkpointEveryParam != null) {\n      checkpointEvery = Long.parseLong(((StreamExpressionValue) checkpointEveryParam.getParameter()).getValue());\n    }\n\n    //  Checkpoint Collection Name\n    if(null == checkpointCollectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - checkpointCollectionName expected as first operand\",expression));\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as second operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"id\") &&\n          !namedParam.getName().equals(\"checkpointEvery\")) {\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost,\n        checkpointCollectionName,\n        collectionName,\n        ((StreamExpressionValue) idParam.getParameter()).getValue(),\n        checkpointEvery,\n        params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#TopicStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#TopicStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public TopicStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String checkpointCollectionName = factory.getValueOperand(expression, 0);\n    String collectionName = factory.getValueOperand(expression, 1);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    StreamExpressionNamedParameter idParam = factory.getNamedOperand(expression, \"id\");\n    if(null == idParam) {\n      throw new IOException(\"invalid TopicStream id cannot be null\");\n    }\n\n    StreamExpressionNamedParameter flParam = factory.getNamedOperand(expression, \"fl\");\n\n    if(null == flParam) {\n      throw new IOException(\"invalid TopicStream fl cannot be null\");\n    }\n\n    long checkpointEvery = -1;\n    StreamExpressionNamedParameter checkpointEveryParam = factory.getNamedOperand(expression, \"checkpointEvery\");\n\n    if(checkpointEveryParam != null) {\n      checkpointEvery = Long.parseLong(((StreamExpressionValue) checkpointEveryParam.getParameter()).getValue());\n    }\n\n    //  Checkpoint Collection Name\n    if(null == checkpointCollectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - checkpointCollectionName expected as first operand\",expression));\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as second operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"id\") &&\n          !namedParam.getName().equals(\"checkpointEvery\")) {\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost,\n        checkpointCollectionName,\n        collectionName,\n        ((StreamExpressionValue) idParam.getParameter()).getValue(),\n        checkpointEvery,\n        params);\n  }\n\n","sourceOld":"  public TopicStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String checkpointCollectionName = factory.getValueOperand(expression, 0);\n    String collectionName = factory.getValueOperand(expression, 1);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    StreamExpressionNamedParameter idParam = factory.getNamedOperand(expression, \"id\");\n    if(null == idParam) {\n      throw new IOException(\"invalid TopicStream id cannot be null\");\n    }\n\n    StreamExpressionNamedParameter flParam = factory.getNamedOperand(expression, \"fl\");\n\n    if(null == flParam) {\n      throw new IOException(\"invalid TopicStream fl cannot be null\");\n    }\n\n    long checkpointEvery = -1;\n    StreamExpressionNamedParameter checkpointEveryParam = factory.getNamedOperand(expression, \"checkpointEvery\");\n\n    if(checkpointEveryParam != null) {\n      checkpointEvery = Long.parseLong(((StreamExpressionValue) checkpointEveryParam.getParameter()).getValue());\n    }\n\n    //  Checkpoint Collection Name\n    if(null == checkpointCollectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - checkpointCollectionName expected as first operand\",expression));\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as second operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"id\") &&\n          !namedParam.getName().equals(\"checkpointEvery\")) {\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost,\n        checkpointCollectionName,\n        collectionName,\n        ((StreamExpressionValue) idParam.getParameter()).getValue(),\n        checkpointEvery,\n        params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#TopicStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#TopicStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public TopicStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String checkpointCollectionName = factory.getValueOperand(expression, 0);\n    String collectionName = factory.getValueOperand(expression, 1);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    StreamExpressionNamedParameter idParam = factory.getNamedOperand(expression, \"id\");\n    if(null == idParam) {\n      throw new IOException(\"invalid TopicStream id cannot be null\");\n    }\n\n    StreamExpressionNamedParameter flParam = factory.getNamedOperand(expression, \"fl\");\n\n    if(null == flParam) {\n      throw new IOException(\"invalid TopicStream fl cannot be null\");\n    }\n\n    long checkpointEvery = -1;\n    StreamExpressionNamedParameter checkpointEveryParam = factory.getNamedOperand(expression, \"checkpointEvery\");\n\n    if(checkpointEveryParam != null) {\n      checkpointEvery = Long.parseLong(((StreamExpressionValue) checkpointEveryParam.getParameter()).getValue());\n    }\n\n    //  Checkpoint Collection Name\n    if(null == checkpointCollectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - checkpointCollectionName expected as first operand\",expression));\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as second operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"id\") &&\n          !namedParam.getName().equals(\"checkpointEvery\")) {\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost,\n        checkpointCollectionName,\n        collectionName,\n        ((StreamExpressionValue) idParam.getParameter()).getValue(),\n        checkpointEvery,\n        params);\n  }\n\n","sourceOld":"  public TopicStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String checkpointCollectionName = factory.getValueOperand(expression, 0);\n    String collectionName = factory.getValueOperand(expression, 1);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    StreamExpressionNamedParameter idParam = factory.getNamedOperand(expression, \"id\");\n    if(null == idParam) {\n      throw new IOException(\"invalid TopicStream id cannot be null\");\n    }\n\n    StreamExpressionNamedParameter flParam = factory.getNamedOperand(expression, \"fl\");\n\n    if(null == flParam) {\n      throw new IOException(\"invalid TopicStream fl cannot be null\");\n    }\n\n    long checkpointEvery = -1;\n    StreamExpressionNamedParameter checkpointEveryParam = factory.getNamedOperand(expression, \"checkpointEvery\");\n\n    if(checkpointEveryParam != null) {\n      checkpointEvery = Long.parseLong(((StreamExpressionValue) checkpointEveryParam.getParameter()).getValue());\n    }\n\n    //  Checkpoint Collection Name\n    if(null == checkpointCollectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - checkpointCollectionName expected as first operand\",expression));\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as second operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"id\") &&\n          !namedParam.getName().equals(\"checkpointEvery\")) {\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost,\n        checkpointCollectionName,\n        collectionName,\n        ((StreamExpressionValue) idParam.getParameter()).getValue(),\n        checkpointEvery,\n        params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"915201312eef398482b3dffe8a297e1809f3b29a","date":1468722990,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#TopicStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#TopicStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public TopicStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String checkpointCollectionName = factory.getValueOperand(expression, 0);\n    String collectionName = factory.getValueOperand(expression, 1);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    StreamExpressionNamedParameter idParam = factory.getNamedOperand(expression, \"id\");\n    if(null == idParam) {\n      throw new IOException(\"invalid TopicStream id cannot be null\");\n    }\n\n    StreamExpressionNamedParameter flParam = factory.getNamedOperand(expression, \"fl\");\n\n    if(null == flParam) {\n      throw new IOException(\"invalid TopicStream fl cannot be null\");\n    }\n\n    long initialCheckpoint = -1;\n    StreamExpressionNamedParameter initialCheckpointParam = factory.getNamedOperand(expression, \"initialCheckpoint\");\n\n    if(initialCheckpointParam != null) {\n      initialCheckpoint = Long.parseLong(((StreamExpressionValue) initialCheckpointParam.getParameter()).getValue());\n    }\n\n    long checkpointEvery = -1;\n    StreamExpressionNamedParameter checkpointEveryParam = factory.getNamedOperand(expression, \"checkpointEvery\");\n\n    if(checkpointEveryParam != null) {\n      checkpointEvery = Long.parseLong(((StreamExpressionValue) checkpointEveryParam.getParameter()).getValue());\n    }\n\n    //  Checkpoint Collection Name\n    if(null == checkpointCollectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - checkpointCollectionName expected as first operand\",expression));\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as second operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"id\") &&\n          !namedParam.getName().equals(\"checkpointEvery\")) {\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost,\n        checkpointCollectionName,\n        collectionName,\n        ((StreamExpressionValue) idParam.getParameter()).getValue(),\n        initialCheckpoint,\n        checkpointEvery,\n        params);\n  }\n\n","sourceOld":"  public TopicStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String checkpointCollectionName = factory.getValueOperand(expression, 0);\n    String collectionName = factory.getValueOperand(expression, 1);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    StreamExpressionNamedParameter idParam = factory.getNamedOperand(expression, \"id\");\n    if(null == idParam) {\n      throw new IOException(\"invalid TopicStream id cannot be null\");\n    }\n\n    StreamExpressionNamedParameter flParam = factory.getNamedOperand(expression, \"fl\");\n\n    if(null == flParam) {\n      throw new IOException(\"invalid TopicStream fl cannot be null\");\n    }\n\n    long checkpointEvery = -1;\n    StreamExpressionNamedParameter checkpointEveryParam = factory.getNamedOperand(expression, \"checkpointEvery\");\n\n    if(checkpointEveryParam != null) {\n      checkpointEvery = Long.parseLong(((StreamExpressionValue) checkpointEveryParam.getParameter()).getValue());\n    }\n\n    //  Checkpoint Collection Name\n    if(null == checkpointCollectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - checkpointCollectionName expected as first operand\",expression));\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as second operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"id\") &&\n          !namedParam.getName().equals(\"checkpointEvery\")) {\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost,\n        checkpointCollectionName,\n        collectionName,\n        ((StreamExpressionValue) idParam.getParameter()).getValue(),\n        checkpointEvery,\n        params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#TopicStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#TopicStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public TopicStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String checkpointCollectionName = factory.getValueOperand(expression, 0);\n    String collectionName = factory.getValueOperand(expression, 1);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    StreamExpressionNamedParameter idParam = factory.getNamedOperand(expression, \"id\");\n    if(null == idParam) {\n      throw new IOException(\"invalid TopicStream id cannot be null\");\n    }\n\n    StreamExpressionNamedParameter flParam = factory.getNamedOperand(expression, \"fl\");\n\n    if(null == flParam) {\n      throw new IOException(\"invalid TopicStream fl cannot be null\");\n    }\n\n    long initialCheckpoint = -1;\n    StreamExpressionNamedParameter initialCheckpointParam = factory.getNamedOperand(expression, \"initialCheckpoint\");\n\n    if(initialCheckpointParam != null) {\n      initialCheckpoint = Long.parseLong(((StreamExpressionValue) initialCheckpointParam.getParameter()).getValue());\n    }\n\n    long checkpointEvery = -1;\n    StreamExpressionNamedParameter checkpointEveryParam = factory.getNamedOperand(expression, \"checkpointEvery\");\n\n    if(checkpointEveryParam != null) {\n      checkpointEvery = Long.parseLong(((StreamExpressionValue) checkpointEveryParam.getParameter()).getValue());\n    }\n\n    //  Checkpoint Collection Name\n    if(null == checkpointCollectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - checkpointCollectionName expected as first operand\",expression));\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as second operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"id\") &&\n          !namedParam.getName().equals(\"checkpointEvery\")) {\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost,\n        checkpointCollectionName,\n        collectionName,\n        ((StreamExpressionValue) idParam.getParameter()).getValue(),\n        initialCheckpoint,\n        checkpointEvery,\n        params);\n  }\n\n","sourceOld":"  public TopicStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String checkpointCollectionName = factory.getValueOperand(expression, 0);\n    String collectionName = factory.getValueOperand(expression, 1);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    StreamExpressionNamedParameter idParam = factory.getNamedOperand(expression, \"id\");\n    if(null == idParam) {\n      throw new IOException(\"invalid TopicStream id cannot be null\");\n    }\n\n    StreamExpressionNamedParameter flParam = factory.getNamedOperand(expression, \"fl\");\n\n    if(null == flParam) {\n      throw new IOException(\"invalid TopicStream fl cannot be null\");\n    }\n\n    long checkpointEvery = -1;\n    StreamExpressionNamedParameter checkpointEveryParam = factory.getNamedOperand(expression, \"checkpointEvery\");\n\n    if(checkpointEveryParam != null) {\n      checkpointEvery = Long.parseLong(((StreamExpressionValue) checkpointEveryParam.getParameter()).getValue());\n    }\n\n    //  Checkpoint Collection Name\n    if(null == checkpointCollectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - checkpointCollectionName expected as first operand\",expression));\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as second operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"id\") &&\n          !namedParam.getName().equals(\"checkpointEvery\")) {\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost,\n        checkpointCollectionName,\n        collectionName,\n        ((StreamExpressionValue) idParam.getParameter()).getValue(),\n        checkpointEvery,\n        params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#TopicStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#TopicStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public TopicStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String checkpointCollectionName = factory.getValueOperand(expression, 0);\n    String collectionName = factory.getValueOperand(expression, 1);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    StreamExpressionNamedParameter idParam = factory.getNamedOperand(expression, ID);\n    if(null == idParam) {\n      throw new IOException(\"invalid TopicStream id cannot be null\");\n    }\n\n    StreamExpressionNamedParameter flParam = factory.getNamedOperand(expression, \"fl\");\n\n    if(null == flParam) {\n      throw new IOException(\"invalid TopicStream fl cannot be null\");\n    }\n\n    long initialCheckpoint = -1;\n    StreamExpressionNamedParameter initialCheckpointParam = factory.getNamedOperand(expression, \"initialCheckpoint\");\n\n    if(initialCheckpointParam != null) {\n      initialCheckpoint = Long.parseLong(((StreamExpressionValue) initialCheckpointParam.getParameter()).getValue());\n    }\n\n    long checkpointEvery = -1;\n    StreamExpressionNamedParameter checkpointEveryParam = factory.getNamedOperand(expression, \"checkpointEvery\");\n\n    if(checkpointEveryParam != null) {\n      checkpointEvery = Long.parseLong(((StreamExpressionValue) checkpointEveryParam.getParameter()).getValue());\n    }\n\n    //  Checkpoint Collection Name\n    if(null == checkpointCollectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - checkpointCollectionName expected as first operand\",expression));\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as second operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(ID) &&\n          !namedParam.getName().equals(\"checkpointEvery\")) {\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost,\n        checkpointCollectionName,\n        collectionName,\n        ((StreamExpressionValue) idParam.getParameter()).getValue(),\n        initialCheckpoint,\n        checkpointEvery,\n        params);\n  }\n\n","sourceOld":"  public TopicStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String checkpointCollectionName = factory.getValueOperand(expression, 0);\n    String collectionName = factory.getValueOperand(expression, 1);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    StreamExpressionNamedParameter idParam = factory.getNamedOperand(expression, \"id\");\n    if(null == idParam) {\n      throw new IOException(\"invalid TopicStream id cannot be null\");\n    }\n\n    StreamExpressionNamedParameter flParam = factory.getNamedOperand(expression, \"fl\");\n\n    if(null == flParam) {\n      throw new IOException(\"invalid TopicStream fl cannot be null\");\n    }\n\n    long initialCheckpoint = -1;\n    StreamExpressionNamedParameter initialCheckpointParam = factory.getNamedOperand(expression, \"initialCheckpoint\");\n\n    if(initialCheckpointParam != null) {\n      initialCheckpoint = Long.parseLong(((StreamExpressionValue) initialCheckpointParam.getParameter()).getValue());\n    }\n\n    long checkpointEvery = -1;\n    StreamExpressionNamedParameter checkpointEveryParam = factory.getNamedOperand(expression, \"checkpointEvery\");\n\n    if(checkpointEveryParam != null) {\n      checkpointEvery = Long.parseLong(((StreamExpressionValue) checkpointEveryParam.getParameter()).getValue());\n    }\n\n    //  Checkpoint Collection Name\n    if(null == checkpointCollectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - checkpointCollectionName expected as first operand\",expression));\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as second operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"id\") &&\n          !namedParam.getName().equals(\"checkpointEvery\")) {\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost,\n        checkpointCollectionName,\n        collectionName,\n        ((StreamExpressionValue) idParam.getParameter()).getValue(),\n        initialCheckpoint,\n        checkpointEvery,\n        params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#TopicStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#TopicStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public TopicStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String checkpointCollectionName = factory.getValueOperand(expression, 0);\n    String collectionName = factory.getValueOperand(expression, 1);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    StreamExpressionNamedParameter idParam = factory.getNamedOperand(expression, ID);\n    if(null == idParam) {\n      throw new IOException(\"invalid TopicStream id cannot be null\");\n    }\n\n    StreamExpressionNamedParameter flParam = factory.getNamedOperand(expression, \"fl\");\n\n    if(null == flParam) {\n      throw new IOException(\"invalid TopicStream fl cannot be null\");\n    }\n\n    long initialCheckpoint = -1;\n    StreamExpressionNamedParameter initialCheckpointParam = factory.getNamedOperand(expression, \"initialCheckpoint\");\n\n    if(initialCheckpointParam != null) {\n      initialCheckpoint = Long.parseLong(((StreamExpressionValue) initialCheckpointParam.getParameter()).getValue());\n    }\n\n    long checkpointEvery = -1;\n    StreamExpressionNamedParameter checkpointEveryParam = factory.getNamedOperand(expression, \"checkpointEvery\");\n\n    if(checkpointEveryParam != null) {\n      checkpointEvery = Long.parseLong(((StreamExpressionValue) checkpointEveryParam.getParameter()).getValue());\n    }\n\n    //  Checkpoint Collection Name\n    if(null == checkpointCollectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - checkpointCollectionName expected as first operand\",expression));\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as second operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(ID) &&\n          !namedParam.getName().equals(\"checkpointEvery\")) {\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost,\n        checkpointCollectionName,\n        collectionName,\n        ((StreamExpressionValue) idParam.getParameter()).getValue(),\n        initialCheckpoint,\n        checkpointEvery,\n        params);\n  }\n\n","sourceOld":"  public TopicStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String checkpointCollectionName = factory.getValueOperand(expression, 0);\n    String collectionName = factory.getValueOperand(expression, 1);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    StreamExpressionNamedParameter idParam = factory.getNamedOperand(expression, \"id\");\n    if(null == idParam) {\n      throw new IOException(\"invalid TopicStream id cannot be null\");\n    }\n\n    StreamExpressionNamedParameter flParam = factory.getNamedOperand(expression, \"fl\");\n\n    if(null == flParam) {\n      throw new IOException(\"invalid TopicStream fl cannot be null\");\n    }\n\n    long initialCheckpoint = -1;\n    StreamExpressionNamedParameter initialCheckpointParam = factory.getNamedOperand(expression, \"initialCheckpoint\");\n\n    if(initialCheckpointParam != null) {\n      initialCheckpoint = Long.parseLong(((StreamExpressionValue) initialCheckpointParam.getParameter()).getValue());\n    }\n\n    long checkpointEvery = -1;\n    StreamExpressionNamedParameter checkpointEveryParam = factory.getNamedOperand(expression, \"checkpointEvery\");\n\n    if(checkpointEveryParam != null) {\n      checkpointEvery = Long.parseLong(((StreamExpressionValue) checkpointEveryParam.getParameter()).getValue());\n    }\n\n    //  Checkpoint Collection Name\n    if(null == checkpointCollectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - checkpointCollectionName expected as first operand\",expression));\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as second operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"id\") &&\n          !namedParam.getName().equals(\"checkpointEvery\")) {\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost,\n        checkpointCollectionName,\n        collectionName,\n        ((StreamExpressionValue) idParam.getParameter()).getValue(),\n        initialCheckpoint,\n        checkpointEvery,\n        params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":["915201312eef398482b3dffe8a297e1809f3b29a"],"10b9c6c42133576daaccbd79bd04c88511b9caca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["915201312eef398482b3dffe8a297e1809f3b29a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"915201312eef398482b3dffe8a297e1809f3b29a":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["10b9c6c42133576daaccbd79bd04c88511b9caca","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["10b9c6c42133576daaccbd79bd04c88511b9caca","915201312eef398482b3dffe8a297e1809f3b29a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6d2dadc1f5ca8703d8659f4964961f9967935d75"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["10b9c6c42133576daaccbd79bd04c88511b9caca","826d15444ddf61716dc768c229cd54b2c2ccce1c"]},"commit2Childs":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"10b9c6c42133576daaccbd79bd04c88511b9caca":["e66a459d38c1c4a2f97128433dab546f683a9fed","826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"915201312eef398482b3dffe8a297e1809f3b29a":["e5fa6615014cd2288fe930f8c8bb726f9504961d","6d2dadc1f5ca8703d8659f4964961f9967935d75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["915201312eef398482b3dffe8a297e1809f3b29a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5fa6615014cd2288fe930f8c8bb726f9504961d","e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}