{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.MetricsFetchingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","commits":[{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.MetricsFetchingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      if (!((ClientSnitchCtx)ctx).isNodeAlive(solrNode)) return;\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", (Function<Object, Pair<String, Object>>) o -> {\n          if(\"true\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n          }\n          if(\"false\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n          }\n          return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains (Variable.TOTALDISK.tagName)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.totalSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.cores\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invokeWithRetry(solrNode, CommonParams.METRICS_PATH, params);\n        NamedList<?> metrics = (NamedList<?>) rsp.nl.get(\"metrics\");\n\n        if (requestedTags.contains(Variable.FREEDISK.tagName)) {\n          Object n = Utils.getObjectByPath(metrics, true, \"solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(Variable.FREEDISK.tagName, Variable.FREEDISK.convertVal(n));\n        }\n        if (requestedTags.contains(Variable.TOTALDISK.tagName)) {\n          Object n = Utils.getObjectByPath(metrics, true, \"solr.node/CONTAINER.fs.totalSpace\");\n          if (n != null) ctx.getTags().put(Variable.TOTALDISK.tagName, Variable.TOTALDISK.convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          NamedList<?> node = (NamedList<?>) metrics.get(\"solr.node\");\n          int count = 0;\n          for (String leafCoreMetricName : new String[]{\"lazy\", \"loaded\", \"unloaded\"}) {\n            Number n = (Number) node.get(\"CONTAINER.cores.\" + leafCoreMetricName);\n            if (n != null) count += n.intValue();\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(metrics, true, \"solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(metrics, true, \"solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting remote info\", e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}