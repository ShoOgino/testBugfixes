{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testGetRelationship().mjava","commits":[{"id":"851e4197476b684154a7b65f996f535522e67400","date":1428926498,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testGetRelationship().mjava","pathOld":"/dev/null","sourceNew":"    @Test\n    public void testGetRelationship() {\n        GeoArea rect;\n        GeoPath p;\n\n        // Start by testing the basic kinds of relationship, increasing in order of difficulty.\n\n        p = new GeoPath(0.1);\n        p.addPoint(-0.3,-0.3);\n        p.addPoint(0.3,0.3);\n        // Easiest: The path is wholly contains the georect\n        rect = new GeoRectangle(0.05,-0.05,-0.05,0.05);\n        assertEquals(GeoArea.CONTAINS, rect.getRelationship(p));\n        // Next easiest: Some endpoints of the rectangle are inside, and some are outside.\n        rect = new GeoRectangle(0.05,-0.05,-0.05,0.5);\n        assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n        // Now, all points are outside, but the figures intersect\n        rect = new GeoRectangle(0.05,-0.05,-0.5,0.5);\n        assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n        // Finally, all points are outside, and the figures *do not* intersect\n        rect = new GeoRectangle(0.5,-0.5,-0.5,0.5);\n        assertEquals(GeoArea.WITHIN, rect.getRelationship(p));\n        // Check that segment edge overlap detection works\n        rect = new GeoRectangle(0.1,0.0,-0.1,0.0);\n        assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n        rect = new GeoRectangle(0.2,0.1,-0.2,-0.1);\n        assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n        // Check if overlap at endpoints behaves as expected next\n        rect = new GeoRectangle(0.5,-0.5,-0.5,-0.35);\n        assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n        rect = new GeoRectangle(0.5,-0.5,-0.5,-0.45);\n        assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d8f71af177fad4bbfdf462d318247e573faac27f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0fb9dbed1415914caa27460f8abb7afadaa61451","date":1429504289,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testGetRelationship().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testGetRelationship().mjava","sourceNew":"    @Test\n    public void testGetRelationship() {\n        GeoArea rect;\n        GeoPath p;\n\n        // Start by testing the basic kinds of relationship, increasing in order of difficulty.\n\n        p = new GeoPath(0.1);\n        p.addPoint(-0.3,-0.3);\n        p.addPoint(0.3,0.3);\n        p.done();\n        // Easiest: The path is wholly contains the georect\n        rect = new GeoRectangle(0.05,-0.05,-0.05,0.05);\n        assertEquals(GeoArea.CONTAINS, rect.getRelationship(p));\n        // Next easiest: Some endpoints of the rectangle are inside, and some are outside.\n        rect = new GeoRectangle(0.05,-0.05,-0.05,0.5);\n        assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n        // Now, all points are outside, but the figures intersect\n        rect = new GeoRectangle(0.05,-0.05,-0.5,0.5);\n        assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n        // Finally, all points are outside, and the figures *do not* intersect\n        rect = new GeoRectangle(0.5,-0.5,-0.5,0.5);\n        assertEquals(GeoArea.WITHIN, rect.getRelationship(p));\n        // Check that segment edge overlap detection works\n        rect = new GeoRectangle(0.1,0.0,-0.1,0.0);\n        assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n        rect = new GeoRectangle(0.2,0.1,-0.2,-0.1);\n        assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n        // Check if overlap at endpoints behaves as expected next\n        rect = new GeoRectangle(0.5,-0.5,-0.5,-0.35);\n        assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n        rect = new GeoRectangle(0.5,-0.5,-0.5,-0.45);\n        assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n\n    }\n\n","sourceOld":"    @Test\n    public void testGetRelationship() {\n        GeoArea rect;\n        GeoPath p;\n\n        // Start by testing the basic kinds of relationship, increasing in order of difficulty.\n\n        p = new GeoPath(0.1);\n        p.addPoint(-0.3,-0.3);\n        p.addPoint(0.3,0.3);\n        // Easiest: The path is wholly contains the georect\n        rect = new GeoRectangle(0.05,-0.05,-0.05,0.05);\n        assertEquals(GeoArea.CONTAINS, rect.getRelationship(p));\n        // Next easiest: Some endpoints of the rectangle are inside, and some are outside.\n        rect = new GeoRectangle(0.05,-0.05,-0.05,0.5);\n        assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n        // Now, all points are outside, but the figures intersect\n        rect = new GeoRectangle(0.05,-0.05,-0.5,0.5);\n        assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n        // Finally, all points are outside, and the figures *do not* intersect\n        rect = new GeoRectangle(0.5,-0.5,-0.5,0.5);\n        assertEquals(GeoArea.WITHIN, rect.getRelationship(p));\n        // Check that segment edge overlap detection works\n        rect = new GeoRectangle(0.1,0.0,-0.1,0.0);\n        assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n        rect = new GeoRectangle(0.2,0.1,-0.2,-0.1);\n        assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n        // Check if overlap at endpoints behaves as expected next\n        rect = new GeoRectangle(0.5,-0.5,-0.5,-0.35);\n        assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n        rect = new GeoRectangle(0.5,-0.5,-0.5,-0.45);\n        assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e2997acf74723385bd84aff1ea0b12af4aefde77","date":1430745542,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testGetRelationship().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testGetRelationship().mjava","sourceNew":"  @Test\n  public void testGetRelationship() {\n    GeoArea rect;\n    GeoPath p;\n\n    // Start by testing the basic kinds of relationship, increasing in order of difficulty.\n\n    p = new GeoPath(0.1);\n    p.addPoint(-0.3, -0.3);\n    p.addPoint(0.3, 0.3);\n    p.done();\n    // Easiest: The path is wholly contains the georect\n    rect = new GeoRectangle(0.05, -0.05, -0.05, 0.05);\n    assertEquals(GeoArea.CONTAINS, rect.getRelationship(p));\n    // Next easiest: Some endpoints of the rectangle are inside, and some are outside.\n    rect = new GeoRectangle(0.05, -0.05, -0.05, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Now, all points are outside, but the figures intersect\n    rect = new GeoRectangle(0.05, -0.05, -0.5, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Finally, all points are outside, and the figures *do not* intersect\n    rect = new GeoRectangle(0.5, -0.5, -0.5, 0.5);\n    assertEquals(GeoArea.WITHIN, rect.getRelationship(p));\n    // Check that segment edge overlap detection works\n    rect = new GeoRectangle(0.1, 0.0, -0.1, 0.0);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(0.2, 0.1, -0.2, -0.1);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n    // Check if overlap at endpoints behaves as expected next\n    rect = new GeoRectangle(0.5, -0.5, -0.5, -0.35);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(0.5, -0.5, -0.5, -0.45);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n\n  }\n\n","sourceOld":"    @Test\n    public void testGetRelationship() {\n        GeoArea rect;\n        GeoPath p;\n\n        // Start by testing the basic kinds of relationship, increasing in order of difficulty.\n\n        p = new GeoPath(0.1);\n        p.addPoint(-0.3,-0.3);\n        p.addPoint(0.3,0.3);\n        p.done();\n        // Easiest: The path is wholly contains the georect\n        rect = new GeoRectangle(0.05,-0.05,-0.05,0.05);\n        assertEquals(GeoArea.CONTAINS, rect.getRelationship(p));\n        // Next easiest: Some endpoints of the rectangle are inside, and some are outside.\n        rect = new GeoRectangle(0.05,-0.05,-0.05,0.5);\n        assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n        // Now, all points are outside, but the figures intersect\n        rect = new GeoRectangle(0.05,-0.05,-0.5,0.5);\n        assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n        // Finally, all points are outside, and the figures *do not* intersect\n        rect = new GeoRectangle(0.5,-0.5,-0.5,0.5);\n        assertEquals(GeoArea.WITHIN, rect.getRelationship(p));\n        // Check that segment edge overlap detection works\n        rect = new GeoRectangle(0.1,0.0,-0.1,0.0);\n        assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n        rect = new GeoRectangle(0.2,0.1,-0.2,-0.1);\n        assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n        // Check if overlap at endpoints behaves as expected next\n        rect = new GeoRectangle(0.5,-0.5,-0.5,-0.35);\n        assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n        rect = new GeoRectangle(0.5,-0.5,-0.5,-0.45);\n        assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testGetRelationship().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGetRelationship() {\n    GeoArea rect;\n    GeoPath p;\n\n    // Start by testing the basic kinds of relationship, increasing in order of difficulty.\n\n    p = new GeoPath(0.1);\n    p.addPoint(-0.3, -0.3);\n    p.addPoint(0.3, 0.3);\n    p.done();\n    // Easiest: The path is wholly contains the georect\n    rect = new GeoRectangle(0.05, -0.05, -0.05, 0.05);\n    assertEquals(GeoArea.CONTAINS, rect.getRelationship(p));\n    // Next easiest: Some endpoints of the rectangle are inside, and some are outside.\n    rect = new GeoRectangle(0.05, -0.05, -0.05, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Now, all points are outside, but the figures intersect\n    rect = new GeoRectangle(0.05, -0.05, -0.5, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Finally, all points are outside, and the figures *do not* intersect\n    rect = new GeoRectangle(0.5, -0.5, -0.5, 0.5);\n    assertEquals(GeoArea.WITHIN, rect.getRelationship(p));\n    // Check that segment edge overlap detection works\n    rect = new GeoRectangle(0.1, 0.0, -0.1, 0.0);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(0.2, 0.1, -0.2, -0.1);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n    // Check if overlap at endpoints behaves as expected next\n    rect = new GeoRectangle(0.5, -0.5, -0.5, -0.35);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(0.5, -0.5, -0.5, -0.45);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testGetRelationship().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testGetRelationship().mjava","sourceNew":"  @Test\n  public void testGetRelationship() {\n    GeoArea rect;\n    GeoPath p;\n\n    // Start by testing the basic kinds of relationship, increasing in order of difficulty.\n\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-0.3, -0.3);\n    p.addPoint(0.3, 0.3);\n    p.done();\n    // Easiest: The path is wholly contains the georect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.05, 0.05);\n    assertEquals(GeoArea.CONTAINS, rect.getRelationship(p));\n    // Next easiest: Some endpoints of the rectangle are inside, and some are outside.\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.05, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Now, all points are outside, but the figures intersect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.5, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Finally, all points are outside, and the figures *do not* intersect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, 0.5);\n    assertEquals(GeoArea.WITHIN, rect.getRelationship(p));\n    // Check that segment edge overlap detection works\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.1, 0.0, -0.1, 0.0);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.2, 0.1, -0.2, -0.1);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n    // Check if overlap at endpoints behaves as expected next\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, -0.35);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, -0.45);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n\n  }\n\n","sourceOld":"  @Test\n  public void testGetRelationship() {\n    GeoArea rect;\n    GeoPath p;\n\n    // Start by testing the basic kinds of relationship, increasing in order of difficulty.\n\n    p = new GeoPath(0.1);\n    p.addPoint(-0.3, -0.3);\n    p.addPoint(0.3, 0.3);\n    p.done();\n    // Easiest: The path is wholly contains the georect\n    rect = new GeoRectangle(0.05, -0.05, -0.05, 0.05);\n    assertEquals(GeoArea.CONTAINS, rect.getRelationship(p));\n    // Next easiest: Some endpoints of the rectangle are inside, and some are outside.\n    rect = new GeoRectangle(0.05, -0.05, -0.05, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Now, all points are outside, but the figures intersect\n    rect = new GeoRectangle(0.05, -0.05, -0.5, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Finally, all points are outside, and the figures *do not* intersect\n    rect = new GeoRectangle(0.5, -0.5, -0.5, 0.5);\n    assertEquals(GeoArea.WITHIN, rect.getRelationship(p));\n    // Check that segment edge overlap detection works\n    rect = new GeoRectangle(0.1, 0.0, -0.1, 0.0);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(0.2, 0.1, -0.2, -0.1);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n    // Check if overlap at endpoints behaves as expected next\n    rect = new GeoRectangle(0.5, -0.5, -0.5, -0.35);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(0.5, -0.5, -0.5, -0.45);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":3,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testGetRelationship().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testGetRelationship().mjava","sourceNew":"  @Test\n  public void testGetRelationship() {\n    GeoArea rect;\n    GeoPath p;\n\n    // Start by testing the basic kinds of relationship, increasing in order of difficulty.\n\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-0.3, -0.3);\n    p.addPoint(0.3, 0.3);\n    p.done();\n    // Easiest: The path is wholly contains the georect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.05, 0.05);\n    assertEquals(GeoArea.CONTAINS, rect.getRelationship(p));\n    // Next easiest: Some endpoints of the rectangle are inside, and some are outside.\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.05, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Now, all points are outside, but the figures intersect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.5, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Finally, all points are outside, and the figures *do not* intersect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, 0.5);\n    assertEquals(GeoArea.WITHIN, rect.getRelationship(p));\n    // Check that segment edge overlap detection works\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.1, 0.0, -0.1, 0.0);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.2, 0.1, -0.2, -0.1);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n    // Check if overlap at endpoints behaves as expected next\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, -0.35);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, -0.45);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n\n  }\n\n","sourceOld":"  @Test\n  public void testGetRelationship() {\n    GeoArea rect;\n    GeoPath p;\n\n    // Start by testing the basic kinds of relationship, increasing in order of difficulty.\n\n    p = new GeoPath(0.1);\n    p.addPoint(-0.3, -0.3);\n    p.addPoint(0.3, 0.3);\n    p.done();\n    // Easiest: The path is wholly contains the georect\n    rect = new GeoRectangle(0.05, -0.05, -0.05, 0.05);\n    assertEquals(GeoArea.CONTAINS, rect.getRelationship(p));\n    // Next easiest: Some endpoints of the rectangle are inside, and some are outside.\n    rect = new GeoRectangle(0.05, -0.05, -0.05, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Now, all points are outside, but the figures intersect\n    rect = new GeoRectangle(0.05, -0.05, -0.5, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Finally, all points are outside, and the figures *do not* intersect\n    rect = new GeoRectangle(0.5, -0.5, -0.5, 0.5);\n    assertEquals(GeoArea.WITHIN, rect.getRelationship(p));\n    // Check that segment edge overlap detection works\n    rect = new GeoRectangle(0.1, 0.0, -0.1, 0.0);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(0.2, 0.1, -0.2, -0.1);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n    // Check if overlap at endpoints behaves as expected next\n    rect = new GeoRectangle(0.5, -0.5, -0.5, -0.35);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(0.5, -0.5, -0.5, -0.45);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoPathTest#testGetRelationship().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testGetRelationship().mjava","sourceNew":"  @Test\n  public void testGetRelationship() {\n    GeoArea rect;\n    GeoPath p;\n\n    // Start by testing the basic kinds of relationship, increasing in order of difficulty.\n\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-0.3, -0.3);\n    p.addPoint(0.3, 0.3);\n    p.done();\n    // Easiest: The path is wholly contains the georect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.05, 0.05);\n    assertEquals(GeoArea.CONTAINS, rect.getRelationship(p));\n    // Next easiest: Some endpoints of the rectangle are inside, and some are outside.\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.05, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Now, all points are outside, but the figures intersect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.5, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Finally, all points are outside, and the figures *do not* intersect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, 0.5);\n    assertEquals(GeoArea.WITHIN, rect.getRelationship(p));\n    // Check that segment edge overlap detection works\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.1, 0.0, -0.1, 0.0);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.2, 0.1, -0.2, -0.1);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n    // Check if overlap at endpoints behaves as expected next\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, -0.35);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, -0.45);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n\n  }\n\n","sourceOld":"  @Test\n  public void testGetRelationship() {\n    GeoArea rect;\n    GeoPath p;\n\n    // Start by testing the basic kinds of relationship, increasing in order of difficulty.\n\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-0.3, -0.3);\n    p.addPoint(0.3, 0.3);\n    p.done();\n    // Easiest: The path is wholly contains the georect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.05, 0.05);\n    assertEquals(GeoArea.CONTAINS, rect.getRelationship(p));\n    // Next easiest: Some endpoints of the rectangle are inside, and some are outside.\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.05, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Now, all points are outside, but the figures intersect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.5, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Finally, all points are outside, and the figures *do not* intersect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, 0.5);\n    assertEquals(GeoArea.WITHIN, rect.getRelationship(p));\n    // Check that segment edge overlap detection works\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.1, 0.0, -0.1, 0.0);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.2, 0.1, -0.2, -0.1);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n    // Check if overlap at endpoints behaves as expected next\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, -0.35);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, -0.45);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["851e4197476b684154a7b65f996f535522e67400"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["fec06d6753751ae302c7d35866763e6cb414112d"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2997acf74723385bd84aff1ea0b12af4aefde77"],"851e4197476b684154a7b65f996f535522e67400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","851e4197476b684154a7b65f996f535522e67400"],"fec06d6753751ae302c7d35866763e6cb414112d":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"851e4197476b684154a7b65f996f535522e67400":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}