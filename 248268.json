{"path":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","commits":[{"id":"eee9156bf08d7eaae5e8d8ab5f855ba61012e257","date":1285443157,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\r\n  public void setUp() throws Exception {\r\n    super.setUp();\r\n    directory = newDirectory();\r\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory);\r\n\r\n    typeTests = new NumberTypeTester[] {\r\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\r\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\r\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\r\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\r\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\r\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\r\n    };\r\n    \r\n    for (int i = 0; i < NUM_DOCS; i++){\r\n      Document doc = new Document();\r\n      \r\n      // Test the valid bits\r\n      for( NumberTypeTester tester : typeTests ) {\r\n        if (random.nextInt(20) != 17 && i > 1) {\r\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\r\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), \r\n              Field.Store.NO, Field.Index.NOT_ANALYZED ));\r\n        }\r\n      }\r\n      writer.addDocument(doc);\r\n    }\r\n\r\n    reader = writer.getReader();\r\n    writer.close();\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","date":1286051536,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory);\n\n    typeTests = new NumberTypeTester[] {\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\n    };\n    \n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      \n      // Test the valid bits\n      for( NumberTypeTester tester : typeTests ) {\n        if (random.nextInt(20) != 17 && i > 1) {\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), \n              Field.Store.NO, Field.Index.NOT_ANALYZED ));\n        }\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\r\n  public void setUp() throws Exception {\r\n    super.setUp();\r\n    directory = newDirectory();\r\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory);\r\n\r\n    typeTests = new NumberTypeTester[] {\r\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\r\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\r\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\r\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\r\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\r\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\r\n    };\r\n    \r\n    for (int i = 0; i < NUM_DOCS; i++){\r\n      Document doc = new Document();\r\n      \r\n      // Test the valid bits\r\n      for( NumberTypeTester tester : typeTests ) {\r\n        if (random.nextInt(20) != 17 && i > 1) {\r\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\r\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), \r\n              Field.Store.NO, Field.Index.NOT_ANALYZED ));\r\n        }\r\n      }\r\n      writer.addDocument(doc);\r\n    }\r\n\r\n    reader = writer.getReader();\r\n    writer.close();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory);\n\n    typeTests = new NumberTypeTester[] {\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\n    };\n    \n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      \n      // Test the valid bits\n      for( NumberTypeTester tester : typeTests ) {\n        if (random.nextInt(20) != 17 && i > 1) {\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), \n              Field.Store.NO, Field.Index.NOT_ANALYZED ));\n        }\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    typeTests = new NumberTypeTester[] {\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\n    };\n    \n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      \n      // Test the valid bits\n      for( NumberTypeTester tester : typeTests ) {\n        if (random.nextInt(20) != 17 && i > 1) {\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), \n              Field.Store.NO, Field.Index.NOT_ANALYZED ));\n        }\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory);\n\n    typeTests = new NumberTypeTester[] {\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\n    };\n    \n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      \n      // Test the valid bits\n      for( NumberTypeTester tester : typeTests ) {\n        if (random.nextInt(20) != 17 && i > 1) {\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), \n              Field.Store.NO, Field.Index.NOT_ANALYZED ));\n        }\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    typeTests = new NumberTypeTester[] {\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\n    };\n    \n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      \n      // Test the valid bits\n      for( NumberTypeTester tester : typeTests ) {\n        if (random.nextInt(20) != 17 && i > 1) {\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), \n              Field.Store.NO, Field.Index.NOT_ANALYZED ));\n        }\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory);\n\n    typeTests = new NumberTypeTester[] {\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\n    };\n    \n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      \n      // Test the valid bits\n      for( NumberTypeTester tester : typeTests ) {\n        if (random.nextInt(20) != 17 && i > 1) {\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), \n              Field.Store.NO, Field.Index.NOT_ANALYZED ));\n        }\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    typeTests = new NumberTypeTester[] {\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\n    };\n    \n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      \n      // Test the valid bits\n      for( NumberTypeTester tester : typeTests ) {\n        if (random.nextInt(20) != 17 && i > 1) {\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), \n              Field.Store.NO, Field.Index.NOT_ANALYZED ));\n        }\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory);\n\n    typeTests = new NumberTypeTester[] {\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\n    };\n    \n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      \n      // Test the valid bits\n      for( NumberTypeTester tester : typeTests ) {\n        if (random.nextInt(20) != 17 && i > 1) {\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), \n              Field.Store.NO, Field.Index.NOT_ANALYZED ));\n        }\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n    typeTests = new NumberTypeTester[] {\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\n    };\n    \n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      \n      // Test the valid bits\n      for( NumberTypeTester tester : typeTests ) {\n        if (random.nextInt(20) != 17 && i > 1) {\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), \n              Field.Store.NO, Field.Index.NOT_ANALYZED ));\n        }\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    typeTests = new NumberTypeTester[] {\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\n    };\n    \n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      \n      // Test the valid bits\n      for( NumberTypeTester tester : typeTests ) {\n        if (random.nextInt(20) != 17 && i > 1) {\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), \n              Field.Store.NO, Field.Index.NOT_ANALYZED ));\n        }\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n    typeTests = new NumberTypeTester[] {\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\n    };\n    \n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      \n      // Test the valid bits\n      for( NumberTypeTester tester : typeTests ) {\n        if (random.nextInt(20) != 17 && i > 1) {\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), \n              Field.Store.NO, Field.Index.NOT_ANALYZED ));\n        }\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    typeTests = new NumberTypeTester[] {\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\n    };\n    \n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      \n      // Test the valid bits\n      for( NumberTypeTester tester : typeTests ) {\n        if (random.nextInt(20) != 17 && i > 1) {\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), \n              Field.Store.NO, Field.Index.NOT_ANALYZED ));\n        }\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    typeTests = new NumberTypeTester[] {\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\n    };\n    \n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      \n      // Test the valid bits\n      for( NumberTypeTester tester : typeTests ) {\n        if (random.nextInt(20) != 17 && i > 1) {\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), \n              Field.Store.NO, Field.Index.NOT_ANALYZED ));\n        }\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n    typeTests = new NumberTypeTester[] {\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\n    };\n    \n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      \n      // Test the valid bits\n      for( NumberTypeTester tester : typeTests ) {\n        if (random.nextInt(20) != 17 && i > 1) {\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), \n              Field.Store.NO, Field.Index.NOT_ANALYZED ));\n        }\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    typeTests = new NumberTypeTester[] {\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\n    };\n    \n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      \n      // Test the valid bits\n      for( NumberTypeTester tester : typeTests ) {\n        if (random.nextInt(20) != 17 && i > 1) {\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), \n              Field.Store.NO, Field.Index.NOT_ANALYZED ));\n        }\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n    typeTests = new NumberTypeTester[] {\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\n    };\n    \n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      \n      // Test the valid bits\n      for( NumberTypeTester tester : typeTests ) {\n        if (random.nextInt(20) != 17 && i > 1) {\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), \n              Field.Store.NO, Field.Index.NOT_ANALYZED ));\n        }\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    typeTests = new NumberTypeTester[] {\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\n    };\n    \n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      \n      // Test the valid bits\n      for( NumberTypeTester tester : typeTests ) {\n        if (random.nextInt(20) != 17 && i > 1) {\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), \n              Field.Store.NO, Field.Index.NOT_ANALYZED ));\n        }\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    typeTests = new NumberTypeTester[] {\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\n    };\n    \n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      \n      // Test the valid bits\n      for( NumberTypeTester tester : typeTests ) {\n        if (random.nextInt(20) != 17 && i > 1) {\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), \n              Field.Store.NO, Field.Index.NOT_ANALYZED ));\n        }\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    typeTests = new NumberTypeTester[] {\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\n    };\n    \n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      \n      // Test the valid bits\n      for( NumberTypeTester tester : typeTests ) {\n        if (random.nextInt(20) != 17 && i > 1) {\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), \n              Field.Store.NO, Field.Index.NOT_ANALYZED ));\n        }\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    typeTests = new NumberTypeTester[] {\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\n    };\n    \n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      \n      // Test the valid bits\n      for( NumberTypeTester tester : typeTests ) {\n        if (random.nextInt(20) != 17 && i > 1) {\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), \n              Field.Store.NO, Field.Index.NOT_ANALYZED ));\n        }\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    typeTests = new NumberTypeTester[] {\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\n    };\n    \n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      \n      // Test the valid bits\n      for( NumberTypeTester tester : typeTests ) {\n        if (random.nextInt(20) != 17 && i > 1) {\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\n          FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n          customType.setTokenized(false);\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), customType));\n        }\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    typeTests = new NumberTypeTester[] {\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\n    };\n    \n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      \n      // Test the valid bits\n      for( NumberTypeTester tester : typeTests ) {\n        if (random.nextInt(20) != 17 && i > 1) {\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), \n              Field.Store.NO, Field.Index.NOT_ANALYZED ));\n        }\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#setUp().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    typeTests = new NumberTypeTester[] {\n        new NumberTypeTester( \"theRandomByte\",   \"getBytes\",   ByteValuesCreator.class,   ByteParser.class ),\n        new NumberTypeTester( \"theRandomShort\",  \"getShorts\",  ShortValuesCreator.class,  ShortParser.class  ),\n        new NumberTypeTester( \"theRandomInt\",    \"getInts\",    IntValuesCreator.class,    IntParser.class  ),\n        new NumberTypeTester( \"theRandomLong\",   \"getLongs\",   LongValuesCreator.class,   LongParser.class  ),\n        new NumberTypeTester( \"theRandomFloat\",  \"getFloats\",  FloatValuesCreator.class,  FloatParser.class  ),\n        new NumberTypeTester( \"theRandomDouble\", \"getDoubles\", DoubleValuesCreator.class, DoubleParser.class  ),\n    };\n    \n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      \n      // Test the valid bits\n      for( NumberTypeTester tester : typeTests ) {\n        if (random.nextInt(20) != 17 && i > 1) {\n          tester.values[i] = 10 + random.nextInt( 20 ); // get some field overlap\n          FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n          customType.setTokenized(false);\n          doc.add(newField(tester.field, String.valueOf(tester.values[i]), customType));\n        }\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eee9156bf08d7eaae5e8d8ab5f855ba61012e257":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"382fe3a6ca9745891afebda9b9a57cc158305545":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"c19f985e36a65cc969e8e564fe337a0d41512075":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["c19f985e36a65cc969e8e564fe337a0d41512075"],"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["eee9156bf08d7eaae5e8d8ab5f855ba61012e257"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["382fe3a6ca9745891afebda9b9a57cc158305545"]},"commit2Childs":{"eee9156bf08d7eaae5e8d8ab5f855ba61012e257":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"382fe3a6ca9745891afebda9b9a57cc158305545":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c19f985e36a65cc969e8e564fe337a0d41512075":["01e5948db9a07144112d2f08f28ca2e3cd880348","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","29ef99d61cda9641b6250bf9567329a6e65f901d"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eee9156bf08d7eaae5e8d8ab5f855ba61012e257","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["382fe3a6ca9745891afebda9b9a57cc158305545"],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}