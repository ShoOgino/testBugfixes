{"path":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testManyMaxSizeSegments().mjava","commits":[{"id":"404dafe26b816e6ed478486e26abd62d8607b123","date":1531142470,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testManyMaxSizeSegments().mjava","pathOld":"/dev/null","sourceNew":"  public void testManyMaxSizeSegments() throws IOException {\n    TieredMergePolicy policy = new TieredMergePolicy();\n    policy.setMaxMergedSegmentMB(1024); // 1GB\n    SegmentInfos infos = new SegmentInfos(Version.LATEST.major);\n    int i = 0;\n    for (int j = 0; j < 30; ++j) {\n      infos.add(makeSegmentCommitInfo(\"_\" + i, 1000, 0, 1024)); // max size \n    }\n    for (int j = 0; j < 8; ++j) {\n      infos.add(makeSegmentCommitInfo(\"_\" + i, 1000, 0, 102)); // 102MB flushes\n    }\n\n    // Only 8 segments on 1 tier in addition to the max-size segments, nothing to do\n    MergeSpecification mergeSpec = policy.findMerges(MergeTrigger.SEGMENT_FLUSH, infos, new MockMergeContext(SegmentCommitInfo::getDelCount));\n    assertNull(mergeSpec);\n\n    for (int j = 0; j < 5; ++j) {\n      infos.add(makeSegmentCommitInfo(\"_\" + i, 1000, 0, 102)); // 102MB flushes\n    }\n\n    // Now 13 segments on 1 tier in addition to the max-size segments, 10 of them should get merged in one merge\n    mergeSpec = policy.findMerges(MergeTrigger.SEGMENT_FLUSH, infos, new MockMergeContext(SegmentCommitInfo::getDelCount));\n    assertNotNull(mergeSpec);\n    assertEquals(1, mergeSpec.merges.size());\n    OneMerge merge = mergeSpec.merges.get(0);\n    assertEquals(10, merge.segments.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da0d58b6bf72ebfd4d6722289ea725809c20c987","date":1531207054,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testManyMaxSizeSegments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testManyMaxSizeSegments().mjava","sourceNew":"  public void testManyMaxSizeSegments() throws IOException {\n    TieredMergePolicy policy = new TieredMergePolicy();\n    policy.setMaxMergedSegmentMB(1024); // 1GB\n    SegmentInfos infos = new SegmentInfos(Version.LATEST.major);\n    int i = 0;\n    for (int j = 0; j < 30; ++j) {\n      infos.add(makeSegmentCommitInfo(\"_\" + i, 1000, 0, 1024, IndexWriter.SOURCE_MERGE)); // max size \n    }\n    for (int j = 0; j < 8; ++j) {\n      infos.add(makeSegmentCommitInfo(\"_\" + i, 1000, 0, 102, IndexWriter.SOURCE_FLUSH)); // 102MB flushes\n    }\n\n    // Only 8 segments on 1 tier in addition to the max-size segments, nothing to do\n    MergeSpecification mergeSpec = policy.findMerges(MergeTrigger.SEGMENT_FLUSH, infos, new MockMergeContext(SegmentCommitInfo::getDelCount));\n    assertNull(mergeSpec);\n\n    for (int j = 0; j < 5; ++j) {\n      infos.add(makeSegmentCommitInfo(\"_\" + i, 1000, 0, 102, IndexWriter.SOURCE_FLUSH)); // 102MB flushes\n    }\n\n    // Now 13 segments on 1 tier in addition to the max-size segments, 10 of them should get merged in one merge\n    mergeSpec = policy.findMerges(MergeTrigger.SEGMENT_FLUSH, infos, new MockMergeContext(SegmentCommitInfo::getDelCount));\n    assertNotNull(mergeSpec);\n    assertEquals(1, mergeSpec.merges.size());\n    OneMerge merge = mergeSpec.merges.get(0);\n    assertEquals(10, merge.segments.size());\n  }\n\n","sourceOld":"  public void testManyMaxSizeSegments() throws IOException {\n    TieredMergePolicy policy = new TieredMergePolicy();\n    policy.setMaxMergedSegmentMB(1024); // 1GB\n    SegmentInfos infos = new SegmentInfos(Version.LATEST.major);\n    int i = 0;\n    for (int j = 0; j < 30; ++j) {\n      infos.add(makeSegmentCommitInfo(\"_\" + i, 1000, 0, 1024)); // max size \n    }\n    for (int j = 0; j < 8; ++j) {\n      infos.add(makeSegmentCommitInfo(\"_\" + i, 1000, 0, 102)); // 102MB flushes\n    }\n\n    // Only 8 segments on 1 tier in addition to the max-size segments, nothing to do\n    MergeSpecification mergeSpec = policy.findMerges(MergeTrigger.SEGMENT_FLUSH, infos, new MockMergeContext(SegmentCommitInfo::getDelCount));\n    assertNull(mergeSpec);\n\n    for (int j = 0; j < 5; ++j) {\n      infos.add(makeSegmentCommitInfo(\"_\" + i, 1000, 0, 102)); // 102MB flushes\n    }\n\n    // Now 13 segments on 1 tier in addition to the max-size segments, 10 of them should get merged in one merge\n    mergeSpec = policy.findMerges(MergeTrigger.SEGMENT_FLUSH, infos, new MockMergeContext(SegmentCommitInfo::getDelCount));\n    assertNotNull(mergeSpec);\n    assertEquals(1, mergeSpec.merges.size());\n    OneMerge merge = mergeSpec.merges.get(0);\n    assertEquals(10, merge.segments.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testManyMaxSizeSegments().mjava","pathOld":"/dev/null","sourceNew":"  public void testManyMaxSizeSegments() throws IOException {\n    TieredMergePolicy policy = new TieredMergePolicy();\n    policy.setMaxMergedSegmentMB(1024); // 1GB\n    SegmentInfos infos = new SegmentInfos(Version.LATEST.major);\n    int i = 0;\n    for (int j = 0; j < 30; ++j) {\n      infos.add(makeSegmentCommitInfo(\"_\" + i, 1000, 0, 1024, IndexWriter.SOURCE_MERGE)); // max size \n    }\n    for (int j = 0; j < 8; ++j) {\n      infos.add(makeSegmentCommitInfo(\"_\" + i, 1000, 0, 102, IndexWriter.SOURCE_FLUSH)); // 102MB flushes\n    }\n\n    // Only 8 segments on 1 tier in addition to the max-size segments, nothing to do\n    MergeSpecification mergeSpec = policy.findMerges(MergeTrigger.SEGMENT_FLUSH, infos, new MockMergeContext(SegmentCommitInfo::getDelCount));\n    assertNull(mergeSpec);\n\n    for (int j = 0; j < 5; ++j) {\n      infos.add(makeSegmentCommitInfo(\"_\" + i, 1000, 0, 102, IndexWriter.SOURCE_FLUSH)); // 102MB flushes\n    }\n\n    // Now 13 segments on 1 tier in addition to the max-size segments, 10 of them should get merged in one merge\n    mergeSpec = policy.findMerges(MergeTrigger.SEGMENT_FLUSH, infos, new MockMergeContext(SegmentCommitInfo::getDelCount));\n    assertNotNull(mergeSpec);\n    assertEquals(1, mergeSpec.merges.size());\n    OneMerge merge = mergeSpec.merges.get(0);\n    assertEquals(10, merge.segments.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testManyMaxSizeSegments().mjava","pathOld":"/dev/null","sourceNew":"  public void testManyMaxSizeSegments() throws IOException {\n    TieredMergePolicy policy = new TieredMergePolicy();\n    policy.setMaxMergedSegmentMB(1024); // 1GB\n    SegmentInfos infos = new SegmentInfos(Version.LATEST.major);\n    int i = 0;\n    for (int j = 0; j < 30; ++j) {\n      infos.add(makeSegmentCommitInfo(\"_\" + i, 1000, 0, 1024, IndexWriter.SOURCE_MERGE)); // max size \n    }\n    for (int j = 0; j < 8; ++j) {\n      infos.add(makeSegmentCommitInfo(\"_\" + i, 1000, 0, 102, IndexWriter.SOURCE_FLUSH)); // 102MB flushes\n    }\n\n    // Only 8 segments on 1 tier in addition to the max-size segments, nothing to do\n    MergeSpecification mergeSpec = policy.findMerges(MergeTrigger.SEGMENT_FLUSH, infos, new MockMergeContext(SegmentCommitInfo::getDelCount));\n    assertNull(mergeSpec);\n\n    for (int j = 0; j < 5; ++j) {\n      infos.add(makeSegmentCommitInfo(\"_\" + i, 1000, 0, 102, IndexWriter.SOURCE_FLUSH)); // 102MB flushes\n    }\n\n    // Now 13 segments on 1 tier in addition to the max-size segments, 10 of them should get merged in one merge\n    mergeSpec = policy.findMerges(MergeTrigger.SEGMENT_FLUSH, infos, new MockMergeContext(SegmentCommitInfo::getDelCount));\n    assertNotNull(mergeSpec);\n    assertEquals(1, mergeSpec.merges.size());\n    OneMerge merge = mergeSpec.merges.get(0);\n    assertEquals(10, merge.segments.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da0d58b6bf72ebfd4d6722289ea725809c20c987":["404dafe26b816e6ed478486e26abd62d8607b123"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da0d58b6bf72ebfd4d6722289ea725809c20c987"],"404dafe26b816e6ed478486e26abd62d8607b123":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["da0d58b6bf72ebfd4d6722289ea725809c20c987"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da0d58b6bf72ebfd4d6722289ea725809c20c987"]},"commit2Childs":{"da0d58b6bf72ebfd4d6722289ea725809c20c987":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"404dafe26b816e6ed478486e26abd62d8607b123":["da0d58b6bf72ebfd4d6722289ea725809c20c987"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","404dafe26b816e6ed478486e26abd62d8607b123","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}