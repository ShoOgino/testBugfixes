{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processQueryFacets(Filter).mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processQueryFacets(Filter).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processQueryFacets(Filter).mjava","sourceNew":"  /**\n   * Initiates the collecting of query facets\n   * @param filter the base filter to work against\n   * @throws IOException if searching failed\n   */\n  public void processQueryFacets(final Filter filter) throws IOException {\n    for( QueryFacetRequest qfr : queryFacets ){\n      for( String query : qfr.getQueries() ){\n        if (query.contains(AnalyticsParams.RESULT) && !query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==1) {\n              query = getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              query = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        } else if (query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==3) {\n              query = getQueryResult(qfr.getName(),pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n        QueryFacetAccumulator qAcc = new QueryFacetAccumulator(this,qfr.getName(),query);\n        final Query q;\n        try {\n          q = QParser.getParser(query, null, queryRequest).getQuery();\n        } catch( SyntaxError e ){\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"'\",e);\n        }\n        // The searcher sends docIds to the QueryFacetAccumulator which forwards\n        // them to <code>collectQuery()</code> in this class for collection.\n        searcher.search(q, filter, qAcc);\n        computeQueryFacet(qfr.getName());\n        queryCount++;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Initiates the collecting of query facets\n   * @param filter the base filter to work against\n   * @throws IOException if searching failed\n   */\n  public void processQueryFacets(final Filter filter) throws IOException {\n    for( QueryFacetRequest qfr : queryFacets ){\n      for( String query : qfr.getQueries() ){\n        if (query.contains(AnalyticsParams.RESULT) && !query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==1) {\n              query = getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              query = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        } else if (query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==3) {\n              query = getQueryResult(qfr.getName(),pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n        QueryFacetAccumulator qAcc = new QueryFacetAccumulator(this,qfr.getName(),query);\n        final Query q;\n        try {\n          q = QParser.getParser(query, null, queryRequest).getQuery();\n        } catch( SyntaxError e ){\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"'\",e);\n        }\n        // The searcher sends docIds to the QueryFacetAccumulator which forwards\n        // them to <code>collectQuery()</code> in this class for collection.\n        searcher.search(q, filter, qAcc);\n        computeQueryFacet(qfr.getName());\n        queryCount++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processQueryFacets(Filter).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processQueryFacets(Filter).mjava","sourceNew":"  /**\n   * Initiates the collecting of query facets\n   * @param filter the base filter to work against\n   * @throws IOException if searching failed\n   */\n  public void processQueryFacets(final Filter filter) throws IOException {\n    for( QueryFacetRequest qfr : queryFacets ){\n      for( String query : qfr.getQueries() ){\n        if (query.contains(AnalyticsParams.RESULT) && !query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==1) {\n              query = getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              query = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        } else if (query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==3) {\n              query = getQueryResult(qfr.getName(),pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n        QueryFacetAccumulator qAcc = new QueryFacetAccumulator(this,qfr.getName(),query);\n        final Query q;\n        try {\n          q = QParser.getParser(query, null, queryRequest).getQuery();\n        } catch( SyntaxError e ){\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"'\",e);\n        }\n        // The searcher sends docIds to the QueryFacetAccumulator which forwards\n        // them to <code>collectQuery()</code> in this class for collection.\n        searcher.search(new FilteredQuery(q, filter), qAcc);\n        computeQueryFacet(qfr.getName());\n        queryCount++;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Initiates the collecting of query facets\n   * @param filter the base filter to work against\n   * @throws IOException if searching failed\n   */\n  public void processQueryFacets(final Filter filter) throws IOException {\n    for( QueryFacetRequest qfr : queryFacets ){\n      for( String query : qfr.getQueries() ){\n        if (query.contains(AnalyticsParams.RESULT) && !query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==1) {\n              query = getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              query = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        } else if (query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==3) {\n              query = getQueryResult(qfr.getName(),pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n        QueryFacetAccumulator qAcc = new QueryFacetAccumulator(this,qfr.getName(),query);\n        final Query q;\n        try {\n          q = QParser.getParser(query, null, queryRequest).getQuery();\n        } catch( SyntaxError e ){\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"'\",e);\n        }\n        // The searcher sends docIds to the QueryFacetAccumulator which forwards\n        // them to <code>collectQuery()</code> in this class for collection.\n        searcher.search(q, filter, qAcc);\n        computeQueryFacet(qfr.getName());\n        queryCount++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processQueryFacets(Filter).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processQueryFacets(Filter).mjava","sourceNew":"  /**\n   * Initiates the collecting of query facets\n   * @param filter the base filter to work against\n   * @throws IOException if searching failed\n   */\n  public void processQueryFacets(final Filter filter) throws IOException {\n    for( QueryFacetRequest qfr : queryFacets ){\n      for( String query : qfr.getQueries() ){\n        if (query.contains(AnalyticsParams.RESULT) && !query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==1) {\n              query = getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              query = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        } else if (query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==3) {\n              query = getQueryResult(qfr.getName(),pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n        QueryFacetAccumulator qAcc = new QueryFacetAccumulator(this,qfr.getName(),query);\n        final Query q;\n        try {\n          q = QParser.getParser(query, null, queryRequest).getQuery();\n        } catch( SyntaxError e ){\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"'\",e);\n        }\n        // The searcher sends docIds to the QueryFacetAccumulator which forwards\n        // them to <code>collectQuery()</code> in this class for collection.\n        Query filtered = new BooleanQuery.Builder()\n            .add(q, Occur.MUST)\n            .add(filter, Occur.FILTER)\n            .build();\n        searcher.search(filtered, qAcc);\n        computeQueryFacet(qfr.getName());\n        queryCount++;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Initiates the collecting of query facets\n   * @param filter the base filter to work against\n   * @throws IOException if searching failed\n   */\n  public void processQueryFacets(final Filter filter) throws IOException {\n    for( QueryFacetRequest qfr : queryFacets ){\n      for( String query : qfr.getQueries() ){\n        if (query.contains(AnalyticsParams.RESULT) && !query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==1) {\n              query = getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              query = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        } else if (query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==3) {\n              query = getQueryResult(qfr.getName(),pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n        QueryFacetAccumulator qAcc = new QueryFacetAccumulator(this,qfr.getName(),query);\n        final Query q;\n        try {\n          q = QParser.getParser(query, null, queryRequest).getQuery();\n        } catch( SyntaxError e ){\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"'\",e);\n        }\n        // The searcher sends docIds to the QueryFacetAccumulator which forwards\n        // them to <code>collectQuery()</code> in this class for collection.\n        searcher.search(new FilteredQuery(q, filter), qAcc);\n        computeQueryFacet(qfr.getName());\n        queryCount++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","date":1470751445,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processQueryFacets(Filter).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processQueryFacets(Filter).mjava","sourceNew":"  /**\n   * Initiates the collecting of query facets\n   * @param filter the base filter to work against\n   * @throws IOException if searching failed\n   */\n  public void processQueryFacets(final Filter filter) throws IOException {\n    for( QueryFacetRequest qfr : queryFacets ){\n      for( String query : qfr.getQueries() ){\n        if (query.contains(AnalyticsParams.RESULT) && !query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==1) {\n              query = getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              query = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        } else if (query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==3) {\n              query = getQueryResult(qfr.getName(),pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n        QueryFacetAccumulator qAcc = new QueryFacetAccumulator(this,qfr.getName(),query);\n        final Query q;\n        try {\n          q = QParser.getParser(query, queryRequest).getQuery();\n        } catch( SyntaxError e ){\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"'\",e);\n        }\n        // The searcher sends docIds to the QueryFacetAccumulator which forwards\n        // them to <code>collectQuery()</code> in this class for collection.\n        Query filtered = new BooleanQuery.Builder()\n            .add(q, Occur.MUST)\n            .add(filter, Occur.FILTER)\n            .build();\n        searcher.search(filtered, qAcc);\n        computeQueryFacet(qfr.getName());\n        queryCount++;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Initiates the collecting of query facets\n   * @param filter the base filter to work against\n   * @throws IOException if searching failed\n   */\n  public void processQueryFacets(final Filter filter) throws IOException {\n    for( QueryFacetRequest qfr : queryFacets ){\n      for( String query : qfr.getQueries() ){\n        if (query.contains(AnalyticsParams.RESULT) && !query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==1) {\n              query = getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              query = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        } else if (query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==3) {\n              query = getQueryResult(qfr.getName(),pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n        QueryFacetAccumulator qAcc = new QueryFacetAccumulator(this,qfr.getName(),query);\n        final Query q;\n        try {\n          q = QParser.getParser(query, null, queryRequest).getQuery();\n        } catch( SyntaxError e ){\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"'\",e);\n        }\n        // The searcher sends docIds to the QueryFacetAccumulator which forwards\n        // them to <code>collectQuery()</code> in this class for collection.\n        Query filtered = new BooleanQuery.Builder()\n            .add(q, Occur.MUST)\n            .add(filter, Occur.FILTER)\n            .build();\n        searcher.search(filtered, qAcc);\n        computeQueryFacet(qfr.getName());\n        queryCount++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bca25eefa1f2205e2b0ef713701dc3a0fecd702","date":1470810578,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processQueryFacets(Filter).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processQueryFacets(Filter).mjava","sourceNew":"  /**\n   * Initiates the collecting of query facets\n   * @param filter the base filter to work against\n   * @throws IOException if searching failed\n   */\n  public void processQueryFacets(final Filter filter) throws IOException {\n    for( QueryFacetRequest qfr : queryFacets ){\n      for( String query : qfr.getQueries() ){\n        if (query.contains(AnalyticsParams.RESULT) && !query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==1) {\n              query = getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              query = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        } else if (query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==3) {\n              query = getQueryResult(qfr.getName(),pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n        QueryFacetAccumulator qAcc = new QueryFacetAccumulator(this,qfr.getName(),query);\n        final Query q;\n        try {\n          q = QParser.getParser(query, queryRequest).getQuery();\n        } catch( SyntaxError e ){\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"'\",e);\n        }\n        // The searcher sends docIds to the QueryFacetAccumulator which forwards\n        // them to <code>collectQuery()</code> in this class for collection.\n        Query filtered = new BooleanQuery.Builder()\n            .add(q, Occur.MUST)\n            .add(filter, Occur.FILTER)\n            .build();\n        searcher.search(filtered, qAcc);\n        computeQueryFacet(qfr.getName());\n        queryCount++;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Initiates the collecting of query facets\n   * @param filter the base filter to work against\n   * @throws IOException if searching failed\n   */\n  public void processQueryFacets(final Filter filter) throws IOException {\n    for( QueryFacetRequest qfr : queryFacets ){\n      for( String query : qfr.getQueries() ){\n        if (query.contains(AnalyticsParams.RESULT) && !query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==1) {\n              query = getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              query = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        } else if (query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==3) {\n              query = getQueryResult(qfr.getName(),pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n        QueryFacetAccumulator qAcc = new QueryFacetAccumulator(this,qfr.getName(),query);\n        final Query q;\n        try {\n          q = QParser.getParser(query, null, queryRequest).getQuery();\n        } catch( SyntaxError e ){\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"'\",e);\n        }\n        // The searcher sends docIds to the QueryFacetAccumulator which forwards\n        // them to <code>collectQuery()</code> in this class for collection.\n        Query filtered = new BooleanQuery.Builder()\n            .add(q, Occur.MUST)\n            .add(filter, Occur.FILTER)\n            .build();\n        searcher.search(filtered, qAcc);\n        computeQueryFacet(qfr.getName());\n        queryCount++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processQueryFacets(Filter).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processQueryFacets(Filter).mjava","sourceNew":"  /**\n   * Initiates the collecting of query facets\n   * @param filter the base filter to work against\n   * @throws IOException if searching failed\n   */\n  public void processQueryFacets(final Filter filter) throws IOException {\n    for( QueryFacetRequest qfr : queryFacets ){\n      for( String query : qfr.getQueries() ){\n        if (query.contains(AnalyticsParams.RESULT) && !query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==1) {\n              query = getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              query = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        } else if (query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==3) {\n              query = getQueryResult(qfr.getName(),pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n        QueryFacetAccumulator qAcc = new QueryFacetAccumulator(this,qfr.getName(),query);\n        final Query q;\n        try {\n          q = QParser.getParser(query, queryRequest).getQuery();\n        } catch( SyntaxError e ){\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"'\",e);\n        }\n        // The searcher sends docIds to the QueryFacetAccumulator which forwards\n        // them to <code>collectQuery()</code> in this class for collection.\n        Query filtered = new BooleanQuery.Builder()\n            .add(q, Occur.MUST)\n            .add(filter, Occur.FILTER)\n            .build();\n        searcher.search(filtered, qAcc);\n        computeQueryFacet(qfr.getName());\n        queryCount++;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Initiates the collecting of query facets\n   * @param filter the base filter to work against\n   * @throws IOException if searching failed\n   */\n  public void processQueryFacets(final Filter filter) throws IOException {\n    for( QueryFacetRequest qfr : queryFacets ){\n      for( String query : qfr.getQueries() ){\n        if (query.contains(AnalyticsParams.RESULT) && !query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==1) {\n              query = getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              query = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        } else if (query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==3) {\n              query = getQueryResult(qfr.getName(),pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n        QueryFacetAccumulator qAcc = new QueryFacetAccumulator(this,qfr.getName(),query);\n        final Query q;\n        try {\n          q = QParser.getParser(query, null, queryRequest).getQuery();\n        } catch( SyntaxError e ){\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"'\",e);\n        }\n        // The searcher sends docIds to the QueryFacetAccumulator which forwards\n        // them to <code>collectQuery()</code> in this class for collection.\n        Query filtered = new BooleanQuery.Builder()\n            .add(q, Occur.MUST)\n            .add(filter, Occur.FILTER)\n            .build();\n        searcher.search(filtered, qAcc);\n        computeQueryFacet(qfr.getName());\n        queryCount++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processQueryFacets(Filter).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processQueryFacets(Filter).mjava","sourceNew":"  /**\n   * Initiates the collecting of query facets\n   * @param filter the base filter to work against\n   * @throws IOException if searching failed\n   */\n  public void processQueryFacets(final Filter filter) throws IOException {\n    for( QueryFacetRequest qfr : queryFacets ){\n      for( String query : qfr.getQueries() ){\n        if (query.contains(AnalyticsParams.RESULT) && !query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==1) {\n              query = getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              query = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        } else if (query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==3) {\n              query = getQueryResult(qfr.getName(),pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n        QueryFacetAccumulator qAcc = new QueryFacetAccumulator(this,qfr.getName(),query);\n        final Query q;\n        try {\n          q = QParser.getParser(query, queryRequest).getQuery();\n        } catch( SyntaxError e ){\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"'\",e);\n        }\n        // The searcher sends docIds to the QueryFacetAccumulator which forwards\n        // them to <code>collectQuery()</code> in this class for collection.\n        Query filtered = new BooleanQuery.Builder()\n            .add(q, Occur.MUST)\n            .add(filter, Occur.FILTER)\n            .build();\n        searcher.search(filtered, qAcc);\n        computeQueryFacet(qfr.getName());\n        queryCount++;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Initiates the collecting of query facets\n   * @param filter the base filter to work against\n   * @throws IOException if searching failed\n   */\n  public void processQueryFacets(final Filter filter) throws IOException {\n    for( QueryFacetRequest qfr : queryFacets ){\n      for( String query : qfr.getQueries() ){\n        if (query.contains(AnalyticsParams.RESULT) && !query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==1) {\n              query = getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              query = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        } else if (query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==3) {\n              query = getQueryResult(qfr.getName(),pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n        QueryFacetAccumulator qAcc = new QueryFacetAccumulator(this,qfr.getName(),query);\n        final Query q;\n        try {\n          q = QParser.getParser(query, null, queryRequest).getQuery();\n        } catch( SyntaxError e ){\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"'\",e);\n        }\n        // The searcher sends docIds to the QueryFacetAccumulator which forwards\n        // them to <code>collectQuery()</code> in this class for collection.\n        Query filtered = new BooleanQuery.Builder()\n            .add(q, Occur.MUST)\n            .add(filter, Occur.FILTER)\n            .build();\n        searcher.search(filtered, qAcc);\n        computeQueryFacet(qfr.getName());\n        queryCount++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processQueryFacets(Filter).mjava","sourceNew":null,"sourceOld":"  /**\n   * Initiates the collecting of query facets\n   * @param filter the base filter to work against\n   * @throws IOException if searching failed\n   */\n  public void processQueryFacets(final Filter filter) throws IOException {\n    for( QueryFacetRequest qfr : queryFacets ){\n      for( String query : qfr.getQueries() ){\n        if (query.contains(AnalyticsParams.RESULT) && !query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==1) {\n              query = getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              query = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        } else if (query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==3) {\n              query = getQueryResult(qfr.getName(),pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n        QueryFacetAccumulator qAcc = new QueryFacetAccumulator(this,qfr.getName(),query);\n        final Query q;\n        try {\n          q = QParser.getParser(query, queryRequest).getQuery();\n        } catch( SyntaxError e ){\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"'\",e);\n        }\n        // The searcher sends docIds to the QueryFacetAccumulator which forwards\n        // them to <code>collectQuery()</code> in this class for collection.\n        Query filtered = new BooleanQuery.Builder()\n            .add(q, Occur.MUST)\n            .add(filter, Occur.FILTER)\n            .build();\n        searcher.search(filtered, qAcc);\n        computeQueryFacet(qfr.getName());\n        queryCount++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processQueryFacets(Filter).mjava","sourceNew":null,"sourceOld":"  /**\n   * Initiates the collecting of query facets\n   * @param filter the base filter to work against\n   * @throws IOException if searching failed\n   */\n  public void processQueryFacets(final Filter filter) throws IOException {\n    for( QueryFacetRequest qfr : queryFacets ){\n      for( String query : qfr.getQueries() ){\n        if (query.contains(AnalyticsParams.RESULT) && !query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==1) {\n              query = getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              query = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        } else if (query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==3) {\n              query = getQueryResult(qfr.getName(),pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n        QueryFacetAccumulator qAcc = new QueryFacetAccumulator(this,qfr.getName(),query);\n        final Query q;\n        try {\n          q = QParser.getParser(query, queryRequest).getQuery();\n        } catch( SyntaxError e ){\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"'\",e);\n        }\n        // The searcher sends docIds to the QueryFacetAccumulator which forwards\n        // them to <code>collectQuery()</code> in this class for collection.\n        Query filtered = new BooleanQuery.Builder()\n            .add(q, Occur.MUST)\n            .add(filter, Occur.FILTER)\n            .build();\n        searcher.search(filtered, qAcc);\n        computeQueryFacet(qfr.getName());\n        queryCount++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processQueryFacets(Filter).mjava","sourceNew":null,"sourceOld":"  /**\n   * Initiates the collecting of query facets\n   * @param filter the base filter to work against\n   * @throws IOException if searching failed\n   */\n  public void processQueryFacets(final Filter filter) throws IOException {\n    for( QueryFacetRequest qfr : queryFacets ){\n      for( String query : qfr.getQueries() ){\n        if (query.contains(AnalyticsParams.RESULT) && !query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==1) {\n              query = getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              query = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        } else if (query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==3) {\n              query = getQueryResult(qfr.getName(),pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n        QueryFacetAccumulator qAcc = new QueryFacetAccumulator(this,qfr.getName(),query);\n        final Query q;\n        try {\n          q = QParser.getParser(query, queryRequest).getQuery();\n        } catch( SyntaxError e ){\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"'\",e);\n        }\n        // The searcher sends docIds to the QueryFacetAccumulator which forwards\n        // them to <code>collectQuery()</code> in this class for collection.\n        Query filtered = new BooleanQuery.Builder()\n            .add(q, Occur.MUST)\n            .add(filter, Occur.FILTER)\n            .build();\n        searcher.search(filtered, qAcc);\n        computeQueryFacet(qfr.getName());\n        queryCount++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["1db68e96dd908fcd79ef809095822736aa601d08","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f"],"1db68e96dd908fcd79ef809095822736aa601d08":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["1db68e96dd908fcd79ef809095822736aa601d08"],"30c8e5574b55d57947e989443dfde611646530ee":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["1db68e96dd908fcd79ef809095822736aa601d08","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["1db68e96dd908fcd79ef809095822736aa601d08","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"1db68e96dd908fcd79ef809095822736aa601d08":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["1db68e96dd908fcd79ef809095822736aa601d08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}