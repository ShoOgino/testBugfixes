{"path":"src/java/org/apache/lucene/analysis/TeeSinkTokenFilter#addSinkTokenStream(SinkTokenStream).mjava","commits":[{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/TeeSinkTokenFilter#addSinkTokenStream(SinkTokenStream).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adds a {@link SinkTokenStream} created by another <code>TeeSinkTokenFilter</code>\n   * to this one. The supplied stream will also receive all consumed tokens.\n   * This method can be used to pass tokens from two different tees to one sink.\n   */\n  public void addSinkTokenStream(final SinkTokenStream sink) {\n    // check that sink has correct factory\n    if (!this.getAttributeFactory().equals(sink.getAttributeFactory())) {\n      throw new IllegalArgumentException(\"The supplied sink is not compatible to this tee\");\n    }\n    // add eventually missing attribute impls to the existing sink\n    for (Iterator it = this.cloneAttributes().getAttributeImplsIterator(); it.hasNext(); ) {\n      sink.addAttributeImpl((AttributeImpl) it.next());\n    }\n    this.sinks.add(new WeakReference(sink));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bc4668fce3cd5e972720deadebcdc3577d31550","date":1255940063,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/TeeSinkTokenFilter#addSinkTokenStream(SinkTokenStream).mjava","pathOld":"src/java/org/apache/lucene/analysis/TeeSinkTokenFilter#addSinkTokenStream(SinkTokenStream).mjava","sourceNew":"  /**\n   * Adds a {@link SinkTokenStream} created by another <code>TeeSinkTokenFilter</code>\n   * to this one. The supplied stream will also receive all consumed tokens.\n   * This method can be used to pass tokens from two different tees to one sink.\n   */\n  public void addSinkTokenStream(final SinkTokenStream sink) {\n    // check that sink has correct factory\n    if (!this.getAttributeFactory().equals(sink.getAttributeFactory())) {\n      throw new IllegalArgumentException(\"The supplied sink is not compatible to this tee\");\n    }\n    // add eventually missing attribute impls to the existing sink\n    for (Iterator<AttributeImpl> it = this.cloneAttributes().getAttributeImplsIterator(); it.hasNext(); ) {\n      sink.addAttributeImpl(it.next());\n    }\n    this.sinks.add(new WeakReference<SinkTokenStream>(sink));\n  }\n\n","sourceOld":"  /**\n   * Adds a {@link SinkTokenStream} created by another <code>TeeSinkTokenFilter</code>\n   * to this one. The supplied stream will also receive all consumed tokens.\n   * This method can be used to pass tokens from two different tees to one sink.\n   */\n  public void addSinkTokenStream(final SinkTokenStream sink) {\n    // check that sink has correct factory\n    if (!this.getAttributeFactory().equals(sink.getAttributeFactory())) {\n      throw new IllegalArgumentException(\"The supplied sink is not compatible to this tee\");\n    }\n    // add eventually missing attribute impls to the existing sink\n    for (Iterator it = this.cloneAttributes().getAttributeImplsIterator(); it.hasNext(); ) {\n      sink.addAttributeImpl((AttributeImpl) it.next());\n    }\n    this.sinks.add(new WeakReference(sink));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/TeeSinkTokenFilter#addSinkTokenStream(SinkTokenStream).mjava","sourceNew":null,"sourceOld":"  /**\n   * Adds a {@link SinkTokenStream} created by another <code>TeeSinkTokenFilter</code>\n   * to this one. The supplied stream will also receive all consumed tokens.\n   * This method can be used to pass tokens from two different tees to one sink.\n   */\n  public void addSinkTokenStream(final SinkTokenStream sink) {\n    // check that sink has correct factory\n    if (!this.getAttributeFactory().equals(sink.getAttributeFactory())) {\n      throw new IllegalArgumentException(\"The supplied sink is not compatible to this tee\");\n    }\n    // add eventually missing attribute impls to the existing sink\n    for (Iterator<AttributeImpl> it = this.cloneAttributes().getAttributeImplsIterator(); it.hasNext(); ) {\n      sink.addAttributeImpl(it.next());\n    }\n    this.sinks.add(new WeakReference<SinkTokenStream>(sink));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3bc4668fce3cd5e972720deadebcdc3577d31550"],"3bc4668fce3cd5e972720deadebcdc3577d31550":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3bc4668fce3cd5e972720deadebcdc3577d31550":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["3bc4668fce3cd5e972720deadebcdc3577d31550"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}