{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#nextDoc().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#nextDoc().mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#nextDoc().mjava","sourceNew":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (acceptDocs != null && !acceptDocs.get(doc)) continue;\n        return doc;\n      }\n    }\n\n","sourceOld":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (acceptDocs != null && !acceptDocs.get(doc)) continue;\n        return doc;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#nextDoc().mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#nextDoc().mjava","sourceNew":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      ++doc;\n      if (doc>=maxDoc) {\n        return doc=NO_MORE_DOCS;\n      }\n      return doc;\n    }\n\n","sourceOld":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (acceptDocs != null && !acceptDocs.get(doc)) continue;\n        return doc;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#nextDoc().mjava","sourceNew":null,"sourceOld":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      ++doc;\n      if (doc>=maxDoc) {\n        return doc=NO_MORE_DOCS;\n      }\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dd748bb245633a8195281556bb0e68a6ea97d18":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}