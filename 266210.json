{"path":"solr/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","pathOld":"/dev/null","sourceNew":"  public void testToAndFromSolrDocument()\n  {\n    Item item = new Item();\n    item.id = \"one\";\n    item.inStock = false;\n    item.categories =  new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    item.features = Arrays.asList( item.categories );\n    List<String> supA =  Arrays.asList(  new String[] { \"supA1\", \"supA2\", \"supA3\" } );\n    List<String> supB =  Arrays.asList(  new String[] { \"supB1\", \"supB2\", \"supB3\"});\n    item.supplier = new HashMap<String, List<String>>();\n    item.supplier.put(\"supplier_supA\", supA);\n    item.supplier.put(\"supplier_supB\", supB);\n    \n    item.supplier_simple = new HashMap<String, String>();\n    item.supplier_simple.put(\"sup_simple_supA\", \"supA_val\");\n    item.supplier_simple.put(\"sup_simple_supB\", \"supB_val\");\n    \n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument( item );\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.add( ClientUtils.toSolrDocument(doc) );\n    Item out = binder.getBeans( Item.class, docs ).get( 0 );\n    Item singleOut = binder.getBean(Item.class, ClientUtils.toSolrDocument(doc));\n    \n    // make sure it came out the same\n    Assert.assertEquals( item.id, out.id );\n    Assert.assertEquals( item.inStock, out.inStock );\n    Assert.assertEquals( item.categories.length, out.categories.length );\n    Assert.assertEquals( item.features, out.features );\n    Assert.assertEquals( supA,out.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( item.id, singleOut.id );\n    Assert.assertEquals( item.inStock, singleOut.inStock );\n    Assert.assertEquals( item.categories.length, singleOut.categories.length );\n    Assert.assertEquals( item.features, singleOut.features );\n    Assert.assertEquals( supA, singleOut.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, singleOut.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n//    put back \"out\" as Bean, to see if both ways work as you would expect\n//    but the Field that \"allSuppliers\" need to be cleared, as it is just for \n//    retrieving data, not to post data\n    out.allSuppliers = null;\n    SolrInputDocument doc1 = binder.toSolrInputDocument( out );\n    \n    SolrDocumentList docs1 = new SolrDocumentList();\n    docs1.add( ClientUtils.toSolrDocument(doc1) );\n    Item out1 = binder.getBeans( Item.class, docs1 ).get( 0 );\n    \n    Assert.assertEquals( item.id, out1.id );\n    Assert.assertEquals( item.inStock, out1.inStock );\n    Assert.assertEquals( item.categories.length, out1.categories.length );\n    Assert.assertEquals( item.features, out1.features );\n\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out1.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( supA,out1.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out1.supplier.get(\"supplier_supB\"));\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","sourceNew":null,"sourceOld":"  public void testToAndFromSolrDocument()\n  {\n    Item item = new Item();\n    item.id = \"one\";\n    item.inStock = false;\n    item.categories =  new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    item.features = Arrays.asList( item.categories );\n    List<String> supA =  Arrays.asList(  new String[] { \"supA1\", \"supA2\", \"supA3\" } );\n    List<String> supB =  Arrays.asList(  new String[] { \"supB1\", \"supB2\", \"supB3\"});\n    item.supplier = new HashMap<String, List<String>>();\n    item.supplier.put(\"supplier_supA\", supA);\n    item.supplier.put(\"supplier_supB\", supB);\n    \n    item.supplier_simple = new HashMap<String, String>();\n    item.supplier_simple.put(\"sup_simple_supA\", \"supA_val\");\n    item.supplier_simple.put(\"sup_simple_supB\", \"supB_val\");\n    \n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument( item );\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.add( ClientUtils.toSolrDocument(doc) );\n    Item out = binder.getBeans( Item.class, docs ).get( 0 );\n    Item singleOut = binder.getBean(Item.class, ClientUtils.toSolrDocument(doc));\n    \n    // make sure it came out the same\n    Assert.assertEquals( item.id, out.id );\n    Assert.assertEquals( item.inStock, out.inStock );\n    Assert.assertEquals( item.categories.length, out.categories.length );\n    Assert.assertEquals( item.features, out.features );\n    Assert.assertEquals( supA,out.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( item.id, singleOut.id );\n    Assert.assertEquals( item.inStock, singleOut.inStock );\n    Assert.assertEquals( item.categories.length, singleOut.categories.length );\n    Assert.assertEquals( item.features, singleOut.features );\n    Assert.assertEquals( supA, singleOut.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, singleOut.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n//    put back \"out\" as Bean, to see if both ways work as you would expect\n//    but the Field that \"allSuppliers\" need to be cleared, as it is just for \n//    retrieving data, not to post data\n    out.allSuppliers = null;\n    SolrInputDocument doc1 = binder.toSolrInputDocument( out );\n    \n    SolrDocumentList docs1 = new SolrDocumentList();\n    docs1.add( ClientUtils.toSolrDocument(doc1) );\n    Item out1 = binder.getBeans( Item.class, docs1 ).get( 0 );\n    \n    Assert.assertEquals( item.id, out1.id );\n    Assert.assertEquals( item.inStock, out1.inStock );\n    Assert.assertEquals( item.categories.length, out1.categories.length );\n    Assert.assertEquals( item.features, out1.features );\n\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out1.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( supA,out1.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out1.supplier.get(\"supplier_supB\"));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","pathOld":"src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","sourceNew":"  public void testToAndFromSolrDocument()\n  {\n    Item item = new Item();\n    item.id = \"one\";\n    item.inStock = false;\n    item.categories =  new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    item.features = Arrays.asList( item.categories );\n    List<String> supA =  Arrays.asList(  new String[] { \"supA1\", \"supA2\", \"supA3\" } );\n    List<String> supB =  Arrays.asList(  new String[] { \"supB1\", \"supB2\", \"supB3\"});\n    item.supplier = new HashMap<String, List<String>>();\n    item.supplier.put(\"supplier_supA\", supA);\n    item.supplier.put(\"supplier_supB\", supB);\n    \n    item.supplier_simple = new HashMap<String, String>();\n    item.supplier_simple.put(\"sup_simple_supA\", \"supA_val\");\n    item.supplier_simple.put(\"sup_simple_supB\", \"supB_val\");\n    \n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument( item );\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.add( ClientUtils.toSolrDocument(doc) );\n    Item out = binder.getBeans( Item.class, docs ).get( 0 );\n    Item singleOut = binder.getBean(Item.class, ClientUtils.toSolrDocument(doc));\n    \n    // make sure it came out the same\n    Assert.assertEquals( item.id, out.id );\n    Assert.assertEquals( item.inStock, out.inStock );\n    Assert.assertEquals( item.categories.length, out.categories.length );\n    Assert.assertEquals( item.features, out.features );\n    Assert.assertEquals( supA,out.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( item.id, singleOut.id );\n    Assert.assertEquals( item.inStock, singleOut.inStock );\n    Assert.assertEquals( item.categories.length, singleOut.categories.length );\n    Assert.assertEquals( item.features, singleOut.features );\n    Assert.assertEquals( supA, singleOut.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, singleOut.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n//    put back \"out\" as Bean, to see if both ways work as you would expect\n//    but the Field that \"allSuppliers\" need to be cleared, as it is just for \n//    retrieving data, not to post data\n    out.allSuppliers = null;\n    SolrInputDocument doc1 = binder.toSolrInputDocument( out );\n    \n    SolrDocumentList docs1 = new SolrDocumentList();\n    docs1.add( ClientUtils.toSolrDocument(doc1) );\n    Item out1 = binder.getBeans( Item.class, docs1 ).get( 0 );\n    \n    Assert.assertEquals( item.id, out1.id );\n    Assert.assertEquals( item.inStock, out1.inStock );\n    Assert.assertEquals( item.categories.length, out1.categories.length );\n    Assert.assertEquals( item.features, out1.features );\n\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out1.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( supA,out1.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out1.supplier.get(\"supplier_supB\"));\n    \n  }\n\n","sourceOld":"  public void testToAndFromSolrDocument()\n  {\n    Item item = new Item();\n    item.id = \"one\";\n    item.inStock = false;\n    item.categories =  new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    item.features = Arrays.asList( item.categories );\n    List<String> supA =  Arrays.asList(  new String[] { \"supA1\", \"supA2\", \"supA3\" } );\n    List<String> supB =  Arrays.asList(  new String[] { \"supB1\", \"supB2\", \"supB3\"});\n    item.supplier = new HashMap<String, List<String>>();\n    item.supplier.put(\"supplier_supA\", supA);\n    item.supplier.put(\"supplier_supB\", supB);\n    \n    item.supplier_simple = new HashMap<String, String>();\n    item.supplier_simple.put(\"sup_simple_supA\", \"supA_val\");\n    item.supplier_simple.put(\"sup_simple_supB\", \"supB_val\");\n    \n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument( item );\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.add( ClientUtils.toSolrDocument(doc) );\n    Item out = binder.getBeans( Item.class, docs ).get( 0 );\n    Item singleOut = binder.getBean(Item.class, ClientUtils.toSolrDocument(doc));\n    \n    // make sure it came out the same\n    Assert.assertEquals( item.id, out.id );\n    Assert.assertEquals( item.inStock, out.inStock );\n    Assert.assertEquals( item.categories.length, out.categories.length );\n    Assert.assertEquals( item.features, out.features );\n    Assert.assertEquals( supA,out.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( item.id, singleOut.id );\n    Assert.assertEquals( item.inStock, singleOut.inStock );\n    Assert.assertEquals( item.categories.length, singleOut.categories.length );\n    Assert.assertEquals( item.features, singleOut.features );\n    Assert.assertEquals( supA, singleOut.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, singleOut.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n//    put back \"out\" as Bean, to see if both ways work as you would expect\n//    but the Field that \"allSuppliers\" need to be cleared, as it is just for \n//    retrieving data, not to post data\n    out.allSuppliers = null;\n    SolrInputDocument doc1 = binder.toSolrInputDocument( out );\n    \n    SolrDocumentList docs1 = new SolrDocumentList();\n    docs1.add( ClientUtils.toSolrDocument(doc1) );\n    Item out1 = binder.getBeans( Item.class, docs1 ).get( 0 );\n    \n    Assert.assertEquals( item.id, out1.id );\n    Assert.assertEquals( item.inStock, out1.inStock );\n    Assert.assertEquals( item.categories.length, out1.categories.length );\n    Assert.assertEquals( item.features, out1.features );\n\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out1.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( supA,out1.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out1.supplier.get(\"supplier_supB\"));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","pathOld":"/dev/null","sourceNew":"  public void testToAndFromSolrDocument()\n  {\n    Item item = new Item();\n    item.id = \"one\";\n    item.inStock = false;\n    item.categories =  new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    item.features = Arrays.asList( item.categories );\n    List<String> supA =  Arrays.asList(  new String[] { \"supA1\", \"supA2\", \"supA3\" } );\n    List<String> supB =  Arrays.asList(  new String[] { \"supB1\", \"supB2\", \"supB3\"});\n    item.supplier = new HashMap<String, List<String>>();\n    item.supplier.put(\"supplier_supA\", supA);\n    item.supplier.put(\"supplier_supB\", supB);\n    \n    item.supplier_simple = new HashMap<String, String>();\n    item.supplier_simple.put(\"sup_simple_supA\", \"supA_val\");\n    item.supplier_simple.put(\"sup_simple_supB\", \"supB_val\");\n    \n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument( item );\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.add( ClientUtils.toSolrDocument(doc) );\n    Item out = binder.getBeans( Item.class, docs ).get( 0 );\n    Item singleOut = binder.getBean(Item.class, ClientUtils.toSolrDocument(doc));\n    \n    // make sure it came out the same\n    Assert.assertEquals( item.id, out.id );\n    Assert.assertEquals( item.inStock, out.inStock );\n    Assert.assertEquals( item.categories.length, out.categories.length );\n    Assert.assertEquals( item.features, out.features );\n    Assert.assertEquals( supA,out.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( item.id, singleOut.id );\n    Assert.assertEquals( item.inStock, singleOut.inStock );\n    Assert.assertEquals( item.categories.length, singleOut.categories.length );\n    Assert.assertEquals( item.features, singleOut.features );\n    Assert.assertEquals( supA, singleOut.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, singleOut.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n//    put back \"out\" as Bean, to see if both ways work as you would expect\n//    but the Field that \"allSuppliers\" need to be cleared, as it is just for \n//    retrieving data, not to post data\n    out.allSuppliers = null;\n    SolrInputDocument doc1 = binder.toSolrInputDocument( out );\n    \n    SolrDocumentList docs1 = new SolrDocumentList();\n    docs1.add( ClientUtils.toSolrDocument(doc1) );\n    Item out1 = binder.getBeans( Item.class, docs1 ).get( 0 );\n    \n    Assert.assertEquals( item.id, out1.id );\n    Assert.assertEquals( item.inStock, out1.inStock );\n    Assert.assertEquals( item.categories.length, out1.categories.length );\n    Assert.assertEquals( item.features, out1.features );\n\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out1.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( supA,out1.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out1.supplier.get(\"supplier_supB\"));\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","sourceNew":"  public void testToAndFromSolrDocument()\n  {\n    Item item = new Item();\n    item.id = \"one\";\n    item.inStock = false;\n    item.categories =  new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    item.features = Arrays.asList( item.categories );\n    List<String> supA =  Arrays.asList(  new String[] { \"supA1\", \"supA2\", \"supA3\" } );\n    List<String> supB =  Arrays.asList(  new String[] { \"supB1\", \"supB2\", \"supB3\"});\n    item.supplier = new HashMap<String, List<String>>();\n    item.supplier.put(\"supplier_supA\", supA);\n    item.supplier.put(\"supplier_supB\", supB);\n    \n    item.supplier_simple = new HashMap<String, String>();\n    item.supplier_simple.put(\"sup_simple_supA\", \"supA_val\");\n    item.supplier_simple.put(\"sup_simple_supB\", \"supB_val\");\n    \n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument( item );\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.add( ClientUtils.toSolrDocument(doc) );\n    Item out = binder.getBeans( Item.class, docs ).get( 0 );\n    Item singleOut = binder.getBean(Item.class, ClientUtils.toSolrDocument(doc));\n    \n    // make sure it came out the same\n    Assert.assertEquals( item.id, out.id );\n    Assert.assertEquals( item.inStock, out.inStock );\n    Assert.assertEquals( item.categories.length, out.categories.length );\n    Assert.assertEquals( item.features, out.features );\n    Assert.assertEquals( supA,out.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( item.id, singleOut.id );\n    Assert.assertEquals( item.inStock, singleOut.inStock );\n    Assert.assertEquals( item.categories.length, singleOut.categories.length );\n    Assert.assertEquals( item.features, singleOut.features );\n    Assert.assertEquals( supA, singleOut.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, singleOut.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n//    put back \"out\" as Bean, to see if both ways work as you would expect\n//    but the Field that \"allSuppliers\" need to be cleared, as it is just for \n//    retrieving data, not to post data\n    out.allSuppliers = null;\n    SolrInputDocument doc1 = binder.toSolrInputDocument( out );\n    \n    SolrDocumentList docs1 = new SolrDocumentList();\n    docs1.add( ClientUtils.toSolrDocument(doc1) );\n    Item out1 = binder.getBeans( Item.class, docs1 ).get( 0 );\n    \n    Assert.assertEquals( item.id, out1.id );\n    Assert.assertEquals( item.inStock, out1.inStock );\n    Assert.assertEquals( item.categories.length, out1.categories.length );\n    Assert.assertEquals( item.features, out1.features );\n\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out1.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( supA,out1.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out1.supplier.get(\"supplier_supB\"));\n    \n  }\n\n","sourceOld":"  public void testToAndFromSolrDocument()\n  {\n    Item item = new Item();\n    item.id = \"one\";\n    item.inStock = false;\n    item.categories =  new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    item.features = Arrays.asList( item.categories );\n    List<String> supA =  Arrays.asList(  new String[] { \"supA1\", \"supA2\", \"supA3\" } );\n    List<String> supB =  Arrays.asList(  new String[] { \"supB1\", \"supB2\", \"supB3\"});\n    item.supplier = new HashMap<String, List<String>>();\n    item.supplier.put(\"supplier_supA\", supA);\n    item.supplier.put(\"supplier_supB\", supB);\n    \n    item.supplier_simple = new HashMap<String, String>();\n    item.supplier_simple.put(\"sup_simple_supA\", \"supA_val\");\n    item.supplier_simple.put(\"sup_simple_supB\", \"supB_val\");\n    \n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument( item );\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.add( ClientUtils.toSolrDocument(doc) );\n    Item out = binder.getBeans( Item.class, docs ).get( 0 );\n    Item singleOut = binder.getBean(Item.class, ClientUtils.toSolrDocument(doc));\n    \n    // make sure it came out the same\n    Assert.assertEquals( item.id, out.id );\n    Assert.assertEquals( item.inStock, out.inStock );\n    Assert.assertEquals( item.categories.length, out.categories.length );\n    Assert.assertEquals( item.features, out.features );\n    Assert.assertEquals( supA,out.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( item.id, singleOut.id );\n    Assert.assertEquals( item.inStock, singleOut.inStock );\n    Assert.assertEquals( item.categories.length, singleOut.categories.length );\n    Assert.assertEquals( item.features, singleOut.features );\n    Assert.assertEquals( supA, singleOut.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, singleOut.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n//    put back \"out\" as Bean, to see if both ways work as you would expect\n//    but the Field that \"allSuppliers\" need to be cleared, as it is just for \n//    retrieving data, not to post data\n    out.allSuppliers = null;\n    SolrInputDocument doc1 = binder.toSolrInputDocument( out );\n    \n    SolrDocumentList docs1 = new SolrDocumentList();\n    docs1.add( ClientUtils.toSolrDocument(doc1) );\n    Item out1 = binder.getBeans( Item.class, docs1 ).get( 0 );\n    \n    Assert.assertEquals( item.id, out1.id );\n    Assert.assertEquals( item.inStock, out1.inStock );\n    Assert.assertEquals( item.categories.length, out1.categories.length );\n    Assert.assertEquals( item.features, out1.features );\n\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out1.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( supA,out1.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out1.supplier.get(\"supplier_supB\"));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","sourceNew":"  public void testToAndFromSolrDocument()\n  {\n    Item item = new Item();\n    item.id = \"one\";\n    item.inStock = false;\n    item.categories =  new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    item.features = Arrays.asList( item.categories );\n    List<String> supA =  Arrays.asList(  new String[] { \"supA1\", \"supA2\", \"supA3\" } );\n    List<String> supB =  Arrays.asList(  new String[] { \"supB1\", \"supB2\", \"supB3\"});\n    item.supplier = new HashMap<String, List<String>>();\n    item.supplier.put(\"supplier_supA\", supA);\n    item.supplier.put(\"supplier_supB\", supB);\n    \n    item.supplier_simple = new HashMap<String, String>();\n    item.supplier_simple.put(\"sup_simple_supA\", \"supA_val\");\n    item.supplier_simple.put(\"sup_simple_supB\", \"supB_val\");\n    \n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument( item );\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.add( ClientUtils.toSolrDocument(doc) );\n    Item out = binder.getBeans( Item.class, docs ).get( 0 );\n    Item singleOut = binder.getBean(Item.class, ClientUtils.toSolrDocument(doc));\n    \n    // make sure it came out the same\n    Assert.assertEquals( item.id, out.id );\n    Assert.assertEquals( item.inStock, out.inStock );\n    Assert.assertEquals( item.categories.length, out.categories.length );\n    Assert.assertEquals( item.features, out.features );\n    Assert.assertEquals( supA,out.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( item.id, singleOut.id );\n    Assert.assertEquals( item.inStock, singleOut.inStock );\n    Assert.assertEquals( item.categories.length, singleOut.categories.length );\n    Assert.assertEquals( item.features, singleOut.features );\n    Assert.assertEquals( supA, singleOut.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, singleOut.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n//    put back \"out\" as Bean, to see if both ways work as you would expect\n//    but the Field that \"allSuppliers\" need to be cleared, as it is just for \n//    retrieving data, not to post data\n    out.allSuppliers = null;\n    SolrInputDocument doc1 = binder.toSolrInputDocument( out );\n    \n    SolrDocumentList docs1 = new SolrDocumentList();\n    docs1.add( ClientUtils.toSolrDocument(doc1) );\n    Item out1 = binder.getBeans( Item.class, docs1 ).get( 0 );\n    \n    Assert.assertEquals( item.id, out1.id );\n    Assert.assertEquals( item.inStock, out1.inStock );\n    Assert.assertEquals( item.categories.length, out1.categories.length );\n    Assert.assertEquals( item.features, out1.features );\n\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out1.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( supA,out1.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out1.supplier.get(\"supplier_supB\"));\n    \n  }\n\n","sourceOld":"  public void testToAndFromSolrDocument()\n  {\n    Item item = new Item();\n    item.id = \"one\";\n    item.inStock = false;\n    item.categories =  new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    item.features = Arrays.asList( item.categories );\n    List<String> supA =  Arrays.asList(  new String[] { \"supA1\", \"supA2\", \"supA3\" } );\n    List<String> supB =  Arrays.asList(  new String[] { \"supB1\", \"supB2\", \"supB3\"});\n    item.supplier = new HashMap<String, List<String>>();\n    item.supplier.put(\"supplier_supA\", supA);\n    item.supplier.put(\"supplier_supB\", supB);\n    \n    item.supplier_simple = new HashMap<String, String>();\n    item.supplier_simple.put(\"sup_simple_supA\", \"supA_val\");\n    item.supplier_simple.put(\"sup_simple_supB\", \"supB_val\");\n    \n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument( item );\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.add( ClientUtils.toSolrDocument(doc) );\n    Item out = binder.getBeans( Item.class, docs ).get( 0 );\n    Item singleOut = binder.getBean(Item.class, ClientUtils.toSolrDocument(doc));\n    \n    // make sure it came out the same\n    Assert.assertEquals( item.id, out.id );\n    Assert.assertEquals( item.inStock, out.inStock );\n    Assert.assertEquals( item.categories.length, out.categories.length );\n    Assert.assertEquals( item.features, out.features );\n    Assert.assertEquals( supA,out.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( item.id, singleOut.id );\n    Assert.assertEquals( item.inStock, singleOut.inStock );\n    Assert.assertEquals( item.categories.length, singleOut.categories.length );\n    Assert.assertEquals( item.features, singleOut.features );\n    Assert.assertEquals( supA, singleOut.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, singleOut.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n//    put back \"out\" as Bean, to see if both ways work as you would expect\n//    but the Field that \"allSuppliers\" need to be cleared, as it is just for \n//    retrieving data, not to post data\n    out.allSuppliers = null;\n    SolrInputDocument doc1 = binder.toSolrInputDocument( out );\n    \n    SolrDocumentList docs1 = new SolrDocumentList();\n    docs1.add( ClientUtils.toSolrDocument(doc1) );\n    Item out1 = binder.getBeans( Item.class, docs1 ).get( 0 );\n    \n    Assert.assertEquals( item.id, out1.id );\n    Assert.assertEquals( item.inStock, out1.inStock );\n    Assert.assertEquals( item.categories.length, out1.categories.length );\n    Assert.assertEquals( item.features, out1.features );\n\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out1.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( supA,out1.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out1.supplier.get(\"supplier_supB\"));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","sourceNew":"  public void testToAndFromSolrDocument()\n  {\n    Item item = new Item();\n    item.id = \"one\";\n    item.inStock = false;\n    item.categories =  new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    item.features = Arrays.asList( item.categories );\n    List<String> supA =  Arrays.asList(  new String[] { \"supA1\", \"supA2\", \"supA3\" } );\n    List<String> supB =  Arrays.asList(  new String[] { \"supB1\", \"supB2\", \"supB3\"});\n    item.supplier = new HashMap<String, List<String>>();\n    item.supplier.put(\"supplier_supA\", supA);\n    item.supplier.put(\"supplier_supB\", supB);\n    \n    item.supplier_simple = new HashMap<String, String>();\n    item.supplier_simple.put(\"sup_simple_supA\", \"supA_val\");\n    item.supplier_simple.put(\"sup_simple_supB\", \"supB_val\");\n    \n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument( item );\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.add( ClientUtils.toSolrDocument(doc) );\n    Item out = binder.getBeans( Item.class, docs ).get( 0 );\n    Item singleOut = binder.getBean(Item.class, ClientUtils.toSolrDocument(doc));\n    \n    // make sure it came out the same\n    Assert.assertEquals( item.id, out.id );\n    Assert.assertEquals( item.inStock, out.inStock );\n    Assert.assertEquals( item.categories.length, out.categories.length );\n    Assert.assertEquals( item.features, out.features );\n    Assert.assertEquals( supA,out.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( item.id, singleOut.id );\n    Assert.assertEquals( item.inStock, singleOut.inStock );\n    Assert.assertEquals( item.categories.length, singleOut.categories.length );\n    Assert.assertEquals( item.features, singleOut.features );\n    Assert.assertEquals( supA, singleOut.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, singleOut.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n//    put back \"out\" as Bean, to see if both ways work as you would expect\n//    but the Field that \"allSuppliers\" need to be cleared, as it is just for \n//    retrieving data, not to post data\n    out.allSuppliers = null;\n    SolrInputDocument doc1 = binder.toSolrInputDocument( out );\n    \n    SolrDocumentList docs1 = new SolrDocumentList();\n    docs1.add( ClientUtils.toSolrDocument(doc1) );\n    Item out1 = binder.getBeans( Item.class, docs1 ).get( 0 );\n    \n    Assert.assertEquals( item.id, out1.id );\n    Assert.assertEquals( item.inStock, out1.inStock );\n    Assert.assertEquals( item.categories.length, out1.categories.length );\n    Assert.assertEquals( item.features, out1.features );\n\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out1.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( supA,out1.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out1.supplier.get(\"supplier_supB\"));\n    \n  }\n\n","sourceOld":"  public void testToAndFromSolrDocument()\n  {\n    Item item = new Item();\n    item.id = \"one\";\n    item.inStock = false;\n    item.categories =  new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    item.features = Arrays.asList( item.categories );\n    List<String> supA =  Arrays.asList(  new String[] { \"supA1\", \"supA2\", \"supA3\" } );\n    List<String> supB =  Arrays.asList(  new String[] { \"supB1\", \"supB2\", \"supB3\"});\n    item.supplier = new HashMap<String, List<String>>();\n    item.supplier.put(\"supplier_supA\", supA);\n    item.supplier.put(\"supplier_supB\", supB);\n    \n    item.supplier_simple = new HashMap<String, String>();\n    item.supplier_simple.put(\"sup_simple_supA\", \"supA_val\");\n    item.supplier_simple.put(\"sup_simple_supB\", \"supB_val\");\n    \n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument( item );\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.add( ClientUtils.toSolrDocument(doc) );\n    Item out = binder.getBeans( Item.class, docs ).get( 0 );\n    Item singleOut = binder.getBean(Item.class, ClientUtils.toSolrDocument(doc));\n    \n    // make sure it came out the same\n    Assert.assertEquals( item.id, out.id );\n    Assert.assertEquals( item.inStock, out.inStock );\n    Assert.assertEquals( item.categories.length, out.categories.length );\n    Assert.assertEquals( item.features, out.features );\n    Assert.assertEquals( supA,out.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( item.id, singleOut.id );\n    Assert.assertEquals( item.inStock, singleOut.inStock );\n    Assert.assertEquals( item.categories.length, singleOut.categories.length );\n    Assert.assertEquals( item.features, singleOut.features );\n    Assert.assertEquals( supA, singleOut.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, singleOut.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n//    put back \"out\" as Bean, to see if both ways work as you would expect\n//    but the Field that \"allSuppliers\" need to be cleared, as it is just for \n//    retrieving data, not to post data\n    out.allSuppliers = null;\n    SolrInputDocument doc1 = binder.toSolrInputDocument( out );\n    \n    SolrDocumentList docs1 = new SolrDocumentList();\n    docs1.add( ClientUtils.toSolrDocument(doc1) );\n    Item out1 = binder.getBeans( Item.class, docs1 ).get( 0 );\n    \n    Assert.assertEquals( item.id, out1.id );\n    Assert.assertEquals( item.inStock, out1.inStock );\n    Assert.assertEquals( item.categories.length, out1.categories.length );\n    Assert.assertEquals( item.features, out1.features );\n\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out1.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( supA,out1.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out1.supplier.get(\"supplier_supB\"));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}