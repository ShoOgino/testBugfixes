{"path":"lucene/src/java/org/apache/lucene/util/automaton/fst/Util#[T]_toDot(FST[T],PrintStream).mjava","commits":[{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Util#[T]_toDot(FST[T],PrintStream).mjava","pathOld":"/dev/null","sourceNew":"  public static<T> void toDot(FST<T> fst, PrintStream out) throws IOException {\n    \n    final FST.Arc<T> startArc = fst.getFirstArc(new FST.Arc<T>());\n\n    final List<FST.Arc<T>> queue = new ArrayList<FST.Arc<T>>();\n    queue.add(startArc);\n\n    final Set<Integer> seen = new HashSet<Integer>();\n    seen.add(startArc.target);\n    \n    out.println(\"digraph FST {\");\n    out.println(\"  rankdir = LR;\");\n    //out.println(\"  \" + startNode + \" [shape=circle label=\" + startNode + \"];\");\n    out.println(\"  \" + startArc.target + \" [label=\\\"\\\" shape=circle];\");\n    out.println(\"  initial [shape=point color=white label=\\\"\\\"];\");\n    out.println(\"  initial -> \" + startArc.target);\n\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n\n    while(queue.size() != 0) {\n      FST.Arc<T> arc = queue.get(queue.size()-1);\n      queue.remove(queue.size()-1);\n      //System.out.println(\"dot cycle target=\" + arc.target);\n\n      if (fst.targetHasArcs(arc)) {\n\n        // scan all arcs\n        final int node = arc.target;\n        fst.readFirstTargetArc(arc, arc);\n        while(true) {\n\n          //System.out.println(\"  cycle label=\" + arc.label + \" (\" + (char) arc.label + \") target=\" + arc.target);\n          if (!seen.contains(arc.target)) {\n            final String shape;\n            if (arc.target == -1) {\n              shape = \"doublecircle\";\n            } else {\n              shape = \"circle\";\n            }\n            out.println(\"  \" + arc.target + \" [shape=\" + shape + \"];\");\n            seen.add(arc.target);\n            queue.add(new FST.Arc<T>().copyFrom(arc));\n            //System.out.println(\"    new!\");\n          }\n          String outs;\n          if (arc.output != NO_OUTPUT) {\n            outs = \"/\" + fst.outputs.outputToString(arc.output);\n          } else {\n            outs = \"\";\n          }\n          final char cl;\n          if (arc.label == FST.END_LABEL) {\n            cl = '~';\n          } else {\n            cl = (char) arc.label;\n          }\n          out.println(\"  \" + node + \" -> \" + arc.target + \" [label=\\\"\" + cl + outs + \"\\\"]\");\n          //if (arc.flag(FST.BIT_TARGET_NEXT)) {\n          //out.print(\" color=blue\");\n          //}\n          //out.println(\"];\");\n        \n          if (arc.isLast()) {\n            break;\n          } else {\n            fst.readNextArc(arc);\n          }\n        }\n      }\n    }\n    out.println(\"}\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Util#[T]_toDot(FST[T],PrintStream).mjava","pathOld":"/dev/null","sourceNew":"  public static<T> void toDot(FST<T> fst, PrintStream out) throws IOException {\n    \n    final FST.Arc<T> startArc = fst.getFirstArc(new FST.Arc<T>());\n\n    final List<FST.Arc<T>> queue = new ArrayList<FST.Arc<T>>();\n    queue.add(startArc);\n\n    final Set<Integer> seen = new HashSet<Integer>();\n    seen.add(startArc.target);\n    \n    out.println(\"digraph FST {\");\n    out.println(\"  rankdir = LR;\");\n    //out.println(\"  \" + startNode + \" [shape=circle label=\" + startNode + \"];\");\n    out.println(\"  \" + startArc.target + \" [label=\\\"\\\" shape=circle];\");\n    out.println(\"  initial [shape=point color=white label=\\\"\\\"];\");\n    out.println(\"  initial -> \" + startArc.target);\n\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n\n    while(queue.size() != 0) {\n      FST.Arc<T> arc = queue.get(queue.size()-1);\n      queue.remove(queue.size()-1);\n      //System.out.println(\"dot cycle target=\" + arc.target);\n\n      if (fst.targetHasArcs(arc)) {\n\n        // scan all arcs\n        final int node = arc.target;\n        fst.readFirstTargetArc(arc, arc);\n        while(true) {\n\n          //System.out.println(\"  cycle label=\" + arc.label + \" (\" + (char) arc.label + \") target=\" + arc.target);\n          if (!seen.contains(arc.target)) {\n            final String shape;\n            if (arc.target == -1) {\n              shape = \"doublecircle\";\n            } else {\n              shape = \"circle\";\n            }\n            out.println(\"  \" + arc.target + \" [shape=\" + shape + \"];\");\n            seen.add(arc.target);\n            queue.add(new FST.Arc<T>().copyFrom(arc));\n            //System.out.println(\"    new!\");\n          }\n          String outs;\n          if (arc.output != NO_OUTPUT) {\n            outs = \"/\" + fst.outputs.outputToString(arc.output);\n          } else {\n            outs = \"\";\n          }\n          final char cl;\n          if (arc.label == FST.END_LABEL) {\n            cl = '~';\n          } else {\n            cl = (char) arc.label;\n          }\n          out.println(\"  \" + node + \" -> \" + arc.target + \" [label=\\\"\" + cl + outs + \"\\\"]\");\n          //if (arc.flag(FST.BIT_TARGET_NEXT)) {\n          //out.print(\" color=blue\");\n          //}\n          //out.println(\"];\");\n        \n          if (arc.isLast()) {\n            break;\n          } else {\n            fst.readNextArc(arc);\n          }\n        }\n      }\n    }\n    out.println(\"}\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Util#[T]_toDot(FST[T],PrintStream).mjava","pathOld":"/dev/null","sourceNew":"  public static<T> void toDot(FST<T> fst, PrintStream out) throws IOException {\n    \n    final FST.Arc<T> startArc = fst.getFirstArc(new FST.Arc<T>());\n\n    final List<FST.Arc<T>> queue = new ArrayList<FST.Arc<T>>();\n    queue.add(startArc);\n\n    final Set<Integer> seen = new HashSet<Integer>();\n    seen.add(startArc.target);\n    \n    out.println(\"digraph FST {\");\n    out.println(\"  rankdir = LR;\");\n    //out.println(\"  \" + startNode + \" [shape=circle label=\" + startNode + \"];\");\n    out.println(\"  \" + startArc.target + \" [label=\\\"\\\" shape=circle];\");\n    out.println(\"  initial [shape=point color=white label=\\\"\\\"];\");\n    out.println(\"  initial -> \" + startArc.target);\n\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n\n    while(queue.size() != 0) {\n      FST.Arc<T> arc = queue.get(queue.size()-1);\n      queue.remove(queue.size()-1);\n      //System.out.println(\"dot cycle target=\" + arc.target);\n\n      if (fst.targetHasArcs(arc)) {\n\n        // scan all arcs\n        final int node = arc.target;\n        fst.readFirstTargetArc(arc, arc);\n        while(true) {\n\n          //System.out.println(\"  cycle label=\" + arc.label + \" (\" + (char) arc.label + \") target=\" + arc.target);\n          if (!seen.contains(arc.target)) {\n            final String shape;\n            if (arc.target == -1) {\n              shape = \"doublecircle\";\n            } else {\n              shape = \"circle\";\n            }\n            out.println(\"  \" + arc.target + \" [shape=\" + shape + \"];\");\n            seen.add(arc.target);\n            queue.add(new FST.Arc<T>().copyFrom(arc));\n            //System.out.println(\"    new!\");\n          }\n          String outs;\n          if (arc.output != NO_OUTPUT) {\n            outs = \"/\" + fst.outputs.outputToString(arc.output);\n          } else {\n            outs = \"\";\n          }\n          final char cl;\n          if (arc.label == FST.END_LABEL) {\n            cl = '~';\n          } else {\n            cl = (char) arc.label;\n          }\n          out.println(\"  \" + node + \" -> \" + arc.target + \" [label=\\\"\" + cl + outs + \"\\\"]\");\n          //if (arc.flag(FST.BIT_TARGET_NEXT)) {\n          //out.print(\" color=blue\");\n          //}\n          //out.println(\"];\");\n        \n          if (arc.isLast()) {\n            break;\n          } else {\n            fst.readNextArc(arc);\n          }\n        }\n      }\n    }\n    out.println(\"}\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68b7d6fb5301c56ddb6a803c8fca1dbea2d76906","date":1298298228,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Util#[T]_toDot(FST[T],PrintStream).mjava","sourceNew":null,"sourceOld":"  public static<T> void toDot(FST<T> fst, PrintStream out) throws IOException {\n    \n    final FST.Arc<T> startArc = fst.getFirstArc(new FST.Arc<T>());\n\n    final List<FST.Arc<T>> queue = new ArrayList<FST.Arc<T>>();\n    queue.add(startArc);\n\n    final Set<Integer> seen = new HashSet<Integer>();\n    seen.add(startArc.target);\n    \n    out.println(\"digraph FST {\");\n    out.println(\"  rankdir = LR;\");\n    //out.println(\"  \" + startNode + \" [shape=circle label=\" + startNode + \"];\");\n    out.println(\"  \" + startArc.target + \" [label=\\\"\\\" shape=circle];\");\n    out.println(\"  initial [shape=point color=white label=\\\"\\\"];\");\n    out.println(\"  initial -> \" + startArc.target);\n\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n\n    while(queue.size() != 0) {\n      FST.Arc<T> arc = queue.get(queue.size()-1);\n      queue.remove(queue.size()-1);\n      //System.out.println(\"dot cycle target=\" + arc.target);\n\n      if (fst.targetHasArcs(arc)) {\n\n        // scan all arcs\n        final int node = arc.target;\n        fst.readFirstTargetArc(arc, arc);\n        while(true) {\n\n          //System.out.println(\"  cycle label=\" + arc.label + \" (\" + (char) arc.label + \") target=\" + arc.target);\n          if (!seen.contains(arc.target)) {\n            final String shape;\n            if (arc.target == -1) {\n              shape = \"doublecircle\";\n            } else {\n              shape = \"circle\";\n            }\n            out.println(\"  \" + arc.target + \" [shape=\" + shape + \"];\");\n            seen.add(arc.target);\n            queue.add(new FST.Arc<T>().copyFrom(arc));\n            //System.out.println(\"    new!\");\n          }\n          String outs;\n          if (arc.output != NO_OUTPUT) {\n            outs = \"/\" + fst.outputs.outputToString(arc.output);\n          } else {\n            outs = \"\";\n          }\n          final char cl;\n          if (arc.label == FST.END_LABEL) {\n            cl = '~';\n          } else {\n            cl = (char) arc.label;\n          }\n          out.println(\"  \" + node + \" -> \" + arc.target + \" [label=\\\"\" + cl + outs + \"\\\"]\");\n          //if (arc.flag(FST.BIT_TARGET_NEXT)) {\n          //out.print(\" color=blue\");\n          //}\n          //out.println(\"];\");\n        \n          if (arc.isLast()) {\n            break;\n          } else {\n            fst.readNextArc(arc);\n          }\n        }\n      }\n    }\n    out.println(\"}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Util#[T]_toDot(FST[T],PrintStream).mjava","sourceNew":null,"sourceOld":"  public static<T> void toDot(FST<T> fst, PrintStream out) throws IOException {\n    \n    final FST.Arc<T> startArc = fst.getFirstArc(new FST.Arc<T>());\n\n    final List<FST.Arc<T>> queue = new ArrayList<FST.Arc<T>>();\n    queue.add(startArc);\n\n    final Set<Integer> seen = new HashSet<Integer>();\n    seen.add(startArc.target);\n    \n    out.println(\"digraph FST {\");\n    out.println(\"  rankdir = LR;\");\n    //out.println(\"  \" + startNode + \" [shape=circle label=\" + startNode + \"];\");\n    out.println(\"  \" + startArc.target + \" [label=\\\"\\\" shape=circle];\");\n    out.println(\"  initial [shape=point color=white label=\\\"\\\"];\");\n    out.println(\"  initial -> \" + startArc.target);\n\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n\n    while(queue.size() != 0) {\n      FST.Arc<T> arc = queue.get(queue.size()-1);\n      queue.remove(queue.size()-1);\n      //System.out.println(\"dot cycle target=\" + arc.target);\n\n      if (fst.targetHasArcs(arc)) {\n\n        // scan all arcs\n        final int node = arc.target;\n        fst.readFirstTargetArc(arc, arc);\n        while(true) {\n\n          //System.out.println(\"  cycle label=\" + arc.label + \" (\" + (char) arc.label + \") target=\" + arc.target);\n          if (!seen.contains(arc.target)) {\n            final String shape;\n            if (arc.target == -1) {\n              shape = \"doublecircle\";\n            } else {\n              shape = \"circle\";\n            }\n            out.println(\"  \" + arc.target + \" [shape=\" + shape + \"];\");\n            seen.add(arc.target);\n            queue.add(new FST.Arc<T>().copyFrom(arc));\n            //System.out.println(\"    new!\");\n          }\n          String outs;\n          if (arc.output != NO_OUTPUT) {\n            outs = \"/\" + fst.outputs.outputToString(arc.output);\n          } else {\n            outs = \"\";\n          }\n          final char cl;\n          if (arc.label == FST.END_LABEL) {\n            cl = '~';\n          } else {\n            cl = (char) arc.label;\n          }\n          out.println(\"  \" + node + \" -> \" + arc.target + \" [label=\\\"\" + cl + outs + \"\\\"]\");\n          //if (arc.flag(FST.BIT_TARGET_NEXT)) {\n          //out.print(\" color=blue\");\n          //}\n          //out.println(\"];\");\n        \n          if (arc.isLast()) {\n            break;\n          } else {\n            fst.readNextArc(arc);\n          }\n        }\n      }\n    }\n    out.println(\"}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Util#[T]_toDot(FST[T],PrintStream).mjava","sourceNew":null,"sourceOld":"  public static<T> void toDot(FST<T> fst, PrintStream out) throws IOException {\n    \n    final FST.Arc<T> startArc = fst.getFirstArc(new FST.Arc<T>());\n\n    final List<FST.Arc<T>> queue = new ArrayList<FST.Arc<T>>();\n    queue.add(startArc);\n\n    final Set<Integer> seen = new HashSet<Integer>();\n    seen.add(startArc.target);\n    \n    out.println(\"digraph FST {\");\n    out.println(\"  rankdir = LR;\");\n    //out.println(\"  \" + startNode + \" [shape=circle label=\" + startNode + \"];\");\n    out.println(\"  \" + startArc.target + \" [label=\\\"\\\" shape=circle];\");\n    out.println(\"  initial [shape=point color=white label=\\\"\\\"];\");\n    out.println(\"  initial -> \" + startArc.target);\n\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n\n    while(queue.size() != 0) {\n      FST.Arc<T> arc = queue.get(queue.size()-1);\n      queue.remove(queue.size()-1);\n      //System.out.println(\"dot cycle target=\" + arc.target);\n\n      if (fst.targetHasArcs(arc)) {\n\n        // scan all arcs\n        final int node = arc.target;\n        fst.readFirstTargetArc(arc, arc);\n        while(true) {\n\n          //System.out.println(\"  cycle label=\" + arc.label + \" (\" + (char) arc.label + \") target=\" + arc.target);\n          if (!seen.contains(arc.target)) {\n            final String shape;\n            if (arc.target == -1) {\n              shape = \"doublecircle\";\n            } else {\n              shape = \"circle\";\n            }\n            out.println(\"  \" + arc.target + \" [shape=\" + shape + \"];\");\n            seen.add(arc.target);\n            queue.add(new FST.Arc<T>().copyFrom(arc));\n            //System.out.println(\"    new!\");\n          }\n          String outs;\n          if (arc.output != NO_OUTPUT) {\n            outs = \"/\" + fst.outputs.outputToString(arc.output);\n          } else {\n            outs = \"\";\n          }\n          final char cl;\n          if (arc.label == FST.END_LABEL) {\n            cl = '~';\n          } else {\n            cl = (char) arc.label;\n          }\n          out.println(\"  \" + node + \" -> \" + arc.target + \" [label=\\\"\" + cl + outs + \"\\\"]\");\n          //if (arc.flag(FST.BIT_TARGET_NEXT)) {\n          //out.print(\" color=blue\");\n          //}\n          //out.println(\"];\");\n        \n          if (arc.isLast()) {\n            break;\n          } else {\n            fst.readNextArc(arc);\n          }\n        }\n      }\n    }\n    out.println(\"}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","68b7d6fb5301c56ddb6a803c8fca1dbea2d76906"],"56da903869515527852ee21ea7ef7bfe414cd40d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68b7d6fb5301c56ddb6a803c8fca1dbea2d76906":["56da903869515527852ee21ea7ef7bfe414cd40d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","68b7d6fb5301c56ddb6a803c8fca1dbea2d76906"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68b7d6fb5301c56ddb6a803c8fca1dbea2d76906"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","68b7d6fb5301c56ddb6a803c8fca1dbea2d76906","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","56da903869515527852ee21ea7ef7bfe414cd40d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"68b7d6fb5301c56ddb6a803c8fca1dbea2d76906":["d619839baa8ce5503e496b94a9e42ad6f079293f","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d619839baa8ce5503e496b94a9e42ad6f079293f","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}