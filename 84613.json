{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testAscend().mjava","commits":[{"id":"40f06aec8ac912d126c71c7e9d6065ed70aa9c65","date":1501530021,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testAscend().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCumulativeProbability().mjava","sourceNew":"  @Test\n  public void testAscend() throws Exception {\n    String cexpr = \"asc(array(11.5, 12.3, 4, 3, 1, 0))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    List<Number> asort = (List<Number>)tuple.get(\"return-value\");\n    assertEquals(asort.size(), 6);\n    assertEquals(asort.get(0).doubleValue(), 0, 0.0);\n    assertEquals(asort.get(1).doubleValue(), 1, 0.0);\n    assertEquals(asort.get(2).doubleValue(), 3, 0.0);\n    assertEquals(asort.get(3).doubleValue(), 4, 0.0);\n    assertEquals(asort.get(4).doubleValue(), 11.5, 0.0);\n    assertEquals(asort.get(5).doubleValue(), 12.3, 0.0);\n  }\n\n","sourceOld":"  /*\n  @Test\n  public void testArraySort() throws Exception {\n    String cexpr = \"arraySort(array(11.5, 12.3, 4, 3, 1, 0))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    List<Number> asort = (List<Number>)tuple.get(\"return-value\");\n    assertEquals(asort.size(), 6);\n    assertEquals(asort.get(0).doubleValue(), 0, 0.0);\n    assertEquals(asort.get(1).doubleValue(), 1, 0.0);\n    assertEquals(asort.get(2).doubleValue(), 3, 0.0);\n    assertEquals(asort.get(3).doubleValue(), 4, 0.0);\n    assertEquals(asort.get(4).doubleValue(), 11.5, 0.0);\n    assertEquals(asort.get(5).doubleValue(), 12.3, 0.0);\n  }\n\n*/\n  @Test\n  public void testCumulativeProbability() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<100) {\n      i=i+2;\n      updateRequest.add(id, \"id_\"+(i), \"price_f\", Integer.toString(i));\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"price_f\\\", sort=\\\"price_f asc\\\", rows=\\\"200\\\")\";\n    String cexpr = \"let(a=\"+expr+\", c=col(a, price_f), e=empiricalDistribution(c), \" +\n        \"tuple(p1=cumulativeProbability(e, 88), \" +\n        \"p2=cumulativeProbability(e, 2), \" +\n        \"p3=cumulativeProbability(e, 99), \" +\n        \"p4=cumulativeProbability(e, 77), \" +\n        \"p5=cumulativeProbability(e, 98)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    double percentile1 = tuples.get(0).getDouble(\"p1\");\n    double percentile2 = tuples.get(0).getDouble(\"p2\");\n    double percentile3 = tuples.get(0).getDouble(\"p3\");\n    double percentile4 = tuples.get(0).getDouble(\"p4\");\n    double percentile5 = tuples.get(0).getDouble(\"p5\");\n\n\n    assertEquals(.88D, percentile1, 0.001);\n    assertEquals(.0D, percentile2, 0.001);\n    assertEquals(1.0D, percentile3, 0.001);\n    assertEquals(.78D, percentile4, 0.001);\n    assertEquals(.98D, percentile5, 0.001);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testAscend().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCumulativeProbability().mjava","sourceNew":"  @Test\n  public void testAscend() throws Exception {\n    String cexpr = \"asc(array(11.5, 12.3, 4, 3, 1, 0))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    List<Number> asort = (List<Number>)tuple.get(\"return-value\");\n    assertEquals(asort.size(), 6);\n    assertEquals(asort.get(0).doubleValue(), 0, 0.0);\n    assertEquals(asort.get(1).doubleValue(), 1, 0.0);\n    assertEquals(asort.get(2).doubleValue(), 3, 0.0);\n    assertEquals(asort.get(3).doubleValue(), 4, 0.0);\n    assertEquals(asort.get(4).doubleValue(), 11.5, 0.0);\n    assertEquals(asort.get(5).doubleValue(), 12.3, 0.0);\n  }\n\n","sourceOld":"  /*\n  @Test\n  public void testArraySort() throws Exception {\n    String cexpr = \"arraySort(array(11.5, 12.3, 4, 3, 1, 0))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    List<Number> asort = (List<Number>)tuple.get(\"return-value\");\n    assertEquals(asort.size(), 6);\n    assertEquals(asort.get(0).doubleValue(), 0, 0.0);\n    assertEquals(asort.get(1).doubleValue(), 1, 0.0);\n    assertEquals(asort.get(2).doubleValue(), 3, 0.0);\n    assertEquals(asort.get(3).doubleValue(), 4, 0.0);\n    assertEquals(asort.get(4).doubleValue(), 11.5, 0.0);\n    assertEquals(asort.get(5).doubleValue(), 12.3, 0.0);\n  }\n\n*/\n  @Test\n  public void testCumulativeProbability() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<100) {\n      i=i+2;\n      updateRequest.add(id, \"id_\"+(i), \"price_f\", Integer.toString(i));\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"price_f\\\", sort=\\\"price_f asc\\\", rows=\\\"200\\\")\";\n    String cexpr = \"let(a=\"+expr+\", c=col(a, price_f), e=empiricalDistribution(c), \" +\n        \"tuple(p1=cumulativeProbability(e, 88), \" +\n        \"p2=cumulativeProbability(e, 2), \" +\n        \"p3=cumulativeProbability(e, 99), \" +\n        \"p4=cumulativeProbability(e, 77), \" +\n        \"p5=cumulativeProbability(e, 98)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    double percentile1 = tuples.get(0).getDouble(\"p1\");\n    double percentile2 = tuples.get(0).getDouble(\"p2\");\n    double percentile3 = tuples.get(0).getDouble(\"p3\");\n    double percentile4 = tuples.get(0).getDouble(\"p4\");\n    double percentile5 = tuples.get(0).getDouble(\"p5\");\n\n\n    assertEquals(.88D, percentile1, 0.001);\n    assertEquals(.0D, percentile2, 0.001);\n    assertEquals(1.0D, percentile3, 0.001);\n    assertEquals(.78D, percentile4, 0.001);\n    assertEquals(.98D, percentile5, 0.001);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testAscend().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testAscend().mjava","sourceNew":"  @Test\n  public void testAscend() throws Exception {\n    String cexpr = \"asc(array(11.5, 12.3, 4, 3, 1, 0))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    List<Number> asort = (List<Number>)tuple.get(\"return-value\");\n    assertEquals(asort.size(), 6);\n    assertEquals(asort.get(0).doubleValue(), 0, 0.0);\n    assertEquals(asort.get(1).doubleValue(), 1, 0.0);\n    assertEquals(asort.get(2).doubleValue(), 3, 0.0);\n    assertEquals(asort.get(3).doubleValue(), 4, 0.0);\n    assertEquals(asort.get(4).doubleValue(), 11.5, 0.0);\n    assertEquals(asort.get(5).doubleValue(), 12.3, 0.0);\n  }\n\n","sourceOld":"  @Test\n  public void testAscend() throws Exception {\n    String cexpr = \"asc(array(11.5, 12.3, 4, 3, 1, 0))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    List<Number> asort = (List<Number>)tuple.get(\"return-value\");\n    assertEquals(asort.size(), 6);\n    assertEquals(asort.get(0).doubleValue(), 0, 0.0);\n    assertEquals(asort.get(1).doubleValue(), 1, 0.0);\n    assertEquals(asort.get(2).doubleValue(), 3, 0.0);\n    assertEquals(asort.get(3).doubleValue(), 4, 0.0);\n    assertEquals(asort.get(4).doubleValue(), 11.5, 0.0);\n    assertEquals(asort.get(5).doubleValue(), 12.3, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","40f06aec8ac912d126c71c7e9d6065ed70aa9c65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"40f06aec8ac912d126c71c7e9d6065ed70aa9c65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["40f06aec8ac912d126c71c7e9d6065ed70aa9c65"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","40f06aec8ac912d126c71c7e9d6065ed70aa9c65"],"40f06aec8ac912d126c71c7e9d6065ed70aa9c65":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}