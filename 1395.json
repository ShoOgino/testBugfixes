{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","commits":[{"id":"9ea4e4b34672fd15dc900deeb7085bfc1e2d4eb1","date":1417011337,"type":1,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet,SolrCore).mjava","sourceNew":"  public SolrCore reload(ConfigSet coreConfig) throws IOException,\n      ParserConfigurationException, SAXException {\n    \n    solrCoreState.increfSolrCoreState();\n    SolrCore currentCore;\n    boolean indexDirChange = !getNewIndexDir().equals(getIndexDir());\n    if (indexDirChange || !coreConfig.getSolrConfig().nrtMode) {\n      // the directory is changing, don't pass on state\n      currentCore = null;\n    } else {\n      currentCore = this;\n    }\n    \n    SolrCore core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n        coreConfig.getIndexSchema(), coreDescriptor, updateHandler, this.solrDelPolicy, currentCore);\n    core.solrDelPolicy = this.solrDelPolicy;\n    \n\n    // we open a new indexwriter to pick up the latest config\n    core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n    \n    core.getSearcher(true, false, null, true);\n    \n    return core;\n  }\n\n","sourceOld":"  public SolrCore reload(ConfigSet coreConfig, SolrCore prev) throws IOException,\n      ParserConfigurationException, SAXException {\n    \n    solrCoreState.increfSolrCoreState();\n    boolean indexDirChange = !getNewIndexDir().equals(getIndexDir());\n    if (indexDirChange || !coreConfig.getSolrConfig().nrtMode) {\n      // the directory is changing, don't pass on state\n      prev = null;\n    }\n    \n    SolrCore core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n        coreConfig.getIndexSchema(), coreDescriptor, updateHandler, this.solrDelPolicy, prev);\n    core.solrDelPolicy = this.solrDelPolicy;\n    \n\n    // we open a new indexwriter to pick up the latest config\n    core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n    \n    core.getSearcher(true, false, null, true);\n    \n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac2f1cdbdc54a889e88543cc1d939a931cb96883","date":1420554488,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","sourceNew":"  public SolrCore reload(ConfigSet coreConfig) throws IOException,\n      ParserConfigurationException, SAXException {\n    \n    solrCoreState.increfSolrCoreState();\n    SolrCore currentCore;\n    boolean indexDirChange = !getNewIndexDir().equals(getIndexDir());\n    if (indexDirChange) {\n      // the directory is changing, don't pass on state\n      currentCore = null;\n    } else {\n      currentCore = this;\n    }\n    \n    SolrCore core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n        coreConfig.getIndexSchema(), coreDescriptor, updateHandler, this.solrDelPolicy, currentCore);\n    core.solrDelPolicy = this.solrDelPolicy;\n    \n\n    // we open a new indexwriter to pick up the latest config\n    core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n    \n    core.getSearcher(true, false, null, true);\n    \n    return core;\n  }\n\n","sourceOld":"  public SolrCore reload(ConfigSet coreConfig) throws IOException,\n      ParserConfigurationException, SAXException {\n    \n    solrCoreState.increfSolrCoreState();\n    SolrCore currentCore;\n    boolean indexDirChange = !getNewIndexDir().equals(getIndexDir());\n    if (indexDirChange || !coreConfig.getSolrConfig().nrtMode) {\n      // the directory is changing, don't pass on state\n      currentCore = null;\n    } else {\n      currentCore = this;\n    }\n    \n    SolrCore core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n        coreConfig.getIndexSchema(), coreDescriptor, updateHandler, this.solrDelPolicy, currentCore);\n    core.solrDelPolicy = this.solrDelPolicy;\n    \n\n    // we open a new indexwriter to pick up the latest config\n    core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n    \n    core.getSearcher(true, false, null, true);\n    \n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","sourceNew":"  public SolrCore reload(ConfigSet coreConfig) throws IOException,\n      ParserConfigurationException, SAXException {\n\n    solrCoreState.increfSolrCoreState();\n    SolrCore currentCore;\n    boolean indexDirChange = !getNewIndexDir().equals(getIndexDir());\n    if (indexDirChange) {\n      // the directory is changing, don't pass on state\n      currentCore = null;\n    } else {\n      currentCore = this;\n    }\n\n    SolrCore core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n        coreConfig.getIndexSchema(), coreDescriptor, updateHandler, this.solrDelPolicy, currentCore);\n    core.solrDelPolicy = this.solrDelPolicy;\n\n\n    // we open a new indexwriter to pick up the latest config\n    core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n\n    core.getSearcher(true, false, null, true);\n\n    return core;\n  }\n\n","sourceOld":"  public SolrCore reload(ConfigSet coreConfig) throws IOException,\n      ParserConfigurationException, SAXException {\n    \n    solrCoreState.increfSolrCoreState();\n    SolrCore currentCore;\n    boolean indexDirChange = !getNewIndexDir().equals(getIndexDir());\n    if (indexDirChange) {\n      // the directory is changing, don't pass on state\n      currentCore = null;\n    } else {\n      currentCore = this;\n    }\n    \n    SolrCore core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n        coreConfig.getIndexSchema(), coreDescriptor, updateHandler, this.solrDelPolicy, currentCore);\n    core.solrDelPolicy = this.solrDelPolicy;\n    \n\n    // we open a new indexwriter to pick up the latest config\n    core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n    \n    core.getSearcher(true, false, null, true);\n    \n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","sourceNew":"  public SolrCore reload(ConfigSet coreConfig) throws IOException,\n      ParserConfigurationException, SAXException {\n\n    solrCoreState.increfSolrCoreState();\n    SolrCore currentCore;\n    boolean indexDirChange = !getNewIndexDir().equals(getIndexDir());\n    if (indexDirChange) {\n      // the directory is changing, don't pass on state\n      currentCore = null;\n    } else {\n      currentCore = this;\n    }\n\n    SolrCore core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n        coreConfig.getIndexSchema(), coreDescriptor, updateHandler, this.solrDelPolicy, currentCore);\n    core.solrDelPolicy = this.solrDelPolicy;\n\n\n    // we open a new indexwriter to pick up the latest config\n    core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n\n    core.getSearcher(true, false, null, true);\n\n    return core;\n  }\n\n","sourceOld":"  public SolrCore reload(ConfigSet coreConfig) throws IOException,\n      ParserConfigurationException, SAXException {\n    \n    solrCoreState.increfSolrCoreState();\n    SolrCore currentCore;\n    boolean indexDirChange = !getNewIndexDir().equals(getIndexDir());\n    if (indexDirChange) {\n      // the directory is changing, don't pass on state\n      currentCore = null;\n    } else {\n      currentCore = this;\n    }\n    \n    SolrCore core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n        coreConfig.getIndexSchema(), coreDescriptor, updateHandler, this.solrDelPolicy, currentCore);\n    core.solrDelPolicy = this.solrDelPolicy;\n    \n\n    // we open a new indexwriter to pick up the latest config\n    core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n    \n    core.getSearcher(true, false, null, true);\n    \n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54bb8da55080e4569804e0661b83a3c72cbd8d4d","date":1429691126,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","sourceNew":"  public SolrCore reload(ConfigSet coreConfig) throws IOException {\n    solrCoreState.increfSolrCoreState();\n    final SolrCore currentCore;\n    if (!getNewIndexDir().equals(getIndexDir())) {\n      // the directory is changing, don't pass on state\n      currentCore = null;\n    } else {\n      currentCore = this;\n    }\n\n    boolean success = false;\n    SolrCore core = null;\n    try {\n      core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n          coreConfig.getIndexSchema(), coreDescriptor, updateHandler, solrDelPolicy, currentCore);\n      \n      // we open a new IndexWriter to pick up the latest config\n      core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n      \n      core.getSearcher(true, false, null, true);\n      success = true;\n      return core;\n    } finally {\n      // close the new core on any errors that have occurred.\n      if (!success) {\n        IOUtils.closeQuietly(core);\n      }\n    }\n  }\n\n","sourceOld":"  public SolrCore reload(ConfigSet coreConfig) throws IOException,\n      ParserConfigurationException, SAXException {\n\n    solrCoreState.increfSolrCoreState();\n    SolrCore currentCore;\n    boolean indexDirChange = !getNewIndexDir().equals(getIndexDir());\n    if (indexDirChange) {\n      // the directory is changing, don't pass on state\n      currentCore = null;\n    } else {\n      currentCore = this;\n    }\n\n    SolrCore core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n        coreConfig.getIndexSchema(), coreDescriptor, updateHandler, this.solrDelPolicy, currentCore);\n    core.solrDelPolicy = this.solrDelPolicy;\n\n\n    // we open a new indexwriter to pick up the latest config\n    core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n\n    core.getSearcher(true, false, null, true);\n\n    return core;\n  }\n\n","bugFix":null,"bugIntro":["ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6466e433d7f5218e77c8115ed28176855fc3c143","date":1436824910,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","sourceNew":"  public SolrCore reload(ConfigSet coreConfig) throws IOException {\n    solrCoreState.increfSolrCoreState();\n    final SolrCore currentCore;\n    if (!getNewIndexDir().equals(getIndexDir())) {\n      // the directory is changing, don't pass on state\n      currentCore = null;\n    } else {\n      currentCore = this;\n    }\n\n    boolean success = false;\n    SolrCore core = null;\n    try {\n      core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n          coreConfig.getIndexSchema(), coreConfig.getProperties(),\n          coreDescriptor, updateHandler, solrDelPolicy, currentCore);\n      \n      // we open a new IndexWriter to pick up the latest config\n      core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n      \n      core.getSearcher(true, false, null, true);\n      success = true;\n      return core;\n    } finally {\n      // close the new core on any errors that have occurred.\n      if (!success) {\n        IOUtils.closeQuietly(core);\n      }\n    }\n  }\n\n","sourceOld":"  public SolrCore reload(ConfigSet coreConfig) throws IOException {\n    solrCoreState.increfSolrCoreState();\n    final SolrCore currentCore;\n    if (!getNewIndexDir().equals(getIndexDir())) {\n      // the directory is changing, don't pass on state\n      currentCore = null;\n    } else {\n      currentCore = this;\n    }\n\n    boolean success = false;\n    SolrCore core = null;\n    try {\n      core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n          coreConfig.getIndexSchema(), coreDescriptor, updateHandler, solrDelPolicy, currentCore);\n      \n      // we open a new IndexWriter to pick up the latest config\n      core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n      \n      core.getSearcher(true, false, null, true);\n      success = true;\n      return core;\n    } finally {\n      // close the new core on any errors that have occurred.\n      if (!success) {\n        IOUtils.closeQuietly(core);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5e1eef8cf1f03e5bc96c7f88f08b97528ab526e7","date":1477527580,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","sourceNew":"  public SolrCore reload(ConfigSet coreConfig) throws IOException {\n    solrCoreState.increfSolrCoreState();\n    final SolrCore currentCore;\n    if (!getNewIndexDir().equals(getIndexDir())) {\n      // the directory is changing, don't pass on state\n      currentCore = null;\n    } else {\n      currentCore = this;\n    }\n\n    boolean success = false;\n    SolrCore core = null;\n    try {\n      CoreDescriptor cd = new CoreDescriptor(coreDescriptor.getName(), coreDescriptor);\n      cd.loadExtraProperties(); //Reload the extra properties\n      core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n          coreConfig.getIndexSchema(), coreConfig.getProperties(),\n          cd, updateHandler, solrDelPolicy, currentCore);\n      \n      // we open a new IndexWriter to pick up the latest config\n      core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n      \n      core.getSearcher(true, false, null, true);\n      success = true;\n      return core;\n    } finally {\n      // close the new core on any errors that have occurred.\n      if (!success) {\n        IOUtils.closeQuietly(core);\n      }\n    }\n  }\n\n","sourceOld":"  public SolrCore reload(ConfigSet coreConfig) throws IOException {\n    solrCoreState.increfSolrCoreState();\n    final SolrCore currentCore;\n    if (!getNewIndexDir().equals(getIndexDir())) {\n      // the directory is changing, don't pass on state\n      currentCore = null;\n    } else {\n      currentCore = this;\n    }\n\n    boolean success = false;\n    SolrCore core = null;\n    try {\n      core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n          coreConfig.getIndexSchema(), coreConfig.getProperties(),\n          coreDescriptor, updateHandler, solrDelPolicy, currentCore);\n      \n      // we open a new IndexWriter to pick up the latest config\n      core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n      \n      core.getSearcher(true, false, null, true);\n      success = true;\n      return core;\n    } finally {\n      // close the new core on any errors that have occurred.\n      if (!success) {\n        IOUtils.closeQuietly(core);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","sourceNew":"  public SolrCore reload(ConfigSet coreConfig) throws IOException {\n    solrCoreState.increfSolrCoreState();\n    final SolrCore currentCore;\n    if (!getNewIndexDir().equals(getIndexDir())) {\n      // the directory is changing, don't pass on state\n      currentCore = null;\n    } else {\n      currentCore = this;\n    }\n\n    boolean success = false;\n    SolrCore core = null;\n    try {\n      CoreDescriptor cd = new CoreDescriptor(coreDescriptor.getName(), coreDescriptor);\n      cd.loadExtraProperties(); //Reload the extra properties\n      core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n          coreConfig.getIndexSchema(), coreConfig.getProperties(),\n          cd, updateHandler, solrDelPolicy, currentCore);\n      \n      // we open a new IndexWriter to pick up the latest config\n      core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n      \n      core.getSearcher(true, false, null, true);\n      success = true;\n      return core;\n    } finally {\n      // close the new core on any errors that have occurred.\n      if (!success) {\n        IOUtils.closeQuietly(core);\n      }\n    }\n  }\n\n","sourceOld":"  public SolrCore reload(ConfigSet coreConfig) throws IOException {\n    solrCoreState.increfSolrCoreState();\n    final SolrCore currentCore;\n    if (!getNewIndexDir().equals(getIndexDir())) {\n      // the directory is changing, don't pass on state\n      currentCore = null;\n    } else {\n      currentCore = this;\n    }\n\n    boolean success = false;\n    SolrCore core = null;\n    try {\n      core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n          coreConfig.getIndexSchema(), coreConfig.getProperties(),\n          coreDescriptor, updateHandler, solrDelPolicy, currentCore);\n      \n      // we open a new IndexWriter to pick up the latest config\n      core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n      \n      core.getSearcher(true, false, null, true);\n      success = true;\n      return core;\n    } finally {\n      // close the new core on any errors that have occurred.\n      if (!success) {\n        IOUtils.closeQuietly(core);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad28156288ac00b91352582904d97e6653205757","date":1486850922,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","sourceNew":"  public SolrCore reload(ConfigSet coreConfig) throws IOException {\n    // only one reload at a time\n    synchronized (getUpdateHandler().getSolrCoreState().getReloadLock()) {\n      solrCoreState.increfSolrCoreState();\n      final SolrCore currentCore;\n      if (!getNewIndexDir().equals(getIndexDir())) {\n        // the directory is changing, don't pass on state\n        currentCore = null;\n      } else {\n        currentCore = this;\n      }\n\n      boolean success = false;\n      SolrCore core = null;\n      try {\n        CoreDescriptor cd = new CoreDescriptor(coreDescriptor.getName(), coreDescriptor);\n        cd.loadExtraProperties(); //Reload the extra properties\n        core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n            coreConfig.getIndexSchema(), coreConfig.getProperties(),\n            cd, updateHandler, solrDelPolicy, currentCore, true);\n        \n        // we open a new IndexWriter to pick up the latest config\n        core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n        \n        core.getSearcher(true, false, null, true);\n        success = true;\n        return core;\n      } finally {\n        // close the new core on any errors that have occurred.\n        if (!success) {\n          IOUtils.closeQuietly(core);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public SolrCore reload(ConfigSet coreConfig) throws IOException {\n    solrCoreState.increfSolrCoreState();\n    final SolrCore currentCore;\n    if (!getNewIndexDir().equals(getIndexDir())) {\n      // the directory is changing, don't pass on state\n      currentCore = null;\n    } else {\n      currentCore = this;\n    }\n\n    boolean success = false;\n    SolrCore core = null;\n    try {\n      CoreDescriptor cd = new CoreDescriptor(coreDescriptor.getName(), coreDescriptor);\n      cd.loadExtraProperties(); //Reload the extra properties\n      core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n          coreConfig.getIndexSchema(), coreConfig.getProperties(),\n          cd, updateHandler, solrDelPolicy, currentCore);\n      \n      // we open a new IndexWriter to pick up the latest config\n      core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n      \n      core.getSearcher(true, false, null, true);\n      success = true;\n      return core;\n    } finally {\n      // close the new core on any errors that have occurred.\n      if (!success) {\n        IOUtils.closeQuietly(core);\n      }\n    }\n  }\n\n","bugFix":["54bb8da55080e4569804e0661b83a3c72cbd8d4d","9ea4e4b34672fd15dc900deeb7085bfc1e2d4eb1","5e1eef8cf1f03e5bc96c7f88f08b97528ab526e7","6466e433d7f5218e77c8115ed28176855fc3c143","2d4e985daefcb892b529223b478c47985fc3c483"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","sourceNew":"  public SolrCore reload(ConfigSet coreConfig) throws IOException {\n    // only one reload at a time\n    synchronized (getUpdateHandler().getSolrCoreState().getReloadLock()) {\n      solrCoreState.increfSolrCoreState();\n      final SolrCore currentCore;\n      if (!getNewIndexDir().equals(getIndexDir())) {\n        // the directory is changing, don't pass on state\n        currentCore = null;\n      } else {\n        currentCore = this;\n      }\n\n      boolean success = false;\n      SolrCore core = null;\n      try {\n        CoreDescriptor cd = new CoreDescriptor(name, getCoreDescriptor());\n        cd.loadExtraProperties(); //Reload the extra properties\n        core = new SolrCore(coreContainer, getName(), getDataDir(), coreConfig.getSolrConfig(),\n            coreConfig.getIndexSchema(), coreConfig.getProperties(),\n            cd, updateHandler, solrDelPolicy, currentCore, true);\n        \n        // we open a new IndexWriter to pick up the latest config\n        core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n        \n        core.getSearcher(true, false, null, true);\n        success = true;\n        return core;\n      } finally {\n        // close the new core on any errors that have occurred.\n        if (!success) {\n          IOUtils.closeQuietly(core);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public SolrCore reload(ConfigSet coreConfig) throws IOException {\n    // only one reload at a time\n    synchronized (getUpdateHandler().getSolrCoreState().getReloadLock()) {\n      solrCoreState.increfSolrCoreState();\n      final SolrCore currentCore;\n      if (!getNewIndexDir().equals(getIndexDir())) {\n        // the directory is changing, don't pass on state\n        currentCore = null;\n      } else {\n        currentCore = this;\n      }\n\n      boolean success = false;\n      SolrCore core = null;\n      try {\n        CoreDescriptor cd = new CoreDescriptor(coreDescriptor.getName(), coreDescriptor);\n        cd.loadExtraProperties(); //Reload the extra properties\n        core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n            coreConfig.getIndexSchema(), coreConfig.getProperties(),\n            cd, updateHandler, solrDelPolicy, currentCore, true);\n        \n        // we open a new IndexWriter to pick up the latest config\n        core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n        \n        core.getSearcher(true, false, null, true);\n        success = true;\n        return core;\n      } finally {\n        // close the new core on any errors that have occurred.\n        if (!success) {\n          IOUtils.closeQuietly(core);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","sourceNew":"  public SolrCore reload(ConfigSet coreConfig) throws IOException {\n    // only one reload at a time\n    synchronized (getUpdateHandler().getSolrCoreState().getReloadLock()) {\n      solrCoreState.increfSolrCoreState();\n      final SolrCore currentCore;\n      if (!getNewIndexDir().equals(getIndexDir())) {\n        // the directory is changing, don't pass on state\n        currentCore = null;\n      } else {\n        currentCore = this;\n      }\n\n      boolean success = false;\n      SolrCore core = null;\n      try {\n        CoreDescriptor cd = new CoreDescriptor(name, getCoreDescriptor());\n        cd.loadExtraProperties(); //Reload the extra properties\n        core = new SolrCore(coreContainer, getName(), getDataDir(), coreConfig.getSolrConfig(),\n            coreConfig.getIndexSchema(), coreConfig.getProperties(),\n            cd, updateHandler, solrDelPolicy, currentCore, true);\n        \n        // we open a new IndexWriter to pick up the latest config\n        core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n        \n        core.getSearcher(true, false, null, true);\n        success = true;\n        return core;\n      } finally {\n        // close the new core on any errors that have occurred.\n        if (!success) {\n          IOUtils.closeQuietly(core);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public SolrCore reload(ConfigSet coreConfig) throws IOException {\n    // only one reload at a time\n    synchronized (getUpdateHandler().getSolrCoreState().getReloadLock()) {\n      solrCoreState.increfSolrCoreState();\n      final SolrCore currentCore;\n      if (!getNewIndexDir().equals(getIndexDir())) {\n        // the directory is changing, don't pass on state\n        currentCore = null;\n      } else {\n        currentCore = this;\n      }\n\n      boolean success = false;\n      SolrCore core = null;\n      try {\n        CoreDescriptor cd = new CoreDescriptor(coreDescriptor.getName(), coreDescriptor);\n        cd.loadExtraProperties(); //Reload the extra properties\n        core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n            coreConfig.getIndexSchema(), coreConfig.getProperties(),\n            cd, updateHandler, solrDelPolicy, currentCore, true);\n        \n        // we open a new IndexWriter to pick up the latest config\n        core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n        \n        core.getSearcher(true, false, null, true);\n        success = true;\n        return core;\n      } finally {\n        // close the new core on any errors that have occurred.\n        if (!success) {\n          IOUtils.closeQuietly(core);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dff274f347ef702a3c44718e8801230a478a8f73","date":1544662146,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","sourceNew":"  public SolrCore reload(ConfigSet coreConfig) throws IOException {\n    // only one reload at a time\n    synchronized (getUpdateHandler().getSolrCoreState().getReloadLock()) {\n      solrCoreState.increfSolrCoreState();\n      final SolrCore currentCore;\n      if (!getNewIndexDir().equals(getIndexDir())) {\n        // the directory is changing, don't pass on state\n        currentCore = null;\n      } else {\n        currentCore = this;\n      }\n\n      boolean success = false;\n      SolrCore core = null;\n      try {\n        CoreDescriptor cd = new CoreDescriptor(name, getCoreDescriptor());\n        cd.loadExtraProperties(); //Reload the extra properties\n        core = new SolrCore(coreContainer, getName(), getDataDir(), coreConfig.getSolrConfig(),\n            coreConfig.getIndexSchema(), coreConfig.getProperties(),\n            cd, updateHandler, solrDelPolicy, currentCore, true);\n        \n        // we open a new IndexWriter to pick up the latest config\n        core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n        \n        core.getSearcher(true, false, null, true);\n        success = true;\n        return core;\n      } finally {\n        // close the new core on any errors that have occurred.\n        if (!success && core != null && core.getOpenCount() > 0) {\n          IOUtils.closeQuietly(core);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public SolrCore reload(ConfigSet coreConfig) throws IOException {\n    // only one reload at a time\n    synchronized (getUpdateHandler().getSolrCoreState().getReloadLock()) {\n      solrCoreState.increfSolrCoreState();\n      final SolrCore currentCore;\n      if (!getNewIndexDir().equals(getIndexDir())) {\n        // the directory is changing, don't pass on state\n        currentCore = null;\n      } else {\n        currentCore = this;\n      }\n\n      boolean success = false;\n      SolrCore core = null;\n      try {\n        CoreDescriptor cd = new CoreDescriptor(name, getCoreDescriptor());\n        cd.loadExtraProperties(); //Reload the extra properties\n        core = new SolrCore(coreContainer, getName(), getDataDir(), coreConfig.getSolrConfig(),\n            coreConfig.getIndexSchema(), coreConfig.getProperties(),\n            cd, updateHandler, solrDelPolicy, currentCore, true);\n        \n        // we open a new IndexWriter to pick up the latest config\n        core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n        \n        core.getSearcher(true, false, null, true);\n        success = true;\n        return core;\n      } finally {\n        // close the new core on any errors that have occurred.\n        if (!success) {\n          IOUtils.closeQuietly(core);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","sourceNew":"  public SolrCore reload(ConfigSet coreConfig) throws IOException {\n    // only one reload at a time\n    synchronized (getUpdateHandler().getSolrCoreState().getReloadLock()) {\n      solrCoreState.increfSolrCoreState();\n      final SolrCore currentCore;\n      if (!getNewIndexDir().equals(getIndexDir())) {\n        // the directory is changing, don't pass on state\n        currentCore = null;\n      } else {\n        currentCore = this;\n      }\n\n      boolean success = false;\n      SolrCore core = null;\n      try {\n        CoreDescriptor cd = new CoreDescriptor(name, getCoreDescriptor());\n        cd.loadExtraProperties(); //Reload the extra properties\n        core = new SolrCore(coreContainer, getName(), getDataDir(), coreConfig.getSolrConfig(),\n            coreConfig.getIndexSchema(), coreConfig.getProperties(),\n            cd, updateHandler, solrDelPolicy, currentCore, true);\n\n        // we open a new IndexWriter to pick up the latest config\n        core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n\n        core.getSearcher(true, false, null, true);\n        success = true;\n        return core;\n      } finally {\n        // close the new core on any errors that have occurred.\n        if (!success && core != null && core.getOpenCount() > 0) {\n          IOUtils.closeQuietly(core);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public SolrCore reload(ConfigSet coreConfig) throws IOException {\n    // only one reload at a time\n    synchronized (getUpdateHandler().getSolrCoreState().getReloadLock()) {\n      solrCoreState.increfSolrCoreState();\n      final SolrCore currentCore;\n      if (!getNewIndexDir().equals(getIndexDir())) {\n        // the directory is changing, don't pass on state\n        currentCore = null;\n      } else {\n        currentCore = this;\n      }\n\n      boolean success = false;\n      SolrCore core = null;\n      try {\n        CoreDescriptor cd = new CoreDescriptor(name, getCoreDescriptor());\n        cd.loadExtraProperties(); //Reload the extra properties\n        core = new SolrCore(coreContainer, getName(), getDataDir(), coreConfig.getSolrConfig(),\n            coreConfig.getIndexSchema(), coreConfig.getProperties(),\n            cd, updateHandler, solrDelPolicy, currentCore, true);\n        \n        // we open a new IndexWriter to pick up the latest config\n        core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n        \n        core.getSearcher(true, false, null, true);\n        success = true;\n        return core;\n      } finally {\n        // close the new core on any errors that have occurred.\n        if (!success && core != null && core.getOpenCount() > 0) {\n          IOUtils.closeQuietly(core);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","sourceNew":"  public SolrCore reload(ConfigSet coreConfig) throws IOException {\n    // only one reload at a time\n    synchronized (getUpdateHandler().getSolrCoreState().getReloadLock()) {\n      solrCoreState.increfSolrCoreState();\n      final SolrCore currentCore;\n      if (!getNewIndexDir().equals(getIndexDir())) {\n        // the directory is changing, don't pass on state\n        currentCore = null;\n      } else {\n        currentCore = this;\n      }\n\n      boolean success = false;\n      SolrCore core = null;\n      try {\n        CoreDescriptor cd = new CoreDescriptor(name, getCoreDescriptor());\n        cd.loadExtraProperties(); //Reload the extra properties\n        core = new SolrCore(coreContainer, getName(), coreConfig, cd, getDataDir(),\n            updateHandler, solrDelPolicy, currentCore, true);\n\n        // we open a new IndexWriter to pick up the latest config\n        core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n\n        core.getSearcher(true, false, null, true);\n        success = true;\n        return core;\n      } finally {\n        // close the new core on any errors that have occurred.\n        if (!success && core != null && core.getOpenCount() > 0) {\n          IOUtils.closeQuietly(core);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public SolrCore reload(ConfigSet coreConfig) throws IOException {\n    // only one reload at a time\n    synchronized (getUpdateHandler().getSolrCoreState().getReloadLock()) {\n      solrCoreState.increfSolrCoreState();\n      final SolrCore currentCore;\n      if (!getNewIndexDir().equals(getIndexDir())) {\n        // the directory is changing, don't pass on state\n        currentCore = null;\n      } else {\n        currentCore = this;\n      }\n\n      boolean success = false;\n      SolrCore core = null;\n      try {\n        CoreDescriptor cd = new CoreDescriptor(name, getCoreDescriptor());\n        cd.loadExtraProperties(); //Reload the extra properties\n        core = new SolrCore(coreContainer, getName(), getDataDir(), coreConfig.getSolrConfig(),\n            coreConfig.getIndexSchema(), coreConfig.getProperties(),\n            cd, updateHandler, solrDelPolicy, currentCore, true);\n\n        // we open a new IndexWriter to pick up the latest config\n        core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n\n        core.getSearcher(true, false, null, true);\n        success = true;\n        return core;\n      } finally {\n        // close the new core on any errors that have occurred.\n        if (!success && core != null && core.getOpenCount() > 0) {\n          IOUtils.closeQuietly(core);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e80876f1ee57780ad756fa083e88c95d7c1d0c0b","date":1595653703,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","sourceNew":"  public SolrCore reload(ConfigSet coreConfig) throws IOException {\n    // only one reload at a time\n    synchronized (getUpdateHandler().getSolrCoreState().getReloadLock()) {\n      solrCoreState.increfSolrCoreState();\n      final SolrCore currentCore;\n      if (!getNewIndexDir().equals(getIndexDir())) {\n        // the directory is changing, don't pass on state\n        currentCore = null;\n      } else {\n        currentCore = this;\n      }\n\n      boolean success = false;\n      SolrCore core = null;\n      try {\n        CoreDescriptor cd = new CoreDescriptor(name, getCoreDescriptor());\n        cd.loadExtraProperties(); //Reload the extra properties\n        core = new SolrCore(coreContainer, cd, coreConfig, getDataDir(),\n            updateHandler, solrDelPolicy, currentCore, true);\n\n        // we open a new IndexWriter to pick up the latest config\n        core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n\n        core.getSearcher(true, false, null, true);\n        success = true;\n        return core;\n      } finally {\n        // close the new core on any errors that have occurred.\n        if (!success && core != null && core.getOpenCount() > 0) {\n          IOUtils.closeQuietly(core);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public SolrCore reload(ConfigSet coreConfig) throws IOException {\n    // only one reload at a time\n    synchronized (getUpdateHandler().getSolrCoreState().getReloadLock()) {\n      solrCoreState.increfSolrCoreState();\n      final SolrCore currentCore;\n      if (!getNewIndexDir().equals(getIndexDir())) {\n        // the directory is changing, don't pass on state\n        currentCore = null;\n      } else {\n        currentCore = this;\n      }\n\n      boolean success = false;\n      SolrCore core = null;\n      try {\n        CoreDescriptor cd = new CoreDescriptor(name, getCoreDescriptor());\n        cd.loadExtraProperties(); //Reload the extra properties\n        core = new SolrCore(coreContainer, getName(), coreConfig, cd, getDataDir(),\n            updateHandler, solrDelPolicy, currentCore, true);\n\n        // we open a new IndexWriter to pick up the latest config\n        core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n\n        core.getSearcher(true, false, null, true);\n        success = true;\n        return core;\n      } finally {\n        // close the new core on any errors that have occurred.\n        if (!success && core != null && core.getOpenCount() > 0) {\n          IOUtils.closeQuietly(core);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad28156288ac00b91352582904d97e6653205757":["5e1eef8cf1f03e5bc96c7f88f08b97528ab526e7"],"6466e433d7f5218e77c8115ed28176855fc3c143":["54bb8da55080e4569804e0661b83a3c72cbd8d4d"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["ad28156288ac00b91352582904d97e6653205757"],"54bb8da55080e4569804e0661b83a3c72cbd8d4d":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"5e1eef8cf1f03e5bc96c7f88f08b97528ab526e7":["6466e433d7f5218e77c8115ed28176855fc3c143"],"dff274f347ef702a3c44718e8801230a478a8f73":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["ad28156288ac00b91352582904d97e6653205757"],"ac2f1cdbdc54a889e88543cc1d939a931cb96883":["9ea4e4b34672fd15dc900deeb7085bfc1e2d4eb1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ac2f1cdbdc54a889e88543cc1d939a931cb96883","9aea0485ecacb6734c17da2d02569816c23a69c1"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["dff274f347ef702a3c44718e8801230a478a8f73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["6466e433d7f5218e77c8115ed28176855fc3c143","5e1eef8cf1f03e5bc96c7f88f08b97528ab526e7"],"9ea4e4b34672fd15dc900deeb7085bfc1e2d4eb1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["ac2f1cdbdc54a889e88543cc1d939a931cb96883"],"e80876f1ee57780ad756fa083e88c95d7c1d0c0b":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e80876f1ee57780ad756fa083e88c95d7c1d0c0b"]},"commit2Childs":{"ad28156288ac00b91352582904d97e6653205757":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"6466e433d7f5218e77c8115ed28176855fc3c143":["5e1eef8cf1f03e5bc96c7f88f08b97528ab526e7","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"54bb8da55080e4569804e0661b83a3c72cbd8d4d":["6466e433d7f5218e77c8115ed28176855fc3c143"],"5e1eef8cf1f03e5bc96c7f88f08b97528ab526e7":["ad28156288ac00b91352582904d97e6653205757","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"dff274f347ef702a3c44718e8801230a478a8f73":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["dff274f347ef702a3c44718e8801230a478a8f73"],"ac2f1cdbdc54a889e88543cc1d939a931cb96883":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["e80876f1ee57780ad756fa083e88c95d7c1d0c0b"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ea4e4b34672fd15dc900deeb7085bfc1e2d4eb1"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"9ea4e4b34672fd15dc900deeb7085bfc1e2d4eb1":["ac2f1cdbdc54a889e88543cc1d939a931cb96883"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["54bb8da55080e4569804e0661b83a3c72cbd8d4d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"e80876f1ee57780ad756fa083e88c95d7c1d0c0b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}