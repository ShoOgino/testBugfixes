{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#equals(Object).mjava","commits":[{"id":"11e8ea32003f6ccf3282ad6c05ca47eec277e928","date":1428695518,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof IntersectsRPTVerifyQuery)) return false;\n    if (!super.equals(o)) return false;\n\n    IntersectsRPTVerifyQuery that = (IntersectsRPTVerifyQuery) o;\n\n    if (!intersectsDiffFilter.equals(that.intersectsDiffFilter)) return false;\n    return predicateValueSource.equals(that.predicateValueSource);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8249072f13ea4354ab7635c2d7a59cc682806dab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8249072f13ea4354ab7635c2d7a59cc682806dab","date":1429649774,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#equals(Object).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!super.equals(o)) return false;\n\n    IntersectsRPTVerifyQuery that = (IntersectsRPTVerifyQuery) o;\n\n    if (!intersectsDiffFilter.equals(that.intersectsDiffFilter)) return false;\n    return predicateValueSource.equals(that.predicateValueSource);\n\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof IntersectsRPTVerifyQuery)) return false;\n    if (!super.equals(o)) return false;\n\n    IntersectsRPTVerifyQuery that = (IntersectsRPTVerifyQuery) o;\n\n    if (!intersectsDiffFilter.equals(that.intersectsDiffFilter)) return false;\n    return predicateValueSource.equals(that.predicateValueSource);\n\n  }\n\n","bugFix":["11e8ea32003f6ccf3282ad6c05ca47eec277e928"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#equals(Object).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!super.equals(o)) return false;\n\n    IntersectsRPTVerifyQuery that = (IntersectsRPTVerifyQuery) o;\n\n    if (!intersectsDiffQuery.equals(that.intersectsDiffQuery)) return false;\n    return predicateValueSource.equals(that.predicateValueSource);\n\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!super.equals(o)) return false;\n\n    IntersectsRPTVerifyQuery that = (IntersectsRPTVerifyQuery) o;\n\n    if (!intersectsDiffFilter.equals(that.intersectsDiffFilter)) return false;\n    return predicateValueSource.equals(that.predicateValueSource);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#equals(Object).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!super.equals(o)) return false;\n\n    IntersectsRPTVerifyQuery that = (IntersectsRPTVerifyQuery) o;\n\n    if (!intersectsDiffQuery.equals(that.intersectsDiffQuery)) return false;\n    return predicateValueSource.equals(that.predicateValueSource);\n\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!super.equals(o)) return false;\n\n    IntersectsRPTVerifyQuery that = (IntersectsRPTVerifyQuery) o;\n\n    if (!intersectsDiffQuery.equals(that.intersectsDiffQuery)) return false;\n    return predicateValueSource.equals(that.predicateValueSource);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#equals(Object).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!super.equals(o)) return false;\n\n    IntersectsRPTVerifyQuery that = (IntersectsRPTVerifyQuery) o;\n\n    if (!intersectsDiffQuery.equals(that.intersectsDiffQuery)) return false;\n    return predicateValueSource.equals(that.predicateValueSource);\n\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!super.equals(o)) return false;\n\n    IntersectsRPTVerifyQuery that = (IntersectsRPTVerifyQuery) o;\n\n    if (!intersectsDiffQuery.equals(that.intersectsDiffQuery)) return false;\n    return predicateValueSource.equals(that.predicateValueSource);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["672b198fc3dce868916c727917cae58c2906763d","112d77ac8d3e10a362516ad834c9a11d35c94234"],"672b198fc3dce868916c727917cae58c2906763d":["8249072f13ea4354ab7635c2d7a59cc682806dab"],"11e8ea32003f6ccf3282ad6c05ca47eec277e928":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["672b198fc3dce868916c727917cae58c2906763d"],"8249072f13ea4354ab7635c2d7a59cc682806dab":["11e8ea32003f6ccf3282ad6c05ca47eec277e928"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"672b198fc3dce868916c727917cae58c2906763d":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"11e8ea32003f6ccf3282ad6c05ca47eec277e928":["8249072f13ea4354ab7635c2d7a59cc682806dab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11e8ea32003f6ccf3282ad6c05ca47eec277e928"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"8249072f13ea4354ab7635c2d7a59cc682806dab":["672b198fc3dce868916c727917cae58c2906763d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}