{"path":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","sourceNew":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        Document d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding into field cache\n      int[] fci = FieldCache.DEFAULT.getInts(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieInt\", false);\n      for (int val : fci) {\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      long[] fcl = FieldCache.DEFAULT.getLongs(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieLong\", false);\n      for (long val : fcl) {\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        Document d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding into field cache\n      int[] fci = FieldCache.DEFAULT.getInts(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieInt\", false);\n      for (int val : fci) {\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      long[] fcl = FieldCache.DEFAULT.getLongs(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieLong\", false);\n      for (long val : fcl) {\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","sourceNew":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        Document d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding into field cache\n      int[] fci = FieldCache.DEFAULT.getInts(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieInt\", false);\n      for (int val : fci) {\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      long[] fcl = FieldCache.DEFAULT.getLongs(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieLong\", false);\n      for (long val : fcl) {\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        Document d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding into field cache\n      int[] fci = FieldCache.DEFAULT.getInts(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieInt\", false);\n      for (int val : fci) {\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      long[] fcl = FieldCache.DEFAULT.getLongs(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieLong\", false);\n      for (long val : fcl) {\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","sourceNew":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding into field cache\n      int[] fci = FieldCache.DEFAULT.getInts(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieInt\", false);\n      for (int val : fci) {\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      long[] fcl = FieldCache.DEFAULT.getLongs(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieLong\", false);\n      for (long val : fcl) {\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        Document d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding into field cache\n      int[] fci = FieldCache.DEFAULT.getInts(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieInt\", false);\n      for (int val : fci) {\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      long[] fcl = FieldCache.DEFAULT.getLongs(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieLong\", false);\n      for (long val : fcl) {\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","sourceNew":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding into field cache\n      int[] fci = FieldCache.DEFAULT.getInts(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieInt\", false);\n      for (int val : fci) {\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      long[] fcl = FieldCache.DEFAULT.getLongs(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieLong\", false);\n      for (long val : fcl) {\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        Document d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding into field cache\n      int[] fci = FieldCache.DEFAULT.getInts(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieInt\", false);\n      for (int val : fci) {\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      long[] fcl = FieldCache.DEFAULT.getLongs(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieLong\", false);\n      for (long val : fcl) {\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f45457a742a53533c348c4b990b1c579ff364467","date":1353197071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","sourceNew":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding into field cache\n      FieldCache.Ints fci = FieldCache.DEFAULT.getInts(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieInt\", false);\n      int maxDoc = searcher.getIndexReader().maxDoc();\n      for(int doc=0;doc<maxDoc;doc++) {\n        int val = fci.get(doc);\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      FieldCache.Longs fcl = FieldCache.DEFAULT.getLongs(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieLong\", false);\n      for(int doc=0;doc<maxDoc;doc++) {\n        long val = fcl.get(doc);\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding into field cache\n      int[] fci = FieldCache.DEFAULT.getInts(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieInt\", false);\n      for (int val : fci) {\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      long[] fcl = FieldCache.DEFAULT.getLongs(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieLong\", false);\n      for (long val : fcl) {\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["9274621789ce990dbfef455dabdf026bb3184821"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","sourceNew":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding into field cache\n      FieldCache.Ints fci = FieldCache.DEFAULT.getInts(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieInt\", false);\n      int maxDoc = searcher.getIndexReader().maxDoc();\n      for(int doc=0;doc<maxDoc;doc++) {\n        int val = fci.get(doc);\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      FieldCache.Longs fcl = FieldCache.DEFAULT.getLongs(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieLong\", false);\n      for(int doc=0;doc<maxDoc;doc++) {\n        long val = fcl.get(doc);\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding into field cache\n      int[] fci = FieldCache.DEFAULT.getInts(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieInt\", false);\n      for (int val : fci) {\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      long[] fcl = FieldCache.DEFAULT.getLongs(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieLong\", false);\n      for (long val : fcl) {\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","386d1b0dcb065f1bfc494b1407cb41c536b95485"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","sourceNew":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding into field cache\n      FieldCache.Ints fci = FieldCache.DEFAULT.getInts(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieInt\", false);\n      int maxDoc = searcher.getIndexReader().maxDoc();\n      for(int doc=0;doc<maxDoc;doc++) {\n        int val = fci.get(doc);\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      FieldCache.Longs fcl = FieldCache.DEFAULT.getLongs(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieLong\", false);\n      for(int doc=0;doc<maxDoc;doc++) {\n        long val = fcl.get(doc);\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding into field cache\n      FieldCache.Ints fci = FieldCache.DEFAULT.getInts(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieInt\", false);\n      int maxDoc = searcher.getIndexReader().maxDoc();\n      for(int doc=0;doc<maxDoc;doc++) {\n        int val = fci.get(doc);\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      FieldCache.Longs fcl = FieldCache.DEFAULT.getLongs(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieLong\", false);\n      for(int doc=0;doc<maxDoc;doc++) {\n        long val = fcl.get(doc);\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","sourceNew":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding into field cache\n      // nocommit: instead use the NumericUtils termsenum stuff to test this directly...\n      /*\n      NumericDocValues fci = FieldCache.DEFAULT.getNumerics(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      int maxDoc = searcher.getIndexReader().maxDoc();\n      for(int doc=0;doc<maxDoc;doc++) {\n        long val = fci.get(doc);\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      NumericDocValues fcl = FieldCache.DEFAULT.getNumerics(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieLong\", FieldCache.NUMERIC_UTILS_LONG_PARSER, false);\n      for(int doc=0;doc<maxDoc;doc++) {\n        long val = fcl.get(doc);\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      */\n      \n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding into field cache\n      FieldCache.Ints fci = FieldCache.DEFAULT.getInts(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieInt\", false);\n      int maxDoc = searcher.getIndexReader().maxDoc();\n      for(int doc=0;doc<maxDoc;doc++) {\n        int val = fci.get(doc);\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      FieldCache.Longs fcl = FieldCache.DEFAULT.getLongs(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieLong\", false);\n      for(int doc=0;doc<maxDoc;doc++) {\n        long val = fcl.get(doc);\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["9274621789ce990dbfef455dabdf026bb3184821"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","sourceNew":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding of terms\n      Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieInt\");\n      TermsEnum termsEnum = NumericUtils.filterPrefixCodedInts(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        int val = NumericUtils.prefixCodedToInt(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieLong\");\n      termsEnum = NumericUtils.filterPrefixCodedLongs(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        long val = NumericUtils.prefixCodedToLong(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding into field cache\n      // nocommit: instead use the NumericUtils termsenum stuff to test this directly...\n      /*\n      NumericDocValues fci = FieldCache.DEFAULT.getNumerics(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      int maxDoc = searcher.getIndexReader().maxDoc();\n      for(int doc=0;doc<maxDoc;doc++) {\n        long val = fci.get(doc);\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      NumericDocValues fcl = FieldCache.DEFAULT.getNumerics(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieLong\", FieldCache.NUMERIC_UTILS_LONG_PARSER, false);\n      for(int doc=0;doc<maxDoc;doc++) {\n        long val = fcl.get(doc);\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      */\n      \n      reader.close();\n    }\n  }\n\n","bugFix":["f45457a742a53533c348c4b990b1c579ff364467","955c32f886db6f6356c9fcdea6b1f1cb4effda24","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","sourceNew":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding of terms\n      Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieInt\");\n      TermsEnum termsEnum = NumericUtils.filterPrefixCodedInts(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        int val = NumericUtils.prefixCodedToInt(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieLong\");\n      termsEnum = NumericUtils.filterPrefixCodedLongs(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        long val = NumericUtils.prefixCodedToLong(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding into field cache\n      FieldCache.Ints fci = FieldCache.DEFAULT.getInts(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieInt\", false);\n      int maxDoc = searcher.getIndexReader().maxDoc();\n      for(int doc=0;doc<maxDoc;doc++) {\n        int val = fci.get(doc);\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      FieldCache.Longs fcl = FieldCache.DEFAULT.getLongs(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieLong\", false);\n      for(int doc=0;doc<maxDoc;doc++) {\n        long val = fcl.get(doc);\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","sourceNew":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding of terms\n      Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieInt\");\n      TermsEnum termsEnum = NumericUtils.filterPrefixCodedInts(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        int val = NumericUtils.prefixCodedToInt(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieLong\");\n      termsEnum = NumericUtils.filterPrefixCodedLongs(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        long val = NumericUtils.prefixCodedToLong(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding into field cache\n      FieldCache.Ints fci = FieldCache.DEFAULT.getInts(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieInt\", false);\n      int maxDoc = searcher.getIndexReader().maxDoc();\n      for(int doc=0;doc<maxDoc;doc++) {\n        int val = fci.get(doc);\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      FieldCache.Longs fcl = FieldCache.DEFAULT.getLongs(SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()), \"trieLong\", false);\n      for(int doc=0;doc<maxDoc;doc++) {\n        long val = fcl.get(doc);\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf67308cf3e605faada2e2e5092aff47ae822912","date":1404140785,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","sourceNew":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", NumericUtils.PRECISION_STEP_DEFAULT_32, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", NumericUtils.PRECISION_STEP_DEFAULT, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", NumericUtils.PRECISION_STEP_DEFAULT_32, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", NumericUtils.PRECISION_STEP_DEFAULT, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding of terms\n      Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieInt\");\n      TermsEnum termsEnum = NumericUtils.filterPrefixCodedInts(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        int val = NumericUtils.prefixCodedToInt(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieLong\");\n      termsEnum = NumericUtils.filterPrefixCodedLongs(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        long val = NumericUtils.prefixCodedToLong(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", 4, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", 4, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding of terms\n      Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieInt\");\n      TermsEnum termsEnum = NumericUtils.filterPrefixCodedInts(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        int val = NumericUtils.prefixCodedToInt(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieLong\");\n      termsEnum = NumericUtils.filterPrefixCodedLongs(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        long val = NumericUtils.prefixCodedToLong(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","sourceNew":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", NumericUtils.PRECISION_STEP_DEFAULT_32, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", NumericUtils.PRECISION_STEP_DEFAULT, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", NumericUtils.PRECISION_STEP_DEFAULT_32, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", NumericUtils.PRECISION_STEP_DEFAULT, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding of terms\n      Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieInt\");\n      TermsEnum termsEnum = NumericUtils.filterPrefixCodedInts(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        int val = NumericUtils.prefixCodedToInt(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieLong\");\n      termsEnum = NumericUtils.filterPrefixCodedLongs(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        long val = NumericUtils.prefixCodedToLong(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", NumericUtils.PRECISION_STEP_DEFAULT_32, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", NumericUtils.PRECISION_STEP_DEFAULT, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", NumericUtils.PRECISION_STEP_DEFAULT_32, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", NumericUtils.PRECISION_STEP_DEFAULT, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding of terms\n      Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieInt\");\n      TermsEnum termsEnum = NumericUtils.filterPrefixCodedInts(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        int val = NumericUtils.prefixCodedToInt(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieLong\");\n      termsEnum = NumericUtils.filterPrefixCodedLongs(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        long val = NumericUtils.prefixCodedToLong(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","sourceNew":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", NumericUtils.PRECISION_STEP_DEFAULT_32, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", NumericUtils.PRECISION_STEP_DEFAULT, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", NumericUtils.PRECISION_STEP_DEFAULT_32, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", NumericUtils.PRECISION_STEP_DEFAULT, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding of terms\n      Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieInt\");\n      TermsEnum termsEnum = NumericUtils.filterPrefixCodedInts(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        int val = NumericUtils.prefixCodedToInt(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieLong\");\n      termsEnum = NumericUtils.filterPrefixCodedLongs(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        long val = NumericUtils.prefixCodedToLong(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", NumericUtils.PRECISION_STEP_DEFAULT_32, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", NumericUtils.PRECISION_STEP_DEFAULT, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", NumericUtils.PRECISION_STEP_DEFAULT_32, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", NumericUtils.PRECISION_STEP_DEFAULT, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding of terms\n      Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieInt\");\n      TermsEnum termsEnum = NumericUtils.filterPrefixCodedInts(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        int val = NumericUtils.prefixCodedToInt(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieLong\");\n      termsEnum = NumericUtils.filterPrefixCodedLongs(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        long val = NumericUtils.prefixCodedToLong(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cf67308cf3e605faada2e2e5092aff47ae822912":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"9274621789ce990dbfef455dabdf026bb3184821":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"56572ec06f1407c066d6b7399413178b33176cd8":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","93dd449115a9247533e44bab47e8429e5dccbc6d"],"f45457a742a53533c348c4b990b1c579ff364467":["1d028314cced5858683a1bb4741423d0f934257b"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cf67308cf3e605faada2e2e5092aff47ae822912","4cc45c615dbb82bf79d5f9550286098367874fbf"],"1d028314cced5858683a1bb4741423d0f934257b":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["1d028314cced5858683a1bb4741423d0f934257b","f45457a742a53533c348c4b990b1c579ff364467"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","9274621789ce990dbfef455dabdf026bb3184821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["cf67308cf3e605faada2e2e5092aff47ae822912"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"]},"commit2Childs":{"cf67308cf3e605faada2e2e5092aff47ae822912":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","4cc45c615dbb82bf79d5f9550286098367874fbf"],"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["9274621789ce990dbfef455dabdf026bb3184821"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"f45457a742a53533c348c4b990b1c579ff364467":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d028314cced5858683a1bb4741423d0f934257b":["f45457a742a53533c348c4b990b1c579ff364467","d4d69c535930b5cce125cff868d40f6373dc27d4"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["cf67308cf3e605faada2e2e5092aff47ae822912","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}