{"path":"solr/core/src/java/org/apache/solr/util/hll/HLL#clear().mjava","commits":[{"id":"6d8714f9ceaaff94f0968d1c2d037978c3fde569","date":1437042727,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/HLL#clear().mjava","pathOld":"/dev/null","sourceNew":"    // ========================================================================\n    // Clear\n    /**\n     * Clears the HLL. The HLL will have cardinality zero and will act as if no\n     * elements have been added.<p/>\n     *\n     * NOTE: Unlike {@link #addRaw(long)}, <code>clear</code> does NOT handle\n     * transitions between {@link HLLType}s - a probabilistic type will remain\n     * probabilistic after being cleared.\n     */\n    public void clear() {\n        switch(type) {\n            case EMPTY:\n                return /*do nothing*/;\n            case EXPLICIT:\n                explicitStorage.clear();\n                return;\n            case SPARSE:\n                sparseProbabilisticStorage.clear();\n                return;\n            case FULL:\n                probabilisticStorage.fill(0);\n                return;\n            default:\n                throw new RuntimeException(\"Unsupported HLL type \" + type);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cee04f63da2b1e4185495f96d22b98fa63a4fa8","date":1437045299,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/HLL#clear().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/hll/HLL#clear().mjava","sourceNew":"    // ========================================================================\n    // Clear\n    /**\n     * Clears the HLL. The HLL will have cardinality zero and will act as if no\n     * elements have been added.\n     *\n     * NOTE: Unlike {@link #addRaw(long)}, <code>clear</code> does NOT handle\n     * transitions between {@link HLLType}s - a probabilistic type will remain\n     * probabilistic after being cleared.\n     */\n    public void clear() {\n        switch(type) {\n            case EMPTY:\n                return /*do nothing*/;\n            case EXPLICIT:\n                explicitStorage.clear();\n                return;\n            case SPARSE:\n                sparseProbabilisticStorage.clear();\n                return;\n            case FULL:\n                probabilisticStorage.fill(0);\n                return;\n            default:\n                throw new RuntimeException(\"Unsupported HLL type \" + type);\n        }\n    }\n\n","sourceOld":"    // ========================================================================\n    // Clear\n    /**\n     * Clears the HLL. The HLL will have cardinality zero and will act as if no\n     * elements have been added.<p/>\n     *\n     * NOTE: Unlike {@link #addRaw(long)}, <code>clear</code> does NOT handle\n     * transitions between {@link HLLType}s - a probabilistic type will remain\n     * probabilistic after being cleared.\n     */\n    public void clear() {\n        switch(type) {\n            case EMPTY:\n                return /*do nothing*/;\n            case EXPLICIT:\n                explicitStorage.clear();\n                return;\n            case SPARSE:\n                sparseProbabilisticStorage.clear();\n                return;\n            case FULL:\n                probabilisticStorage.fill(0);\n                return;\n            default:\n                throw new RuntimeException(\"Unsupported HLL type \" + type);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/HLL#clear().mjava","pathOld":"/dev/null","sourceNew":"    // ========================================================================\n    // Clear\n    /**\n     * Clears the HLL. The HLL will have cardinality zero and will act as if no\n     * elements have been added.\n     *\n     * NOTE: Unlike {@link #addRaw(long)}, <code>clear</code> does NOT handle\n     * transitions between {@link HLLType}s - a probabilistic type will remain\n     * probabilistic after being cleared.\n     */\n    public void clear() {\n        switch(type) {\n            case EMPTY:\n                return /*do nothing*/;\n            case EXPLICIT:\n                explicitStorage.clear();\n                return;\n            case SPARSE:\n                sparseProbabilisticStorage.clear();\n                return;\n            case FULL:\n                probabilisticStorage.fill(0);\n                return;\n            default:\n                throw new RuntimeException(\"Unsupported HLL type \" + type);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cee04f63da2b1e4185495f96d22b98fa63a4fa8"],"3cee04f63da2b1e4185495f96d22b98fa63a4fa8":["6d8714f9ceaaff94f0968d1c2d037978c3fde569"],"6d8714f9ceaaff94f0968d1c2d037978c3fde569":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6d8714f9ceaaff94f0968d1c2d037978c3fde569"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cee04f63da2b1e4185495f96d22b98fa63a4fa8":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"6d8714f9ceaaff94f0968d1c2d037978c3fde569":["3cee04f63da2b1e4185495f96d22b98fa63a4fa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}