{"path":"src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","commits":[{"id":"f66fbc07ecf3707c1ec81e35ca9e4df7ff22101a","date":1252677016,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","pathOld":"/dev/null","sourceNew":"  public void testQueryParsing() throws IOException, ParseException {\n\n    SolrQueryParser parserOne = new SolrQueryParser(schema, \"one\");\n    assertTrue(parserOne.getAllowLeadingWildcard());\n    SolrQueryParser parserTwo = new SolrQueryParser(schema, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n    SolrQueryParser parserThree = new SolrQueryParser(schema, \"three\");\n    // XXX note: this should be false, but for now we return true for any field,\n    // XXX if at least one field uses the reversing\n    assertTrue(parserThree.getAllowLeadingWildcard());\n    String text = \"one +two *hree f*ur fiv*\";\n    String expectedOne = \"one:one +one:two one:\\u0001eerh* one:\\u0001ru*f one:fiv*\";\n    String expectedTwo = \"two:one +two:two two:\\u0001eerh* two:\\u0001ru*f two:fiv*\";\n    String expectedThree = \"three:one +three:two three:*hree three:f*ur three:fiv*\";\n    Query q = parserOne.parse(text);\n    assertEquals(expectedOne, q.toString());\n    q = parserTwo.parse(text);\n    assertEquals(expectedTwo, q.toString());\n    q = parserThree.parse(text);\n    assertEquals(expectedThree, q.toString());\n    // test conditional reversal\n    String condText = \"*hree t*ree th*ee thr*e ?hree t?ree th?ee th?*ee \" + \n        \"short*token ver*longtoken\";\n    String expected = \"two:\\u0001eerh* two:\\u0001eer*t two:\\u0001ee*ht \" +\n        \"two:thr*e \" +\n        \"two:\\u0001eerh? two:\\u0001eer?t \" +\n        \"two:th?ee \" +\n        \"two:th?*ee \" +\n        \"two:short*token \" +\n        \"two:\\u0001nekotgnol*rev\";\n    q = parserTwo.parse(condText);\n    assertEquals(expected, q.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4ea4e0df42b1e8d32da66955b10083ed12ba7cc4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ea4e0df42b1e8d32da66955b10083ed12ba7cc4","date":1258992545,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","pathOld":"src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","sourceNew":"  public void testQueryParsing() throws IOException, ParseException {\n\n    SolrQueryParser parserOne = new SolrQueryParser(schema, \"one\");\n    assertTrue(parserOne.getAllowLeadingWildcard());\n    SolrQueryParser parserTwo = new SolrQueryParser(schema, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n    SolrQueryParser parserThree = new SolrQueryParser(schema, \"three\");\n    // XXX note: this should be false, but for now we return true for any field,\n    // XXX if at least one field uses the reversing\n    assertTrue(parserThree.getAllowLeadingWildcard());\n    String text = \"one +two *hree f*ur fiv* *si\\uD834\\uDD1Ex\";\n    String expectedOne = \"one:one +one:two one:\\u0001eerh* one:\\u0001ru*f one:fiv* one:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedTwo = \"two:one +two:two two:\\u0001eerh* two:\\u0001ru*f two:fiv* two:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedThree = \"three:one +three:two three:*hree three:f*ur three:fiv* three:*si\\uD834\\uDD1Ex\";\n    Query q = parserOne.parse(text);\n    assertEquals(expectedOne, q.toString());\n    q = parserTwo.parse(text);\n    assertEquals(expectedTwo, q.toString());\n    q = parserThree.parse(text);\n    assertEquals(expectedThree, q.toString());\n    // test conditional reversal\n    String condText = \"*hree t*ree th*ee thr*e ?hree t?ree th?ee th?*ee \" + \n        \"short*token ver*longtoken\";\n    String expected = \"two:\\u0001eerh* two:\\u0001eer*t two:\\u0001ee*ht \" +\n        \"two:thr*e \" +\n        \"two:\\u0001eerh? two:\\u0001eer?t \" +\n        \"two:th?ee \" +\n        \"two:th?*ee \" +\n        \"two:short*token \" +\n        \"two:\\u0001nekotgnol*rev\";\n    q = parserTwo.parse(condText);\n    assertEquals(expected, q.toString());\n  }\n\n","sourceOld":"  public void testQueryParsing() throws IOException, ParseException {\n\n    SolrQueryParser parserOne = new SolrQueryParser(schema, \"one\");\n    assertTrue(parserOne.getAllowLeadingWildcard());\n    SolrQueryParser parserTwo = new SolrQueryParser(schema, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n    SolrQueryParser parserThree = new SolrQueryParser(schema, \"three\");\n    // XXX note: this should be false, but for now we return true for any field,\n    // XXX if at least one field uses the reversing\n    assertTrue(parserThree.getAllowLeadingWildcard());\n    String text = \"one +two *hree f*ur fiv*\";\n    String expectedOne = \"one:one +one:two one:\\u0001eerh* one:\\u0001ru*f one:fiv*\";\n    String expectedTwo = \"two:one +two:two two:\\u0001eerh* two:\\u0001ru*f two:fiv*\";\n    String expectedThree = \"three:one +three:two three:*hree three:f*ur three:fiv*\";\n    Query q = parserOne.parse(text);\n    assertEquals(expectedOne, q.toString());\n    q = parserTwo.parse(text);\n    assertEquals(expectedTwo, q.toString());\n    q = parserThree.parse(text);\n    assertEquals(expectedThree, q.toString());\n    // test conditional reversal\n    String condText = \"*hree t*ree th*ee thr*e ?hree t?ree th?ee th?*ee \" + \n        \"short*token ver*longtoken\";\n    String expected = \"two:\\u0001eerh* two:\\u0001eer*t two:\\u0001ee*ht \" +\n        \"two:thr*e \" +\n        \"two:\\u0001eerh? two:\\u0001eer?t \" +\n        \"two:th?ee \" +\n        \"two:th?*ee \" +\n        \"two:short*token \" +\n        \"two:\\u0001nekotgnol*rev\";\n    q = parserTwo.parse(condText);\n    assertEquals(expected, q.toString());\n  }\n\n","bugFix":["f66fbc07ecf3707c1ec81e35ca9e4df7ff22101a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","pathOld":"src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","sourceNew":"  public void testQueryParsing() throws IOException, ParseException {\n\n    SolrQueryParser parserOne = new SolrQueryParser(schema, \"one\");\n    assertTrue(parserOne.getAllowLeadingWildcard());\n    SolrQueryParser parserTwo = new SolrQueryParser(schema, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n    SolrQueryParser parserThree = new SolrQueryParser(schema, \"three\");\n    // XXX note: this should be false, but for now we return true for any field,\n    // XXX if at least one field uses the reversing\n    assertTrue(parserThree.getAllowLeadingWildcard());\n    String text = \"one +two *hree f*ur fiv* *si\\uD834\\uDD1Ex\";\n    String expectedOne = \"one:one +one:two one:\\u0001eerh* one:\\u0001ru*f one:fiv* one:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedTwo = \"two:one +two:two two:\\u0001eerh* two:\\u0001ru*f two:fiv* two:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedThree = \"three:one +three:two three:*hree three:f*ur three:fiv* three:*si\\uD834\\uDD1Ex\";\n    Query q = parserOne.parse(text);\n    assertEquals(expectedOne, q.toString());\n    q = parserTwo.parse(text);\n    assertEquals(expectedTwo, q.toString());\n    q = parserThree.parse(text);\n    assertEquals(expectedThree, q.toString());\n    // test conditional reversal\n    String condText = \"*hree t*ree th*ee thr*e ?hree t?ree th?ee th?*ee \" + \n        \"short*token ver*longtoken\";\n    String expected = \"two:\\u0001eerh* two:\\u0001eer*t two:\\u0001ee*ht \" +\n        \"two:thr*e \" +\n        \"two:\\u0001eerh? two:\\u0001eer?t \" +\n        \"two:th?ee \" +\n        \"two:th?*ee \" +\n        \"two:short*token \" +\n        \"two:\\u0001nekotgnol*rev\";\n    q = parserTwo.parse(condText);\n    assertEquals(expected, q.toString());\n  }\n\n","sourceOld":"  public void testQueryParsing() throws IOException, ParseException {\n\n    SolrQueryParser parserOne = new SolrQueryParser(schema, \"one\");\n    assertTrue(parserOne.getAllowLeadingWildcard());\n    SolrQueryParser parserTwo = new SolrQueryParser(schema, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n    SolrQueryParser parserThree = new SolrQueryParser(schema, \"three\");\n    // XXX note: this should be false, but for now we return true for any field,\n    // XXX if at least one field uses the reversing\n    assertTrue(parserThree.getAllowLeadingWildcard());\n    String text = \"one +two *hree f*ur fiv* *si\\uD834\\uDD1Ex\";\n    String expectedOne = \"one:one +one:two one:\\u0001eerh* one:\\u0001ru*f one:fiv* one:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedTwo = \"two:one +two:two two:\\u0001eerh* two:\\u0001ru*f two:fiv* two:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedThree = \"three:one +three:two three:*hree three:f*ur three:fiv* three:*si\\uD834\\uDD1Ex\";\n    Query q = parserOne.parse(text);\n    assertEquals(expectedOne, q.toString());\n    q = parserTwo.parse(text);\n    assertEquals(expectedTwo, q.toString());\n    q = parserThree.parse(text);\n    assertEquals(expectedThree, q.toString());\n    // test conditional reversal\n    String condText = \"*hree t*ree th*ee thr*e ?hree t?ree th?ee th?*ee \" + \n        \"short*token ver*longtoken\";\n    String expected = \"two:\\u0001eerh* two:\\u0001eer*t two:\\u0001ee*ht \" +\n        \"two:thr*e \" +\n        \"two:\\u0001eerh? two:\\u0001eer?t \" +\n        \"two:th?ee \" +\n        \"two:th?*ee \" +\n        \"two:short*token \" +\n        \"two:\\u0001nekotgnol*rev\";\n    q = parserTwo.parse(condText);\n    assertEquals(expected, q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ea4e0df42b1e8d32da66955b10083ed12ba7cc4":["f66fbc07ecf3707c1ec81e35ca9e4df7ff22101a"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"f66fbc07ecf3707c1ec81e35ca9e4df7ff22101a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["4ea4e0df42b1e8d32da66955b10083ed12ba7cc4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ea4e0df42b1e8d32da66955b10083ed12ba7cc4":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f66fbc07ecf3707c1ec81e35ca9e4df7ff22101a"],"f66fbc07ecf3707c1ec81e35ca9e4df7ff22101a":["4ea4e0df42b1e8d32da66955b10083ed12ba7cc4"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}