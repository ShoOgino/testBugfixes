{"path":"solr/core/src/java/org/apache/solr/schema/IndexSchema#addFields(Collection[SchemaField],Map[String,Collection[String]],boolean).mjava","commits":[{"id":"4a54d9ede1b7f2f026639186eb07f3f314d87d9a","date":1412176848,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#addFields(Collection[SchemaField],Map[String,Collection[String]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#addFields(Collection[SchemaField],Map[String,Collection[String]]).mjava","sourceNew":"  /**\n   * Copies this schema, adds the given fields to the copy\n   * Requires synchronizing on the object returned by\n   * {@link #getSchemaUpdateLock()}.\n   *\n   * @param newFields the SchemaFields to add\n   * @param copyFieldNames 0 or more names of targets to copy this field to.  The target fields must already exist.\n   * @param persist Persist the schema or not\n   * @return a new IndexSchema based on this schema with newFields added\n   * @see #newField(String, String, Map)\n   */\n  public IndexSchema addFields(Collection<SchemaField> newFields, Map<String, Collection<String>> copyFieldNames, boolean persist) {\n    String msg = \"This IndexSchema is not mutable.\";\n    log.error(msg);\n    throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n  }\n\n","sourceOld":"  /**\n   * Copies this schema, adds the given fields to the copy, then persists the\n   * new schema.  Requires synchronizing on the object returned by\n   * {@link #getSchemaUpdateLock()}.\n   *\n   * @param newFields the SchemaFields to add\n   * @param copyFieldNames 0 or more names of targets to copy this field to.  The target fields must already exist.\n   * @return a new IndexSchema based on this schema with newFields added\n   * @see #newField(String, String, Map)\n   */\n  public IndexSchema addFields(Collection<SchemaField> newFields, Map<String, Collection<String>> copyFieldNames) {\n    String msg = \"This IndexSchema is not mutable.\";\n    log.error(msg);\n    throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#addFields(Collection[SchemaField],Map[String,Collection[String]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#addFields(Collection[SchemaField],Map[String,Collection[String]]).mjava","sourceNew":"  /**\n   * Copies this schema, adds the given fields to the copy\n   * Requires synchronizing on the object returned by\n   * {@link #getSchemaUpdateLock()}.\n   *\n   * @param newFields the SchemaFields to add\n   * @param copyFieldNames 0 or more names of targets to copy this field to.  The target fields must already exist.\n   * @param persist Persist the schema or not\n   * @return a new IndexSchema based on this schema with newFields added\n   * @see #newField(String, String, Map)\n   */\n  public IndexSchema addFields(Collection<SchemaField> newFields, Map<String, Collection<String>> copyFieldNames, boolean persist) {\n    String msg = \"This IndexSchema is not mutable.\";\n    log.error(msg);\n    throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n  }\n\n","sourceOld":"  /**\n   * Copies this schema, adds the given fields to the copy, then persists the\n   * new schema.  Requires synchronizing on the object returned by\n   * {@link #getSchemaUpdateLock()}.\n   *\n   * @param newFields the SchemaFields to add\n   * @param copyFieldNames 0 or more names of targets to copy this field to.  The target fields must already exist.\n   * @return a new IndexSchema based on this schema with newFields added\n   * @see #newField(String, String, Map)\n   */\n  public IndexSchema addFields(Collection<SchemaField> newFields, Map<String, Collection<String>> copyFieldNames) {\n    String msg = \"This IndexSchema is not mutable.\";\n    log.error(msg);\n    throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}