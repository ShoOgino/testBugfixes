{"path":"solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest#testMultipleScripts().mjava","commits":[{"id":"9e2656623e57ced6c16aae473bab02019c951802","date":1342126181,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest#testMultipleScripts().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleScripts() throws Exception {\n    SolrCore core = h.getCore();\n\n    for (final String chain : new String[] {\"dual-scripts-arr\", \n                                            \"dual-scripts-strs\"}) {\n    \n      UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(chain);\n      final StatelessScriptUpdateProcessorFactory factory = \n        ((StatelessScriptUpdateProcessorFactory) chained.getFactories()[0]);\n      final List<String> functionMessages = new ArrayList<String>();\n      ScriptEngineCustomizer customizer = new ScriptEngineCustomizer() {\n          public void customize(ScriptEngine engine) {\n            engine.put(\"testCase\", StatelessScriptUpdateProcessorFactoryTest.this);\n            engine.put(\"functionMessages\", functionMessages);\n          }\n        };\n      factory.setScriptEngineCustomizer(customizer);\n      assertNotNull(chained);\n\n      SolrInputDocument d = processAdd(chain,\n                                       doc(f(\"id\", \"2\"),\n                                           f(\"name\", \" foo \"),\n                                           f(\"subject\", \"bar\")));\n      \n      assertEquals(chain + \" didn't add Double field\", \n                   42.3d, d.getFieldValue(\"script_added_d\"));\n      assertEquals(chain + \" didn't add integer field\", \n                   new Integer(42), d.getFieldValue(\"script_added_i\"));\n      \n      processCommit(\"run-no-scripts\");\n\n      assertQ(chain + \": couldn't find doc by id\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=1]\");\n\n      processDeleteById(chain, \"2\");\n      processCommit(chain);\n      \n      assertEquals(chain, 6, functionMessages.size());\n      assertTrue(chain, functionMessages.contains(\"processAdd0\"));\n      assertTrue(chain, functionMessages.contains(\"processAdd1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processAdd0\") \n                 < functionMessages.indexOf(\"processAdd1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processDelete0\"));\n      assertTrue(chain, functionMessages.contains(\"processDelete1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processDelete0\") \n                 < functionMessages.indexOf(\"processDelete1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processCommit0\"));\n      assertTrue(chain, functionMessages.contains(\"processCommit1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processCommit0\") \n                 < functionMessages.indexOf(\"processCommit1\"));\n\n      finish(chain);\n    \n      assertEquals(chain, 8, functionMessages.size());\n\n      assertTrue(chain, functionMessages.contains(\"finish0\"));\n      assertTrue(chain, functionMessages.contains(\"finish1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"finish0\") \n                 < functionMessages.indexOf(\"finish1\"));\n\n      assertQ(chain + \": found deleted doc\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=0]\");\n      \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d7cb8d0a1ba6a886ec4f07b3205bd0618d98982e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest#testMultipleScripts().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleScripts() throws Exception {\n    SolrCore core = h.getCore();\n\n    for (final String chain : new String[] {\"dual-scripts-arr\", \n                                            \"dual-scripts-strs\"}) {\n    \n      UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(chain);\n      final StatelessScriptUpdateProcessorFactory factory = \n        ((StatelessScriptUpdateProcessorFactory) chained.getFactories()[0]);\n      final List<String> functionMessages = new ArrayList<String>();\n      ScriptEngineCustomizer customizer = new ScriptEngineCustomizer() {\n          public void customize(ScriptEngine engine) {\n            engine.put(\"testCase\", StatelessScriptUpdateProcessorFactoryTest.this);\n            engine.put(\"functionMessages\", functionMessages);\n          }\n        };\n      factory.setScriptEngineCustomizer(customizer);\n      assertNotNull(chained);\n\n      SolrInputDocument d = processAdd(chain,\n                                       doc(f(\"id\", \"2\"),\n                                           f(\"name\", \" foo \"),\n                                           f(\"subject\", \"bar\")));\n      \n      assertEquals(chain + \" didn't add Double field\", \n                   42.3d, d.getFieldValue(\"script_added_d\"));\n      assertEquals(chain + \" didn't add integer field\", \n                   new Integer(42), d.getFieldValue(\"script_added_i\"));\n      \n      processCommit(\"run-no-scripts\");\n\n      assertQ(chain + \": couldn't find doc by id\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=1]\");\n\n      processDeleteById(chain, \"2\");\n      processCommit(chain);\n      \n      assertEquals(chain, 6, functionMessages.size());\n      assertTrue(chain, functionMessages.contains(\"processAdd0\"));\n      assertTrue(chain, functionMessages.contains(\"processAdd1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processAdd0\") \n                 < functionMessages.indexOf(\"processAdd1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processDelete0\"));\n      assertTrue(chain, functionMessages.contains(\"processDelete1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processDelete0\") \n                 < functionMessages.indexOf(\"processDelete1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processCommit0\"));\n      assertTrue(chain, functionMessages.contains(\"processCommit1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processCommit0\") \n                 < functionMessages.indexOf(\"processCommit1\"));\n\n      finish(chain);\n    \n      assertEquals(chain, 8, functionMessages.size());\n\n      assertTrue(chain, functionMessages.contains(\"finish0\"));\n      assertTrue(chain, functionMessages.contains(\"finish1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"finish0\") \n                 < functionMessages.indexOf(\"finish1\"));\n\n      assertQ(chain + \": found deleted doc\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=0]\");\n      \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest#testMultipleScripts().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleScripts() throws Exception {\n    SolrCore core = h.getCore();\n\n    for (final String chain : new String[] {\"dual-scripts-arr\", \n                                            \"dual-scripts-strs\"}) {\n    \n      UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(chain);\n      final StatelessScriptUpdateProcessorFactory factory = \n        ((StatelessScriptUpdateProcessorFactory) chained.getFactories()[0]);\n      final List<String> functionMessages = new ArrayList<String>();\n      ScriptEngineCustomizer customizer = new ScriptEngineCustomizer() {\n          public void customize(ScriptEngine engine) {\n            engine.put(\"testCase\", StatelessScriptUpdateProcessorFactoryTest.this);\n            engine.put(\"functionMessages\", functionMessages);\n          }\n        };\n      factory.setScriptEngineCustomizer(customizer);\n      assertNotNull(chained);\n\n      SolrInputDocument d = processAdd(chain,\n                                       doc(f(\"id\", \"2\"),\n                                           f(\"name\", \" foo \"),\n                                           f(\"subject\", \"bar\")));\n      \n      assertEquals(chain + \" didn't add Double field\", \n                   42.3d, d.getFieldValue(\"script_added_d\"));\n      assertEquals(chain + \" didn't add integer field\", \n                   new Integer(42), d.getFieldValue(\"script_added_i\"));\n      \n      processCommit(\"run-no-scripts\");\n\n      assertQ(chain + \": couldn't find doc by id\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=1]\");\n\n      processDeleteById(chain, \"2\");\n      processCommit(chain);\n      \n      assertEquals(chain, 6, functionMessages.size());\n      assertTrue(chain, functionMessages.contains(\"processAdd0\"));\n      assertTrue(chain, functionMessages.contains(\"processAdd1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processAdd0\") \n                 < functionMessages.indexOf(\"processAdd1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processDelete0\"));\n      assertTrue(chain, functionMessages.contains(\"processDelete1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processDelete0\") \n                 < functionMessages.indexOf(\"processDelete1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processCommit0\"));\n      assertTrue(chain, functionMessages.contains(\"processCommit1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processCommit0\") \n                 < functionMessages.indexOf(\"processCommit1\"));\n\n      finish(chain);\n    \n      assertEquals(chain, 8, functionMessages.size());\n\n      assertTrue(chain, functionMessages.contains(\"finish0\"));\n      assertTrue(chain, functionMessages.contains(\"finish1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"finish0\") \n                 < functionMessages.indexOf(\"finish1\"));\n\n      assertQ(chain + \": found deleted doc\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=0]\");\n      \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest#testMultipleScripts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest#testMultipleScripts().mjava","sourceNew":"  public void testMultipleScripts() throws Exception {\n    SolrCore core = h.getCore();\n\n    for (final String chain : new String[] {\"dual-scripts-arr\", \n                                            \"dual-scripts-strs\"}) {\n    \n      UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(chain);\n      final StatelessScriptUpdateProcessorFactory factory = \n        ((StatelessScriptUpdateProcessorFactory) chained.getFactories()[0]);\n      final List<String> functionMessages = new ArrayList<String>();\n      ScriptEngineCustomizer customizer = new ScriptEngineCustomizer() {\n          @Override\n          public void customize(ScriptEngine engine) {\n            engine.put(\"testCase\", StatelessScriptUpdateProcessorFactoryTest.this);\n            engine.put(\"functionMessages\", functionMessages);\n          }\n        };\n      factory.setScriptEngineCustomizer(customizer);\n      assertNotNull(chained);\n\n      SolrInputDocument d = processAdd(chain,\n                                       doc(f(\"id\", \"2\"),\n                                           f(\"name\", \" foo \"),\n                                           f(\"subject\", \"bar\")));\n      \n      assertEquals(chain + \" didn't add Double field\", \n                   42.3d, d.getFieldValue(\"script_added_d\"));\n      assertEquals(chain + \" didn't add integer field\", \n                   new Integer(42), d.getFieldValue(\"script_added_i\"));\n      \n      processCommit(\"run-no-scripts\");\n\n      assertQ(chain + \": couldn't find doc by id\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=1]\");\n\n      processDeleteById(chain, \"2\");\n      processCommit(chain);\n      \n      assertEquals(chain, 6, functionMessages.size());\n      assertTrue(chain, functionMessages.contains(\"processAdd0\"));\n      assertTrue(chain, functionMessages.contains(\"processAdd1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processAdd0\") \n                 < functionMessages.indexOf(\"processAdd1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processDelete0\"));\n      assertTrue(chain, functionMessages.contains(\"processDelete1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processDelete0\") \n                 < functionMessages.indexOf(\"processDelete1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processCommit0\"));\n      assertTrue(chain, functionMessages.contains(\"processCommit1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processCommit0\") \n                 < functionMessages.indexOf(\"processCommit1\"));\n\n      finish(chain);\n    \n      assertEquals(chain, 8, functionMessages.size());\n\n      assertTrue(chain, functionMessages.contains(\"finish0\"));\n      assertTrue(chain, functionMessages.contains(\"finish1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"finish0\") \n                 < functionMessages.indexOf(\"finish1\"));\n\n      assertQ(chain + \": found deleted doc\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=0]\");\n      \n    }\n  }\n\n","sourceOld":"  public void testMultipleScripts() throws Exception {\n    SolrCore core = h.getCore();\n\n    for (final String chain : new String[] {\"dual-scripts-arr\", \n                                            \"dual-scripts-strs\"}) {\n    \n      UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(chain);\n      final StatelessScriptUpdateProcessorFactory factory = \n        ((StatelessScriptUpdateProcessorFactory) chained.getFactories()[0]);\n      final List<String> functionMessages = new ArrayList<String>();\n      ScriptEngineCustomizer customizer = new ScriptEngineCustomizer() {\n          public void customize(ScriptEngine engine) {\n            engine.put(\"testCase\", StatelessScriptUpdateProcessorFactoryTest.this);\n            engine.put(\"functionMessages\", functionMessages);\n          }\n        };\n      factory.setScriptEngineCustomizer(customizer);\n      assertNotNull(chained);\n\n      SolrInputDocument d = processAdd(chain,\n                                       doc(f(\"id\", \"2\"),\n                                           f(\"name\", \" foo \"),\n                                           f(\"subject\", \"bar\")));\n      \n      assertEquals(chain + \" didn't add Double field\", \n                   42.3d, d.getFieldValue(\"script_added_d\"));\n      assertEquals(chain + \" didn't add integer field\", \n                   new Integer(42), d.getFieldValue(\"script_added_i\"));\n      \n      processCommit(\"run-no-scripts\");\n\n      assertQ(chain + \": couldn't find doc by id\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=1]\");\n\n      processDeleteById(chain, \"2\");\n      processCommit(chain);\n      \n      assertEquals(chain, 6, functionMessages.size());\n      assertTrue(chain, functionMessages.contains(\"processAdd0\"));\n      assertTrue(chain, functionMessages.contains(\"processAdd1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processAdd0\") \n                 < functionMessages.indexOf(\"processAdd1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processDelete0\"));\n      assertTrue(chain, functionMessages.contains(\"processDelete1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processDelete0\") \n                 < functionMessages.indexOf(\"processDelete1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processCommit0\"));\n      assertTrue(chain, functionMessages.contains(\"processCommit1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processCommit0\") \n                 < functionMessages.indexOf(\"processCommit1\"));\n\n      finish(chain);\n    \n      assertEquals(chain, 8, functionMessages.size());\n\n      assertTrue(chain, functionMessages.contains(\"finish0\"));\n      assertTrue(chain, functionMessages.contains(\"finish1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"finish0\") \n                 < functionMessages.indexOf(\"finish1\"));\n\n      assertQ(chain + \": found deleted doc\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=0]\");\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest#testMultipleScripts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest#testMultipleScripts().mjava","sourceNew":"  public void testMultipleScripts() throws Exception {\n    SolrCore core = h.getCore();\n\n    for (final String chain : new String[] {\"dual-scripts-arr\", \n                                            \"dual-scripts-strs\"}) {\n    \n      UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(chain);\n      final StatelessScriptUpdateProcessorFactory factory = \n        ((StatelessScriptUpdateProcessorFactory) chained.getFactories()[0]);\n      final List<String> functionMessages = new ArrayList<String>();\n      ScriptEngineCustomizer customizer = new ScriptEngineCustomizer() {\n          @Override\n          public void customize(ScriptEngine engine) {\n            engine.put(\"testCase\", StatelessScriptUpdateProcessorFactoryTest.this);\n            engine.put(\"functionMessages\", functionMessages);\n          }\n        };\n      factory.setScriptEngineCustomizer(customizer);\n      assertNotNull(chained);\n\n      SolrInputDocument d = processAdd(chain,\n                                       doc(f(\"id\", \"2\"),\n                                           f(\"name\", \" foo \"),\n                                           f(\"subject\", \"bar\")));\n      \n      assertEquals(chain + \" didn't add Double field\", \n                   42.3d, d.getFieldValue(\"script_added_d\"));\n      assertEquals(chain + \" didn't add integer field\", \n                   new Integer(42), d.getFieldValue(\"script_added_i\"));\n      \n      processCommit(\"run-no-scripts\");\n\n      assertQ(chain + \": couldn't find doc by id\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=1]\");\n\n      processDeleteById(chain, \"2\");\n      processCommit(chain);\n      \n      assertEquals(chain, 6, functionMessages.size());\n      assertTrue(chain, functionMessages.contains(\"processAdd0\"));\n      assertTrue(chain, functionMessages.contains(\"processAdd1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processAdd0\") \n                 < functionMessages.indexOf(\"processAdd1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processDelete0\"));\n      assertTrue(chain, functionMessages.contains(\"processDelete1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processDelete0\") \n                 < functionMessages.indexOf(\"processDelete1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processCommit0\"));\n      assertTrue(chain, functionMessages.contains(\"processCommit1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processCommit0\") \n                 < functionMessages.indexOf(\"processCommit1\"));\n\n      finish(chain);\n    \n      assertEquals(chain, 8, functionMessages.size());\n\n      assertTrue(chain, functionMessages.contains(\"finish0\"));\n      assertTrue(chain, functionMessages.contains(\"finish1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"finish0\") \n                 < functionMessages.indexOf(\"finish1\"));\n\n      assertQ(chain + \": found deleted doc\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=0]\");\n      \n    }\n  }\n\n","sourceOld":"  public void testMultipleScripts() throws Exception {\n    SolrCore core = h.getCore();\n\n    for (final String chain : new String[] {\"dual-scripts-arr\", \n                                            \"dual-scripts-strs\"}) {\n    \n      UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(chain);\n      final StatelessScriptUpdateProcessorFactory factory = \n        ((StatelessScriptUpdateProcessorFactory) chained.getFactories()[0]);\n      final List<String> functionMessages = new ArrayList<String>();\n      ScriptEngineCustomizer customizer = new ScriptEngineCustomizer() {\n          public void customize(ScriptEngine engine) {\n            engine.put(\"testCase\", StatelessScriptUpdateProcessorFactoryTest.this);\n            engine.put(\"functionMessages\", functionMessages);\n          }\n        };\n      factory.setScriptEngineCustomizer(customizer);\n      assertNotNull(chained);\n\n      SolrInputDocument d = processAdd(chain,\n                                       doc(f(\"id\", \"2\"),\n                                           f(\"name\", \" foo \"),\n                                           f(\"subject\", \"bar\")));\n      \n      assertEquals(chain + \" didn't add Double field\", \n                   42.3d, d.getFieldValue(\"script_added_d\"));\n      assertEquals(chain + \" didn't add integer field\", \n                   new Integer(42), d.getFieldValue(\"script_added_i\"));\n      \n      processCommit(\"run-no-scripts\");\n\n      assertQ(chain + \": couldn't find doc by id\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=1]\");\n\n      processDeleteById(chain, \"2\");\n      processCommit(chain);\n      \n      assertEquals(chain, 6, functionMessages.size());\n      assertTrue(chain, functionMessages.contains(\"processAdd0\"));\n      assertTrue(chain, functionMessages.contains(\"processAdd1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processAdd0\") \n                 < functionMessages.indexOf(\"processAdd1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processDelete0\"));\n      assertTrue(chain, functionMessages.contains(\"processDelete1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processDelete0\") \n                 < functionMessages.indexOf(\"processDelete1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processCommit0\"));\n      assertTrue(chain, functionMessages.contains(\"processCommit1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processCommit0\") \n                 < functionMessages.indexOf(\"processCommit1\"));\n\n      finish(chain);\n    \n      assertEquals(chain, 8, functionMessages.size());\n\n      assertTrue(chain, functionMessages.contains(\"finish0\"));\n      assertTrue(chain, functionMessages.contains(\"finish1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"finish0\") \n                 < functionMessages.indexOf(\"finish1\"));\n\n      assertQ(chain + \": found deleted doc\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=0]\");\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7cb8d0a1ba6a886ec4f07b3205bd0618d98982e","date":1364000005,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest#testMultipleScripts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest#testMultipleScripts().mjava","sourceNew":"  public void testMultipleScripts() throws Exception {\n    SolrCore core = h.getCore();\n\n    for (final String chain : new String[] {\"dual-scripts-arr\", \n                                            \"dual-scripts-strs\"}) {\n    \n      UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(chain);\n      final StatelessScriptUpdateProcessorFactory factory = \n        ((StatelessScriptUpdateProcessorFactory) chained.getFactories()[0]);\n      final List<String> functionMessages = new ArrayList<String>();\n      ScriptEngineCustomizer customizer = new ScriptEngineCustomizer() {\n          @Override\n          public void customize(ScriptEngine engine) {\n            engine.put(\"functionMessages\", functionMessages);\n          }\n        };\n      factory.setScriptEngineCustomizer(customizer);\n      assertNotNull(chained);\n\n      SolrInputDocument d = processAdd(chain,\n                                       doc(f(\"id\", \"2\"),\n                                           f(\"name\", \" foo \"),\n                                           f(\"subject\", \"bar\")));\n      \n      assertEquals(chain + \" didn't add Double field\", \n                   42.3d, d.getFieldValue(\"script_added_d\"));\n      assertEquals(chain + \" didn't add integer field\", \n                   new Integer(42), d.getFieldValue(\"script_added_i\"));\n      \n      processCommit(\"run-no-scripts\");\n\n      assertQ(chain + \": couldn't find doc by id\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=1]\");\n\n      processDeleteById(chain, \"2\");\n      processCommit(chain);\n      \n      assertEquals(chain, 6, functionMessages.size());\n      assertTrue(chain, functionMessages.contains(\"processAdd0\"));\n      assertTrue(chain, functionMessages.contains(\"processAdd1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processAdd0\") \n                 < functionMessages.indexOf(\"processAdd1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processDelete0\"));\n      assertTrue(chain, functionMessages.contains(\"processDelete1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processDelete0\") \n                 < functionMessages.indexOf(\"processDelete1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processCommit0\"));\n      assertTrue(chain, functionMessages.contains(\"processCommit1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processCommit0\") \n                 < functionMessages.indexOf(\"processCommit1\"));\n\n      finish(chain);\n    \n      assertEquals(chain, 8, functionMessages.size());\n\n      assertTrue(chain, functionMessages.contains(\"finish0\"));\n      assertTrue(chain, functionMessages.contains(\"finish1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"finish0\") \n                 < functionMessages.indexOf(\"finish1\"));\n\n      assertQ(chain + \": found deleted doc\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=0]\");\n      \n    }\n  }\n\n","sourceOld":"  public void testMultipleScripts() throws Exception {\n    SolrCore core = h.getCore();\n\n    for (final String chain : new String[] {\"dual-scripts-arr\", \n                                            \"dual-scripts-strs\"}) {\n    \n      UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(chain);\n      final StatelessScriptUpdateProcessorFactory factory = \n        ((StatelessScriptUpdateProcessorFactory) chained.getFactories()[0]);\n      final List<String> functionMessages = new ArrayList<String>();\n      ScriptEngineCustomizer customizer = new ScriptEngineCustomizer() {\n          @Override\n          public void customize(ScriptEngine engine) {\n            engine.put(\"testCase\", StatelessScriptUpdateProcessorFactoryTest.this);\n            engine.put(\"functionMessages\", functionMessages);\n          }\n        };\n      factory.setScriptEngineCustomizer(customizer);\n      assertNotNull(chained);\n\n      SolrInputDocument d = processAdd(chain,\n                                       doc(f(\"id\", \"2\"),\n                                           f(\"name\", \" foo \"),\n                                           f(\"subject\", \"bar\")));\n      \n      assertEquals(chain + \" didn't add Double field\", \n                   42.3d, d.getFieldValue(\"script_added_d\"));\n      assertEquals(chain + \" didn't add integer field\", \n                   new Integer(42), d.getFieldValue(\"script_added_i\"));\n      \n      processCommit(\"run-no-scripts\");\n\n      assertQ(chain + \": couldn't find doc by id\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=1]\");\n\n      processDeleteById(chain, \"2\");\n      processCommit(chain);\n      \n      assertEquals(chain, 6, functionMessages.size());\n      assertTrue(chain, functionMessages.contains(\"processAdd0\"));\n      assertTrue(chain, functionMessages.contains(\"processAdd1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processAdd0\") \n                 < functionMessages.indexOf(\"processAdd1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processDelete0\"));\n      assertTrue(chain, functionMessages.contains(\"processDelete1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processDelete0\") \n                 < functionMessages.indexOf(\"processDelete1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processCommit0\"));\n      assertTrue(chain, functionMessages.contains(\"processCommit1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processCommit0\") \n                 < functionMessages.indexOf(\"processCommit1\"));\n\n      finish(chain);\n    \n      assertEquals(chain, 8, functionMessages.size());\n\n      assertTrue(chain, functionMessages.contains(\"finish0\"));\n      assertTrue(chain, functionMessages.contains(\"finish1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"finish0\") \n                 < functionMessages.indexOf(\"finish1\"));\n\n      assertQ(chain + \": found deleted doc\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=0]\");\n      \n    }\n  }\n\n","bugFix":["9e2656623e57ced6c16aae473bab02019c951802"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest#testMultipleScripts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest#testMultipleScripts().mjava","sourceNew":"  public void testMultipleScripts() throws Exception {\n    SolrCore core = h.getCore();\n\n    for (final String chain : new String[] {\"dual-scripts-arr\", \n                                            \"dual-scripts-strs\"}) {\n    \n      UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(chain);\n      final StatelessScriptUpdateProcessorFactory factory = \n        ((StatelessScriptUpdateProcessorFactory) chained.getFactories()[0]);\n      final List<String> functionMessages = new ArrayList<>();\n      ScriptEngineCustomizer customizer = new ScriptEngineCustomizer() {\n          @Override\n          public void customize(ScriptEngine engine) {\n            engine.put(\"functionMessages\", functionMessages);\n          }\n        };\n      factory.setScriptEngineCustomizer(customizer);\n      assertNotNull(chained);\n\n      SolrInputDocument d = processAdd(chain,\n                                       doc(f(\"id\", \"2\"),\n                                           f(\"name\", \" foo \"),\n                                           f(\"subject\", \"bar\")));\n      \n      assertEquals(chain + \" didn't add Double field\", \n                   42.3d, d.getFieldValue(\"script_added_d\"));\n      assertEquals(chain + \" didn't add integer field\", \n                   new Integer(42), d.getFieldValue(\"script_added_i\"));\n      \n      processCommit(\"run-no-scripts\");\n\n      assertQ(chain + \": couldn't find doc by id\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=1]\");\n\n      processDeleteById(chain, \"2\");\n      processCommit(chain);\n      \n      assertEquals(chain, 6, functionMessages.size());\n      assertTrue(chain, functionMessages.contains(\"processAdd0\"));\n      assertTrue(chain, functionMessages.contains(\"processAdd1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processAdd0\") \n                 < functionMessages.indexOf(\"processAdd1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processDelete0\"));\n      assertTrue(chain, functionMessages.contains(\"processDelete1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processDelete0\") \n                 < functionMessages.indexOf(\"processDelete1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processCommit0\"));\n      assertTrue(chain, functionMessages.contains(\"processCommit1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processCommit0\") \n                 < functionMessages.indexOf(\"processCommit1\"));\n\n      finish(chain);\n    \n      assertEquals(chain, 8, functionMessages.size());\n\n      assertTrue(chain, functionMessages.contains(\"finish0\"));\n      assertTrue(chain, functionMessages.contains(\"finish1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"finish0\") \n                 < functionMessages.indexOf(\"finish1\"));\n\n      assertQ(chain + \": found deleted doc\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=0]\");\n      \n    }\n  }\n\n","sourceOld":"  public void testMultipleScripts() throws Exception {\n    SolrCore core = h.getCore();\n\n    for (final String chain : new String[] {\"dual-scripts-arr\", \n                                            \"dual-scripts-strs\"}) {\n    \n      UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(chain);\n      final StatelessScriptUpdateProcessorFactory factory = \n        ((StatelessScriptUpdateProcessorFactory) chained.getFactories()[0]);\n      final List<String> functionMessages = new ArrayList<String>();\n      ScriptEngineCustomizer customizer = new ScriptEngineCustomizer() {\n          @Override\n          public void customize(ScriptEngine engine) {\n            engine.put(\"functionMessages\", functionMessages);\n          }\n        };\n      factory.setScriptEngineCustomizer(customizer);\n      assertNotNull(chained);\n\n      SolrInputDocument d = processAdd(chain,\n                                       doc(f(\"id\", \"2\"),\n                                           f(\"name\", \" foo \"),\n                                           f(\"subject\", \"bar\")));\n      \n      assertEquals(chain + \" didn't add Double field\", \n                   42.3d, d.getFieldValue(\"script_added_d\"));\n      assertEquals(chain + \" didn't add integer field\", \n                   new Integer(42), d.getFieldValue(\"script_added_i\"));\n      \n      processCommit(\"run-no-scripts\");\n\n      assertQ(chain + \": couldn't find doc by id\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=1]\");\n\n      processDeleteById(chain, \"2\");\n      processCommit(chain);\n      \n      assertEquals(chain, 6, functionMessages.size());\n      assertTrue(chain, functionMessages.contains(\"processAdd0\"));\n      assertTrue(chain, functionMessages.contains(\"processAdd1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processAdd0\") \n                 < functionMessages.indexOf(\"processAdd1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processDelete0\"));\n      assertTrue(chain, functionMessages.contains(\"processDelete1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processDelete0\") \n                 < functionMessages.indexOf(\"processDelete1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processCommit0\"));\n      assertTrue(chain, functionMessages.contains(\"processCommit1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processCommit0\") \n                 < functionMessages.indexOf(\"processCommit1\"));\n\n      finish(chain);\n    \n      assertEquals(chain, 8, functionMessages.size());\n\n      assertTrue(chain, functionMessages.contains(\"finish0\"));\n      assertTrue(chain, functionMessages.contains(\"finish1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"finish0\") \n                 < functionMessages.indexOf(\"finish1\"));\n\n      assertQ(chain + \": found deleted doc\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=0]\");\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"733eaf468f18297b1bcc51031353bdfdd1913bdf","date":1456928540,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest#testMultipleScripts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest#testMultipleScripts().mjava","sourceNew":"  public void testMultipleScripts() throws Exception {\n    SolrCore core = h.getCore();\n\n    for (final String chain : new String[] {\"dual-scripts-arr\", \n                                            \"dual-scripts-strs\"}) {\n    \n      UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(chain);\n      final StatelessScriptUpdateProcessorFactory factory = \n        ((StatelessScriptUpdateProcessorFactory) chained.getProcessors().get(0));\n      final List<String> functionMessages = new ArrayList<>();\n      ScriptEngineCustomizer customizer = new ScriptEngineCustomizer() {\n          @Override\n          public void customize(ScriptEngine engine) {\n            engine.put(\"functionMessages\", functionMessages);\n          }\n        };\n      factory.setScriptEngineCustomizer(customizer);\n      assertNotNull(chained);\n\n      SolrInputDocument d = processAdd(chain,\n                                       doc(f(\"id\", \"2\"),\n                                           f(\"name\", \" foo \"),\n                                           f(\"subject\", \"bar\")));\n      \n      assertEquals(chain + \" didn't add Double field\", \n                   42.3d, d.getFieldValue(\"script_added_d\"));\n      assertEquals(chain + \" didn't add integer field\", \n                   new Integer(42), d.getFieldValue(\"script_added_i\"));\n      \n      processCommit(\"run-no-scripts\");\n\n      assertQ(chain + \": couldn't find doc by id\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=1]\");\n\n      processDeleteById(chain, \"2\");\n      processCommit(chain);\n      \n      assertEquals(chain, 6, functionMessages.size());\n      assertTrue(chain, functionMessages.contains(\"processAdd0\"));\n      assertTrue(chain, functionMessages.contains(\"processAdd1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processAdd0\") \n                 < functionMessages.indexOf(\"processAdd1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processDelete0\"));\n      assertTrue(chain, functionMessages.contains(\"processDelete1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processDelete0\") \n                 < functionMessages.indexOf(\"processDelete1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processCommit0\"));\n      assertTrue(chain, functionMessages.contains(\"processCommit1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processCommit0\") \n                 < functionMessages.indexOf(\"processCommit1\"));\n\n      finish(chain);\n    \n      assertEquals(chain, 8, functionMessages.size());\n\n      assertTrue(chain, functionMessages.contains(\"finish0\"));\n      assertTrue(chain, functionMessages.contains(\"finish1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"finish0\") \n                 < functionMessages.indexOf(\"finish1\"));\n\n      assertQ(chain + \": found deleted doc\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=0]\");\n      \n    }\n  }\n\n","sourceOld":"  public void testMultipleScripts() throws Exception {\n    SolrCore core = h.getCore();\n\n    for (final String chain : new String[] {\"dual-scripts-arr\", \n                                            \"dual-scripts-strs\"}) {\n    \n      UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(chain);\n      final StatelessScriptUpdateProcessorFactory factory = \n        ((StatelessScriptUpdateProcessorFactory) chained.getFactories()[0]);\n      final List<String> functionMessages = new ArrayList<>();\n      ScriptEngineCustomizer customizer = new ScriptEngineCustomizer() {\n          @Override\n          public void customize(ScriptEngine engine) {\n            engine.put(\"functionMessages\", functionMessages);\n          }\n        };\n      factory.setScriptEngineCustomizer(customizer);\n      assertNotNull(chained);\n\n      SolrInputDocument d = processAdd(chain,\n                                       doc(f(\"id\", \"2\"),\n                                           f(\"name\", \" foo \"),\n                                           f(\"subject\", \"bar\")));\n      \n      assertEquals(chain + \" didn't add Double field\", \n                   42.3d, d.getFieldValue(\"script_added_d\"));\n      assertEquals(chain + \" didn't add integer field\", \n                   new Integer(42), d.getFieldValue(\"script_added_i\"));\n      \n      processCommit(\"run-no-scripts\");\n\n      assertQ(chain + \": couldn't find doc by id\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=1]\");\n\n      processDeleteById(chain, \"2\");\n      processCommit(chain);\n      \n      assertEquals(chain, 6, functionMessages.size());\n      assertTrue(chain, functionMessages.contains(\"processAdd0\"));\n      assertTrue(chain, functionMessages.contains(\"processAdd1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processAdd0\") \n                 < functionMessages.indexOf(\"processAdd1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processDelete0\"));\n      assertTrue(chain, functionMessages.contains(\"processDelete1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processDelete0\") \n                 < functionMessages.indexOf(\"processDelete1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processCommit0\"));\n      assertTrue(chain, functionMessages.contains(\"processCommit1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processCommit0\") \n                 < functionMessages.indexOf(\"processCommit1\"));\n\n      finish(chain);\n    \n      assertEquals(chain, 8, functionMessages.size());\n\n      assertTrue(chain, functionMessages.contains(\"finish0\"));\n      assertTrue(chain, functionMessages.contains(\"finish1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"finish0\") \n                 < functionMessages.indexOf(\"finish1\"));\n\n      assertQ(chain + \": found deleted doc\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=0]\");\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest#testMultipleScripts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest#testMultipleScripts().mjava","sourceNew":"  public void testMultipleScripts() throws Exception {\n    SolrCore core = h.getCore();\n\n    for (final String chain : new String[] {\"dual-scripts-arr\", \n                                            \"dual-scripts-strs\"}) {\n    \n      UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(chain);\n      final StatelessScriptUpdateProcessorFactory factory = \n        ((StatelessScriptUpdateProcessorFactory) chained.getProcessors().get(0));\n      final List<String> functionMessages = new ArrayList<>();\n      ScriptEngineCustomizer customizer = new ScriptEngineCustomizer() {\n          @Override\n          public void customize(ScriptEngine engine) {\n            engine.put(\"functionMessages\", functionMessages);\n          }\n        };\n      factory.setScriptEngineCustomizer(customizer);\n      assertNotNull(chained);\n\n      SolrInputDocument d = processAdd(chain,\n                                       doc(f(\"id\", \"2\"),\n                                           f(\"name\", \" foo \"),\n                                           f(\"subject\", \"bar\")));\n      \n      assertEquals(chain + \" didn't add Double field\", \n                   42.3d, d.getFieldValue(\"script_added_d\"));\n      assertEquals(chain + \" didn't add integer field\", \n                   new Integer(42), d.getFieldValue(\"script_added_i\"));\n      \n      processCommit(\"run-no-scripts\");\n\n      assertQ(chain + \": couldn't find doc by id\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=1]\");\n\n      processDeleteById(chain, \"2\");\n      processCommit(chain);\n      \n      assertEquals(chain, 6, functionMessages.size());\n      assertTrue(chain, functionMessages.contains(\"processAdd0\"));\n      assertTrue(chain, functionMessages.contains(\"processAdd1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processAdd0\") \n                 < functionMessages.indexOf(\"processAdd1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processDelete0\"));\n      assertTrue(chain, functionMessages.contains(\"processDelete1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processDelete0\") \n                 < functionMessages.indexOf(\"processDelete1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processCommit0\"));\n      assertTrue(chain, functionMessages.contains(\"processCommit1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processCommit0\") \n                 < functionMessages.indexOf(\"processCommit1\"));\n\n      finish(chain);\n    \n      assertEquals(chain, 8, functionMessages.size());\n\n      assertTrue(chain, functionMessages.contains(\"finish0\"));\n      assertTrue(chain, functionMessages.contains(\"finish1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"finish0\") \n                 < functionMessages.indexOf(\"finish1\"));\n\n      assertQ(chain + \": found deleted doc\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=0]\");\n      \n    }\n  }\n\n","sourceOld":"  public void testMultipleScripts() throws Exception {\n    SolrCore core = h.getCore();\n\n    for (final String chain : new String[] {\"dual-scripts-arr\", \n                                            \"dual-scripts-strs\"}) {\n    \n      UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(chain);\n      final StatelessScriptUpdateProcessorFactory factory = \n        ((StatelessScriptUpdateProcessorFactory) chained.getFactories()[0]);\n      final List<String> functionMessages = new ArrayList<>();\n      ScriptEngineCustomizer customizer = new ScriptEngineCustomizer() {\n          @Override\n          public void customize(ScriptEngine engine) {\n            engine.put(\"functionMessages\", functionMessages);\n          }\n        };\n      factory.setScriptEngineCustomizer(customizer);\n      assertNotNull(chained);\n\n      SolrInputDocument d = processAdd(chain,\n                                       doc(f(\"id\", \"2\"),\n                                           f(\"name\", \" foo \"),\n                                           f(\"subject\", \"bar\")));\n      \n      assertEquals(chain + \" didn't add Double field\", \n                   42.3d, d.getFieldValue(\"script_added_d\"));\n      assertEquals(chain + \" didn't add integer field\", \n                   new Integer(42), d.getFieldValue(\"script_added_i\"));\n      \n      processCommit(\"run-no-scripts\");\n\n      assertQ(chain + \": couldn't find doc by id\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=1]\");\n\n      processDeleteById(chain, \"2\");\n      processCommit(chain);\n      \n      assertEquals(chain, 6, functionMessages.size());\n      assertTrue(chain, functionMessages.contains(\"processAdd0\"));\n      assertTrue(chain, functionMessages.contains(\"processAdd1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processAdd0\") \n                 < functionMessages.indexOf(\"processAdd1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processDelete0\"));\n      assertTrue(chain, functionMessages.contains(\"processDelete1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processDelete0\") \n                 < functionMessages.indexOf(\"processDelete1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processCommit0\"));\n      assertTrue(chain, functionMessages.contains(\"processCommit1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processCommit0\") \n                 < functionMessages.indexOf(\"processCommit1\"));\n\n      finish(chain);\n    \n      assertEquals(chain, 8, functionMessages.size());\n\n      assertTrue(chain, functionMessages.contains(\"finish0\"));\n      assertTrue(chain, functionMessages.contains(\"finish1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"finish0\") \n                 < functionMessages.indexOf(\"finish1\"));\n\n      assertQ(chain + \": found deleted doc\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=0]\");\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest#testMultipleScripts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest#testMultipleScripts().mjava","sourceNew":"  public void testMultipleScripts() throws Exception {\n    SolrCore core = h.getCore();\n\n    for (final String chain : new String[] {\"dual-scripts-arr\", \n                                            \"dual-scripts-strs\"}) {\n    \n      UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(chain);\n      final StatelessScriptUpdateProcessorFactory factory = \n        ((StatelessScriptUpdateProcessorFactory) chained.getProcessors().get(0));\n      final List<String> functionMessages = new ArrayList<>();\n      ScriptEngineCustomizer customizer = new ScriptEngineCustomizer() {\n          @Override\n          public void customize(ScriptEngine engine) {\n            engine.put(\"functionMessages\", functionMessages);\n          }\n        };\n      factory.setScriptEngineCustomizer(customizer);\n      assertNotNull(chained);\n\n      SolrInputDocument d = processAdd(chain,\n                                       doc(f(\"id\", \"2\"),\n                                           f(\"name\", \" foo \"),\n                                           f(\"subject\", \"bar\")));\n      \n      assertEquals(chain + \" didn't add Double field\", \n                   42.3d, d.getFieldValue(\"script_added_d\"));\n      assertEquals(chain + \" didn't add integer field\",\n          42, d.getFieldValue(\"script_added_i\"));\n      \n      processCommit(\"run-no-scripts\");\n\n      assertQ(chain + \": couldn't find doc by id\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=1]\");\n\n      processDeleteById(chain, \"2\");\n      processCommit(chain);\n      \n      assertEquals(chain, 6, functionMessages.size());\n      assertTrue(chain, functionMessages.contains(\"processAdd0\"));\n      assertTrue(chain, functionMessages.contains(\"processAdd1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processAdd0\") \n                 < functionMessages.indexOf(\"processAdd1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processDelete0\"));\n      assertTrue(chain, functionMessages.contains(\"processDelete1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processDelete0\") \n                 < functionMessages.indexOf(\"processDelete1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processCommit0\"));\n      assertTrue(chain, functionMessages.contains(\"processCommit1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processCommit0\") \n                 < functionMessages.indexOf(\"processCommit1\"));\n\n      finish(chain);\n    \n      assertEquals(chain, 8, functionMessages.size());\n\n      assertTrue(chain, functionMessages.contains(\"finish0\"));\n      assertTrue(chain, functionMessages.contains(\"finish1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"finish0\") \n                 < functionMessages.indexOf(\"finish1\"));\n\n      assertQ(chain + \": found deleted doc\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=0]\");\n      \n    }\n  }\n\n","sourceOld":"  public void testMultipleScripts() throws Exception {\n    SolrCore core = h.getCore();\n\n    for (final String chain : new String[] {\"dual-scripts-arr\", \n                                            \"dual-scripts-strs\"}) {\n    \n      UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(chain);\n      final StatelessScriptUpdateProcessorFactory factory = \n        ((StatelessScriptUpdateProcessorFactory) chained.getProcessors().get(0));\n      final List<String> functionMessages = new ArrayList<>();\n      ScriptEngineCustomizer customizer = new ScriptEngineCustomizer() {\n          @Override\n          public void customize(ScriptEngine engine) {\n            engine.put(\"functionMessages\", functionMessages);\n          }\n        };\n      factory.setScriptEngineCustomizer(customizer);\n      assertNotNull(chained);\n\n      SolrInputDocument d = processAdd(chain,\n                                       doc(f(\"id\", \"2\"),\n                                           f(\"name\", \" foo \"),\n                                           f(\"subject\", \"bar\")));\n      \n      assertEquals(chain + \" didn't add Double field\", \n                   42.3d, d.getFieldValue(\"script_added_d\"));\n      assertEquals(chain + \" didn't add integer field\", \n                   new Integer(42), d.getFieldValue(\"script_added_i\"));\n      \n      processCommit(\"run-no-scripts\");\n\n      assertQ(chain + \": couldn't find doc by id\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=1]\");\n\n      processDeleteById(chain, \"2\");\n      processCommit(chain);\n      \n      assertEquals(chain, 6, functionMessages.size());\n      assertTrue(chain, functionMessages.contains(\"processAdd0\"));\n      assertTrue(chain, functionMessages.contains(\"processAdd1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processAdd0\") \n                 < functionMessages.indexOf(\"processAdd1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processDelete0\"));\n      assertTrue(chain, functionMessages.contains(\"processDelete1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processDelete0\") \n                 < functionMessages.indexOf(\"processDelete1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processCommit0\"));\n      assertTrue(chain, functionMessages.contains(\"processCommit1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processCommit0\") \n                 < functionMessages.indexOf(\"processCommit1\"));\n\n      finish(chain);\n    \n      assertEquals(chain, 8, functionMessages.size());\n\n      assertTrue(chain, functionMessages.contains(\"finish0\"));\n      assertTrue(chain, functionMessages.contains(\"finish1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"finish0\") \n                 < functionMessages.indexOf(\"finish1\"));\n\n      assertQ(chain + \": found deleted doc\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=0]\");\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest#testMultipleScripts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest#testMultipleScripts().mjava","sourceNew":"  public void testMultipleScripts() throws Exception {\n    SolrCore core = h.getCore();\n\n    for (final String chain : new String[] {\"dual-scripts-arr\", \n                                            \"dual-scripts-strs\"}) {\n    \n      UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(chain);\n      final StatelessScriptUpdateProcessorFactory factory = \n        ((StatelessScriptUpdateProcessorFactory) chained.getProcessors().get(0));\n      final List<String> functionMessages = new ArrayList<>();\n      ScriptEngineCustomizer customizer = new ScriptEngineCustomizer() {\n          @Override\n          public void customize(ScriptEngine engine) {\n            engine.put(\"functionMessages\", functionMessages);\n          }\n        };\n      factory.setScriptEngineCustomizer(customizer);\n      assertNotNull(chained);\n\n      SolrInputDocument d = processAdd(chain,\n                                       doc(f(\"id\", \"2\"),\n                                           f(\"name\", \" foo \"),\n                                           f(\"subject\", \"bar\")));\n      \n      assertEquals(chain + \" didn't add Double field\", \n                   42.3d, d.getFieldValue(\"script_added_d\"));\n      assertEquals(chain + \" didn't add integer field\",\n          42, d.getFieldValue(\"script_added_i\"));\n      \n      processCommit(\"run-no-scripts\");\n\n      assertQ(chain + \": couldn't find doc by id\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=1]\");\n\n      processDeleteById(chain, \"2\");\n      processCommit(chain);\n      \n      assertEquals(chain, 6, functionMessages.size());\n      assertTrue(chain, functionMessages.contains(\"processAdd0\"));\n      assertTrue(chain, functionMessages.contains(\"processAdd1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processAdd0\") \n                 < functionMessages.indexOf(\"processAdd1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processDelete0\"));\n      assertTrue(chain, functionMessages.contains(\"processDelete1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processDelete0\") \n                 < functionMessages.indexOf(\"processDelete1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processCommit0\"));\n      assertTrue(chain, functionMessages.contains(\"processCommit1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processCommit0\") \n                 < functionMessages.indexOf(\"processCommit1\"));\n\n      finish(chain);\n    \n      assertEquals(chain, 8, functionMessages.size());\n\n      assertTrue(chain, functionMessages.contains(\"finish0\"));\n      assertTrue(chain, functionMessages.contains(\"finish1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"finish0\") \n                 < functionMessages.indexOf(\"finish1\"));\n\n      assertQ(chain + \": found deleted doc\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=0]\");\n      \n    }\n  }\n\n","sourceOld":"  public void testMultipleScripts() throws Exception {\n    SolrCore core = h.getCore();\n\n    for (final String chain : new String[] {\"dual-scripts-arr\", \n                                            \"dual-scripts-strs\"}) {\n    \n      UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(chain);\n      final StatelessScriptUpdateProcessorFactory factory = \n        ((StatelessScriptUpdateProcessorFactory) chained.getProcessors().get(0));\n      final List<String> functionMessages = new ArrayList<>();\n      ScriptEngineCustomizer customizer = new ScriptEngineCustomizer() {\n          @Override\n          public void customize(ScriptEngine engine) {\n            engine.put(\"functionMessages\", functionMessages);\n          }\n        };\n      factory.setScriptEngineCustomizer(customizer);\n      assertNotNull(chained);\n\n      SolrInputDocument d = processAdd(chain,\n                                       doc(f(\"id\", \"2\"),\n                                           f(\"name\", \" foo \"),\n                                           f(\"subject\", \"bar\")));\n      \n      assertEquals(chain + \" didn't add Double field\", \n                   42.3d, d.getFieldValue(\"script_added_d\"));\n      assertEquals(chain + \" didn't add integer field\", \n                   new Integer(42), d.getFieldValue(\"script_added_i\"));\n      \n      processCommit(\"run-no-scripts\");\n\n      assertQ(chain + \": couldn't find doc by id\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=1]\");\n\n      processDeleteById(chain, \"2\");\n      processCommit(chain);\n      \n      assertEquals(chain, 6, functionMessages.size());\n      assertTrue(chain, functionMessages.contains(\"processAdd0\"));\n      assertTrue(chain, functionMessages.contains(\"processAdd1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processAdd0\") \n                 < functionMessages.indexOf(\"processAdd1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processDelete0\"));\n      assertTrue(chain, functionMessages.contains(\"processDelete1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processDelete0\") \n                 < functionMessages.indexOf(\"processDelete1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processCommit0\"));\n      assertTrue(chain, functionMessages.contains(\"processCommit1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processCommit0\") \n                 < functionMessages.indexOf(\"processCommit1\"));\n\n      finish(chain);\n    \n      assertEquals(chain, 8, functionMessages.size());\n\n      assertTrue(chain, functionMessages.contains(\"finish0\"));\n      assertTrue(chain, functionMessages.contains(\"finish1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"finish0\") \n                 < functionMessages.indexOf(\"finish1\"));\n\n      assertQ(chain + \": found deleted doc\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=0]\");\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest#testMultipleScripts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest#testMultipleScripts().mjava","sourceNew":"  public void testMultipleScripts() throws Exception {\n    SolrCore core = h.getCore();\n\n    for (final String chain : new String[] {\"dual-scripts-arr\", \n                                            \"dual-scripts-strs\"}) {\n    \n      UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(chain);\n      final StatelessScriptUpdateProcessorFactory factory = \n        ((StatelessScriptUpdateProcessorFactory) chained.getProcessors().get(0));\n      final List<String> functionMessages = new ArrayList<>();\n      ScriptEngineCustomizer customizer = new ScriptEngineCustomizer() {\n          @Override\n          public void customize(ScriptEngine engine) {\n            engine.put(\"functionMessages\", functionMessages);\n          }\n        };\n      factory.setScriptEngineCustomizer(customizer);\n      assertNotNull(chained);\n\n      SolrInputDocument d = processAdd(chain,\n                                       doc(f(\"id\", \"2\"),\n                                           f(\"name\", \" foo \"),\n                                           f(\"subject\", \"bar\")));\n      \n      assertEquals(chain + \" didn't add Double field\", \n                   42.3d, d.getFieldValue(\"script_added_d\"));\n      assertEquals(chain + \" didn't add integer field\",\n          42, d.getFieldValue(\"script_added_i\"));\n      \n      processCommit(\"run-no-scripts\");\n\n      assertQ(chain + \": couldn't find doc by id\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=1]\");\n\n      processDeleteById(chain, \"2\");\n      processCommit(chain);\n      \n      assertEquals(chain, 6, functionMessages.size());\n      assertTrue(chain, functionMessages.contains(\"processAdd0\"));\n      assertTrue(chain, functionMessages.contains(\"processAdd1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processAdd0\") \n                 < functionMessages.indexOf(\"processAdd1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processDelete0\"));\n      assertTrue(chain, functionMessages.contains(\"processDelete1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processDelete0\") \n                 < functionMessages.indexOf(\"processDelete1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processCommit0\"));\n      assertTrue(chain, functionMessages.contains(\"processCommit1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processCommit0\") \n                 < functionMessages.indexOf(\"processCommit1\"));\n\n      finish(chain);\n    \n      assertEquals(chain, 8, functionMessages.size());\n\n      assertTrue(chain, functionMessages.contains(\"finish0\"));\n      assertTrue(chain, functionMessages.contains(\"finish1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"finish0\") \n                 < functionMessages.indexOf(\"finish1\"));\n\n      assertQ(chain + \": found deleted doc\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=0]\");\n      \n    }\n  }\n\n","sourceOld":"  public void testMultipleScripts() throws Exception {\n    SolrCore core = h.getCore();\n\n    for (final String chain : new String[] {\"dual-scripts-arr\", \n                                            \"dual-scripts-strs\"}) {\n    \n      UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(chain);\n      final StatelessScriptUpdateProcessorFactory factory = \n        ((StatelessScriptUpdateProcessorFactory) chained.getProcessors().get(0));\n      final List<String> functionMessages = new ArrayList<>();\n      ScriptEngineCustomizer customizer = new ScriptEngineCustomizer() {\n          @Override\n          public void customize(ScriptEngine engine) {\n            engine.put(\"functionMessages\", functionMessages);\n          }\n        };\n      factory.setScriptEngineCustomizer(customizer);\n      assertNotNull(chained);\n\n      SolrInputDocument d = processAdd(chain,\n                                       doc(f(\"id\", \"2\"),\n                                           f(\"name\", \" foo \"),\n                                           f(\"subject\", \"bar\")));\n      \n      assertEquals(chain + \" didn't add Double field\", \n                   42.3d, d.getFieldValue(\"script_added_d\"));\n      assertEquals(chain + \" didn't add integer field\", \n                   new Integer(42), d.getFieldValue(\"script_added_i\"));\n      \n      processCommit(\"run-no-scripts\");\n\n      assertQ(chain + \": couldn't find doc by id\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=1]\");\n\n      processDeleteById(chain, \"2\");\n      processCommit(chain);\n      \n      assertEquals(chain, 6, functionMessages.size());\n      assertTrue(chain, functionMessages.contains(\"processAdd0\"));\n      assertTrue(chain, functionMessages.contains(\"processAdd1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processAdd0\") \n                 < functionMessages.indexOf(\"processAdd1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processDelete0\"));\n      assertTrue(chain, functionMessages.contains(\"processDelete1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processDelete0\") \n                 < functionMessages.indexOf(\"processDelete1\"));\n\n      assertTrue(chain, functionMessages.contains(\"processCommit0\"));\n      assertTrue(chain, functionMessages.contains(\"processCommit1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"processCommit0\") \n                 < functionMessages.indexOf(\"processCommit1\"));\n\n      finish(chain);\n    \n      assertEquals(chain, 8, functionMessages.size());\n\n      assertTrue(chain, functionMessages.contains(\"finish0\"));\n      assertTrue(chain, functionMessages.contains(\"finish1\"));\n      assertTrue(chain + \": script order doesn't match conf order\",\n                 functionMessages.indexOf(\"finish0\") \n                 < functionMessages.indexOf(\"finish1\"));\n\n      assertQ(chain + \": found deleted doc\",\n              req(\"q\",\"id:2\")\n              , \"//result[@numFound=0]\");\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["9e2656623e57ced6c16aae473bab02019c951802","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d7cb8d0a1ba6a886ec4f07b3205bd0618d98982e"],"9e2656623e57ced6c16aae473bab02019c951802":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e2656623e57ced6c16aae473bab02019c951802"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e2656623e57ced6c16aae473bab02019c951802"],"d7cb8d0a1ba6a886ec4f07b3205bd0618d98982e":["7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7530de27b87b961b51f01bd1299b7004d46e8823":["9e2656623e57ced6c16aae473bab02019c951802"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"9e2656623e57ced6c16aae473bab02019c951802":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"d7cb8d0a1ba6a886ec4f07b3205bd0618d98982e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e2656623e57ced6c16aae473bab02019c951802","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","628903f37b6c442da0d390db1c6af9a0e74d41a7","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d7cb8d0a1ba6a886ec4f07b3205bd0618d98982e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}