{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","sourceNew":"  /** Expert: remove any index files that are no longer\n   *  used.\n   *\n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    ensureOpen(false);\n    deleter.deletePendingFiles();\n    deleter.revisitPolicy();\n  }\n\n","sourceOld":"  /** Expert: remove any index files that are no longer\n   *  used.\n   *\n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    ensureOpen(false);\n    deleter.deletePendingFiles();\n    deleter.revisitPolicy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","sourceNew":"  /** Expert: remove any index files that are no longer\n   *  used.\n   *\n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    ensureOpen(false);\n    deleter.revisitPolicy();\n  }\n\n","sourceOld":"  /** Expert: remove any index files that are no longer\n   *  used.\n   *\n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    ensureOpen(false);\n    deleter.deletePendingFiles();\n    deleter.revisitPolicy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","date":1454513757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","sourceNew":"  /** Expert: remove any index files that are no longer\n   *  used.\n   *\n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  // nocommit remove this\n  public synchronized void deleteUnusedFiles() throws IOException {\n    ensureOpen(false);\n    deleter.revisitPolicy();\n  }\n\n","sourceOld":"  /** Expert: remove any index files that are no longer\n   *  used.\n   *\n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    ensureOpen(false);\n    deleter.revisitPolicy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"240cd0f67652ccfb87d7c5f8b2486d0f42012daa","date":1454536570,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","sourceNew":"  /** Expert: remove any index files that are no longer\n   *  used.\n   *\n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    // TODO: should we remove this method now that it's the Directory's job to retry deletions?  Except, for the super expert IDP use case\n    // it's still needed?\n    ensureOpen(false);\n    deleter.revisitPolicy();\n  }\n\n","sourceOld":"  /** Expert: remove any index files that are no longer\n   *  used.\n   *\n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  // nocommit remove this\n  public synchronized void deleteUnusedFiles() throws IOException {\n    ensureOpen(false);\n    deleter.revisitPolicy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","sourceNew":"  /** Expert: remove any index files that are no longer\n   *  used.\n   *\n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    // TODO: should we remove this method now that it's the Directory's job to retry deletions?  Except, for the super expert IDP use case\n    // it's still needed?\n    ensureOpen(false);\n    deleter.revisitPolicy();\n  }\n\n","sourceOld":"  /** Expert: remove any index files that are no longer\n   *  used.\n   *\n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    ensureOpen(false);\n    deleter.deletePendingFiles();\n    deleter.revisitPolicy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","sourceNew":"  /** Expert: remove any index files that are no longer\n   *  used.\n   *\n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    // TODO: should we remove this method now that it's the Directory's job to retry deletions?  Except, for the super expert IDP use case\n    // it's still needed?\n    ensureOpen(false);\n    deleter.revisitPolicy();\n  }\n\n","sourceOld":"  /** Expert: remove any index files that are no longer\n   *  used.\n   *\n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    ensureOpen(false);\n    deleter.deletePendingFiles();\n    deleter.revisitPolicy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","sourceNew":"  /** Expert: remove any index files that are no longer\n   *  used.\n   *\n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    // TODO: should we remove this method now that it's the Directory's job to retry deletions?  Except, for the super expert IDP use case\n    // it's still needed?\n    ensureOpen(false);\n    deleter.revisitPolicy();\n  }\n\n","sourceOld":"  /** Expert: remove any index files that are no longer\n   *  used.\n   *\n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    ensureOpen(false);\n    deleter.deletePendingFiles();\n    deleter.revisitPolicy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"240cd0f67652ccfb87d7c5f8b2486d0f42012daa":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","240cd0f67652ccfb87d7c5f8b2486d0f42012daa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b470f36a9372c97283360b1304eacbde22df6c0d"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"240cd0f67652ccfb87d7c5f8b2486d0f42012daa":["b470f36a9372c97283360b1304eacbde22df6c0d"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["240cd0f67652ccfb87d7c5f8b2486d0f42012daa"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}