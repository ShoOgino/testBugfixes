{"path":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testRecoveringFlag().mjava","commits":[{"id":"058ff60cb31d722dd3cb7e252dacbd74faf4e544","date":1527819790,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testRecoveringFlag().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testRecoveringFlag() {\r\n    String collection = \"recoveringFlag\";\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n      // List all possible orders of ensureTermIsHigher, startRecovering, doneRecovering\r\n      zkShardTerms.registerTerm(\"replica1\");\r\n      zkShardTerms.registerTerm(\"replica2\");\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 1);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 1);\r\n\r\n      zkShardTerms.doneRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 1);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 1);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\r\n\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 2);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 1);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\r\n\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 2);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 2);\r\n\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 3);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 2);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 2);\r\n      zkShardTerms.doneRecovering(\"replica2\");\r\n\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 2);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      zkShardTerms.doneRecovering(\"replica2\");\r\n\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 5);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 5);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 5);\r\n      zkShardTerms.doneRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\r\n\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2c89e7a417219cc9b2611d2193ad73a08628f2","date":1537932944,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testRecoveringFlag().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testRecoveringFlag().mjava","sourceNew":"  @Test\r\n  public void testRecoveringFlag() {\r\n    String collection = \"recoveringFlag\";\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n      // List all possible orders of ensureTermIsHigher, startRecovering, doneRecovering\r\n      zkShardTerms.registerTerm(\"replica1\");\r\n      zkShardTerms.registerTerm(\"replica2\");\r\n\r\n      // normal case when leader start lir process\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 1);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 0);\r\n\r\n      zkShardTerms.doneRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 1);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 1);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\r\n\r\n      // stack of lir processes\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 2);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 1);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\r\n\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 2);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 1);\r\n\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 3);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 2);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 1);\r\n\r\n      zkShardTerms.doneRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 2);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\r\n\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      zkShardTerms.doneRecovering(\"replica2\");\r\n\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 5);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 5);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 3);\r\n      zkShardTerms.doneRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\r\n\r\n    }\r\n  }\r\n\n","sourceOld":"  @Test\r\n  public void testRecoveringFlag() {\r\n    String collection = \"recoveringFlag\";\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n      // List all possible orders of ensureTermIsHigher, startRecovering, doneRecovering\r\n      zkShardTerms.registerTerm(\"replica1\");\r\n      zkShardTerms.registerTerm(\"replica2\");\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 1);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 1);\r\n\r\n      zkShardTerms.doneRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 1);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 1);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\r\n\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 2);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 1);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\r\n\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 2);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 2);\r\n\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 3);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 2);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 2);\r\n      zkShardTerms.doneRecovering(\"replica2\");\r\n\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 2);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      zkShardTerms.doneRecovering(\"replica2\");\r\n\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 5);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 5);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 5);\r\n      zkShardTerms.doneRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\r\n\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180","date":1539076849,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testRecoveringFlag().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testRecoveringFlag().mjava","sourceNew":"  @Test\r\n  public void testRecoveringFlag() {\r\n    String collection = \"recoveringFlag\";\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n      // List all possible orders of ensureTermIsHigher, startRecovering, doneRecovering\r\n      zkShardTerms.registerTerm(\"replica1\");\r\n      zkShardTerms.registerTerm(\"replica2\");\r\n\r\n      // normal case when leader failed to send an update to replica\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 1);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 0);\r\n\r\n      zkShardTerms.doneRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 1);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 1);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\r\n\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 2);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 1);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\r\n\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 2);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 1);\r\n\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 3);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 2);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 1);\r\n\r\n      zkShardTerms.doneRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 2);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\r\n\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      zkShardTerms.doneRecovering(\"replica2\");\r\n\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 5);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 5);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 3);\r\n      zkShardTerms.doneRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\r\n\r\n    }\r\n  }\r\n\n","sourceOld":"  @Test\r\n  public void testRecoveringFlag() {\r\n    String collection = \"recoveringFlag\";\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n      // List all possible orders of ensureTermIsHigher, startRecovering, doneRecovering\r\n      zkShardTerms.registerTerm(\"replica1\");\r\n      zkShardTerms.registerTerm(\"replica2\");\r\n\r\n      // normal case when leader start lir process\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 1);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 0);\r\n\r\n      zkShardTerms.doneRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 1);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 1);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\r\n\r\n      // stack of lir processes\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 2);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 1);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\r\n\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 2);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 1);\r\n\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 3);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 2);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 1);\r\n\r\n      zkShardTerms.doneRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 2);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\r\n\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      zkShardTerms.doneRecovering(\"replica2\");\r\n\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 5);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 5);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 3);\r\n      zkShardTerms.doneRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\r\n\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5c929d2716fa79d443b93a82adb1da5b578ebd8","date":1550428858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testRecoveringFlag().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testRecoveringFlag().mjava","sourceNew":"  @Test\n  public void testRecoveringFlag() {\n    String collection = \"recoveringFlag\";\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\n      // List all possible orders of ensureTermIsHigher, startRecovering, doneRecovering\n      zkShardTerms.registerTerm(\"replica1\");\n      zkShardTerms.registerTerm(\"replica2\");\n\n      // normal case when leader failed to send an update to replica\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\n      zkShardTerms.startRecovering(\"replica2\");\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 1);\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 0);\n\n      zkShardTerms.doneRecovering(\"replica2\");\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 1);\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 1);\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\n\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 2);\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 1);\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\n\n      zkShardTerms.startRecovering(\"replica2\");\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 2);\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 1);\n\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 3);\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 2);\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 1);\n\n      zkShardTerms.doneRecovering(\"replica2\");\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 2);\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\n\n      zkShardTerms.startRecovering(\"replica2\");\n      zkShardTerms.doneRecovering(\"replica2\");\n\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\n      zkShardTerms.startRecovering(\"replica2\");\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\n      zkShardTerms.startRecovering(\"replica2\");\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 5);\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 5);\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 3);\n      zkShardTerms.doneRecovering(\"replica2\");\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\n\n    }\n  }\n\n","sourceOld":"  @Test\r\n  public void testRecoveringFlag() {\r\n    String collection = \"recoveringFlag\";\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n      // List all possible orders of ensureTermIsHigher, startRecovering, doneRecovering\r\n      zkShardTerms.registerTerm(\"replica1\");\r\n      zkShardTerms.registerTerm(\"replica2\");\r\n\r\n      // normal case when leader failed to send an update to replica\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 1);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 0);\r\n\r\n      zkShardTerms.doneRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 1);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 1);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\r\n\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 2);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 1);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\r\n\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 2);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 1);\r\n\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 3);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 2);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 1);\r\n\r\n      zkShardTerms.doneRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 2);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\r\n\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      zkShardTerms.doneRecovering(\"replica2\");\r\n\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n      zkShardTerms.startRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica1\"), 5);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2\"), 5);\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), 3);\r\n      zkShardTerms.doneRecovering(\"replica2\");\r\n      assertEquals(zkShardTerms.getTerm(\"replica2_recovering\"), -1);\r\n\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180"],"6d2c89e7a417219cc9b2611d2193ad73a08628f2":["058ff60cb31d722dd3cb7e252dacbd74faf4e544"],"058ff60cb31d722dd3cb7e252dacbd74faf4e544":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180":["6d2c89e7a417219cc9b2611d2193ad73a08628f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["058ff60cb31d722dd3cb7e252dacbd74faf4e544"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d2c89e7a417219cc9b2611d2193ad73a08628f2":["b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180"],"058ff60cb31d722dd3cb7e252dacbd74faf4e544":["6d2c89e7a417219cc9b2611d2193ad73a08628f2"],"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}