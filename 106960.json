{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#convertToEqualitor(StreamComparator).mjava","commits":[{"id":"c1833f6d07cc5000544dfe89f26c81e2eb8afb4c","date":1446951913,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#convertToEqualitor(StreamComparator).mjava","pathOld":"/dev/null","sourceNew":"  private StreamEqualitor convertToEqualitor(StreamComparator comp){\n    if(comp instanceof MultipleFieldComparator){\n      MultipleFieldComparator mComp = (MultipleFieldComparator)comp;\n      StreamEqualitor[] eqs = new StreamEqualitor[mComp.getComps().length];\n      for(int idx = 0; idx < mComp.getComps().length; ++idx){\n        eqs[idx] = convertToEqualitor(mComp.getComps()[idx]);\n      }\n      return new MultipleFieldEqualitor(eqs);\n    }\n    else{\n      FieldComparator fComp = (FieldComparator)comp;\n      return new FieldEqualitor(fComp.getFieldName());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"333d804f5abfaf34c57493306a4cb2e01e55662d","date":1447206304,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#convertToEqualitor(StreamComparator).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#convertToEqualitor(StreamComparator).mjava","sourceNew":"  private StreamEqualitor convertToEqualitor(StreamComparator comp){\n    if(comp instanceof MultipleFieldComparator){\n      MultipleFieldComparator mComp = (MultipleFieldComparator)comp;\n      StreamEqualitor[] eqs = new StreamEqualitor[mComp.getComps().length];\n      for(int idx = 0; idx < mComp.getComps().length; ++idx){\n        eqs[idx] = convertToEqualitor(mComp.getComps()[idx]);\n      }\n      return new MultipleFieldEqualitor(eqs);\n    }\n    else{\n      FieldComparator fComp = (FieldComparator)comp;\n      return new FieldEqualitor(fComp.getLeftFieldName(), fComp.getRightFieldName());\n    }\n  }\n\n","sourceOld":"  private StreamEqualitor convertToEqualitor(StreamComparator comp){\n    if(comp instanceof MultipleFieldComparator){\n      MultipleFieldComparator mComp = (MultipleFieldComparator)comp;\n      StreamEqualitor[] eqs = new StreamEqualitor[mComp.getComps().length];\n      for(int idx = 0; idx < mComp.getComps().length; ++idx){\n        eqs[idx] = convertToEqualitor(mComp.getComps()[idx]);\n      }\n      return new MultipleFieldEqualitor(eqs);\n    }\n    else{\n      FieldComparator fComp = (FieldComparator)comp;\n      return new FieldEqualitor(fComp.getFieldName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c1833f6d07cc5000544dfe89f26c81e2eb8afb4c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"333d804f5abfaf34c57493306a4cb2e01e55662d":["c1833f6d07cc5000544dfe89f26c81e2eb8afb4c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["333d804f5abfaf34c57493306a4cb2e01e55662d"]},"commit2Childs":{"c1833f6d07cc5000544dfe89f26c81e2eb8afb4c":["333d804f5abfaf34c57493306a4cb2e01e55662d"],"333d804f5abfaf34c57493306a4cb2e01e55662d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c1833f6d07cc5000544dfe89f26c81e2eb8afb4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}