{"path":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#verifyPropUniquePerShard(String).mjava","commits":[{"id":"73fd358e8ec697393d56617f4d9cedaca74dca14","date":1547954439,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#verifyPropUniquePerShard(String).mjava","pathOld":"/dev/null","sourceNew":"  // make sure that the property in question is unique per shard.\n  private Map<String, String> verifyPropUniquePerShard(String prop) throws InterruptedException, KeeperException {\n    Map<String, String> uniquePropMaps = new TreeMap<>();\n\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n    while (timeout.hasTimedOut() == false) {\n      uniquePropMaps.clear();\n      if (checkdUniquePropPerShard(uniquePropMaps, prop)) {\n        return uniquePropMaps;\n      }\n      TimeUnit.MILLISECONDS.sleep(100);\n    }\n    fail(\"There should be exactly one replica with value \" + prop + \" set to true per shard: \"\n        + cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).toString());\n    return null; // keeps IDE happy.\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#verifyPropUniquePerShard(String).mjava","pathOld":"/dev/null","sourceNew":"  // make sure that the property in question is unique per shard.\n  private Map<String, String> verifyPropUniquePerShard(String prop) throws InterruptedException, KeeperException {\n    Map<String, String> uniquePropMaps = new TreeMap<>();\n\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n    while (timeout.hasTimedOut() == false) {\n      uniquePropMaps.clear();\n      if (checkdUniquePropPerShard(uniquePropMaps, prop)) {\n        return uniquePropMaps;\n      }\n      TimeUnit.MILLISECONDS.sleep(100);\n    }\n    fail(\"There should be exactly one replica with value \" + prop + \" set to true per shard: \"\n        + cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).toString());\n    return null; // keeps IDE happy.\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73fd358e8ec697393d56617f4d9cedaca74dca14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73fd358e8ec697393d56617f4d9cedaca74dca14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73fd358e8ec697393d56617f4d9cedaca74dca14"]},"commit2Childs":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","73fd358e8ec697393d56617f4d9cedaca74dca14"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}