{"path":"solr/core/src/java/org/apache/solr/util/DateMathParser#parseMath(Date,String).mjava","commits":[{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#parseMath(Date,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DateFormatUtil#parseMath(Date,String).mjava","sourceNew":"  /**\n   * Parses a String which may be a date (in the standard ISO-8601 format)\n   * followed by an optional math expression.\n   * @param now an optional fixed date to use as \"NOW\"\n   * @param val the string to parse\n   */\n  public static Date parseMath(Date now, String val) {\n    String math;\n    final DateMathParser p = new DateMathParser();\n\n    if (null != now) p.setNow(now);\n\n    if (val.startsWith(\"NOW\")) {\n      math = val.substring(\"NOW\".length());\n    } else {\n      final int zz = val.indexOf('Z');\n      if (zz == -1) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Invalid Date String:'\" + val + '\\'');\n      }\n      math = val.substring(zz+1);\n      try {\n        p.setNow(parseNoMath(val.substring(0, zz + 1)));\n      } catch (DateTimeParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Invalid Date in Date Math String:'\" + val + '\\'', e);\n      }\n    }\n\n    if (null == math || math.equals(\"\")) {\n      return p.getNow();\n    }\n\n    try {\n      return p.parseMath(math);\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Invalid Date Math String:'\" +val+'\\'',e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses a String which may be a date (in the standard format)\n   * followed by an optional math expression.\n   * @param now an optional fixed date to use as \"NOW\" in the DateMathParser\n   * @param val the string to parse\n   */\n  public static Date parseMath(Date now, String val) {\n    String math;\n    final DateMathParser p = new DateMathParser();\n  \n    if (null != now) p.setNow(now);\n  \n    if (val.startsWith(NOW)) {\n      math = val.substring(NOW.length());\n    } else {\n      final int zz = val.indexOf(Z);\n      if (0 < zz) {\n        math = val.substring(zz+1);\n        try {\n          // p.setNow(toObject(val.substring(0,zz)));\n          p.setNow(parseDate(val.substring(0,zz+1)));\n        } catch (ParseException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Invalid Date in Date Math String:'\" + val + '\\'', e);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                \"Invalid Date String:'\" +val+'\\'');\n      }\n    }\n  \n    if (null == math || math.equals(\"\")) {\n      return p.getNow();\n    }\n  \n    try {\n      return p.parseMath(math);\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Invalid Date Math String:'\" +val+'\\'',e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691","date":1516909549,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#parseMath(Date,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DateMathParser#parseMath(Date,String).mjava","sourceNew":"  /**\n   * Parses a String which may be a date (in the standard ISO-8601 format)\n   * followed by an optional math expression.\n   * The TimeZone is taken from the {@code TZ} param retrieved via {@link SolrRequestInfo}, defaulting to UTC.\n   * @param now an optional fixed date to use as \"NOW\". {@link SolrRequestInfo} is consulted if unspecified.\n   * @param val the string to parse\n   */\n  //TODO this API is a bit clumsy.  \"now\" is rarely used.\n  public static Date parseMath(Date now, String val) {\n    return parseMath(now, val, null);\n  }\n\n","sourceOld":"  /**\n   * Parses a String which may be a date (in the standard ISO-8601 format)\n   * followed by an optional math expression.\n   * @param now an optional fixed date to use as \"NOW\"\n   * @param val the string to parse\n   */\n  public static Date parseMath(Date now, String val) {\n    String math;\n    final DateMathParser p = new DateMathParser();\n\n    if (null != now) p.setNow(now);\n\n    if (val.startsWith(\"NOW\")) {\n      math = val.substring(\"NOW\".length());\n    } else {\n      final int zz = val.indexOf('Z');\n      if (zz == -1) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Invalid Date String:'\" + val + '\\'');\n      }\n      math = val.substring(zz+1);\n      try {\n        p.setNow(parseNoMath(val.substring(0, zz + 1)));\n      } catch (DateTimeParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Invalid Date in Date Math String:'\" + val + '\\'', e);\n      }\n    }\n\n    if (null == math || math.equals(\"\")) {\n      return p.getNow();\n    }\n\n    try {\n      return p.parseMath(math);\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Invalid Date Math String:'\" +val+'\\'',e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691"]},"commit2Childs":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}