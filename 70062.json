{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(Entity,String,Context).mjava","commits":[{"id":"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","date":1335805170,"type":1,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(Entity,String,Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(DataConfig.Entity,String,Context).mjava","sourceNew":"  DataSource getDataSourceInstance(Entity key, String name, Context ctx) {\n    Properties p = dataSourceProps.get(name);\n    if (p == null)\n      p = config.getDataSources().get(name);\n    if (p == null)\n      p = dataSourceProps.get(null);// for default data source\n    if (p == null)\n      p = config.getDataSources().get(null);\n    if (p == null)  \n      throw new DataImportHandlerException(SEVERE,\n              \"No dataSource :\" + name + \" available for entity :\" + key.getName());\n    String type = p.getProperty(TYPE);\n    DataSource dataSrc = null;\n    if (type == null) {\n      dataSrc = new JdbcDataSource();\n    } else {\n      try {\n        dataSrc = (DataSource) DocBuilder.loadClass(type, getCore()).newInstance();\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Invalid type for data source: \" + type);\n      }\n    }\n    try {\n      Properties copyProps = new Properties();\n      copyProps.putAll(p);\n      Map<String, Object> map = ctx.getRequestParameters();\n      if (map.containsKey(\"rows\")) {\n        int rows = Integer.parseInt((String) map.get(\"rows\"));\n        if (map.containsKey(\"start\")) {\n          rows += Integer.parseInt((String) map.get(\"start\"));\n        }\n        copyProps.setProperty(\"maxRows\", String.valueOf(rows));\n      }\n      dataSrc.init(ctx, copyProps);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Failed to initialize DataSource: \" + key.getDataSourceName());\n    }\n    return dataSrc;\n  }\n\n","sourceOld":"  DataSource getDataSourceInstance(DataConfig.Entity key, String name, Context ctx) {\n    Properties p = dataSourceProps.get(name);\n    if (p == null)\n      p = config.dataSources.get(name);\n    if (p == null)\n      p = dataSourceProps.get(null);// for default data source\n    if (p == null)\n      p = config.dataSources.get(null);\n    if (p == null)  \n      throw new DataImportHandlerException(SEVERE,\n              \"No dataSource :\" + name + \" available for entity :\"\n                      + key.name);\n    String type = p.getProperty(TYPE);\n    DataSource dataSrc = null;\n    if (type == null) {\n      dataSrc = new JdbcDataSource();\n    } else {\n      try {\n        dataSrc = (DataSource) DocBuilder.loadClass(type, getCore()).newInstance();\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Invalid type for data source: \" + type);\n      }\n    }\n    try {\n      Properties copyProps = new Properties();\n      copyProps.putAll(p);\n      Map<String, Object> map = ctx.getRequestParameters();\n      if (map.containsKey(\"rows\")) {\n        int rows = Integer.parseInt((String) map.get(\"rows\"));\n        if (map.containsKey(\"start\")) {\n          rows += Integer.parseInt((String) map.get(\"start\"));\n        }\n        copyProps.setProperty(\"maxRows\", String.valueOf(rows));\n      }\n      dataSrc.init(ctx, copyProps);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Failed to initialize DataSource: \" + key.dataSource);\n    }\n    return dataSrc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5101aff20e65c9a285c274627ec956eb5409d253","date":1344005120,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(Entity,String,Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(Entity,String,Context).mjava","sourceNew":"  DataSource getDataSourceInstance(Entity key, String name, Context ctx) {\n    Map<String,String> p = requestLevelDataSourceProps.get(name);\n    if (p == null)\n      p = config.getDataSources().get(name);\n    if (p == null)\n      p = requestLevelDataSourceProps.get(null);// for default data source\n    if (p == null)\n      p = config.getDataSources().get(null);\n    if (p == null)  \n      throw new DataImportHandlerException(SEVERE,\n              \"No dataSource :\" + name + \" available for entity :\" + key.getName());\n    String type = p.get(TYPE);\n    DataSource dataSrc = null;\n    if (type == null) {\n      dataSrc = new JdbcDataSource();\n    } else {\n      try {\n        dataSrc = (DataSource) DocBuilder.loadClass(type, getCore()).newInstance();\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Invalid type for data source: \" + type);\n      }\n    }\n    try {\n      Properties copyProps = new Properties();\n      copyProps.putAll(p);\n      Map<String, Object> map = ctx.getRequestParameters();\n      if (map.containsKey(\"rows\")) {\n        int rows = Integer.parseInt((String) map.get(\"rows\"));\n        if (map.containsKey(\"start\")) {\n          rows += Integer.parseInt((String) map.get(\"start\"));\n        }\n        copyProps.setProperty(\"maxRows\", String.valueOf(rows));\n      }\n      dataSrc.init(ctx, copyProps);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Failed to initialize DataSource: \" + key.getDataSourceName());\n    }\n    return dataSrc;\n  }\n\n","sourceOld":"  DataSource getDataSourceInstance(Entity key, String name, Context ctx) {\n    Properties p = dataSourceProps.get(name);\n    if (p == null)\n      p = config.getDataSources().get(name);\n    if (p == null)\n      p = dataSourceProps.get(null);// for default data source\n    if (p == null)\n      p = config.getDataSources().get(null);\n    if (p == null)  \n      throw new DataImportHandlerException(SEVERE,\n              \"No dataSource :\" + name + \" available for entity :\" + key.getName());\n    String type = p.getProperty(TYPE);\n    DataSource dataSrc = null;\n    if (type == null) {\n      dataSrc = new JdbcDataSource();\n    } else {\n      try {\n        dataSrc = (DataSource) DocBuilder.loadClass(type, getCore()).newInstance();\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Invalid type for data source: \" + type);\n      }\n    }\n    try {\n      Properties copyProps = new Properties();\n      copyProps.putAll(p);\n      Map<String, Object> map = ctx.getRequestParameters();\n      if (map.containsKey(\"rows\")) {\n        int rows = Integer.parseInt((String) map.get(\"rows\"));\n        if (map.containsKey(\"start\")) {\n          rows += Integer.parseInt((String) map.get(\"start\"));\n        }\n        copyProps.setProperty(\"maxRows\", String.valueOf(rows));\n      }\n      dataSrc.init(ctx, copyProps);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Failed to initialize DataSource: \" + key.getDataSourceName());\n    }\n    return dataSrc;\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","e5167c2af9d2ee6ef81cf6cdd6406dec18df3d92","3dd73fb6c61a8c05893f26d0a5c8405760e27ab1"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(Entity,String,Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(Entity,String,Context).mjava","sourceNew":"  DataSource getDataSourceInstance(Entity key, String name, Context ctx) {\n    Map<String,String> p = requestLevelDataSourceProps.get(name);\n    if (p == null)\n      p = config.getDataSources().get(name);\n    if (p == null)\n      p = requestLevelDataSourceProps.get(null);// for default data source\n    if (p == null)\n      p = config.getDataSources().get(null);\n    if (p == null)  \n      throw new DataImportHandlerException(SEVERE,\n              \"No dataSource :\" + name + \" available for entity :\" + key.getName());\n    String type = p.get(TYPE);\n    DataSource dataSrc = null;\n    if (type == null) {\n      dataSrc = new JdbcDataSource();\n    } else {\n      try {\n        dataSrc = (DataSource) DocBuilder.loadClass(type, getCore()).newInstance();\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Invalid type for data source: \" + type);\n      }\n    }\n    try {\n      Properties copyProps = new Properties();\n      copyProps.putAll(p);\n      Map<String, Object> map = ctx.getRequestParameters();\n      if (map.containsKey(\"rows\")) {\n        int rows = Integer.parseInt((String) map.get(\"rows\"));\n        if (map.containsKey(\"start\")) {\n          rows += Integer.parseInt((String) map.get(\"start\"));\n        }\n        copyProps.setProperty(\"maxRows\", String.valueOf(rows));\n      }\n      dataSrc.init(ctx, copyProps);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Failed to initialize DataSource: \" + key.getDataSourceName());\n    }\n    return dataSrc;\n  }\n\n","sourceOld":"  DataSource getDataSourceInstance(Entity key, String name, Context ctx) {\n    Properties p = dataSourceProps.get(name);\n    if (p == null)\n      p = config.getDataSources().get(name);\n    if (p == null)\n      p = dataSourceProps.get(null);// for default data source\n    if (p == null)\n      p = config.getDataSources().get(null);\n    if (p == null)  \n      throw new DataImportHandlerException(SEVERE,\n              \"No dataSource :\" + name + \" available for entity :\" + key.getName());\n    String type = p.getProperty(TYPE);\n    DataSource dataSrc = null;\n    if (type == null) {\n      dataSrc = new JdbcDataSource();\n    } else {\n      try {\n        dataSrc = (DataSource) DocBuilder.loadClass(type, getCore()).newInstance();\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Invalid type for data source: \" + type);\n      }\n    }\n    try {\n      Properties copyProps = new Properties();\n      copyProps.putAll(p);\n      Map<String, Object> map = ctx.getRequestParameters();\n      if (map.containsKey(\"rows\")) {\n        int rows = Integer.parseInt((String) map.get(\"rows\"));\n        if (map.containsKey(\"start\")) {\n          rows += Integer.parseInt((String) map.get(\"start\"));\n        }\n        copyProps.setProperty(\"maxRows\", String.valueOf(rows));\n      }\n      dataSrc.init(ctx, copyProps);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Failed to initialize DataSource: \" + key.getDataSourceName());\n    }\n    return dataSrc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(Entity,String,Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(Entity,String,Context).mjava","sourceNew":"  DataSource getDataSourceInstance(Entity key, String name, Context ctx) {\n    Map<String,String> p = requestLevelDataSourceProps.get(name);\n    if (p == null)\n      p = config.getDataSources().get(name);\n    if (p == null)\n      p = requestLevelDataSourceProps.get(null);// for default data source\n    if (p == null)\n      p = config.getDataSources().get(null);\n    if (p == null)  \n      throw new DataImportHandlerException(SEVERE,\n              \"No dataSource :\" + name + \" available for entity :\" + key.getName());\n    String type = p.get(TYPE);\n    DataSource dataSrc = null;\n    if (type == null) {\n      dataSrc = new JdbcDataSource();\n    } else {\n      try {\n        dataSrc = (DataSource) DocBuilder.loadClass(type, getCore()).newInstance();\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Invalid type for data source: \" + type);\n      }\n    }\n    try {\n      Properties copyProps = new Properties();\n      copyProps.putAll(p);\n      Map<String, Object> map = ctx.getRequestParameters();\n      if (map.containsKey(\"rows\")) {\n        int rows = Integer.parseInt((String) map.get(\"rows\"));\n        if (map.containsKey(\"start\")) {\n          rows += Integer.parseInt((String) map.get(\"start\"));\n        }\n        copyProps.setProperty(\"maxRows\", String.valueOf(rows));\n      }\n      dataSrc.init(ctx, copyProps);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Failed to initialize DataSource: \" + key.getDataSourceName());\n    }\n    return dataSrc;\n  }\n\n","sourceOld":"  DataSource getDataSourceInstance(Entity key, String name, Context ctx) {\n    Properties p = dataSourceProps.get(name);\n    if (p == null)\n      p = config.getDataSources().get(name);\n    if (p == null)\n      p = dataSourceProps.get(null);// for default data source\n    if (p == null)\n      p = config.getDataSources().get(null);\n    if (p == null)  \n      throw new DataImportHandlerException(SEVERE,\n              \"No dataSource :\" + name + \" available for entity :\" + key.getName());\n    String type = p.getProperty(TYPE);\n    DataSource dataSrc = null;\n    if (type == null) {\n      dataSrc = new JdbcDataSource();\n    } else {\n      try {\n        dataSrc = (DataSource) DocBuilder.loadClass(type, getCore()).newInstance();\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Invalid type for data source: \" + type);\n      }\n    }\n    try {\n      Properties copyProps = new Properties();\n      copyProps.putAll(p);\n      Map<String, Object> map = ctx.getRequestParameters();\n      if (map.containsKey(\"rows\")) {\n        int rows = Integer.parseInt((String) map.get(\"rows\"));\n        if (map.containsKey(\"start\")) {\n          rows += Integer.parseInt((String) map.get(\"start\"));\n        }\n        copyProps.setProperty(\"maxRows\", String.valueOf(rows));\n      }\n      dataSrc.init(ctx, copyProps);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Failed to initialize DataSource: \" + key.getDataSourceName());\n    }\n    return dataSrc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29d10c9c22fbdfa86201e6eb9d1cdd3a3870dde5","date":1406290788,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(Entity,String,Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(Entity,String,Context).mjava","sourceNew":"  public DataSource getDataSourceInstance(Entity key, String name, Context ctx) {\n    Map<String,String> p = requestLevelDataSourceProps.get(name);\n    if (p == null)\n      p = config.getDataSources().get(name);\n    if (p == null)\n      p = requestLevelDataSourceProps.get(null);// for default data source\n    if (p == null)\n      p = config.getDataSources().get(null);\n    if (p == null)  \n      throw new DataImportHandlerException(SEVERE,\n              \"No dataSource :\" + name + \" available for entity :\" + key.getName());\n    String type = p.get(TYPE);\n    DataSource dataSrc = null;\n    if (type == null) {\n      dataSrc = new JdbcDataSource();\n    } else {\n      try {\n        dataSrc = (DataSource) DocBuilder.loadClass(type, getCore()).newInstance();\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Invalid type for data source: \" + type);\n      }\n    }\n    try {\n      Properties copyProps = new Properties();\n      copyProps.putAll(p);\n      Map<String, Object> map = ctx.getRequestParameters();\n      if (map.containsKey(\"rows\")) {\n        int rows = Integer.parseInt((String) map.get(\"rows\"));\n        if (map.containsKey(\"start\")) {\n          rows += Integer.parseInt((String) map.get(\"start\"));\n        }\n        copyProps.setProperty(\"maxRows\", String.valueOf(rows));\n      }\n      dataSrc.init(ctx, copyProps);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Failed to initialize DataSource: \" + key.getDataSourceName());\n    }\n    return dataSrc;\n  }\n\n","sourceOld":"  DataSource getDataSourceInstance(Entity key, String name, Context ctx) {\n    Map<String,String> p = requestLevelDataSourceProps.get(name);\n    if (p == null)\n      p = config.getDataSources().get(name);\n    if (p == null)\n      p = requestLevelDataSourceProps.get(null);// for default data source\n    if (p == null)\n      p = config.getDataSources().get(null);\n    if (p == null)  \n      throw new DataImportHandlerException(SEVERE,\n              \"No dataSource :\" + name + \" available for entity :\" + key.getName());\n    String type = p.get(TYPE);\n    DataSource dataSrc = null;\n    if (type == null) {\n      dataSrc = new JdbcDataSource();\n    } else {\n      try {\n        dataSrc = (DataSource) DocBuilder.loadClass(type, getCore()).newInstance();\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Invalid type for data source: \" + type);\n      }\n    }\n    try {\n      Properties copyProps = new Properties();\n      copyProps.putAll(p);\n      Map<String, Object> map = ctx.getRequestParameters();\n      if (map.containsKey(\"rows\")) {\n        int rows = Integer.parseInt((String) map.get(\"rows\"));\n        if (map.containsKey(\"start\")) {\n          rows += Integer.parseInt((String) map.get(\"start\"));\n        }\n        copyProps.setProperty(\"maxRows\", String.valueOf(rows));\n      }\n      dataSrc.init(ctx, copyProps);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Failed to initialize DataSource: \" + key.getDataSourceName());\n    }\n    return dataSrc;\n  }\n\n","bugFix":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(Entity,String,Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(Entity,String,Context).mjava","sourceNew":"  public DataSource getDataSourceInstance(Entity key, String name, Context ctx) {\n    Map<String,String> p = requestLevelDataSourceProps.get(name);\n    if (p == null)\n      p = config.getDataSources().get(name);\n    if (p == null)\n      p = requestLevelDataSourceProps.get(null);// for default data source\n    if (p == null)\n      p = config.getDataSources().get(null);\n    if (p == null)  \n      throw new DataImportHandlerException(SEVERE,\n              \"No dataSource :\" + name + \" available for entity :\" + key.getName());\n    String type = p.get(TYPE);\n    DataSource dataSrc = null;\n    if (type == null) {\n      dataSrc = new JdbcDataSource();\n    } else {\n      try {\n        dataSrc = (DataSource) DocBuilder.loadClass(type, getCore()).getConstructor().newInstance();\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Invalid type for data source: \" + type);\n      }\n    }\n    try {\n      Properties copyProps = new Properties();\n      copyProps.putAll(p);\n      Map<String, Object> map = ctx.getRequestParameters();\n      if (map.containsKey(\"rows\")) {\n        int rows = Integer.parseInt((String) map.get(\"rows\"));\n        if (map.containsKey(\"start\")) {\n          rows += Integer.parseInt((String) map.get(\"start\"));\n        }\n        copyProps.setProperty(\"maxRows\", String.valueOf(rows));\n      }\n      dataSrc.init(ctx, copyProps);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Failed to initialize DataSource: \" + key.getDataSourceName());\n    }\n    return dataSrc;\n  }\n\n","sourceOld":"  public DataSource getDataSourceInstance(Entity key, String name, Context ctx) {\n    Map<String,String> p = requestLevelDataSourceProps.get(name);\n    if (p == null)\n      p = config.getDataSources().get(name);\n    if (p == null)\n      p = requestLevelDataSourceProps.get(null);// for default data source\n    if (p == null)\n      p = config.getDataSources().get(null);\n    if (p == null)  \n      throw new DataImportHandlerException(SEVERE,\n              \"No dataSource :\" + name + \" available for entity :\" + key.getName());\n    String type = p.get(TYPE);\n    DataSource dataSrc = null;\n    if (type == null) {\n      dataSrc = new JdbcDataSource();\n    } else {\n      try {\n        dataSrc = (DataSource) DocBuilder.loadClass(type, getCore()).newInstance();\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Invalid type for data source: \" + type);\n      }\n    }\n    try {\n      Properties copyProps = new Properties();\n      copyProps.putAll(p);\n      Map<String, Object> map = ctx.getRequestParameters();\n      if (map.containsKey(\"rows\")) {\n        int rows = Integer.parseInt((String) map.get(\"rows\"));\n        if (map.containsKey(\"start\")) {\n          rows += Integer.parseInt((String) map.get(\"start\"));\n        }\n        copyProps.setProperty(\"maxRows\", String.valueOf(rows));\n      }\n      dataSrc.init(ctx, copyProps);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Failed to initialize DataSource: \" + key.getDataSourceName());\n    }\n    return dataSrc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(Entity,String,Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(Entity,String,Context).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public DataSource getDataSourceInstance(Entity key, String name, Context ctx) {\n    Map<String,String> p = requestLevelDataSourceProps.get(name);\n    if (p == null)\n      p = config.getDataSources().get(name);\n    if (p == null)\n      p = requestLevelDataSourceProps.get(null);// for default data source\n    if (p == null)\n      p = config.getDataSources().get(null);\n    if (p == null)  \n      throw new DataImportHandlerException(SEVERE,\n              \"No dataSource :\" + name + \" available for entity :\" + key.getName());\n    String type = p.get(TYPE);\n    @SuppressWarnings({\"rawtypes\"})\n    DataSource dataSrc = null;\n    if (type == null) {\n      dataSrc = new JdbcDataSource();\n    } else {\n      try {\n        dataSrc = (DataSource) DocBuilder.loadClass(type, getCore()).getConstructor().newInstance();\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Invalid type for data source: \" + type);\n      }\n    }\n    try {\n      Properties copyProps = new Properties();\n      copyProps.putAll(p);\n      Map<String, Object> map = ctx.getRequestParameters();\n      if (map.containsKey(\"rows\")) {\n        int rows = Integer.parseInt((String) map.get(\"rows\"));\n        if (map.containsKey(\"start\")) {\n          rows += Integer.parseInt((String) map.get(\"start\"));\n        }\n        copyProps.setProperty(\"maxRows\", String.valueOf(rows));\n      }\n      dataSrc.init(ctx, copyProps);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Failed to initialize DataSource: \" + key.getDataSourceName());\n    }\n    return dataSrc;\n  }\n\n","sourceOld":"  public DataSource getDataSourceInstance(Entity key, String name, Context ctx) {\n    Map<String,String> p = requestLevelDataSourceProps.get(name);\n    if (p == null)\n      p = config.getDataSources().get(name);\n    if (p == null)\n      p = requestLevelDataSourceProps.get(null);// for default data source\n    if (p == null)\n      p = config.getDataSources().get(null);\n    if (p == null)  \n      throw new DataImportHandlerException(SEVERE,\n              \"No dataSource :\" + name + \" available for entity :\" + key.getName());\n    String type = p.get(TYPE);\n    DataSource dataSrc = null;\n    if (type == null) {\n      dataSrc = new JdbcDataSource();\n    } else {\n      try {\n        dataSrc = (DataSource) DocBuilder.loadClass(type, getCore()).getConstructor().newInstance();\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Invalid type for data source: \" + type);\n      }\n    }\n    try {\n      Properties copyProps = new Properties();\n      copyProps.putAll(p);\n      Map<String, Object> map = ctx.getRequestParameters();\n      if (map.containsKey(\"rows\")) {\n        int rows = Integer.parseInt((String) map.get(\"rows\"));\n        if (map.containsKey(\"start\")) {\n          rows += Integer.parseInt((String) map.get(\"start\"));\n        }\n        copyProps.setProperty(\"maxRows\", String.valueOf(rows));\n      }\n      dataSrc.init(ctx, copyProps);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Failed to initialize DataSource: \" + key.getDataSourceName());\n    }\n    return dataSrc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(Entity,String,Context).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public DataSource getDataSourceInstance(Entity key, String name, Context ctx) {\n    Map<String,String> p = requestLevelDataSourceProps.get(name);\n    if (p == null)\n      p = config.getDataSources().get(name);\n    if (p == null)\n      p = requestLevelDataSourceProps.get(null);// for default data source\n    if (p == null)\n      p = config.getDataSources().get(null);\n    if (p == null)  \n      throw new DataImportHandlerException(SEVERE,\n              \"No dataSource :\" + name + \" available for entity :\" + key.getName());\n    String type = p.get(TYPE);\n    @SuppressWarnings({\"rawtypes\"})\n    DataSource dataSrc = null;\n    if (type == null) {\n      dataSrc = new JdbcDataSource();\n    } else {\n      try {\n        dataSrc = (DataSource) DocBuilder.loadClass(type, getCore()).getConstructor().newInstance();\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Invalid type for data source: \" + type);\n      }\n    }\n    try {\n      Properties copyProps = new Properties();\n      copyProps.putAll(p);\n      Map<String, Object> map = ctx.getRequestParameters();\n      if (map.containsKey(\"rows\")) {\n        int rows = Integer.parseInt((String) map.get(\"rows\"));\n        if (map.containsKey(\"start\")) {\n          rows += Integer.parseInt((String) map.get(\"start\"));\n        }\n        copyProps.setProperty(\"maxRows\", String.valueOf(rows));\n      }\n      dataSrc.init(ctx, copyProps);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Failed to initialize DataSource: \" + key.getDataSourceName());\n    }\n    return dataSrc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["29d10c9c22fbdfa86201e6eb9d1cdd3a3870dde5"],"024e13388acbf5562fcbb77a129620982a5e2d79":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","5101aff20e65c9a285c274627ec956eb5409d253"],"29d10c9c22fbdfa86201e6eb9d1cdd3a3870dde5":["5101aff20e65c9a285c274627ec956eb5409d253"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","5101aff20e65c9a285c274627ec956eb5409d253"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"5101aff20e65c9a285c274627ec956eb5409d253":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["024e13388acbf5562fcbb77a129620982a5e2d79"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","5101aff20e65c9a285c274627ec956eb5409d253"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"29d10c9c22fbdfa86201e6eb9d1cdd3a3870dde5":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"5101aff20e65c9a285c274627ec956eb5409d253":["d6f074e73200c07d54f242d3880a8da5a35ff97b","29d10c9c22fbdfa86201e6eb9d1cdd3a3870dde5","8fd5be977c105554c6a7b68afcdbc511439723ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}