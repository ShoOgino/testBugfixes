{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/IntersectStream#IntersectStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"fef6c45a8c2e0c4a323c0edc246d5d27fb3da298","date":1452706901,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/IntersectStream#IntersectStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public IntersectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter onExpression = factory.getNamedOperand(expression, \"on\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(2 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting two streams but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(null == onExpression || !(onExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'on' parameter listing fields to merge on but didn't find one\",expression));\n    }\n    \n    init( factory.constructStream(streamExpressions.get(0)),\n          factory.constructStream(streamExpressions.get(1)),\n          factory.constructEqualitor(((StreamExpressionValue)onExpression.getParameter()).getValue(), FieldEqualitor.class)\n        );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fef6c45a8c2e0c4a323c0edc246d5d27fb3da298":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fef6c45a8c2e0c4a323c0edc246d5d27fb3da298"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fef6c45a8c2e0c4a323c0edc246d5d27fb3da298"],"fef6c45a8c2e0c4a323c0edc246d5d27fb3da298":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}