{"path":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,DeletesMode).mjava","commits":[{"id":"cbf497fc92342be81ff184a144dfa7c96264116b","date":1275079529,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,DeletesMode).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: by default, the cached filter will be shared\n   * across reopened segments that only had changes to their\n   * deletions.  \n   *\n   * @param filter Filter to cache results of\n   * @param deletesMode See {@link DeletesMode}\n   */\n  public CachingWrapperFilter(Filter filter, DeletesMode deletesMode) {\n    this.filter = filter;\n    cache = new FilterCache<DocIdSet>(deletesMode) {\n      @Override\n      public DocIdSet mergeDeletes(final Bits delDocs, final DocIdSet docIdSet) {\n        return new FilteredDocIdSet(docIdSet) {\n          @Override\n            protected boolean match(int docID) {\n            return !delDocs.get(docID);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,DeletesMode).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,DeletesMode).mjava","sourceNew":"  /**\n   * Expert: by default, the cached filter will be shared\n   * across reopened segments that only had changes to their\n   * deletions.  \n   *\n   * @param filter Filter to cache results of\n   * @param deletesMode See {@link DeletesMode}\n   */\n  public CachingWrapperFilter(Filter filter, DeletesMode deletesMode) {\n    this.filter = filter;\n    cache = new FilterCache<DocIdSet>(deletesMode) {\n      @Override\n      public DocIdSet mergeLiveDocs(final Bits liveDocs, final DocIdSet docIdSet) {\n        return new FilteredDocIdSet(docIdSet) {\n          @Override\n          protected boolean match(int docID) {\n            return liveDocs.get(docID);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Expert: by default, the cached filter will be shared\n   * across reopened segments that only had changes to their\n   * deletions.  \n   *\n   * @param filter Filter to cache results of\n   * @param deletesMode See {@link DeletesMode}\n   */\n  public CachingWrapperFilter(Filter filter, DeletesMode deletesMode) {\n    this.filter = filter;\n    cache = new FilterCache<DocIdSet>(deletesMode) {\n      @Override\n      public DocIdSet mergeDeletes(final Bits delDocs, final DocIdSet docIdSet) {\n        return new FilteredDocIdSet(docIdSet) {\n          @Override\n            protected boolean match(int docID) {\n            return !delDocs.get(docID);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,DeletesMode).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,DeletesMode).mjava","sourceNew":"  /**\n   * Expert: by default, the cached filter will be shared\n   * across reopened segments that only had changes to their\n   * deletions.  \n   *\n   * @param filter Filter to cache results of\n   * @param deletesMode See {@link DeletesMode}\n   */\n  public CachingWrapperFilter(Filter filter, DeletesMode deletesMode) {\n    this.filter = filter;\n    cache = new FilterCache<DocIdSet>(deletesMode) {\n      @Override\n      public DocIdSet mergeLiveDocs(final Bits liveDocs, final DocIdSet docIdSet) {\n        return new FilteredDocIdSet(docIdSet) {\n          @Override\n          protected boolean match(int docID) {\n            return liveDocs.get(docID);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Expert: by default, the cached filter will be shared\n   * across reopened segments that only had changes to their\n   * deletions.  \n   *\n   * @param filter Filter to cache results of\n   * @param deletesMode See {@link DeletesMode}\n   */\n  public CachingWrapperFilter(Filter filter, DeletesMode deletesMode) {\n    this.filter = filter;\n    cache = new FilterCache<DocIdSet>(deletesMode) {\n      @Override\n      public DocIdSet mergeDeletes(final Bits delDocs, final DocIdSet docIdSet) {\n        return new FilteredDocIdSet(docIdSet) {\n          @Override\n            protected boolean match(int docID) {\n            return !delDocs.get(docID);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,DeletesMode).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,DeletesMode).mjava","sourceNew":"  /**\n   * Expert: by default, the cached filter will be shared\n   * across reopened segments that only had changes to their\n   * deletions.  \n   *\n   * @param filter Filter to cache results of\n   * @param deletesMode See {@link DeletesMode}\n   */\n  public CachingWrapperFilter(Filter filter, DeletesMode deletesMode) {\n    this.filter = filter;\n    cache = new FilterCache<DocIdSet>(deletesMode) {\n      @Override\n      public DocIdSet mergeLiveDocs(final Bits liveDocs, final DocIdSet docIdSet) {\n        return new FilteredDocIdSet(docIdSet) {\n          @Override\n          protected boolean match(int docID) {\n            return liveDocs.get(docID);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Expert: by default, the cached filter will be shared\n   * across reopened segments that only had changes to their\n   * deletions.  \n   *\n   * @param filter Filter to cache results of\n   * @param deletesMode See {@link DeletesMode}\n   */\n  public CachingWrapperFilter(Filter filter, DeletesMode deletesMode) {\n    this.filter = filter;\n    cache = new FilterCache<DocIdSet>(deletesMode) {\n      @Override\n      public DocIdSet mergeDeletes(final Bits delDocs, final DocIdSet docIdSet) {\n        return new FilteredDocIdSet(docIdSet) {\n          @Override\n            protected boolean match(int docID) {\n            return !delDocs.get(docID);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,DeletesMode).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: by default, the cached filter will be shared\n   * across reopened segments that only had changes to their\n   * deletions.  \n   *\n   * @param filter Filter to cache results of\n   * @param deletesMode See {@link DeletesMode}\n   */\n  public CachingWrapperFilter(Filter filter, DeletesMode deletesMode) {\n    this.filter = filter;\n    cache = new FilterCache<DocIdSet>(deletesMode) {\n      @Override\n      public DocIdSet mergeLiveDocs(final Bits liveDocs, final DocIdSet docIdSet) {\n        return new FilteredDocIdSet(docIdSet) {\n          @Override\n          protected boolean match(int docID) {\n            return liveDocs.get(docID);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["cbf497fc92342be81ff184a144dfa7c96264116b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["cbf497fc92342be81ff184a144dfa7c96264116b","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["cbf497fc92342be81ff184a144dfa7c96264116b","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6620df8541b174097b1133a4fc370adb2e570524"],"cbf497fc92342be81ff184a144dfa7c96264116b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["6620df8541b174097b1133a4fc370adb2e570524","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cbf497fc92342be81ff184a144dfa7c96264116b"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cbf497fc92342be81ff184a144dfa7c96264116b":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}