{"path":"src/java/org/apache/lucene/index/SegmentReader.Norm#copyOnWrite().mjava","commits":[{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.Norm#copyOnWrite().mjava","pathOld":"/dev/null","sourceNew":"    // Called if we intend to change a norm value.  We make a\n    // private copy of bytes if it's shared with others:\n    public synchronized byte[] copyOnWrite() throws IOException {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n      bytes();\n      assert bytes != null;\n      assert bytesRef != null;\n      if (bytesRef.refCount() > 1) {\n        // I cannot be the origNorm for another norm\n        // instance if I'm being changed.  Ie, only the\n        // \"head Norm\" can be changed:\n        assert refCount == 1;\n        final Ref oldRef = bytesRef;\n        bytes = cloneNormBytes(bytes);\n        bytesRef = new Ref();\n        oldRef.decRef();\n      }\n      dirty = true;\n      return bytes;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8514024f885b40613b5ec91876ce5e9d2167d89","date":1260313529,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.Norm#copyOnWrite().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.Norm#copyOnWrite().mjava","sourceNew":"    // Called if we intend to change a norm value.  We make a\n    // private copy of bytes if it's shared with others:\n    public synchronized byte[] copyOnWrite() throws IOException {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n      bytes();\n      assert bytes != null;\n      assert bytesRef != null;\n      if (bytesRef.get() > 1) {\n        // I cannot be the origNorm for another norm\n        // instance if I'm being changed.  Ie, only the\n        // \"head Norm\" can be changed:\n        assert refCount == 1;\n        final AtomicInteger oldRef = bytesRef;\n        bytes = cloneNormBytes(bytes);\n        bytesRef = new AtomicInteger(1);\n        oldRef.decrementAndGet();\n      }\n      dirty = true;\n      return bytes;\n    }\n\n","sourceOld":"    // Called if we intend to change a norm value.  We make a\n    // private copy of bytes if it's shared with others:\n    public synchronized byte[] copyOnWrite() throws IOException {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n      bytes();\n      assert bytes != null;\n      assert bytesRef != null;\n      if (bytesRef.refCount() > 1) {\n        // I cannot be the origNorm for another norm\n        // instance if I'm being changed.  Ie, only the\n        // \"head Norm\" can be changed:\n        assert refCount == 1;\n        final Ref oldRef = bytesRef;\n        bytes = cloneNormBytes(bytes);\n        bytesRef = new Ref();\n        oldRef.decRef();\n      }\n      dirty = true;\n      return bytes;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.Norm#copyOnWrite().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.Norm#copyOnWrite().mjava","sourceNew":"    // Called if we intend to change a norm value.  We make a\n    // private copy of bytes if it's shared with others:\n    public synchronized byte[] copyOnWrite() throws IOException {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n      bytes();\n      assert bytes != null;\n      assert bytesRef != null;\n      if (bytesRef.get() > 1) {\n        // I cannot be the origNorm for another norm\n        // instance if I'm being changed.  Ie, only the\n        // \"head Norm\" can be changed:\n        assert refCount == 1;\n        final AtomicInteger oldRef = bytesRef;\n        bytes = cloneNormBytes(bytes);\n        bytesRef = new AtomicInteger(1);\n        oldRef.decrementAndGet();\n      }\n      dirty = true;\n      return bytes;\n    }\n\n","sourceOld":"    // Called if we intend to change a norm value.  We make a\n    // private copy of bytes if it's shared with others:\n    public synchronized byte[] copyOnWrite() throws IOException {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n      bytes();\n      assert bytes != null;\n      assert bytesRef != null;\n      if (bytesRef.get() > 1) {\n        // I cannot be the origNorm for another norm\n        // instance if I'm being changed.  Ie, only the\n        // \"head Norm\" can be changed:\n        assert refCount == 1;\n        final AtomicInteger oldRef = bytesRef;\n        bytes = cloneNormBytes(bytes);\n        bytesRef = new AtomicInteger(1);\n        oldRef.decrementAndGet();\n      }\n      dirty = true;\n      return bytes;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d8514024f885b40613b5ec91876ce5e9d2167d89":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d8514024f885b40613b5ec91876ce5e9d2167d89"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["d8514024f885b40613b5ec91876ce5e9d2167d89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"d8514024f885b40613b5ec91876ce5e9d2167d89":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}