{"path":"solr/core/src/java/org/apache/solr/handler/admin/DeleteSnapshotOp#execute(CoreAdminHandler.CallInfo).mjava","commits":[{"id":"ddc1ae5ff40afa2c5136ee382632ebe602e050e6","date":1474097671,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/DeleteSnapshotOp#execute(CoreAdminHandler.CallInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    CoreContainer cc = it.handler.getCoreContainer();\n    final SolrParams params = it.req.getParams();\n\n    String commitName = params.required().get(CoreAdminParams.COMMIT_NAME);\n    String cname = params.required().get(CoreAdminParams.CORE);\n    try (SolrCore core = cc.getCore(cname)) {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to locate core \" + cname);\n      }\n\n      SolrSnapshotMetaDataManager mgr = core.getSnapshotMetaDataManager();\n      Optional<SolrSnapshotMetaDataManager.SnapshotMetaData> metadata = mgr.release(commitName);\n      if (metadata.isPresent()) {\n        long gen = metadata.get().getGenerationNumber();\n        String indexDirPath = metadata.get().getIndexDirPath();\n\n        // If the directory storing the snapshot is not the same as the *current* core\n        // index directory, then delete the files corresponding to this snapshot.\n        // Otherwise we leave the index files related to snapshot as is (assuming the\n        // underlying Solr IndexDeletionPolicy will clean them up appropriately).\n        if (!indexDirPath.equals(core.getIndexDir())) {\n          Directory d = core.getDirectoryFactory().get(indexDirPath, DirectoryFactory.DirContext.DEFAULT, DirectoryFactory.LOCK_TYPE_NONE);\n          try {\n            SolrSnapshotManager.deleteIndexFiles(d, mgr.listSnapshotsInIndexDir(indexDirPath), gen);\n          } finally {\n            core.getDirectoryFactory().release(d);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["63a1a94d02abb8cde5dd6ea0defbbc751ce71603"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/DeleteSnapshotOp#execute(CoreAdminHandler.CallInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    CoreContainer cc = it.handler.getCoreContainer();\n    final SolrParams params = it.req.getParams();\n\n    String commitName = params.required().get(CoreAdminParams.COMMIT_NAME);\n    String cname = params.required().get(CoreAdminParams.CORE);\n    try (SolrCore core = cc.getCore(cname)) {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to locate core \" + cname);\n      }\n\n      SolrSnapshotMetaDataManager mgr = core.getSnapshotMetaDataManager();\n      Optional<SolrSnapshotMetaDataManager.SnapshotMetaData> metadata = mgr.release(commitName);\n      if (metadata.isPresent()) {\n        long gen = metadata.get().getGenerationNumber();\n        String indexDirPath = metadata.get().getIndexDirPath();\n\n        // If the directory storing the snapshot is not the same as the *current* core\n        // index directory, then delete the files corresponding to this snapshot.\n        // Otherwise we leave the index files related to snapshot as is (assuming the\n        // underlying Solr IndexDeletionPolicy will clean them up appropriately).\n        if (!indexDirPath.equals(core.getIndexDir())) {\n          Directory d = core.getDirectoryFactory().get(indexDirPath, DirectoryFactory.DirContext.DEFAULT, DirectoryFactory.LOCK_TYPE_NONE);\n          try {\n            SolrSnapshotManager.deleteIndexFiles(d, mgr.listSnapshotsInIndexDir(indexDirPath), gen);\n          } finally {\n            core.getDirectoryFactory().release(d);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e13696c44d3e2405098726359ab81dab178e7bc","date":1476726926,"type":3,"author":"Hrishikesh Gadre","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/DeleteSnapshotOp#execute(CoreAdminHandler.CallInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/DeleteSnapshotOp#execute(CoreAdminHandler.CallInfo).mjava","sourceNew":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    CoreContainer cc = it.handler.getCoreContainer();\n    final SolrParams params = it.req.getParams();\n\n    String commitName = params.required().get(CoreAdminParams.COMMIT_NAME);\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = cc.getCore(cname);\n    if (core == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to locate core \" + cname);\n    }\n\n    try {\n      core.deleteNamedSnapshot(commitName);\n    } finally {\n      core.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    CoreContainer cc = it.handler.getCoreContainer();\n    final SolrParams params = it.req.getParams();\n\n    String commitName = params.required().get(CoreAdminParams.COMMIT_NAME);\n    String cname = params.required().get(CoreAdminParams.CORE);\n    try (SolrCore core = cc.getCore(cname)) {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to locate core \" + cname);\n      }\n\n      SolrSnapshotMetaDataManager mgr = core.getSnapshotMetaDataManager();\n      Optional<SolrSnapshotMetaDataManager.SnapshotMetaData> metadata = mgr.release(commitName);\n      if (metadata.isPresent()) {\n        long gen = metadata.get().getGenerationNumber();\n        String indexDirPath = metadata.get().getIndexDirPath();\n\n        // If the directory storing the snapshot is not the same as the *current* core\n        // index directory, then delete the files corresponding to this snapshot.\n        // Otherwise we leave the index files related to snapshot as is (assuming the\n        // underlying Solr IndexDeletionPolicy will clean them up appropriately).\n        if (!indexDirPath.equals(core.getIndexDir())) {\n          Directory d = core.getDirectoryFactory().get(indexDirPath, DirectoryFactory.DirContext.DEFAULT, DirectoryFactory.LOCK_TYPE_NONE);\n          try {\n            SolrSnapshotManager.deleteIndexFiles(d, mgr.listSnapshotsInIndexDir(indexDirPath), gen);\n          } finally {\n            core.getDirectoryFactory().release(d);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/DeleteSnapshotOp#execute(CoreAdminHandler.CallInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    CoreContainer cc = it.handler.getCoreContainer();\n    final SolrParams params = it.req.getParams();\n\n    String commitName = params.required().get(CoreAdminParams.COMMIT_NAME);\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = cc.getCore(cname);\n    if (core == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to locate core \" + cname);\n    }\n\n    try {\n      core.deleteNamedSnapshot(commitName);\n    } finally {\n      core.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"424ac616f0aeeb2a3c8b6b94084255a0bcab9628","date":1477057622,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/DeleteSnapshotOp#execute(CoreAdminHandler.CallInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/DeleteSnapshotOp#execute(CoreAdminHandler.CallInfo).mjava","sourceNew":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    CoreContainer cc = it.handler.getCoreContainer();\n    final SolrParams params = it.req.getParams();\n\n    String commitName = params.required().get(CoreAdminParams.COMMIT_NAME);\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = cc.getCore(cname);\n    if (core == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to locate core \" + cname);\n    }\n\n    try {\n      core.deleteNamedSnapshot(commitName);\n      // Ideally we shouldn't need this. This is added since the RPC logic in\n      // OverseerCollectionMessageHandler can not provide the coreName as part of the result.\n      it.rsp.add(CoreAdminParams.CORE, core.getName());\n      it.rsp.add(CoreAdminParams.COMMIT_NAME, commitName);\n    } finally {\n      core.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    CoreContainer cc = it.handler.getCoreContainer();\n    final SolrParams params = it.req.getParams();\n\n    String commitName = params.required().get(CoreAdminParams.COMMIT_NAME);\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = cc.getCore(cname);\n    if (core == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to locate core \" + cname);\n    }\n\n    try {\n      core.deleteNamedSnapshot(commitName);\n    } finally {\n      core.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/DeleteSnapshotOp#execute(CoreAdminHandler.CallInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/DeleteSnapshotOp#execute(CoreAdminHandler.CallInfo).mjava","sourceNew":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    CoreContainer cc = it.handler.getCoreContainer();\n    final SolrParams params = it.req.getParams();\n\n    String commitName = params.required().get(CoreAdminParams.COMMIT_NAME);\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = cc.getCore(cname);\n    if (core == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to locate core \" + cname);\n    }\n\n    try {\n      core.deleteNamedSnapshot(commitName);\n      // Ideally we shouldn't need this. This is added since the RPC logic in\n      // OverseerCollectionMessageHandler can not provide the coreName as part of the result.\n      it.rsp.add(CoreAdminParams.CORE, core.getName());\n      it.rsp.add(CoreAdminParams.COMMIT_NAME, commitName);\n    } finally {\n      core.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    CoreContainer cc = it.handler.getCoreContainer();\n    final SolrParams params = it.req.getParams();\n\n    String commitName = params.required().get(CoreAdminParams.COMMIT_NAME);\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = cc.getCore(cname);\n    if (core == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to locate core \" + cname);\n    }\n\n    try {\n      core.deleteNamedSnapshot(commitName);\n    } finally {\n      core.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a1a94d02abb8cde5dd6ea0defbbc751ce71603","date":1521902895,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/DeleteSnapshotOp#execute(CoreAdminHandler.CallInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/DeleteSnapshotOp#execute(CoreAdminHandler.CallInfo).mjava","sourceNew":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n    String commitName = params.required().get(CoreAdminParams.COMMIT_NAME);\n    String cname = params.required().get(CoreAdminParams.CORE);\n\n    CoreContainer cc = it.handler.getCoreContainer();\n    SolrCore core = cc.getCore(cname);\n    if (core == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to locate core \" + cname);\n    }\n\n    try {\n      core.deleteNamedSnapshot(commitName);\n      // Ideally we shouldn't need this. This is added since the RPC logic in\n      // OverseerCollectionMessageHandler can not provide the coreName as part of the result.\n      it.rsp.add(CoreAdminParams.CORE, core.getName());\n      it.rsp.add(CoreAdminParams.COMMIT_NAME, commitName);\n    } finally {\n      core.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    CoreContainer cc = it.handler.getCoreContainer();\n    final SolrParams params = it.req.getParams();\n\n    String commitName = params.required().get(CoreAdminParams.COMMIT_NAME);\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = cc.getCore(cname);\n    if (core == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to locate core \" + cname);\n    }\n\n    try {\n      core.deleteNamedSnapshot(commitName);\n      // Ideally we shouldn't need this. This is added since the RPC logic in\n      // OverseerCollectionMessageHandler can not provide the coreName as part of the result.\n      it.rsp.add(CoreAdminParams.CORE, core.getName());\n      it.rsp.add(CoreAdminParams.COMMIT_NAME, commitName);\n    } finally {\n      core.close();\n    }\n  }\n\n","bugFix":["ddc1ae5ff40afa2c5136ee382632ebe602e050e6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fa95fb629298e03fe5e3d71a0ce792f1256f711","date":1521903809,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/DeleteSnapshotOp#execute(CoreAdminHandler.CallInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/DeleteSnapshotOp#execute(CoreAdminHandler.CallInfo).mjava","sourceNew":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n    String commitName = params.required().get(CoreAdminParams.COMMIT_NAME);\n    String cname = params.required().get(CoreAdminParams.CORE);\n\n    CoreContainer cc = it.handler.getCoreContainer();\n    SolrCore core = cc.getCore(cname);\n    if (core == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to locate core \" + cname);\n    }\n\n    try {\n      core.deleteNamedSnapshot(commitName);\n      // Ideally we shouldn't need this. This is added since the RPC logic in\n      // OverseerCollectionMessageHandler can not provide the coreName as part of the result.\n      it.rsp.add(CoreAdminParams.CORE, core.getName());\n      it.rsp.add(CoreAdminParams.COMMIT_NAME, commitName);\n    } finally {\n      core.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    CoreContainer cc = it.handler.getCoreContainer();\n    final SolrParams params = it.req.getParams();\n\n    String commitName = params.required().get(CoreAdminParams.COMMIT_NAME);\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = cc.getCore(cname);\n    if (core == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to locate core \" + cname);\n    }\n\n    try {\n      core.deleteNamedSnapshot(commitName);\n      // Ideally we shouldn't need this. This is added since the RPC logic in\n      // OverseerCollectionMessageHandler can not provide the coreName as part of the result.\n      it.rsp.add(CoreAdminParams.CORE, core.getName());\n      it.rsp.add(CoreAdminParams.COMMIT_NAME, commitName);\n    } finally {\n      core.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e13696c44d3e2405098726359ab81dab178e7bc":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ddc1ae5ff40afa2c5136ee382632ebe602e050e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3fa95fb629298e03fe5e3d71a0ce792f1256f711":["424ac616f0aeeb2a3c8b6b94084255a0bcab9628","63a1a94d02abb8cde5dd6ea0defbbc751ce71603"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ddc1ae5ff40afa2c5136ee382632ebe602e050e6"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","424ac616f0aeeb2a3c8b6b94084255a0bcab9628"],"424ac616f0aeeb2a3c8b6b94084255a0bcab9628":["3e13696c44d3e2405098726359ab81dab178e7bc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e13696c44d3e2405098726359ab81dab178e7bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3fa95fb629298e03fe5e3d71a0ce792f1256f711"],"63a1a94d02abb8cde5dd6ea0defbbc751ce71603":["424ac616f0aeeb2a3c8b6b94084255a0bcab9628"]},"commit2Childs":{"3e13696c44d3e2405098726359ab81dab178e7bc":["424ac616f0aeeb2a3c8b6b94084255a0bcab9628","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ddc1ae5ff40afa2c5136ee382632ebe602e050e6":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"3fa95fb629298e03fe5e3d71a0ce792f1256f711":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["3e13696c44d3e2405098726359ab81dab178e7bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ddc1ae5ff40afa2c5136ee382632ebe602e050e6","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"424ac616f0aeeb2a3c8b6b94084255a0bcab9628":["3fa95fb629298e03fe5e3d71a0ce792f1256f711","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","63a1a94d02abb8cde5dd6ea0defbbc751ce71603"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"63a1a94d02abb8cde5dd6ea0defbbc751ce71603":["3fa95fb629298e03fe5e3d71a0ce792f1256f711"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}