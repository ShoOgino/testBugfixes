{"path":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","pathOld":"/dev/null","sourceNew":"    public void testAdvance() throws Exception {\n\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        Weight weight = termQuery.weight(indexSearcher);\n\n        Scorer ts = weight.scorer(indexSearcher.getIndexReader(),\n                                  true, true);\n        assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n        //The next doc should be doc 5\n        assertTrue(\"doc should be number 5\", ts.docID() == 5);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","sourceNew":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = termQuery.weight(indexSearcher);\n    \n    Scorer ts = weight.scorer(indexSearcher.getIndexReader(), true, true);\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","sourceOld":"    public void testAdvance() throws Exception {\n\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        Weight weight = termQuery.weight(indexSearcher);\n\n        Scorer ts = weight.scorer(indexSearcher.getIndexReader(),\n                                  true, true);\n        assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n        //The next doc should be doc 5\n        assertTrue(\"doc should be number 5\", ts.docID() == 5);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","sourceNew":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = termQuery.weight(indexSearcher);\n    \n    Scorer ts = weight.scorer(indexSearcher.getIndexReader(), true, true);\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","sourceOld":"    public void testAdvance() throws Exception {\n\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        Weight weight = termQuery.weight(indexSearcher);\n\n        Scorer ts = weight.scorer(indexSearcher.getIndexReader(),\n                                  true, true);\n        assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n        //The next doc should be doc 5\n        assertTrue(\"doc should be number 5\", ts.docID() == 5);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","sourceNew":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = termQuery.weight(indexSearcher);\n    \n    Scorer ts = weight.scorer(indexSearcher.getTopReaderContext(), true, true);\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","sourceOld":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = termQuery.weight(indexSearcher);\n    \n    Scorer ts = weight.scorer(indexSearcher.getIndexReader(), true, true);\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","sourceNew":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = termQuery.weight(indexSearcher);\n    assertTrue(indexSearcher.getTopReaderContext().isAtomic);\n\n    Scorer ts = weight.scorer((AtomicReaderContext) indexSearcher.getTopReaderContext(), true, true);\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","sourceOld":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = termQuery.weight(indexSearcher);\n    \n    Scorer ts = weight.scorer(indexSearcher.getTopReaderContext(), true, true);\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc63f17f42c64d6ccc8c361cfcdf074f115f770c","date":1294930751,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","sourceNew":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = termQuery.weight(indexSearcher);\n    assertTrue(indexSearcher.getTopReaderContext().isAtomic);\n\n    Scorer ts = weight.scorer((AtomicReaderContext) indexSearcher.getTopReaderContext(), ScorerContext.def().scoreDocsInOrder(true).topScorer(true));\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","sourceOld":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = termQuery.weight(indexSearcher);\n    assertTrue(indexSearcher.getTopReaderContext().isAtomic);\n\n    Scorer ts = weight.scorer((AtomicReaderContext) indexSearcher.getTopReaderContext(), true, true);\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","sourceNew":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = termQuery.weight(indexSearcher);\n    assertTrue(indexSearcher.getTopReaderContext().isAtomic);\n\n    Scorer ts = weight.scorer((AtomicReaderContext) indexSearcher.getTopReaderContext(), ScorerContext.def().scoreDocsInOrder(true).topScorer(true));\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","sourceOld":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = termQuery.weight(indexSearcher);\n    \n    Scorer ts = weight.scorer(indexSearcher.getIndexReader(), true, true);\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","sourceNew":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = termQuery.weight(indexSearcher);\n    assertTrue(indexSearcher.getTopReaderContext().isAtomic);\n\n    Scorer ts = weight.scorer((AtomicReaderContext) indexSearcher.getTopReaderContext(), ScorerContext.def().scoreDocsInOrder(true).topScorer(true));\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","sourceOld":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = termQuery.weight(indexSearcher);\n    \n    Scorer ts = weight.scorer(indexSearcher.getIndexReader(), true, true);\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7fee42303a18cc146043c96f66491311b345d9","date":1308246904,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","sourceNew":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext().isAtomic);\n\n    Scorer ts = weight.scorer((AtomicReaderContext) indexSearcher.getTopReaderContext(), ScorerContext.def().scoreDocsInOrder(true).topScorer(true));\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","sourceOld":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = termQuery.weight(indexSearcher);\n    assertTrue(indexSearcher.getTopReaderContext().isAtomic);\n\n    Scorer ts = weight.scorer((AtomicReaderContext) indexSearcher.getTopReaderContext(), ScorerContext.def().scoreDocsInOrder(true).topScorer(true));\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","sourceNew":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext().isAtomic);\n\n    Scorer ts = weight.scorer((AtomicReaderContext) indexSearcher.getTopReaderContext(), ScorerContext.def().scoreDocsInOrder(true).topScorer(true));\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","sourceOld":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = termQuery.weight(indexSearcher);\n    assertTrue(indexSearcher.getTopReaderContext().isAtomic);\n\n    Scorer ts = weight.scorer((AtomicReaderContext) indexSearcher.getTopReaderContext(), ScorerContext.def().scoreDocsInOrder(true).topScorer(true));\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","sourceNew":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) indexSearcher.getTopReaderContext();\n    Scorer ts = weight.scorer(context, true, true, context.reader.getLiveDocs());\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","sourceOld":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext().isAtomic);\n\n    Scorer ts = weight.scorer((AtomicReaderContext) indexSearcher.getTopReaderContext(), ScorerContext.def().scoreDocsInOrder(true).topScorer(true));\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","sourceNew":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) indexSearcher.getTopReaderContext();\n    Scorer ts = weight.scorer(context, true, true, context.reader().getLiveDocs());\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","sourceOld":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) indexSearcher.getTopReaderContext();\n    Scorer ts = weight.scorer(context, true, true, context.reader.getLiveDocs());\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2ec9a9068164200de82395f0e8537a9d9302f3f","date":1327856476,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","sourceNew":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) indexSearcher.getTopReaderContext();\n    Scorer ts = weight.scorer(context, true, true, context.reader().getLiveDocs());\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","sourceOld":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) indexSearcher.getTopReaderContext();\n    Scorer ts = weight.scorer(context, true, true, context.reader().getLiveDocs());\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","sourceNew":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) indexSearcher.getTopReaderContext();\n    Scorer ts = weight.scorer(context, true, true, context.reader().getLiveDocs());\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","sourceOld":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) indexSearcher.getTopReaderContext();\n    Scorer ts = weight.scorer(context, true, true, context.reader.getLiveDocs());\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testAdvance().mjava","sourceNew":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) indexSearcher.getTopReaderContext();\n    Scorer ts = weight.scorer(context, true, true, context.reader().getLiveDocs());\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","sourceOld":"  public void testAdvance() throws Exception {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) indexSearcher.getTopReaderContext();\n    Scorer ts = weight.scorer(context, true, true, context.reader().getLiveDocs());\n    assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    // The next doc should be doc 5\n    assertTrue(\"doc should be number 5\", ts.docID() == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["6f7fee42303a18cc146043c96f66491311b345d9"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","c084e47df29de3330311d69dabf515ceaa989512"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","a2ec9a9068164200de82395f0e8537a9d9302f3f"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c","6f7fee42303a18cc146043c96f66491311b345d9"],"6f7fee42303a18cc146043c96f66491311b345d9":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"c084e47df29de3330311d69dabf515ceaa989512":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a2ec9a9068164200de82395f0e8537a9d9302f3f":["6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c084e47df29de3330311d69dabf515ceaa989512","dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["c084e47df29de3330311d69dabf515ceaa989512"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["5f4e87790277826a2aea119328600dfb07761f32","dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["a2ec9a9068164200de82395f0e8537a9d9302f3f"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"5f4e87790277826a2aea119328600dfb07761f32":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","6f7fee42303a18cc146043c96f66491311b345d9","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":[],"6f7fee42303a18cc146043c96f66491311b345d9":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","0a2903ea38ae3e636b93a08c52a5e37ae939cf6b"],"c084e47df29de3330311d69dabf515ceaa989512":["5f4e87790277826a2aea119328600dfb07761f32","29ef99d61cda9641b6250bf9567329a6e65f901d","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"a2ec9a9068164200de82395f0e8537a9d9302f3f":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}