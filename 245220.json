{"path":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestWholeBreakIterator#assertSameBreaks(String,BreakIterator,BreakIterator).mjava","commits":[{"id":"183d8ed55175364a96c2060b360c1ec36a46d985","date":1363803223,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestWholeBreakIterator#assertSameBreaks(String,BreakIterator,BreakIterator).mjava","pathOld":"/dev/null","sourceNew":"  /** Asserts that two breakiterators break the text the same way */\n  // TODO: change this to use offsets with non-zero start/end\n  public void assertSameBreaks(String text, BreakIterator expected, BreakIterator actual) {\n    expected.setText(text);\n    actual.setText(text);\n\n    assertEquals(expected.current(), actual.current());\n\n    // next()\n    int v = expected.current();\n    while (v != BreakIterator.DONE) {\n      assertEquals(v = expected.next(), actual.next());\n      assertEquals(expected.current(), actual.current());\n    }\n    \n    // first()\n    assertEquals(expected.first(), actual.first());\n    assertEquals(expected.current(), actual.current());\n    // last()\n    assertEquals(expected.last(), actual.last());\n    assertEquals(expected.current(), actual.current());\n    \n    // previous()\n    v = expected.current();\n    while (v != BreakIterator.DONE) {\n      assertEquals(v = expected.previous(), actual.previous());\n      assertEquals(expected.current(), actual.current());\n    }\n    \n    // following()\n    for (int i = 0; i <= text.length(); i++) {\n      expected.first();\n      actual.first();\n      assertEquals(expected.following(i), actual.following(i));\n      assertEquals(expected.current(), actual.current());\n    }\n    \n    // preceding()\n    for (int i = 0; i <= text.length(); i++) {\n      expected.last();\n      actual.last();\n      assertEquals(expected.preceding(i), actual.preceding(i));\n      assertEquals(expected.current(), actual.current());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a75c100b0e78b9b7e8d07e9395353c2b222e2b4d","date":1363917397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestWholeBreakIterator#assertSameBreaks(String,BreakIterator,BreakIterator).mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestWholeBreakIterator#assertSameBreaks(String,BreakIterator,BreakIterator).mjava","sourceNew":"  public void assertSameBreaks(String text, BreakIterator expected, BreakIterator actual) {\n    assertSameBreaks(new StringCharacterIterator(text), \n                     new StringCharacterIterator(text), \n                     expected, \n                     actual);\n  }\n\n","sourceOld":"  /** Asserts that two breakiterators break the text the same way */\n  // TODO: change this to use offsets with non-zero start/end\n  public void assertSameBreaks(String text, BreakIterator expected, BreakIterator actual) {\n    expected.setText(text);\n    actual.setText(text);\n\n    assertEquals(expected.current(), actual.current());\n\n    // next()\n    int v = expected.current();\n    while (v != BreakIterator.DONE) {\n      assertEquals(v = expected.next(), actual.next());\n      assertEquals(expected.current(), actual.current());\n    }\n    \n    // first()\n    assertEquals(expected.first(), actual.first());\n    assertEquals(expected.current(), actual.current());\n    // last()\n    assertEquals(expected.last(), actual.last());\n    assertEquals(expected.current(), actual.current());\n    \n    // previous()\n    v = expected.current();\n    while (v != BreakIterator.DONE) {\n      assertEquals(v = expected.previous(), actual.previous());\n      assertEquals(expected.current(), actual.current());\n    }\n    \n    // following()\n    for (int i = 0; i <= text.length(); i++) {\n      expected.first();\n      actual.first();\n      assertEquals(expected.following(i), actual.following(i));\n      assertEquals(expected.current(), actual.current());\n    }\n    \n    // preceding()\n    for (int i = 0; i <= text.length(); i++) {\n      expected.last();\n      actual.last();\n      assertEquals(expected.preceding(i), actual.preceding(i));\n      assertEquals(expected.current(), actual.current());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee117f8569fdc90c1335087fe14e0b691f879289","date":1432757377,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestWholeBreakIterator#assertSameBreaks(String,BreakIterator,BreakIterator).mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestWholeBreakIterator#assertSameBreaks(String,BreakIterator,BreakIterator).mjava","sourceNew":"  public static void assertSameBreaks(String text, BreakIterator expected, BreakIterator actual) {\n    assertSameBreaks(new StringCharacterIterator(text), \n                     new StringCharacterIterator(text), \n                     expected, \n                     actual);\n  }\n\n","sourceOld":"  public void assertSameBreaks(String text, BreakIterator expected, BreakIterator actual) {\n    assertSameBreaks(new StringCharacterIterator(text), \n                     new StringCharacterIterator(text), \n                     expected, \n                     actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2507f0948c6e908135f1ea7f8e1f9af031b65483","date":1495573983,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestWholeBreakIterator#assertSameBreaks(String,BreakIterator,BreakIterator).mjava","sourceNew":null,"sourceOld":"  public static void assertSameBreaks(String text, BreakIterator expected, BreakIterator actual) {\n    assertSameBreaks(new StringCharacterIterator(text), \n                     new StringCharacterIterator(text), \n                     expected, \n                     actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestWholeBreakIterator#assertSameBreaks(String,BreakIterator,BreakIterator).mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestWholeBreakIterator#assertSameBreaks(String,BreakIterator,BreakIterator).mjava","sourceNew":"  public static void assertSameBreaks(String text, BreakIterator expected, BreakIterator actual) {\n    assertSameBreaks(new StringCharacterIterator(text), \n                     new StringCharacterIterator(text), \n                     expected, \n                     actual);\n  }\n\n","sourceOld":"  public static void assertSameBreaks(String text, BreakIterator expected, BreakIterator actual) {\n    assertSameBreaks(new StringCharacterIterator(text), \n                     new StringCharacterIterator(text), \n                     expected, \n                     actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["ee117f8569fdc90c1335087fe14e0b691f879289","2507f0948c6e908135f1ea7f8e1f9af031b65483"],"183d8ed55175364a96c2060b360c1ec36a46d985":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2507f0948c6e908135f1ea7f8e1f9af031b65483":["ee117f8569fdc90c1335087fe14e0b691f879289"],"a75c100b0e78b9b7e8d07e9395353c2b222e2b4d":["183d8ed55175364a96c2060b360c1ec36a46d985"],"ee117f8569fdc90c1335087fe14e0b691f879289":["a75c100b0e78b9b7e8d07e9395353c2b222e2b4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2507f0948c6e908135f1ea7f8e1f9af031b65483"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"183d8ed55175364a96c2060b360c1ec36a46d985":["a75c100b0e78b9b7e8d07e9395353c2b222e2b4d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["183d8ed55175364a96c2060b360c1ec36a46d985"],"2507f0948c6e908135f1ea7f8e1f9af031b65483":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a75c100b0e78b9b7e8d07e9395353c2b222e2b4d":["ee117f8569fdc90c1335087fe14e0b691f879289"],"ee117f8569fdc90c1335087fe14e0b691f879289":["e9017cf144952056066919f1ebc7897ff9bd71b1","2507f0948c6e908135f1ea7f8e1f9af031b65483"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}