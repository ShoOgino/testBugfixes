{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#bufferUpdates().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#bufferUpdates().mjava","pathOld":"/dev/null","sourceNew":"  public void bufferUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.ACTIVE;\n\n    recoveryInfo = new RecoveryInfo();\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.ACTIVE) return;\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Starting to buffer updates. \" + this);\n      }\n\n      // since we blocked updates, this synchronization shouldn't strictly be necessary.\n      synchronized (this) {\n        recoveryInfo.positionOfStart = tlog == null ? 0 : tlog.snapshot();\n      }\n\n      state = State.BUFFERING;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f49f14d65e01870e494b6f38fa88ea1a8011e4fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#bufferUpdates().mjava","pathOld":"/dev/null","sourceNew":"  public void bufferUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.ACTIVE;\n\n    recoveryInfo = new RecoveryInfo();\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.ACTIVE) return;\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Starting to buffer updates. \" + this);\n      }\n\n      // since we blocked updates, this synchronization shouldn't strictly be necessary.\n      synchronized (this) {\n        recoveryInfo.positionOfStart = tlog == null ? 0 : tlog.snapshot();\n      }\n\n      state = State.BUFFERING;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#bufferUpdates().mjava","pathOld":"/dev/null","sourceNew":"  public void bufferUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.ACTIVE;\n\n    recoveryInfo = new RecoveryInfo();\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.ACTIVE) return;\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Starting to buffer updates. \" + this);\n      }\n\n      // since we blocked updates, this synchronization shouldn't strictly be necessary.\n      synchronized (this) {\n        recoveryInfo.positionOfStart = tlog == null ? 0 : tlog.snapshot();\n      }\n\n      state = State.BUFFERING;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e99829242bceda4cf974ec0eb5d82d713615b3da","date":1337646971,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#bufferUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#bufferUpdates().mjava","sourceNew":"  public void bufferUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.ACTIVE;\n\n    recoveryInfo = new RecoveryInfo();\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.ACTIVE) return;\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Starting to buffer updates. \" + this);\n      }\n\n      // since we blocked updates, this synchronization shouldn't strictly be necessary.\n      synchronized (this) {\n        recoveryInfo.positionOfStart = tlog == null ? 0 : tlog.snapshot();\n      }\n\n      state = State.BUFFERING;\n\n      // currently, buffering is only called by recovery, meaning that there is most likely a gap in updates\n      operationFlags |= FLAG_GAP;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","sourceOld":"  public void bufferUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.ACTIVE;\n\n    recoveryInfo = new RecoveryInfo();\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.ACTIVE) return;\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Starting to buffer updates. \" + this);\n      }\n\n      // since we blocked updates, this synchronization shouldn't strictly be necessary.\n      synchronized (this) {\n        recoveryInfo.positionOfStart = tlog == null ? 0 : tlog.snapshot();\n      }\n\n      state = State.BUFFERING;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#bufferUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#bufferUpdates().mjava","sourceNew":"  public void bufferUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.ACTIVE;\n\n    recoveryInfo = new RecoveryInfo();\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.ACTIVE) return;\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Starting to buffer updates. \" + this);\n      }\n\n      // since we blocked updates, this synchronization shouldn't strictly be necessary.\n      synchronized (this) {\n        recoveryInfo.positionOfStart = tlog == null ? 0 : tlog.snapshot();\n      }\n\n      state = State.BUFFERING;\n\n      // currently, buffering is only called by recovery, meaning that there is most likely a gap in updates\n      operationFlags |= FLAG_GAP;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","sourceOld":"  public void bufferUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.ACTIVE;\n\n    recoveryInfo = new RecoveryInfo();\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.ACTIVE) return;\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Starting to buffer updates. \" + this);\n      }\n\n      // since we blocked updates, this synchronization shouldn't strictly be necessary.\n      synchronized (this) {\n        recoveryInfo.positionOfStart = tlog == null ? 0 : tlog.snapshot();\n      }\n\n      state = State.BUFFERING;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f49f14d65e01870e494b6f38fa88ea1a8011e4fe","date":1450213592,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#bufferUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#bufferUpdates().mjava","sourceNew":"  public void bufferUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.ACTIVE;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the distributed update processor\n    versionInfo.blockUpdates();\n    try {\n      if (state == State.BUFFERING) {\n        log.info(\"Restarting buffering. previous=\" + recoveryInfo);\n      } else if (state != State.ACTIVE) {\n        // we don't currently have support for handling other states\n        log.warn(\"Unexpected state for bufferUpdates: \" + state + \", Ignoring request.\");\n        return;\n      }\n\n      recoveryInfo = new RecoveryInfo();\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Starting to buffer updates. \" + this);\n      }\n\n      // since we blocked updates, this synchronization shouldn't strictly be necessary.\n      synchronized (this) {\n        recoveryInfo.positionOfStart = tlog == null ? 0 : tlog.snapshot();\n      }\n\n      state = State.BUFFERING;\n\n      // currently, buffering is only called by recovery, meaning that there is most likely a gap in updates\n      operationFlags |= FLAG_GAP;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","sourceOld":"  public void bufferUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.ACTIVE;\n\n    recoveryInfo = new RecoveryInfo();\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the update processor\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.ACTIVE) return;\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Starting to buffer updates. \" + this);\n      }\n\n      // since we blocked updates, this synchronization shouldn't strictly be necessary.\n      synchronized (this) {\n        recoveryInfo.positionOfStart = tlog == null ? 0 : tlog.snapshot();\n      }\n\n      state = State.BUFFERING;\n\n      // currently, buffering is only called by recovery, meaning that there is most likely a gap in updates\n      operationFlags |= FLAG_GAP;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1455c941cc4ce652efc776fc23471b0e499246f6","date":1528086751,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#bufferUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#bufferUpdates().mjava","sourceNew":"  public void bufferUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.ACTIVE;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the distributed update processor\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.ACTIVE && state != State.BUFFERING) {\n        // we don't currently have support for handling other states\n        log.warn(\"Unexpected state for bufferUpdates: \" + state + \", Ignoring request.\");\n        return;\n      }\n      dropBufferTlog();\n      deleteBufferLogs();\n\n      recoveryInfo = new RecoveryInfo();\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Starting to buffer updates. \" + this);\n      }\n\n      state = State.BUFFERING;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","sourceOld":"  public void bufferUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.ACTIVE;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the distributed update processor\n    versionInfo.blockUpdates();\n    try {\n      if (state == State.BUFFERING) {\n        log.info(\"Restarting buffering. previous=\" + recoveryInfo);\n      } else if (state != State.ACTIVE) {\n        // we don't currently have support for handling other states\n        log.warn(\"Unexpected state for bufferUpdates: \" + state + \", Ignoring request.\");\n        return;\n      }\n\n      recoveryInfo = new RecoveryInfo();\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Starting to buffer updates. \" + this);\n      }\n\n      // since we blocked updates, this synchronization shouldn't strictly be necessary.\n      synchronized (this) {\n        recoveryInfo.positionOfStart = tlog == null ? 0 : tlog.snapshot();\n      }\n\n      state = State.BUFFERING;\n\n      // currently, buffering is only called by recovery, meaning that there is most likely a gap in updates\n      operationFlags |= FLAG_GAP;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#bufferUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#bufferUpdates().mjava","sourceNew":"  public void bufferUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.ACTIVE;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the distributed update processor\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.ACTIVE && state != State.BUFFERING) {\n        // we don't currently have support for handling other states\n        log.warn(\"Unexpected state for bufferUpdates: \" + state + \", Ignoring request.\");\n        return;\n      }\n      dropBufferTlog();\n      deleteBufferLogs();\n\n      recoveryInfo = new RecoveryInfo();\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Starting to buffer updates. \" + this);\n      }\n\n      state = State.BUFFERING;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","sourceOld":"  public void bufferUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.ACTIVE;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the distributed update processor\n    versionInfo.blockUpdates();\n    try {\n      if (state == State.BUFFERING) {\n        log.info(\"Restarting buffering. previous=\" + recoveryInfo);\n      } else if (state != State.ACTIVE) {\n        // we don't currently have support for handling other states\n        log.warn(\"Unexpected state for bufferUpdates: \" + state + \", Ignoring request.\");\n        return;\n      }\n\n      recoveryInfo = new RecoveryInfo();\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Starting to buffer updates. \" + this);\n      }\n\n      // since we blocked updates, this synchronization shouldn't strictly be necessary.\n      synchronized (this) {\n        recoveryInfo.positionOfStart = tlog == null ? 0 : tlog.snapshot();\n      }\n\n      state = State.BUFFERING;\n\n      // currently, buffering is only called by recovery, meaning that there is most likely a gap in updates\n      operationFlags |= FLAG_GAP;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#bufferUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#bufferUpdates().mjava","sourceNew":"  public void bufferUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.ACTIVE;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the distributed update processor\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.ACTIVE && state != State.BUFFERING) {\n        // we don't currently have support for handling other states\n        log.warn(\"Unexpected state for bufferUpdates: \" + state + \", Ignoring request.\");\n        return;\n      }\n      dropBufferTlog();\n      deleteBufferLogs();\n\n      recoveryInfo = new RecoveryInfo();\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Starting to buffer updates. \" + this);\n      }\n\n      state = State.BUFFERING;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","sourceOld":"  public void bufferUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.ACTIVE;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the distributed update processor\n    versionInfo.blockUpdates();\n    try {\n      if (state == State.BUFFERING) {\n        log.info(\"Restarting buffering. previous=\" + recoveryInfo);\n      } else if (state != State.ACTIVE) {\n        // we don't currently have support for handling other states\n        log.warn(\"Unexpected state for bufferUpdates: \" + state + \", Ignoring request.\");\n        return;\n      }\n\n      recoveryInfo = new RecoveryInfo();\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Starting to buffer updates. \" + this);\n      }\n\n      // since we blocked updates, this synchronization shouldn't strictly be necessary.\n      synchronized (this) {\n        recoveryInfo.positionOfStart = tlog == null ? 0 : tlog.snapshot();\n      }\n\n      state = State.BUFFERING;\n\n      // currently, buffering is only called by recovery, meaning that there is most likely a gap in updates\n      operationFlags |= FLAG_GAP;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#bufferUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#bufferUpdates().mjava","sourceNew":"  public void bufferUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.ACTIVE;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the distributed update processor\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.ACTIVE && state != State.BUFFERING) {\n        // we don't currently have support for handling other states\n        log.warn(\"Unexpected state for bufferUpdates: {}, Ignoring request\", state);\n        return;\n      }\n      dropBufferTlog();\n      deleteBufferLogs();\n\n      recoveryInfo = new RecoveryInfo();\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Starting to buffer updates. {}\", this);\n      }\n\n      state = State.BUFFERING;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","sourceOld":"  public void bufferUpdates() {\n    // recovery trips this assert under some race - even when\n    // it checks the state first\n    // assert state == State.ACTIVE;\n\n    // block all updates to eliminate race conditions\n    // reading state and acting on it in the distributed update processor\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.ACTIVE && state != State.BUFFERING) {\n        // we don't currently have support for handling other states\n        log.warn(\"Unexpected state for bufferUpdates: \" + state + \", Ignoring request.\");\n        return;\n      }\n      dropBufferTlog();\n      deleteBufferLogs();\n\n      recoveryInfo = new RecoveryInfo();\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Starting to buffer updates. \" + this);\n      }\n\n      state = State.BUFFERING;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"740d649f013f07efbeb73ca854f106c60166e7c0":["1455c941cc4ce652efc776fc23471b0e499246f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["f49f14d65e01870e494b6f38fa88ea1a8011e4fe","1455c941cc4ce652efc776fc23471b0e499246f6"],"3599646b4d4c346cf74d334813488b8b337b5bf5":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","e99829242bceda4cf974ec0eb5d82d713615b3da"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f49f14d65e01870e494b6f38fa88ea1a8011e4fe":["e99829242bceda4cf974ec0eb5d82d713615b3da"],"e99829242bceda4cf974ec0eb5d82d713615b3da":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"f592209545c71895260367152601e9200399776d":["f49f14d65e01870e494b6f38fa88ea1a8011e4fe","1455c941cc4ce652efc776fc23471b0e499246f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"],"1455c941cc4ce652efc776fc23471b0e499246f6":["f49f14d65e01870e494b6f38fa88ea1a8011e4fe"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","3599646b4d4c346cf74d334813488b8b337b5bf5","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","e99829242bceda4cf974ec0eb5d82d713615b3da"],"f49f14d65e01870e494b6f38fa88ea1a8011e4fe":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","1455c941cc4ce652efc776fc23471b0e499246f6"],"e99829242bceda4cf974ec0eb5d82d713615b3da":["3599646b4d4c346cf74d334813488b8b337b5bf5","f49f14d65e01870e494b6f38fa88ea1a8011e4fe"],"f592209545c71895260367152601e9200399776d":[],"1455c941cc4ce652efc776fc23471b0e499246f6":["740d649f013f07efbeb73ca854f106c60166e7c0","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","b70042a8a492f7054d480ccdd2be9796510d4327","3599646b4d4c346cf74d334813488b8b337b5bf5","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}