{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#pruneBlockedQueue(DocumentsWriterDeleteQueue).mjava","commits":[{"id":"32f306edd62f81390a6e263e8b913f089f3e98a1","date":1305615519,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#pruneBlockedQueue(DocumentsWriterDeleteQueue).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Prunes the blockedQueue by removing all DWPT that are associated with the given flush queue. \n   */\n  private void pruneBlockedQueue(final DocumentsWriterDeleteQueue flushingQueue) {\n    Iterator<BlockedFlush> iterator = blockedFlushes.iterator();\n    while (iterator.hasNext()) {\n      BlockedFlush blockedFlush = iterator.next();\n      if (blockedFlush.dwpt.deleteQueue == flushingQueue) {\n        iterator.remove();\n        assert !flushingWriters.containsKey(blockedFlush.dwpt) : \"DWPT is already flushing\";\n        // Record the flushing DWPT to reduce flushBytes in doAfterFlush\n        flushingWriters.put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n        // don't decr pending here - its already done when DWPT is blocked\n        flushQueue.add(blockedFlush.dwpt);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#pruneBlockedQueue(DocumentsWriterDeleteQueue).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Prunes the blockedQueue by removing all DWPT that are associated with the given flush queue. \n   */\n  private void pruneBlockedQueue(final DocumentsWriterDeleteQueue flushingQueue) {\n    Iterator<BlockedFlush> iterator = blockedFlushes.iterator();\n    while (iterator.hasNext()) {\n      BlockedFlush blockedFlush = iterator.next();\n      if (blockedFlush.dwpt.deleteQueue == flushingQueue) {\n        iterator.remove();\n        assert !flushingWriters.containsKey(blockedFlush.dwpt) : \"DWPT is already flushing\";\n        // Record the flushing DWPT to reduce flushBytes in doAfterFlush\n        flushingWriters.put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n        // don't decr pending here - its already done when DWPT is blocked\n        flushQueue.add(blockedFlush.dwpt);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#pruneBlockedQueue(DocumentsWriterDeleteQueue).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Prunes the blockedQueue by removing all DWPT that are associated with the given flush queue. \n   */\n  private void pruneBlockedQueue(final DocumentsWriterDeleteQueue flushingQueue) {\n    Iterator<BlockedFlush> iterator = blockedFlushes.iterator();\n    while (iterator.hasNext()) {\n      BlockedFlush blockedFlush = iterator.next();\n      if (blockedFlush.dwpt.deleteQueue == flushingQueue) {\n        iterator.remove();\n        assert !flushingWriters.containsKey(blockedFlush.dwpt) : \"DWPT is already flushing\";\n        // Record the flushing DWPT to reduce flushBytes in doAfterFlush\n        flushingWriters.put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n        // don't decr pending here - its already done when DWPT is blocked\n        flushQueue.add(blockedFlush.dwpt);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#pruneBlockedQueue(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#pruneBlockedQueue(DocumentsWriterDeleteQueue).mjava","sourceNew":"  /**\n   * Prunes the blockedQueue by removing all DWPT that are associated with the given flush queue. \n   */\n  private void pruneBlockedQueue(final DocumentsWriterDeleteQueue flushingQueue) {\n    Iterator<BlockedFlush> iterator = blockedFlushes.iterator();\n    while (iterator.hasNext()) {\n      BlockedFlush blockedFlush = iterator.next();\n      if (blockedFlush.dwpt.deleteQueue == flushingQueue) {\n        iterator.remove();\n        assert !flushingWriters.containsKey(blockedFlush.dwpt) : \"DWPT is already flushing\";\n        // Record the flushing DWPT to reduce flushBytes in doAfterFlush\n        flushingWriters.put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n        // don't decr pending here - its already done when DWPT is blocked\n        flushQueue.add(blockedFlush.dwpt);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Prunes the blockedQueue by removing all DWPT that are associated with the given flush queue. \n   */\n  private void pruneBlockedQueue(final DocumentsWriterDeleteQueue flushingQueue) {\n    Iterator<BlockedFlush> iterator = blockedFlushes.iterator();\n    while (iterator.hasNext()) {\n      BlockedFlush blockedFlush = iterator.next();\n      if (blockedFlush.dwpt.deleteQueue == flushingQueue) {\n        iterator.remove();\n        assert !flushingWriters.containsKey(blockedFlush.dwpt) : \"DWPT is already flushing\";\n        // Record the flushing DWPT to reduce flushBytes in doAfterFlush\n        flushingWriters.put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n        // don't decr pending here - its already done when DWPT is blocked\n        flushQueue.add(blockedFlush.dwpt);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32f306edd62f81390a6e263e8b913f089f3e98a1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["32f306edd62f81390a6e263e8b913f089f3e98a1"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32f306edd62f81390a6e263e8b913f089f3e98a1"],"32f306edd62f81390a6e263e8b913f089f3e98a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","32f306edd62f81390a6e263e8b913f089f3e98a1"],"32f306edd62f81390a6e263e8b913f089f3e98a1":["c3a8a449466c1ff7ce2274fe73dab487256964b4","3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}