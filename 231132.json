{"path":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext,ReturnFields).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext,ReturnFields).mjava","pathOld":"solr/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext,ReturnFields).mjava","sourceNew":"  public final void writeDocuments(String name, ResultContext res, ReturnFields fields ) throws IOException {\n    DocList ids = res.docs;\n    TransformContext context = new TransformContext();\n    context.query = res.query;\n    context.wantsScores = fields.wantsScore() && ids.hasScores();\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(), \n        context.wantsScores ? new Float(ids.maxScore()) : null );\n    \n    DocTransformer transformer = fields.getTransformer();\n    context.searcher = req.getSearcher();\n    context.iterator = ids.iterator();\n    if( transformer != null ) {\n      transformer.setContext( context );\n    }\n    int sz = ids.size();\n    Set<String> fnames = fields.getLuceneFieldNames();\n    for (int i=0; i<sz; i++) {\n      int id = context.iterator.nextDoc();\n      Document doc = context.searcher.doc(id, fnames);\n      SolrDocument sdoc = toSolrDocument( doc );\n      if( transformer != null ) {\n        transformer.transform( sdoc, id );\n      }\n      writeSolrDocument( null, sdoc, returnFields, i );\n    }\n    if( transformer != null ) {\n      transformer.setContext( null );\n    }\n    writeEndDocumentList();\n  }\n\n","sourceOld":"  public final void writeDocuments(String name, ResultContext res, ReturnFields fields ) throws IOException {\n    DocList ids = res.docs;\n    TransformContext context = new TransformContext();\n    context.query = res.query;\n    context.wantsScores = fields.wantsScore() && ids.hasScores();\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(), \n        context.wantsScores ? new Float(ids.maxScore()) : null );\n    \n    DocTransformer transformer = fields.getTransformer();\n    context.searcher = req.getSearcher();\n    context.iterator = ids.iterator();\n    if( transformer != null ) {\n      transformer.setContext( context );\n    }\n    int sz = ids.size();\n    Set<String> fnames = fields.getLuceneFieldNames();\n    for (int i=0; i<sz; i++) {\n      int id = context.iterator.nextDoc();\n      Document doc = context.searcher.doc(id, fnames);\n      SolrDocument sdoc = toSolrDocument( doc );\n      if( transformer != null ) {\n        transformer.transform( sdoc, id );\n      }\n      writeSolrDocument( null, sdoc, returnFields, i );\n    }\n    if( transformer != null ) {\n      transformer.setContext( null );\n    }\n    writeEndDocumentList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext,ReturnFields).mjava","pathOld":"solr/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext,ReturnFields).mjava","sourceNew":"  public final void writeDocuments(String name, ResultContext res, ReturnFields fields ) throws IOException {\n    DocList ids = res.docs;\n    TransformContext context = new TransformContext();\n    context.query = res.query;\n    context.wantsScores = fields.wantsScore() && ids.hasScores();\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(), \n        context.wantsScores ? new Float(ids.maxScore()) : null );\n    \n    DocTransformer transformer = fields.getTransformer();\n    context.searcher = req.getSearcher();\n    context.iterator = ids.iterator();\n    if( transformer != null ) {\n      transformer.setContext( context );\n    }\n    int sz = ids.size();\n    Set<String> fnames = fields.getLuceneFieldNames();\n    for (int i=0; i<sz; i++) {\n      int id = context.iterator.nextDoc();\n      Document doc = context.searcher.doc(id, fnames);\n      SolrDocument sdoc = toSolrDocument( doc );\n      if( transformer != null ) {\n        transformer.transform( sdoc, id );\n      }\n      writeSolrDocument( null, sdoc, returnFields, i );\n    }\n    if( transformer != null ) {\n      transformer.setContext( null );\n    }\n    writeEndDocumentList();\n  }\n\n","sourceOld":"  public final void writeDocuments(String name, ResultContext res, ReturnFields fields ) throws IOException {\n    DocList ids = res.docs;\n    TransformContext context = new TransformContext();\n    context.query = res.query;\n    context.wantsScores = fields.wantsScore() && ids.hasScores();\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(), \n        context.wantsScores ? new Float(ids.maxScore()) : null );\n    \n    DocTransformer transformer = fields.getTransformer();\n    context.searcher = req.getSearcher();\n    context.iterator = ids.iterator();\n    if( transformer != null ) {\n      transformer.setContext( context );\n    }\n    int sz = ids.size();\n    Set<String> fnames = fields.getLuceneFieldNames();\n    for (int i=0; i<sz; i++) {\n      int id = context.iterator.nextDoc();\n      Document doc = context.searcher.doc(id, fnames);\n      SolrDocument sdoc = toSolrDocument( doc );\n      if( transformer != null ) {\n        transformer.transform( sdoc, id );\n      }\n      writeSolrDocument( null, sdoc, returnFields, i );\n    }\n    if( transformer != null ) {\n      transformer.setContext( null );\n    }\n    writeEndDocumentList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext,ReturnFields).mjava","pathOld":"solr/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext,ReturnFields).mjava","sourceNew":"  public final void writeDocuments(String name, ResultContext res, ReturnFields fields ) throws IOException {\n    DocList ids = res.docs;\n    TransformContext context = new TransformContext();\n    context.query = res.query;\n    context.wantsScores = fields.wantsScore() && ids.hasScores();\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(), \n        context.wantsScores ? new Float(ids.maxScore()) : null );\n    \n    DocTransformer transformer = fields.getTransformer();\n    context.searcher = req.getSearcher();\n    context.iterator = ids.iterator();\n    if( transformer != null ) {\n      transformer.setContext( context );\n    }\n    int sz = ids.size();\n    Set<String> fnames = fields.getLuceneFieldNames();\n    for (int i=0; i<sz; i++) {\n      int id = context.iterator.nextDoc();\n      Document doc = context.searcher.doc(id, fnames);\n      SolrDocument sdoc = toSolrDocument( doc );\n      if( transformer != null ) {\n        transformer.transform( sdoc, id );\n      }\n      writeSolrDocument( null, sdoc, returnFields, i );\n    }\n    if( transformer != null ) {\n      transformer.setContext( null );\n    }\n    writeEndDocumentList();\n  }\n\n","sourceOld":"  public final void writeDocuments(String name, ResultContext res, ReturnFields fields ) throws IOException {\n    DocList ids = res.docs;\n    TransformContext context = new TransformContext();\n    context.query = res.query;\n    context.wantsScores = fields.wantsScore() && ids.hasScores();\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(), \n        context.wantsScores ? new Float(ids.maxScore()) : null );\n    \n    DocTransformer transformer = fields.getTransformer();\n    context.searcher = req.getSearcher();\n    context.iterator = ids.iterator();\n    if( transformer != null ) {\n      transformer.setContext( context );\n    }\n    int sz = ids.size();\n    Set<String> fnames = fields.getLuceneFieldNames();\n    for (int i=0; i<sz; i++) {\n      int id = context.iterator.nextDoc();\n      Document doc = context.searcher.doc(id, fnames);\n      SolrDocument sdoc = toSolrDocument( doc );\n      if( transformer != null ) {\n        transformer.transform( sdoc, id );\n      }\n      writeSolrDocument( null, sdoc, returnFields, i );\n    }\n    if( transformer != null ) {\n      transformer.setContext( null );\n    }\n    writeEndDocumentList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b68df8b95f3ea758a8dc21cb20a50a01db973e8e","date":1321650433,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext,ReturnFields).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext,ReturnFields).mjava","sourceNew":"  public final void writeDocuments(String name, ResultContext res, ReturnFields fields ) throws IOException {\n    DocList ids = res.docs;\n    TransformContext context = new TransformContext();\n    context.query = res.query;\n    context.wantsScores = fields.wantsScore() && ids.hasScores();\n    context.req = req;\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(), \n        context.wantsScores ? new Float(ids.maxScore()) : null );\n    \n    DocTransformer transformer = fields.getTransformer();\n    context.searcher = req.getSearcher();\n    context.iterator = ids.iterator();\n    if( transformer != null ) {\n      transformer.setContext( context );\n    }\n    int sz = ids.size();\n    Set<String> fnames = fields.getLuceneFieldNames();\n    for (int i=0; i<sz; i++) {\n      int id = context.iterator.nextDoc();\n      Document doc = context.searcher.doc(id, fnames);\n      SolrDocument sdoc = toSolrDocument( doc );\n      if( transformer != null ) {\n        transformer.transform( sdoc, id);\n      }\n      writeSolrDocument( null, sdoc, returnFields, i );\n    }\n    if( transformer != null ) {\n      transformer.setContext( null );\n    }\n    writeEndDocumentList();\n  }\n\n","sourceOld":"  public final void writeDocuments(String name, ResultContext res, ReturnFields fields ) throws IOException {\n    DocList ids = res.docs;\n    TransformContext context = new TransformContext();\n    context.query = res.query;\n    context.wantsScores = fields.wantsScore() && ids.hasScores();\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(), \n        context.wantsScores ? new Float(ids.maxScore()) : null );\n    \n    DocTransformer transformer = fields.getTransformer();\n    context.searcher = req.getSearcher();\n    context.iterator = ids.iterator();\n    if( transformer != null ) {\n      transformer.setContext( context );\n    }\n    int sz = ids.size();\n    Set<String> fnames = fields.getLuceneFieldNames();\n    for (int i=0; i<sz; i++) {\n      int id = context.iterator.nextDoc();\n      Document doc = context.searcher.doc(id, fnames);\n      SolrDocument sdoc = toSolrDocument( doc );\n      if( transformer != null ) {\n        transformer.transform( sdoc, id );\n      }\n      writeSolrDocument( null, sdoc, returnFields, i );\n    }\n    if( transformer != null ) {\n      transformer.setContext( null );\n    }\n    writeEndDocumentList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext,ReturnFields).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext,ReturnFields).mjava","sourceNew":"  public final void writeDocuments(String name, ResultContext res, ReturnFields fields ) throws IOException {\n    DocList ids = res.docs;\n    TransformContext context = new TransformContext();\n    context.query = res.query;\n    context.wantsScores = fields.wantsScore() && ids.hasScores();\n    context.req = req;\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(), \n        context.wantsScores ? new Float(ids.maxScore()) : null );\n    \n    DocTransformer transformer = fields.getTransformer();\n    context.searcher = req.getSearcher();\n    context.iterator = ids.iterator();\n    if( transformer != null ) {\n      transformer.setContext( context );\n    }\n    int sz = ids.size();\n    Set<String> fnames = fields.getLuceneFieldNames();\n    for (int i=0; i<sz; i++) {\n      int id = context.iterator.nextDoc();\n      StoredDocument doc = context.searcher.doc(id, fnames);\n      SolrDocument sdoc = toSolrDocument( doc );\n      if( transformer != null ) {\n        transformer.transform( sdoc, id);\n      }\n      writeSolrDocument( null, sdoc, returnFields, i );\n    }\n    if( transformer != null ) {\n      transformer.setContext( null );\n    }\n    writeEndDocumentList();\n  }\n\n","sourceOld":"  public final void writeDocuments(String name, ResultContext res, ReturnFields fields ) throws IOException {\n    DocList ids = res.docs;\n    TransformContext context = new TransformContext();\n    context.query = res.query;\n    context.wantsScores = fields.wantsScore() && ids.hasScores();\n    context.req = req;\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(), \n        context.wantsScores ? new Float(ids.maxScore()) : null );\n    \n    DocTransformer transformer = fields.getTransformer();\n    context.searcher = req.getSearcher();\n    context.iterator = ids.iterator();\n    if( transformer != null ) {\n      transformer.setContext( context );\n    }\n    int sz = ids.size();\n    Set<String> fnames = fields.getLuceneFieldNames();\n    for (int i=0; i<sz; i++) {\n      int id = context.iterator.nextDoc();\n      Document doc = context.searcher.doc(id, fnames);\n      SolrDocument sdoc = toSolrDocument( doc );\n      if( transformer != null ) {\n        transformer.transform( sdoc, id);\n      }\n      writeSolrDocument( null, sdoc, returnFields, i );\n    }\n    if( transformer != null ) {\n      transformer.setContext( null );\n    }\n    writeEndDocumentList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext,ReturnFields).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext,ReturnFields).mjava","sourceNew":"  public final void writeDocuments(String name, ResultContext res, ReturnFields fields ) throws IOException {\n    DocList ids = res.docs;\n    TransformContext context = new TransformContext();\n    context.query = res.query;\n    context.wantsScores = fields.wantsScore() && ids.hasScores();\n    context.req = req;\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(), \n        context.wantsScores ? new Float(ids.maxScore()) : null );\n    \n    DocTransformer transformer = fields.getTransformer();\n    context.searcher = req.getSearcher();\n    context.iterator = ids.iterator();\n    if( transformer != null ) {\n      transformer.setContext( context );\n    }\n    int sz = ids.size();\n    Set<String> fnames = fields.getLuceneFieldNames();\n    for (int i=0; i<sz; i++) {\n      int id = context.iterator.nextDoc();\n      StoredDocument doc = context.searcher.doc(id, fnames);\n      SolrDocument sdoc = toSolrDocument( doc );\n      if( transformer != null ) {\n        transformer.transform( sdoc, id);\n      }\n      writeSolrDocument( null, sdoc, returnFields, i );\n    }\n    if( transformer != null ) {\n      transformer.setContext( null );\n    }\n    writeEndDocumentList();\n  }\n\n","sourceOld":"  public final void writeDocuments(String name, ResultContext res, ReturnFields fields ) throws IOException {\n    DocList ids = res.docs;\n    TransformContext context = new TransformContext();\n    context.query = res.query;\n    context.wantsScores = fields.wantsScore() && ids.hasScores();\n    context.req = req;\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(), \n        context.wantsScores ? new Float(ids.maxScore()) : null );\n    \n    DocTransformer transformer = fields.getTransformer();\n    context.searcher = req.getSearcher();\n    context.iterator = ids.iterator();\n    if( transformer != null ) {\n      transformer.setContext( context );\n    }\n    int sz = ids.size();\n    Set<String> fnames = fields.getLuceneFieldNames();\n    for (int i=0; i<sz; i++) {\n      int id = context.iterator.nextDoc();\n      Document doc = context.searcher.doc(id, fnames);\n      SolrDocument sdoc = toSolrDocument( doc );\n      if( transformer != null ) {\n        transformer.transform( sdoc, id);\n      }\n      writeSolrDocument( null, sdoc, returnFields, i );\n    }\n    if( transformer != null ) {\n      transformer.setContext( null );\n    }\n    writeEndDocumentList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9","date":1434467834,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext,ReturnFields).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext,ReturnFields).mjava","sourceNew":"  public final void writeDocuments(String name, ResultContext res, ReturnFields fields ) throws IOException {\n    DocList ids = res.docs;\n    DocsStreamer docsStreamer = new DocsStreamer(res.docs,res.query, req, fields);\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(),\n        docsStreamer.hasScores() ? new Float(ids.maxScore()) : null);\n\n    while (docsStreamer.hasNext()) {\n      writeSolrDocument(null, docsStreamer.next(), returnFields, docsStreamer.currentIndex());\n    }\n    writeEndDocumentList();\n  }\n\n","sourceOld":"  public final void writeDocuments(String name, ResultContext res, ReturnFields fields ) throws IOException {\n    DocList ids = res.docs;\n    TransformContext context = new TransformContext();\n    context.query = res.query;\n    context.wantsScores = fields.wantsScore() && ids.hasScores();\n    context.req = req;\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(), \n        context.wantsScores ? new Float(ids.maxScore()) : null );\n    \n    DocTransformer transformer = fields.getTransformer();\n    context.searcher = req.getSearcher();\n    context.iterator = ids.iterator();\n    if( transformer != null ) {\n      transformer.setContext( context );\n    }\n    int sz = ids.size();\n    Set<String> fnames = fields.getLuceneFieldNames();\n    for (int i=0; i<sz; i++) {\n      int id = context.iterator.nextDoc();\n      StoredDocument doc = context.searcher.doc(id, fnames);\n      SolrDocument sdoc = toSolrDocument( doc );\n      if( transformer != null ) {\n        transformer.transform( sdoc, id);\n      }\n      writeSolrDocument( null, sdoc, returnFields, i );\n    }\n    if( transformer != null ) {\n      transformer.setContext( null );\n    }\n    writeEndDocumentList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","date":1440797084,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext,ReturnFields).mjava","sourceNew":"  public final void writeDocuments(String name, ResultContext res) throws IOException {\n    DocList ids = res.getDocList();\n    Iterator<SolrDocument> docsStreamer = res.getProcessedDocuments();\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(),\n        res.wantsScores() ? new Float(ids.maxScore()) : null);\n\n    int idx = 0;\n    while (docsStreamer.hasNext()) {\n      writeSolrDocument(null, docsStreamer.next(), res.getReturnFields(), idx);\n      idx++;\n    }\n    writeEndDocumentList();\n  }\n\n","sourceOld":"  public final void writeDocuments(String name, ResultContext res, ReturnFields fields ) throws IOException {\n    DocList ids = res.docs;\n    DocsStreamer docsStreamer = new DocsStreamer(res.docs,res.query, req, fields);\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(),\n        docsStreamer.hasScores() ? new Float(ids.maxScore()) : null);\n\n    while (docsStreamer.hasNext()) {\n      writeSolrDocument(null, docsStreamer.next(), returnFields, docsStreamer.currentIndex());\n    }\n    writeEndDocumentList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b68df8b95f3ea758a8dc21cb20a50a01db973e8e":["c26f00b574427b55127e869b935845554afde1fa"],"1d028314cced5858683a1bb4741423d0f934257b":["b68df8b95f3ea758a8dc21cb20a50a01db973e8e","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["1d028314cced5858683a1bb4741423d0f934257b"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["b68df8b95f3ea758a8dc21cb20a50a01db973e8e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"]},"commit2Childs":{"b68df8b95f3ea758a8dc21cb20a50a01db973e8e":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"1d028314cced5858683a1bb4741423d0f934257b":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["b68df8b95f3ea758a8dc21cb20a50a01db973e8e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}