{"path":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","sourceNew":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","sourceOld":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","sourceNew":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","sourceOld":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","sourceNew":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","sourceOld":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2639ce99440b7a55fa879228f7e66c337443e77a","date":1317007442,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","sourceNew":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","sourceOld":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","sourceNew":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","sourceOld":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","sourceNew":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","sourceOld":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21591922fb4db3e2a6ffb2cb342b3d61c053a973","date":1340761680,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","sourceNew":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","sourceOld":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","sourceNew":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","sourceOld":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilterFactory#testCustomTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","sourceNew":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","sourceOld":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10ddcde450bb525af01593bf6aa68f1f67e81b0d","date":1343104612,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilterFactory#testCustomTypes().mjava","sourceNew":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","sourceOld":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","sourceNew":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    args = new HashMap<String,String>();\n    // use a custom type mapping\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    args.put(\"types\", \"wdftypes.txt\");\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","sourceOld":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","sourceNew":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(whitespaceMockTokenizer(testText));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(whitespaceMockTokenizer(\"foo\\u200Dbar\"));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    args = new HashMap<String,String>();\n    // use a custom type mapping\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    args.put(\"types\", \"wdftypes.txt\");\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(whitespaceMockTokenizer(testText));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(whitespaceMockTokenizer(\"foo\\u200Dbar\"));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","sourceOld":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    args = new HashMap<String,String>();\n    // use a custom type mapping\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    args.put(\"types\", \"wdftypes.txt\");\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(testText), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new MockTokenizer(new StringReader(\"foo\\u200Dbar\"), MockTokenizer.WHITESPACE, false));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","sourceNew":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    Map<String,String> args = new HashMap<>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(whitespaceMockTokenizer(testText));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(whitespaceMockTokenizer(\"foo\\u200Dbar\"));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    args = new HashMap<>();\n    // use a custom type mapping\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    args.put(\"types\", \"wdftypes.txt\");\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(whitespaceMockTokenizer(testText));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(whitespaceMockTokenizer(\"foo\\u200Dbar\"));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","sourceOld":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(whitespaceMockTokenizer(testText));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(whitespaceMockTokenizer(\"foo\\u200Dbar\"));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    args = new HashMap<String,String>();\n    // use a custom type mapping\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    args.put(\"types\", \"wdftypes.txt\");\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(whitespaceMockTokenizer(testText));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(whitespaceMockTokenizer(\"foo\\u200Dbar\"));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c85fa43e6918808743daa7847ba0264373af687f","date":1395166336,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","sourceNew":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    Map<String,String> args = new HashMap<>();\n    args.put(\"luceneMatchVersion\", TEST_VERSION_CURRENT.toString());\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(whitespaceMockTokenizer(testText));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"540000\", \"400\", \"00\", \"at\", \"25\", \"interest\", \"interestrate\", \"rate\" });\n\n    ts = factoryDefault.create(whitespaceMockTokenizer(\"foo\\u200Dbar\"));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"foobar\", \"bar\" });\n\n    \n    /* custom behavior */\n    args = new HashMap<>();\n    // use a custom type mapping\n    args.put(\"luceneMatchVersion\", TEST_VERSION_CURRENT.toString());\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    args.put(\"types\", \"wdftypes.txt\");\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(whitespaceMockTokenizer(testText));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"interestrate\", \"rate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(whitespaceMockTokenizer(\"foo\\u200Dbar\"));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","sourceOld":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    Map<String,String> args = new HashMap<>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(whitespaceMockTokenizer(testText));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(whitespaceMockTokenizer(\"foo\\u200Dbar\"));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    args = new HashMap<>();\n    // use a custom type mapping\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    args.put(\"types\", \"wdftypes.txt\");\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(whitespaceMockTokenizer(testText));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(whitespaceMockTokenizer(\"foo\\u200Dbar\"));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","bugFix":["606b3c3bf20fa12fc44a5bb6a9cba3eca1af28c7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19e497fe4da591a79332da97681b8017d9c61165","date":1409030374,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","sourceNew":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    Map<String,String> args = new HashMap<>();\n    args.put(\"luceneMatchVersion\", Version.LATEST.toString());\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(whitespaceMockTokenizer(testText));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"540000\", \"400\", \"00\", \"at\", \"25\", \"interest\", \"interestrate\", \"rate\" });\n\n    ts = factoryDefault.create(whitespaceMockTokenizer(\"foo\\u200Dbar\"));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"foobar\", \"bar\" });\n\n    \n    /* custom behavior */\n    args = new HashMap<>();\n    // use a custom type mapping\n    args.put(\"luceneMatchVersion\", Version.LATEST.toString());\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    args.put(\"types\", \"wdftypes.txt\");\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(whitespaceMockTokenizer(testText));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"interestrate\", \"rate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(whitespaceMockTokenizer(\"foo\\u200Dbar\"));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","sourceOld":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    Map<String,String> args = new HashMap<>();\n    args.put(\"luceneMatchVersion\", TEST_VERSION_CURRENT.toString());\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(whitespaceMockTokenizer(testText));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"540000\", \"400\", \"00\", \"at\", \"25\", \"interest\", \"interestrate\", \"rate\" });\n\n    ts = factoryDefault.create(whitespaceMockTokenizer(\"foo\\u200Dbar\"));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"foobar\", \"bar\" });\n\n    \n    /* custom behavior */\n    args = new HashMap<>();\n    // use a custom type mapping\n    args.put(\"luceneMatchVersion\", TEST_VERSION_CURRENT.toString());\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    args.put(\"types\", \"wdftypes.txt\");\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(whitespaceMockTokenizer(testText));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"interestrate\", \"rate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(whitespaceMockTokenizer(\"foo\\u200Dbar\"));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","sourceNew":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    ResourceLoader loader = new SolrResourceLoader(TEST_PATH().resolve(\"collection1\"));\n    Map<String,String> args = new HashMap<>();\n    args.put(\"luceneMatchVersion\", Version.LATEST.toString());\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(whitespaceMockTokenizer(testText));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"540000\", \"400\", \"00\", \"at\", \"25\", \"interest\", \"interestrate\", \"rate\" });\n\n    ts = factoryDefault.create(whitespaceMockTokenizer(\"foo\\u200Dbar\"));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"foobar\", \"bar\" });\n\n    \n    /* custom behavior */\n    args = new HashMap<>();\n    // use a custom type mapping\n    args.put(\"luceneMatchVersion\", Version.LATEST.toString());\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    args.put(\"types\", \"wdftypes.txt\");\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(whitespaceMockTokenizer(testText));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"interestrate\", \"rate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(whitespaceMockTokenizer(\"foo\\u200Dbar\"));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","sourceOld":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    Map<String,String> args = new HashMap<>();\n    args.put(\"luceneMatchVersion\", Version.LATEST.toString());\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(whitespaceMockTokenizer(testText));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"540000\", \"400\", \"00\", \"at\", \"25\", \"interest\", \"interestrate\", \"rate\" });\n\n    ts = factoryDefault.create(whitespaceMockTokenizer(\"foo\\u200Dbar\"));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"foobar\", \"bar\" });\n\n    \n    /* custom behavior */\n    args = new HashMap<>();\n    // use a custom type mapping\n    args.put(\"luceneMatchVersion\", Version.LATEST.toString());\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    args.put(\"types\", \"wdftypes.txt\");\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(whitespaceMockTokenizer(testText));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"interestrate\", \"rate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(whitespaceMockTokenizer(\"foo\\u200Dbar\"));\n    BaseTokenStreamTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"21591922fb4db3e2a6ffb2cb342b3d61c053a973":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"2639ce99440b7a55fa879228f7e66c337443e77a":["c26f00b574427b55127e869b935845554afde1fa"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2639ce99440b7a55fa879228f7e66c337443e77a","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"10ddcde450bb525af01593bf6aa68f1f67e81b0d":["3241e06e642196396b80bb293acd9c0814d079e0"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["2639ce99440b7a55fa879228f7e66c337443e77a"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["21591922fb4db3e2a6ffb2cb342b3d61c053a973"],"19e497fe4da591a79332da97681b8017d9c61165":["c85fa43e6918808743daa7847ba0264373af687f"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["19e497fe4da591a79332da97681b8017d9c61165"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","21591922fb4db3e2a6ffb2cb342b3d61c053a973"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c85fa43e6918808743daa7847ba0264373af687f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3241e06e642196396b80bb293acd9c0814d079e0":["21591922fb4db3e2a6ffb2cb342b3d61c053a973"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a626ec4d1c92e59fe390724d6220081047b03ce7"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c85fa43e6918808743daa7847ba0264373af687f"],"21591922fb4db3e2a6ffb2cb342b3d61c053a973":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd","fe33227f6805edab2036cbb80645cc4e2d1fa424","3241e06e642196396b80bb293acd9c0814d079e0"],"2639ce99440b7a55fa879228f7e66c337443e77a":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"10ddcde450bb525af01593bf6aa68f1f67e81b0d":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["21591922fb4db3e2a6ffb2cb342b3d61c053a973","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c26f00b574427b55127e869b935845554afde1fa":["2639ce99440b7a55fa879228f7e66c337443e77a"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"19e497fe4da591a79332da97681b8017d9c61165":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"c85fa43e6918808743daa7847ba0264373af687f":["19e497fe4da591a79332da97681b8017d9c61165"],"3241e06e642196396b80bb293acd9c0814d079e0":["10ddcde450bb525af01593bf6aa68f1f67e81b0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","10ddcde450bb525af01593bf6aa68f1f67e81b0d","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}