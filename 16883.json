{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","commits":[{"id":"67f215f0e4d5c92f5d96ab7675170115b0983501","date":1492649385,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setupTest() {\n    actionCreated = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    eventRef = new AtomicReference<>();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7699e9ae4550ba2a55335a64ae7de9d5d9de39e","date":1493894873,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws KeeperException, InterruptedException, IOException, SolrServerException {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionCreated = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    eventRef = new AtomicReference<>();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    this.path = \"/admin/autoscaling\";\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() {\n    actionCreated = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    eventRef = new AtomicReference<>();\n  }\n\n","bugFix":null,"bugIntro":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7aa2c1715ef9a80383edea1048655da291ed9b8f","date":1495196478,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionCreated = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    eventRef = new AtomicReference<>();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    this.path = \"/admin/autoscaling\";\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws KeeperException, InterruptedException, IOException, SolrServerException {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionCreated = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    eventRef = new AtomicReference<>();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    this.path = \"/admin/autoscaling\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d64e4b13048b3a4c03a20959037e5fb858764a2f","date":1495651323,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    eventRef = new AtomicReference<>();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    this.path = \"/admin/autoscaling\";\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionCreated = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    eventRef = new AtomicReference<>();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    this.path = \"/admin/autoscaling\";\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e2f4717538692c396242d8b00ae0001626caebdd","date":1495700710,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    eventRef = new AtomicReference<>();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    this.path = \"/admin/autoscaling\";\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionCreated = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    eventRef = new AtomicReference<>();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    this.path = \"/admin/autoscaling\";\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"464244264804e3f981bf1fb4b732516d8d62dbc2","date":1495736161,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    eventRef = new AtomicReference<>();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    this.path = \"/admin/autoscaling\";\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    eventRef = new AtomicReference<>();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    this.path = \"/admin/autoscaling\";\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5531f16a602ef350b6c9adfb08ebaa13a60fe3db","date":1495756318,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    eventRef = new AtomicReference<>();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    this.path = \"/admin/autoscaling\";\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    eventRef = new AtomicReference<>();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    this.path = \"/admin/autoscaling\";\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c32a8448145a74a8902798f2e63e322827757ff2","date":1496834422,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    this.path = \"/admin/autoscaling\";\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    eventRef = new AtomicReference<>();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    this.path = \"/admin/autoscaling\";\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"664ff2b928393480d9655010aa700656b0fcade0","date":1496842764,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    this.path = \"/admin/autoscaling\";\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    eventRef = new AtomicReference<>();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    this.path = \"/admin/autoscaling\";\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2480cf60350a342e5e57439f3e71092fabc364a2","date":1499215962,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    this.path = \"/admin/autoscaling\";\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0d9c88546c1a130d50b56981790d87a308daffd","date":1499234617,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    this.path = \"/admin/autoscaling\";\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4450528f86982f38cda0ddd6acb2ac272c8bd369","date":1509640513,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15ba547dfc0dd0b670e678cb3db8e5d27c694420","date":1511865512,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c","date":1512481565,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","bugFix":["a7699e9ae4550ba2a55335a64ae7de9d5d9de39e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9ccfe45460d496c5e5e1b70396521dac842d966","date":1516798975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","date":1516881857,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e3e55745c6667006f67aaa604466b9974425f4","date":1518776937,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread)overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    // restart Overseer. Even though we reset the autoscaling config some already running\n    // trigger threads may still continue to execute and produce spurious events\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32761ed493217e1842ce7b57792ead0daf001b12","date":1519230998,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread)overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    cluster.deleteAllCollections();\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    // restart Overseer. Even though we reset the autoscaling config some already running\n    // trigger threads may still continue to execute and produce spurious events\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread)overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    // restart Overseer. Even though we reset the autoscaling config some already running\n    // trigger threads may still continue to execute and produce spurious events\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bdd2a8e3062fc9c4b2cd4c34403648d0e622a08e","date":1520240230,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    // ensure that exactly 2 jetty nodes are running\n    int numJetties = cluster.getJettySolrRunners().size();\n    log.info(\"Found {} jetty instances running\", numJetties);\n    for (int i = 2; i < numJetties; i++)  {\n      int r = random().nextInt(cluster.getJettySolrRunners().size());\n      log.info(\"Shutdown extra jetty instance at port {}\", cluster.getJettySolrRunner(r).getLocalPort());\n      cluster.stopJettySolrRunner(r);\n    }\n    for (int i = cluster.getJettySolrRunners().size(); i < 2; i++) {\n      // start jetty instances\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(5);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread)overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    cluster.deleteAllCollections();\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    // restart Overseer. Even though we reset the autoscaling config some already running\n    // trigger threads may still continue to execute and produce spurious events\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread)overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    cluster.deleteAllCollections();\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    // restart Overseer. Even though we reset the autoscaling config some already running\n    // trigger threads may still continue to execute and produce spurious events\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ebf2a4e9fec7a202108e0897879cc366c3da296","date":1522408355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    // ensure that exactly 2 jetty nodes are running\n    int numJetties = cluster.getJettySolrRunners().size();\n    log.info(\"Found {} jetty instances running\", numJetties);\n    for (int i = 2; i < numJetties; i++)  {\n      int r = random().nextInt(cluster.getJettySolrRunners().size());\n      log.info(\"Shutdown extra jetty instance at port {}\", cluster.getJettySolrRunner(r).getLocalPort());\n      cluster.stopJettySolrRunner(r);\n    }\n    for (int i = cluster.getJettySolrRunners().size(); i < 2; i++) {\n      // start jetty instances\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(5);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread)overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    cluster.deleteAllCollections();\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    // restart Overseer. Even though we reset the autoscaling config some already running\n    // trigger threads may still continue to execute and produce spurious events\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    eventQueueActionWait = 5000;\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    // ensure that exactly 2 jetty nodes are running\n    int numJetties = cluster.getJettySolrRunners().size();\n    log.info(\"Found {} jetty instances running\", numJetties);\n    for (int i = 2; i < numJetties; i++)  {\n      int r = random().nextInt(cluster.getJettySolrRunners().size());\n      log.info(\"Shutdown extra jetty instance at port {}\", cluster.getJettySolrRunner(r).getLocalPort());\n      cluster.stopJettySolrRunner(r);\n    }\n    for (int i = cluster.getJettySolrRunners().size(); i < 2; i++) {\n      // start jetty instances\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(5);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread)overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    cluster.deleteAllCollections();\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    // restart Overseer. Even though we reset the autoscaling config some already running\n    // trigger threads may still continue to execute and produce spurious events\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ca5eaeddb09b39cefceaf853898ae6188400ae37","date":1522413426,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    // ensure that exactly 2 jetty nodes are running\n    int numJetties = cluster.getJettySolrRunners().size();\n    log.info(\"Found {} jetty instances running\", numJetties);\n    for (int i = 2; i < numJetties; i++)  {\n      int r = random().nextInt(cluster.getJettySolrRunners().size());\n      log.info(\"Shutdown extra jetty instance at port {}\", cluster.getJettySolrRunner(r).getLocalPort());\n      cluster.stopJettySolrRunner(r);\n    }\n    for (int i = cluster.getJettySolrRunners().size(); i < 2; i++) {\n      // start jetty instances\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(5);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread)overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    cluster.deleteAllCollections();\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    // restart Overseer. Even though we reset the autoscaling config some already running\n    // trigger threads may still continue to execute and produce spurious events\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    eventQueueActionWait = 5000;\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    // ensure that exactly 2 jetty nodes are running\n    int numJetties = cluster.getJettySolrRunners().size();\n    log.info(\"Found {} jetty instances running\", numJetties);\n    for (int i = 2; i < numJetties; i++)  {\n      int r = random().nextInt(cluster.getJettySolrRunners().size());\n      log.info(\"Shutdown extra jetty instance at port {}\", cluster.getJettySolrRunner(r).getLocalPort());\n      cluster.stopJettySolrRunner(r);\n    }\n    for (int i = cluster.getJettySolrRunners().size(); i < 2; i++) {\n      // start jetty instances\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(5);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread)overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    cluster.deleteAllCollections();\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    // restart Overseer. Even though we reset the autoscaling config some already running\n    // trigger threads may still continue to execute and produce spurious events\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"18ff77d2a5a7c08b3e372713c2653f6de5f3f7c2","date":1534756550,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    SolrCloudTestCase.ensureRunningJettys(NODE_COUNT, 5);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread)overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    cluster.deleteAllCollections();\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    // restart Overseer. Even though we reset the autoscaling config some already running\n    // trigger threads may still continue to execute and produce spurious events\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    eventQueueActionWait = 5000;\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    // ensure that exactly 2 jetty nodes are running\n    int numJetties = cluster.getJettySolrRunners().size();\n    log.info(\"Found {} jetty instances running\", numJetties);\n    for (int i = 2; i < numJetties; i++)  {\n      int r = random().nextInt(cluster.getJettySolrRunners().size());\n      log.info(\"Shutdown extra jetty instance at port {}\", cluster.getJettySolrRunner(r).getLocalPort());\n      cluster.stopJettySolrRunner(r);\n    }\n    for (int i = cluster.getJettySolrRunners().size(); i < 2; i++) {\n      // start jetty instances\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(5);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread)overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    cluster.deleteAllCollections();\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    // restart Overseer. Even though we reset the autoscaling config some already running\n    // trigger threads may still continue to execute and produce spurious events\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    eventQueueActionWait = 5000;\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    SolrCloudTestCase.ensureRunningJettys(NODE_COUNT, 5);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread)overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    cluster.deleteAllCollections();\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    // restart Overseer. Even though we reset the autoscaling config some already running\n    // trigger threads may still continue to execute and produce spurious events\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    Thread.sleep(5000);\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    eventQueueActionWait = 5000;\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(30);\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    SolrCloudTestCase.ensureRunningJettys(NODE_COUNT, 5);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread)overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    cluster.deleteAllCollections();\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    // restart Overseer. Even though we reset the autoscaling config some already running\n    // trigger threads may still continue to execute and produce spurious events\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    eventQueueActionWait = 5000;\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","bugFix":["01e3e55745c6667006f67aaa604466b9974425f4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba6afbcc1d4884e6e28d624a8a9bc666c6a42445","date":1551718463,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    SolrCloudTestCase.ensureRunningJettys(NODE_COUNT, 5);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread)overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    cluster.deleteAllCollections();\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    // restart Overseer. Even though we reset the autoscaling config some already running\n    // trigger threads may still continue to execute and produce spurious events\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    Thread.sleep(5000);\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(30);\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    SolrCloudTestCase.ensureRunningJettys(NODE_COUNT, 5);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread)overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    cluster.deleteAllCollections();\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    // restart Overseer. Even though we reset the autoscaling config some already running\n    // trigger threads may still continue to execute and produce spurious events\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    Thread.sleep(5000);\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    eventQueueActionWait = 5000;\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(30);\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    SolrCloudTestCase.ensureRunningJettys(NODE_COUNT, 5);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread)overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    if (log.isInfoEnabled()) {\n      log.info(\"{} reset, new znode version {}\", SOLR_AUTOSCALING_CONF_PATH, stat.getVersion());\n    }\n\n    cluster.deleteAllCollections();\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    // restart Overseer. Even though we reset the autoscaling config some already running\n    // trigger threads may still continue to execute and produce spurious events\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    Thread.sleep(5000);\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(30);\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    SolrCloudTestCase.ensureRunningJettys(NODE_COUNT, 5);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread)overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    cluster.deleteAllCollections();\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    // restart Overseer. Even though we reset the autoscaling config some already running\n    // trigger threads may still continue to execute and produce spurious events\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    Thread.sleep(5000);\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(30);\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#setupTest().mjava","sourceNew":null,"sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    SolrCloudTestCase.ensureRunningJettys(NODE_COUNT, 5);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread)overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    if (log.isInfoEnabled()) {\n      log.info(\"{} reset, new znode version {}\", SOLR_AUTOSCALING_CONF_PATH, stat.getVersion());\n    }\n\n    cluster.deleteAllCollections();\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    // restart Overseer. Even though we reset the autoscaling config some already running\n    // trigger threads may still continue to execute and produce spurious events\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    Thread.sleep(5000);\n\n    throttlingDelayMs.set(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS));\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    lastActionExecutedAt.set(0);\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(30);\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"18ff77d2a5a7c08b3e372713c2653f6de5f3f7c2":["ca5eaeddb09b39cefceaf853898ae6188400ae37"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e0d9c88546c1a130d50b56981790d87a308daffd"],"ba6afbcc1d4884e6e28d624a8a9bc666c6a42445":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a7699e9ae4550ba2a55335a64ae7de9d5d9de39e":["67f215f0e4d5c92f5d96ab7675170115b0983501"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["560c18d71dad43d675158783c3840f8c80d6d39c","4450528f86982f38cda0ddd6acb2ac272c8bd369"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["18ff77d2a5a7c08b3e372713c2653f6de5f3f7c2"],"e2f4717538692c396242d8b00ae0001626caebdd":["7aa2c1715ef9a80383edea1048655da291ed9b8f","d64e4b13048b3a4c03a20959037e5fb858764a2f"],"d64e4b13048b3a4c03a20959037e5fb858764a2f":["7aa2c1715ef9a80383edea1048655da291ed9b8f"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","d9ccfe45460d496c5e5e1b70396521dac842d966"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","15ba547dfc0dd0b670e678cb3db8e5d27c694420"],"4ebf2a4e9fec7a202108e0897879cc366c3da296":["bdd2a8e3062fc9c4b2cd4c34403648d0e622a08e"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["ba6afbcc1d4884e6e28d624a8a9bc666c6a42445"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"e0d9c88546c1a130d50b56981790d87a308daffd":["664ff2b928393480d9655010aa700656b0fcade0","2480cf60350a342e5e57439f3e71092fabc364a2"],"01e3e55745c6667006f67aaa604466b9974425f4":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"664ff2b928393480d9655010aa700656b0fcade0":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db","c32a8448145a74a8902798f2e63e322827757ff2"],"2480cf60350a342e5e57439f3e71092fabc364a2":["664ff2b928393480d9655010aa700656b0fcade0"],"3f504512a03d978990cbff30db0522b354e846db":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"32761ed493217e1842ce7b57792ead0daf001b12":["01e3e55745c6667006f67aaa604466b9974425f4"],"67f215f0e4d5c92f5d96ab7675170115b0983501":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ca5eaeddb09b39cefceaf853898ae6188400ae37":["bdd2a8e3062fc9c4b2cd4c34403648d0e622a08e","4ebf2a4e9fec7a202108e0897879cc366c3da296"],"15ba547dfc0dd0b670e678cb3db8e5d27c694420":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["e2f4717538692c396242d8b00ae0001626caebdd","464244264804e3f981bf1fb4b732516d8d62dbc2"],"7aa2c1715ef9a80383edea1048655da291ed9b8f":["a7699e9ae4550ba2a55335a64ae7de9d5d9de39e"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["e2f4717538692c396242d8b00ae0001626caebdd"],"bdd2a8e3062fc9c4b2cd4c34403648d0e622a08e":["32761ed493217e1842ce7b57792ead0daf001b12"],"c32a8448145a74a8902798f2e63e322827757ff2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"4450528f86982f38cda0ddd6acb2ac272c8bd369":["560c18d71dad43d675158783c3840f8c80d6d39c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"]},"commit2Childs":{"18ff77d2a5a7c08b3e372713c2653f6de5f3f7c2":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"ba6afbcc1d4884e6e28d624a8a9bc666c6a42445":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"a7699e9ae4550ba2a55335a64ae7de9d5d9de39e":["7aa2c1715ef9a80383edea1048655da291ed9b8f"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1aad05eeff7818b0833c02ac6b743aa72054963b","15ba547dfc0dd0b670e678cb3db8e5d27c694420"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["ba6afbcc1d4884e6e28d624a8a9bc666c6a42445"],"e2f4717538692c396242d8b00ae0001626caebdd":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db","464244264804e3f981bf1fb4b732516d8d62dbc2"],"d64e4b13048b3a4c03a20959037e5fb858764a2f":["e2f4717538692c396242d8b00ae0001626caebdd"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["01e3e55745c6667006f67aaa604466b9974425f4"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"4ebf2a4e9fec7a202108e0897879cc366c3da296":["ca5eaeddb09b39cefceaf853898ae6188400ae37"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","67f215f0e4d5c92f5d96ab7675170115b0983501"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["3f504512a03d978990cbff30db0522b354e846db"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","d9ccfe45460d496c5e5e1b70396521dac842d966"],"e0d9c88546c1a130d50b56981790d87a308daffd":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","4450528f86982f38cda0ddd6acb2ac272c8bd369"],"01e3e55745c6667006f67aaa604466b9974425f4":["32761ed493217e1842ce7b57792ead0daf001b12"],"664ff2b928393480d9655010aa700656b0fcade0":["e0d9c88546c1a130d50b56981790d87a308daffd","2480cf60350a342e5e57439f3e71092fabc364a2"],"2480cf60350a342e5e57439f3e71092fabc364a2":["e0d9c88546c1a130d50b56981790d87a308daffd"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"32761ed493217e1842ce7b57792ead0daf001b12":["bdd2a8e3062fc9c4b2cd4c34403648d0e622a08e"],"67f215f0e4d5c92f5d96ab7675170115b0983501":["a7699e9ae4550ba2a55335a64ae7de9d5d9de39e"],"ca5eaeddb09b39cefceaf853898ae6188400ae37":["18ff77d2a5a7c08b3e372713c2653f6de5f3f7c2"],"15ba547dfc0dd0b670e678cb3db8e5d27c694420":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["664ff2b928393480d9655010aa700656b0fcade0","c32a8448145a74a8902798f2e63e322827757ff2"],"7aa2c1715ef9a80383edea1048655da291ed9b8f":["e2f4717538692c396242d8b00ae0001626caebdd","d64e4b13048b3a4c03a20959037e5fb858764a2f"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"bdd2a8e3062fc9c4b2cd4c34403648d0e622a08e":["4ebf2a4e9fec7a202108e0897879cc366c3da296","ca5eaeddb09b39cefceaf853898ae6188400ae37"],"c32a8448145a74a8902798f2e63e322827757ff2":["664ff2b928393480d9655010aa700656b0fcade0"],"4450528f86982f38cda0ddd6acb2ac272c8bd369":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}