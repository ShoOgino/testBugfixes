{"path":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    if (checkIndexOnClose && IndexReader.indexExists(this)) {\n      _TestUtil.checkIndex(this);\n    }\n    delegate.close();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    if (checkIndexOnClose && IndexReader.indexExists(this)) {\n      _TestUtil.checkIndex(this);\n    }\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    if (checkIndexOnClose && IndexReader.indexExists(this)) {\n      _TestUtil.checkIndex(this);\n    }\n    delegate.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    if (checkIndexOnClose && IndexReader.indexExists(this)) {\n      _TestUtil.checkIndex(this);\n    }\n    delegate.close();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95ae76773bf2b95987d5f9c8f566ab3738953fb4","date":1301758351,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    if (checkIndexOnClose) {\n      if (codecProvider != null) {\n        if (IndexReader.indexExists(this, codecProvider)) {\n          _TestUtil.checkIndex(this, codecProvider);\n        }\n      } else {\n        if (IndexReader.indexExists(this)) {\n          _TestUtil.checkIndex(this);\n        }\n      }\n    }\n    delegate.close();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    if (checkIndexOnClose && IndexReader.indexExists(this)) {\n      _TestUtil.checkIndex(this);\n    }\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    if (checkIndexOnClose) {\n      if (codecProvider != null) {\n        if (IndexReader.indexExists(this, codecProvider)) {\n          _TestUtil.checkIndex(this, codecProvider);\n        }\n      } else {\n        if (IndexReader.indexExists(this)) {\n          _TestUtil.checkIndex(this);\n        }\n      }\n    }\n    delegate.close();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    if (checkIndexOnClose && IndexReader.indexExists(this)) {\n      _TestUtil.checkIndex(this);\n    }\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a653ca3bb595a9c1f775fc44684e6ba7daafd3f5","date":1302211592,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    if (checkIndexOnClose) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"\\nNOTE: MockDirectoryWrapper: now run CheckIndex\");\n      } \n      if (codecProvider != null) {\n        if (IndexReader.indexExists(this, codecProvider)) {\n          _TestUtil.checkIndex(this, codecProvider);\n        }\n      } else {\n        if (IndexReader.indexExists(this)) {\n          _TestUtil.checkIndex(this);\n        }\n      }\n    }\n    delegate.close();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    if (checkIndexOnClose) {\n      if (codecProvider != null) {\n        if (IndexReader.indexExists(this, codecProvider)) {\n          _TestUtil.checkIndex(this, codecProvider);\n        }\n      } else {\n        if (IndexReader.indexExists(this)) {\n          _TestUtil.checkIndex(this);\n        }\n      }\n    }\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    if (checkIndexOnClose) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"\\nNOTE: MockDirectoryWrapper: now run CheckIndex\");\n      } \n      if (codecProvider != null) {\n        if (IndexReader.indexExists(this, codecProvider)) {\n          _TestUtil.checkIndex(this, codecProvider);\n        }\n      } else {\n        if (IndexReader.indexExists(this)) {\n          _TestUtil.checkIndex(this);\n        }\n      }\n    }\n    delegate.close();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    if (checkIndexOnClose) {\n      if (codecProvider != null) {\n        if (IndexReader.indexExists(this, codecProvider)) {\n          _TestUtil.checkIndex(this, codecProvider);\n        }\n      } else {\n        if (IndexReader.indexExists(this)) {\n          _TestUtil.checkIndex(this);\n        }\n      }\n    }\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    if (checkIndexOnClose) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"\\nNOTE: MockDirectoryWrapper: now run CheckIndex\");\n      } \n      if (codecProvider != null) {\n        if (IndexReader.indexExists(this, codecProvider)) {\n          _TestUtil.checkIndex(this, codecProvider);\n        }\n      } else {\n        if (IndexReader.indexExists(this)) {\n          _TestUtil.checkIndex(this);\n        }\n      }\n    }\n    delegate.close();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    if (checkIndexOnClose && IndexReader.indexExists(this)) {\n      _TestUtil.checkIndex(this);\n    }\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    if (checkIndexOnClose) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"\\nNOTE: MockDirectoryWrapper: now run CheckIndex\");\n      } \n      if (codecProvider != null) {\n        if (IndexReader.indexExists(this, codecProvider)) {\n          _TestUtil.checkIndex(this, codecProvider);\n        }\n      } else {\n        if (IndexReader.indexExists(this)) {\n          _TestUtil.checkIndex(this);\n        }\n      }\n    }\n    delegate.close();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    if (checkIndexOnClose && IndexReader.indexExists(this)) {\n      _TestUtil.checkIndex(this);\n    }\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    if (noDeleteOpenFile && openLocks.size() > 0) {\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open locks: \" + openLocks);\n    }\n    open = false;\n    if (checkIndexOnClose) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"\\nNOTE: MockDirectoryWrapper: now run CheckIndex\");\n      } \n      if (codecProvider != null) {\n        if (IndexReader.indexExists(this, codecProvider)) {\n          _TestUtil.checkIndex(this, codecProvider);\n        }\n      } else {\n        if (IndexReader.indexExists(this)) {\n          _TestUtil.checkIndex(this);\n        }\n      }\n    }\n    delegate.close();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    if (checkIndexOnClose) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"\\nNOTE: MockDirectoryWrapper: now run CheckIndex\");\n      } \n      if (codecProvider != null) {\n        if (IndexReader.indexExists(this, codecProvider)) {\n          _TestUtil.checkIndex(this, codecProvider);\n        }\n      } else {\n        if (IndexReader.indexExists(this)) {\n          _TestUtil.checkIndex(this);\n        }\n      }\n    }\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    if (noDeleteOpenFile && openLocks.size() > 0) {\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open locks: \" + openLocks);\n    }\n    open = false;\n    if (checkIndexOnClose) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"\\nNOTE: MockDirectoryWrapper: now run CheckIndex\");\n      } \n      if (codecProvider != null) {\n        if (IndexReader.indexExists(this, codecProvider)) {\n          _TestUtil.checkIndex(this, codecProvider);\n        }\n      } else {\n        if (IndexReader.indexExists(this)) {\n          _TestUtil.checkIndex(this);\n        }\n      }\n    }\n    delegate.close();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    if (checkIndexOnClose) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"\\nNOTE: MockDirectoryWrapper: now run CheckIndex\");\n      } \n      if (codecProvider != null) {\n        if (IndexReader.indexExists(this, codecProvider)) {\n          _TestUtil.checkIndex(this, codecProvider);\n        }\n      } else {\n        if (IndexReader.indexExists(this)) {\n          _TestUtil.checkIndex(this);\n        }\n      }\n    }\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    if (noDeleteOpenFile && openLocks.size() > 0) {\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open locks: \" + openLocks);\n    }\n    open = false;\n    if (checkIndexOnClose) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"\\nNOTE: MockDirectoryWrapper: now run CheckIndex\");\n      } \n      if (codecProvider != null) {\n        if (IndexReader.indexExists(this, codecProvider)) {\n          _TestUtil.checkIndex(this, codecProvider);\n        }\n      } else {\n        if (IndexReader.indexExists(this)) {\n          _TestUtil.checkIndex(this);\n        }\n      }\n    }\n    delegate.close();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    if (checkIndexOnClose) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"\\nNOTE: MockDirectoryWrapper: now run CheckIndex\");\n      } \n      if (codecProvider != null) {\n        if (IndexReader.indexExists(this, codecProvider)) {\n          _TestUtil.checkIndex(this, codecProvider);\n        }\n      } else {\n        if (IndexReader.indexExists(this)) {\n          _TestUtil.checkIndex(this);\n        }\n      }\n    }\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    if (noDeleteOpenFile && openLocks.size() > 0) {\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open locks: \" + openLocks);\n    }\n    open = false;\n    if (checkIndexOnClose) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"\\nNOTE: MockDirectoryWrapper: now run CheckIndex\");\n      } \n      if (IndexReader.indexExists(this)) {\n        _TestUtil.checkIndex(this);\n      }\n    }\n    delegate.close();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    if (noDeleteOpenFile && openLocks.size() > 0) {\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open locks: \" + openLocks);\n    }\n    open = false;\n    if (checkIndexOnClose) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"\\nNOTE: MockDirectoryWrapper: now run CheckIndex\");\n      } \n      if (codecProvider != null) {\n        if (IndexReader.indexExists(this, codecProvider)) {\n          _TestUtil.checkIndex(this, codecProvider);\n        }\n      } else {\n        if (IndexReader.indexExists(this)) {\n          _TestUtil.checkIndex(this);\n        }\n      }\n    }\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":["527cc14542789f47d75da436cb4287d1ab887e34","d19974432be9aed28ee7dca73bdf01d139e763a9","b6493bfa10477745a1307895992b7323b6e19ec6"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"efb7a19703a037c29e30440260d393500febc1f4":["a653ca3bb595a9c1f775fc44684e6ba7daafd3f5"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","a653ca3bb595a9c1f775fc44684e6ba7daafd3f5"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","a653ca3bb595a9c1f775fc44684e6ba7daafd3f5"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a653ca3bb595a9c1f775fc44684e6ba7daafd3f5":["95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"7b91922b55d15444d554721b352861d028eb8278":["efb7a19703a037c29e30440260d393500febc1f4"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","efb7a19703a037c29e30440260d393500febc1f4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a3776dccca01c11e7046323cfad46a3b4a471233":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","a653ca3bb595a9c1f775fc44684e6ba7daafd3f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"95ae76773bf2b95987d5f9c8f566ab3738953fb4":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","efb7a19703a037c29e30440260d393500febc1f4"]},"commit2Childs":{"efb7a19703a037c29e30440260d393500febc1f4":["7b91922b55d15444d554721b352861d028eb8278","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"962d04139994fce5193143ef35615499a9a96d78":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","a3776dccca01c11e7046323cfad46a3b4a471233","95ae76773bf2b95987d5f9c8f566ab3738953fb4","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a653ca3bb595a9c1f775fc44684e6ba7daafd3f5":["efb7a19703a037c29e30440260d393500febc1f4","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"95ae76773bf2b95987d5f9c8f566ab3738953fb4":["a653ca3bb595a9c1f775fc44684e6ba7daafd3f5","45669a651c970812a680841b97a77cce06af559f"],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["962d04139994fce5193143ef35615499a9a96d78","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}