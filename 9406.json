{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,Map).mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,Map).mjava","pathOld":"/dev/null","sourceNew":"  private void init(String collectionName, String zkHost, Map params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = params;\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n    if(!params.containsKey(\"fl\")){\n      throw new IOException(\"fl param expected for a stream\");\n    }\n    if(!params.containsKey(\"sort\")){\n      throw new IOException(\"sort param expected for a stream\");\n    }\n    this.comp = parseComp((String)params.get(\"sort\"), (String)params.get(\"fl\")); \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,Map).mjava","sourceNew":"  private void init(String collectionName, String zkHost, SolrParams params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = new ModifiableSolrParams(params);\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n    String fls = String.join(\",\", params.getParams(\"fl\"));\n    if (fls == null) {\n      throw new IOException(\"fl param expected for a stream\");\n    }\n\n    String sorts = String.join(\",\", params.getParams(\"sort\"));\n    if (sorts == null) {\n      throw new IOException(\"sort param expected for a stream\");\n    }\n    this.comp = parseComp(sorts, fls);\n  }\n\n","sourceOld":"  private void init(String collectionName, String zkHost, Map params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = params;\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n    if(!params.containsKey(\"fl\")){\n      throw new IOException(\"fl param expected for a stream\");\n    }\n    if(!params.containsKey(\"sort\")){\n      throw new IOException(\"sort param expected for a stream\");\n    }\n    this.comp = parseComp((String)params.get(\"sort\"), (String)params.get(\"fl\")); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,Map).mjava","sourceNew":"  private void init(String collectionName, String zkHost, SolrParams params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = new ModifiableSolrParams(params);\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n    String fls = String.join(\",\", params.getParams(\"fl\"));\n    if (fls == null) {\n      throw new IOException(\"fl param expected for a stream\");\n    }\n\n    String sorts = String.join(\",\", params.getParams(\"sort\"));\n    if (sorts == null) {\n      throw new IOException(\"sort param expected for a stream\");\n    }\n    this.comp = parseComp(sorts, fls);\n  }\n\n","sourceOld":"  private void init(String collectionName, String zkHost, Map params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = params;\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n    if(!params.containsKey(\"fl\")){\n      throw new IOException(\"fl param expected for a stream\");\n    }\n    if(!params.containsKey(\"sort\")){\n      throw new IOException(\"sort param expected for a stream\");\n    }\n    this.comp = parseComp((String)params.get(\"sort\"), (String)params.get(\"fl\")); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,Map).mjava","sourceNew":"  private void init(String collectionName, String zkHost, SolrParams params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = new ModifiableSolrParams(params);\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n\n    if (params.get(\"q\") == null) {\n      throw new IOException(\"q param expected for search function\");\n    }\n\n    if (params.getParams(\"fl\") == null) {\n      throw new IOException(\"fl param expected for search function\");\n    }\n    String fls = String.join(\",\", params.getParams(\"fl\"));\n\n    if (params.getParams(\"sort\") == null) {\n      throw new IOException(\"sort param expected for search function\");\n    }\n    String sorts = String.join(\",\", params.getParams(\"sort\"));\n    this.comp = parseComp(sorts, fls);\n  }\n\n","sourceOld":"  private void init(String collectionName, String zkHost, Map params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = params;\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n    if(!params.containsKey(\"fl\")){\n      throw new IOException(\"fl param expected for a stream\");\n    }\n    if(!params.containsKey(\"sort\")){\n      throw new IOException(\"sort param expected for a stream\");\n    }\n    this.comp = parseComp((String)params.get(\"sort\"), (String)params.get(\"fl\")); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,Map).mjava","sourceNew":null,"sourceOld":"  private void init(String collectionName, String zkHost, Map params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = params;\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n    if(!params.containsKey(\"fl\")){\n      throw new IOException(\"fl param expected for a stream\");\n    }\n    if(!params.containsKey(\"sort\")){\n      throw new IOException(\"sort param expected for a stream\");\n    }\n    this.comp = parseComp((String)params.get(\"sort\"), (String)params.get(\"fl\")); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":["f00f1c5fad501b66705121feb623f8cfbb6712f9","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f00f1c5fad501b66705121feb623f8cfbb6712f9","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["f00f1c5fad501b66705121feb623f8cfbb6712f9","826d15444ddf61716dc768c229cd54b2c2ccce1c"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["e66a459d38c1c4a2f97128433dab546f683a9fed","826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}