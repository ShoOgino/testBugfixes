{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String,IOContext).mjava","commits":[{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String).mjava","sourceNew":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName, IOContext context) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, segFileName, context);\n    for (String file : files) {\n      String newFileName = segName + IndexFileNames.stripSegmentName(file);\n      if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n          && !IndexFileNames.isSeparateNormsFile(file)) {\n        cfsWriter.addFile(file, info.dir);\n      } else {\n        assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n        info.dir.copy(directory, file, newFileName, context);\n      }\n    }\n    \n    // Create the .cfs\n    cfsWriter.close();\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","sourceOld":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, segFileName);\n    for (String file : files) {\n      String newFileName = segName + IndexFileNames.stripSegmentName(file);\n      if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n          && !IndexFileNames.isSeparateNormsFile(file)) {\n        cfsWriter.addFile(file, info.dir);\n      } else {\n        assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n        info.dir.copy(directory, file, newFileName);\n      }\n    }\n    \n    // Create the .cfs\n    cfsWriter.close();\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName, IOContext context) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    final CompoundFileDirectory cfsdir = directory.createCompoundOutput(segFileName, context);\n    try {\n      for (String file : files) {\n        String newFileName = segName + IndexFileNames.stripSegmentName(file);\n        if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n            && !IndexFileNames.isSeparateNormsFile(file)) {\n          info.dir.copy(cfsdir, file, file, context);\n        } else {\n          assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n          info.dir.copy(directory, file, newFileName, context);\n        }\n      }\n    } finally {\n      IOUtils.closeSafely(true, cfsdir);\n    }\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","sourceOld":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName, IOContext context) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, segFileName, context);\n    for (String file : files) {\n      String newFileName = segName + IndexFileNames.stripSegmentName(file);\n      if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n          && !IndexFileNames.isSeparateNormsFile(file)) {\n        cfsWriter.addFile(file, info.dir);\n      } else {\n        assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n        info.dir.copy(directory, file, newFileName, context);\n      }\n    }\n    \n    // Create the .cfs\n    cfsWriter.close();\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String).mjava","sourceNew":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName, IOContext context) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    final CompoundFileDirectory cfsdir = directory.createCompoundOutput(segFileName, context);\n    try {\n      for (String file : files) {\n        String newFileName = segName + IndexFileNames.stripSegmentName(file);\n        if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n            && !IndexFileNames.isSeparateNormsFile(file)) {\n          info.dir.copy(cfsdir, file, file, context);\n        } else {\n          assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n          info.dir.copy(directory, file, newFileName, context);\n        }\n      }\n    } finally {\n      IOUtils.closeSafely(true, cfsdir);\n    }\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","sourceOld":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    final CompoundFileDirectory cfsdir = directory.createCompoundOutput(segFileName);\n    try {\n      for (String file : files) {\n        String newFileName = segName + IndexFileNames.stripSegmentName(file);\n        if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n            && !IndexFileNames.isSeparateNormsFile(file)) {\n          info.dir.copy(cfsdir, file, file);\n        } else {\n          assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n          info.dir.copy(directory, file, newFileName);\n        }\n      }\n    } finally {\n      IOUtils.closeSafely(true, cfsdir);\n    }\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String).mjava","sourceNew":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName, IOContext context) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    final CompoundFileDirectory cfsdir = directory.createCompoundOutput(segFileName, context);\n    try {\n      for (String file : files) {\n        String newFileName = segName + IndexFileNames.stripSegmentName(file);\n        if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n            && !IndexFileNames.isSeparateNormsFile(file)) {\n          info.dir.copy(cfsdir, file, file, context);\n        } else {\n          assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n          info.dir.copy(directory, file, newFileName, context);\n        }\n      }\n    } finally {\n      IOUtils.closeSafely(true, cfsdir);\n    }\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","sourceOld":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    final CompoundFileDirectory cfsdir = directory.createCompoundOutput(segFileName);\n    try {\n      for (String file : files) {\n        String newFileName = segName + IndexFileNames.stripSegmentName(file);\n        if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n            && !IndexFileNames.isSeparateNormsFile(file)) {\n          info.dir.copy(cfsdir, file, file);\n        } else {\n          assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n          info.dir.copy(directory, file, newFileName);\n        }\n      }\n    } finally {\n      IOUtils.closeSafely(true, cfsdir);\n    }\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67aadace85f701c87a4e0721eedcda25d8415a70","date":1314201925,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName, IOContext context) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    final CompoundFileDirectory cfsdir = new CompoundFileDirectory(directory, segFileName, context, true);\n    try {\n      for (String file : files) {\n        String newFileName = segName + IndexFileNames.stripSegmentName(file);\n        if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n            && !IndexFileNames.isSeparateNormsFile(file)) {\n          info.dir.copy(cfsdir, file, file, context);\n        } else {\n          assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n          info.dir.copy(directory, file, newFileName, context);\n        }\n      }\n    } finally {\n      IOUtils.closeSafely(true, cfsdir);\n    }\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","sourceOld":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName, IOContext context) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    final CompoundFileDirectory cfsdir = directory.createCompoundOutput(segFileName, context);\n    try {\n      for (String file : files) {\n        String newFileName = segName + IndexFileNames.stripSegmentName(file);\n        if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n            && !IndexFileNames.isSeparateNormsFile(file)) {\n          info.dir.copy(cfsdir, file, file, context);\n        } else {\n          assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n          info.dir.copy(directory, file, newFileName, context);\n        }\n      }\n    } finally {\n      IOUtils.closeSafely(true, cfsdir);\n    }\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"733b83db0afdfe169b80c8580043ceca57967b19","date":1314458101,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName, IOContext context) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    final CompoundFileDirectory cfsdir = new CompoundFileDirectory(directory, segFileName, context, true);\n    try {\n      for (String file : files) {\n        String newFileName = segName + IndexFileNames.stripSegmentName(file);\n        if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n            && !IndexFileNames.isSeparateNormsFile(file)) {\n          info.dir.copy(cfsdir, file, file, context);\n        } else {\n          assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n          info.dir.copy(directory, file, newFileName, context);\n        }\n      }\n    } finally {\n      IOUtils.closeSafely(false, cfsdir);\n    }\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","sourceOld":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName, IOContext context) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    final CompoundFileDirectory cfsdir = new CompoundFileDirectory(directory, segFileName, context, true);\n    try {\n      for (String file : files) {\n        String newFileName = segName + IndexFileNames.stripSegmentName(file);\n        if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n            && !IndexFileNames.isSeparateNormsFile(file)) {\n          info.dir.copy(cfsdir, file, file, context);\n        } else {\n          assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n          info.dir.copy(directory, file, newFileName, context);\n        }\n      }\n    } finally {\n      IOUtils.closeSafely(true, cfsdir);\n    }\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","bugFix":["0aab6e810b4b0d3743d6a048be0602801f4b3920"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName, IOContext context) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    final CompoundFileDirectory cfsdir = new CompoundFileDirectory(directory, segFileName, context, true);\n    try {\n      for (String file : files) {\n        String newFileName = segName + IndexFileNames.stripSegmentName(file);\n        if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n            && !IndexFileNames.isSeparateNormsFile(file)) {\n          info.dir.copy(cfsdir, file, file, context);\n        } else {\n          assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n          info.dir.copy(directory, file, newFileName, context);\n        }\n      }\n    } finally {\n      IOUtils.close(cfsdir);\n    }\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","sourceOld":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName, IOContext context) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    final CompoundFileDirectory cfsdir = new CompoundFileDirectory(directory, segFileName, context, true);\n    try {\n      for (String file : files) {\n        String newFileName = segName + IndexFileNames.stripSegmentName(file);\n        if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n            && !IndexFileNames.isSeparateNormsFile(file)) {\n          info.dir.copy(cfsdir, file, file, context);\n        } else {\n          assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n          info.dir.copy(directory, file, newFileName, context);\n        }\n      }\n    } finally {\n      IOUtils.closeSafely(false, cfsdir);\n    }\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6a3fe8668125a7bb217ab4b515c348a6d21ddf9","date":1322493662,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String,IOContext).mjava","sourceNew":null,"sourceOld":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName, IOContext context) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    final CompoundFileDirectory cfsdir = new CompoundFileDirectory(directory, segFileName, context, true);\n    try {\n      for (String file : files) {\n        String newFileName = segName + IndexFileNames.stripSegmentName(file);\n        if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n            && !IndexFileNames.isSeparateNormsFile(file)) {\n          info.dir.copy(cfsdir, file, file, context);\n        } else {\n          assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n          info.dir.copy(directory, file, newFileName, context);\n        }\n      }\n    } finally {\n      IOUtils.close(cfsdir);\n    }\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["733b83db0afdfe169b80c8580043ceca57967b19"],"67aadace85f701c87a4e0721eedcda25d8415a70":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a6a3fe8668125a7bb217ab4b515c348a6d21ddf9":["24230fe54121f9be9d85f2c2067536296785e421"],"733b83db0afdfe169b80c8580043ceca57967b19":["67aadace85f701c87a4e0721eedcda25d8415a70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a3fe8668125a7bb217ab4b515c348a6d21ddf9"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["a6a3fe8668125a7bb217ab4b515c348a6d21ddf9"],"67aadace85f701c87a4e0721eedcda25d8415a70":["733b83db0afdfe169b80c8580043ceca57967b19"],"a6a3fe8668125a7bb217ab4b515c348a6d21ddf9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"733b83db0afdfe169b80c8580043ceca57967b19":["24230fe54121f9be9d85f2c2067536296785e421"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["67aadace85f701c87a4e0721eedcda25d8415a70","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}