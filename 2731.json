{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e837b9e725093b56ed9d86c0ea3fe415bccd4b58","date":1312113179,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n       else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n       else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n       else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"469904587e47b677b125b4bb303304e1ef04e961","date":1393861559,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        _expandedResults = (Map<String, SolrDocumentList>) res.getVal( i );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n       else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"343d2d9477b299075fa3a19a46e654b6c3bf552b","date":1407872410,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        _expandedResults = (Map<String, SolrDocumentList>) res.getVal( i );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        _expandedResults = (Map<String, SolrDocumentList>) res.getVal( i );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84bc0ab6faa849a8e6667f3bce45874b858d44c9","date":1427871306,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        NamedList map = (NamedList) res.getVal(i);\n        _expandedResults = map.asMap(1);\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        _expandedResults = (Map<String, SolrDocumentList>) res.getVal( i );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        NamedList map = (NamedList) res.getVal(i);\n        _expandedResults = map.asMap(1);\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        _expandedResults = (Map<String, SolrDocumentList>) res.getVal( i );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06b9a8e8cd9cc9a3abf5a6ff15e49624e225b22a","date":1435674390,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        NamedList map = (NamedList) res.getVal(i);\n        _expandedResults = map.asMap(1);\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if (\"clusters\".equals(n)) {\n        _clusterInfo = (ArrayList<NamedList<Object>>) res.getVal(i);\n        extractClusteringInfo(_clusterInfo);\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        NamedList map = (NamedList) res.getVal(i);\n        _expandedResults = map.asMap(1);\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"096ce9d7ec9914ca48a630b7686cc0a413cb74d7","date":1437121947,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        NamedList map = (NamedList) res.getVal(i);\n        _expandedResults = map.asMap(1);\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if (\"clusters\".equals(n)) {\n        _clusterInfo = (ArrayList<NamedList<Object>>) res.getVal(i);\n        extractClusteringInfo(_clusterInfo);\n      }\n      else if ( \"suggest\".equals( n ) )  {\n        _suggestInfo = (Map<String,NamedList<Object>>) res.getVal( i );\n        extractSuggesterInfo(_suggestInfo);\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        NamedList map = (NamedList) res.getVal(i);\n        _expandedResults = map.asMap(1);\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if (\"clusters\".equals(n)) {\n        _clusterInfo = (ArrayList<NamedList<Object>>) res.getVal(i);\n        extractClusteringInfo(_clusterInfo);\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9dec2d3920a73691e8110290418baf8efad1303","date":1437131425,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        NamedList map = (NamedList) res.getVal(i);\n        _expandedResults = map.asMap(1);\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if (\"clusters\".equals(n)) {\n        _clusterInfo = (ArrayList<NamedList<Object>>) res.getVal(i);\n        extractClusteringInfo(_clusterInfo);\n      }\n      else if ( \"suggest\".equals( n ) )  {\n        _suggestInfo = (Map<String,NamedList<Object>>) res.getVal( i );\n        extractSuggesterInfo(_suggestInfo);\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        NamedList map = (NamedList) res.getVal(i);\n        _expandedResults = map.asMap(1);\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if (\"clusters\".equals(n)) {\n        _clusterInfo = (ArrayList<NamedList<Object>>) res.getVal(i);\n        extractClusteringInfo(_clusterInfo);\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c3d088739fca447f2b8455a020c68bc2c74f14b","date":1477570285,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        NamedList map = (NamedList) res.getVal(i);\n        _expandedResults = map.asMap(1);\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if (\"clusters\".equals(n)) {\n        _clusterInfo = (ArrayList<NamedList<Object>>) res.getVal(i);\n        extractClusteringInfo(_clusterInfo);\n      }\n      else if ( \"suggest\".equals( n ) )  {\n        _suggestInfo = (Map<String,NamedList<Object>>) res.getVal( i );\n        extractSuggesterInfo(_suggestInfo);\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( \"moreLikeThis\".equals( n ) ) {\n        _moreLikeThisInfo = (NamedList<SolrDocumentList>) res.getVal( i );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        NamedList map = (NamedList) res.getVal(i);\n        _expandedResults = map.asMap(1);\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if (\"clusters\".equals(n)) {\n        _clusterInfo = (ArrayList<NamedList<Object>>) res.getVal(i);\n        extractClusteringInfo(_clusterInfo);\n      }\n      else if ( \"suggest\".equals( n ) )  {\n        _suggestInfo = (Map<String,NamedList<Object>>) res.getVal( i );\n        extractSuggesterInfo(_suggestInfo);\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        NamedList map = (NamedList) res.getVal(i);\n        _expandedResults = map.asMap(1);\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if (\"clusters\".equals(n)) {\n        _clusterInfo = (ArrayList<NamedList<Object>>) res.getVal(i);\n        extractClusteringInfo(_clusterInfo);\n      }\n      else if ( \"suggest\".equals( n ) )  {\n        _suggestInfo = (Map<String,NamedList<Object>>) res.getVal( i );\n        extractSuggesterInfo(_suggestInfo);\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( \"moreLikeThis\".equals( n ) ) {\n        _moreLikeThisInfo = (NamedList<SolrDocumentList>) res.getVal( i );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        NamedList map = (NamedList) res.getVal(i);\n        _expandedResults = map.asMap(1);\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if (\"clusters\".equals(n)) {\n        _clusterInfo = (ArrayList<NamedList<Object>>) res.getVal(i);\n        extractClusteringInfo(_clusterInfo);\n      }\n      else if ( \"suggest\".equals( n ) )  {\n        _suggestInfo = (Map<String,NamedList<Object>>) res.getVal( i );\n        extractSuggesterInfo(_suggestInfo);\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e24ef15e7e97c77f0829a62180966fccd2e94b5","date":1477623326,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        NamedList map = (NamedList) res.getVal(i);\n        _expandedResults = map.asMap(1);\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if (\"clusters\".equals(n)) {\n        _clusterInfo = (ArrayList<NamedList<Object>>) res.getVal(i);\n        extractClusteringInfo(_clusterInfo);\n      }\n      else if ( \"suggest\".equals( n ) )  {\n        _suggestInfo = (Map<String,NamedList<Object>>) res.getVal( i );\n        extractSuggesterInfo(_suggestInfo);\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( \"moreLikeThis\".equals( n ) ) {\n        _moreLikeThisInfo = (NamedList<SolrDocumentList>) res.getVal( i );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        NamedList map = (NamedList) res.getVal(i);\n        _expandedResults = map.asMap(1);\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if (\"clusters\".equals(n)) {\n        _clusterInfo = (ArrayList<NamedList<Object>>) res.getVal(i);\n        extractClusteringInfo(_clusterInfo);\n      }\n      else if ( \"suggest\".equals( n ) )  {\n        _suggestInfo = (Map<String,NamedList<Object>>) res.getVal( i );\n        extractSuggesterInfo(_suggestInfo);\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53","date":1490757519,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        NamedList map = (NamedList) res.getVal(i);\n        _expandedResults = map.asMap(1);\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if (\"clusters\".equals(n)) {\n        _clusterInfo = (ArrayList<NamedList<Object>>) res.getVal(i);\n        extractClusteringInfo(_clusterInfo);\n      }\n      else if ( \"suggest\".equals( n ) )  {\n        _suggestInfo = (Map<String,NamedList<Object>>) res.getVal( i );\n        extractSuggesterInfo(_suggestInfo);\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( \"moreLikeThis\".equals( n ) ) {\n        _moreLikeThisInfo = (NamedList<SolrDocumentList>) res.getVal( i );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        NamedList map = (NamedList) res.getVal(i);\n        _expandedResults = map.asMap(1);\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if (\"clusters\".equals(n)) {\n        _clusterInfo = (ArrayList<NamedList<Object>>) res.getVal(i);\n        extractClusteringInfo(_clusterInfo);\n      }\n      else if ( \"suggest\".equals( n ) )  {\n        _suggestInfo = (Map<String,NamedList<Object>>) res.getVal( i );\n        extractSuggesterInfo(_suggestInfo);\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( \"moreLikeThis\".equals( n ) ) {\n        _moreLikeThisInfo = (NamedList<SolrDocumentList>) res.getVal( i );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4302dfeb5d01c940f69c48bec27f03ad8828668","date":1490873946,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        NamedList map = (NamedList) res.getVal(i);\n        _expandedResults = map.asMap(1);\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if (\"clusters\".equals(n)) {\n        _clusterInfo = (ArrayList<NamedList<Object>>) res.getVal(i);\n        extractClusteringInfo(_clusterInfo);\n      }\n      else if ( \"suggest\".equals( n ) )  {\n        _suggestInfo = (Map<String,NamedList<Object>>) res.getVal( i );\n        extractSuggesterInfo(_suggestInfo);\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( \"moreLikeThis\".equals( n ) ) {\n        _moreLikeThisInfo = (NamedList<SolrDocumentList>) res.getVal( i );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        NamedList map = (NamedList) res.getVal(i);\n        _expandedResults = map.asMap(1);\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if (\"clusters\".equals(n)) {\n        _clusterInfo = (ArrayList<NamedList<Object>>) res.getVal(i);\n        extractClusteringInfo(_clusterInfo);\n      }\n      else if ( \"suggest\".equals( n ) )  {\n        _suggestInfo = (Map<String,NamedList<Object>>) res.getVal( i );\n        extractSuggesterInfo(_suggestInfo);\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( \"moreLikeThis\".equals( n ) ) {\n        _moreLikeThisInfo = (NamedList<SolrDocumentList>) res.getVal( i );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07feaa572dd3645c2013be127176350b3f4cd6a2","date":1542492880,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        NamedList map = (NamedList) res.getVal(i);\n        _expandedResults = map.asMap(1);\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if (\"clusters\".equals(n)) {\n        _clusterInfo = (ArrayList<NamedList<Object>>) res.getVal(i);\n        extractClusteringInfo(_clusterInfo);\n      }\n      else if (\"facets\".equals(n)) {\n        _jsonFacetingInfo = (NamedList<Object>) res.getVal(i);\n        // Don't call extractJsonFacetingInfo(_jsonFacetingInfo) here in an effort to do it lazily\n      }\n      else if ( \"suggest\".equals( n ) )  {\n        _suggestInfo = (Map<String,NamedList<Object>>) res.getVal( i );\n        extractSuggesterInfo(_suggestInfo);\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( \"moreLikeThis\".equals( n ) ) {\n        _moreLikeThisInfo = (NamedList<SolrDocumentList>) res.getVal( i );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        NamedList map = (NamedList) res.getVal(i);\n        _expandedResults = map.asMap(1);\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if (\"clusters\".equals(n)) {\n        _clusterInfo = (ArrayList<NamedList<Object>>) res.getVal(i);\n        extractClusteringInfo(_clusterInfo);\n      }\n      else if ( \"suggest\".equals( n ) )  {\n        _suggestInfo = (Map<String,NamedList<Object>>) res.getVal( i );\n        extractSuggesterInfo(_suggestInfo);\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( \"moreLikeThis\".equals( n ) ) {\n        _moreLikeThisInfo = (NamedList<SolrDocumentList>) res.getVal( i );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"rawtypes\"})\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        NamedList map = (NamedList) res.getVal(i);\n        _expandedResults = map.asMap(1);\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if (\"clusters\".equals(n)) {\n        _clusterInfo = (ArrayList<NamedList<Object>>) res.getVal(i);\n        extractClusteringInfo(_clusterInfo);\n      }\n      else if (\"facets\".equals(n)) {\n        _jsonFacetingInfo = (NamedList<Object>) res.getVal(i);\n        // Don't call extractJsonFacetingInfo(_jsonFacetingInfo) here in an effort to do it lazily\n      }\n      else if ( \"suggest\".equals( n ) )  {\n        _suggestInfo = (Map<String,NamedList<Object>>) res.getVal( i );\n        extractSuggesterInfo(_suggestInfo);\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( \"moreLikeThis\".equals( n ) ) {\n        _moreLikeThisInfo = (NamedList<SolrDocumentList>) res.getVal( i );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"grouped\".equals( n ) ) {\n        _groupedInfo = (NamedList<Object>) res.getVal( i );\n        extractGroupedInfo( _groupedInfo );\n      }\n      else if(\"expanded\".equals(n)) {\n        NamedList map = (NamedList) res.getVal(i);\n        _expandedResults = map.asMap(1);\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if (\"clusters\".equals(n)) {\n        _clusterInfo = (ArrayList<NamedList<Object>>) res.getVal(i);\n        extractClusteringInfo(_clusterInfo);\n      }\n      else if (\"facets\".equals(n)) {\n        _jsonFacetingInfo = (NamedList<Object>) res.getVal(i);\n        // Don't call extractJsonFacetingInfo(_jsonFacetingInfo) here in an effort to do it lazily\n      }\n      else if ( \"suggest\".equals( n ) )  {\n        _suggestInfo = (Map<String,NamedList<Object>>) res.getVal( i );\n        extractSuggesterInfo(_suggestInfo);\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n      else if ( \"moreLikeThis\".equals( n ) ) {\n        _moreLikeThisInfo = (NamedList<SolrDocumentList>) res.getVal( i );\n      }\n      else if ( CursorMarkParams.CURSOR_MARK_NEXT.equals( n ) ) {\n        _cursorMarkNext = (String) res.getVal( i );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06b9a8e8cd9cc9a3abf5a6ff15e49624e225b22a":["84bc0ab6faa849a8e6667f3bce45874b858d44c9"],"84bc0ab6faa849a8e6667f3bce45874b858d44c9":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"e837b9e725093b56ed9d86c0ea3fe415bccd4b58":["c26f00b574427b55127e869b935845554afde1fa"],"a4302dfeb5d01c940f69c48bec27f03ad8828668":["7e24ef15e7e97c77f0829a62180966fccd2e94b5"],"343d2d9477b299075fa3a19a46e654b6c3bf552b":["469904587e47b677b125b4bb303304e1ef04e961"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["e837b9e725093b56ed9d86c0ea3fe415bccd4b58"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["07feaa572dd3645c2013be127176350b3f4cd6a2"],"7e24ef15e7e97c77f0829a62180966fccd2e94b5":["096ce9d7ec9914ca48a630b7686cc0a413cb74d7","8c3d088739fca447f2b8455a020c68bc2c74f14b"],"096ce9d7ec9914ca48a630b7686cc0a413cb74d7":["06b9a8e8cd9cc9a3abf5a6ff15e49624e225b22a"],"07feaa572dd3645c2013be127176350b3f4cd6a2":["194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53"],"469904587e47b677b125b4bb303304e1ef04e961":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"0c924d4069ef5a5bc479a493befe0121aada6896":["343d2d9477b299075fa3a19a46e654b6c3bf552b","84bc0ab6faa849a8e6667f3bce45874b858d44c9"],"194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53":["7e24ef15e7e97c77f0829a62180966fccd2e94b5"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["096ce9d7ec9914ca48a630b7686cc0a413cb74d7","8c3d088739fca447f2b8455a020c68bc2c74f14b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f9dec2d3920a73691e8110290418baf8efad1303":["06b9a8e8cd9cc9a3abf5a6ff15e49624e225b22a","096ce9d7ec9914ca48a630b7686cc0a413cb74d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"8c3d088739fca447f2b8455a020c68bc2c74f14b":["096ce9d7ec9914ca48a630b7686cc0a413cb74d7"]},"commit2Childs":{"06b9a8e8cd9cc9a3abf5a6ff15e49624e225b22a":["096ce9d7ec9914ca48a630b7686cc0a413cb74d7","f9dec2d3920a73691e8110290418baf8efad1303"],"84bc0ab6faa849a8e6667f3bce45874b858d44c9":["06b9a8e8cd9cc9a3abf5a6ff15e49624e225b22a","0c924d4069ef5a5bc479a493befe0121aada6896"],"e837b9e725093b56ed9d86c0ea3fe415bccd4b58":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"a4302dfeb5d01c940f69c48bec27f03ad8828668":[],"343d2d9477b299075fa3a19a46e654b6c3bf552b":["84bc0ab6faa849a8e6667f3bce45874b858d44c9","0c924d4069ef5a5bc479a493befe0121aada6896"],"c26f00b574427b55127e869b935845554afde1fa":["e837b9e725093b56ed9d86c0ea3fe415bccd4b58"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["469904587e47b677b125b4bb303304e1ef04e961"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7e24ef15e7e97c77f0829a62180966fccd2e94b5":["a4302dfeb5d01c940f69c48bec27f03ad8828668","194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53"],"096ce9d7ec9914ca48a630b7686cc0a413cb74d7":["7e24ef15e7e97c77f0829a62180966fccd2e94b5","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","f9dec2d3920a73691e8110290418baf8efad1303","8c3d088739fca447f2b8455a020c68bc2c74f14b"],"469904587e47b677b125b4bb303304e1ef04e961":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"07feaa572dd3645c2013be127176350b3f4cd6a2":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"0c924d4069ef5a5bc479a493befe0121aada6896":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53":["07feaa572dd3645c2013be127176350b3f4cd6a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f9dec2d3920a73691e8110290418baf8efad1303":[],"8c3d088739fca447f2b8455a020c68bc2c74f14b":["7e24ef15e7e97c77f0829a62180966fccd2e94b5","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a4302dfeb5d01c940f69c48bec27f03ad8828668","0c924d4069ef5a5bc479a493befe0121aada6896","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","a258fbb26824fd104ed795e5d9033d2d040049ee","f9dec2d3920a73691e8110290418baf8efad1303","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}