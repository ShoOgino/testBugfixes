{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testExampleKeystorePath().mjava","commits":[{"id":"82f3f6e1a1e11b4620e73bf779193437428d9374","date":1370282281,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testExampleKeystorePath().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A trivial test that verifies the example keystore used for SSL testing can be \n   * found using the base class. this helps future-proof against hte possibility of \n   * something moving/breaking thekeystore path in a way that results in the SSL \n   * randomization logic being forced to silently never use SSL.  (We can't enforce \n   * this type of check in the base class because then it would not be usable by client \n   * code depending on the test framework\n   */\n  public void testExampleKeystorePath() {\n    assertNotNull(\"Example keystore is null, meaning that something has changed in the \" +\n                  \"structure of the example configs and/or ExternalPaths.java - \" + \n                  \"SSL randomization is broken\",\n                  getExampleKeystoreFile());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dee311b2816356910363a8d15fc076caf6367eb","date":1392012517,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testExampleKeystorePath().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testExampleKeystorePath().mjava","sourceNew":"  /**\n   * A trivial test that verifies the example keystore used for SSL testing can be \n   * found using the base class. this helps future-proof against the possibility of \n   * something moving/breaking the keystore path in a way that results in the SSL \n   * randomization logic being forced to silently never use SSL.  (We can't enforce \n   * this type of check in the base class because then it would not be usable by client \n   * code depending on the test framework\n   */\n  public void testExampleKeystorePath() {\n    assertNotNull(\"Example keystore is null, meaning that something has changed in the \" +\n                  \"structure of the example configs and/or ExternalPaths.java - \" + \n                  \"SSL randomization is broken\",\n                  SSLTestConfig.TEST_KEYSTORE);\n  }\n\n","sourceOld":"  /**\n   * A trivial test that verifies the example keystore used for SSL testing can be \n   * found using the base class. this helps future-proof against hte possibility of \n   * something moving/breaking thekeystore path in a way that results in the SSL \n   * randomization logic being forced to silently never use SSL.  (We can't enforce \n   * this type of check in the base class because then it would not be usable by client \n   * code depending on the test framework\n   */\n  public void testExampleKeystorePath() {\n    assertNotNull(\"Example keystore is null, meaning that something has changed in the \" +\n                  \"structure of the example configs and/or ExternalPaths.java - \" + \n                  \"SSL randomization is broken\",\n                  getExampleKeystoreFile());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testExampleKeystorePath().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testExampleKeystorePath().mjava","sourceNew":"  /**\n   * A trivial test that verifies the example keystore used for SSL testing can be \n   * found using the base class. this helps future-proof against the possibility of \n   * something moving/breaking the keystore path in a way that results in the SSL \n   * randomization logic being forced to silently never use SSL.  (We can't enforce \n   * this type of check in the base class because then it would not be usable by client \n   * code depending on the test framework\n   */\n  public void testExampleKeystorePath() {\n    assertNotNull(\"Example keystore is null, meaning that something has changed in the \" +\n                  \"structure of the example configs and/or ExternalPaths.java - \" + \n                  \"SSL randomization is broken\",\n                  SSLTestConfig.TEST_KEYSTORE);\n  }\n\n","sourceOld":"  /**\n   * A trivial test that verifies the example keystore used for SSL testing can be \n   * found using the base class. this helps future-proof against the possibility of \n   * something moving/breaking the keystore path in a way that results in the SSL \n   * randomization logic being forced to silently never use SSL.  (We can't enforce \n   * this type of check in the base class because then it would not be usable by client \n   * code depending on the test framework\n   */\n  public void testExampleKeystorePath() {\n    assertNotNull(\"Example keystore is null, meaning that something has changed in the \" +\n                  \"structure of the example configs and/or ExternalPaths.java - \" + \n                  \"SSL randomization is broken\",\n                  SSLTestConfig.TEST_KEYSTORE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"82f3f6e1a1e11b4620e73bf779193437428d9374":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dee311b2816356910363a8d15fc076caf6367eb":["82f3f6e1a1e11b4620e73bf779193437428d9374"],"bafca15d8e408346a67f4282ad1143b88023893b":["9dee311b2816356910363a8d15fc076caf6367eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"82f3f6e1a1e11b4620e73bf779193437428d9374":["9dee311b2816356910363a8d15fc076caf6367eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82f3f6e1a1e11b4620e73bf779193437428d9374"],"9dee311b2816356910363a8d15fc076caf6367eb":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}