{"path":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#doTestRandom(int).mjava","commits":[{"id":"3e21d7642ee7e0c00429964e5b47504602fe218c","date":1460897579,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#doTestRandom(int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#doTestRandom(int).mjava","sourceNew":"  private void doTestRandom(int count) throws Exception {\n\n    int numPoints = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numPoints=\" + numPoints);\n    }\n\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean small = random().nextBoolean();\n\n    boolean haveRealDoc = false;\n\n    for (int id=0;id<numPoints;id++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[id] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (id > 0 && x < 3 && haveRealDoc) {\n        int oldID;\n        while (true) {\n          oldID = random().nextInt(id);\n          if (Double.isNaN(lats[oldID]) == false) {\n            break;\n          }\n        }\n            \n        if (x == 0) {\n          // Identical lat to old point\n          lats[id] = lats[oldID];\n          lons[id] = randomLon(small);\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (same lat as doc=\" + oldID + \")\");\n          }\n        } else if (x == 1) {\n          // Identical lon to old point\n          lats[id] = randomLat(small);\n          lons[id] = lons[oldID];\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (same lon as doc=\" + oldID + \")\");\n          }\n        } else {\n          assert x == 2;\n          // Fully identical point:\n          lats[id] = lats[oldID];\n          lons[id] = lons[oldID];\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (same lat/lon as doc=\" + oldID + \")\");\n          }\n        }\n      } else {\n        lats[id] = randomLat(small);\n        lons[id] = randomLon(small);\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id]);\n        }\n      }\n    }\n\n    verify(small, lats, lons);\n  }\n\n","sourceOld":"  private void doTestRandom(int count) throws Exception {\n\n    int numPoints = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numPoints=\" + numPoints);\n    }\n\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean small = random().nextBoolean();\n\n    boolean haveRealDoc = false;\n\n    for (int id=0;id<numPoints;id++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[id] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (id > 0 && x < 3 && haveRealDoc) {\n        int oldID;\n        while (true) {\n          oldID = random().nextInt(id);\n          if (Double.isNaN(lats[oldID]) == false) {\n            break;\n          }\n        }\n            \n        if (x == 0) {\n          // Identical lat to old point\n          lats[id] = lats[oldID];\n          lons[id] = randomLon(small);\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (same lat as doc=\" + oldID + \")\");\n          }\n        } else if (x == 1) {\n          // Identical lon to old point\n          lats[id] = randomLat(small);\n          lons[id] = lons[oldID];\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (same lon as doc=\" + oldID + \")\");\n          }\n        } else {\n          assert x == 2;\n          // Fully identical point:\n          lats[id] = lats[oldID];\n          lons[id] = lons[oldID];\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (same lat/lon as doc=\" + oldID + \")\");\n          }\n        }\n      } else {\n        lats[id] = randomLat(small);\n        lons[id] = randomLon(small);\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id]);\n        }\n      }\n    }\n\n    verify(small, lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8cb57c50beb99a1245256e866350af8e5ea1f36","date":1460921840,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#doTestRandom(int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#doTestRandom(int).mjava","sourceNew":"  private void doTestRandom(int count) throws Exception {\n\n    int numPoints = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numPoints=\" + numPoints);\n    }\n\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean small = random().nextBoolean();\n\n    boolean haveRealDoc = false;\n\n    for (int id=0;id<numPoints;id++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[id] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (id > 0 && x < 3 && haveRealDoc) {\n        int oldID;\n        while (true) {\n          oldID = random().nextInt(id);\n          if (Double.isNaN(lats[oldID]) == false) {\n            break;\n          }\n        }\n            \n        if (x == 0) {\n          // Identical lat to old point\n          lats[id] = lats[oldID];\n          lons[id] = randomLon(small);\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (same lat as doc=\" + oldID + \")\");\n          }\n        } else if (x == 1) {\n          // Identical lon to old point\n          lats[id] = randomLat(small);\n          lons[id] = lons[oldID];\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (same lon as doc=\" + oldID + \")\");\n          }\n        } else {\n          assert x == 2;\n          // Fully identical point:\n          lats[id] = lats[oldID];\n          lons[id] = lons[oldID];\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (same lat/lon as doc=\" + oldID + \")\");\n          }\n        }\n      } else {\n        lats[id] = randomLat(small);\n        lons[id] = randomLon(small);\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id]);\n        }\n      }\n    }\n\n    verify(small, lats, lons);\n  }\n\n","sourceOld":"  private void doTestRandom(int count) throws Exception {\n\n    int numPoints = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numPoints=\" + numPoints);\n    }\n\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean small = random().nextBoolean();\n\n    boolean haveRealDoc = false;\n\n    for (int id=0;id<numPoints;id++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[id] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (id > 0 && x < 3 && haveRealDoc) {\n        int oldID;\n        while (true) {\n          oldID = random().nextInt(id);\n          if (Double.isNaN(lats[oldID]) == false) {\n            break;\n          }\n        }\n            \n        if (x == 0) {\n          // Identical lat to old point\n          lats[id] = lats[oldID];\n          lons[id] = randomLon(small);\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (same lat as doc=\" + oldID + \")\");\n          }\n        } else if (x == 1) {\n          // Identical lon to old point\n          lats[id] = randomLat(small);\n          lons[id] = lons[oldID];\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (same lon as doc=\" + oldID + \")\");\n          }\n        } else {\n          assert x == 2;\n          // Fully identical point:\n          lats[id] = lats[oldID];\n          lons[id] = lons[oldID];\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (same lat/lon as doc=\" + oldID + \")\");\n          }\n        }\n      } else {\n        lats[id] = randomLat(small);\n        lons[id] = randomLon(small);\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id]);\n        }\n      }\n    }\n\n    verify(small, lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2","date":1460953142,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#doTestRandom(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#doTestRandom(int).mjava","sourceNew":"  private void doTestRandom(int count) throws Exception {\n\n    int numPoints = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numPoints=\" + numPoints);\n    }\n\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    for (int id=0;id<numPoints;id++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[id] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (id > 0 && x < 3 && haveRealDoc) {\n        int oldID;\n        while (true) {\n          oldID = random().nextInt(id);\n          if (Double.isNaN(lats[oldID]) == false) {\n            break;\n          }\n        }\n            \n        if (x == 0) {\n          // Identical lat to old point\n          lats[id] = lats[oldID];\n          lons[id] = nextLongitude();\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (same lat as doc=\" + oldID + \")\");\n          }\n        } else if (x == 1) {\n          // Identical lon to old point\n          lats[id] = nextLatitude();\n          lons[id] = lons[oldID];\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (same lon as doc=\" + oldID + \")\");\n          }\n        } else {\n          assert x == 2;\n          // Fully identical point:\n          lats[id] = lats[oldID];\n          lons[id] = lons[oldID];\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (same lat/lon as doc=\" + oldID + \")\");\n          }\n        }\n      } else {\n        lats[id] = nextLatitude();\n        lons[id] = nextLongitude();\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id]);\n        }\n      }\n    }\n\n    verify(lats, lons);\n  }\n\n","sourceOld":"  private void doTestRandom(int count) throws Exception {\n\n    int numPoints = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numPoints=\" + numPoints);\n    }\n\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean small = random().nextBoolean();\n\n    boolean haveRealDoc = false;\n\n    for (int id=0;id<numPoints;id++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[id] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (id > 0 && x < 3 && haveRealDoc) {\n        int oldID;\n        while (true) {\n          oldID = random().nextInt(id);\n          if (Double.isNaN(lats[oldID]) == false) {\n            break;\n          }\n        }\n            \n        if (x == 0) {\n          // Identical lat to old point\n          lats[id] = lats[oldID];\n          lons[id] = randomLon(small);\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (same lat as doc=\" + oldID + \")\");\n          }\n        } else if (x == 1) {\n          // Identical lon to old point\n          lats[id] = randomLat(small);\n          lons[id] = lons[oldID];\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (same lon as doc=\" + oldID + \")\");\n          }\n        } else {\n          assert x == 2;\n          // Fully identical point:\n          lats[id] = lats[oldID];\n          lons[id] = lons[oldID];\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (same lat/lon as doc=\" + oldID + \")\");\n          }\n        }\n      } else {\n        lats[id] = randomLat(small);\n        lons[id] = randomLon(small);\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id]);\n        }\n      }\n    }\n\n    verify(small, lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#doTestRandom(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#doTestRandom(int).mjava","sourceNew":"  private void doTestRandom(int count) throws Exception {\n\n    int numPoints = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numPoints=\" + numPoints);\n    }\n\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    for (int id=0;id<numPoints;id++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[id] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (id > 0 && x < 3 && haveRealDoc) {\n        int oldID;\n        while (true) {\n          oldID = random().nextInt(id);\n          if (Double.isNaN(lats[oldID]) == false) {\n            break;\n          }\n        }\n            \n        if (x == 0) {\n          // Identical lat to old point\n          lats[id] = lats[oldID];\n          lons[id] = nextLongitude();\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (same lat as doc=\" + oldID + \")\");\n          }\n        } else if (x == 1) {\n          // Identical lon to old point\n          lats[id] = nextLatitude();\n          lons[id] = lons[oldID];\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (same lon as doc=\" + oldID + \")\");\n          }\n        } else {\n          assert x == 2;\n          // Fully identical point:\n          lats[id] = lats[oldID];\n          lons[id] = lons[oldID];\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (same lat/lon as doc=\" + oldID + \")\");\n          }\n        }\n      } else {\n        lats[id] = nextLatitude();\n        lons[id] = nextLongitude();\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id]);\n        }\n      }\n    }\n\n    verify(lats, lons);\n  }\n\n","sourceOld":"  private void doTestRandom(int count) throws Exception {\n\n    int numPoints = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numPoints=\" + numPoints);\n    }\n\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean small = random().nextBoolean();\n\n    boolean haveRealDoc = false;\n\n    for (int id=0;id<numPoints;id++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[id] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (id > 0 && x < 3 && haveRealDoc) {\n        int oldID;\n        while (true) {\n          oldID = random().nextInt(id);\n          if (Double.isNaN(lats[oldID]) == false) {\n            break;\n          }\n        }\n            \n        if (x == 0) {\n          // Identical lat to old point\n          lats[id] = lats[oldID];\n          lons[id] = randomLon(small);\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (same lat as doc=\" + oldID + \")\");\n          }\n        } else if (x == 1) {\n          // Identical lon to old point\n          lats[id] = randomLat(small);\n          lons[id] = lons[oldID];\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (same lon as doc=\" + oldID + \")\");\n          }\n        } else {\n          assert x == 2;\n          // Fully identical point:\n          lats[id] = lats[oldID];\n          lons[id] = lons[oldID];\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" (same lat/lon as doc=\" + oldID + \")\");\n          }\n        }\n      } else {\n        lats[id] = randomLat(small);\n        lons[id] = randomLon(small);\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" lat=\" + lats[id] + \" lon=\" + lons[id]);\n        }\n      }\n    }\n\n    verify(small, lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"713122036535651642e6d4fe57ce12b449e18473":["f8cb57c50beb99a1245256e866350af8e5ea1f36","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"3e21d7642ee7e0c00429964e5b47504602fe218c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e21d7642ee7e0c00429964e5b47504602fe218c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["713122036535651642e6d4fe57ce12b449e18473"]},"commit2Childs":{"713122036535651642e6d4fe57ce12b449e18473":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e21d7642ee7e0c00429964e5b47504602fe218c","f8cb57c50beb99a1245256e866350af8e5ea1f36"],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["713122036535651642e6d4fe57ce12b449e18473"],"3e21d7642ee7e0c00429964e5b47504602fe218c":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["713122036535651642e6d4fe57ce12b449e18473","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}