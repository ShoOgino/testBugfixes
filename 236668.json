{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#count(Query).mjava","commits":[{"id":"308eabc0d18aa58a75b0a130d08524e98661807b","date":1425056617,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#count(Query).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Count how many documents match the given query.\n   */\n  public int count(Query query) throws IOException {\n    final CollectorManager<TotalHitCountCollector, Integer> collectorManager = new CollectorManager<TotalHitCountCollector, Integer>() {\n\n      @Override\n      public TotalHitCountCollector newCollector() throws IOException {\n        return new TotalHitCountCollector();\n      }\n\n      @Override\n      public Integer reduce(Collection<TotalHitCountCollector> collectors) throws IOException {\n        int total = 0;\n        for (TotalHitCountCollector collector : collectors) {\n          total += collector.getTotalHits();\n        }\n        return total;\n      }\n\n    };\n    return search(query, collectorManager);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#count(Query).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Count how many documents match the given query.\n   */\n  public int count(Query query) throws IOException {\n    final CollectorManager<TotalHitCountCollector, Integer> collectorManager = new CollectorManager<TotalHitCountCollector, Integer>() {\n\n      @Override\n      public TotalHitCountCollector newCollector() throws IOException {\n        return new TotalHitCountCollector();\n      }\n\n      @Override\n      public Integer reduce(Collection<TotalHitCountCollector> collectors) throws IOException {\n        int total = 0;\n        for (TotalHitCountCollector collector : collectors) {\n          total += collector.getTotalHits();\n        }\n        return total;\n      }\n\n    };\n    return search(query, collectorManager);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0a65e308c1642d1ffb120ffae140f08362e92a7","date":1441197397,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#count(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#count(Query).mjava","sourceNew":"  /**\n   * Count how many documents match the given query.\n   */\n  public int count(Query query) throws IOException {\n    query = rewrite(query);\n    while (true) {\n      // remove wrappers that don't matter for counts\n      if (query instanceof ConstantScoreQuery) {\n        query = ((ConstantScoreQuery) query).getQuery();\n      } else {\n        break;\n      }\n    }\n\n    // some counts can be computed in constant time\n    if (query instanceof MatchAllDocsQuery) {\n      return reader.numDocs();\n    } else if (query instanceof TermQuery && reader.hasDeletions() == false) {\n      Term term = ((TermQuery) query).getTerm();\n      int count = 0;\n      for (LeafReaderContext leaf : reader.leaves()) {\n        count += leaf.reader().docFreq(term);\n      }\n      return count;\n    }\n\n    // general case: create a collecor and count matches\n    final CollectorManager<TotalHitCountCollector, Integer> collectorManager = new CollectorManager<TotalHitCountCollector, Integer>() {\n\n      @Override\n      public TotalHitCountCollector newCollector() throws IOException {\n        return new TotalHitCountCollector();\n      }\n\n      @Override\n      public Integer reduce(Collection<TotalHitCountCollector> collectors) throws IOException {\n        int total = 0;\n        for (TotalHitCountCollector collector : collectors) {\n          total += collector.getTotalHits();\n        }\n        return total;\n      }\n\n    };\n    return search(query, collectorManager);\n  }\n\n","sourceOld":"  /**\n   * Count how many documents match the given query.\n   */\n  public int count(Query query) throws IOException {\n    final CollectorManager<TotalHitCountCollector, Integer> collectorManager = new CollectorManager<TotalHitCountCollector, Integer>() {\n\n      @Override\n      public TotalHitCountCollector newCollector() throws IOException {\n        return new TotalHitCountCollector();\n      }\n\n      @Override\n      public Integer reduce(Collection<TotalHitCountCollector> collectors) throws IOException {\n        int total = 0;\n        for (TotalHitCountCollector collector : collectors) {\n          total += collector.getTotalHits();\n        }\n        return total;\n      }\n\n    };\n    return search(query, collectorManager);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2af44fa9bd43d5df330d6438c1af390323f7d567","date":1574847240,"type":3,"author":"Benedict Jin","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#count(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#count(Query).mjava","sourceNew":"  /**\n   * Count how many documents match the given query.\n   */\n  public int count(Query query) throws IOException {\n    query = rewrite(query);\n    while (true) {\n      // remove wrappers that don't matter for counts\n      if (query instanceof ConstantScoreQuery) {\n        query = ((ConstantScoreQuery) query).getQuery();\n      } else {\n        break;\n      }\n    }\n\n    // some counts can be computed in constant time\n    if (query instanceof MatchAllDocsQuery) {\n      return reader.numDocs();\n    } else if (query instanceof TermQuery && reader.hasDeletions() == false) {\n      Term term = ((TermQuery) query).getTerm();\n      int count = 0;\n      for (LeafReaderContext leaf : reader.leaves()) {\n        count += leaf.reader().docFreq(term);\n      }\n      return count;\n    }\n\n    // general case: create a collector and count matches\n    final CollectorManager<TotalHitCountCollector, Integer> collectorManager = new CollectorManager<TotalHitCountCollector, Integer>() {\n\n      @Override\n      public TotalHitCountCollector newCollector() throws IOException {\n        return new TotalHitCountCollector();\n      }\n\n      @Override\n      public Integer reduce(Collection<TotalHitCountCollector> collectors) throws IOException {\n        int total = 0;\n        for (TotalHitCountCollector collector : collectors) {\n          total += collector.getTotalHits();\n        }\n        return total;\n      }\n\n    };\n    return search(query, collectorManager);\n  }\n\n","sourceOld":"  /**\n   * Count how many documents match the given query.\n   */\n  public int count(Query query) throws IOException {\n    query = rewrite(query);\n    while (true) {\n      // remove wrappers that don't matter for counts\n      if (query instanceof ConstantScoreQuery) {\n        query = ((ConstantScoreQuery) query).getQuery();\n      } else {\n        break;\n      }\n    }\n\n    // some counts can be computed in constant time\n    if (query instanceof MatchAllDocsQuery) {\n      return reader.numDocs();\n    } else if (query instanceof TermQuery && reader.hasDeletions() == false) {\n      Term term = ((TermQuery) query).getTerm();\n      int count = 0;\n      for (LeafReaderContext leaf : reader.leaves()) {\n        count += leaf.reader().docFreq(term);\n      }\n      return count;\n    }\n\n    // general case: create a collecor and count matches\n    final CollectorManager<TotalHitCountCollector, Integer> collectorManager = new CollectorManager<TotalHitCountCollector, Integer>() {\n\n      @Override\n      public TotalHitCountCollector newCollector() throws IOException {\n        return new TotalHitCountCollector();\n      }\n\n      @Override\n      public Integer reduce(Collection<TotalHitCountCollector> collectors) throws IOException {\n        int total = 0;\n        for (TotalHitCountCollector collector : collectors) {\n          total += collector.getTotalHits();\n        }\n        return total;\n      }\n\n    };\n    return search(query, collectorManager);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","308eabc0d18aa58a75b0a130d08524e98661807b"],"f0a65e308c1642d1ffb120ffae140f08362e92a7":["308eabc0d18aa58a75b0a130d08524e98661807b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"308eabc0d18aa58a75b0a130d08524e98661807b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2af44fa9bd43d5df330d6438c1af390323f7d567":["f0a65e308c1642d1ffb120ffae140f08362e92a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2af44fa9bd43d5df330d6438c1af390323f7d567"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"f0a65e308c1642d1ffb120ffae140f08362e92a7":["2af44fa9bd43d5df330d6438c1af390323f7d567"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","308eabc0d18aa58a75b0a130d08524e98661807b"],"308eabc0d18aa58a75b0a130d08524e98661807b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","f0a65e308c1642d1ffb120ffae140f08362e92a7"],"2af44fa9bd43d5df330d6438c1af390323f7d567":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}