{"path":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[String],String,List[String],String).mjava","commits":[{"id":"c1bfdd692c5b78fe01e8f90339fb1edbcc887a90","date":1461958396,"type":1,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[String],String,List[String],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[String],List[String],List[String],String).mjava","sourceNew":"  /** Executes a Solr query on the underlying table.\n   *\n   * @param properties Connections properties\n   * @param fields List of fields to project\n   * @param query A string for the query\n   * @return Enumerator of results\n   */\n  public Enumerable<Object> query(final Properties properties, List<String> fields,\n                                  String query, List<String> order, String limit) {\n    Map<String, String> solrParams = new HashMap<>();\n    //solrParams.put(CommonParams.OMIT_HEADER, \"true\");\n    solrParams.put(CommonParams.Q, \"*:*\");\n    //solrParams.put(CommonParams.QT, \"/export\");\n\n    if (fields.isEmpty()) {\n      solrParams.put(CommonParams.FL, \"*\");\n    } else {\n      solrParams.put(CommonParams.FL, String.join(\",\", fields));\n    }\n\n    if (query == null) {\n      solrParams.put(CommonParams.FQ, \"*:*\");\n    } else {\n      // SolrParams should be a ModifiableParams instead of a map so we could add multiple FQs\n      solrParams.put(CommonParams.FQ, query);\n    }\n\n    // Build and issue the query and return an Enumerator over the results\n    if (order.isEmpty()) {\n      solrParams.put(CommonParams.SORT, DEFAULT_SORT_FIELD + \" desc\");\n\n      // Make sure the default sort field is in the field list\n      String fl = solrParams.get(CommonParams.FL);\n      if(!fl.contains(DEFAULT_SORT_FIELD)) {\n        solrParams.put(CommonParams.FL, String.join(\",\", fl, DEFAULT_SORT_FIELD));\n      }\n    } else {\n      solrParams.put(CommonParams.SORT, String.join(\",\", order));\n    }\n\n    TupleStream tupleStream;\n    try {\n      String zk = properties.getProperty(\"zk\");\n      tupleStream = new CloudSolrStream(zk, collection, solrParams);\n      if(limit != null) {\n        tupleStream = new LimitStream(tupleStream, Integer.parseInt(limit));\n      }\n\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    final TupleStream finalStream = tupleStream;\n\n    return new AbstractEnumerable<Object>() {\n      public Enumerator<Object> enumerator() {\n        return new SolrEnumerator(finalStream, fields);\n      }\n    };\n  }\n\n","sourceOld":"  /** Executes a Solr query on the underlying table.\n   *\n   * @param properties Connections properties\n   * @param fields List of fields to project\n   * @param filterQueries A list of filterQueries which should be used in the query\n   * @return Enumerator of results\n   */\n  public Enumerable<Object> query(final Properties properties, List<String> fields,\n                                  List<String> filterQueries, List<String> order, String limit) {\n    Map<String, String> solrParams = new HashMap<>();\n    //solrParams.put(CommonParams.OMIT_HEADER, \"true\");\n    solrParams.put(CommonParams.Q, \"*:*\");\n    //solrParams.put(CommonParams.QT, \"/export\");\n\n    if (fields.isEmpty()) {\n      solrParams.put(CommonParams.FL, \"*\");\n    } else {\n      solrParams.put(CommonParams.FL, String.join(\",\", fields));\n    }\n\n    if (filterQueries.isEmpty()) {\n      solrParams.put(CommonParams.FQ, \"*:*\");\n    } else {\n      // SolrParams should be a ModifiableParams instead of a map so we could add multiple FQs\n      solrParams.put(CommonParams.FQ, String.join(\" OR \", filterQueries));\n    }\n\n    // Build and issue the query and return an Enumerator over the results\n    if (order.isEmpty()) {\n      solrParams.put(CommonParams.SORT, DEFAULT_SORT_FIELD + \" desc\");\n\n      // Make sure the default sort field is in the field list\n      String fl = solrParams.get(CommonParams.FL);\n      if(!fl.contains(DEFAULT_SORT_FIELD)) {\n        solrParams.put(CommonParams.FL, String.join(\",\", fl, DEFAULT_SORT_FIELD));\n      }\n    } else {\n      solrParams.put(CommonParams.SORT, String.join(\",\", order));\n    }\n\n    return new AbstractEnumerable<Object>() {\n      public Enumerator<Object> enumerator() {\n        TupleStream tupleStream;\n        try {\n          String zk = properties.getProperty(\"zk\");\n          tupleStream = new CloudSolrStream(zk, collection, solrParams);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        return new SolrEnumerator(tupleStream, fields);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef","date":1462373155,"type":4,"author":"Kevin Risden","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[String],String,List[String],String).mjava","sourceNew":null,"sourceOld":"  /** Executes a Solr query on the underlying table.\n   *\n   * @param properties Connections properties\n   * @param fields List of fields to project\n   * @param query A string for the query\n   * @return Enumerator of results\n   */\n  public Enumerable<Object> query(final Properties properties, List<String> fields,\n                                  String query, List<String> order, String limit) {\n    Map<String, String> solrParams = new HashMap<>();\n    //solrParams.put(CommonParams.OMIT_HEADER, \"true\");\n    solrParams.put(CommonParams.Q, \"*:*\");\n    //solrParams.put(CommonParams.QT, \"/export\");\n\n    if (fields.isEmpty()) {\n      solrParams.put(CommonParams.FL, \"*\");\n    } else {\n      solrParams.put(CommonParams.FL, String.join(\",\", fields));\n    }\n\n    if (query == null) {\n      solrParams.put(CommonParams.FQ, \"*:*\");\n    } else {\n      // SolrParams should be a ModifiableParams instead of a map so we could add multiple FQs\n      solrParams.put(CommonParams.FQ, query);\n    }\n\n    // Build and issue the query and return an Enumerator over the results\n    if (order.isEmpty()) {\n      solrParams.put(CommonParams.SORT, DEFAULT_SORT_FIELD + \" desc\");\n\n      // Make sure the default sort field is in the field list\n      String fl = solrParams.get(CommonParams.FL);\n      if(!fl.contains(DEFAULT_SORT_FIELD)) {\n        solrParams.put(CommonParams.FL, String.join(\",\", fl, DEFAULT_SORT_FIELD));\n      }\n    } else {\n      solrParams.put(CommonParams.SORT, String.join(\",\", order));\n    }\n\n    TupleStream tupleStream;\n    try {\n      String zk = properties.getProperty(\"zk\");\n      tupleStream = new CloudSolrStream(zk, collection, solrParams);\n      if(limit != null) {\n        tupleStream = new LimitStream(tupleStream, Integer.parseInt(limit));\n      }\n\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    final TupleStream finalStream = tupleStream;\n\n    return new AbstractEnumerable<Object>() {\n      public Enumerator<Object> enumerator() {\n        return new SolrEnumerator(finalStream, fields);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c1bfdd692c5b78fe01e8f90339fb1edbcc887a90":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef":["c1bfdd692c5b78fe01e8f90339fb1edbcc887a90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c1bfdd692c5b78fe01e8f90339fb1edbcc887a90":["724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c1bfdd692c5b78fe01e8f90339fb1edbcc887a90","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}