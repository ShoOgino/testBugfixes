{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOException {\n\n    // forceMerge, addIndexes or finishMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final List<SegmentInfo> sourceSegments = merge.segments;\n      for(SegmentInfo info : sourceSegments) {\n        mergingSegments.remove(info);\n      }\n      // TODO: if we remove the add in _mergeInit, we should\n      // also remove this:\n      mergingSegments.remove(merge.info);\n      merge.registerDone = false;\n    }\n\n    runningMerges.remove(merge);\n  }\n\n","sourceOld":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOException {\n\n    // forceMerge, addIndexes or finishMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final List<SegmentInfo> sourceSegments = merge.segments;\n      for(SegmentInfo info : sourceSegments) {\n        mergingSegments.remove(info);\n      }\n      // TODO: if we remove the add in _mergeInit, we should\n      // also remove this:\n      mergingSegments.remove(merge.info);\n      merge.registerDone = false;\n    }\n\n    runningMerges.remove(merge);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22b3128eea8c61f8f1f387dac6b3e9504bc8036e","date":1337625491,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOException {\n\n    // forceMerge, addIndexes or finishMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final List<SegmentInfo> sourceSegments = merge.segments;\n      for(SegmentInfo info : sourceSegments) {\n        mergingSegments.remove(info);\n      }\n      merge.registerDone = false;\n    }\n\n    runningMerges.remove(merge);\n  }\n\n","sourceOld":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOException {\n\n    // forceMerge, addIndexes or finishMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final List<SegmentInfo> sourceSegments = merge.segments;\n      for(SegmentInfo info : sourceSegments) {\n        mergingSegments.remove(info);\n      }\n      // TODO: if we remove the add in _mergeInit, we should\n      // also remove this:\n      mergingSegments.remove(merge.info);\n      merge.registerDone = false;\n    }\n\n    runningMerges.remove(merge);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOException {\n\n    // forceMerge, addIndexes or finishMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final List<SegmentInfoPerCommit> sourceSegments = merge.segments;\n      for(SegmentInfoPerCommit info : sourceSegments) {\n        mergingSegments.remove(info);\n      }\n      merge.registerDone = false;\n    }\n\n    runningMerges.remove(merge);\n  }\n\n","sourceOld":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOException {\n\n    // forceMerge, addIndexes or finishMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final List<SegmentInfo> sourceSegments = merge.segments;\n      for(SegmentInfo info : sourceSegments) {\n        mergingSegments.remove(info);\n      }\n      merge.registerDone = false;\n    }\n\n    runningMerges.remove(merge);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOException {\n\n    // forceMerge, addIndexes or finishMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final List<SegmentInfoPerCommit> sourceSegments = merge.segments;\n      for(SegmentInfoPerCommit info : sourceSegments) {\n        mergingSegments.remove(info);\n      }\n      merge.registerDone = false;\n    }\n\n    runningMerges.remove(merge);\n  }\n\n","sourceOld":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOException {\n\n    // forceMerge, addIndexes or finishMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final List<SegmentInfo> sourceSegments = merge.segments;\n      for(SegmentInfo info : sourceSegments) {\n        mergingSegments.remove(info);\n      }\n      // TODO: if we remove the add in _mergeInit, we should\n      // also remove this:\n      mergingSegments.remove(merge.info);\n      merge.registerDone = false;\n    }\n\n    runningMerges.remove(merge);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) {\n\n    // forceMerge, addIndexes or finishMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final List<SegmentInfoPerCommit> sourceSegments = merge.segments;\n      for(SegmentInfoPerCommit info : sourceSegments) {\n        mergingSegments.remove(info);\n      }\n      merge.registerDone = false;\n    }\n\n    runningMerges.remove(merge);\n  }\n\n","sourceOld":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOException {\n\n    // forceMerge, addIndexes or finishMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final List<SegmentInfoPerCommit> sourceSegments = merge.segments;\n      for(SegmentInfoPerCommit info : sourceSegments) {\n        mergingSegments.remove(info);\n      }\n      merge.registerDone = false;\n    }\n\n    runningMerges.remove(merge);\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) {\n\n    // forceMerge, addIndexes or finishMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final List<SegmentInfoPerCommit> sourceSegments = merge.segments;\n      for(SegmentInfoPerCommit info : sourceSegments) {\n        mergingSegments.remove(info);\n      }\n      merge.registerDone = false;\n    }\n\n    runningMerges.remove(merge);\n  }\n\n","sourceOld":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOException {\n\n    // forceMerge, addIndexes or finishMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final List<SegmentInfoPerCommit> sourceSegments = merge.segments;\n      for(SegmentInfoPerCommit info : sourceSegments) {\n        mergingSegments.remove(info);\n      }\n      merge.registerDone = false;\n    }\n\n    runningMerges.remove(merge);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) {\n\n    // forceMerge, addIndexes or finishMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final List<SegmentInfoPerCommit> sourceSegments = merge.segments;\n      for (SegmentInfoPerCommit info : sourceSegments) {\n        mergingSegments.remove(info);\n      }\n      merge.registerDone = false;\n    }\n\n    runningMerges.remove(merge);\n  }\n\n","sourceOld":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) {\n\n    // forceMerge, addIndexes or finishMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final List<SegmentInfoPerCommit> sourceSegments = merge.segments;\n      for(SegmentInfoPerCommit info : sourceSegments) {\n        mergingSegments.remove(info);\n      }\n      merge.registerDone = false;\n    }\n\n    runningMerges.remove(merge);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) {\n\n    // forceMerge, addIndexes or finishMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final List<SegmentCommitInfo> sourceSegments = merge.segments;\n      for (SegmentCommitInfo info : sourceSegments) {\n        mergingSegments.remove(info);\n      }\n      merge.registerDone = false;\n    }\n\n    runningMerges.remove(merge);\n  }\n\n","sourceOld":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) {\n\n    // forceMerge, addIndexes or finishMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final List<SegmentInfoPerCommit> sourceSegments = merge.segments;\n      for (SegmentInfoPerCommit info : sourceSegments) {\n        mergingSegments.remove(info);\n      }\n      merge.registerDone = false;\n    }\n\n    runningMerges.remove(merge);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a64ffebe62143a8d4c37d99b6ece6d430d948ebc","date":1408382164,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) {\n\n    // forceMerge, addIndexes or waitForMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final List<SegmentCommitInfo> sourceSegments = merge.segments;\n      for (SegmentCommitInfo info : sourceSegments) {\n        mergingSegments.remove(info);\n      }\n      merge.registerDone = false;\n    }\n\n    runningMerges.remove(merge);\n  }\n\n","sourceOld":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) {\n\n    // forceMerge, addIndexes or finishMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final List<SegmentCommitInfo> sourceSegments = merge.segments;\n      for (SegmentCommitInfo info : sourceSegments) {\n        mergingSegments.remove(info);\n      }\n      merge.registerDone = false;\n    }\n\n    runningMerges.remove(merge);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89697e7abc9807639c384eecf5a2a6eef1080426","date":1587733375,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does finishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  private synchronized void mergeFinish(MergePolicy.OneMerge merge) {\n\n    // forceMerge, addIndexes or waitForMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final List<SegmentCommitInfo> sourceSegments = merge.segments;\n      for (SegmentCommitInfo info : sourceSegments) {\n        mergingSegments.remove(info);\n      }\n      merge.registerDone = false;\n    }\n\n    runningMerges.remove(merge);\n  }\n\n","sourceOld":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) {\n\n    // forceMerge, addIndexes or waitForMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final List<SegmentCommitInfo> sourceSegments = merge.segments;\n      for (SegmentCommitInfo info : sourceSegments) {\n        mergingSegments.remove(info);\n      }\n      merge.registerDone = false;\n    }\n\n    runningMerges.remove(merge);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89697e7abc9807639c384eecf5a2a6eef1080426":["a64ffebe62143a8d4c37d99b6ece6d430d948ebc"],"e072d0b1fc19e0533d8ce432eed245196bca6fde":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9d153abcf92dc5329d98571a8c3035df9bd80648"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["22b3128eea8c61f8f1f387dac6b3e9504bc8036e"],"22b3128eea8c61f8f1f387dac6b3e9504bc8036e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a64ffebe62143a8d4c37d99b6ece6d430d948ebc":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89697e7abc9807639c384eecf5a2a6eef1080426"]},"commit2Childs":{"89697e7abc9807639c384eecf5a2a6eef1080426":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e072d0b1fc19e0533d8ce432eed245196bca6fde":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a64ffebe62143a8d4c37d99b6ece6d430d948ebc"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","22b3128eea8c61f8f1f387dac6b3e9504bc8036e"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"22b3128eea8c61f8f1f387dac6b3e9504bc8036e":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["e072d0b1fc19e0533d8ce432eed245196bca6fde","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"a64ffebe62143a8d4c37d99b6ece6d430d948ebc":["89697e7abc9807639c384eecf5a2a6eef1080426"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}