{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#beforeTest().mjava","commits":[{"id":"01322d51122b6cbe6b5ba6059fffba67798dae72","date":1539067228,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#beforeTest().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    // clear any persisted auto scaling configuration\n    zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    cluster.deleteAllCollections();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    configureCluster(4)\n    .addConfig(\"conf\", configset(\"cloud-minimal\"))\n    .configure();\n    \n    // clear any persisted auto scaling configuration\n    zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    cluster.deleteAllCollections();\n    \n    final ClusterProperties props = new ClusterProperties(zkClient());\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    // clear any persisted auto scaling configuration\n    zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    cluster.deleteAllCollections();\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6ffe3a04ec5eace57a00d674d5f21b951ee834b0","date":1544403047,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    configureCluster(4)\n    .addConfig(\"conf\", configset(\"cloud-minimal\"))\n    .configure();\n    \n    // clear any persisted auto scaling configuration\n    zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    \n    final ClusterProperties props = new ClusterProperties(zkClient());\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    configureCluster(4)\n    .addConfig(\"conf\", configset(\"cloud-minimal\"))\n    .configure();\n    \n    // clear any persisted auto scaling configuration\n    zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    cluster.deleteAllCollections();\n    \n    final ClusterProperties props = new ClusterProperties(zkClient());\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3ad6e19bcb4308271044d303a0308ab4788dc13a","date":1552647157,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    configureCluster(4)\n    .addConfig(\"conf\", configset(\"cloud-minimal\"))\n    .addConfig(\"conf2\", configset(\"cloud-dynamic\"))\n    .configure();\n    \n    // clear any persisted auto scaling configuration\n    zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    \n    final ClusterProperties props = new ClusterProperties(zkClient());\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    configureCluster(4)\n    .addConfig(\"conf\", configset(\"cloud-minimal\"))\n    .configure();\n    \n    // clear any persisted auto scaling configuration\n    zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    \n    final ClusterProperties props = new ClusterProperties(zkClient());\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    configureCluster(4)\n    .addConfig(\"conf\", configset(\"cloud-minimal\"))\n    .addConfig(\"conf2\", configset(\"cloud-dynamic\"))\n    .configure();\n    \n    // clear any persisted auto scaling configuration\n    zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    configureCluster(4)\n    .addConfig(\"conf\", configset(\"cloud-minimal\"))\n    .addConfig(\"conf2\", configset(\"cloud-dynamic\"))\n    .configure();\n    \n    // clear any persisted auto scaling configuration\n    zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    \n    final ClusterProperties props = new ClusterProperties(zkClient());\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n  }\n\n","bugFix":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    configureCluster(4)\n    .addConfig(\"conf\", configset(\"cloud-minimal\"))\n    .addConfig(\"conf2\", configset(\"cloud-dynamic\"))\n    .configure();\n    \n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    configureCluster(4)\n    .addConfig(\"conf\", configset(\"cloud-minimal\"))\n    .addConfig(\"conf2\", configset(\"cloud-dynamic\"))\n    .configure();\n    \n    // clear any persisted auto scaling configuration\n    zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6ffe3a04ec5eace57a00d674d5f21b951ee834b0":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"01322d51122b6cbe6b5ba6059fffba67798dae72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["3ad6e19bcb4308271044d303a0308ab4788dc13a"],"3f504512a03d978990cbff30db0522b354e846db":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"3ad6e19bcb4308271044d303a0308ab4788dc13a":["6ffe3a04ec5eace57a00d674d5f21b951ee834b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"6ffe3a04ec5eace57a00d674d5f21b951ee834b0":["3ad6e19bcb4308271044d303a0308ab4788dc13a"],"01322d51122b6cbe6b5ba6059fffba67798dae72":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["6ffe3a04ec5eace57a00d674d5f21b951ee834b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"3ad6e19bcb4308271044d303a0308ab4788dc13a":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}