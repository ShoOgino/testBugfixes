{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, resolver, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);\n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, resolver, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);\n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, resolver, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);\n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, resolver, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);\n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3337b86edd36607f0208321f1deee79c55e5fd21","date":1321266471,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, resolver, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);\n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n    writer.setDeltaKeys(allPks);\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, resolver, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);\n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","date":1335805170,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (config.getDeleteQuery() != null) {\n      writer.deleteByQuery(config.getDeleteQuery());\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(currentEntityProcessorWrapper, resolver, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);\n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n    writer.setDeltaKeys(allPks);\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(ConfigNameConstants.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, currentEntityProcessorWrapper, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, resolver, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);\n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n    writer.setDeltaKeys(allPks);\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolver resolver = getVariableResolver();\n\n    if (config.getDeleteQuery() != null) {\n      writer.deleteByQuery(config.getDeleteQuery());\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(currentEntityProcessorWrapper, resolver, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);\n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n    writer.setDeltaKeys(allPks);\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolver vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(ConfigNameConstants.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, currentEntityProcessorWrapper, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (config.getDeleteQuery() != null) {\n      writer.deleteByQuery(config.getDeleteQuery());\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(currentEntityProcessorWrapper, resolver, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);\n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n    writer.setDeltaKeys(allPks);\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(ConfigNameConstants.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, currentEntityProcessorWrapper, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolver resolver = getVariableResolver();\n\n    if (config.getDeleteQuery() != null) {\n      writer.deleteByQuery(config.getDeleteQuery());\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(currentEntityProcessorWrapper, resolver, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);\n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n    writer.setDeltaKeys(allPks);\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolver vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(ConfigNameConstants.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, currentEntityProcessorWrapper, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (config.getDeleteQuery() != null) {\n      writer.deleteByQuery(config.getDeleteQuery());\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(currentEntityProcessorWrapper, resolver, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);\n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n    writer.setDeltaKeys(allPks);\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(ConfigNameConstants.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, currentEntityProcessorWrapper, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolver resolver = getVariableResolver();\n\n    if (config.getDeleteQuery() != null) {\n      writer.deleteByQuery(config.getDeleteQuery());\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<>();\n    Set<Map<String, Object>> allPks = collectDelta(currentEntityProcessorWrapper, resolver, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);\n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n    writer.setDeltaKeys(allPks);\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolver vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(ConfigNameConstants.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, currentEntityProcessorWrapper, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolver resolver = getVariableResolver();\n\n    if (config.getDeleteQuery() != null) {\n      writer.deleteByQuery(config.getDeleteQuery());\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(currentEntityProcessorWrapper, resolver, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);\n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n    writer.setDeltaKeys(allPks);\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolver vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(ConfigNameConstants.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, currentEntityProcessorWrapper, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolver resolver = getVariableResolver();\n\n    if (config.getDeleteQuery() != null) {\n      writer.deleteByQuery(config.getDeleteQuery());\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    log.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<>();\n    Set<Map<String, Object>> allPks = collectDelta(currentEntityProcessorWrapper, resolver, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);\n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n    writer.setDeltaKeys(allPks);\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolver vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(ConfigNameConstants.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, currentEntityProcessorWrapper, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      log.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolver resolver = getVariableResolver();\n\n    if (config.getDeleteQuery() != null) {\n      writer.deleteByQuery(config.getDeleteQuery());\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<>();\n    Set<Map<String, Object>> allPks = collectDelta(currentEntityProcessorWrapper, resolver, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);\n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n    writer.setDeltaKeys(allPks);\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolver vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(ConfigNameConstants.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, currentEntityProcessorWrapper, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolver resolver = getVariableResolver();\n\n    if (config.getDeleteQuery() != null) {\n      writer.deleteByQuery(config.getDeleteQuery());\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    log.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<>();\n    Set<Map<String, Object>> allPks = collectDelta(currentEntityProcessorWrapper, resolver, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);\n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n    writer.setDeltaKeys(allPks);\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolver vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(ConfigNameConstants.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, currentEntityProcessorWrapper, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      log.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7c7b0ae5716b6c2044195a818e9ae58205175659"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["3337b86edd36607f0208321f1deee79c55e5fd21"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"3337b86edd36607f0208321f1deee79c55e5fd21":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","7c7b0ae5716b6c2044195a818e9ae58205175659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["7c7b0ae5716b6c2044195a818e9ae58205175659","407687e67faf6e1f02a211ca078d8e3eed631027"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["3337b86edd36607f0208321f1deee79c55e5fd21"],"3337b86edd36607f0208321f1deee79c55e5fd21":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}