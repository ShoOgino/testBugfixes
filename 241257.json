{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(TermFreqIterator).mjava","commits":[{"id":"bede0ec3497c48e70d55196c5065d97a4bc1db3d","date":1329668585,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(TermFreqIterator).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void build(TermFreqIterator iterator) throws IOException {\n    String prefix = getClass().getSimpleName();\n    File directory = Sort.defaultTempDir();\n    File tempInput = File.createTempFile(prefix, \".input\", directory);\n    File tempSorted = File.createTempFile(prefix, \".sorted\", directory);\n    \n    Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    Sort.ByteSequencesReader reader = null;\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      byte [] buffer = new byte [0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n      while (iterator.hasNext()) {\n        String key = iterator.next();\n        UnicodeUtil.UTF16toUTF8(key, 0, key.length(), scratch);\n\n        if (scratch.length + 5 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, scratch.length + 5);\n        }\n\n        output.reset(buffer);\n        output.writeBytes(scratch.bytes, scratch.offset, scratch.length);\n        output.writeByte((byte)0); // separator: not used, just for sort order\n        output.writeInt((int)encodeWeight(iterator.freq()));\n        writer.write(buffer, 0, output.getPosition());\n      }\n      writer.close();\n      new Sort().sort(tempInput, tempSorted);\n      reader = new Sort.ByteSequencesReader(tempSorted);\n      \n      PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n      \n      BytesRef previous = null;\n      BytesRef suggestion = new BytesRef();\n      IntsRef scratchInts = new IntsRef();\n      ByteArrayDataInput input = new ByteArrayDataInput();\n      while (reader.read(scratch)) {\n        suggestion.bytes = scratch.bytes;\n        suggestion.offset = scratch.offset;\n        suggestion.length = scratch.length - 5; // int + separator\n\n        input.reset(scratch.bytes);\n        input.skipBytes(suggestion.length + 1); // suggestion + separator\n        long cost = input.readInt();\n   \n        if (previous == null) {\n          previous = new BytesRef();\n        } else if (suggestion.equals(previous)) {\n          continue; // for duplicate suggestions, the best weight is actually added\n        }\n        Util.toIntsRef(suggestion, scratchInts);\n        builder.add(scratchInts, cost);\n        previous.copyBytes(suggestion);\n      }\n      fst = builder.finish();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(reader, writer);\n      } else {\n        IOUtils.closeWhileHandlingException(reader, writer);\n      }\n      \n      tempInput.delete();\n      tempSorted.delete();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d334a3e8e6b94298d8cf2802a403a096c06f0b92","date":1329766559,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(TermFreqIterator).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(TermFreqIterator).mjava","sourceNew":"  @Override\n  public void build(TermFreqIterator iterator) throws IOException {\n    String prefix = getClass().getSimpleName();\n    File directory = Sort.defaultTempDir();\n    File tempInput = File.createTempFile(prefix, \".input\", directory);\n    File tempSorted = File.createTempFile(prefix, \".sorted\", directory);\n    \n    Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    Sort.ByteSequencesReader reader = null;\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      byte [] buffer = new byte [0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n      BytesRef spare;\n      while ((spare = iterator.next()) != null) {\n        if (spare.length + 5 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, spare.length + 5);\n        }\n\n        output.reset(buffer);\n        output.writeBytes(spare.bytes, spare.offset, spare.length);\n        output.writeByte((byte)0); // separator: not used, just for sort order\n        output.writeInt((int)encodeWeight(iterator.freq()));\n        writer.write(buffer, 0, output.getPosition());\n      }\n      writer.close();\n      new Sort().sort(tempInput, tempSorted);\n      reader = new Sort.ByteSequencesReader(tempSorted);\n      \n      PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n      \n      BytesRef previous = null;\n      BytesRef suggestion = new BytesRef();\n      IntsRef scratchInts = new IntsRef();\n      ByteArrayDataInput input = new ByteArrayDataInput();\n      while (reader.read(scratch)) {\n        suggestion.bytes = scratch.bytes;\n        suggestion.offset = scratch.offset;\n        suggestion.length = scratch.length - 5; // int + separator\n\n        input.reset(scratch.bytes);\n        input.skipBytes(suggestion.length + 1); // suggestion + separator\n        long cost = input.readInt();\n   \n        if (previous == null) {\n          previous = new BytesRef();\n        } else if (suggestion.equals(previous)) {\n          continue; // for duplicate suggestions, the best weight is actually added\n        }\n        Util.toIntsRef(suggestion, scratchInts);\n        builder.add(scratchInts, cost);\n        previous.copyBytes(suggestion);\n      }\n      fst = builder.finish();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(reader, writer);\n      } else {\n        IOUtils.closeWhileHandlingException(reader, writer);\n      }\n      \n      tempInput.delete();\n      tempSorted.delete();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void build(TermFreqIterator iterator) throws IOException {\n    String prefix = getClass().getSimpleName();\n    File directory = Sort.defaultTempDir();\n    File tempInput = File.createTempFile(prefix, \".input\", directory);\n    File tempSorted = File.createTempFile(prefix, \".sorted\", directory);\n    \n    Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    Sort.ByteSequencesReader reader = null;\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      byte [] buffer = new byte [0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n      while (iterator.hasNext()) {\n        String key = iterator.next();\n        UnicodeUtil.UTF16toUTF8(key, 0, key.length(), scratch);\n\n        if (scratch.length + 5 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, scratch.length + 5);\n        }\n\n        output.reset(buffer);\n        output.writeBytes(scratch.bytes, scratch.offset, scratch.length);\n        output.writeByte((byte)0); // separator: not used, just for sort order\n        output.writeInt((int)encodeWeight(iterator.freq()));\n        writer.write(buffer, 0, output.getPosition());\n      }\n      writer.close();\n      new Sort().sort(tempInput, tempSorted);\n      reader = new Sort.ByteSequencesReader(tempSorted);\n      \n      PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n      \n      BytesRef previous = null;\n      BytesRef suggestion = new BytesRef();\n      IntsRef scratchInts = new IntsRef();\n      ByteArrayDataInput input = new ByteArrayDataInput();\n      while (reader.read(scratch)) {\n        suggestion.bytes = scratch.bytes;\n        suggestion.offset = scratch.offset;\n        suggestion.length = scratch.length - 5; // int + separator\n\n        input.reset(scratch.bytes);\n        input.skipBytes(suggestion.length + 1); // suggestion + separator\n        long cost = input.readInt();\n   \n        if (previous == null) {\n          previous = new BytesRef();\n        } else if (suggestion.equals(previous)) {\n          continue; // for duplicate suggestions, the best weight is actually added\n        }\n        Util.toIntsRef(suggestion, scratchInts);\n        builder.add(scratchInts, cost);\n        previous.copyBytes(suggestion);\n      }\n      fst = builder.finish();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(reader, writer);\n      } else {\n        IOUtils.closeWhileHandlingException(reader, writer);\n      }\n      \n      tempInput.delete();\n      tempSorted.delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecc52400551de6a7d8daf646be839487911627c","date":1330076979,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(TermFreqIterator).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(TermFreqIterator).mjava","sourceNew":"  @Override\n  public void build(TermFreqIterator iterator) throws IOException {\n    String prefix = getClass().getSimpleName();\n    File directory = Sort.defaultTempDir();\n    File tempInput = File.createTempFile(prefix, \".input\", directory);\n    File tempSorted = File.createTempFile(prefix, \".sorted\", directory);\n    \n    Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    Sort.ByteSequencesReader reader = null;\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      byte [] buffer = new byte [0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n      BytesRef spare;\n      while ((spare = iterator.next()) != null) {\n        if (spare.length + 5 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, spare.length + 5);\n        }\n\n        output.reset(buffer);\n        output.writeBytes(spare.bytes, spare.offset, spare.length);\n        output.writeByte((byte)0); // separator: not used, just for sort order\n        output.writeInt((int)encodeWeight(iterator.weight()));\n        writer.write(buffer, 0, output.getPosition());\n      }\n      writer.close();\n      new Sort().sort(tempInput, tempSorted);\n      reader = new Sort.ByteSequencesReader(tempSorted);\n      \n      PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n      \n      BytesRef previous = null;\n      BytesRef suggestion = new BytesRef();\n      IntsRef scratchInts = new IntsRef();\n      ByteArrayDataInput input = new ByteArrayDataInput();\n      while (reader.read(scratch)) {\n        suggestion.bytes = scratch.bytes;\n        suggestion.offset = scratch.offset;\n        suggestion.length = scratch.length - 5; // int + separator\n\n        input.reset(scratch.bytes);\n        input.skipBytes(suggestion.length + 1); // suggestion + separator\n        long cost = input.readInt();\n   \n        if (previous == null) {\n          previous = new BytesRef();\n        } else if (suggestion.equals(previous)) {\n          continue; // for duplicate suggestions, the best weight is actually added\n        }\n        Util.toIntsRef(suggestion, scratchInts);\n        builder.add(scratchInts, cost);\n        previous.copyBytes(suggestion);\n      }\n      fst = builder.finish();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(reader, writer);\n      } else {\n        IOUtils.closeWhileHandlingException(reader, writer);\n      }\n      \n      tempInput.delete();\n      tempSorted.delete();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void build(TermFreqIterator iterator) throws IOException {\n    String prefix = getClass().getSimpleName();\n    File directory = Sort.defaultTempDir();\n    File tempInput = File.createTempFile(prefix, \".input\", directory);\n    File tempSorted = File.createTempFile(prefix, \".sorted\", directory);\n    \n    Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    Sort.ByteSequencesReader reader = null;\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      byte [] buffer = new byte [0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n      BytesRef spare;\n      while ((spare = iterator.next()) != null) {\n        if (spare.length + 5 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, spare.length + 5);\n        }\n\n        output.reset(buffer);\n        output.writeBytes(spare.bytes, spare.offset, spare.length);\n        output.writeByte((byte)0); // separator: not used, just for sort order\n        output.writeInt((int)encodeWeight(iterator.freq()));\n        writer.write(buffer, 0, output.getPosition());\n      }\n      writer.close();\n      new Sort().sort(tempInput, tempSorted);\n      reader = new Sort.ByteSequencesReader(tempSorted);\n      \n      PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n      \n      BytesRef previous = null;\n      BytesRef suggestion = new BytesRef();\n      IntsRef scratchInts = new IntsRef();\n      ByteArrayDataInput input = new ByteArrayDataInput();\n      while (reader.read(scratch)) {\n        suggestion.bytes = scratch.bytes;\n        suggestion.offset = scratch.offset;\n        suggestion.length = scratch.length - 5; // int + separator\n\n        input.reset(scratch.bytes);\n        input.skipBytes(suggestion.length + 1); // suggestion + separator\n        long cost = input.readInt();\n   \n        if (previous == null) {\n          previous = new BytesRef();\n        } else if (suggestion.equals(previous)) {\n          continue; // for duplicate suggestions, the best weight is actually added\n        }\n        Util.toIntsRef(suggestion, scratchInts);\n        builder.add(scratchInts, cost);\n        previous.copyBytes(suggestion);\n      }\n      fst = builder.finish();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(reader, writer);\n      } else {\n        IOUtils.closeWhileHandlingException(reader, writer);\n      }\n      \n      tempInput.delete();\n      tempSorted.delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3c850c5222a1ce7d619563f67bf047a11b32b6","date":1330703995,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(TermFreqIterator).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(TermFreqIterator).mjava","sourceNew":"  @Override\n  public void build(TermFreqIterator iterator) throws IOException {\n    BytesRef scratch = new BytesRef();\n    TermFreqIterator iter = new WFSTTermFreqIteratorWrapper(iterator,\n        BytesRef.getUTF8SortedAsUnicodeComparator());\n    IntsRef scratchInts = new IntsRef();\n    BytesRef previous = null;\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n    while ((scratch = iter.next()) != null) {\n      long cost = iter.weight();\n      \n      if (previous == null) {\n        previous = new BytesRef();\n      } else if (scratch.equals(previous)) {\n        continue; // for duplicate suggestions, the best weight is actually\n                  // added\n      }\n      Util.toIntsRef(scratch, scratchInts);\n      builder.add(scratchInts, cost);\n      previous.copyBytes(scratch);\n    }\n    fst = builder.finish();\n  }\n\n","sourceOld":"  @Override\n  public void build(TermFreqIterator iterator) throws IOException {\n    String prefix = getClass().getSimpleName();\n    File directory = Sort.defaultTempDir();\n    File tempInput = File.createTempFile(prefix, \".input\", directory);\n    File tempSorted = File.createTempFile(prefix, \".sorted\", directory);\n    \n    Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    Sort.ByteSequencesReader reader = null;\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      byte [] buffer = new byte [0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n      BytesRef spare;\n      while ((spare = iterator.next()) != null) {\n        if (spare.length + 5 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, spare.length + 5);\n        }\n\n        output.reset(buffer);\n        output.writeBytes(spare.bytes, spare.offset, spare.length);\n        output.writeByte((byte)0); // separator: not used, just for sort order\n        output.writeInt((int)encodeWeight(iterator.weight()));\n        writer.write(buffer, 0, output.getPosition());\n      }\n      writer.close();\n      new Sort().sort(tempInput, tempSorted);\n      reader = new Sort.ByteSequencesReader(tempSorted);\n      \n      PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n      \n      BytesRef previous = null;\n      BytesRef suggestion = new BytesRef();\n      IntsRef scratchInts = new IntsRef();\n      ByteArrayDataInput input = new ByteArrayDataInput();\n      while (reader.read(scratch)) {\n        suggestion.bytes = scratch.bytes;\n        suggestion.offset = scratch.offset;\n        suggestion.length = scratch.length - 5; // int + separator\n\n        input.reset(scratch.bytes);\n        input.skipBytes(suggestion.length + 1); // suggestion + separator\n        long cost = input.readInt();\n   \n        if (previous == null) {\n          previous = new BytesRef();\n        } else if (suggestion.equals(previous)) {\n          continue; // for duplicate suggestions, the best weight is actually added\n        }\n        Util.toIntsRef(suggestion, scratchInts);\n        builder.add(scratchInts, cost);\n        previous.copyBytes(suggestion);\n      }\n      fst = builder.finish();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(reader, writer);\n      } else {\n        IOUtils.closeWhileHandlingException(reader, writer);\n      }\n      \n      tempInput.delete();\n      tempSorted.delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(TermFreqIterator).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(TermFreqIterator).mjava","sourceNew":"  @Override\n  public void build(TermFreqIterator iterator) throws IOException {\n    BytesRef scratch = new BytesRef();\n    TermFreqIterator iter = new WFSTTermFreqIteratorWrapper(iterator,\n        BytesRef.getUTF8SortedAsUnicodeComparator());\n    IntsRef scratchInts = new IntsRef();\n    BytesRef previous = null;\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n    while ((scratch = iter.next()) != null) {\n      long cost = iter.weight();\n      \n      if (previous == null) {\n        previous = new BytesRef();\n      } else if (scratch.equals(previous)) {\n        continue; // for duplicate suggestions, the best weight is actually\n                  // added\n      }\n      Util.toIntsRef(scratch, scratchInts);\n      builder.add(scratchInts, cost);\n      previous.copyBytes(scratch);\n    }\n    fst = builder.finish();\n  }\n\n","sourceOld":"  @Override\n  public void build(TermFreqIterator iterator) throws IOException {\n    String prefix = getClass().getSimpleName();\n    File directory = Sort.defaultTempDir();\n    File tempInput = File.createTempFile(prefix, \".input\", directory);\n    File tempSorted = File.createTempFile(prefix, \".sorted\", directory);\n    \n    Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    Sort.ByteSequencesReader reader = null;\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      byte [] buffer = new byte [0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n      while (iterator.hasNext()) {\n        String key = iterator.next();\n        UnicodeUtil.UTF16toUTF8(key, 0, key.length(), scratch);\n\n        if (scratch.length + 5 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, scratch.length + 5);\n        }\n\n        output.reset(buffer);\n        output.writeBytes(scratch.bytes, scratch.offset, scratch.length);\n        output.writeByte((byte)0); // separator: not used, just for sort order\n        output.writeInt((int)encodeWeight(iterator.freq()));\n        writer.write(buffer, 0, output.getPosition());\n      }\n      writer.close();\n      new Sort().sort(tempInput, tempSorted);\n      reader = new Sort.ByteSequencesReader(tempSorted);\n      \n      PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n      \n      BytesRef previous = null;\n      BytesRef suggestion = new BytesRef();\n      IntsRef scratchInts = new IntsRef();\n      ByteArrayDataInput input = new ByteArrayDataInput();\n      while (reader.read(scratch)) {\n        suggestion.bytes = scratch.bytes;\n        suggestion.offset = scratch.offset;\n        suggestion.length = scratch.length - 5; // int + separator\n\n        input.reset(scratch.bytes);\n        input.skipBytes(suggestion.length + 1); // suggestion + separator\n        long cost = input.readInt();\n   \n        if (previous == null) {\n          previous = new BytesRef();\n        } else if (suggestion.equals(previous)) {\n          continue; // for duplicate suggestions, the best weight is actually added\n        }\n        Util.toIntsRef(suggestion, scratchInts);\n        builder.add(scratchInts, cost);\n        previous.copyBytes(suggestion);\n      }\n      fst = builder.finish();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(reader, writer);\n      } else {\n        IOUtils.closeWhileHandlingException(reader, writer);\n      }\n      \n      tempInput.delete();\n      tempSorted.delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(TermFreqIterator).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(TermFreqIterator).mjava","sourceNew":"  @Override\n  public void build(TermFreqIterator iterator) throws IOException {\n    BytesRef scratch = new BytesRef();\n    TermFreqIterator iter = new WFSTTermFreqIteratorWrapper(iterator,\n        BytesRef.getUTF8SortedAsUnicodeComparator());\n    IntsRef scratchInts = new IntsRef();\n    BytesRef previous = null;\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n    while ((scratch = iter.next()) != null) {\n      long cost = iter.weight();\n      \n      if (previous == null) {\n        previous = new BytesRef();\n      } else if (scratch.equals(previous)) {\n        continue; // for duplicate suggestions, the best weight is actually\n                  // added\n      }\n      Util.toIntsRef(scratch, scratchInts);\n      builder.add(scratchInts, cost);\n      previous.copyBytes(scratch);\n    }\n    fst = builder.finish();\n  }\n\n","sourceOld":"  @Override\n  public void build(TermFreqIterator iterator) throws IOException {\n    BytesRef scratch = new BytesRef();\n    TermFreqIterator iter = new WFSTTermFreqIteratorWrapper(iterator,\n        BytesRef.getUTF8SortedAsUnicodeComparator());\n    IntsRef scratchInts = new IntsRef();\n    BytesRef previous = null;\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n    while ((scratch = iter.next()) != null) {\n      long cost = iter.weight();\n      \n      if (previous == null) {\n        previous = new BytesRef();\n      } else if (scratch.equals(previous)) {\n        continue; // for duplicate suggestions, the best weight is actually\n                  // added\n      }\n      Util.toIntsRef(scratch, scratchInts);\n      builder.add(scratchInts, cost);\n      previous.copyBytes(scratch);\n    }\n    fst = builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["bede0ec3497c48e70d55196c5065d97a4bc1db3d","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"d334a3e8e6b94298d8cf2802a403a096c06f0b92":["bede0ec3497c48e70d55196c5065d97a4bc1db3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ecc52400551de6a7d8daf646be839487911627c":["d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["6ecc52400551de6a7d8daf646be839487911627c"],"bede0ec3497c48e70d55196c5065d97a4bc1db3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"d334a3e8e6b94298d8cf2802a403a096c06f0b92":["6ecc52400551de6a7d8daf646be839487911627c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bede0ec3497c48e70d55196c5065d97a4bc1db3d"],"6ecc52400551de6a7d8daf646be839487911627c":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"bede0ec3497c48e70d55196c5065d97a4bc1db3d":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}