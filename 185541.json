{"path":"src/java/org/apache/lucene/index/TermVectorsWriter#writeField().mjava","commits":[{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsWriter#writeField().mjava","pathOld":"/dev/null","sourceNew":"  private void writeField() throws IOException {\n    // remember where this field is written\n    currentField.tvfPointer = tvf.getFilePointer();\n    //System.out.println(\"Field Pointer: \" + currentField.tvfPointer);\n    final int size;\n\n    tvf.writeVInt(size = terms.size());\n    tvf.writeVInt(currentField.length - size);\n    String lastTermText = \"\";\n    // write term ids and positions\n    for (int i = 0; i < size; i++) {\n      TVTerm term = (TVTerm) terms.elementAt(i);\n      //tvf.writeString(term.termText);\n      int start = StringHelper.stringDifference(lastTermText, term.termText);\n      int length = term.termText.length() - start;\n      tvf.writeVInt(start);\t\t\t  // write shared prefix length\n      tvf.writeVInt(length);\t\t\t  // write delta length\n      tvf.writeChars(term.termText, start, length);  // write delta chars\n      tvf.writeVInt(term.freq);\n      lastTermText = term.termText;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0","date":1096997448,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsWriter#writeField().mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsWriter#writeField().mjava","sourceNew":"  private void writeField() throws IOException {\n    // remember where this field is written\n    currentField.tvfPointer = tvf.getFilePointer();\n    //System.out.println(\"Field Pointer: \" + currentField.tvfPointer);\n    \n    final int size = terms.size();\n    tvf.writeVInt(size);\n    \n    boolean storePositions = currentField.storePositions;\n    boolean storeOffsets = currentField.storeOffsets;\n    byte bits = 0x0;\n    if (storePositions) \n      bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n    if (storeOffsets) \n      bits |= STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n    \n    String lastTermText = \"\";\n    for (int i = 0; i < size; i++) {\n      TVTerm term = (TVTerm) terms.elementAt(i);\n      int start = StringHelper.stringDifference(lastTermText, term.termText);\n      int length = term.termText.length() - start;\n      tvf.writeVInt(start);       // write shared prefix length\n      tvf.writeVInt(length);        // write delta length\n      tvf.writeChars(term.termText, start, length);  // write delta chars\n      tvf.writeVInt(term.freq);\n      lastTermText = term.termText;\n      \n      if(storePositions){\n        if(term.positions == null)\n          throw new IllegalStateException(\"Trying to write positions that are null!\");\n        \n        // use delta encoding for positions\n        int position = 0;\n        for (int j = 0; j < term.freq; j++){\n          tvf.writeVInt(term.positions[j] - position);\n          position = term.positions[j];\n        }\n      }\n      \n      if(storeOffsets){\n        if(term.offsets == null)\n          throw new IllegalStateException(\"Trying to write offsets that are null!\");\n        \n        // use delta encoding for offsets\n        int position = 0;\n        for (int j = 0; j < term.freq; j++) {\n          tvf.writeVInt(term.offsets[j].getStartOffset() - position);\n          tvf.writeVInt(term.offsets[j].getEndOffset() - term.offsets[j].getStartOffset()); //Save the diff between the two.\n          position = term.offsets[j].getEndOffset();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void writeField() throws IOException {\n    // remember where this field is written\n    currentField.tvfPointer = tvf.getFilePointer();\n    //System.out.println(\"Field Pointer: \" + currentField.tvfPointer);\n    final int size;\n\n    tvf.writeVInt(size = terms.size());\n    tvf.writeVInt(currentField.length - size);\n    String lastTermText = \"\";\n    // write term ids and positions\n    for (int i = 0; i < size; i++) {\n      TVTerm term = (TVTerm) terms.elementAt(i);\n      //tvf.writeString(term.termText);\n      int start = StringHelper.stringDifference(lastTermText, term.termText);\n      int length = term.termText.length() - start;\n      tvf.writeVInt(start);\t\t\t  // write shared prefix length\n      tvf.writeVInt(length);\t\t\t  // write delta length\n      tvf.writeChars(term.termText, start, length);  // write delta chars\n      tvf.writeVInt(term.freq);\n      lastTermText = term.termText;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsWriter#writeField().mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsWriter#writeField().mjava","sourceNew":"  private void writeField() throws IOException {\n    // remember where this field is written\n    currentField.tvfPointer = tvf.getFilePointer();\n    //System.out.println(\"Fieldable Pointer: \" + currentField.tvfPointer);\n    \n    final int size = terms.size();\n    tvf.writeVInt(size);\n    \n    boolean storePositions = currentField.storePositions;\n    boolean storeOffsets = currentField.storeOffsets;\n    byte bits = 0x0;\n    if (storePositions) \n      bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n    if (storeOffsets) \n      bits |= STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n    \n    String lastTermText = \"\";\n    for (int i = 0; i < size; i++) {\n      TVTerm term = (TVTerm) terms.elementAt(i);\n      int start = StringHelper.stringDifference(lastTermText, term.termText);\n      int length = term.termText.length() - start;\n      tvf.writeVInt(start);       // write shared prefix length\n      tvf.writeVInt(length);        // write delta length\n      tvf.writeChars(term.termText, start, length);  // write delta chars\n      tvf.writeVInt(term.freq);\n      lastTermText = term.termText;\n      \n      if(storePositions){\n        if(term.positions == null)\n          throw new IllegalStateException(\"Trying to write positions that are null!\");\n        \n        // use delta encoding for positions\n        int position = 0;\n        for (int j = 0; j < term.freq; j++){\n          tvf.writeVInt(term.positions[j] - position);\n          position = term.positions[j];\n        }\n      }\n      \n      if(storeOffsets){\n        if(term.offsets == null)\n          throw new IllegalStateException(\"Trying to write offsets that are null!\");\n        \n        // use delta encoding for offsets\n        int position = 0;\n        for (int j = 0; j < term.freq; j++) {\n          tvf.writeVInt(term.offsets[j].getStartOffset() - position);\n          tvf.writeVInt(term.offsets[j].getEndOffset() - term.offsets[j].getStartOffset()); //Save the diff between the two.\n          position = term.offsets[j].getEndOffset();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void writeField() throws IOException {\n    // remember where this field is written\n    currentField.tvfPointer = tvf.getFilePointer();\n    //System.out.println(\"Field Pointer: \" + currentField.tvfPointer);\n    \n    final int size = terms.size();\n    tvf.writeVInt(size);\n    \n    boolean storePositions = currentField.storePositions;\n    boolean storeOffsets = currentField.storeOffsets;\n    byte bits = 0x0;\n    if (storePositions) \n      bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n    if (storeOffsets) \n      bits |= STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n    \n    String lastTermText = \"\";\n    for (int i = 0; i < size; i++) {\n      TVTerm term = (TVTerm) terms.elementAt(i);\n      int start = StringHelper.stringDifference(lastTermText, term.termText);\n      int length = term.termText.length() - start;\n      tvf.writeVInt(start);       // write shared prefix length\n      tvf.writeVInt(length);        // write delta length\n      tvf.writeChars(term.termText, start, length);  // write delta chars\n      tvf.writeVInt(term.freq);\n      lastTermText = term.termText;\n      \n      if(storePositions){\n        if(term.positions == null)\n          throw new IllegalStateException(\"Trying to write positions that are null!\");\n        \n        // use delta encoding for positions\n        int position = 0;\n        for (int j = 0; j < term.freq; j++){\n          tvf.writeVInt(term.positions[j] - position);\n          position = term.positions[j];\n        }\n      }\n      \n      if(storeOffsets){\n        if(term.offsets == null)\n          throw new IllegalStateException(\"Trying to write offsets that are null!\");\n        \n        // use delta encoding for offsets\n        int position = 0;\n        for (int j = 0; j < term.freq; j++) {\n          tvf.writeVInt(term.offsets[j].getStartOffset() - position);\n          tvf.writeVInt(term.offsets[j].getEndOffset() - term.offsets[j].getStartOffset()); //Save the diff between the two.\n          position = term.offsets[j].getEndOffset();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11764865fb318bf86302eab36bdf9cd00c50c110","date":1190109214,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/TermVectorsWriter#writeField().mjava","sourceNew":null,"sourceOld":"  private void writeField() throws IOException {\n    // remember where this field is written\n    currentField.tvfPointer = tvf.getFilePointer();\n    //System.out.println(\"Fieldable Pointer: \" + currentField.tvfPointer);\n    \n    final int size = terms.size();\n    tvf.writeVInt(size);\n    \n    boolean storePositions = currentField.storePositions;\n    boolean storeOffsets = currentField.storeOffsets;\n    byte bits = 0x0;\n    if (storePositions) \n      bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n    if (storeOffsets) \n      bits |= STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n    \n    String lastTermText = \"\";\n    for (int i = 0; i < size; i++) {\n      TVTerm term = (TVTerm) terms.elementAt(i);\n      int start = StringHelper.stringDifference(lastTermText, term.termText);\n      int length = term.termText.length() - start;\n      tvf.writeVInt(start);       // write shared prefix length\n      tvf.writeVInt(length);        // write delta length\n      tvf.writeChars(term.termText, start, length);  // write delta chars\n      tvf.writeVInt(term.freq);\n      lastTermText = term.termText;\n      \n      if(storePositions){\n        if(term.positions == null)\n          throw new IllegalStateException(\"Trying to write positions that are null!\");\n        \n        // use delta encoding for positions\n        int position = 0;\n        for (int j = 0; j < term.freq; j++){\n          tvf.writeVInt(term.positions[j] - position);\n          position = term.positions[j];\n        }\n      }\n      \n      if(storeOffsets){\n        if(term.offsets == null)\n          throw new IllegalStateException(\"Trying to write offsets that are null!\");\n        \n        // use delta encoding for offsets\n        int position = 0;\n        for (int j = 0; j < term.freq; j++) {\n          tvf.writeVInt(term.offsets[j].getStartOffset() - position);\n          tvf.writeVInt(term.offsets[j].getEndOffset() - term.offsets[j].getStartOffset()); //Save the diff between the two.\n          position = term.offsets[j].getEndOffset();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"11764865fb318bf86302eab36bdf9cd00c50c110":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11764865fb318bf86302eab36bdf9cd00c50c110"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"11764865fb318bf86302eab36bdf9cd00c50c110":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["11764865fb318bf86302eab36bdf9cd00c50c110"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}