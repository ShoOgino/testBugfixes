{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#infoIsLive(SegmentInfo).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#infoIsLive(SegmentInfo).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#infoIsLive(SegmentInfo).mjava","sourceNew":"    // used only by asserts\n    public synchronized boolean infoIsLive(SegmentInfo info) {\n      int idx = segmentInfos.indexOf(info);\n      assert idx != -1;\n      assert segmentInfos.get(idx) == info;\n      return true;\n    }\n\n","sourceOld":"    // used only by asserts\n    public synchronized boolean infoIsLive(SegmentInfo info) {\n      int idx = segmentInfos.indexOf(info);\n      assert idx != -1;\n      assert segmentInfos.get(idx) == info;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ef87af8c7bd0f8429622b83aa74202383f2e757","date":1280262785,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#infoIsLive(SegmentInfo).mjava","sourceNew":null,"sourceOld":"    // used only by asserts\n    public synchronized boolean infoIsLive(SegmentInfo info) {\n      int idx = segmentInfos.indexOf(info);\n      assert idx != -1;\n      assert segmentInfos.get(idx) == info;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#infoIsLive(SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"    // used only by asserts\n    public synchronized boolean infoIsLive(SegmentInfo info) {\n      int idx = segmentInfos.indexOf(info);\n      assert idx != -1;\n      assert segmentInfos.get(idx) == info;\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","date":1297940445,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#infoIsLive(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#infoIsLive(SegmentInfo).mjava","sourceNew":"    // used only by asserts\n    public synchronized boolean infoIsLive(SegmentInfo info) {\n      int idx = segmentInfos.indexOf(info);\n      assert idx != -1: \"info=\" + info + \" isn't in pool\";\n      assert segmentInfos.get(idx) == info: \"info=\" + info + \" doesn't match live info in segmentInfos\";\n      return true;\n    }\n\n","sourceOld":"    // used only by asserts\n    public synchronized boolean infoIsLive(SegmentInfo info) {\n      int idx = segmentInfos.indexOf(info);\n      assert idx != -1;\n      assert segmentInfos.get(idx) == info;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#infoIsLive(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#infoIsLive(SegmentInfo).mjava","sourceNew":"    // used only by asserts\n    public synchronized boolean infoIsLive(SegmentInfo info) {\n      int idx = segmentInfos.indexOf(info);\n      assert idx != -1: \"info=\" + info + \" isn't in pool\";\n      assert segmentInfos.get(idx) == info: \"info=\" + info + \" doesn't match live info in segmentInfos\";\n      return true;\n    }\n\n","sourceOld":"    // used only by asserts\n    public synchronized boolean infoIsLive(SegmentInfo info) {\n      int idx = segmentInfos.indexOf(info);\n      assert idx != -1;\n      assert segmentInfos.get(idx) == info;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#infoIsLive(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#infoIsLive(SegmentInfo).mjava","sourceNew":"    // used only by asserts\n    public synchronized boolean infoIsLive(SegmentInfo info) {\n      int idx = segmentInfos.indexOf(info);\n      assert idx != -1: \"info=\" + info + \" isn't in pool\";\n      assert segmentInfos.get(idx) == info: \"info=\" + info + \" doesn't match live info in segmentInfos\";\n      return true;\n    }\n\n","sourceOld":"    // used only by asserts\n    public synchronized boolean infoIsLive(SegmentInfo info) {\n      int idx = segmentInfos.indexOf(info);\n      assert idx != -1;\n      assert segmentInfos.get(idx) == info;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"786a4d25ca958a1f315a9d6a74f0441fdafcd522","date":1305734256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#infoIsLive(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#infoIsLive(SegmentInfo).mjava","sourceNew":"    // used only by asserts\n    public synchronized boolean infoIsLive(SegmentInfo info) {\n      int idx = segmentInfos.indexOf(info);\n      assert idx != -1: \"info=\" + info + \" isn't in pool\";\n      assert segmentInfos.info(idx) == info: \"info=\" + info + \" doesn't match live info in segmentInfos\";\n      return true;\n    }\n\n","sourceOld":"    // used only by asserts\n    public synchronized boolean infoIsLive(SegmentInfo info) {\n      int idx = segmentInfos.indexOf(info);\n      assert idx != -1: \"info=\" + info + \" isn't in pool\";\n      assert segmentInfos.get(idx) == info: \"info=\" + info + \" doesn't match live info in segmentInfos\";\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#infoIsLive(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#infoIsLive(SegmentInfo).mjava","sourceNew":"    // used only by asserts\n    public synchronized boolean infoIsLive(SegmentInfo info) {\n      int idx = segmentInfos.indexOf(info);\n      assert idx != -1: \"info=\" + info + \" isn't in pool\";\n      assert segmentInfos.info(idx) == info: \"info=\" + info + \" doesn't match live info in segmentInfos\";\n      return true;\n    }\n\n","sourceOld":"    // used only by asserts\n    public synchronized boolean infoIsLive(SegmentInfo info) {\n      int idx = segmentInfos.indexOf(info);\n      assert idx != -1: \"info=\" + info + \" isn't in pool\";\n      assert segmentInfos.get(idx) == info: \"info=\" + info + \" doesn't match live info in segmentInfos\";\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#infoIsLive(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#infoIsLive(SegmentInfo).mjava","sourceNew":"    // used only by asserts\n    public synchronized boolean infoIsLive(SegmentInfo info) {\n      int idx = segmentInfos.indexOf(info);\n      assert idx != -1: \"info=\" + info + \" isn't in pool\";\n      assert segmentInfos.info(idx) == info: \"info=\" + info + \" doesn't match live info in segmentInfos\";\n      return true;\n    }\n\n","sourceOld":"    // used only by asserts\n    public synchronized boolean infoIsLive(SegmentInfo info) {\n      int idx = segmentInfos.indexOf(info);\n      assert idx != -1: \"info=\" + info + \" isn't in pool\";\n      assert segmentInfos.get(idx) == info: \"info=\" + info + \" doesn't match live info in segmentInfos\";\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0061262413ecc163d6eebba1b5c43ab91a0c2dc5","date":1311195279,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#infoIsLive(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#infoIsLive(SegmentInfo).mjava","sourceNew":"    // used only by asserts\n    public synchronized boolean infoIsLive(SegmentInfo info) {\n      return infoIsLive(info, \"\");\n    }\n\n","sourceOld":"    // used only by asserts\n    public synchronized boolean infoIsLive(SegmentInfo info) {\n      int idx = segmentInfos.indexOf(info);\n      assert idx != -1: \"info=\" + info + \" isn't in pool\";\n      assert segmentInfos.info(idx) == info: \"info=\" + info + \" doesn't match live info in segmentInfos\";\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#infoIsLive(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#infoIsLive(SegmentInfo).mjava","sourceNew":"    // used only by asserts\n    public synchronized boolean infoIsLive(SegmentInfo info) {\n      int idx = segmentInfos.indexOf(info);\n      assert idx != -1: \"info=\" + info + \" isn't live\";\n      assert segmentInfos.info(idx) == info: \"info=\" + info + \" doesn't match live info in segmentInfos\";\n      return true;\n    }\n\n","sourceOld":"    // used only by asserts\n    public synchronized boolean infoIsLive(SegmentInfo info) {\n      return infoIsLive(info, \"\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#infoIsLive(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#infoIsLive(SegmentInfo).mjava","sourceNew":"    // used only by asserts\n    public synchronized boolean infoIsLive(SegmentInfo info) {\n      int idx = segmentInfos.indexOf(info);\n      assert idx != -1: \"info=\" + info + \" isn't live\";\n      assert segmentInfos.info(idx) == info: \"info=\" + info + \" doesn't match live info in segmentInfos\";\n      return true;\n    }\n\n","sourceOld":"    // used only by asserts\n    public synchronized boolean infoIsLive(SegmentInfo info) {\n      int idx = segmentInfos.indexOf(info);\n      assert idx != -1: \"info=\" + info + \" isn't live\";\n      assert segmentInfos.info(idx) == info: \"info=\" + info + \" doesn't match live info in segmentInfos\";\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["9454a6510e2db155fb01faa5c049b06ece95fab9","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5ef87af8c7bd0f8429622b83aa74202383f2e757","9454a6510e2db155fb01faa5c049b06ece95fab9"],"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["f1bdbf92da222965b46c0a942c3857ba56e5c638","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a3776dccca01c11e7046323cfad46a3b4a471233":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3":["f1bdbf92da222965b46c0a942c3857ba56e5c638","786a4d25ca958a1f315a9d6a74f0441fdafcd522","a3776dccca01c11e7046323cfad46a3b4a471233","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f1bdbf92da222965b46c0a942c3857ba56e5c638","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","5ef87af8c7bd0f8429622b83aa74202383f2e757"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}