{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestLucene70DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","commits":[{"id":"084884d4602f4d1c7411eab29e897e349ce62675","date":1475571034,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestLucene70DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSparseDocValuesVsStoredFields() throws Exception {\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 500)];\n    for (int i = 0; i < values.length; ++i) {\n      values[i] = random().nextLong();\n    }\n\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    // sparse compression is only enabled if less than 1% of docs have a value\n    final int avgGap = 100;\n\n    final int numDocs = atLeast(200);\n    for (int i = random().nextInt(avgGap * 2); i >= 0; --i) {\n      writer.addDocument(new Document());\n    }\n    final int maxNumValuesPerDoc = random().nextBoolean() ? 1 : TestUtil.nextInt(random(), 2, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n\n      // single-valued\n      long docValue = values[random().nextInt(values.length)];\n      doc.add(new NumericDocValuesField(\"numeric\", docValue));\n      doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(Long.toString(docValue))));\n      doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(Long.toString(docValue))));\n      doc.add(new StoredField(\"value\", docValue));\n\n      // multi-valued\n      final int numValues = TestUtil.nextInt(random(), 1, maxNumValuesPerDoc);\n      for (int j = 0; j < numValues; ++j) {\n        docValue = values[random().nextInt(values.length)];\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", docValue));\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(Long.toString(docValue))));\n        doc.add(new StoredField(\"values\", docValue));\n      }\n\n      writer.addDocument(doc);\n\n      // add a gap\n      for (int j = TestUtil.nextInt(random(), 0, avgGap * 2); j >= 0; --j) {\n        writer.addDocument(new Document());\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.forceMerge(1);\n    }\n\n    final IndexReader indexReader = writer.getReader();\n    writer.close();\n\n    for (LeafReaderContext context : indexReader.leaves()) {\n      final LeafReader reader = context.reader();\n      final NumericDocValues numeric = DocValues.getNumeric(reader, \"numeric\");\n\n      final SortedDocValues sorted = DocValues.getSorted(reader, \"sorted\");\n\n      final BinaryDocValues binary = DocValues.getBinary(reader, \"binary\");\n\n      final SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(reader, \"sorted_numeric\");\n\n      final SortedSetDocValues sortedSet = DocValues.getSortedSet(reader, \"sorted_set\");\n\n      for (int i = 0; i < reader.maxDoc(); ++i) {\n        final Document doc = reader.document(i);\n        final IndexableField valueField = doc.getField(\"value\");\n        final Long value = valueField == null ? null : valueField.numericValue().longValue();\n\n        if (value == null) {\n          assertTrue(numeric.docID() + \" vs \" + i, numeric.docID() < i);\n        } else {\n          assertEquals(i, numeric.nextDoc());\n          assertEquals(i, binary.nextDoc());\n          assertEquals(i, sorted.nextDoc());\n          assertEquals(value.longValue(), numeric.longValue());\n          assertTrue(sorted.ordValue() >= 0);\n          assertEquals(new BytesRef(Long.toString(value)), sorted.lookupOrd(sorted.ordValue()));\n          assertEquals(new BytesRef(Long.toString(value)), binary.binaryValue());\n        }\n\n        final IndexableField[] valuesFields = doc.getFields(\"values\");\n        if (valuesFields.length == 0) {\n          assertTrue(sortedNumeric.docID() + \" vs \" + i, sortedNumeric.docID() < i);\n        } else {\n          final Set<Long> valueSet = new HashSet<>();\n          for (IndexableField sf : valuesFields) {\n            valueSet.add(sf.numericValue().longValue());\n          }\n\n          assertEquals(i, sortedNumeric.nextDoc());\n          assertEquals(valuesFields.length, sortedNumeric.docValueCount());\n          for (int j = 0; j < sortedNumeric.docValueCount(); ++j) {\n            assertTrue(valueSet.contains(sortedNumeric.nextValue()));\n          }\n          assertEquals(i, sortedSet.nextDoc());\n          int sortedSetCount = 0;\n          while (true) {\n            long ord = sortedSet.nextOrd();\n            if (ord == SortedSetDocValues.NO_MORE_ORDS) {\n              break;\n            }\n            assertTrue(valueSet.contains(Long.parseLong(sortedSet.lookupOrd(ord).utf8ToString())));\n            sortedSetCount++;\n          }\n          assertEquals(valueSet.size(), sortedSetCount);\n        }\n      }\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestLucene70DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSparseDocValuesVsStoredFields() throws Exception {\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 500)];\n    for (int i = 0; i < values.length; ++i) {\n      values[i] = random().nextLong();\n    }\n\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    // sparse compression is only enabled if less than 1% of docs have a value\n    final int avgGap = 100;\n\n    final int numDocs = atLeast(200);\n    for (int i = random().nextInt(avgGap * 2); i >= 0; --i) {\n      writer.addDocument(new Document());\n    }\n    final int maxNumValuesPerDoc = random().nextBoolean() ? 1 : TestUtil.nextInt(random(), 2, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n\n      // single-valued\n      long docValue = values[random().nextInt(values.length)];\n      doc.add(new NumericDocValuesField(\"numeric\", docValue));\n      doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(Long.toString(docValue))));\n      doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(Long.toString(docValue))));\n      doc.add(new StoredField(\"value\", docValue));\n\n      // multi-valued\n      final int numValues = TestUtil.nextInt(random(), 1, maxNumValuesPerDoc);\n      for (int j = 0; j < numValues; ++j) {\n        docValue = values[random().nextInt(values.length)];\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", docValue));\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(Long.toString(docValue))));\n        doc.add(new StoredField(\"values\", docValue));\n      }\n\n      writer.addDocument(doc);\n\n      // add a gap\n      for (int j = TestUtil.nextInt(random(), 0, avgGap * 2); j >= 0; --j) {\n        writer.addDocument(new Document());\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.forceMerge(1);\n    }\n\n    final IndexReader indexReader = writer.getReader();\n    writer.close();\n\n    for (LeafReaderContext context : indexReader.leaves()) {\n      final LeafReader reader = context.reader();\n      final NumericDocValues numeric = DocValues.getNumeric(reader, \"numeric\");\n\n      final SortedDocValues sorted = DocValues.getSorted(reader, \"sorted\");\n\n      final BinaryDocValues binary = DocValues.getBinary(reader, \"binary\");\n\n      final SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(reader, \"sorted_numeric\");\n\n      final SortedSetDocValues sortedSet = DocValues.getSortedSet(reader, \"sorted_set\");\n\n      for (int i = 0; i < reader.maxDoc(); ++i) {\n        final Document doc = reader.document(i);\n        final IndexableField valueField = doc.getField(\"value\");\n        final Long value = valueField == null ? null : valueField.numericValue().longValue();\n\n        if (value == null) {\n          assertTrue(numeric.docID() + \" vs \" + i, numeric.docID() < i);\n        } else {\n          assertEquals(i, numeric.nextDoc());\n          assertEquals(i, binary.nextDoc());\n          assertEquals(i, sorted.nextDoc());\n          assertEquals(value.longValue(), numeric.longValue());\n          assertTrue(sorted.ordValue() >= 0);\n          assertEquals(new BytesRef(Long.toString(value)), sorted.lookupOrd(sorted.ordValue()));\n          assertEquals(new BytesRef(Long.toString(value)), binary.binaryValue());\n        }\n\n        final IndexableField[] valuesFields = doc.getFields(\"values\");\n        if (valuesFields.length == 0) {\n          assertTrue(sortedNumeric.docID() + \" vs \" + i, sortedNumeric.docID() < i);\n        } else {\n          final Set<Long> valueSet = new HashSet<>();\n          for (IndexableField sf : valuesFields) {\n            valueSet.add(sf.numericValue().longValue());\n          }\n\n          assertEquals(i, sortedNumeric.nextDoc());\n          assertEquals(valuesFields.length, sortedNumeric.docValueCount());\n          for (int j = 0; j < sortedNumeric.docValueCount(); ++j) {\n            assertTrue(valueSet.contains(sortedNumeric.nextValue()));\n          }\n          assertEquals(i, sortedSet.nextDoc());\n          int sortedSetCount = 0;\n          while (true) {\n            long ord = sortedSet.nextOrd();\n            if (ord == SortedSetDocValues.NO_MORE_ORDS) {\n              break;\n            }\n            assertTrue(valueSet.contains(Long.parseLong(sortedSet.lookupOrd(ord).utf8ToString())));\n            sortedSetCount++;\n          }\n          assertEquals(valueSet.size(), sortedSetCount);\n        }\n      }\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestLucene70DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSparseDocValuesVsStoredFields() throws Exception {\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 500)];\n    for (int i = 0; i < values.length; ++i) {\n      values[i] = random().nextLong();\n    }\n\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    // sparse compression is only enabled if less than 1% of docs have a value\n    final int avgGap = 100;\n\n    final int numDocs = atLeast(200);\n    for (int i = random().nextInt(avgGap * 2); i >= 0; --i) {\n      writer.addDocument(new Document());\n    }\n    final int maxNumValuesPerDoc = random().nextBoolean() ? 1 : TestUtil.nextInt(random(), 2, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n\n      // single-valued\n      long docValue = values[random().nextInt(values.length)];\n      doc.add(new NumericDocValuesField(\"numeric\", docValue));\n      doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(Long.toString(docValue))));\n      doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(Long.toString(docValue))));\n      doc.add(new StoredField(\"value\", docValue));\n\n      // multi-valued\n      final int numValues = TestUtil.nextInt(random(), 1, maxNumValuesPerDoc);\n      for (int j = 0; j < numValues; ++j) {\n        docValue = values[random().nextInt(values.length)];\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", docValue));\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(Long.toString(docValue))));\n        doc.add(new StoredField(\"values\", docValue));\n      }\n\n      writer.addDocument(doc);\n\n      // add a gap\n      for (int j = TestUtil.nextInt(random(), 0, avgGap * 2); j >= 0; --j) {\n        writer.addDocument(new Document());\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.forceMerge(1);\n    }\n\n    final IndexReader indexReader = writer.getReader();\n    writer.close();\n\n    for (LeafReaderContext context : indexReader.leaves()) {\n      final LeafReader reader = context.reader();\n      final NumericDocValues numeric = DocValues.getNumeric(reader, \"numeric\");\n\n      final SortedDocValues sorted = DocValues.getSorted(reader, \"sorted\");\n\n      final BinaryDocValues binary = DocValues.getBinary(reader, \"binary\");\n\n      final SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(reader, \"sorted_numeric\");\n\n      final SortedSetDocValues sortedSet = DocValues.getSortedSet(reader, \"sorted_set\");\n\n      for (int i = 0; i < reader.maxDoc(); ++i) {\n        final Document doc = reader.document(i);\n        final IndexableField valueField = doc.getField(\"value\");\n        final Long value = valueField == null ? null : valueField.numericValue().longValue();\n\n        if (value == null) {\n          assertTrue(numeric.docID() + \" vs \" + i, numeric.docID() < i);\n        } else {\n          assertEquals(i, numeric.nextDoc());\n          assertEquals(i, binary.nextDoc());\n          assertEquals(i, sorted.nextDoc());\n          assertEquals(value.longValue(), numeric.longValue());\n          assertTrue(sorted.ordValue() >= 0);\n          assertEquals(new BytesRef(Long.toString(value)), sorted.lookupOrd(sorted.ordValue()));\n          assertEquals(new BytesRef(Long.toString(value)), binary.binaryValue());\n        }\n\n        final IndexableField[] valuesFields = doc.getFields(\"values\");\n        if (valuesFields.length == 0) {\n          assertTrue(sortedNumeric.docID() + \" vs \" + i, sortedNumeric.docID() < i);\n        } else {\n          final Set<Long> valueSet = new HashSet<>();\n          for (IndexableField sf : valuesFields) {\n            valueSet.add(sf.numericValue().longValue());\n          }\n\n          assertEquals(i, sortedNumeric.nextDoc());\n          assertEquals(valuesFields.length, sortedNumeric.docValueCount());\n          for (int j = 0; j < sortedNumeric.docValueCount(); ++j) {\n            assertTrue(valueSet.contains(sortedNumeric.nextValue()));\n          }\n          assertEquals(i, sortedSet.nextDoc());\n          int sortedSetCount = 0;\n          while (true) {\n            long ord = sortedSet.nextOrd();\n            if (ord == SortedSetDocValues.NO_MORE_ORDS) {\n              break;\n            }\n            assertTrue(valueSet.contains(Long.parseLong(sortedSet.lookupOrd(ord).utf8ToString())));\n            sortedSetCount++;\n          }\n          assertEquals(valueSet.size(), sortedSetCount);\n        }\n      }\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":5,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene70/TestLucene70DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestLucene70DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","sourceNew":"  private void doTestSparseDocValuesVsStoredFields() throws Exception {\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 500)];\n    for (int i = 0; i < values.length; ++i) {\n      values[i] = random().nextLong();\n    }\n\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    // sparse compression is only enabled if less than 1% of docs have a value\n    final int avgGap = 100;\n\n    final int numDocs = atLeast(200);\n    for (int i = random().nextInt(avgGap * 2); i >= 0; --i) {\n      writer.addDocument(new Document());\n    }\n    final int maxNumValuesPerDoc = random().nextBoolean() ? 1 : TestUtil.nextInt(random(), 2, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n\n      // single-valued\n      long docValue = values[random().nextInt(values.length)];\n      doc.add(new NumericDocValuesField(\"numeric\", docValue));\n      doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(Long.toString(docValue))));\n      doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(Long.toString(docValue))));\n      doc.add(new StoredField(\"value\", docValue));\n\n      // multi-valued\n      final int numValues = TestUtil.nextInt(random(), 1, maxNumValuesPerDoc);\n      for (int j = 0; j < numValues; ++j) {\n        docValue = values[random().nextInt(values.length)];\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", docValue));\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(Long.toString(docValue))));\n        doc.add(new StoredField(\"values\", docValue));\n      }\n\n      writer.addDocument(doc);\n\n      // add a gap\n      for (int j = TestUtil.nextInt(random(), 0, avgGap * 2); j >= 0; --j) {\n        writer.addDocument(new Document());\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.forceMerge(1);\n    }\n\n    final IndexReader indexReader = writer.getReader();\n    writer.close();\n\n    for (LeafReaderContext context : indexReader.leaves()) {\n      final LeafReader reader = context.reader();\n      final NumericDocValues numeric = DocValues.getNumeric(reader, \"numeric\");\n\n      final SortedDocValues sorted = DocValues.getSorted(reader, \"sorted\");\n\n      final BinaryDocValues binary = DocValues.getBinary(reader, \"binary\");\n\n      final SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(reader, \"sorted_numeric\");\n\n      final SortedSetDocValues sortedSet = DocValues.getSortedSet(reader, \"sorted_set\");\n\n      for (int i = 0; i < reader.maxDoc(); ++i) {\n        final Document doc = reader.document(i);\n        final IndexableField valueField = doc.getField(\"value\");\n        final Long value = valueField == null ? null : valueField.numericValue().longValue();\n\n        if (value == null) {\n          assertTrue(numeric.docID() + \" vs \" + i, numeric.docID() < i);\n        } else {\n          assertEquals(i, numeric.nextDoc());\n          assertEquals(i, binary.nextDoc());\n          assertEquals(i, sorted.nextDoc());\n          assertEquals(value.longValue(), numeric.longValue());\n          assertTrue(sorted.ordValue() >= 0);\n          assertEquals(new BytesRef(Long.toString(value)), sorted.lookupOrd(sorted.ordValue()));\n          assertEquals(new BytesRef(Long.toString(value)), binary.binaryValue());\n        }\n\n        final IndexableField[] valuesFields = doc.getFields(\"values\");\n        if (valuesFields.length == 0) {\n          assertTrue(sortedNumeric.docID() + \" vs \" + i, sortedNumeric.docID() < i);\n        } else {\n          final Set<Long> valueSet = new HashSet<>();\n          for (IndexableField sf : valuesFields) {\n            valueSet.add(sf.numericValue().longValue());\n          }\n\n          assertEquals(i, sortedNumeric.nextDoc());\n          assertEquals(valuesFields.length, sortedNumeric.docValueCount());\n          for (int j = 0; j < sortedNumeric.docValueCount(); ++j) {\n            assertTrue(valueSet.contains(sortedNumeric.nextValue()));\n          }\n          assertEquals(i, sortedSet.nextDoc());\n          int sortedSetCount = 0;\n          while (true) {\n            long ord = sortedSet.nextOrd();\n            if (ord == SortedSetDocValues.NO_MORE_ORDS) {\n              break;\n            }\n            assertTrue(valueSet.contains(Long.parseLong(sortedSet.lookupOrd(ord).utf8ToString())));\n            sortedSetCount++;\n          }\n          assertEquals(valueSet.size(), sortedSetCount);\n        }\n      }\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSparseDocValuesVsStoredFields() throws Exception {\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 500)];\n    for (int i = 0; i < values.length; ++i) {\n      values[i] = random().nextLong();\n    }\n\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    // sparse compression is only enabled if less than 1% of docs have a value\n    final int avgGap = 100;\n\n    final int numDocs = atLeast(200);\n    for (int i = random().nextInt(avgGap * 2); i >= 0; --i) {\n      writer.addDocument(new Document());\n    }\n    final int maxNumValuesPerDoc = random().nextBoolean() ? 1 : TestUtil.nextInt(random(), 2, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n\n      // single-valued\n      long docValue = values[random().nextInt(values.length)];\n      doc.add(new NumericDocValuesField(\"numeric\", docValue));\n      doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(Long.toString(docValue))));\n      doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(Long.toString(docValue))));\n      doc.add(new StoredField(\"value\", docValue));\n\n      // multi-valued\n      final int numValues = TestUtil.nextInt(random(), 1, maxNumValuesPerDoc);\n      for (int j = 0; j < numValues; ++j) {\n        docValue = values[random().nextInt(values.length)];\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", docValue));\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(Long.toString(docValue))));\n        doc.add(new StoredField(\"values\", docValue));\n      }\n\n      writer.addDocument(doc);\n\n      // add a gap\n      for (int j = TestUtil.nextInt(random(), 0, avgGap * 2); j >= 0; --j) {\n        writer.addDocument(new Document());\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.forceMerge(1);\n    }\n\n    final IndexReader indexReader = writer.getReader();\n    writer.close();\n\n    for (LeafReaderContext context : indexReader.leaves()) {\n      final LeafReader reader = context.reader();\n      final NumericDocValues numeric = DocValues.getNumeric(reader, \"numeric\");\n\n      final SortedDocValues sorted = DocValues.getSorted(reader, \"sorted\");\n\n      final BinaryDocValues binary = DocValues.getBinary(reader, \"binary\");\n\n      final SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(reader, \"sorted_numeric\");\n\n      final SortedSetDocValues sortedSet = DocValues.getSortedSet(reader, \"sorted_set\");\n\n      for (int i = 0; i < reader.maxDoc(); ++i) {\n        final Document doc = reader.document(i);\n        final IndexableField valueField = doc.getField(\"value\");\n        final Long value = valueField == null ? null : valueField.numericValue().longValue();\n\n        if (value == null) {\n          assertTrue(numeric.docID() + \" vs \" + i, numeric.docID() < i);\n        } else {\n          assertEquals(i, numeric.nextDoc());\n          assertEquals(i, binary.nextDoc());\n          assertEquals(i, sorted.nextDoc());\n          assertEquals(value.longValue(), numeric.longValue());\n          assertTrue(sorted.ordValue() >= 0);\n          assertEquals(new BytesRef(Long.toString(value)), sorted.lookupOrd(sorted.ordValue()));\n          assertEquals(new BytesRef(Long.toString(value)), binary.binaryValue());\n        }\n\n        final IndexableField[] valuesFields = doc.getFields(\"values\");\n        if (valuesFields.length == 0) {\n          assertTrue(sortedNumeric.docID() + \" vs \" + i, sortedNumeric.docID() < i);\n        } else {\n          final Set<Long> valueSet = new HashSet<>();\n          for (IndexableField sf : valuesFields) {\n            valueSet.add(sf.numericValue().longValue());\n          }\n\n          assertEquals(i, sortedNumeric.nextDoc());\n          assertEquals(valuesFields.length, sortedNumeric.docValueCount());\n          for (int j = 0; j < sortedNumeric.docValueCount(); ++j) {\n            assertTrue(valueSet.contains(sortedNumeric.nextValue()));\n          }\n          assertEquals(i, sortedSet.nextDoc());\n          int sortedSetCount = 0;\n          while (true) {\n            long ord = sortedSet.nextOrd();\n            if (ord == SortedSetDocValues.NO_MORE_ORDS) {\n              break;\n            }\n            assertTrue(valueSet.contains(Long.parseLong(sortedSet.lookupOrd(ord).utf8ToString())));\n            sortedSetCount++;\n          }\n          assertEquals(valueSet.size(), sortedSetCount);\n        }\n      }\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":6,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestLucene80DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestLucene70DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","sourceNew":"  private void doTestSparseDocValuesVsStoredFields() throws Exception {\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 500)];\n    for (int i = 0; i < values.length; ++i) {\n      values[i] = random().nextLong();\n    }\n\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    // sparse compression is only enabled if less than 1% of docs have a value\n    final int avgGap = 100;\n\n    final int numDocs = atLeast(200);\n    for (int i = random().nextInt(avgGap * 2); i >= 0; --i) {\n      writer.addDocument(new Document());\n    }\n    final int maxNumValuesPerDoc = random().nextBoolean() ? 1 : TestUtil.nextInt(random(), 2, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n\n      // single-valued\n      long docValue = values[random().nextInt(values.length)];\n      doc.add(new NumericDocValuesField(\"numeric\", docValue));\n      doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(Long.toString(docValue))));\n      doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(Long.toString(docValue))));\n      doc.add(new StoredField(\"value\", docValue));\n\n      // multi-valued\n      final int numValues = TestUtil.nextInt(random(), 1, maxNumValuesPerDoc);\n      for (int j = 0; j < numValues; ++j) {\n        docValue = values[random().nextInt(values.length)];\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", docValue));\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(Long.toString(docValue))));\n        doc.add(new StoredField(\"values\", docValue));\n      }\n\n      writer.addDocument(doc);\n\n      // add a gap\n      for (int j = TestUtil.nextInt(random(), 0, avgGap * 2); j >= 0; --j) {\n        writer.addDocument(new Document());\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.forceMerge(1);\n    }\n\n    final IndexReader indexReader = writer.getReader();\n    writer.close();\n\n    for (LeafReaderContext context : indexReader.leaves()) {\n      final LeafReader reader = context.reader();\n      final NumericDocValues numeric = DocValues.getNumeric(reader, \"numeric\");\n\n      final SortedDocValues sorted = DocValues.getSorted(reader, \"sorted\");\n\n      final BinaryDocValues binary = DocValues.getBinary(reader, \"binary\");\n\n      final SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(reader, \"sorted_numeric\");\n\n      final SortedSetDocValues sortedSet = DocValues.getSortedSet(reader, \"sorted_set\");\n\n      for (int i = 0; i < reader.maxDoc(); ++i) {\n        final Document doc = reader.document(i);\n        final IndexableField valueField = doc.getField(\"value\");\n        final Long value = valueField == null ? null : valueField.numericValue().longValue();\n\n        if (value == null) {\n          assertTrue(numeric.docID() + \" vs \" + i, numeric.docID() < i);\n        } else {\n          assertEquals(i, numeric.nextDoc());\n          assertEquals(i, binary.nextDoc());\n          assertEquals(i, sorted.nextDoc());\n          assertEquals(value.longValue(), numeric.longValue());\n          assertTrue(sorted.ordValue() >= 0);\n          assertEquals(new BytesRef(Long.toString(value)), sorted.lookupOrd(sorted.ordValue()));\n          assertEquals(new BytesRef(Long.toString(value)), binary.binaryValue());\n        }\n\n        final IndexableField[] valuesFields = doc.getFields(\"values\");\n        if (valuesFields.length == 0) {\n          assertTrue(sortedNumeric.docID() + \" vs \" + i, sortedNumeric.docID() < i);\n        } else {\n          final Set<Long> valueSet = new HashSet<>();\n          for (IndexableField sf : valuesFields) {\n            valueSet.add(sf.numericValue().longValue());\n          }\n\n          assertEquals(i, sortedNumeric.nextDoc());\n          assertEquals(valuesFields.length, sortedNumeric.docValueCount());\n          for (int j = 0; j < sortedNumeric.docValueCount(); ++j) {\n            assertTrue(valueSet.contains(sortedNumeric.nextValue()));\n          }\n          assertEquals(i, sortedSet.nextDoc());\n          int sortedSetCount = 0;\n          while (true) {\n            long ord = sortedSet.nextOrd();\n            if (ord == SortedSetDocValues.NO_MORE_ORDS) {\n              break;\n            }\n            assertTrue(valueSet.contains(Long.parseLong(sortedSet.lookupOrd(ord).utf8ToString())));\n            sortedSetCount++;\n          }\n          assertEquals(valueSet.size(), sortedSetCount);\n        }\n      }\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSparseDocValuesVsStoredFields() throws Exception {\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 500)];\n    for (int i = 0; i < values.length; ++i) {\n      values[i] = random().nextLong();\n    }\n\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    // sparse compression is only enabled if less than 1% of docs have a value\n    final int avgGap = 100;\n\n    final int numDocs = atLeast(200);\n    for (int i = random().nextInt(avgGap * 2); i >= 0; --i) {\n      writer.addDocument(new Document());\n    }\n    final int maxNumValuesPerDoc = random().nextBoolean() ? 1 : TestUtil.nextInt(random(), 2, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n\n      // single-valued\n      long docValue = values[random().nextInt(values.length)];\n      doc.add(new NumericDocValuesField(\"numeric\", docValue));\n      doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(Long.toString(docValue))));\n      doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(Long.toString(docValue))));\n      doc.add(new StoredField(\"value\", docValue));\n\n      // multi-valued\n      final int numValues = TestUtil.nextInt(random(), 1, maxNumValuesPerDoc);\n      for (int j = 0; j < numValues; ++j) {\n        docValue = values[random().nextInt(values.length)];\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", docValue));\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(Long.toString(docValue))));\n        doc.add(new StoredField(\"values\", docValue));\n      }\n\n      writer.addDocument(doc);\n\n      // add a gap\n      for (int j = TestUtil.nextInt(random(), 0, avgGap * 2); j >= 0; --j) {\n        writer.addDocument(new Document());\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.forceMerge(1);\n    }\n\n    final IndexReader indexReader = writer.getReader();\n    writer.close();\n\n    for (LeafReaderContext context : indexReader.leaves()) {\n      final LeafReader reader = context.reader();\n      final NumericDocValues numeric = DocValues.getNumeric(reader, \"numeric\");\n\n      final SortedDocValues sorted = DocValues.getSorted(reader, \"sorted\");\n\n      final BinaryDocValues binary = DocValues.getBinary(reader, \"binary\");\n\n      final SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(reader, \"sorted_numeric\");\n\n      final SortedSetDocValues sortedSet = DocValues.getSortedSet(reader, \"sorted_set\");\n\n      for (int i = 0; i < reader.maxDoc(); ++i) {\n        final Document doc = reader.document(i);\n        final IndexableField valueField = doc.getField(\"value\");\n        final Long value = valueField == null ? null : valueField.numericValue().longValue();\n\n        if (value == null) {\n          assertTrue(numeric.docID() + \" vs \" + i, numeric.docID() < i);\n        } else {\n          assertEquals(i, numeric.nextDoc());\n          assertEquals(i, binary.nextDoc());\n          assertEquals(i, sorted.nextDoc());\n          assertEquals(value.longValue(), numeric.longValue());\n          assertTrue(sorted.ordValue() >= 0);\n          assertEquals(new BytesRef(Long.toString(value)), sorted.lookupOrd(sorted.ordValue()));\n          assertEquals(new BytesRef(Long.toString(value)), binary.binaryValue());\n        }\n\n        final IndexableField[] valuesFields = doc.getFields(\"values\");\n        if (valuesFields.length == 0) {\n          assertTrue(sortedNumeric.docID() + \" vs \" + i, sortedNumeric.docID() < i);\n        } else {\n          final Set<Long> valueSet = new HashSet<>();\n          for (IndexableField sf : valuesFields) {\n            valueSet.add(sf.numericValue().longValue());\n          }\n\n          assertEquals(i, sortedNumeric.nextDoc());\n          assertEquals(valuesFields.length, sortedNumeric.docValueCount());\n          for (int j = 0; j < sortedNumeric.docValueCount(); ++j) {\n            assertTrue(valueSet.contains(sortedNumeric.nextValue()));\n          }\n          assertEquals(i, sortedSet.nextDoc());\n          int sortedSetCount = 0;\n          while (true) {\n            long ord = sortedSet.nextOrd();\n            if (ord == SortedSetDocValues.NO_MORE_ORDS) {\n              break;\n            }\n            assertTrue(valueSet.contains(Long.parseLong(sortedSet.lookupOrd(ord).utf8ToString())));\n            sortedSetCount++;\n          }\n          assertEquals(valueSet.size(), sortedSetCount);\n        }\n      }\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":5,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene70/TestLucene70DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestLucene70DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","sourceNew":"  private void doTestSparseDocValuesVsStoredFields() throws Exception {\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 500)];\n    for (int i = 0; i < values.length; ++i) {\n      values[i] = random().nextLong();\n    }\n\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    // sparse compression is only enabled if less than 1% of docs have a value\n    final int avgGap = 100;\n\n    final int numDocs = atLeast(200);\n    for (int i = random().nextInt(avgGap * 2); i >= 0; --i) {\n      writer.addDocument(new Document());\n    }\n    final int maxNumValuesPerDoc = random().nextBoolean() ? 1 : TestUtil.nextInt(random(), 2, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n\n      // single-valued\n      long docValue = values[random().nextInt(values.length)];\n      doc.add(new NumericDocValuesField(\"numeric\", docValue));\n      doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(Long.toString(docValue))));\n      doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(Long.toString(docValue))));\n      doc.add(new StoredField(\"value\", docValue));\n\n      // multi-valued\n      final int numValues = TestUtil.nextInt(random(), 1, maxNumValuesPerDoc);\n      for (int j = 0; j < numValues; ++j) {\n        docValue = values[random().nextInt(values.length)];\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", docValue));\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(Long.toString(docValue))));\n        doc.add(new StoredField(\"values\", docValue));\n      }\n\n      writer.addDocument(doc);\n\n      // add a gap\n      for (int j = TestUtil.nextInt(random(), 0, avgGap * 2); j >= 0; --j) {\n        writer.addDocument(new Document());\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.forceMerge(1);\n    }\n\n    final IndexReader indexReader = writer.getReader();\n    writer.close();\n\n    for (LeafReaderContext context : indexReader.leaves()) {\n      final LeafReader reader = context.reader();\n      final NumericDocValues numeric = DocValues.getNumeric(reader, \"numeric\");\n\n      final SortedDocValues sorted = DocValues.getSorted(reader, \"sorted\");\n\n      final BinaryDocValues binary = DocValues.getBinary(reader, \"binary\");\n\n      final SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(reader, \"sorted_numeric\");\n\n      final SortedSetDocValues sortedSet = DocValues.getSortedSet(reader, \"sorted_set\");\n\n      for (int i = 0; i < reader.maxDoc(); ++i) {\n        final Document doc = reader.document(i);\n        final IndexableField valueField = doc.getField(\"value\");\n        final Long value = valueField == null ? null : valueField.numericValue().longValue();\n\n        if (value == null) {\n          assertTrue(numeric.docID() + \" vs \" + i, numeric.docID() < i);\n        } else {\n          assertEquals(i, numeric.nextDoc());\n          assertEquals(i, binary.nextDoc());\n          assertEquals(i, sorted.nextDoc());\n          assertEquals(value.longValue(), numeric.longValue());\n          assertTrue(sorted.ordValue() >= 0);\n          assertEquals(new BytesRef(Long.toString(value)), sorted.lookupOrd(sorted.ordValue()));\n          assertEquals(new BytesRef(Long.toString(value)), binary.binaryValue());\n        }\n\n        final IndexableField[] valuesFields = doc.getFields(\"values\");\n        if (valuesFields.length == 0) {\n          assertTrue(sortedNumeric.docID() + \" vs \" + i, sortedNumeric.docID() < i);\n        } else {\n          final Set<Long> valueSet = new HashSet<>();\n          for (IndexableField sf : valuesFields) {\n            valueSet.add(sf.numericValue().longValue());\n          }\n\n          assertEquals(i, sortedNumeric.nextDoc());\n          assertEquals(valuesFields.length, sortedNumeric.docValueCount());\n          for (int j = 0; j < sortedNumeric.docValueCount(); ++j) {\n            assertTrue(valueSet.contains(sortedNumeric.nextValue()));\n          }\n          assertEquals(i, sortedSet.nextDoc());\n          int sortedSetCount = 0;\n          while (true) {\n            long ord = sortedSet.nextOrd();\n            if (ord == SortedSetDocValues.NO_MORE_ORDS) {\n              break;\n            }\n            assertTrue(valueSet.contains(Long.parseLong(sortedSet.lookupOrd(ord).utf8ToString())));\n            sortedSetCount++;\n          }\n          assertEquals(valueSet.size(), sortedSetCount);\n        }\n      }\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSparseDocValuesVsStoredFields() throws Exception {\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 500)];\n    for (int i = 0; i < values.length; ++i) {\n      values[i] = random().nextLong();\n    }\n\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    // sparse compression is only enabled if less than 1% of docs have a value\n    final int avgGap = 100;\n\n    final int numDocs = atLeast(200);\n    for (int i = random().nextInt(avgGap * 2); i >= 0; --i) {\n      writer.addDocument(new Document());\n    }\n    final int maxNumValuesPerDoc = random().nextBoolean() ? 1 : TestUtil.nextInt(random(), 2, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n\n      // single-valued\n      long docValue = values[random().nextInt(values.length)];\n      doc.add(new NumericDocValuesField(\"numeric\", docValue));\n      doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(Long.toString(docValue))));\n      doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(Long.toString(docValue))));\n      doc.add(new StoredField(\"value\", docValue));\n\n      // multi-valued\n      final int numValues = TestUtil.nextInt(random(), 1, maxNumValuesPerDoc);\n      for (int j = 0; j < numValues; ++j) {\n        docValue = values[random().nextInt(values.length)];\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", docValue));\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(Long.toString(docValue))));\n        doc.add(new StoredField(\"values\", docValue));\n      }\n\n      writer.addDocument(doc);\n\n      // add a gap\n      for (int j = TestUtil.nextInt(random(), 0, avgGap * 2); j >= 0; --j) {\n        writer.addDocument(new Document());\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.forceMerge(1);\n    }\n\n    final IndexReader indexReader = writer.getReader();\n    writer.close();\n\n    for (LeafReaderContext context : indexReader.leaves()) {\n      final LeafReader reader = context.reader();\n      final NumericDocValues numeric = DocValues.getNumeric(reader, \"numeric\");\n\n      final SortedDocValues sorted = DocValues.getSorted(reader, \"sorted\");\n\n      final BinaryDocValues binary = DocValues.getBinary(reader, \"binary\");\n\n      final SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(reader, \"sorted_numeric\");\n\n      final SortedSetDocValues sortedSet = DocValues.getSortedSet(reader, \"sorted_set\");\n\n      for (int i = 0; i < reader.maxDoc(); ++i) {\n        final Document doc = reader.document(i);\n        final IndexableField valueField = doc.getField(\"value\");\n        final Long value = valueField == null ? null : valueField.numericValue().longValue();\n\n        if (value == null) {\n          assertTrue(numeric.docID() + \" vs \" + i, numeric.docID() < i);\n        } else {\n          assertEquals(i, numeric.nextDoc());\n          assertEquals(i, binary.nextDoc());\n          assertEquals(i, sorted.nextDoc());\n          assertEquals(value.longValue(), numeric.longValue());\n          assertTrue(sorted.ordValue() >= 0);\n          assertEquals(new BytesRef(Long.toString(value)), sorted.lookupOrd(sorted.ordValue()));\n          assertEquals(new BytesRef(Long.toString(value)), binary.binaryValue());\n        }\n\n        final IndexableField[] valuesFields = doc.getFields(\"values\");\n        if (valuesFields.length == 0) {\n          assertTrue(sortedNumeric.docID() + \" vs \" + i, sortedNumeric.docID() < i);\n        } else {\n          final Set<Long> valueSet = new HashSet<>();\n          for (IndexableField sf : valuesFields) {\n            valueSet.add(sf.numericValue().longValue());\n          }\n\n          assertEquals(i, sortedNumeric.nextDoc());\n          assertEquals(valuesFields.length, sortedNumeric.docValueCount());\n          for (int j = 0; j < sortedNumeric.docValueCount(); ++j) {\n            assertTrue(valueSet.contains(sortedNumeric.nextValue()));\n          }\n          assertEquals(i, sortedSet.nextDoc());\n          int sortedSetCount = 0;\n          while (true) {\n            long ord = sortedSet.nextOrd();\n            if (ord == SortedSetDocValues.NO_MORE_ORDS) {\n              break;\n            }\n            assertTrue(valueSet.contains(Long.parseLong(sortedSet.lookupOrd(ord).utf8ToString())));\n            sortedSetCount++;\n          }\n          assertEquals(valueSet.size(), sortedSetCount);\n        }\n      }\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":6,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestLucene80DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestLucene70DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","sourceNew":"  private void doTestSparseDocValuesVsStoredFields() throws Exception {\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 500)];\n    for (int i = 0; i < values.length; ++i) {\n      values[i] = random().nextLong();\n    }\n\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    // sparse compression is only enabled if less than 1% of docs have a value\n    final int avgGap = 100;\n\n    final int numDocs = atLeast(200);\n    for (int i = random().nextInt(avgGap * 2); i >= 0; --i) {\n      writer.addDocument(new Document());\n    }\n    final int maxNumValuesPerDoc = random().nextBoolean() ? 1 : TestUtil.nextInt(random(), 2, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n\n      // single-valued\n      long docValue = values[random().nextInt(values.length)];\n      doc.add(new NumericDocValuesField(\"numeric\", docValue));\n      doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(Long.toString(docValue))));\n      doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(Long.toString(docValue))));\n      doc.add(new StoredField(\"value\", docValue));\n\n      // multi-valued\n      final int numValues = TestUtil.nextInt(random(), 1, maxNumValuesPerDoc);\n      for (int j = 0; j < numValues; ++j) {\n        docValue = values[random().nextInt(values.length)];\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", docValue));\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(Long.toString(docValue))));\n        doc.add(new StoredField(\"values\", docValue));\n      }\n\n      writer.addDocument(doc);\n\n      // add a gap\n      for (int j = TestUtil.nextInt(random(), 0, avgGap * 2); j >= 0; --j) {\n        writer.addDocument(new Document());\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.forceMerge(1);\n    }\n\n    final IndexReader indexReader = writer.getReader();\n    writer.close();\n\n    for (LeafReaderContext context : indexReader.leaves()) {\n      final LeafReader reader = context.reader();\n      final NumericDocValues numeric = DocValues.getNumeric(reader, \"numeric\");\n\n      final SortedDocValues sorted = DocValues.getSorted(reader, \"sorted\");\n\n      final BinaryDocValues binary = DocValues.getBinary(reader, \"binary\");\n\n      final SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(reader, \"sorted_numeric\");\n\n      final SortedSetDocValues sortedSet = DocValues.getSortedSet(reader, \"sorted_set\");\n\n      for (int i = 0; i < reader.maxDoc(); ++i) {\n        final Document doc = reader.document(i);\n        final IndexableField valueField = doc.getField(\"value\");\n        final Long value = valueField == null ? null : valueField.numericValue().longValue();\n\n        if (value == null) {\n          assertTrue(numeric.docID() + \" vs \" + i, numeric.docID() < i);\n        } else {\n          assertEquals(i, numeric.nextDoc());\n          assertEquals(i, binary.nextDoc());\n          assertEquals(i, sorted.nextDoc());\n          assertEquals(value.longValue(), numeric.longValue());\n          assertTrue(sorted.ordValue() >= 0);\n          assertEquals(new BytesRef(Long.toString(value)), sorted.lookupOrd(sorted.ordValue()));\n          assertEquals(new BytesRef(Long.toString(value)), binary.binaryValue());\n        }\n\n        final IndexableField[] valuesFields = doc.getFields(\"values\");\n        if (valuesFields.length == 0) {\n          assertTrue(sortedNumeric.docID() + \" vs \" + i, sortedNumeric.docID() < i);\n        } else {\n          final Set<Long> valueSet = new HashSet<>();\n          for (IndexableField sf : valuesFields) {\n            valueSet.add(sf.numericValue().longValue());\n          }\n\n          assertEquals(i, sortedNumeric.nextDoc());\n          assertEquals(valuesFields.length, sortedNumeric.docValueCount());\n          for (int j = 0; j < sortedNumeric.docValueCount(); ++j) {\n            assertTrue(valueSet.contains(sortedNumeric.nextValue()));\n          }\n          assertEquals(i, sortedSet.nextDoc());\n          int sortedSetCount = 0;\n          while (true) {\n            long ord = sortedSet.nextOrd();\n            if (ord == SortedSetDocValues.NO_MORE_ORDS) {\n              break;\n            }\n            assertTrue(valueSet.contains(Long.parseLong(sortedSet.lookupOrd(ord).utf8ToString())));\n            sortedSetCount++;\n          }\n          assertEquals(valueSet.size(), sortedSetCount);\n        }\n      }\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSparseDocValuesVsStoredFields() throws Exception {\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 500)];\n    for (int i = 0; i < values.length; ++i) {\n      values[i] = random().nextLong();\n    }\n\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    // sparse compression is only enabled if less than 1% of docs have a value\n    final int avgGap = 100;\n\n    final int numDocs = atLeast(200);\n    for (int i = random().nextInt(avgGap * 2); i >= 0; --i) {\n      writer.addDocument(new Document());\n    }\n    final int maxNumValuesPerDoc = random().nextBoolean() ? 1 : TestUtil.nextInt(random(), 2, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n\n      // single-valued\n      long docValue = values[random().nextInt(values.length)];\n      doc.add(new NumericDocValuesField(\"numeric\", docValue));\n      doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(Long.toString(docValue))));\n      doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(Long.toString(docValue))));\n      doc.add(new StoredField(\"value\", docValue));\n\n      // multi-valued\n      final int numValues = TestUtil.nextInt(random(), 1, maxNumValuesPerDoc);\n      for (int j = 0; j < numValues; ++j) {\n        docValue = values[random().nextInt(values.length)];\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", docValue));\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(Long.toString(docValue))));\n        doc.add(new StoredField(\"values\", docValue));\n      }\n\n      writer.addDocument(doc);\n\n      // add a gap\n      for (int j = TestUtil.nextInt(random(), 0, avgGap * 2); j >= 0; --j) {\n        writer.addDocument(new Document());\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.forceMerge(1);\n    }\n\n    final IndexReader indexReader = writer.getReader();\n    writer.close();\n\n    for (LeafReaderContext context : indexReader.leaves()) {\n      final LeafReader reader = context.reader();\n      final NumericDocValues numeric = DocValues.getNumeric(reader, \"numeric\");\n\n      final SortedDocValues sorted = DocValues.getSorted(reader, \"sorted\");\n\n      final BinaryDocValues binary = DocValues.getBinary(reader, \"binary\");\n\n      final SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(reader, \"sorted_numeric\");\n\n      final SortedSetDocValues sortedSet = DocValues.getSortedSet(reader, \"sorted_set\");\n\n      for (int i = 0; i < reader.maxDoc(); ++i) {\n        final Document doc = reader.document(i);\n        final IndexableField valueField = doc.getField(\"value\");\n        final Long value = valueField == null ? null : valueField.numericValue().longValue();\n\n        if (value == null) {\n          assertTrue(numeric.docID() + \" vs \" + i, numeric.docID() < i);\n        } else {\n          assertEquals(i, numeric.nextDoc());\n          assertEquals(i, binary.nextDoc());\n          assertEquals(i, sorted.nextDoc());\n          assertEquals(value.longValue(), numeric.longValue());\n          assertTrue(sorted.ordValue() >= 0);\n          assertEquals(new BytesRef(Long.toString(value)), sorted.lookupOrd(sorted.ordValue()));\n          assertEquals(new BytesRef(Long.toString(value)), binary.binaryValue());\n        }\n\n        final IndexableField[] valuesFields = doc.getFields(\"values\");\n        if (valuesFields.length == 0) {\n          assertTrue(sortedNumeric.docID() + \" vs \" + i, sortedNumeric.docID() < i);\n        } else {\n          final Set<Long> valueSet = new HashSet<>();\n          for (IndexableField sf : valuesFields) {\n            valueSet.add(sf.numericValue().longValue());\n          }\n\n          assertEquals(i, sortedNumeric.nextDoc());\n          assertEquals(valuesFields.length, sortedNumeric.docValueCount());\n          for (int j = 0; j < sortedNumeric.docValueCount(); ++j) {\n            assertTrue(valueSet.contains(sortedNumeric.nextValue()));\n          }\n          assertEquals(i, sortedSet.nextDoc());\n          int sortedSetCount = 0;\n          while (true) {\n            long ord = sortedSet.nextOrd();\n            if (ord == SortedSetDocValues.NO_MORE_ORDS) {\n              break;\n            }\n            assertTrue(valueSet.contains(Long.parseLong(sortedSet.lookupOrd(ord).utf8ToString())));\n            sortedSetCount++;\n          }\n          assertEquals(valueSet.size(), sortedSetCount);\n        }\n      }\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["1967bed916cc89da82a1c2085f27976da6d08cbd","03e17b020972a0d6e8d6823f545571a66646a167"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","084884d4602f4d1c7411eab29e897e349ce62675"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"],"084884d4602f4d1c7411eab29e897e349ce62675":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"1967bed916cc89da82a1c2085f27976da6d08cbd":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1967bed916cc89da82a1c2085f27976da6d08cbd","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","084884d4602f4d1c7411eab29e897e349ce62675"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"084884d4602f4d1c7411eab29e897e349ce62675":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}