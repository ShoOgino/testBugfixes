{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#equalsTo(LTRScoringQuery).mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#equalsTo(LTRScoringQuery).mjava","pathOld":"/dev/null","sourceNew":"  private boolean equalsTo(LTRScoringQuery other) {\n    if (ltrScoringModel == null) {\n      if (other.ltrScoringModel != null) {\n        return false;\n      }\n    } else if (!ltrScoringModel.equals(other.ltrScoringModel)) {\n      return false;\n    }\n    if (originalQuery == null) {\n      if (other.originalQuery != null) {\n        return false;\n      }\n    } else if (!originalQuery.equals(other.originalQuery)) {\n      return false;\n    }\n    if (efi == null) {\n      if (other.efi != null) {\n        return false;\n      }\n    } else {\n      if (other.efi == null || efi.size() != other.efi.size()) {\n        return false;\n      }\n      for(final Map.Entry<String,String[]> entry : efi.entrySet()) {\n        final String key = entry.getKey();\n        final String[] otherValues = other.efi.get(key);\n        if (otherValues == null || !Arrays.equals(otherValues,entry.getValue())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#equalsTo(LTRScoringQuery).mjava","pathOld":"/dev/null","sourceNew":"  private boolean equalsTo(LTRScoringQuery other) {\n    if (ltrScoringModel == null) {\n      if (other.ltrScoringModel != null) {\n        return false;\n      }\n    } else if (!ltrScoringModel.equals(other.ltrScoringModel)) {\n      return false;\n    }\n    if (originalQuery == null) {\n      if (other.originalQuery != null) {\n        return false;\n      }\n    } else if (!originalQuery.equals(other.originalQuery)) {\n      return false;\n    }\n    if (efi == null) {\n      if (other.efi != null) {\n        return false;\n      }\n    } else {\n      if (other.efi == null || efi.size() != other.efi.size()) {\n        return false;\n      }\n      for(final Map.Entry<String,String[]> entry : efi.entrySet()) {\n        final String key = entry.getKey();\n        final String[] otherValues = other.efi.get(key);\n        if (otherValues == null || !Arrays.equals(otherValues,entry.getValue())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"]},"commit2Childs":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}