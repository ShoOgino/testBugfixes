{"path":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#flushTermsBlock(int,int).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#flushTermsBlock(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriter#flushTermsBlock(int,int).mjava","sourceNew":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n    if (DEBUG) System.out.println(\"PW: flushTermsBlock start=\" + start + \" count=\" + count + \" pendingTerms.size()=\" + pendingTerms.size());\n    int wrappedCount = 0;\n    assert buffer.getFilePointer() == 0;\n    assert start >= count;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    for(int idx=pendingTerms.size()-start; idx<limit; idx++) {\n      final PendingTerm term = pendingTerms.get(idx);\n      if (term == null) {\n        wrappedCount++;\n      } else {\n        buffer.writeVInt(term.bytes.length);\n        buffer.writeBytes(term.bytes, 0, term.bytes.length);\n      }\n    }\n\n    termsOut.writeVInt((int) buffer.getFilePointer());\n    buffer.writeTo(termsOut);\n    buffer.reset();\n\n    // TDOO: this could be somewhat costly since\n    // pendingTerms.size() could be biggish?\n    int futureWrappedCount = 0;\n    final int limit2 = pendingTerms.size();\n    for(int idx=limit;idx<limit2;idx++) {\n      if (pendingTerms.get(idx) == null) {\n        futureWrappedCount++;\n      }\n    }\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(pendingTerms.size()-start, limit).clear();\n\n    if (DEBUG) System.out.println(\"PW:   len=\" + buffer.getFilePointer() + \" fp=\" + termsOut.getFilePointer() + \" futureWrappedCount=\" + futureWrappedCount + \" wrappedCount=\" + wrappedCount);\n    // TODO: can we avoid calling this if all terms\n    // were inlined...?  Eg for a \"primary key\" field, the\n    // wrapped codec is never invoked...\n    wrappedPostingsWriter.flushTermsBlock(futureWrappedCount+wrappedCount, wrappedCount);\n  }\n\n","sourceOld":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n    if (DEBUG) System.out.println(\"PW: flushTermsBlock start=\" + start + \" count=\" + count + \" pendingTerms.size()=\" + pendingTerms.size());\n    int wrappedCount = 0;\n    assert buffer.getFilePointer() == 0;\n    assert start >= count;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    for(int idx=pendingTerms.size()-start; idx<limit; idx++) {\n      final PendingTerm term = pendingTerms.get(idx);\n      if (term == null) {\n        wrappedCount++;\n      } else {\n        buffer.writeVInt(term.bytes.length);\n        buffer.writeBytes(term.bytes, 0, term.bytes.length);\n      }\n    }\n\n    termsOut.writeVInt((int) buffer.getFilePointer());\n    buffer.writeTo(termsOut);\n    buffer.reset();\n\n    // TDOO: this could be somewhat costly since\n    // pendingTerms.size() could be biggish?\n    int futureWrappedCount = 0;\n    final int limit2 = pendingTerms.size();\n    for(int idx=limit;idx<limit2;idx++) {\n      if (pendingTerms.get(idx) == null) {\n        futureWrappedCount++;\n      }\n    }\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(pendingTerms.size()-start, limit).clear();\n\n    if (DEBUG) System.out.println(\"PW:   len=\" + buffer.getFilePointer() + \" fp=\" + termsOut.getFilePointer() + \" futureWrappedCount=\" + futureWrappedCount + \" wrappedCount=\" + wrappedCount);\n    // TODO: can we avoid calling this if all terms\n    // were inlined...?  Eg for a \"primary key\" field, the\n    // wrapped codec is never invoked...\n    wrappedPostingsWriter.flushTermsBlock(futureWrappedCount+wrappedCount, wrappedCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#flushTermsBlock(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#flushTermsBlock(int,int).mjava","sourceNew":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n    if (DEBUG) System.out.println(\"PW: flushTermsBlock start=\" + start + \" count=\" + count + \" pendingTerms.size()=\" + pendingTerms.size());\n    int wrappedCount = 0;\n    assert buffer.getFilePointer() == 0;\n    assert start >= count;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    for(int idx=pendingTerms.size()-start; idx<limit; idx++) {\n      final PendingTerm term = pendingTerms.get(idx);\n      if (term == null) {\n        wrappedCount++;\n      } else {\n        buffer.writeVInt(term.bytes.length);\n        buffer.writeBytes(term.bytes, 0, term.bytes.length);\n      }\n    }\n\n    termsOut.writeVInt((int) buffer.getFilePointer());\n    buffer.writeTo(termsOut);\n    buffer.reset();\n\n    // TDOO: this could be somewhat costly since\n    // pendingTerms.size() could be biggish?\n    int futureWrappedCount = 0;\n    final int limit2 = pendingTerms.size();\n    for(int idx=limit;idx<limit2;idx++) {\n      if (pendingTerms.get(idx) == null) {\n        futureWrappedCount++;\n      }\n    }\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(pendingTerms.size()-start, limit).clear();\n\n    if (DEBUG) System.out.println(\"PW:   len=\" + buffer.getFilePointer() + \" fp=\" + termsOut.getFilePointer() + \" futureWrappedCount=\" + futureWrappedCount + \" wrappedCount=\" + wrappedCount);\n    // TODO: can we avoid calling this if all terms\n    // were inlined...?  Eg for a \"primary key\" field, the\n    // wrapped codec is never invoked...\n    wrappedPostingsWriter.flushTermsBlock(futureWrappedCount+wrappedCount, wrappedCount);\n  }\n\n","sourceOld":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n    if (DEBUG) System.out.println(\"PW: flushTermsBlock start=\" + start + \" count=\" + count + \" pendingTerms.size()=\" + pendingTerms.size());\n    int wrappedCount = 0;\n    assert buffer.getFilePointer() == 0;\n    assert start >= count;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    for(int idx=pendingTerms.size()-start; idx<limit; idx++) {\n      final PendingTerm term = pendingTerms.get(idx);\n      if (term == null) {\n        wrappedCount++;\n      } else {\n        buffer.writeVInt(term.bytes.length);\n        buffer.writeBytes(term.bytes, 0, term.bytes.length);\n      }\n    }\n\n    termsOut.writeVInt((int) buffer.getFilePointer());\n    buffer.writeTo(termsOut);\n    buffer.reset();\n\n    // TDOO: this could be somewhat costly since\n    // pendingTerms.size() could be biggish?\n    int futureWrappedCount = 0;\n    final int limit2 = pendingTerms.size();\n    for(int idx=limit;idx<limit2;idx++) {\n      if (pendingTerms.get(idx) == null) {\n        futureWrappedCount++;\n      }\n    }\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(pendingTerms.size()-start, limit).clear();\n\n    if (DEBUG) System.out.println(\"PW:   len=\" + buffer.getFilePointer() + \" fp=\" + termsOut.getFilePointer() + \" futureWrappedCount=\" + futureWrappedCount + \" wrappedCount=\" + wrappedCount);\n    // TODO: can we avoid calling this if all terms\n    // were inlined...?  Eg for a \"primary key\" field, the\n    // wrapped codec is never invoked...\n    wrappedPostingsWriter.flushTermsBlock(futureWrappedCount+wrappedCount, wrappedCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}