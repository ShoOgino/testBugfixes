{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/GatherNodesStream#toExpression(StreamFactory).mjava","commits":[{"id":"afdf6ff5b1319d8ae254212f1203a6233ed3e1dc","date":1461010196,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/GatherNodesStream#toExpression(StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    if(tupleStream instanceof Expressible){\n      expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This GatherNodesStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n\n    Set<Map.Entry> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    if(metrics != null) {\n      for (Metric metric : metrics) {\n        expression.addParameter(metric.toExpression(factory));\n      }\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gather\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"walk\", traverseFrom+\"->\"+traverseTo));\n    expression.addParameter(new StreamExpressionNamedParameter(\"trackTraversal\", Boolean.toString(trackTraversal)));\n\n    StringBuilder buf = new StringBuilder();\n    for(Traversal.Scatter sc : scatter) {\n      if(buf.length() > 0 ) {\n        buf.append(\",\");\n      }\n      buf.append(sc.toString());\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"scatter\", buf.toString()));\n\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e15955b4980562a0c1c81d08654904f3fadb83b","date":1461068916,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/GatherNodesStream#toExpression(StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    if(tupleStream instanceof Expressible){\n      expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This GatherNodesStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n\n    Set<Map.Entry> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    if(metrics != null) {\n      for (Metric metric : metrics) {\n        expression.addParameter(metric.toExpression(factory));\n      }\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gather\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"walk\", traverseFrom+\"->\"+traverseTo));\n    expression.addParameter(new StreamExpressionNamedParameter(\"trackTraversal\", Boolean.toString(trackTraversal)));\n\n    StringBuilder buf = new StringBuilder();\n    for(Traversal.Scatter sc : scatter) {\n      if(buf.length() > 0 ) {\n        buf.append(\",\");\n      }\n      buf.append(sc.toString());\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"scatter\", buf.toString()));\n\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941","date":1461079048,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/GatherNodesStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/GatherNodesStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException{\n    return toExpression(factory, true);\n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    if(tupleStream instanceof Expressible){\n      expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This GatherNodesStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n\n    Set<Map.Entry> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    if(metrics != null) {\n      for (Metric metric : metrics) {\n        expression.addParameter(metric.toExpression(factory));\n      }\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gather\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"walk\", traverseFrom+\"->\"+traverseTo));\n    expression.addParameter(new StreamExpressionNamedParameter(\"trackTraversal\", Boolean.toString(trackTraversal)));\n\n    StringBuilder buf = new StringBuilder();\n    for(Traversal.Scatter sc : scatter) {\n      if(buf.length() > 0 ) {\n        buf.append(\",\");\n      }\n      buf.append(sc.toString());\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"scatter\", buf.toString()));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b71fe681187ac8552caaff9d5a7f1f3cac47b56","date":1461081992,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/GatherNodesStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/GatherNodesStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException{\n    return toExpression(factory, true);\n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    if(tupleStream instanceof Expressible){\n      expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This GatherNodesStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n\n    Set<Map.Entry> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    if(metrics != null) {\n      for (Metric metric : metrics) {\n        expression.addParameter(metric.toExpression(factory));\n      }\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gather\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"walk\", traverseFrom+\"->\"+traverseTo));\n    expression.addParameter(new StreamExpressionNamedParameter(\"trackTraversal\", Boolean.toString(trackTraversal)));\n\n    StringBuilder buf = new StringBuilder();\n    for(Traversal.Scatter sc : scatter) {\n      if(buf.length() > 0 ) {\n        buf.append(\",\");\n      }\n      buf.append(sc.toString());\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"scatter\", buf.toString()));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"afdf6ff5b1319d8ae254212f1203a6233ed3e1dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["0e15955b4980562a0c1c81d08654904f3fadb83b","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["0e15955b4980562a0c1c81d08654904f3fadb83b"],"0e15955b4980562a0c1c81d08654904f3fadb83b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","afdf6ff5b1319d8ae254212f1203a6233ed3e1dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"]},"commit2Childs":{"afdf6ff5b1319d8ae254212f1203a6233ed3e1dc":["0e15955b4980562a0c1c81d08654904f3fadb83b"],"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afdf6ff5b1319d8ae254212f1203a6233ed3e1dc","0e15955b4980562a0c1c81d08654904f3fadb83b"],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"0e15955b4980562a0c1c81d08654904f3fadb83b":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}