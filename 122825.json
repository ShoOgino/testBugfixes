{"path":"src/java/org/apache/lucene/index/TermVectorsWriter#addAllDocVectors(TermFreqVector[]).mjava","commits":[{"id":"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0","date":1096997448,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsWriter#addAllDocVectors(TermFreqVector[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add a complete document specified by all its term vectors. If document has no\n   * term vectors, add value for tvx.\n   * \n   * @param vectors\n   * @throws IOException\n   */\n  public final void addAllDocVectors(TermFreqVector[] vectors)\n      throws IOException {\n    openDocument();\n\n    if (vectors != null) {\n      for (int i = 0; i < vectors.length; i++) {\n        boolean storePositionWithTermVector = false;\n        boolean storeOffsetWithTermVector = false;\n\n        try {\n\n          TermPositionVector tpVector = (TermPositionVector) vectors[i];\n\n          if (tpVector.size() > 0 && tpVector.getTermPositions(0) != null)\n            storePositionWithTermVector = true;\n          if (tpVector.size() > 0 && tpVector.getOffsets(0) != null)\n            storeOffsetWithTermVector = true;\n\n          FieldInfo fieldInfo = fieldInfos.fieldInfo(tpVector.getField());\n          openField(fieldInfo.number, storePositionWithTermVector, storeOffsetWithTermVector);\n\n          for (int j = 0; j < tpVector.size(); j++)\n            addTermInternal(tpVector.getTerms()[j], tpVector.getTermFrequencies()[j], tpVector.getTermPositions(j),\n                tpVector.getOffsets(j));\n\n          closeField();\n\n        } catch (ClassCastException ignore) {\n\n          TermFreqVector tfVector = vectors[i];\n\n          FieldInfo fieldInfo = fieldInfos.fieldInfo(tfVector.getField());\n          openField(fieldInfo.number, storePositionWithTermVector, storeOffsetWithTermVector);\n\n          for (int j = 0; j < tfVector.size(); j++)\n            addTermInternal(tfVector.getTerms()[j], tfVector.getTermFrequencies()[j], null, null);\n\n          closeField();\n\n        }\n      }\n    }\n\n    closeDocument();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["11764865fb318bf86302eab36bdf9cd00c50c110"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11764865fb318bf86302eab36bdf9cd00c50c110","date":1190109214,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsWriter#addAllDocVectors(TermFreqVector[]).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsWriter#addAllDocVectors(TermFreqVector[]).mjava","sourceNew":"  /**\n   * Add a complete document specified by all its term vectors. If document has no\n   * term vectors, add value for tvx.\n   * \n   * @param vectors\n   * @throws IOException\n   */\n  public final void addAllDocVectors(TermFreqVector[] vectors)\n      throws IOException {\n\n    tvx.writeLong(tvd.getFilePointer());\n\n    if (vectors != null) {\n      final int numFields = vectors.length;\n      tvd.writeVInt(numFields);\n\n      long[] fieldPointers = new long[numFields];\n\n      for (int i=0; i<numFields; i++) {\n        fieldPointers[i] = tvf.getFilePointer();\n\n        final int fieldNumber = fieldInfos.fieldNumber(vectors[i].getField());\n\n        // 1st pass: write field numbers to tvd\n        tvd.writeVInt(fieldNumber);\n\n        final int numTerms = vectors[i].size();\n        tvf.writeVInt(numTerms);\n\n        final TermPositionVector tpVector;\n        final TermFreqVector tfVector;\n\n        final byte bits;\n        final boolean storePositions;\n        final boolean storeOffsets;\n\n        if (vectors[i] instanceof TermPositionVector) {\n          // May have positions & offsets\n          tpVector = (TermPositionVector) vectors[i];\n          tfVector = null;\n          storePositions = tpVector.size() > 0 && tpVector.getTermPositions(0) != null;\n          storeOffsets = tpVector.size() > 0 && tpVector.getOffsets(0) != null;\n          bits = (byte) ((storePositions ? TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR : 0) +\n                         (storeOffsets ? TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR : 0));\n        } else {\n          tpVector = null;\n          tfVector = vectors[i];\n          bits = 0;\n          storePositions = false;\n          storeOffsets = false;\n        }\n\n        tvf.writeVInt(bits);\n\n        final String[] terms = vectors[i].getTerms();\n        final int[] freqs = vectors[i].getTermFrequencies();\n\n        String lastTermText = \"\";\n        for (int j=0; j<numTerms; j++) {\n          final String termText = terms[j];\n          int start = StringHelper.stringDifference(lastTermText, termText);\n          int length = termText.length() - start;\n          tvf.writeVInt(start);       // write shared prefix length\n          tvf.writeVInt(length);        // write delta length\n          tvf.writeChars(termText, start, length);  // write delta chars\n          lastTermText = termText;\n\n          final int termFreq = freqs[j];\n\n          tvf.writeVInt(termFreq);\n\n          if (storePositions) {\n            final int[] positions = tpVector.getTermPositions(j);\n            if (positions == null)\n              throw new IllegalStateException(\"Trying to write positions that are null!\");\n            assert positions.length == termFreq;\n\n            // use delta encoding for positions\n            int lastPosition = 0;\n            for(int k=0;k<positions.length;k++) {\n              final int position = positions[k];\n              tvf.writeVInt(position-lastPosition);\n              lastPosition = position;\n            }\n          }\n\n          if (storeOffsets) {\n            final TermVectorOffsetInfo[] offsets = tpVector.getOffsets(j);\n            if (offsets == null)\n              throw new IllegalStateException(\"Trying to write offsets that are null!\");\n            assert offsets.length == termFreq;\n\n            // use delta encoding for offsets\n            int lastEndOffset = 0;\n            for(int k=0;k<offsets.length;k++) {\n              final int startOffset = offsets[k].getStartOffset();\n              final int endOffset = offsets[k].getEndOffset();\n              tvf.writeVInt(startOffset-lastEndOffset);\n              tvf.writeVInt(endOffset-startOffset);\n              lastEndOffset = endOffset;\n            }\n          }\n        }\n      }\n\n      // 2nd pass: write field pointers to tvd\n      long lastFieldPointer = 0;\n      for (int i=0; i<numFields; i++) {\n        final long fieldPointer = fieldPointers[i];\n        tvd.writeVLong(fieldPointer-lastFieldPointer);\n        lastFieldPointer = fieldPointer;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Add a complete document specified by all its term vectors. If document has no\n   * term vectors, add value for tvx.\n   * \n   * @param vectors\n   * @throws IOException\n   */\n  public final void addAllDocVectors(TermFreqVector[] vectors)\n      throws IOException {\n    openDocument();\n\n    if (vectors != null) {\n      for (int i = 0; i < vectors.length; i++) {\n        boolean storePositionWithTermVector = false;\n        boolean storeOffsetWithTermVector = false;\n\n        try {\n\n          TermPositionVector tpVector = (TermPositionVector) vectors[i];\n\n          if (tpVector.size() > 0 && tpVector.getTermPositions(0) != null)\n            storePositionWithTermVector = true;\n          if (tpVector.size() > 0 && tpVector.getOffsets(0) != null)\n            storeOffsetWithTermVector = true;\n\n          FieldInfo fieldInfo = fieldInfos.fieldInfo(tpVector.getField());\n          openField(fieldInfo.number, storePositionWithTermVector, storeOffsetWithTermVector);\n\n          for (int j = 0; j < tpVector.size(); j++)\n            addTermInternal(tpVector.getTerms()[j], tpVector.getTermFrequencies()[j], tpVector.getTermPositions(j),\n                tpVector.getOffsets(j));\n\n          closeField();\n\n        } catch (ClassCastException ignore) {\n\n          TermFreqVector tfVector = vectors[i];\n\n          FieldInfo fieldInfo = fieldInfos.fieldInfo(tfVector.getField());\n          openField(fieldInfo.number, storePositionWithTermVector, storeOffsetWithTermVector);\n\n          for (int j = 0; j < tfVector.size(); j++)\n            addTermInternal(tfVector.getTerms()[j], tfVector.getTermFrequencies()[j], null, null);\n\n          closeField();\n\n        }\n      }\n    }\n\n    closeDocument();\n  }\n\n","bugFix":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"bugIntro":["8daba5852e0d876bb642b2aa0bd7d32897280994","910bb2b4a9549c76f89ce57a3cec7563c44aa561"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8daba5852e0d876bb642b2aa0bd7d32897280994","date":1191100317,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsWriter#addAllDocVectors(TermFreqVector[]).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsWriter#addAllDocVectors(TermFreqVector[]).mjava","sourceNew":"  /**\n   * Add a complete document specified by all its term vectors. If document has no\n   * term vectors, add value for tvx.\n   * \n   * @param vectors\n   * @throws IOException\n   */\n  public final void addAllDocVectors(TermFreqVector[] vectors)\n      throws IOException {\n\n    tvx.writeLong(tvd.getFilePointer());\n\n    if (vectors != null) {\n      final int numFields = vectors.length;\n      tvd.writeVInt(numFields);\n\n      long[] fieldPointers = new long[numFields];\n\n      for (int i=0; i<numFields; i++) {\n        fieldPointers[i] = tvf.getFilePointer();\n\n        final int fieldNumber = fieldInfos.fieldNumber(vectors[i].getField());\n\n        // 1st pass: write field numbers to tvd\n        tvd.writeVInt(fieldNumber);\n\n        final int numTerms = vectors[i].size();\n        tvf.writeVInt(numTerms);\n\n        final TermPositionVector tpVector;\n        final TermFreqVector tfVector;\n\n        final byte bits;\n        final boolean storePositions;\n        final boolean storeOffsets;\n\n        if (vectors[i] instanceof TermPositionVector) {\n          // May have positions & offsets\n          tpVector = (TermPositionVector) vectors[i];\n          tfVector = null;\n          storePositions = tpVector.size() > 0 && tpVector.getTermPositions(0) != null;\n          storeOffsets = tpVector.size() > 0 && tpVector.getOffsets(0) != null;\n          bits = (byte) ((storePositions ? TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR : 0) +\n                         (storeOffsets ? TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR : 0));\n        } else {\n          tpVector = null;\n          tfVector = vectors[i];\n          bits = 0;\n          storePositions = false;\n          storeOffsets = false;\n        }\n\n        tvf.writeVInt(bits);\n\n        final String[] terms = vectors[i].getTerms();\n        final int[] freqs = vectors[i].getTermFrequencies();\n\n        String lastTermText = \"\";\n        for (int j=0; j<numTerms; j++) {\n          final String termText = terms[j];\n          int start = StringHelper.stringDifference(lastTermText, termText);\n          int length = termText.length() - start;\n          tvf.writeVInt(start);       // write shared prefix length\n          tvf.writeVInt(length);        // write delta length\n          tvf.writeChars(termText, start, length);  // write delta chars\n          lastTermText = termText;\n\n          final int termFreq = freqs[j];\n\n          tvf.writeVInt(termFreq);\n\n          if (storePositions) {\n            final int[] positions = tpVector.getTermPositions(j);\n            if (positions == null)\n              throw new IllegalStateException(\"Trying to write positions that are null!\");\n            assert positions.length == termFreq;\n\n            // use delta encoding for positions\n            int lastPosition = 0;\n            for(int k=0;k<positions.length;k++) {\n              final int position = positions[k];\n              tvf.writeVInt(position-lastPosition);\n              lastPosition = position;\n            }\n          }\n\n          if (storeOffsets) {\n            final TermVectorOffsetInfo[] offsets = tpVector.getOffsets(j);\n            if (offsets == null)\n              throw new IllegalStateException(\"Trying to write offsets that are null!\");\n            assert offsets.length == termFreq;\n\n            // use delta encoding for offsets\n            int lastEndOffset = 0;\n            for(int k=0;k<offsets.length;k++) {\n              final int startOffset = offsets[k].getStartOffset();\n              final int endOffset = offsets[k].getEndOffset();\n              tvf.writeVInt(startOffset-lastEndOffset);\n              tvf.writeVInt(endOffset-startOffset);\n              lastEndOffset = endOffset;\n            }\n          }\n        }\n      }\n\n      // 2nd pass: write field pointers to tvd\n      long lastFieldPointer = 0;\n      for (int i=0; i<numFields; i++) {\n        final long fieldPointer = fieldPointers[i];\n        tvd.writeVLong(fieldPointer-lastFieldPointer);\n        lastFieldPointer = fieldPointer;\n      }\n    } else\n      tvd.writeVInt(0);\n  }\n\n","sourceOld":"  /**\n   * Add a complete document specified by all its term vectors. If document has no\n   * term vectors, add value for tvx.\n   * \n   * @param vectors\n   * @throws IOException\n   */\n  public final void addAllDocVectors(TermFreqVector[] vectors)\n      throws IOException {\n\n    tvx.writeLong(tvd.getFilePointer());\n\n    if (vectors != null) {\n      final int numFields = vectors.length;\n      tvd.writeVInt(numFields);\n\n      long[] fieldPointers = new long[numFields];\n\n      for (int i=0; i<numFields; i++) {\n        fieldPointers[i] = tvf.getFilePointer();\n\n        final int fieldNumber = fieldInfos.fieldNumber(vectors[i].getField());\n\n        // 1st pass: write field numbers to tvd\n        tvd.writeVInt(fieldNumber);\n\n        final int numTerms = vectors[i].size();\n        tvf.writeVInt(numTerms);\n\n        final TermPositionVector tpVector;\n        final TermFreqVector tfVector;\n\n        final byte bits;\n        final boolean storePositions;\n        final boolean storeOffsets;\n\n        if (vectors[i] instanceof TermPositionVector) {\n          // May have positions & offsets\n          tpVector = (TermPositionVector) vectors[i];\n          tfVector = null;\n          storePositions = tpVector.size() > 0 && tpVector.getTermPositions(0) != null;\n          storeOffsets = tpVector.size() > 0 && tpVector.getOffsets(0) != null;\n          bits = (byte) ((storePositions ? TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR : 0) +\n                         (storeOffsets ? TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR : 0));\n        } else {\n          tpVector = null;\n          tfVector = vectors[i];\n          bits = 0;\n          storePositions = false;\n          storeOffsets = false;\n        }\n\n        tvf.writeVInt(bits);\n\n        final String[] terms = vectors[i].getTerms();\n        final int[] freqs = vectors[i].getTermFrequencies();\n\n        String lastTermText = \"\";\n        for (int j=0; j<numTerms; j++) {\n          final String termText = terms[j];\n          int start = StringHelper.stringDifference(lastTermText, termText);\n          int length = termText.length() - start;\n          tvf.writeVInt(start);       // write shared prefix length\n          tvf.writeVInt(length);        // write delta length\n          tvf.writeChars(termText, start, length);  // write delta chars\n          lastTermText = termText;\n\n          final int termFreq = freqs[j];\n\n          tvf.writeVInt(termFreq);\n\n          if (storePositions) {\n            final int[] positions = tpVector.getTermPositions(j);\n            if (positions == null)\n              throw new IllegalStateException(\"Trying to write positions that are null!\");\n            assert positions.length == termFreq;\n\n            // use delta encoding for positions\n            int lastPosition = 0;\n            for(int k=0;k<positions.length;k++) {\n              final int position = positions[k];\n              tvf.writeVInt(position-lastPosition);\n              lastPosition = position;\n            }\n          }\n\n          if (storeOffsets) {\n            final TermVectorOffsetInfo[] offsets = tpVector.getOffsets(j);\n            if (offsets == null)\n              throw new IllegalStateException(\"Trying to write offsets that are null!\");\n            assert offsets.length == termFreq;\n\n            // use delta encoding for offsets\n            int lastEndOffset = 0;\n            for(int k=0;k<offsets.length;k++) {\n              final int startOffset = offsets[k].getStartOffset();\n              final int endOffset = offsets[k].getEndOffset();\n              tvf.writeVInt(startOffset-lastEndOffset);\n              tvf.writeVInt(endOffset-startOffset);\n              lastEndOffset = endOffset;\n            }\n          }\n        }\n      }\n\n      // 2nd pass: write field pointers to tvd\n      long lastFieldPointer = 0;\n      for (int i=0; i<numFields; i++) {\n        final long fieldPointer = fieldPointers[i];\n        tvd.writeVLong(fieldPointer-lastFieldPointer);\n        lastFieldPointer = fieldPointer;\n      }\n    }\n  }\n\n","bugFix":["11764865fb318bf86302eab36bdf9cd00c50c110"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d7a119dd14350e2cfe6ba6b5e71d48ee6c356482","date":1196863177,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsWriter#addAllDocVectors(TermFreqVector[]).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsWriter#addAllDocVectors(TermFreqVector[]).mjava","sourceNew":"  /**\n   * Add a complete document specified by all its term vectors. If document has no\n   * term vectors, add value for tvx.\n   * \n   * @param vectors\n   * @throws IOException\n   */\n  public final void addAllDocVectors(TermFreqVector[] vectors)\n      throws IOException {\n\n    tvx.writeLong(tvd.getFilePointer());\n\n    if (vectors != null) {\n      final int numFields = vectors.length;\n      tvd.writeVInt(numFields);\n\n      long[] fieldPointers = new long[numFields];\n\n      for (int i=0; i<numFields; i++) {\n        fieldPointers[i] = tvf.getFilePointer();\n\n        final int fieldNumber = fieldInfos.fieldNumber(vectors[i].getField());\n\n        // 1st pass: write field numbers to tvd\n        tvd.writeVInt(fieldNumber);\n\n        final int numTerms = vectors[i].size();\n        tvf.writeVInt(numTerms);\n\n        final TermPositionVector tpVector;\n\n        final byte bits;\n        final boolean storePositions;\n        final boolean storeOffsets;\n\n        if (vectors[i] instanceof TermPositionVector) {\n          // May have positions & offsets\n          tpVector = (TermPositionVector) vectors[i];\n          storePositions = tpVector.size() > 0 && tpVector.getTermPositions(0) != null;\n          storeOffsets = tpVector.size() > 0 && tpVector.getOffsets(0) != null;\n          bits = (byte) ((storePositions ? TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR : 0) +\n                         (storeOffsets ? TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR : 0));\n        } else {\n          tpVector = null;\n          bits = 0;\n          storePositions = false;\n          storeOffsets = false;\n        }\n\n        tvf.writeVInt(bits);\n\n        final String[] terms = vectors[i].getTerms();\n        final int[] freqs = vectors[i].getTermFrequencies();\n\n        String lastTermText = \"\";\n        for (int j=0; j<numTerms; j++) {\n          final String termText = terms[j];\n          int start = StringHelper.stringDifference(lastTermText, termText);\n          int length = termText.length() - start;\n          tvf.writeVInt(start);       // write shared prefix length\n          tvf.writeVInt(length);        // write delta length\n          tvf.writeChars(termText, start, length);  // write delta chars\n          lastTermText = termText;\n\n          final int termFreq = freqs[j];\n\n          tvf.writeVInt(termFreq);\n\n          if (storePositions) {\n            final int[] positions = tpVector.getTermPositions(j);\n            if (positions == null)\n              throw new IllegalStateException(\"Trying to write positions that are null!\");\n            assert positions.length == termFreq;\n\n            // use delta encoding for positions\n            int lastPosition = 0;\n            for(int k=0;k<positions.length;k++) {\n              final int position = positions[k];\n              tvf.writeVInt(position-lastPosition);\n              lastPosition = position;\n            }\n          }\n\n          if (storeOffsets) {\n            final TermVectorOffsetInfo[] offsets = tpVector.getOffsets(j);\n            if (offsets == null)\n              throw new IllegalStateException(\"Trying to write offsets that are null!\");\n            assert offsets.length == termFreq;\n\n            // use delta encoding for offsets\n            int lastEndOffset = 0;\n            for(int k=0;k<offsets.length;k++) {\n              final int startOffset = offsets[k].getStartOffset();\n              final int endOffset = offsets[k].getEndOffset();\n              tvf.writeVInt(startOffset-lastEndOffset);\n              tvf.writeVInt(endOffset-startOffset);\n              lastEndOffset = endOffset;\n            }\n          }\n        }\n      }\n\n      // 2nd pass: write field pointers to tvd\n      long lastFieldPointer = 0;\n      for (int i=0; i<numFields; i++) {\n        final long fieldPointer = fieldPointers[i];\n        tvd.writeVLong(fieldPointer-lastFieldPointer);\n        lastFieldPointer = fieldPointer;\n      }\n    } else\n      tvd.writeVInt(0);\n  }\n\n","sourceOld":"  /**\n   * Add a complete document specified by all its term vectors. If document has no\n   * term vectors, add value for tvx.\n   * \n   * @param vectors\n   * @throws IOException\n   */\n  public final void addAllDocVectors(TermFreqVector[] vectors)\n      throws IOException {\n\n    tvx.writeLong(tvd.getFilePointer());\n\n    if (vectors != null) {\n      final int numFields = vectors.length;\n      tvd.writeVInt(numFields);\n\n      long[] fieldPointers = new long[numFields];\n\n      for (int i=0; i<numFields; i++) {\n        fieldPointers[i] = tvf.getFilePointer();\n\n        final int fieldNumber = fieldInfos.fieldNumber(vectors[i].getField());\n\n        // 1st pass: write field numbers to tvd\n        tvd.writeVInt(fieldNumber);\n\n        final int numTerms = vectors[i].size();\n        tvf.writeVInt(numTerms);\n\n        final TermPositionVector tpVector;\n        final TermFreqVector tfVector;\n\n        final byte bits;\n        final boolean storePositions;\n        final boolean storeOffsets;\n\n        if (vectors[i] instanceof TermPositionVector) {\n          // May have positions & offsets\n          tpVector = (TermPositionVector) vectors[i];\n          tfVector = null;\n          storePositions = tpVector.size() > 0 && tpVector.getTermPositions(0) != null;\n          storeOffsets = tpVector.size() > 0 && tpVector.getOffsets(0) != null;\n          bits = (byte) ((storePositions ? TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR : 0) +\n                         (storeOffsets ? TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR : 0));\n        } else {\n          tpVector = null;\n          tfVector = vectors[i];\n          bits = 0;\n          storePositions = false;\n          storeOffsets = false;\n        }\n\n        tvf.writeVInt(bits);\n\n        final String[] terms = vectors[i].getTerms();\n        final int[] freqs = vectors[i].getTermFrequencies();\n\n        String lastTermText = \"\";\n        for (int j=0; j<numTerms; j++) {\n          final String termText = terms[j];\n          int start = StringHelper.stringDifference(lastTermText, termText);\n          int length = termText.length() - start;\n          tvf.writeVInt(start);       // write shared prefix length\n          tvf.writeVInt(length);        // write delta length\n          tvf.writeChars(termText, start, length);  // write delta chars\n          lastTermText = termText;\n\n          final int termFreq = freqs[j];\n\n          tvf.writeVInt(termFreq);\n\n          if (storePositions) {\n            final int[] positions = tpVector.getTermPositions(j);\n            if (positions == null)\n              throw new IllegalStateException(\"Trying to write positions that are null!\");\n            assert positions.length == termFreq;\n\n            // use delta encoding for positions\n            int lastPosition = 0;\n            for(int k=0;k<positions.length;k++) {\n              final int position = positions[k];\n              tvf.writeVInt(position-lastPosition);\n              lastPosition = position;\n            }\n          }\n\n          if (storeOffsets) {\n            final TermVectorOffsetInfo[] offsets = tpVector.getOffsets(j);\n            if (offsets == null)\n              throw new IllegalStateException(\"Trying to write offsets that are null!\");\n            assert offsets.length == termFreq;\n\n            // use delta encoding for offsets\n            int lastEndOffset = 0;\n            for(int k=0;k<offsets.length;k++) {\n              final int startOffset = offsets[k].getStartOffset();\n              final int endOffset = offsets[k].getEndOffset();\n              tvf.writeVInt(startOffset-lastEndOffset);\n              tvf.writeVInt(endOffset-startOffset);\n              lastEndOffset = endOffset;\n            }\n          }\n        }\n      }\n\n      // 2nd pass: write field pointers to tvd\n      long lastFieldPointer = 0;\n      for (int i=0; i<numFields; i++) {\n        final long fieldPointer = fieldPointers[i];\n        tvd.writeVLong(fieldPointer-lastFieldPointer);\n        lastFieldPointer = fieldPointer;\n      }\n    } else\n      tvd.writeVInt(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33","date":1201260752,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsWriter#addAllDocVectors(TermFreqVector[]).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsWriter#addAllDocVectors(TermFreqVector[]).mjava","sourceNew":"  /**\n   * Add a complete document specified by all its term vectors. If document has no\n   * term vectors, add value for tvx.\n   * \n   * @param vectors\n   * @throws IOException\n   */\n  public final void addAllDocVectors(TermFreqVector[] vectors)\n      throws IOException {\n\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n\n    if (vectors != null) {\n      final int numFields = vectors.length;\n      tvd.writeVInt(numFields);\n\n      long[] fieldPointers = new long[numFields];\n\n      for (int i=0; i<numFields; i++) {\n        fieldPointers[i] = tvf.getFilePointer();\n\n        final int fieldNumber = fieldInfos.fieldNumber(vectors[i].getField());\n\n        // 1st pass: write field numbers to tvd\n        tvd.writeVInt(fieldNumber);\n\n        final int numTerms = vectors[i].size();\n        tvf.writeVInt(numTerms);\n\n        final TermPositionVector tpVector;\n\n        final byte bits;\n        final boolean storePositions;\n        final boolean storeOffsets;\n\n        if (vectors[i] instanceof TermPositionVector) {\n          // May have positions & offsets\n          tpVector = (TermPositionVector) vectors[i];\n          storePositions = tpVector.size() > 0 && tpVector.getTermPositions(0) != null;\n          storeOffsets = tpVector.size() > 0 && tpVector.getOffsets(0) != null;\n          bits = (byte) ((storePositions ? TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR : 0) +\n                         (storeOffsets ? TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR : 0));\n        } else {\n          tpVector = null;\n          bits = 0;\n          storePositions = false;\n          storeOffsets = false;\n        }\n\n        tvf.writeVInt(bits);\n\n        final String[] terms = vectors[i].getTerms();\n        final int[] freqs = vectors[i].getTermFrequencies();\n\n        String lastTermText = \"\";\n        for (int j=0; j<numTerms; j++) {\n          final String termText = terms[j];\n          int start = StringHelper.stringDifference(lastTermText, termText);\n          int length = termText.length() - start;\n          tvf.writeVInt(start);       // write shared prefix length\n          tvf.writeVInt(length);        // write delta length\n          tvf.writeChars(termText, start, length);  // write delta chars\n          lastTermText = termText;\n\n          final int termFreq = freqs[j];\n\n          tvf.writeVInt(termFreq);\n\n          if (storePositions) {\n            final int[] positions = tpVector.getTermPositions(j);\n            if (positions == null)\n              throw new IllegalStateException(\"Trying to write positions that are null!\");\n            assert positions.length == termFreq;\n\n            // use delta encoding for positions\n            int lastPosition = 0;\n            for(int k=0;k<positions.length;k++) {\n              final int position = positions[k];\n              tvf.writeVInt(position-lastPosition);\n              lastPosition = position;\n            }\n          }\n\n          if (storeOffsets) {\n            final TermVectorOffsetInfo[] offsets = tpVector.getOffsets(j);\n            if (offsets == null)\n              throw new IllegalStateException(\"Trying to write offsets that are null!\");\n            assert offsets.length == termFreq;\n\n            // use delta encoding for offsets\n            int lastEndOffset = 0;\n            for(int k=0;k<offsets.length;k++) {\n              final int startOffset = offsets[k].getStartOffset();\n              final int endOffset = offsets[k].getEndOffset();\n              tvf.writeVInt(startOffset-lastEndOffset);\n              tvf.writeVInt(endOffset-startOffset);\n              lastEndOffset = endOffset;\n            }\n          }\n        }\n      }\n\n      // 2nd pass: write field pointers to tvd\n      long lastFieldPointer = fieldPointers[0];\n      for (int i=1; i<numFields; i++) {\n        final long fieldPointer = fieldPointers[i];\n        tvd.writeVLong(fieldPointer-lastFieldPointer);\n        lastFieldPointer = fieldPointer;\n      }\n    } else\n      tvd.writeVInt(0);\n  }\n\n","sourceOld":"  /**\n   * Add a complete document specified by all its term vectors. If document has no\n   * term vectors, add value for tvx.\n   * \n   * @param vectors\n   * @throws IOException\n   */\n  public final void addAllDocVectors(TermFreqVector[] vectors)\n      throws IOException {\n\n    tvx.writeLong(tvd.getFilePointer());\n\n    if (vectors != null) {\n      final int numFields = vectors.length;\n      tvd.writeVInt(numFields);\n\n      long[] fieldPointers = new long[numFields];\n\n      for (int i=0; i<numFields; i++) {\n        fieldPointers[i] = tvf.getFilePointer();\n\n        final int fieldNumber = fieldInfos.fieldNumber(vectors[i].getField());\n\n        // 1st pass: write field numbers to tvd\n        tvd.writeVInt(fieldNumber);\n\n        final int numTerms = vectors[i].size();\n        tvf.writeVInt(numTerms);\n\n        final TermPositionVector tpVector;\n\n        final byte bits;\n        final boolean storePositions;\n        final boolean storeOffsets;\n\n        if (vectors[i] instanceof TermPositionVector) {\n          // May have positions & offsets\n          tpVector = (TermPositionVector) vectors[i];\n          storePositions = tpVector.size() > 0 && tpVector.getTermPositions(0) != null;\n          storeOffsets = tpVector.size() > 0 && tpVector.getOffsets(0) != null;\n          bits = (byte) ((storePositions ? TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR : 0) +\n                         (storeOffsets ? TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR : 0));\n        } else {\n          tpVector = null;\n          bits = 0;\n          storePositions = false;\n          storeOffsets = false;\n        }\n\n        tvf.writeVInt(bits);\n\n        final String[] terms = vectors[i].getTerms();\n        final int[] freqs = vectors[i].getTermFrequencies();\n\n        String lastTermText = \"\";\n        for (int j=0; j<numTerms; j++) {\n          final String termText = terms[j];\n          int start = StringHelper.stringDifference(lastTermText, termText);\n          int length = termText.length() - start;\n          tvf.writeVInt(start);       // write shared prefix length\n          tvf.writeVInt(length);        // write delta length\n          tvf.writeChars(termText, start, length);  // write delta chars\n          lastTermText = termText;\n\n          final int termFreq = freqs[j];\n\n          tvf.writeVInt(termFreq);\n\n          if (storePositions) {\n            final int[] positions = tpVector.getTermPositions(j);\n            if (positions == null)\n              throw new IllegalStateException(\"Trying to write positions that are null!\");\n            assert positions.length == termFreq;\n\n            // use delta encoding for positions\n            int lastPosition = 0;\n            for(int k=0;k<positions.length;k++) {\n              final int position = positions[k];\n              tvf.writeVInt(position-lastPosition);\n              lastPosition = position;\n            }\n          }\n\n          if (storeOffsets) {\n            final TermVectorOffsetInfo[] offsets = tpVector.getOffsets(j);\n            if (offsets == null)\n              throw new IllegalStateException(\"Trying to write offsets that are null!\");\n            assert offsets.length == termFreq;\n\n            // use delta encoding for offsets\n            int lastEndOffset = 0;\n            for(int k=0;k<offsets.length;k++) {\n              final int startOffset = offsets[k].getStartOffset();\n              final int endOffset = offsets[k].getEndOffset();\n              tvf.writeVInt(startOffset-lastEndOffset);\n              tvf.writeVInt(endOffset-startOffset);\n              lastEndOffset = endOffset;\n            }\n          }\n        }\n      }\n\n      // 2nd pass: write field pointers to tvd\n      long lastFieldPointer = 0;\n      for (int i=0; i<numFields; i++) {\n        final long fieldPointer = fieldPointers[i];\n        tvd.writeVLong(fieldPointer-lastFieldPointer);\n        lastFieldPointer = fieldPointer;\n      }\n    } else\n      tvd.writeVInt(0);\n  }\n\n","bugFix":null,"bugIntro":["910bb2b4a9549c76f89ce57a3cec7563c44aa561"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4","date":1206538765,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsWriter#addAllDocVectors(TermFreqVector[]).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsWriter#addAllDocVectors(TermFreqVector[]).mjava","sourceNew":"  /**\n   * Add a complete document specified by all its term vectors. If document has no\n   * term vectors, add value for tvx.\n   * \n   * @param vectors\n   * @throws IOException\n   */\n  public final void addAllDocVectors(TermFreqVector[] vectors)\n      throws IOException {\n\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n\n    if (vectors != null) {\n      final int numFields = vectors.length;\n      tvd.writeVInt(numFields);\n\n      long[] fieldPointers = new long[numFields];\n\n      for (int i=0; i<numFields; i++) {\n        fieldPointers[i] = tvf.getFilePointer();\n\n        final int fieldNumber = fieldInfos.fieldNumber(vectors[i].getField());\n\n        // 1st pass: write field numbers to tvd\n        tvd.writeVInt(fieldNumber);\n\n        final int numTerms = vectors[i].size();\n        tvf.writeVInt(numTerms);\n\n        final TermPositionVector tpVector;\n\n        final byte bits;\n        final boolean storePositions;\n        final boolean storeOffsets;\n\n        if (vectors[i] instanceof TermPositionVector) {\n          // May have positions & offsets\n          tpVector = (TermPositionVector) vectors[i];\n          storePositions = tpVector.size() > 0 && tpVector.getTermPositions(0) != null;\n          storeOffsets = tpVector.size() > 0 && tpVector.getOffsets(0) != null;\n          bits = (byte) ((storePositions ? TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR : 0) +\n                         (storeOffsets ? TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR : 0));\n        } else {\n          tpVector = null;\n          bits = 0;\n          storePositions = false;\n          storeOffsets = false;\n        }\n\n        tvf.writeVInt(bits);\n\n        final String[] terms = vectors[i].getTerms();\n        final int[] freqs = vectors[i].getTermFrequencies();\n\n        int utf8Upto = 0;\n        utf8Results[1].length = 0;\n\n        for (int j=0; j<numTerms; j++) {\n\n          UnicodeUtil.UTF16toUTF8(terms[j], 0, terms[j].length(), utf8Results[utf8Upto]);\n          \n          int start = StringHelper.bytesDifference(utf8Results[1-utf8Upto].result,\n                                                   utf8Results[1-utf8Upto].length,\n                                                   utf8Results[utf8Upto].result,\n                                                   utf8Results[utf8Upto].length);\n          int length = utf8Results[utf8Upto].length - start;\n          tvf.writeVInt(start);       // write shared prefix length\n          tvf.writeVInt(length);        // write delta length\n          tvf.writeBytes(utf8Results[utf8Upto].result, start, length);  // write delta bytes\n          utf8Upto = 1-utf8Upto;\n\n          final int termFreq = freqs[j];\n\n          tvf.writeVInt(termFreq);\n\n          if (storePositions) {\n            final int[] positions = tpVector.getTermPositions(j);\n            if (positions == null)\n              throw new IllegalStateException(\"Trying to write positions that are null!\");\n            assert positions.length == termFreq;\n\n            // use delta encoding for positions\n            int lastPosition = 0;\n            for(int k=0;k<positions.length;k++) {\n              final int position = positions[k];\n              tvf.writeVInt(position-lastPosition);\n              lastPosition = position;\n            }\n          }\n\n          if (storeOffsets) {\n            final TermVectorOffsetInfo[] offsets = tpVector.getOffsets(j);\n            if (offsets == null)\n              throw new IllegalStateException(\"Trying to write offsets that are null!\");\n            assert offsets.length == termFreq;\n\n            // use delta encoding for offsets\n            int lastEndOffset = 0;\n            for(int k=0;k<offsets.length;k++) {\n              final int startOffset = offsets[k].getStartOffset();\n              final int endOffset = offsets[k].getEndOffset();\n              tvf.writeVInt(startOffset-lastEndOffset);\n              tvf.writeVInt(endOffset-startOffset);\n              lastEndOffset = endOffset;\n            }\n          }\n        }\n      }\n\n      // 2nd pass: write field pointers to tvd\n      long lastFieldPointer = fieldPointers[0];\n      for (int i=1; i<numFields; i++) {\n        final long fieldPointer = fieldPointers[i];\n        tvd.writeVLong(fieldPointer-lastFieldPointer);\n        lastFieldPointer = fieldPointer;\n      }\n    } else\n      tvd.writeVInt(0);\n  }\n\n","sourceOld":"  /**\n   * Add a complete document specified by all its term vectors. If document has no\n   * term vectors, add value for tvx.\n   * \n   * @param vectors\n   * @throws IOException\n   */\n  public final void addAllDocVectors(TermFreqVector[] vectors)\n      throws IOException {\n\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n\n    if (vectors != null) {\n      final int numFields = vectors.length;\n      tvd.writeVInt(numFields);\n\n      long[] fieldPointers = new long[numFields];\n\n      for (int i=0; i<numFields; i++) {\n        fieldPointers[i] = tvf.getFilePointer();\n\n        final int fieldNumber = fieldInfos.fieldNumber(vectors[i].getField());\n\n        // 1st pass: write field numbers to tvd\n        tvd.writeVInt(fieldNumber);\n\n        final int numTerms = vectors[i].size();\n        tvf.writeVInt(numTerms);\n\n        final TermPositionVector tpVector;\n\n        final byte bits;\n        final boolean storePositions;\n        final boolean storeOffsets;\n\n        if (vectors[i] instanceof TermPositionVector) {\n          // May have positions & offsets\n          tpVector = (TermPositionVector) vectors[i];\n          storePositions = tpVector.size() > 0 && tpVector.getTermPositions(0) != null;\n          storeOffsets = tpVector.size() > 0 && tpVector.getOffsets(0) != null;\n          bits = (byte) ((storePositions ? TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR : 0) +\n                         (storeOffsets ? TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR : 0));\n        } else {\n          tpVector = null;\n          bits = 0;\n          storePositions = false;\n          storeOffsets = false;\n        }\n\n        tvf.writeVInt(bits);\n\n        final String[] terms = vectors[i].getTerms();\n        final int[] freqs = vectors[i].getTermFrequencies();\n\n        String lastTermText = \"\";\n        for (int j=0; j<numTerms; j++) {\n          final String termText = terms[j];\n          int start = StringHelper.stringDifference(lastTermText, termText);\n          int length = termText.length() - start;\n          tvf.writeVInt(start);       // write shared prefix length\n          tvf.writeVInt(length);        // write delta length\n          tvf.writeChars(termText, start, length);  // write delta chars\n          lastTermText = termText;\n\n          final int termFreq = freqs[j];\n\n          tvf.writeVInt(termFreq);\n\n          if (storePositions) {\n            final int[] positions = tpVector.getTermPositions(j);\n            if (positions == null)\n              throw new IllegalStateException(\"Trying to write positions that are null!\");\n            assert positions.length == termFreq;\n\n            // use delta encoding for positions\n            int lastPosition = 0;\n            for(int k=0;k<positions.length;k++) {\n              final int position = positions[k];\n              tvf.writeVInt(position-lastPosition);\n              lastPosition = position;\n            }\n          }\n\n          if (storeOffsets) {\n            final TermVectorOffsetInfo[] offsets = tpVector.getOffsets(j);\n            if (offsets == null)\n              throw new IllegalStateException(\"Trying to write offsets that are null!\");\n            assert offsets.length == termFreq;\n\n            // use delta encoding for offsets\n            int lastEndOffset = 0;\n            for(int k=0;k<offsets.length;k++) {\n              final int startOffset = offsets[k].getStartOffset();\n              final int endOffset = offsets[k].getEndOffset();\n              tvf.writeVInt(startOffset-lastEndOffset);\n              tvf.writeVInt(endOffset-startOffset);\n              lastEndOffset = endOffset;\n            }\n          }\n        }\n      }\n\n      // 2nd pass: write field pointers to tvd\n      long lastFieldPointer = fieldPointers[0];\n      for (int i=1; i<numFields; i++) {\n        final long fieldPointer = fieldPointers[i];\n        tvd.writeVLong(fieldPointer-lastFieldPointer);\n        lastFieldPointer = fieldPointer;\n      }\n    } else\n      tvd.writeVInt(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"910bb2b4a9549c76f89ce57a3cec7563c44aa561","date":1253277231,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsWriter#addAllDocVectors(TermFreqVector[]).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsWriter#addAllDocVectors(TermFreqVector[]).mjava","sourceNew":"  /**\n   * Add a complete document specified by all its term vectors. If document has no\n   * term vectors, add value for tvx.\n   * \n   * @param vectors\n   * @throws IOException\n   */\n  public final void addAllDocVectors(TermFreqVector[] vectors)\n      throws IOException {\n\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n\n    if (vectors != null) {\n      final int numFields = vectors.length;\n      tvd.writeVInt(numFields);\n\n      long[] fieldPointers = new long[numFields];\n\n      for (int i=0; i<numFields; i++) {\n        fieldPointers[i] = tvf.getFilePointer();\n\n        final int fieldNumber = fieldInfos.fieldNumber(vectors[i].getField());\n\n        // 1st pass: write field numbers to tvd\n        tvd.writeVInt(fieldNumber);\n\n        final int numTerms = vectors[i].size();\n        tvf.writeVInt(numTerms);\n\n        final TermPositionVector tpVector;\n\n        final byte bits;\n        final boolean storePositions;\n        final boolean storeOffsets;\n\n        if (vectors[i] instanceof TermPositionVector) {\n          // May have positions & offsets\n          tpVector = (TermPositionVector) vectors[i];\n          storePositions = tpVector.size() > 0 && tpVector.getTermPositions(0) != null;\n          storeOffsets = tpVector.size() > 0 && tpVector.getOffsets(0) != null;\n          bits = (byte) ((storePositions ? TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR : 0) +\n                         (storeOffsets ? TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR : 0));\n        } else {\n          tpVector = null;\n          bits = 0;\n          storePositions = false;\n          storeOffsets = false;\n        }\n\n        tvf.writeVInt(bits);\n\n        final String[] terms = vectors[i].getTerms();\n        final int[] freqs = vectors[i].getTermFrequencies();\n\n        int utf8Upto = 0;\n        utf8Results[1].length = 0;\n\n        for (int j=0; j<numTerms; j++) {\n\n          UnicodeUtil.UTF16toUTF8(terms[j], 0, terms[j].length(), utf8Results[utf8Upto]);\n          \n          int start = StringHelper.bytesDifference(utf8Results[1-utf8Upto].result,\n                                                   utf8Results[1-utf8Upto].length,\n                                                   utf8Results[utf8Upto].result,\n                                                   utf8Results[utf8Upto].length);\n          int length = utf8Results[utf8Upto].length - start;\n          tvf.writeVInt(start);       // write shared prefix length\n          tvf.writeVInt(length);        // write delta length\n          tvf.writeBytes(utf8Results[utf8Upto].result, start, length);  // write delta bytes\n          utf8Upto = 1-utf8Upto;\n\n          final int termFreq = freqs[j];\n\n          tvf.writeVInt(termFreq);\n\n          if (storePositions) {\n            final int[] positions = tpVector.getTermPositions(j);\n            if (positions == null)\n              throw new IllegalStateException(\"Trying to write positions that are null!\");\n            assert positions.length == termFreq;\n\n            // use delta encoding for positions\n            int lastPosition = 0;\n            for(int k=0;k<positions.length;k++) {\n              final int position = positions[k];\n              tvf.writeVInt(position-lastPosition);\n              lastPosition = position;\n            }\n          }\n\n          if (storeOffsets) {\n            final TermVectorOffsetInfo[] offsets = tpVector.getOffsets(j);\n            if (offsets == null)\n              throw new IllegalStateException(\"Trying to write offsets that are null!\");\n            assert offsets.length == termFreq;\n\n            // use delta encoding for offsets\n            int lastEndOffset = 0;\n            for(int k=0;k<offsets.length;k++) {\n              final int startOffset = offsets[k].getStartOffset();\n              final int endOffset = offsets[k].getEndOffset();\n              tvf.writeVInt(startOffset-lastEndOffset);\n              tvf.writeVInt(endOffset-startOffset);\n              lastEndOffset = endOffset;\n            }\n          }\n        }\n      }\n\n      // 2nd pass: write field pointers to tvd\n      if (numFields > 1) {\n        long lastFieldPointer = fieldPointers[0];\n        for (int i=1; i<numFields; i++) {\n          final long fieldPointer = fieldPointers[i];\n          tvd.writeVLong(fieldPointer-lastFieldPointer);\n          lastFieldPointer = fieldPointer;\n        }\n      }\n    } else\n      tvd.writeVInt(0);\n  }\n\n","sourceOld":"  /**\n   * Add a complete document specified by all its term vectors. If document has no\n   * term vectors, add value for tvx.\n   * \n   * @param vectors\n   * @throws IOException\n   */\n  public final void addAllDocVectors(TermFreqVector[] vectors)\n      throws IOException {\n\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n\n    if (vectors != null) {\n      final int numFields = vectors.length;\n      tvd.writeVInt(numFields);\n\n      long[] fieldPointers = new long[numFields];\n\n      for (int i=0; i<numFields; i++) {\n        fieldPointers[i] = tvf.getFilePointer();\n\n        final int fieldNumber = fieldInfos.fieldNumber(vectors[i].getField());\n\n        // 1st pass: write field numbers to tvd\n        tvd.writeVInt(fieldNumber);\n\n        final int numTerms = vectors[i].size();\n        tvf.writeVInt(numTerms);\n\n        final TermPositionVector tpVector;\n\n        final byte bits;\n        final boolean storePositions;\n        final boolean storeOffsets;\n\n        if (vectors[i] instanceof TermPositionVector) {\n          // May have positions & offsets\n          tpVector = (TermPositionVector) vectors[i];\n          storePositions = tpVector.size() > 0 && tpVector.getTermPositions(0) != null;\n          storeOffsets = tpVector.size() > 0 && tpVector.getOffsets(0) != null;\n          bits = (byte) ((storePositions ? TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR : 0) +\n                         (storeOffsets ? TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR : 0));\n        } else {\n          tpVector = null;\n          bits = 0;\n          storePositions = false;\n          storeOffsets = false;\n        }\n\n        tvf.writeVInt(bits);\n\n        final String[] terms = vectors[i].getTerms();\n        final int[] freqs = vectors[i].getTermFrequencies();\n\n        int utf8Upto = 0;\n        utf8Results[1].length = 0;\n\n        for (int j=0; j<numTerms; j++) {\n\n          UnicodeUtil.UTF16toUTF8(terms[j], 0, terms[j].length(), utf8Results[utf8Upto]);\n          \n          int start = StringHelper.bytesDifference(utf8Results[1-utf8Upto].result,\n                                                   utf8Results[1-utf8Upto].length,\n                                                   utf8Results[utf8Upto].result,\n                                                   utf8Results[utf8Upto].length);\n          int length = utf8Results[utf8Upto].length - start;\n          tvf.writeVInt(start);       // write shared prefix length\n          tvf.writeVInt(length);        // write delta length\n          tvf.writeBytes(utf8Results[utf8Upto].result, start, length);  // write delta bytes\n          utf8Upto = 1-utf8Upto;\n\n          final int termFreq = freqs[j];\n\n          tvf.writeVInt(termFreq);\n\n          if (storePositions) {\n            final int[] positions = tpVector.getTermPositions(j);\n            if (positions == null)\n              throw new IllegalStateException(\"Trying to write positions that are null!\");\n            assert positions.length == termFreq;\n\n            // use delta encoding for positions\n            int lastPosition = 0;\n            for(int k=0;k<positions.length;k++) {\n              final int position = positions[k];\n              tvf.writeVInt(position-lastPosition);\n              lastPosition = position;\n            }\n          }\n\n          if (storeOffsets) {\n            final TermVectorOffsetInfo[] offsets = tpVector.getOffsets(j);\n            if (offsets == null)\n              throw new IllegalStateException(\"Trying to write offsets that are null!\");\n            assert offsets.length == termFreq;\n\n            // use delta encoding for offsets\n            int lastEndOffset = 0;\n            for(int k=0;k<offsets.length;k++) {\n              final int startOffset = offsets[k].getStartOffset();\n              final int endOffset = offsets[k].getEndOffset();\n              tvf.writeVInt(startOffset-lastEndOffset);\n              tvf.writeVInt(endOffset-startOffset);\n              lastEndOffset = endOffset;\n            }\n          }\n        }\n      }\n\n      // 2nd pass: write field pointers to tvd\n      long lastFieldPointer = fieldPointers[0];\n      for (int i=1; i<numFields; i++) {\n        final long fieldPointer = fieldPointers[i];\n        tvd.writeVLong(fieldPointer-lastFieldPointer);\n        lastFieldPointer = fieldPointer;\n      }\n    } else\n      tvd.writeVInt(0);\n  }\n\n","bugFix":["11764865fb318bf86302eab36bdf9cd00c50c110","b3d08461c77d39c25ea6ff0cd05b32f948fa2a33"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsWriter#addAllDocVectors(TermFreqVector[]).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsWriter#addAllDocVectors(TermFreqVector[]).mjava","sourceNew":"  /**\n   * Add a complete document specified by all its term vectors. If document has no\n   * term vectors, add value for tvx.\n   * \n   * @param vectors\n   * @throws IOException\n   */\n  public final void addAllDocVectors(TermFreqVector[] vectors)\n      throws IOException {\n\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n\n    if (vectors != null) {\n      final int numFields = vectors.length;\n      tvd.writeVInt(numFields);\n\n      long[] fieldPointers = new long[numFields];\n\n      for (int i=0; i<numFields; i++) {\n        fieldPointers[i] = tvf.getFilePointer();\n\n        final int fieldNumber = fieldInfos.fieldNumber(vectors[i].getField());\n\n        // 1st pass: write field numbers to tvd\n        tvd.writeVInt(fieldNumber);\n\n        final int numTerms = vectors[i].size();\n        tvf.writeVInt(numTerms);\n\n        final TermPositionVector tpVector;\n\n        final byte bits;\n        final boolean storePositions;\n        final boolean storeOffsets;\n\n        if (vectors[i] instanceof TermPositionVector) {\n          // May have positions & offsets\n          tpVector = (TermPositionVector) vectors[i];\n          storePositions = tpVector.size() > 0 && tpVector.getTermPositions(0) != null;\n          storeOffsets = tpVector.size() > 0 && tpVector.getOffsets(0) != null;\n          bits = (byte) ((storePositions ? TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR : 0) +\n                         (storeOffsets ? TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR : 0));\n        } else {\n          tpVector = null;\n          bits = 0;\n          storePositions = false;\n          storeOffsets = false;\n        }\n\n        tvf.writeVInt(bits);\n\n        final String[] terms = vectors[i].getTerms();\n        final int[] freqs = vectors[i].getTermFrequencies();\n\n        int utf8Upto = 0;\n        utf8Results[1].length = 0;\n\n        for (int j=0; j<numTerms; j++) {\n\n          UnicodeUtil.UTF16toUTF8(terms[j], 0, terms[j].length(), utf8Results[utf8Upto]);\n          \n          int start = StringHelper.bytesDifference(utf8Results[1-utf8Upto].result,\n                                                   utf8Results[1-utf8Upto].length,\n                                                   utf8Results[utf8Upto].result,\n                                                   utf8Results[utf8Upto].length);\n          int length = utf8Results[utf8Upto].length - start;\n          tvf.writeVInt(start);       // write shared prefix length\n          tvf.writeVInt(length);        // write delta length\n          tvf.writeBytes(utf8Results[utf8Upto].result, start, length);  // write delta bytes\n          utf8Upto = 1-utf8Upto;\n\n          final int termFreq = freqs[j];\n\n          tvf.writeVInt(termFreq);\n\n          if (storePositions) {\n            final int[] positions = tpVector.getTermPositions(j);\n            if (positions == null)\n              throw new IllegalStateException(\"Trying to write positions that are null!\");\n            assert positions.length == termFreq;\n\n            // use delta encoding for positions\n            int lastPosition = 0;\n            for(int k=0;k<positions.length;k++) {\n              final int position = positions[k];\n              tvf.writeVInt(position-lastPosition);\n              lastPosition = position;\n            }\n          }\n\n          if (storeOffsets) {\n            final TermVectorOffsetInfo[] offsets = tpVector.getOffsets(j);\n            if (offsets == null)\n              throw new IllegalStateException(\"Trying to write offsets that are null!\");\n            assert offsets.length == termFreq;\n\n            // use delta encoding for offsets\n            int lastEndOffset = 0;\n            for(int k=0;k<offsets.length;k++) {\n              final int startOffset = offsets[k].getStartOffset();\n              final int endOffset = offsets[k].getEndOffset();\n              tvf.writeVInt(startOffset-lastEndOffset);\n              tvf.writeVInt(endOffset-startOffset);\n              lastEndOffset = endOffset;\n            }\n          }\n        }\n      }\n\n      // 2nd pass: write field pointers to tvd\n      if (numFields > 1) {\n        long lastFieldPointer = fieldPointers[0];\n        for (int i=1; i<numFields; i++) {\n          final long fieldPointer = fieldPointers[i];\n          tvd.writeVLong(fieldPointer-lastFieldPointer);\n          lastFieldPointer = fieldPointer;\n        }\n      }\n    } else\n      tvd.writeVInt(0);\n  }\n\n","sourceOld":"  /**\n   * Add a complete document specified by all its term vectors. If document has no\n   * term vectors, add value for tvx.\n   * \n   * @param vectors\n   * @throws IOException\n   */\n  public final void addAllDocVectors(TermFreqVector[] vectors)\n      throws IOException {\n\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n\n    if (vectors != null) {\n      final int numFields = vectors.length;\n      tvd.writeVInt(numFields);\n\n      long[] fieldPointers = new long[numFields];\n\n      for (int i=0; i<numFields; i++) {\n        fieldPointers[i] = tvf.getFilePointer();\n\n        final int fieldNumber = fieldInfos.fieldNumber(vectors[i].getField());\n\n        // 1st pass: write field numbers to tvd\n        tvd.writeVInt(fieldNumber);\n\n        final int numTerms = vectors[i].size();\n        tvf.writeVInt(numTerms);\n\n        final TermPositionVector tpVector;\n\n        final byte bits;\n        final boolean storePositions;\n        final boolean storeOffsets;\n\n        if (vectors[i] instanceof TermPositionVector) {\n          // May have positions & offsets\n          tpVector = (TermPositionVector) vectors[i];\n          storePositions = tpVector.size() > 0 && tpVector.getTermPositions(0) != null;\n          storeOffsets = tpVector.size() > 0 && tpVector.getOffsets(0) != null;\n          bits = (byte) ((storePositions ? TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR : 0) +\n                         (storeOffsets ? TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR : 0));\n        } else {\n          tpVector = null;\n          bits = 0;\n          storePositions = false;\n          storeOffsets = false;\n        }\n\n        tvf.writeVInt(bits);\n\n        final String[] terms = vectors[i].getTerms();\n        final int[] freqs = vectors[i].getTermFrequencies();\n\n        int utf8Upto = 0;\n        utf8Results[1].length = 0;\n\n        for (int j=0; j<numTerms; j++) {\n\n          UnicodeUtil.UTF16toUTF8(terms[j], 0, terms[j].length(), utf8Results[utf8Upto]);\n          \n          int start = StringHelper.bytesDifference(utf8Results[1-utf8Upto].result,\n                                                   utf8Results[1-utf8Upto].length,\n                                                   utf8Results[utf8Upto].result,\n                                                   utf8Results[utf8Upto].length);\n          int length = utf8Results[utf8Upto].length - start;\n          tvf.writeVInt(start);       // write shared prefix length\n          tvf.writeVInt(length);        // write delta length\n          tvf.writeBytes(utf8Results[utf8Upto].result, start, length);  // write delta bytes\n          utf8Upto = 1-utf8Upto;\n\n          final int termFreq = freqs[j];\n\n          tvf.writeVInt(termFreq);\n\n          if (storePositions) {\n            final int[] positions = tpVector.getTermPositions(j);\n            if (positions == null)\n              throw new IllegalStateException(\"Trying to write positions that are null!\");\n            assert positions.length == termFreq;\n\n            // use delta encoding for positions\n            int lastPosition = 0;\n            for(int k=0;k<positions.length;k++) {\n              final int position = positions[k];\n              tvf.writeVInt(position-lastPosition);\n              lastPosition = position;\n            }\n          }\n\n          if (storeOffsets) {\n            final TermVectorOffsetInfo[] offsets = tpVector.getOffsets(j);\n            if (offsets == null)\n              throw new IllegalStateException(\"Trying to write offsets that are null!\");\n            assert offsets.length == termFreq;\n\n            // use delta encoding for offsets\n            int lastEndOffset = 0;\n            for(int k=0;k<offsets.length;k++) {\n              final int startOffset = offsets[k].getStartOffset();\n              final int endOffset = offsets[k].getEndOffset();\n              tvf.writeVInt(startOffset-lastEndOffset);\n              tvf.writeVInt(endOffset-startOffset);\n              lastEndOffset = endOffset;\n            }\n          }\n        }\n      }\n\n      // 2nd pass: write field pointers to tvd\n      if (numFields > 1) {\n        long lastFieldPointer = fieldPointers[0];\n        for (int i=1; i<numFields; i++) {\n          final long fieldPointer = fieldPointers[i];\n          tvd.writeVLong(fieldPointer-lastFieldPointer);\n          lastFieldPointer = fieldPointer;\n        }\n      }\n    } else\n      tvd.writeVInt(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33":["d7a119dd14350e2cfe6ba6b5e71d48ee6c356482"],"8daba5852e0d876bb642b2aa0bd7d32897280994":["11764865fb318bf86302eab36bdf9cd00c50c110"],"11764865fb318bf86302eab36bdf9cd00c50c110":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["b3d08461c77d39c25ea6ff0cd05b32f948fa2a33"],"910bb2b4a9549c76f89ce57a3cec7563c44aa561":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d7a119dd14350e2cfe6ba6b5e71d48ee6c356482":["8daba5852e0d876bb642b2aa0bd7d32897280994"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["910bb2b4a9549c76f89ce57a3cec7563c44aa561"]},"commit2Childs":{"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"8daba5852e0d876bb642b2aa0bd7d32897280994":["d7a119dd14350e2cfe6ba6b5e71d48ee6c356482"],"11764865fb318bf86302eab36bdf9cd00c50c110":["8daba5852e0d876bb642b2aa0bd7d32897280994"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["910bb2b4a9549c76f89ce57a3cec7563c44aa561"],"910bb2b4a9549c76f89ce57a3cec7563c44aa561":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["11764865fb318bf86302eab36bdf9cd00c50c110"],"d7a119dd14350e2cfe6ba6b5e71d48ee6c356482":["b3d08461c77d39c25ea6ff0cd05b32f948fa2a33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}