{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/FileDictionaryTest#testFileWithTerm().mjava","commits":[{"id":"1ec8cb0daeb794c3ff1be45d2ed2d71ddae8e19b","date":1384304197,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/FileDictionaryTest#testFileWithTerm().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFileWithTerm() throws IOException {\n    Map.Entry<List<List<String>>,String> fileInput = generateFileInput(atLeast(100), FileDictionary.DEFAULT_FIELD_DELIMITER, false, false);\n    InputStream inputReader = new ByteArrayInputStream(fileInput.getValue().getBytes(\"UTF-8\"));\n    FileDictionary dictionary = new FileDictionary(inputReader);\n    List<List<String>> entries = fileInput.getKey();\n    InputIterator inputIter = dictionary.getWordsIterator();\n    assertFalse(inputIter.hasPayloads());\n    BytesRef term;\n    int count = 0;\n    while((term = inputIter.next()) != null) {\n      assertTrue(entries.size() > count);\n      List<String> entry = entries.get(count);\n      assertTrue(entry.size() >= 1); // at least a term\n      assertEquals(entry.get(0), term.utf8ToString());\n      assertEquals(1, inputIter.weight());\n      assertNull(inputIter.payload());\n      count++;\n    }\n    assertEquals(count, entries.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a645276cbaf5dc96a42fd473b9019bde352996c8","date":1391806699,"type":3,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/FileDictionaryTest#testFileWithTerm().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/FileDictionaryTest#testFileWithTerm().mjava","sourceNew":"  @Test\n  public void testFileWithTerm() throws IOException {\n    Map.Entry<List<List<String>>,String> fileInput = generateFileInput(atLeast(100), FileDictionary.DEFAULT_FIELD_DELIMITER, false, false);\n    InputStream inputReader = new ByteArrayInputStream(fileInput.getValue().getBytes(\"UTF-8\"));\n    FileDictionary dictionary = new FileDictionary(inputReader);\n    List<List<String>> entries = fileInput.getKey();\n    InputIterator inputIter = dictionary.getEntryIterator();\n    assertFalse(inputIter.hasPayloads());\n    BytesRef term;\n    int count = 0;\n    while((term = inputIter.next()) != null) {\n      assertTrue(entries.size() > count);\n      List<String> entry = entries.get(count);\n      assertTrue(entry.size() >= 1); // at least a term\n      assertEquals(entry.get(0), term.utf8ToString());\n      assertEquals(1, inputIter.weight());\n      assertNull(inputIter.payload());\n      count++;\n    }\n    assertEquals(count, entries.size());\n  }\n\n","sourceOld":"  @Test\n  public void testFileWithTerm() throws IOException {\n    Map.Entry<List<List<String>>,String> fileInput = generateFileInput(atLeast(100), FileDictionary.DEFAULT_FIELD_DELIMITER, false, false);\n    InputStream inputReader = new ByteArrayInputStream(fileInput.getValue().getBytes(\"UTF-8\"));\n    FileDictionary dictionary = new FileDictionary(inputReader);\n    List<List<String>> entries = fileInput.getKey();\n    InputIterator inputIter = dictionary.getWordsIterator();\n    assertFalse(inputIter.hasPayloads());\n    BytesRef term;\n    int count = 0;\n    while((term = inputIter.next()) != null) {\n      assertTrue(entries.size() > count);\n      List<String> entry = entries.get(count);\n      assertTrue(entry.size() >= 1); // at least a term\n      assertEquals(entry.get(0), term.utf8ToString());\n      assertEquals(1, inputIter.weight());\n      assertNull(inputIter.payload());\n      count++;\n    }\n    assertEquals(count, entries.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/FileDictionaryTest#testFileWithTerm().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/FileDictionaryTest#testFileWithTerm().mjava","sourceNew":"  @Test\n  public void testFileWithTerm() throws IOException {\n    Map.Entry<List<List<String>>,String> fileInput = generateFileInput(atLeast(100), FileDictionary.DEFAULT_FIELD_DELIMITER, false, false);\n    InputStream inputReader = new ByteArrayInputStream(fileInput.getValue().getBytes(StandardCharsets.UTF_8));\n    FileDictionary dictionary = new FileDictionary(inputReader);\n    List<List<String>> entries = fileInput.getKey();\n    InputIterator inputIter = dictionary.getEntryIterator();\n    assertFalse(inputIter.hasPayloads());\n    BytesRef term;\n    int count = 0;\n    while((term = inputIter.next()) != null) {\n      assertTrue(entries.size() > count);\n      List<String> entry = entries.get(count);\n      assertTrue(entry.size() >= 1); // at least a term\n      assertEquals(entry.get(0), term.utf8ToString());\n      assertEquals(1, inputIter.weight());\n      assertNull(inputIter.payload());\n      count++;\n    }\n    assertEquals(count, entries.size());\n  }\n\n","sourceOld":"  @Test\n  public void testFileWithTerm() throws IOException {\n    Map.Entry<List<List<String>>,String> fileInput = generateFileInput(atLeast(100), FileDictionary.DEFAULT_FIELD_DELIMITER, false, false);\n    InputStream inputReader = new ByteArrayInputStream(fileInput.getValue().getBytes(\"UTF-8\"));\n    FileDictionary dictionary = new FileDictionary(inputReader);\n    List<List<String>> entries = fileInput.getKey();\n    InputIterator inputIter = dictionary.getEntryIterator();\n    assertFalse(inputIter.hasPayloads());\n    BytesRef term;\n    int count = 0;\n    while((term = inputIter.next()) != null) {\n      assertTrue(entries.size() > count);\n      List<String> entry = entries.get(count);\n      assertTrue(entry.size() >= 1); // at least a term\n      assertEquals(entry.get(0), term.utf8ToString());\n      assertEquals(1, inputIter.weight());\n      assertNull(inputIter.payload());\n      count++;\n    }\n    assertEquals(count, entries.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/FileDictionaryTest#testFileWithTerm().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/FileDictionaryTest#testFileWithTerm().mjava","sourceNew":"  @Test\n  public void testFileWithTerm() throws IOException {\n    Map.Entry<List<List<String>>,String> fileInput = generateFileInput(atLeast(100), FileDictionary.DEFAULT_FIELD_DELIMITER, false, false);\n    InputStream inputReader = new ByteArrayInputStream(fileInput.getValue().getBytes(StandardCharsets.UTF_8));\n    FileDictionary dictionary = new FileDictionary(inputReader);\n    List<List<String>> entries = fileInput.getKey();\n    InputIterator inputIter = dictionary.getEntryIterator();\n    assertFalse(inputIter.hasPayloads());\n    BytesRef term;\n    int count = 0;\n    while((term = inputIter.next()) != null) {\n      assertTrue(entries.size() > count);\n      List<String> entry = entries.get(count);\n      assertTrue(entry.size() >= 1); // at least a term\n      assertEquals(entry.get(0), term.utf8ToString());\n      assertEquals(1, inputIter.weight());\n      assertNull(inputIter.payload());\n      count++;\n    }\n    assertEquals(count, entries.size());\n  }\n\n","sourceOld":"  @Test\n  public void testFileWithTerm() throws IOException {\n    Map.Entry<List<List<String>>,String> fileInput = generateFileInput(atLeast(100), FileDictionary.DEFAULT_FIELD_DELIMITER, false, false);\n    InputStream inputReader = new ByteArrayInputStream(fileInput.getValue().getBytes(\"UTF-8\"));\n    FileDictionary dictionary = new FileDictionary(inputReader);\n    List<List<String>> entries = fileInput.getKey();\n    InputIterator inputIter = dictionary.getEntryIterator();\n    assertFalse(inputIter.hasPayloads());\n    BytesRef term;\n    int count = 0;\n    while((term = inputIter.next()) != null) {\n      assertTrue(entries.size() > count);\n      List<String> entry = entries.get(count);\n      assertTrue(entry.size() >= 1); // at least a term\n      assertEquals(entry.get(0), term.utf8ToString());\n      assertEquals(1, inputIter.weight());\n      assertNull(inputIter.payload());\n      count++;\n    }\n    assertEquals(count, entries.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a645276cbaf5dc96a42fd473b9019bde352996c8","7d89d7e4e5101347833eea558851bf4209218619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ec8cb0daeb794c3ff1be45d2ed2d71ddae8e19b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d89d7e4e5101347833eea558851bf4209218619":["a645276cbaf5dc96a42fd473b9019bde352996c8"],"a645276cbaf5dc96a42fd473b9019bde352996c8":["1ec8cb0daeb794c3ff1be45d2ed2d71ddae8e19b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d89d7e4e5101347833eea558851bf4209218619"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ec8cb0daeb794c3ff1be45d2ed2d71ddae8e19b"],"1ec8cb0daeb794c3ff1be45d2ed2d71ddae8e19b":["a645276cbaf5dc96a42fd473b9019bde352996c8"],"a645276cbaf5dc96a42fd473b9019bde352996c8":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}