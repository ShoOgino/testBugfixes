{"path":"solr/core/src/test/org/apache/solr/util/hll/BitVectorTest#assertIterator(int,int).mjava","commits":[{"id":"6faa211c4af605e3cf078a76d200c1dc348973f5","date":1437043657,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/BitVectorTest#assertIterator(int,int).mjava","pathOld":"/dev/null","sourceNew":"    private static void assertIterator(final int width, final int count) {\n        final BitVector vector = new BitVector(width, count);\n        final LongIterator iter = vector.registerIterator();\n\n        for(int i=0; i<count; i++) {\n            assertTrue(String.format(\"expected more elements: width=%s, count=%s\", width, count), iter.hasNext());\n            // TODO: fill with a sentinel value\n            assertEquals(iter.next(), 0);\n        }\n        assertFalse(String.format(\"expected no more elements: width=%s, count=%s\", width, count), iter.hasNext());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17b85d628f76d6029c3d993182bcefe02930dbdf","date":1437046195,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/BitVectorTest#assertIterator(int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/hll/BitVectorTest#assertIterator(int,int).mjava","sourceNew":"    private static void assertIterator(final int width, final int count) {\n        final BitVector vector = new BitVector(width, count);\n        final LongIterator iter = vector.registerIterator();\n\n        for(int i=0; i<count; i++) {\n            assertTrue(String.format(Locale.ROOT, \"expected more elements: width=%s, count=%s\", width, count), iter.hasNext());\n            // TODO: fill with a sentinel value\n            assertEquals(iter.next(), 0);\n        }\n        assertFalse(String.format(Locale.ROOT, \"expected no more elements: width=%s, count=%s\", width, count), iter.hasNext());\n    }\n\n","sourceOld":"    private static void assertIterator(final int width, final int count) {\n        final BitVector vector = new BitVector(width, count);\n        final LongIterator iter = vector.registerIterator();\n\n        for(int i=0; i<count; i++) {\n            assertTrue(String.format(\"expected more elements: width=%s, count=%s\", width, count), iter.hasNext());\n            // TODO: fill with a sentinel value\n            assertEquals(iter.next(), 0);\n        }\n        assertFalse(String.format(\"expected no more elements: width=%s, count=%s\", width, count), iter.hasNext());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/BitVectorTest#assertIterator(int,int).mjava","pathOld":"/dev/null","sourceNew":"    private static void assertIterator(final int width, final int count) {\n        final BitVector vector = new BitVector(width, count);\n        final LongIterator iter = vector.registerIterator();\n\n        for(int i=0; i<count; i++) {\n            assertTrue(String.format(Locale.ROOT, \"expected more elements: width=%s, count=%s\", width, count), iter.hasNext());\n            // TODO: fill with a sentinel value\n            assertEquals(iter.next(), 0);\n        }\n        assertFalse(String.format(Locale.ROOT, \"expected no more elements: width=%s, count=%s\", width, count), iter.hasNext());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17b85d628f76d6029c3d993182bcefe02930dbdf"],"17b85d628f76d6029c3d993182bcefe02930dbdf":["6faa211c4af605e3cf078a76d200c1dc348973f5"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6faa211c4af605e3cf078a76d200c1dc348973f5"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17b85d628f76d6029c3d993182bcefe02930dbdf":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["17b85d628f76d6029c3d993182bcefe02930dbdf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}