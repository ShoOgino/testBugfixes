{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHoldLockOnLargestWriter().mjava","commits":[{"id":"ad4be95c403f45330d2a078afc9b6fab4515c8ce","date":1512064647,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHoldLockOnLargestWriter().mjava","pathOld":"/dev/null","sourceNew":"  public void testHoldLockOnLargestWriter() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig());\n    int numDocs = indexDocsForMultipleThreadStates(w);\n    DocumentsWriterPerThreadPool.ThreadState largestNonPendingWriter\n        = w.docWriter.flushControl.findLargestNonPendingWriter();\n    assertFalse(largestNonPendingWriter.flushPending);\n    assertNotNull(largestNonPendingWriter.dwpt);\n\n    CountDownLatch wait = new CountDownLatch(1);\n    CountDownLatch locked = new CountDownLatch(1);\n    Thread lockThread = new Thread(() -> {\n      try {\n        largestNonPendingWriter.lock();\n        locked.countDown();\n        wait.await();\n      } catch (InterruptedException e) {\n        throw new AssertionError(e);\n      } finally {\n        largestNonPendingWriter.unlock();\n      }\n    });\n    lockThread.start();\n    Thread flushThread = new Thread(() -> {\n      try {\n        locked.await();\n        assertTrue(w.flushNextBuffer());\n      } catch (Exception e) {\n        throw new AssertionError(e);\n      }\n    });\n    flushThread.start();\n\n    locked.await();\n    // access a synced method to ensure we never lock while we hold the flush control monitor\n    w.docWriter.flushControl.activeBytes();\n    wait.countDown();\n    lockThread.join();\n    flushThread.join();\n\n    assertNull(\"largest DWPT should be flushed\", largestNonPendingWriter.dwpt);\n    // make sure it's not locked\n    largestNonPendingWriter.lock();\n    largestNonPendingWriter.unlock();\n    if (random().nextBoolean()) {\n      w.commit();\n    }\n    DirectoryReader reader = DirectoryReader.open(w, true, true);\n    assertEquals(numDocs, reader.numDocs());\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHoldLockOnLargestWriter().mjava","pathOld":"/dev/null","sourceNew":"  public void testHoldLockOnLargestWriter() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig());\n    int numDocs = indexDocsForMultipleThreadStates(w);\n    DocumentsWriterPerThreadPool.ThreadState largestNonPendingWriter\n        = w.docWriter.flushControl.findLargestNonPendingWriter();\n    assertFalse(largestNonPendingWriter.flushPending);\n    assertNotNull(largestNonPendingWriter.dwpt);\n\n    CountDownLatch wait = new CountDownLatch(1);\n    CountDownLatch locked = new CountDownLatch(1);\n    Thread lockThread = new Thread(() -> {\n      try {\n        largestNonPendingWriter.lock();\n        locked.countDown();\n        wait.await();\n      } catch (InterruptedException e) {\n        throw new AssertionError(e);\n      } finally {\n        largestNonPendingWriter.unlock();\n      }\n    });\n    lockThread.start();\n    Thread flushThread = new Thread(() -> {\n      try {\n        locked.await();\n        assertTrue(w.flushNextBuffer());\n      } catch (Exception e) {\n        throw new AssertionError(e);\n      }\n    });\n    flushThread.start();\n\n    locked.await();\n    // access a synced method to ensure we never lock while we hold the flush control monitor\n    w.docWriter.flushControl.activeBytes();\n    wait.countDown();\n    lockThread.join();\n    flushThread.join();\n\n    assertNull(\"largest DWPT should be flushed\", largestNonPendingWriter.dwpt);\n    // make sure it's not locked\n    largestNonPendingWriter.lock();\n    largestNonPendingWriter.unlock();\n    if (random().nextBoolean()) {\n      w.commit();\n    }\n    DirectoryReader reader = DirectoryReader.open(w, true, true);\n    assertEquals(numDocs, reader.numDocs());\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHoldLockOnLargestWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHoldLockOnLargestWriter().mjava","sourceNew":"  public void testHoldLockOnLargestWriter() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig());\n    int numDocs = indexDocsForMultipleDWPTs(w);\n    DocumentsWriterPerThread largestNonPendingWriter\n        = w.docWriter.flushControl.findLargestNonPendingWriter();\n    assertFalse(largestNonPendingWriter.isFlushPending());\n    assertFalse(largestNonPendingWriter.hasFlushed());\n\n    CountDownLatch wait = new CountDownLatch(1);\n    CountDownLatch locked = new CountDownLatch(1);\n    Thread lockThread = new Thread(() -> {\n      try {\n        largestNonPendingWriter.lock();\n        locked.countDown();\n        wait.await();\n      } catch (InterruptedException e) {\n        throw new AssertionError(e);\n      } finally {\n        largestNonPendingWriter.unlock();\n      }\n    });\n    lockThread.start();\n    Thread flushThread = new Thread(() -> {\n      try {\n        locked.await();\n        assertTrue(w.flushNextBuffer());\n      } catch (Exception e) {\n        throw new AssertionError(e);\n      }\n    });\n    flushThread.start();\n\n    locked.await();\n    // access a synced method to ensure we never lock while we hold the flush control monitor\n    w.docWriter.flushControl.activeBytes();\n    wait.countDown();\n    lockThread.join();\n    flushThread.join();\n\n    assertTrue(\"largest DWPT should be flushed\", largestNonPendingWriter.hasFlushed());\n    // make sure it's not locked\n    largestNonPendingWriter.lock();\n    largestNonPendingWriter.unlock();\n    if (random().nextBoolean()) {\n      w.commit();\n    }\n    DirectoryReader reader = DirectoryReader.open(w, true, true);\n    assertEquals(numDocs, reader.numDocs());\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testHoldLockOnLargestWriter() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig());\n    int numDocs = indexDocsForMultipleThreadStates(w);\n    DocumentsWriterPerThreadPool.ThreadState largestNonPendingWriter\n        = w.docWriter.flushControl.findLargestNonPendingWriter();\n    assertFalse(largestNonPendingWriter.flushPending);\n    assertNotNull(largestNonPendingWriter.dwpt);\n\n    CountDownLatch wait = new CountDownLatch(1);\n    CountDownLatch locked = new CountDownLatch(1);\n    Thread lockThread = new Thread(() -> {\n      try {\n        largestNonPendingWriter.lock();\n        locked.countDown();\n        wait.await();\n      } catch (InterruptedException e) {\n        throw new AssertionError(e);\n      } finally {\n        largestNonPendingWriter.unlock();\n      }\n    });\n    lockThread.start();\n    Thread flushThread = new Thread(() -> {\n      try {\n        locked.await();\n        assertTrue(w.flushNextBuffer());\n      } catch (Exception e) {\n        throw new AssertionError(e);\n      }\n    });\n    flushThread.start();\n\n    locked.await();\n    // access a synced method to ensure we never lock while we hold the flush control monitor\n    w.docWriter.flushControl.activeBytes();\n    wait.countDown();\n    lockThread.join();\n    flushThread.join();\n\n    assertNull(\"largest DWPT should be flushed\", largestNonPendingWriter.dwpt);\n    // make sure it's not locked\n    largestNonPendingWriter.lock();\n    largestNonPendingWriter.unlock();\n    if (random().nextBoolean()) {\n      w.commit();\n    }\n    DirectoryReader reader = DirectoryReader.open(w, true, true);\n    assertEquals(numDocs, reader.numDocs());\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad4be95c403f45330d2a078afc9b6fab4515c8ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad4be95c403f45330d2a078afc9b6fab4515c8ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["264935965977b4a9e2f3920420647072c9c49176"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1aad05eeff7818b0833c02ac6b743aa72054963b","ad4be95c403f45330d2a078afc9b6fab4515c8ce"],"ad4be95c403f45330d2a078afc9b6fab4515c8ce":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}