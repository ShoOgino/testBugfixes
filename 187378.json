{"path":"solr/core/src/java/org/apache/solr/legacy/PointVectorStrategy#PointVectorStrategy(SpatialContext,String,FieldType).mjava","commits":[{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/legacy/PointVectorStrategy#PointVectorStrategy(SpatialContext,String,FieldType).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new instance configured with the provided FieldType options. See {@link #DEFAULT_FIELDTYPE}.\n   * a field type is used to articulate the desired options (namely pointValues, docValues, stored).  Legacy numerics\n   * is configurable this way too.\n   */\n  public PointVectorStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    this.fieldNameX = fieldNamePrefix+SUFFIX_X;\n    this.fieldNameY = fieldNamePrefix+SUFFIX_Y;\n\n    int numPairs = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numPairs++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numPairs++;\n    }\n    if ((this.hasPointVals = fieldType.pointDimensionCount() > 0)) {\n      numPairs++;\n    }\n    if (fieldType.indexOptions() != IndexOptions.NONE && fieldType instanceof LegacyFieldType && ((LegacyFieldType)fieldType).numericType() != null) {\n      if (hasPointVals) {\n        throw new IllegalArgumentException(\"pointValues and LegacyNumericType are mutually exclusive\");\n      }\n      final LegacyFieldType legacyType = (LegacyFieldType) fieldType;\n      if (legacyType.numericType() != LegacyNumericType.DOUBLE) {\n        throw new IllegalArgumentException(getClass() + \" does not support \" + legacyType.numericType());\n      }\n      numPairs++;\n      legacyNumericFieldType = new LegacyFieldType(LegacyDoubleField.TYPE_NOT_STORED);\n      legacyNumericFieldType.setNumericPrecisionStep(legacyType.numericPrecisionStep());\n      legacyNumericFieldType.freeze();\n    } else {\n      legacyNumericFieldType = null;\n    }\n    this.fieldsLen = numPairs * 2;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/legacy/PointVectorStrategy#PointVectorStrategy(SpatialContext,String,FieldType).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new instance configured with the provided FieldType options. See {@link #DEFAULT_FIELDTYPE}.\n   * a field type is used to articulate the desired options (namely pointValues, docValues, stored).  Legacy numerics\n   * is configurable this way too.\n   */\n  public PointVectorStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    this.fieldNameX = fieldNamePrefix+SUFFIX_X;\n    this.fieldNameY = fieldNamePrefix+SUFFIX_Y;\n\n    int numPairs = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numPairs++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numPairs++;\n    }\n    if ((this.hasPointVals = fieldType.pointDimensionCount() > 0)) {\n      numPairs++;\n    }\n    if (fieldType.indexOptions() != IndexOptions.NONE && fieldType instanceof LegacyFieldType && ((LegacyFieldType)fieldType).numericType() != null) {\n      if (hasPointVals) {\n        throw new IllegalArgumentException(\"pointValues and LegacyNumericType are mutually exclusive\");\n      }\n      final LegacyFieldType legacyType = (LegacyFieldType) fieldType;\n      if (legacyType.numericType() != LegacyNumericType.DOUBLE) {\n        throw new IllegalArgumentException(getClass() + \" does not support \" + legacyType.numericType());\n      }\n      numPairs++;\n      legacyNumericFieldType = new LegacyFieldType(LegacyDoubleField.TYPE_NOT_STORED);\n      legacyNumericFieldType.setNumericPrecisionStep(legacyType.numericPrecisionStep());\n      legacyNumericFieldType.freeze();\n    } else {\n      legacyNumericFieldType = null;\n    }\n    this.fieldsLen = numPairs * 2;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/legacy/PointVectorStrategy#PointVectorStrategy(SpatialContext,String,FieldType).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new instance configured with the provided FieldType options. See {@link #DEFAULT_FIELDTYPE}.\n   * a field type is used to articulate the desired options (namely pointValues, docValues, stored).  Legacy numerics\n   * is configurable this way too.\n   */\n  public PointVectorStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    this.fieldNameX = fieldNamePrefix+SUFFIX_X;\n    this.fieldNameY = fieldNamePrefix+SUFFIX_Y;\n\n    int numPairs = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numPairs++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numPairs++;\n    }\n    if ((this.hasPointVals = fieldType.pointDimensionCount() > 0)) {\n      numPairs++;\n    }\n    if (fieldType.indexOptions() != IndexOptions.NONE && fieldType instanceof LegacyFieldType && ((LegacyFieldType)fieldType).numericType() != null) {\n      if (hasPointVals) {\n        throw new IllegalArgumentException(\"pointValues and LegacyNumericType are mutually exclusive\");\n      }\n      final LegacyFieldType legacyType = (LegacyFieldType) fieldType;\n      if (legacyType.numericType() != LegacyNumericType.DOUBLE) {\n        throw new IllegalArgumentException(getClass() + \" does not support \" + legacyType.numericType());\n      }\n      numPairs++;\n      legacyNumericFieldType = new LegacyFieldType(LegacyDoubleField.TYPE_NOT_STORED);\n      legacyNumericFieldType.setNumericPrecisionStep(legacyType.numericPrecisionStep());\n      legacyNumericFieldType.freeze();\n    } else {\n      legacyNumericFieldType = null;\n    }\n    this.fieldsLen = numPairs * 2;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/legacy/PointVectorStrategy#PointVectorStrategy(SpatialContext,String,FieldType).mjava","pathOld":"solr/core/src/java/org/apache/solr/legacy/PointVectorStrategy#PointVectorStrategy(SpatialContext,String,FieldType).mjava","sourceNew":"  /**\n   * Create a new instance configured with the provided FieldType options. See {@link #DEFAULT_FIELDTYPE}.\n   * a field type is used to articulate the desired options (namely pointValues, docValues, stored).  Legacy numerics\n   * is configurable this way too.\n   */\n  public PointVectorStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    this.fieldNameX = fieldNamePrefix+SUFFIX_X;\n    this.fieldNameY = fieldNamePrefix+SUFFIX_Y;\n\n    int numPairs = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numPairs++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numPairs++;\n    }\n    if ((this.hasPointVals = fieldType.pointDataDimensionCount() > 0)) {\n      numPairs++;\n    }\n    if (fieldType.indexOptions() != IndexOptions.NONE && fieldType instanceof LegacyFieldType && ((LegacyFieldType)fieldType).numericType() != null) {\n      if (hasPointVals) {\n        throw new IllegalArgumentException(\"pointValues and LegacyNumericType are mutually exclusive\");\n      }\n      final LegacyFieldType legacyType = (LegacyFieldType) fieldType;\n      if (legacyType.numericType() != LegacyNumericType.DOUBLE) {\n        throw new IllegalArgumentException(getClass() + \" does not support \" + legacyType.numericType());\n      }\n      numPairs++;\n      legacyNumericFieldType = new LegacyFieldType(LegacyDoubleField.TYPE_NOT_STORED);\n      legacyNumericFieldType.setNumericPrecisionStep(legacyType.numericPrecisionStep());\n      legacyNumericFieldType.freeze();\n    } else {\n      legacyNumericFieldType = null;\n    }\n    this.fieldsLen = numPairs * 2;\n  }\n\n","sourceOld":"  /**\n   * Create a new instance configured with the provided FieldType options. See {@link #DEFAULT_FIELDTYPE}.\n   * a field type is used to articulate the desired options (namely pointValues, docValues, stored).  Legacy numerics\n   * is configurable this way too.\n   */\n  public PointVectorStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    this.fieldNameX = fieldNamePrefix+SUFFIX_X;\n    this.fieldNameY = fieldNamePrefix+SUFFIX_Y;\n\n    int numPairs = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numPairs++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numPairs++;\n    }\n    if ((this.hasPointVals = fieldType.pointDimensionCount() > 0)) {\n      numPairs++;\n    }\n    if (fieldType.indexOptions() != IndexOptions.NONE && fieldType instanceof LegacyFieldType && ((LegacyFieldType)fieldType).numericType() != null) {\n      if (hasPointVals) {\n        throw new IllegalArgumentException(\"pointValues and LegacyNumericType are mutually exclusive\");\n      }\n      final LegacyFieldType legacyType = (LegacyFieldType) fieldType;\n      if (legacyType.numericType() != LegacyNumericType.DOUBLE) {\n        throw new IllegalArgumentException(getClass() + \" does not support \" + legacyType.numericType());\n      }\n      numPairs++;\n      legacyNumericFieldType = new LegacyFieldType(LegacyDoubleField.TYPE_NOT_STORED);\n      legacyNumericFieldType.setNumericPrecisionStep(legacyType.numericPrecisionStep());\n      legacyNumericFieldType.freeze();\n    } else {\n      legacyNumericFieldType = null;\n    }\n    this.fieldsLen = numPairs * 2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/legacy/PointVectorStrategy#PointVectorStrategy(SpatialContext,String,FieldType).mjava","pathOld":"solr/core/src/java/org/apache/solr/legacy/PointVectorStrategy#PointVectorStrategy(SpatialContext,String,FieldType).mjava","sourceNew":"  /**\n   * Create a new instance configured with the provided FieldType options. See {@link #DEFAULT_FIELDTYPE}.\n   * a field type is used to articulate the desired options (namely pointValues, docValues, stored).  Legacy numerics\n   * is configurable this way too.\n   */\n  public PointVectorStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    this.fieldNameX = fieldNamePrefix+SUFFIX_X;\n    this.fieldNameY = fieldNamePrefix+SUFFIX_Y;\n\n    int numPairs = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numPairs++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numPairs++;\n    }\n    if ((this.hasPointVals = fieldType.pointDimensionCount() > 0)) {\n      numPairs++;\n    }\n    if (fieldType.indexOptions() != IndexOptions.NONE && fieldType instanceof LegacyFieldType && ((LegacyFieldType)fieldType).numericType() != null) {\n      if (hasPointVals) {\n        throw new IllegalArgumentException(\"pointValues and LegacyNumericType are mutually exclusive\");\n      }\n      final LegacyFieldType legacyType = (LegacyFieldType) fieldType;\n      if (legacyType.numericType() != LegacyNumericType.DOUBLE) {\n        throw new IllegalArgumentException(getClass() + \" does not support \" + legacyType.numericType());\n      }\n      numPairs++;\n      legacyNumericFieldType = new LegacyFieldType(LegacyDoubleField.TYPE_NOT_STORED);\n      legacyNumericFieldType.setNumericPrecisionStep(legacyType.numericPrecisionStep());\n      legacyNumericFieldType.freeze();\n    } else {\n      legacyNumericFieldType = null;\n    }\n    this.fieldsLen = numPairs * 2;\n  }\n\n","sourceOld":"  /**\n   * Create a new instance configured with the provided FieldType options. See {@link #DEFAULT_FIELDTYPE}.\n   * a field type is used to articulate the desired options (namely pointValues, docValues, stored).  Legacy numerics\n   * is configurable this way too.\n   */\n  public PointVectorStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    this.fieldNameX = fieldNamePrefix+SUFFIX_X;\n    this.fieldNameY = fieldNamePrefix+SUFFIX_Y;\n\n    int numPairs = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numPairs++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numPairs++;\n    }\n    if ((this.hasPointVals = fieldType.pointDataDimensionCount() > 0)) {\n      numPairs++;\n    }\n    if (fieldType.indexOptions() != IndexOptions.NONE && fieldType instanceof LegacyFieldType && ((LegacyFieldType)fieldType).numericType() != null) {\n      if (hasPointVals) {\n        throw new IllegalArgumentException(\"pointValues and LegacyNumericType are mutually exclusive\");\n      }\n      final LegacyFieldType legacyType = (LegacyFieldType) fieldType;\n      if (legacyType.numericType() != LegacyNumericType.DOUBLE) {\n        throw new IllegalArgumentException(getClass() + \" does not support \" + legacyType.numericType());\n      }\n      numPairs++;\n      legacyNumericFieldType = new LegacyFieldType(LegacyDoubleField.TYPE_NOT_STORED);\n      legacyNumericFieldType.setNumericPrecisionStep(legacyType.numericPrecisionStep());\n      legacyNumericFieldType.freeze();\n    } else {\n      legacyNumericFieldType = null;\n    }\n    this.fieldsLen = numPairs * 2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["f6652c943595e92c187ee904c382863013eae28f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}