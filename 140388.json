{"path":"solr/solrj/src/java/org/apache/solr/common/util/Base64#base64ToByteArray(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Base64#base64ToByteArray(String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/Base64#base64ToByteArray(String).mjava","sourceNew":"  public static byte[] base64ToByteArray(String s) {\n    byte[] alphaToInt = base64ToInt;\n    int sLen = s.length();\n    int numGroups = sLen / 4;\n    if (4 * numGroups != sLen)\n      throw new IllegalArgumentException(\n              \"String length must be a multiple of four.\");\n    int missingBytesInLastGroup = 0;\n    int numFullGroups = numGroups;\n    if (sLen != 0) {\n      if (s.charAt(sLen - 1) == '=') {\n        missingBytesInLastGroup++;\n        numFullGroups--;\n      }\n      if (s.charAt(sLen - 2) == '=')\n        missingBytesInLastGroup++;\n    }\n    byte[] result = new byte[3 * numGroups - missingBytesInLastGroup];\n\n    // Translate all full groups from base64 to byte array elements\n    int inCursor = 0, outCursor = 0;\n    for (int i = 0; i < numFullGroups; i++) {\n      int ch0 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch1 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch2 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch3 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      result[outCursor++] = (byte) ((ch0 << 2) | (ch1 >> 4));\n      result[outCursor++] = (byte) ((ch1 << 4) | (ch2 >> 2));\n      result[outCursor++] = (byte) ((ch2 << 6) | ch3);\n    }\n\n    // Translate partial group, if present\n    if (missingBytesInLastGroup != 0) {\n      int ch0 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch1 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      result[outCursor++] = (byte) ((ch0 << 2) | (ch1 >> 4));\n\n      if (missingBytesInLastGroup == 1) {\n        int ch2 = base64toInt(s.charAt(inCursor++), alphaToInt);\n        result[outCursor++] = (byte) ((ch1 << 4) | (ch2 >> 2));\n      }\n    }\n    // assert inCursor == s.length()-missingBytesInLastGroup;\n    // assert outCursor == result.length;\n    return result;\n  }\n\n","sourceOld":"  public static byte[] base64ToByteArray(String s) {\n    byte[] alphaToInt = base64ToInt;\n    int sLen = s.length();\n    int numGroups = sLen / 4;\n    if (4 * numGroups != sLen)\n      throw new IllegalArgumentException(\n              \"String length must be a multiple of four.\");\n    int missingBytesInLastGroup = 0;\n    int numFullGroups = numGroups;\n    if (sLen != 0) {\n      if (s.charAt(sLen - 1) == '=') {\n        missingBytesInLastGroup++;\n        numFullGroups--;\n      }\n      if (s.charAt(sLen - 2) == '=')\n        missingBytesInLastGroup++;\n    }\n    byte[] result = new byte[3 * numGroups - missingBytesInLastGroup];\n\n    // Translate all full groups from base64 to byte array elements\n    int inCursor = 0, outCursor = 0;\n    for (int i = 0; i < numFullGroups; i++) {\n      int ch0 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch1 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch2 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch3 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      result[outCursor++] = (byte) ((ch0 << 2) | (ch1 >> 4));\n      result[outCursor++] = (byte) ((ch1 << 4) | (ch2 >> 2));\n      result[outCursor++] = (byte) ((ch2 << 6) | ch3);\n    }\n\n    // Translate partial group, if present\n    if (missingBytesInLastGroup != 0) {\n      int ch0 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch1 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      result[outCursor++] = (byte) ((ch0 << 2) | (ch1 >> 4));\n\n      if (missingBytesInLastGroup == 1) {\n        int ch2 = base64toInt(s.charAt(inCursor++), alphaToInt);\n        result[outCursor++] = (byte) ((ch1 << 4) | (ch2 >> 2));\n      }\n    }\n    // assert inCursor == s.length()-missingBytesInLastGroup;\n    // assert outCursor == result.length;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Base64#base64ToByteArray(String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/Base64#base64ToByteArray(String).mjava","sourceNew":"  public static byte[] base64ToByteArray(String s) {\n    byte[] alphaToInt = base64ToInt;\n    int sLen = s.length();\n    int numGroups = sLen / 4;\n    if (4 * numGroups != sLen)\n      throw new IllegalArgumentException(\n              \"String length must be a multiple of four.\");\n    int missingBytesInLastGroup = 0;\n    int numFullGroups = numGroups;\n    if (sLen != 0) {\n      if (s.charAt(sLen - 1) == '=') {\n        missingBytesInLastGroup++;\n        numFullGroups--;\n      }\n      if (s.charAt(sLen - 2) == '=')\n        missingBytesInLastGroup++;\n    }\n    byte[] result = new byte[3 * numGroups - missingBytesInLastGroup];\n\n    // Translate all full groups from base64 to byte array elements\n    int inCursor = 0, outCursor = 0;\n    for (int i = 0; i < numFullGroups; i++) {\n      int ch0 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch1 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch2 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch3 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      result[outCursor++] = (byte) ((ch0 << 2) | (ch1 >> 4));\n      result[outCursor++] = (byte) ((ch1 << 4) | (ch2 >> 2));\n      result[outCursor++] = (byte) ((ch2 << 6) | ch3);\n    }\n\n    // Translate partial group, if present\n    if (missingBytesInLastGroup != 0) {\n      int ch0 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch1 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      result[outCursor++] = (byte) ((ch0 << 2) | (ch1 >> 4));\n\n      if (missingBytesInLastGroup == 1) {\n        int ch2 = base64toInt(s.charAt(inCursor++), alphaToInt);\n        result[outCursor++] = (byte) ((ch1 << 4) | (ch2 >> 2));\n      }\n    }\n    // assert inCursor == s.length()-missingBytesInLastGroup;\n    // assert outCursor == result.length;\n    return result;\n  }\n\n","sourceOld":"  public static byte[] base64ToByteArray(String s) {\n    byte[] alphaToInt = base64ToInt;\n    int sLen = s.length();\n    int numGroups = sLen / 4;\n    if (4 * numGroups != sLen)\n      throw new IllegalArgumentException(\n              \"String length must be a multiple of four.\");\n    int missingBytesInLastGroup = 0;\n    int numFullGroups = numGroups;\n    if (sLen != 0) {\n      if (s.charAt(sLen - 1) == '=') {\n        missingBytesInLastGroup++;\n        numFullGroups--;\n      }\n      if (s.charAt(sLen - 2) == '=')\n        missingBytesInLastGroup++;\n    }\n    byte[] result = new byte[3 * numGroups - missingBytesInLastGroup];\n\n    // Translate all full groups from base64 to byte array elements\n    int inCursor = 0, outCursor = 0;\n    for (int i = 0; i < numFullGroups; i++) {\n      int ch0 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch1 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch2 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch3 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      result[outCursor++] = (byte) ((ch0 << 2) | (ch1 >> 4));\n      result[outCursor++] = (byte) ((ch1 << 4) | (ch2 >> 2));\n      result[outCursor++] = (byte) ((ch2 << 6) | ch3);\n    }\n\n    // Translate partial group, if present\n    if (missingBytesInLastGroup != 0) {\n      int ch0 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch1 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      result[outCursor++] = (byte) ((ch0 << 2) | (ch1 >> 4));\n\n      if (missingBytesInLastGroup == 1) {\n        int ch2 = base64toInt(s.charAt(inCursor++), alphaToInt);\n        result[outCursor++] = (byte) ((ch1 << 4) | (ch2 >> 2));\n      }\n    }\n    // assert inCursor == s.length()-missingBytesInLastGroup;\n    // assert outCursor == result.length;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Base64#base64ToByteArray(String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/Base64#base64ToByteArray(String).mjava","sourceNew":"  public static byte[] base64ToByteArray(String s) {\n    byte[] alphaToInt = base64ToInt;\n    int sLen = s.length();\n    int numGroups = sLen / 4;\n    if (4 * numGroups != sLen)\n      throw new IllegalArgumentException(\n              \"String length must be a multiple of four.\");\n    int missingBytesInLastGroup = 0;\n    int numFullGroups = numGroups;\n    if (sLen != 0) {\n      if (s.charAt(sLen - 1) == '=') {\n        missingBytesInLastGroup++;\n        numFullGroups--;\n      }\n      if (s.charAt(sLen - 2) == '=')\n        missingBytesInLastGroup++;\n    }\n    byte[] result = new byte[3 * numGroups - missingBytesInLastGroup];\n\n    // Translate all full groups from base64 to byte array elements\n    int inCursor = 0, outCursor = 0;\n    for (int i = 0; i < numFullGroups; i++) {\n      int ch0 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch1 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch2 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch3 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      result[outCursor++] = (byte) ((ch0 << 2) | (ch1 >> 4));\n      result[outCursor++] = (byte) ((ch1 << 4) | (ch2 >> 2));\n      result[outCursor++] = (byte) ((ch2 << 6) | ch3);\n    }\n\n    // Translate partial group, if present\n    if (missingBytesInLastGroup != 0) {\n      int ch0 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch1 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      result[outCursor++] = (byte) ((ch0 << 2) | (ch1 >> 4));\n\n      if (missingBytesInLastGroup == 1) {\n        int ch2 = base64toInt(s.charAt(inCursor++), alphaToInt);\n        result[outCursor++] = (byte) ((ch1 << 4) | (ch2 >> 2));\n      }\n    }\n    // assert inCursor == s.length()-missingBytesInLastGroup;\n    // assert outCursor == result.length;\n    return result;\n  }\n\n","sourceOld":"  public static byte[] base64ToByteArray(String s) {\n    byte[] alphaToInt = base64ToInt;\n    int sLen = s.length();\n    int numGroups = sLen / 4;\n    if (4 * numGroups != sLen)\n      throw new IllegalArgumentException(\n              \"String length must be a multiple of four.\");\n    int missingBytesInLastGroup = 0;\n    int numFullGroups = numGroups;\n    if (sLen != 0) {\n      if (s.charAt(sLen - 1) == '=') {\n        missingBytesInLastGroup++;\n        numFullGroups--;\n      }\n      if (s.charAt(sLen - 2) == '=')\n        missingBytesInLastGroup++;\n    }\n    byte[] result = new byte[3 * numGroups - missingBytesInLastGroup];\n\n    // Translate all full groups from base64 to byte array elements\n    int inCursor = 0, outCursor = 0;\n    for (int i = 0; i < numFullGroups; i++) {\n      int ch0 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch1 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch2 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch3 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      result[outCursor++] = (byte) ((ch0 << 2) | (ch1 >> 4));\n      result[outCursor++] = (byte) ((ch1 << 4) | (ch2 >> 2));\n      result[outCursor++] = (byte) ((ch2 << 6) | ch3);\n    }\n\n    // Translate partial group, if present\n    if (missingBytesInLastGroup != 0) {\n      int ch0 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch1 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      result[outCursor++] = (byte) ((ch0 << 2) | (ch1 >> 4));\n\n      if (missingBytesInLastGroup == 1) {\n        int ch2 = base64toInt(s.charAt(inCursor++), alphaToInt);\n        result[outCursor++] = (byte) ((ch1 << 4) | (ch2 >> 2));\n      }\n    }\n    // assert inCursor == s.length()-missingBytesInLastGroup;\n    // assert outCursor == result.length;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}