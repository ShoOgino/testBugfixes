{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","sourceNew":"  public void testFieldCacheRangeFilterShorts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Short minIdO = Short.valueOf((short) minId);\n    Short maxIdO = Short.valueOf((short) maxId);\n    Short medIdO = Short.valueOf((short) medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n    FieldCacheRangeFilter fcrf;\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertTrue(fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",Short.valueOf(Short.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,Short.valueOf(Short.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","sourceOld":"  public void testFieldCacheRangeFilterShorts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Short minIdO = Short.valueOf((short) minId);\n    Short maxIdO = Short.valueOf((short) maxId);\n    Short medIdO = Short.valueOf((short) medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n    FieldCacheRangeFilter fcrf;\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertTrue(fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",Short.valueOf(Short.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,Short.valueOf(Short.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c","date":1270671893,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","sourceNew":"  public void testFieldCacheRangeFilterShorts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Short minIdO = Short.valueOf((short) minId);\n    Short maxIdO = Short.valueOf((short) maxId);\n    Short medIdO = Short.valueOf((short) medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",Short.valueOf(Short.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,Short.valueOf(Short.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","sourceOld":"  public void testFieldCacheRangeFilterShorts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Short minIdO = Short.valueOf((short) minId);\n    Short maxIdO = Short.valueOf((short) maxId);\n    Short medIdO = Short.valueOf((short) medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n    FieldCacheRangeFilter fcrf;\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertTrue(fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",Short.valueOf(Short.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,Short.valueOf(Short.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","bugFix":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","sourceNew":null,"sourceOld":"  public void testFieldCacheRangeFilterShorts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Short minIdO = Short.valueOf((short) minId);\n    Short maxIdO = Short.valueOf((short) maxId);\n    Short medIdO = Short.valueOf((short) medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",Short.valueOf(Short.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,Short.valueOf(Short.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}