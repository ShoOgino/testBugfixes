{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/sharedterms/STUniformSplitTermsWriter#merge(MergeState,NormsProducer).mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/sharedterms/STUniformSplitTermsWriter#merge(MergeState,NormsProducer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void merge(MergeState mergeState, NormsProducer normsProducer) throws IOException {\n    if (mergeState.needsIndexSort) {\n      // This custom merging does not support sorted index.\n      // Fall back to the default merge, which is inefficient for this postings format.\n      super.merge(mergeState, normsProducer);\n      return;\n    }\n    FieldsProducer[] fieldsProducers = mergeState.fieldsProducers;\n    List<TermIterator<SegmentTerms>> segmentTermsList = new ArrayList<>(fieldsProducers.length);\n    for (int segmentIndex = 0; segmentIndex < fieldsProducers.length; segmentIndex++) {\n      FieldsProducer fieldsProducer = fieldsProducers[segmentIndex];\n      // Iterate the FieldInfo provided by mergeState.fieldInfos because they may be\n      // filtered by PerFieldMergeState.\n      for (FieldInfo fieldInfo : mergeState.fieldInfos[segmentIndex]) {\n        // Iterate all fields only the get the *first* Terms instanceof STUniformSplitTerms.\n        // See the break below.\n        Terms terms = fieldsProducer.terms(fieldInfo.name);\n        if (terms != null) {\n          if (!(terms instanceof STUniformSplitTerms)) {\n            // Terms is not directly an instance of STUniformSplitTerms, it is wrapped/filtered.\n            // Fall back to the default merge, which is inefficient for this postings format.\n            super.merge(mergeState, normsProducer);\n            return;\n          }\n          STUniformSplitTerms sharedTerms = (STUniformSplitTerms) terms;\n          segmentTermsList.add(new SegmentTerms(\n              segmentIndex, sharedTerms.createMergingBlockReader(), mergeState.docMaps[segmentIndex]));\n          // We have the STUniformSplitTerms for the segment. Break the field\n          // loop to iterate the next segment.\n          break;\n        }\n      }\n    }\n    writeSegment((blockWriter, dictionaryBuilder) -> mergeSegments(mergeState, normsProducer, segmentTermsList, blockWriter, dictionaryBuilder));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}