{"path":"lucene/sandbox/src/java/org/apache/lucene/search/BM25FQuery.BM25FWeight#BM25FWeight(Query,IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"15c07295375e0ec8be1c0ec46de21292455b3af8","date":1542792270,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/BM25FQuery.BM25FWeight#BM25FWeight(Query,IndexSearcher,ScoreMode,float).mjava","pathOld":"/dev/null","sourceNew":"    BM25FWeight(Query query, IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      super(query);\n      assert scoreMode.needsScores();\n      this.searcher = searcher;\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termStates = new TermStates[fieldTerms.length];\n      for (int i = 0; i < termStates.length; i++) {\n        FieldAndWeight field = fieldAndWeights.get(fieldTerms[i].field());\n        termStates[i] = TermStates.build(searcher.getTopReaderContext(), fieldTerms[i], true);\n        TermStatistics termStats = searcher.termStatistics(fieldTerms[i], termStates[i]);\n        if (termStats != null) {\n          docFreq = Math.max(termStats.docFreq(), docFreq);\n          totalTermFreq += (double) field.weight * termStats.totalTermFreq();\n        }\n      }\n      if (docFreq > 0) {\n        CollectionStatistics pseudoCollectionStats = mergeCollectionStatistics(searcher);\n        TermStatistics pseudoTermStatistics = new TermStatistics(new BytesRef(\"pseudo_term\"), docFreq, Math.max(1, totalTermFreq));\n        this.simWeight = similarity.scorer(boost, pseudoCollectionStats, pseudoTermStatistics);\n      } else {\n        this.simWeight = null;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19238c4860c45945f1b1e39032e056ce9e266152","date":1568753304,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/BM25FQuery.BM25FWeight#BM25FWeight(Query,IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/BM25FQuery.BM25FWeight#BM25FWeight(Query,IndexSearcher,ScoreMode,float).mjava","sourceNew":"    BM25FWeight(Query query, IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      super(query);\n      assert scoreMode.needsScores();\n      this.searcher = searcher;\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termStates = new TermStates[fieldTerms.length];\n      for (int i = 0; i < termStates.length; i++) {\n        FieldAndWeight field = fieldAndWeights.get(fieldTerms[i].field());\n        TermStates ts = TermStates.build(searcher.getTopReaderContext(), fieldTerms[i], true);\n        termStates[i] = ts;\n        if (ts.docFreq() > 0) {\n          TermStatistics termStats = searcher.termStatistics(fieldTerms[i], ts.docFreq(), ts.totalTermFreq());\n          docFreq = Math.max(termStats.docFreq(), docFreq);\n          totalTermFreq += (double) field.weight * termStats.totalTermFreq();\n        }\n      }\n      if (docFreq > 0) {\n        CollectionStatistics pseudoCollectionStats = mergeCollectionStatistics(searcher);\n        TermStatistics pseudoTermStatistics = new TermStatistics(new BytesRef(\"pseudo_term\"), docFreq, Math.max(1, totalTermFreq));\n        this.simWeight = similarity.scorer(boost, pseudoCollectionStats, pseudoTermStatistics);\n      } else {\n        this.simWeight = null;\n      }\n    }\n\n","sourceOld":"    BM25FWeight(Query query, IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      super(query);\n      assert scoreMode.needsScores();\n      this.searcher = searcher;\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termStates = new TermStates[fieldTerms.length];\n      for (int i = 0; i < termStates.length; i++) {\n        FieldAndWeight field = fieldAndWeights.get(fieldTerms[i].field());\n        termStates[i] = TermStates.build(searcher.getTopReaderContext(), fieldTerms[i], true);\n        TermStatistics termStats = searcher.termStatistics(fieldTerms[i], termStates[i]);\n        if (termStats != null) {\n          docFreq = Math.max(termStats.docFreq(), docFreq);\n          totalTermFreq += (double) field.weight * termStats.totalTermFreq();\n        }\n      }\n      if (docFreq > 0) {\n        CollectionStatistics pseudoCollectionStats = mergeCollectionStatistics(searcher);\n        TermStatistics pseudoTermStatistics = new TermStatistics(new BytesRef(\"pseudo_term\"), docFreq, Math.max(1, totalTermFreq));\n        this.simWeight = similarity.scorer(boost, pseudoCollectionStats, pseudoTermStatistics);\n      } else {\n        this.simWeight = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19238c4860c45945f1b1e39032e056ce9e266152":["15c07295375e0ec8be1c0ec46de21292455b3af8"],"15c07295375e0ec8be1c0ec46de21292455b3af8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19238c4860c45945f1b1e39032e056ce9e266152"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15c07295375e0ec8be1c0ec46de21292455b3af8"],"19238c4860c45945f1b1e39032e056ce9e266152":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15c07295375e0ec8be1c0ec46de21292455b3af8":["19238c4860c45945f1b1e39032e056ce9e266152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}