{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexOptions#doTestChangeIndexOptionsAddIndexesCodecReader(IndexOptions,IndexOptions).mjava","commits":[{"id":"165c905a42bedc7c7d1acb37b177498306b7e866","date":1518704038,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexOptions#doTestChangeIndexOptionsAddIndexesCodecReader(IndexOptions,IndexOptions).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestChangeIndexOptionsAddIndexesCodecReader(IndexOptions from, IndexOptions to) throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriter w1 = new IndexWriter(dir1, newIndexWriterConfig());\n    FieldType ft1 = new FieldType(TextField.TYPE_STORED);\n    ft1.setIndexOptions(from);\n    w1.addDocument(Collections.singleton(new Field(\"foo\", \"bar\", ft1)));\n\n    Directory dir2 = newDirectory();\n    IndexWriter w2 = new IndexWriter(dir2, newIndexWriterConfig());\n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setIndexOptions(to);\n    w2.addDocument(Collections.singleton(new Field(\"foo\", \"bar\", ft2)));\n\n    try (CodecReader cr = (CodecReader) getOnlyLeafReader(DirectoryReader.open(w2))) {\n      if (from == IndexOptions.NONE || to == IndexOptions.NONE || from == to) {\n        w1.addIndexes(cr); // no exception\n        w1.forceMerge(1);\n        try (LeafReader r = getOnlyLeafReader(DirectoryReader.open(w1))) {\n          IndexOptions expected = from == IndexOptions.NONE ? to : from;\n          assertEquals(expected, r.getFieldInfos().fieldInfo(\"foo\").getIndexOptions());\n        }\n      } else {\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n            () -> w1.addIndexes(cr));\n        assertEquals(\"cannot change field \\\"foo\\\" from index options=\" + from +\n            \" to inconsistent index options=\" + to, e.getMessage());\n      }\n    }\n\n    IOUtils.close(w1, w2, dir1, dir2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"165c905a42bedc7c7d1acb37b177498306b7e866":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["165c905a42bedc7c7d1acb37b177498306b7e866"]},"commit2Childs":{"165c905a42bedc7c7d1acb37b177498306b7e866":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["165c905a42bedc7c7d1acb37b177498306b7e866"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}