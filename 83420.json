{"path":"solr/core/src/test/org/apache/solr/cloud/AsyncCallRequestStatusResponseTest#testAsyncCallStatusResponse().mjava","commits":[{"id":"b34744cdee27b92844fd3b14211ae16ea1d50413","date":1434566770,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AsyncCallRequestStatusResponseTest#testAsyncCallStatusResponse().mjava","pathOld":"/dev/null","sourceNew":"  @ShardsFixed(num = 2)\n  @Test\n  public void testAsyncCallStatusResponse() throws Exception {\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    create.setCollectionName(\"asynccall\");\n    create.setNumShards(2);\n    create.setAsyncId(\"1000\");\n    create.setConfigName(\"conf1\");\n    create.process(cloudClient);\n    waitForCollection(cloudClient.getZkStateReader(), \"asynccall\", 2);\n    String state = getRequestStateAfterCompletion(\"1000\", 30, cloudClient);\n    assertTrue(state.equals(\"completed\"));\n    CollectionAdminRequest.RequestStatus requestStatus = new CollectionAdminRequest.RequestStatus();\n    requestStatus.setRequestId(\"1000\");\n    CollectionAdminResponse rsp = requestStatus.process(cloudClient);\n    NamedList r = rsp.getResponse();\n    // Check that there's more response than the hardcoded status and states\n    assertEquals(\"Assertion Failure\" + r.toString(), 5, r.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ab6131420a270c49b653c969cc1dbbaf7d1b36e7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3088cdaa24ffe3ef44713ac9484114bd56eca2af","date":1453441194,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AsyncCallRequestStatusResponseTest#testAsyncCallStatusResponse().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AsyncCallRequestStatusResponseTest#testAsyncCallStatusResponse().mjava","sourceNew":"  @ShardsFixed(num = 2)\n  @Test\n  public void testAsyncCallStatusResponse() throws Exception {\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    create.setCollectionName(\"asynccall\");\n    create.setNumShards(2);\n    create.setAsyncId(\"1000\");\n    create.setConfigName(\"conf1\");\n    create.process(cloudClient);\n    waitForCollection(cloudClient.getZkStateReader(), \"asynccall\", 2);\n    final RequestStatusState state = getRequestStateAfterCompletion(\"1000\", 30, cloudClient);\n    assertSame(RequestStatusState.COMPLETED, state);\n    CollectionAdminRequest.RequestStatus requestStatus = new CollectionAdminRequest.RequestStatus();\n    requestStatus.setRequestId(\"1000\");\n    CollectionAdminResponse rsp = requestStatus.process(cloudClient);\n    NamedList<?> r = rsp.getResponse();\n    // Check that there's more response than the hardcoded status and states\n    assertEquals(\"Assertion Failure\" + r.toString(), 5, r.size());\n  }\n\n","sourceOld":"  @ShardsFixed(num = 2)\n  @Test\n  public void testAsyncCallStatusResponse() throws Exception {\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    create.setCollectionName(\"asynccall\");\n    create.setNumShards(2);\n    create.setAsyncId(\"1000\");\n    create.setConfigName(\"conf1\");\n    create.process(cloudClient);\n    waitForCollection(cloudClient.getZkStateReader(), \"asynccall\", 2);\n    String state = getRequestStateAfterCompletion(\"1000\", 30, cloudClient);\n    assertTrue(state.equals(\"completed\"));\n    CollectionAdminRequest.RequestStatus requestStatus = new CollectionAdminRequest.RequestStatus();\n    requestStatus.setRequestId(\"1000\");\n    CollectionAdminResponse rsp = requestStatus.process(cloudClient);\n    NamedList r = rsp.getResponse();\n    // Check that there's more response than the hardcoded status and states\n    assertEquals(\"Assertion Failure\" + r.toString(), 5, r.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0b734049423191fc1079a874b216c07ad0722a0","date":1454966146,"type":3,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AsyncCallRequestStatusResponseTest#testAsyncCallStatusResponse().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AsyncCallRequestStatusResponseTest#testAsyncCallStatusResponse().mjava","sourceNew":"  @ShardsFixed(num = 2)\n  @Test\n  public void testAsyncCallStatusResponse() throws Exception {\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    create.setCollectionName(\"asynccall\")\n        .setNumShards(2)\n        .setAsyncId(\"1000\")\n        .setConfigName(\"conf1\")\n        .process(cloudClient);\n    waitForCollection(cloudClient.getZkStateReader(), \"asynccall\", 2);\n    final RequestStatusState state = getRequestStateAfterCompletion(\"1000\", 30, cloudClient);\n    assertSame(RequestStatusState.COMPLETED, state);\n    CollectionAdminRequest.RequestStatus requestStatus = new CollectionAdminRequest.RequestStatus();\n    requestStatus.setRequestId(\"1000\");\n    CollectionAdminResponse rsp = requestStatus.process(cloudClient);\n    NamedList<?> r = rsp.getResponse();\n    // Check that there's more response than the hardcoded status and states\n    assertEquals(\"Assertion Failure\" + r.toString(), 5, r.size());\n  }\n\n","sourceOld":"  @ShardsFixed(num = 2)\n  @Test\n  public void testAsyncCallStatusResponse() throws Exception {\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    create.setCollectionName(\"asynccall\");\n    create.setNumShards(2);\n    create.setAsyncId(\"1000\");\n    create.setConfigName(\"conf1\");\n    create.process(cloudClient);\n    waitForCollection(cloudClient.getZkStateReader(), \"asynccall\", 2);\n    final RequestStatusState state = getRequestStateAfterCompletion(\"1000\", 30, cloudClient);\n    assertSame(RequestStatusState.COMPLETED, state);\n    CollectionAdminRequest.RequestStatus requestStatus = new CollectionAdminRequest.RequestStatus();\n    requestStatus.setRequestId(\"1000\");\n    CollectionAdminResponse rsp = requestStatus.process(cloudClient);\n    NamedList<?> r = rsp.getResponse();\n    // Check that there's more response than the hardcoded status and states\n    assertEquals(\"Assertion Failure\" + r.toString(), 5, r.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a02c54923e5f4de08097fa9028e09e8cf5caa82","date":1475573567,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AsyncCallRequestStatusResponseTest#testAsyncCallStatusResponse().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AsyncCallRequestStatusResponseTest#testAsyncCallStatusResponse().mjava","sourceNew":"  @Test\n  public void testAsyncCallStatusResponse() throws Exception {\n\n    String asyncId =\n        CollectionAdminRequest.createCollection(\"asynccall\", \"conf\", 2, 1).processAsync(cluster.getSolrClient());\n\n    waitForState(\"Expected collection 'asynccall' to have 2 shards and 1 replica\", \"asynccall\", clusterShape(2, 1));\n\n    int tries = 0;\n    while (true) {\n      final RequestStatusState state\n          = CollectionAdminRequest.requestStatus(asyncId).process(cluster.getSolrClient()).getRequestStatus();\n      if (state == RequestStatusState.COMPLETED)\n        break;\n      if (tries++ > 10)\n        fail(\"Expected to see RequestStatusState.COMPLETED but was \" + state.toString());\n      TimeUnit.SECONDS.sleep(1);\n    }\n\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    CollectionAdminResponse rsp = requestStatus.process(cluster.getSolrClient());\n    NamedList<?> r = rsp.getResponse();\n    // Check that there's more response than the hardcoded status and states\n    assertEquals(\"Assertion Failure\" + r.toString(), 5, r.size());\n  }\n\n","sourceOld":"  @ShardsFixed(num = 2)\n  @Test\n  public void testAsyncCallStatusResponse() throws Exception {\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    create.setCollectionName(\"asynccall\")\n        .setNumShards(2)\n        .setAsyncId(\"1000\")\n        .setConfigName(\"conf1\")\n        .process(cloudClient);\n    waitForCollection(cloudClient.getZkStateReader(), \"asynccall\", 2);\n    final RequestStatusState state = getRequestStateAfterCompletion(\"1000\", 30, cloudClient);\n    assertSame(RequestStatusState.COMPLETED, state);\n    CollectionAdminRequest.RequestStatus requestStatus = new CollectionAdminRequest.RequestStatus();\n    requestStatus.setRequestId(\"1000\");\n    CollectionAdminResponse rsp = requestStatus.process(cloudClient);\n    NamedList<?> r = rsp.getResponse();\n    // Check that there's more response than the hardcoded status and states\n    assertEquals(\"Assertion Failure\" + r.toString(), 5, r.size());\n  }\n\n","bugFix":null,"bugIntro":["ab6131420a270c49b653c969cc1dbbaf7d1b36e7","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AsyncCallRequestStatusResponseTest#testAsyncCallStatusResponse().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AsyncCallRequestStatusResponseTest#testAsyncCallStatusResponse().mjava","sourceNew":"  @Test\n  public void testAsyncCallStatusResponse() throws Exception {\n\n    String asyncId =\n        CollectionAdminRequest.createCollection(\"asynccall\", \"conf\", 2, 1).processAsync(cluster.getSolrClient());\n\n    waitForState(\"Expected collection 'asynccall' to have 2 shards and 1 replica\", \"asynccall\", clusterShape(2, 1));\n\n    int tries = 0;\n    while (true) {\n      final RequestStatusState state\n          = CollectionAdminRequest.requestStatus(asyncId).process(cluster.getSolrClient()).getRequestStatus();\n      if (state == RequestStatusState.COMPLETED)\n        break;\n      if (tries++ > 10)\n        fail(\"Expected to see RequestStatusState.COMPLETED but was \" + state.toString());\n      TimeUnit.SECONDS.sleep(1);\n    }\n\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    CollectionAdminResponse rsp = requestStatus.process(cluster.getSolrClient());\n    NamedList<?> r = rsp.getResponse();\n    // Check that there's more response than the hardcoded status and states\n    assertEquals(\"Assertion Failure\" + r.toString(), 5, r.size());\n  }\n\n","sourceOld":"  @ShardsFixed(num = 2)\n  @Test\n  public void testAsyncCallStatusResponse() throws Exception {\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    create.setCollectionName(\"asynccall\")\n        .setNumShards(2)\n        .setAsyncId(\"1000\")\n        .setConfigName(\"conf1\")\n        .process(cloudClient);\n    waitForCollection(cloudClient.getZkStateReader(), \"asynccall\", 2);\n    final RequestStatusState state = getRequestStateAfterCompletion(\"1000\", 30, cloudClient);\n    assertSame(RequestStatusState.COMPLETED, state);\n    CollectionAdminRequest.RequestStatus requestStatus = new CollectionAdminRequest.RequestStatus();\n    requestStatus.setRequestId(\"1000\");\n    CollectionAdminResponse rsp = requestStatus.process(cloudClient);\n    NamedList<?> r = rsp.getResponse();\n    // Check that there's more response than the hardcoded status and states\n    assertEquals(\"Assertion Failure\" + r.toString(), 5, r.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AsyncCallRequestStatusResponseTest#testAsyncCallStatusResponse().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AsyncCallRequestStatusResponseTest#testAsyncCallStatusResponse().mjava","sourceNew":"  @Test\n  public void testAsyncCallStatusResponse() throws Exception {\n\n    String asyncId =\n        CollectionAdminRequest.createCollection(\"asynccall\", \"conf\", 2, 1).processAsync(cluster.getSolrClient());\n\n    waitForState(\"Expected collection 'asynccall' to have 2 shards and 1 replica\", \"asynccall\", clusterShape(2, 1));\n\n    int tries = 0;\n    while (true) {\n      final RequestStatusState state\n          = CollectionAdminRequest.requestStatus(asyncId).process(cluster.getSolrClient()).getRequestStatus();\n      if (state == RequestStatusState.COMPLETED)\n        break;\n      if (tries++ > 10)\n        fail(\"Expected to see RequestStatusState.COMPLETED but was \" + state.toString());\n      TimeUnit.SECONDS.sleep(1);\n    }\n\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    CollectionAdminResponse rsp = requestStatus.process(cluster.getSolrClient());\n    NamedList<?> r = rsp.getResponse();\n    // Check that there's more response than the hardcoded status and states\n    assertEquals(\"Assertion Failure\" + r.toString(), 5, r.size());\n  }\n\n","sourceOld":"  @ShardsFixed(num = 2)\n  @Test\n  public void testAsyncCallStatusResponse() throws Exception {\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    create.setCollectionName(\"asynccall\")\n        .setNumShards(2)\n        .setAsyncId(\"1000\")\n        .setConfigName(\"conf1\")\n        .process(cloudClient);\n    waitForCollection(cloudClient.getZkStateReader(), \"asynccall\", 2);\n    final RequestStatusState state = getRequestStateAfterCompletion(\"1000\", 30, cloudClient);\n    assertSame(RequestStatusState.COMPLETED, state);\n    CollectionAdminRequest.RequestStatus requestStatus = new CollectionAdminRequest.RequestStatus();\n    requestStatus.setRequestId(\"1000\");\n    CollectionAdminResponse rsp = requestStatus.process(cloudClient);\n    NamedList<?> r = rsp.getResponse();\n    // Check that there's more response than the hardcoded status and states\n    assertEquals(\"Assertion Failure\" + r.toString(), 5, r.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AsyncCallRequestStatusResponseTest#testAsyncCallStatusResponse().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AsyncCallRequestStatusResponseTest#testAsyncCallStatusResponse().mjava","sourceNew":"  @Test\n  public void testAsyncCallStatusResponse() throws Exception {\n\n    String asyncId =\n        CollectionAdminRequest.createCollection(\"asynccall\", \"conf\", 2, 1).processAsync(cluster.getSolrClient());\n\n    waitForState(\"Expected collection 'asynccall' to have 2 shards and 1 replica\", \"asynccall\", clusterShape(2, 2));\n\n    int tries = 0;\n    while (true) {\n      final RequestStatusState state\n          = CollectionAdminRequest.requestStatus(asyncId).process(cluster.getSolrClient()).getRequestStatus();\n      if (state == RequestStatusState.COMPLETED)\n        break;\n      if (tries++ > 10)\n        fail(\"Expected to see RequestStatusState.COMPLETED but was \" + state.toString());\n      TimeUnit.SECONDS.sleep(1);\n    }\n\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    CollectionAdminResponse rsp = requestStatus.process(cluster.getSolrClient());\n    NamedList<?> r = rsp.getResponse();\n    // Check that there's more response than the hardcoded status and states\n    assertEquals(\"Assertion Failure\" + r.toString(), 5, r.size());\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncCallStatusResponse() throws Exception {\n\n    String asyncId =\n        CollectionAdminRequest.createCollection(\"asynccall\", \"conf\", 2, 1).processAsync(cluster.getSolrClient());\n\n    waitForState(\"Expected collection 'asynccall' to have 2 shards and 1 replica\", \"asynccall\", clusterShape(2, 1));\n\n    int tries = 0;\n    while (true) {\n      final RequestStatusState state\n          = CollectionAdminRequest.requestStatus(asyncId).process(cluster.getSolrClient()).getRequestStatus();\n      if (state == RequestStatusState.COMPLETED)\n        break;\n      if (tries++ > 10)\n        fail(\"Expected to see RequestStatusState.COMPLETED but was \" + state.toString());\n      TimeUnit.SECONDS.sleep(1);\n    }\n\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    CollectionAdminResponse rsp = requestStatus.process(cluster.getSolrClient());\n    NamedList<?> r = rsp.getResponse();\n    // Check that there's more response than the hardcoded status and states\n    assertEquals(\"Assertion Failure\" + r.toString(), 5, r.size());\n  }\n\n","bugFix":["5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab6131420a270c49b653c969cc1dbbaf7d1b36e7","date":1550697886,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AsyncCallRequestStatusResponseTest#testAsyncCallStatusResponse().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AsyncCallRequestStatusResponseTest#testAsyncCallStatusResponse().mjava","sourceNew":"  @Test\n  public void testAsyncCallStatusResponse() throws Exception {\n\n    String asyncId =\n        CollectionAdminRequest.createCollection(\"asynccall\", \"conf\", 2, 1).processAsync(cluster.getSolrClient());\n\n    waitForState(\"Expected collection 'asynccall' to have 2 shards and 1 replica\", \"asynccall\", clusterShape(2, 2));\n\n    RequestStatusState state = AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId, 30, cluster.getSolrClient());\n    assertEquals(\"Unexpected request status: \" + state, \"completed\", state.getKey());\n\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    CollectionAdminResponse rsp = requestStatus.process(cluster.getSolrClient());\n    NamedList<?> r = rsp.getResponse();\n    if (OverseerCollectionMessageHandler.INCLUDE_TOP_LEVEL_RESPONSE) {\n      assertEquals(\"Expected 5 elements in the response\" + r, 5, r.size());\n    } else {\n      assertEquals(\"Expected 3 elements in the response\" + r, 3, r.size());\n    }\n    assertNotNull(\"Expected 'responseHeader' response\" + r, r.get(\"responseHeader\"));\n    assertNotNull(\"Expected 'success' response\" + r, r.get(\"success\"));\n    assertNotNull(\"Expected 'status' response\" + r, r.get(\"status\"));\n    assertEquals(\"Expected 4 elements in the success element\" + r.get(\"success\"), 4, ((NamedList<?>)r.get(\"success\")).size());\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncCallStatusResponse() throws Exception {\n\n    String asyncId =\n        CollectionAdminRequest.createCollection(\"asynccall\", \"conf\", 2, 1).processAsync(cluster.getSolrClient());\n\n    waitForState(\"Expected collection 'asynccall' to have 2 shards and 1 replica\", \"asynccall\", clusterShape(2, 2));\n\n    int tries = 0;\n    while (true) {\n      final RequestStatusState state\n          = CollectionAdminRequest.requestStatus(asyncId).process(cluster.getSolrClient()).getRequestStatus();\n      if (state == RequestStatusState.COMPLETED)\n        break;\n      if (tries++ > 10)\n        fail(\"Expected to see RequestStatusState.COMPLETED but was \" + state.toString());\n      TimeUnit.SECONDS.sleep(1);\n    }\n\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    CollectionAdminResponse rsp = requestStatus.process(cluster.getSolrClient());\n    NamedList<?> r = rsp.getResponse();\n    // Check that there's more response than the hardcoded status and states\n    assertEquals(\"Assertion Failure\" + r.toString(), 5, r.size());\n  }\n\n","bugFix":["5a02c54923e5f4de08097fa9028e09e8cf5caa82","b34744cdee27b92844fd3b14211ae16ea1d50413"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e6520a21709190413a63084ed135271aab1a7c","date":1556607462,"type":5,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AsyncCallRequestStatusResponseTest#testAsyncCallStatusResponse().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AsyncCallRequestStatusResponseTest#testAsyncCallStatusResponse().mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  @Test\n  public void testAsyncCallStatusResponse() throws Exception {\n    int numShards = 4;\n    int numReplicas = 1;\n    Create createCollection = CollectionAdminRequest.createCollection(\"asynccall\", \"conf\", numShards, numReplicas);\n    createCollection.setMaxShardsPerNode(100);\n    String asyncId =\n        createCollection.processAsync(cluster.getSolrClient());\n\n    waitForState(\"Expected collection 'asynccall' to have \"+numShards+\" shards and \"+\n        numShards*numReplicas+\" replica\", \"asynccall\", clusterShape(numShards, numShards*numReplicas));\n\n    RequestStatusState state = AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId, 30, cluster.getSolrClient());\n    assertEquals(\"Unexpected request status: \" + state, \"completed\", state.getKey());\n\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    CollectionAdminResponse rsp = requestStatus.process(cluster.getSolrClient());\n    NamedList<?> r = rsp.getResponse();\n    if (OverseerCollectionMessageHandler.INCLUDE_TOP_LEVEL_RESPONSE) {\n      final int actualNumOfElems = 3+(numShards*numReplicas);\n      // responseHeader, success, status, + old responses per every replica  \n      assertEquals(\"Expected \"+actualNumOfElems+\" elements in the response\" + r.jsonStr(),\n               actualNumOfElems, r.size());\n    } else {\n      // responseHeader, success, status\n      assertEquals(\"Expected 3 elements in the response\" + r.jsonStr(), 3, r.size());\n    }\n    assertNotNull(\"Expected 'responseHeader' response\" + r, r.get(\"responseHeader\"));\n    assertNotNull(\"Expected 'status' response\" + r, r.get(\"status\"));\n    {\n      final NamedList<?> success = (NamedList<?>)r.get(\"success\");\n      assertNotNull(\"Expected 'success' response\" + r, success);\n    \n      final int actualSuccessElems = 2*(numShards*numReplicas);\n      // every replica responds once on submit and once on complete\n      assertEquals(\"Expected \"+actualSuccessElems+\n        \" elements in the success element\" + success.jsonStr(), \n          actualSuccessElems, success.size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncCallStatusResponse() throws Exception {\n\n    String asyncId =\n        CollectionAdminRequest.createCollection(\"asynccall\", \"conf\", 2, 1).processAsync(cluster.getSolrClient());\n\n    waitForState(\"Expected collection 'asynccall' to have 2 shards and 1 replica\", \"asynccall\", clusterShape(2, 2));\n\n    RequestStatusState state = AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId, 30, cluster.getSolrClient());\n    assertEquals(\"Unexpected request status: \" + state, \"completed\", state.getKey());\n\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    CollectionAdminResponse rsp = requestStatus.process(cluster.getSolrClient());\n    NamedList<?> r = rsp.getResponse();\n    if (OverseerCollectionMessageHandler.INCLUDE_TOP_LEVEL_RESPONSE) {\n      assertEquals(\"Expected 5 elements in the response\" + r, 5, r.size());\n    } else {\n      assertEquals(\"Expected 3 elements in the response\" + r, 3, r.size());\n    }\n    assertNotNull(\"Expected 'responseHeader' response\" + r, r.get(\"responseHeader\"));\n    assertNotNull(\"Expected 'success' response\" + r, r.get(\"success\"));\n    assertNotNull(\"Expected 'status' response\" + r, r.get(\"status\"));\n    assertEquals(\"Expected 4 elements in the success element\" + r.get(\"success\"), 4, ((NamedList<?>)r.get(\"success\")).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab6131420a270c49b653c969cc1dbbaf7d1b36e7":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"3088cdaa24ffe3ef44713ac9484114bd56eca2af":["b34744cdee27b92844fd3b14211ae16ea1d50413"],"69e6520a21709190413a63084ed135271aab1a7c":["ab6131420a270c49b653c969cc1dbbaf7d1b36e7"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["e0b734049423191fc1079a874b216c07ad0722a0","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"b34744cdee27b92844fd3b14211ae16ea1d50413":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e0b734049423191fc1079a874b216c07ad0722a0":["3088cdaa24ffe3ef44713ac9484114bd56eca2af"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["e0b734049423191fc1079a874b216c07ad0722a0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["e0b734049423191fc1079a874b216c07ad0722a0","1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["69e6520a21709190413a63084ed135271aab1a7c"]},"commit2Childs":{"ab6131420a270c49b653c969cc1dbbaf7d1b36e7":["69e6520a21709190413a63084ed135271aab1a7c"],"3088cdaa24ffe3ef44713ac9484114bd56eca2af":["e0b734049423191fc1079a874b216c07ad0722a0"],"69e6520a21709190413a63084ed135271aab1a7c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["ab6131420a270c49b653c969cc1dbbaf7d1b36e7"],"b34744cdee27b92844fd3b14211ae16ea1d50413":["3088cdaa24ffe3ef44713ac9484114bd56eca2af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b34744cdee27b92844fd3b14211ae16ea1d50413"],"e0b734049423191fc1079a874b216c07ad0722a0":["1967bed916cc89da82a1c2085f27976da6d08cbd","5a02c54923e5f4de08097fa9028e09e8cf5caa82","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}