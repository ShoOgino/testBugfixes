{"path":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#longToPrefixCodedBytes(long,int,BytesRefBuilder).mjava","commits":[{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#longToPrefixCodedBytes(long,int,BytesRefBuilder).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#longToPrefixCodedBytes(long,int,BytesRef).mjava","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void longToPrefixCodedBytes(final long val, final int shift, final BytesRefBuilder bytes) {\n    if ((shift & ~0x3f) != 0)  // ensure shift is 0..63\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..63\");\n    int nChars = (((63-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.setLength(nChars+1);   // one extra for the byte that contains the shift info\n    bytes.grow(BUF_SIZE_LONG);\n    bytes.setByteAt(0, (byte)(SHIFT_START_LONG + shift));\n    long sortableBits = val ^ 0x8000000000000000L;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.setByteAt(nChars--, (byte)(sortableBits & 0x7f));\n      sortableBits >>>= 7;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void longToPrefixCodedBytes(final long val, final int shift, final BytesRef bytes) {\n    if ((shift & ~0x3f) != 0)  // ensure shift is 0..63\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..63\");\n    int nChars = (((63-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.offset = 0;\n    bytes.length = nChars+1;   // one extra for the byte that contains the shift info\n    if (bytes.bytes.length < bytes.length) {\n      bytes.bytes = new byte[NumericUtils.BUF_SIZE_LONG];  // use the max\n    }\n    bytes.bytes[0] = (byte)(SHIFT_START_LONG + shift);\n    long sortableBits = val ^ 0x8000000000000000L;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.bytes[nChars--] = (byte)(sortableBits & 0x7f);\n      sortableBits >>>= 7;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#longToPrefixCodedBytes(long,int,BytesRefBuilder).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#longToPrefixCodedBytes(long,int,BytesRefBuilder).mjava","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void longToPrefixCodedBytes(final long val, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 0..63\n    if ((shift & ~0x3f) != 0) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..63; got shift=\" + shift);\n    }\n    int nChars = (((63-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.setLength(nChars+1);   // one extra for the byte that contains the shift info\n    bytes.grow(BUF_SIZE_LONG);\n    bytes.setByteAt(0, (byte)(SHIFT_START_LONG + shift));\n    long sortableBits = val ^ 0x8000000000000000L;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.setByteAt(nChars--, (byte)(sortableBits & 0x7f));\n      sortableBits >>>= 7;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void longToPrefixCodedBytes(final long val, final int shift, final BytesRefBuilder bytes) {\n    if ((shift & ~0x3f) != 0)  // ensure shift is 0..63\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..63\");\n    int nChars = (((63-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.setLength(nChars+1);   // one extra for the byte that contains the shift info\n    bytes.grow(BUF_SIZE_LONG);\n    bytes.setByteAt(0, (byte)(SHIFT_START_LONG + shift));\n    long sortableBits = val ^ 0x8000000000000000L;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.setByteAt(nChars--, (byte)(sortableBits & 0x7f));\n      sortableBits >>>= 7;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#longToPrefixCodedBytes(long,int,BytesRefBuilder).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#longToPrefixCodedBytes(long,int,BytesRefBuilder).mjava","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void longToPrefixCodedBytes(final long val, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 0..63\n    if ((shift & ~0x3f) != 0) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..63; got shift=\" + shift);\n    }\n    int nChars = (((63-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.setLength(nChars+1);   // one extra for the byte that contains the shift info\n    bytes.grow(BUF_SIZE_LONG);\n    bytes.setByteAt(0, (byte)(SHIFT_START_LONG + shift));\n    long sortableBits = val ^ 0x8000000000000000L;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.setByteAt(nChars--, (byte)(sortableBits & 0x7f));\n      sortableBits >>>= 7;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void longToPrefixCodedBytes(final long val, final int shift, final BytesRefBuilder bytes) {\n    if ((shift & ~0x3f) != 0)  // ensure shift is 0..63\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..63\");\n    int nChars = (((63-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.setLength(nChars+1);   // one extra for the byte that contains the shift info\n    bytes.grow(BUF_SIZE_LONG);\n    bytes.setByteAt(0, (byte)(SHIFT_START_LONG + shift));\n    long sortableBits = val ^ 0x8000000000000000L;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.setByteAt(nChars--, (byte)(sortableBits & 0x7f));\n      sortableBits >>>= 7;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#longToPrefixCodedBytes(long,int,BytesRefBuilder).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#longToPrefixCodedBytes(long,int,BytesRefBuilder).mjava","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link org.apache.lucene.analysis.LegacyNumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void longToPrefixCodedBytes(final long val, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 0..63\n    if ((shift & ~0x3f) != 0) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..63; got shift=\" + shift);\n    }\n    int nChars = (((63-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.setLength(nChars+1);   // one extra for the byte that contains the shift info\n    bytes.grow(BUF_SIZE_LONG);\n    bytes.setByteAt(0, (byte)(SHIFT_START_LONG + shift));\n    long sortableBits = val ^ 0x8000000000000000L;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.setByteAt(nChars--, (byte)(sortableBits & 0x7f));\n      sortableBits >>>= 7;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void longToPrefixCodedBytes(final long val, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 0..63\n    if ((shift & ~0x3f) != 0) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..63; got shift=\" + shift);\n    }\n    int nChars = (((63-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.setLength(nChars+1);   // one extra for the byte that contains the shift info\n    bytes.grow(BUF_SIZE_LONG);\n    bytes.setByteAt(0, (byte)(SHIFT_START_LONG + shift));\n    long sortableBits = val ^ 0x8000000000000000L;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.setByteAt(nChars--, (byte)(sortableBits & 0x7f));\n      sortableBits >>>= 7;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","3184874f7f3aca850248483485b4995343066875"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"770342641f7b505eaa8dccdc666158bff2419109":["3184874f7f3aca850248483485b4995343066875"],"3184874f7f3aca850248483485b4995343066875":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","3184874f7f3aca850248483485b4995343066875"],"3184874f7f3aca850248483485b4995343066875":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}