{"path":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLocalityReporter#createStatistics(long,long,int,int).mjava","commits":[{"id":"1ce8283f367b946e5dd6300887294d7d115f2b9f","date":1433955116,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLocalityReporter#createStatistics(long,long,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Generate a statistics object based on the given measurements for all files monitored by this reporter.\n   * \n   * @param totalBytes\n   *          The total bytes used\n   * @param localBytes\n   *          The amount of bytes found on local nodes\n   * @param totalCount\n   *          The total block count\n   * @param localCount\n   *          The amount of blocks found on local nodes\n   * @return HDFS block locality statistics\n   */\n  private NamedList<Number> createStatistics(long totalBytes, long localBytes, int totalCount, int localCount) {\n    NamedList<Number> statistics = new SimpleOrderedMap<Number>();\n\n    statistics.add(LOCALITY_BYTES_TOTAL, totalBytes);\n    statistics.add(LOCALITY_BYTES_LOCAL, localBytes);\n    if (localBytes == 0) {\n      statistics.add(LOCALITY_BYTES_RATIO, 0);\n    } else {\n      statistics.add(LOCALITY_BYTES_RATIO, localBytes / (double) totalBytes);\n    }\n    statistics.add(LOCALITY_BLOCKS_TOTAL, totalCount);\n    statistics.add(LOCALITY_BLOCKS_LOCAL, localCount);\n    if (localCount == 0) {\n      statistics.add(LOCALITY_BLOCKS_RATIO, 0);\n    } else {\n      statistics.add(LOCALITY_BLOCKS_RATIO, localCount / (double) totalCount);\n    }\n\n    return statistics;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLocalityReporter#createStatistics(long,long,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Generate a statistics object based on the given measurements for all files monitored by this reporter.\n   * \n   * @param totalBytes\n   *          The total bytes used\n   * @param localBytes\n   *          The amount of bytes found on local nodes\n   * @param totalCount\n   *          The total block count\n   * @param localCount\n   *          The amount of blocks found on local nodes\n   * @return HDFS block locality statistics\n   */\n  private NamedList<Number> createStatistics(long totalBytes, long localBytes, int totalCount, int localCount) {\n    NamedList<Number> statistics = new SimpleOrderedMap<Number>();\n\n    statistics.add(LOCALITY_BYTES_TOTAL, totalBytes);\n    statistics.add(LOCALITY_BYTES_LOCAL, localBytes);\n    if (localBytes == 0) {\n      statistics.add(LOCALITY_BYTES_RATIO, 0);\n    } else {\n      statistics.add(LOCALITY_BYTES_RATIO, localBytes / (double) totalBytes);\n    }\n    statistics.add(LOCALITY_BLOCKS_TOTAL, totalCount);\n    statistics.add(LOCALITY_BLOCKS_LOCAL, localCount);\n    if (localCount == 0) {\n      statistics.add(LOCALITY_BLOCKS_RATIO, 0);\n    } else {\n      statistics.add(LOCALITY_BLOCKS_RATIO, localCount / (double) totalCount);\n    }\n\n    return statistics;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLocalityReporter#createStatistics(long,long,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Generate a statistics object based on the given measurements for all files monitored by this reporter.\n   * \n   * @param totalBytes\n   *          The total bytes used\n   * @param localBytes\n   *          The amount of bytes found on local nodes\n   * @param totalCount\n   *          The total block count\n   * @param localCount\n   *          The amount of blocks found on local nodes\n   * @return HDFS block locality statistics\n   */\n  private NamedList<Number> createStatistics(long totalBytes, long localBytes, int totalCount, int localCount) {\n    NamedList<Number> statistics = new SimpleOrderedMap<Number>();\n\n    statistics.add(LOCALITY_BYTES_TOTAL, totalBytes);\n    statistics.add(LOCALITY_BYTES_LOCAL, localBytes);\n    if (localBytes == 0) {\n      statistics.add(LOCALITY_BYTES_RATIO, 0);\n    } else {\n      statistics.add(LOCALITY_BYTES_RATIO, localBytes / (double) totalBytes);\n    }\n    statistics.add(LOCALITY_BLOCKS_TOTAL, totalCount);\n    statistics.add(LOCALITY_BLOCKS_LOCAL, localCount);\n    if (localCount == 0) {\n      statistics.add(LOCALITY_BLOCKS_RATIO, 0);\n    } else {\n      statistics.add(LOCALITY_BLOCKS_RATIO, localCount / (double) totalCount);\n    }\n\n    return statistics;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["1ce8283f367b946e5dd6300887294d7d115f2b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ce8283f367b946e5dd6300887294d7d115f2b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"816521ebaad5add9cb96bb88c577394e2938c40b":["1ce8283f367b946e5dd6300887294d7d115f2b9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ce8283f367b946e5dd6300887294d7d115f2b9f"],"1ce8283f367b946e5dd6300887294d7d115f2b9f":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}