{"path":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,float,TokenStream,String).mjava","commits":[{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,float,TokenStream,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","sourceNew":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException If there is a low-level I/O error\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, float boost, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = fieldName;\n    } else {\n      this.fieldName = null;\n    }\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, boost, terms);\n    } finally {\n      IOUtils.close(internalReader);\n    }\n\n    return terms;\n  }\n\n","sourceOld":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException If there is a low-level I/O error\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = fieldName;\n    } else {\n      this.fieldName = null;\n    }\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, terms);\n    } finally {\n      IOUtils.close(internalReader);\n    }\n\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"203cbba17e28e65424501a76bf0ff5471c8eef06","date":1477315915,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,float,TokenStream,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,float,TokenStream,String).mjava","sourceNew":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException If there is a low-level I/O error\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, float boost, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    this.fieldName = fieldName;\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, boost, terms);\n    } finally {\n      IOUtils.close(internalReader);\n    }\n\n    return terms;\n  }\n\n","sourceOld":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException If there is a low-level I/O error\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, float boost, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = fieldName;\n    } else {\n      this.fieldName = null;\n    }\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, boost, terms);\n    } finally {\n      IOUtils.close(internalReader);\n    }\n\n    return terms;\n  }\n\n","bugFix":["edae6ef134f154e25cf2b430b07b84f9c831dd12","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","5d934099a6f0a3ae0285025a1e1b61b7b05fed8f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60b61628d1912768f51eccaa8ead5a5a32ab34c6","date":1477427681,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,float,TokenStream,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,float,TokenStream,String).mjava","sourceNew":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException If there is a low-level I/O error\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, float boost, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    this.fieldName = fieldName;\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, boost, terms);\n    } finally {\n      IOUtils.close(internalReader);\n    }\n\n    return terms;\n  }\n\n","sourceOld":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException If there is a low-level I/O error\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, float boost, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = fieldName;\n    } else {\n      this.fieldName = null;\n    }\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, boost, terms);\n    } finally {\n      IOUtils.close(internalReader);\n    }\n\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,float,TokenStream,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,float,TokenStream,String).mjava","sourceNew":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException If there is a low-level I/O error\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, float boost, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    this.fieldName = fieldName;\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, boost, terms);\n    } finally {\n      IOUtils.close(internalReader);\n    }\n\n    return terms;\n  }\n\n","sourceOld":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException If there is a low-level I/O error\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, float boost, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = fieldName;\n    } else {\n      this.fieldName = null;\n    }\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, boost, terms);\n    } finally {\n      IOUtils.close(internalReader);\n    }\n\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["2dfdf766e55e943d942055d7de53c7ad6bc45283","203cbba17e28e65424501a76bf0ff5471c8eef06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["2dfdf766e55e943d942055d7de53c7ad6bc45283","60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"203cbba17e28e65424501a76bf0ff5471c8eef06":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"]},"commit2Childs":{"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["60b61628d1912768f51eccaa8ead5a5a32ab34c6","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","203cbba17e28e65424501a76bf0ff5471c8eef06"],"203cbba17e28e65424501a76bf0ff5471c8eef06":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}