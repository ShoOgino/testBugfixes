{"path":"solr/core/src/test/org/apache/solr/search/TestDocSet#collect(DocSet,int).mjava","commits":[{"id":"9aede538674febaf7c80a83f700bd3d99a8333ad","date":1460244087,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#collect(DocSet,int).mjava","pathOld":"/dev/null","sourceNew":"  // test the DocSetCollector\n  public void collect(DocSet set, int maxDoc) {\n    int smallSetSize = maxDoc >> 64 + 3;\n    if (set.size() > 1) {\n      if (random().nextBoolean()) {\n        smallSetSize = set.size() + random().nextInt(3) - 1;  // test the bounds around smallSetSize\n      }\n    }\n    DocSetCollector collector = new DocSetCollector(smallSetSize, maxDoc);\n\n    for(DocIterator i1 = set.iterator(); i1.hasNext();) {\n      try {\n        collector.collect( i1.nextDoc() );\n      } catch (IOException e) {\n        throw new RuntimeException(e);  // should be impossible\n      }\n    }\n\n    DocSet result = collector.getDocSet();\n    iter(set, result);  // check that they are equal\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44b69cc566f3ca5d5904d19b7f8e523e56a219d3","date":1460279487,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#collect(DocSet,int).mjava","pathOld":"/dev/null","sourceNew":"  // test the DocSetCollector\n  public void collect(DocSet set, int maxDoc) {\n    int smallSetSize = maxDoc >> 64 + 3;\n    if (set.size() > 1) {\n      if (random().nextBoolean()) {\n        smallSetSize = set.size() + random().nextInt(3) - 1;  // test the bounds around smallSetSize\n      }\n    }\n    DocSetCollector collector = new DocSetCollector(smallSetSize, maxDoc);\n\n    for(DocIterator i1 = set.iterator(); i1.hasNext();) {\n      try {\n        collector.collect( i1.nextDoc() );\n      } catch (IOException e) {\n        throw new RuntimeException(e);  // should be impossible\n      }\n    }\n\n    DocSet result = collector.getDocSet();\n    iter(set, result);  // check that they are equal\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9aede538674febaf7c80a83f700bd3d99a8333ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"44b69cc566f3ca5d5904d19b7f8e523e56a219d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9aede538674febaf7c80a83f700bd3d99a8333ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44b69cc566f3ca5d5904d19b7f8e523e56a219d3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9aede538674febaf7c80a83f700bd3d99a8333ad","44b69cc566f3ca5d5904d19b7f8e523e56a219d3"],"9aede538674febaf7c80a83f700bd3d99a8333ad":["44b69cc566f3ca5d5904d19b7f8e523e56a219d3"],"44b69cc566f3ca5d5904d19b7f8e523e56a219d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}