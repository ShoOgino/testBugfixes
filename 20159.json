{"path":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testLongConversionAndOrdering().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testLongConversionAndOrdering().mjava","pathOld":"src/test/org/apache/lucene/util/TestNumericUtils#testLongConversionAndOrdering().mjava","sourceNew":"  public void testLongConversionAndOrdering() throws Exception {\n    // generate a series of encoded longs, each numerical one bigger than the one before\n    String last=null;\n    for (long l=-100000L; l<100000L; l++) {\n      String act=NumericUtils.longToPrefixCoded(l);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last\", last.compareTo(act) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same long\", l, NumericUtils.prefixCodedToLong(act));\n      // next step\n      last=act;\n    }\n  }\n\n","sourceOld":"  public void testLongConversionAndOrdering() throws Exception {\n    // generate a series of encoded longs, each numerical one bigger than the one before\n    String last=null;\n    for (long l=-100000L; l<100000L; l++) {\n      String act=NumericUtils.longToPrefixCoded(l);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last\", last.compareTo(act) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same long\", l, NumericUtils.prefixCodedToLong(act));\n      // next step\n      last=act;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testLongConversionAndOrdering().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testLongConversionAndOrdering().mjava","sourceNew":"  public void testLongConversionAndOrdering() throws Exception {\n    // generate a series of encoded longs, each numerical one bigger than the one before\n    BytesRef last=null, act=new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    for (long l=-100000L; l<100000L; l++) {\n      NumericUtils.longToPrefixCoded(l, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", BytesRef.getUTF8SortedAsUTF16Comparator().compare(last, act) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.utf8ToString().compareTo(act.utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same long\", l, NumericUtils.prefixCodedToLong(act));\n      // next step\n      last = act;\n      act = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    }\n  }\n\n","sourceOld":"  public void testLongConversionAndOrdering() throws Exception {\n    // generate a series of encoded longs, each numerical one bigger than the one before\n    String last=null;\n    for (long l=-100000L; l<100000L; l++) {\n      String act=NumericUtils.longToPrefixCoded(l);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last\", last.compareTo(act) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same long\", l, NumericUtils.prefixCodedToLong(act));\n      // next step\n      last=act;\n    }\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testLongConversionAndOrdering().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testLongConversionAndOrdering().mjava","sourceNew":"  public void testLongConversionAndOrdering() throws Exception {\n    // generate a series of encoded longs, each numerical one bigger than the one before\n    BytesRef last=null, act=new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    for (long l=-100000L; l<100000L; l++) {\n      NumericUtils.longToPrefixCoded(l, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", BytesRef.getUTF8SortedAsUnicodeComparator().compare(last, act) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.utf8ToString().compareTo(act.utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same long\", l, NumericUtils.prefixCodedToLong(act));\n      // next step\n      last = act;\n      act = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    }\n  }\n\n","sourceOld":"  public void testLongConversionAndOrdering() throws Exception {\n    // generate a series of encoded longs, each numerical one bigger than the one before\n    BytesRef last=null, act=new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    for (long l=-100000L; l<100000L; l++) {\n      NumericUtils.longToPrefixCoded(l, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", BytesRef.getUTF8SortedAsUTF16Comparator().compare(last, act) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.utf8ToString().compareTo(act.utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same long\", l, NumericUtils.prefixCodedToLong(act));\n      // next step\n      last = act;\n      act = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c4b20b8e3276553cc6fc15be0dc552424a71198","date":1279803740,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testLongConversionAndOrdering().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testLongConversionAndOrdering().mjava","sourceNew":"  public void testLongConversionAndOrdering() throws Exception {\n    // generate a series of encoded longs, each numerical one bigger than the one before\n    BytesRef last=null, act=new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    for (long l=-100000L; l<100000L; l++) {\n      NumericUtils.longToPrefixCoded(l, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.compareTo(act) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.utf8ToString().compareTo(act.utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same long\", l, NumericUtils.prefixCodedToLong(act));\n      // next step\n      last = act;\n      act = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    }\n  }\n\n","sourceOld":"  public void testLongConversionAndOrdering() throws Exception {\n    // generate a series of encoded longs, each numerical one bigger than the one before\n    BytesRef last=null, act=new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    for (long l=-100000L; l<100000L; l++) {\n      NumericUtils.longToPrefixCoded(l, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", BytesRef.getUTF8SortedAsUnicodeComparator().compare(last, act) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.utf8ToString().compareTo(act.utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same long\", l, NumericUtils.prefixCodedToLong(act));\n      // next step\n      last = act;\n      act = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    }\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testLongConversionAndOrdering().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testLongConversionAndOrdering().mjava","sourceNew":"  public void testLongConversionAndOrdering() throws Exception {\n    // generate a series of encoded longs, each numerical one bigger than the one before\n    BytesRef last=null, act=new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    for (long l=-100000L; l<100000L; l++) {\n      NumericUtils.longToPrefixCoded(l, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.compareTo(act) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.utf8ToString().compareTo(act.utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same long\", l, NumericUtils.prefixCodedToLong(act));\n      // next step\n      last = act;\n      act = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    }\n  }\n\n","sourceOld":"  public void testLongConversionAndOrdering() throws Exception {\n    // generate a series of encoded longs, each numerical one bigger than the one before\n    BytesRef last=null, act=new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    for (long l=-100000L; l<100000L; l++) {\n      NumericUtils.longToPrefixCoded(l, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", BytesRef.getUTF8SortedAsUTF16Comparator().compare(last, act) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.utf8ToString().compareTo(act.utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same long\", l, NumericUtils.prefixCodedToLong(act));\n      // next step\n      last = act;\n      act = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testLongConversionAndOrdering().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testLongConversionAndOrdering().mjava","sourceNew":"  public void testLongConversionAndOrdering() throws Exception {\n    // generate a series of encoded longs, each numerical one bigger than the one before\n    BytesRef last=null, act=new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    for (long l=-100000L; l<100000L; l++) {\n      NumericUtils.longToPrefixCoded(l, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.compareTo(act) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.utf8ToString().compareTo(act.utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same long\", l, NumericUtils.prefixCodedToLong(act));\n      // next step\n      last = act;\n      act = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    }\n  }\n\n","sourceOld":"  public void testLongConversionAndOrdering() throws Exception {\n    // generate a series of encoded longs, each numerical one bigger than the one before\n    BytesRef last=null, act=new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    for (long l=-100000L; l<100000L; l++) {\n      NumericUtils.longToPrefixCoded(l, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.compareTo(act) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.utf8ToString().compareTo(act.utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same long\", l, NumericUtils.prefixCodedToLong(act));\n      // next step\n      last = act;\n      act = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1c4b20b8e3276553cc6fc15be0dc552424a71198":["08932c793647a36953d1816b1060121f48820d3f"],"08932c793647a36953d1816b1060121f48820d3f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1c4b20b8e3276553cc6fc15be0dc552424a71198"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","1c4b20b8e3276553cc6fc15be0dc552424a71198"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1c4b20b8e3276553cc6fc15be0dc552424a71198":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5f4e87790277826a2aea119328600dfb07761f32"],"08932c793647a36953d1816b1060121f48820d3f":["1c4b20b8e3276553cc6fc15be0dc552424a71198"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["08932c793647a36953d1816b1060121f48820d3f","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}