{"path":"src/java/org/apache/solr/analysis/WordDelimiterIterator#WordDelimiterIterator(byte[],boolean,boolean,boolean).mjava","commits":[{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/WordDelimiterIterator#WordDelimiterIterator(byte[],boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new WordDelimiterIterator operating with the supplied rules.\n   * \n   * @param charTypeTable table containing character types\n   * @param splitOnCaseChange if true, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   * @param splitOnNumerics if true, causes \"j2se\" to be three tokens; \"j\" \"2\" \"se\"\n   * @param stemEnglishPossessive if true, causes trailing \"'s\" to be removed for each subword: \"O'Neil's\" => \"O\", \"Neil\"\n   */\n  WordDelimiterIterator(byte[] charTypeTable, boolean splitOnCaseChange, boolean splitOnNumerics, boolean stemEnglishPossessive) {\n    this.charTypeTable = charTypeTable;\n    this.splitOnCaseChange = splitOnCaseChange;\n    this.splitOnNumerics = splitOnNumerics;\n    this.stemEnglishPossessive = stemEnglishPossessive;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/WordDelimiterIterator#WordDelimiterIterator(byte[],boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/analysis/WordDelimiterIterator#WordDelimiterIterator(byte[],boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Create a new WordDelimiterIterator operating with the supplied rules.\n   * \n   * @param charTypeTable table containing character types\n   * @param splitOnCaseChange if true, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   * @param splitOnNumerics if true, causes \"j2se\" to be three tokens; \"j\" \"2\" \"se\"\n   * @param stemEnglishPossessive if true, causes trailing \"'s\" to be removed for each subword: \"O'Neil's\" => \"O\", \"Neil\"\n   */\n  WordDelimiterIterator(byte[] charTypeTable, boolean splitOnCaseChange, boolean splitOnNumerics, boolean stemEnglishPossessive) {\n    this.charTypeTable = charTypeTable;\n    this.splitOnCaseChange = splitOnCaseChange;\n    this.splitOnNumerics = splitOnNumerics;\n    this.stemEnglishPossessive = stemEnglishPossessive;\n  }\n\n","sourceOld":"  /**\n   * Create a new WordDelimiterIterator operating with the supplied rules.\n   * \n   * @param charTypeTable table containing character types\n   * @param splitOnCaseChange if true, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   * @param splitOnNumerics if true, causes \"j2se\" to be three tokens; \"j\" \"2\" \"se\"\n   * @param stemEnglishPossessive if true, causes trailing \"'s\" to be removed for each subword: \"O'Neil's\" => \"O\", \"Neil\"\n   */\n  WordDelimiterIterator(byte[] charTypeTable, boolean splitOnCaseChange, boolean splitOnNumerics, boolean stemEnglishPossessive) {\n    this.charTypeTable = charTypeTable;\n    this.splitOnCaseChange = splitOnCaseChange;\n    this.splitOnNumerics = splitOnNumerics;\n    this.stemEnglishPossessive = stemEnglishPossessive;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"ef28ac95f5f85bbf872801277448c0924b0a6827":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}