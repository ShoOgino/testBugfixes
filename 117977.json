{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testPositionIncrement().mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testPositionIncrement().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testPositionIncrement().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testPositionIncrement().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}