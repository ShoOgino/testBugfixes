{"path":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#encodeSnippets(String[],String[],Map[String,String[]]).mjava","commits":[{"id":"4b3d16cba9355e2e97962eb1c441bbd0b6735c15","date":1357426290,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#encodeSnippets(String[],String[],Map[String,String[]]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Encodes the resulting snippets into a namedlist\n   * @param keys the document unique keys\n   * @param fieldNames field names to highlight in the order\n   * @param snippets map from field name to snippet array for the docs\n   * @return encoded namedlist of summaries\n   */\n  protected NamedList<Object> encodeSnippets(String[] keys, String[] fieldNames, Map<String,String[]> snippets) {\n    NamedList<Object> list = new SimpleOrderedMap<Object>();\n    for (int i = 0; i < keys.length; i++) {\n      NamedList<Object> summary = new SimpleOrderedMap<Object>();\n      for (String field : fieldNames) {\n        String snippet = snippets.get(field)[i];\n        // box in an array to match the format of existing highlighters, \n        // even though its always one element.\n        if (snippet == null) {\n          summary.add(field, new String[0]);\n        } else {\n          summary.add(field, new String[] { snippet });\n        }\n      }\n      list.add(keys[i], summary);\n    }\n    return list;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#encodeSnippets(String[],String[],Map[String,String[]]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Encodes the resulting snippets into a namedlist\n   * @param keys the document unique keys\n   * @param fieldNames field names to highlight in the order\n   * @param snippets map from field name to snippet array for the docs\n   * @return encoded namedlist of summaries\n   */\n  protected NamedList<Object> encodeSnippets(String[] keys, String[] fieldNames, Map<String,String[]> snippets) {\n    NamedList<Object> list = new SimpleOrderedMap<Object>();\n    for (int i = 0; i < keys.length; i++) {\n      NamedList<Object> summary = new SimpleOrderedMap<Object>();\n      for (String field : fieldNames) {\n        String snippet = snippets.get(field)[i];\n        // box in an array to match the format of existing highlighters, \n        // even though its always one element.\n        if (snippet == null) {\n          summary.add(field, new String[0]);\n        } else {\n          summary.add(field, new String[] { snippet });\n        }\n      }\n      list.add(keys[i], summary);\n    }\n    return list;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#encodeSnippets(String[],String[],Map[String,String[]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#encodeSnippets(String[],String[],Map[String,String[]]).mjava","sourceNew":"  /** \n   * Encodes the resulting snippets into a namedlist\n   * @param keys the document unique keys\n   * @param fieldNames field names to highlight in the order\n   * @param snippets map from field name to snippet array for the docs\n   * @return encoded namedlist of summaries\n   */\n  protected NamedList<Object> encodeSnippets(String[] keys, String[] fieldNames, Map<String,String[]> snippets) {\n    NamedList<Object> list = new SimpleOrderedMap<>();\n    for (int i = 0; i < keys.length; i++) {\n      NamedList<Object> summary = new SimpleOrderedMap<>();\n      for (String field : fieldNames) {\n        String snippet = snippets.get(field)[i];\n        // box in an array to match the format of existing highlighters, \n        // even though its always one element.\n        if (snippet == null) {\n          summary.add(field, new String[0]);\n        } else {\n          summary.add(field, new String[] { snippet });\n        }\n      }\n      list.add(keys[i], summary);\n    }\n    return list;\n  }\n\n","sourceOld":"  /** \n   * Encodes the resulting snippets into a namedlist\n   * @param keys the document unique keys\n   * @param fieldNames field names to highlight in the order\n   * @param snippets map from field name to snippet array for the docs\n   * @return encoded namedlist of summaries\n   */\n  protected NamedList<Object> encodeSnippets(String[] keys, String[] fieldNames, Map<String,String[]> snippets) {\n    NamedList<Object> list = new SimpleOrderedMap<Object>();\n    for (int i = 0; i < keys.length; i++) {\n      NamedList<Object> summary = new SimpleOrderedMap<Object>();\n      for (String field : fieldNames) {\n        String snippet = snippets.get(field)[i];\n        // box in an array to match the format of existing highlighters, \n        // even though its always one element.\n        if (snippet == null) {\n          summary.add(field, new String[0]);\n        } else {\n          summary.add(field, new String[] { snippet });\n        }\n      }\n      list.add(keys[i], summary);\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#encodeSnippets(String[],String[],Map[String,String[]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#encodeSnippets(String[],String[],Map[String,String[]]).mjava","sourceNew":"  /** \n   * Encodes the resulting snippets into a namedlist\n   * @param keys the document unique keys\n   * @param fieldNames field names to highlight in the order\n   * @param snippets map from field name to snippet array for the docs\n   * @return encoded namedlist of summaries\n   */\n  protected NamedList<Object> encodeSnippets(String[] keys, String[] fieldNames, Map<String,String[]> snippets) {\n    NamedList<Object> list = new SimpleOrderedMap<>();\n    for (int i = 0; i < keys.length; i++) {\n      NamedList<Object> summary = new SimpleOrderedMap<>();\n      for (String field : fieldNames) {\n        String snippet = snippets.get(field)[i];\n        // box in an array to match the format of existing highlighters, \n        // even though it's always one element.\n        if (snippet == null) {\n          summary.add(field, new String[0]);\n        } else {\n          summary.add(field, new String[] { snippet });\n        }\n      }\n      list.add(keys[i], summary);\n    }\n    return list;\n  }\n\n","sourceOld":"  /** \n   * Encodes the resulting snippets into a namedlist\n   * @param keys the document unique keys\n   * @param fieldNames field names to highlight in the order\n   * @param snippets map from field name to snippet array for the docs\n   * @return encoded namedlist of summaries\n   */\n  protected NamedList<Object> encodeSnippets(String[] keys, String[] fieldNames, Map<String,String[]> snippets) {\n    NamedList<Object> list = new SimpleOrderedMap<>();\n    for (int i = 0; i < keys.length; i++) {\n      NamedList<Object> summary = new SimpleOrderedMap<>();\n      for (String field : fieldNames) {\n        String snippet = snippets.get(field)[i];\n        // box in an array to match the format of existing highlighters, \n        // even though its always one element.\n        if (snippet == null) {\n          summary.add(field, new String[0]);\n        } else {\n          summary.add(field, new String[] { snippet });\n        }\n      }\n      list.add(keys[i], summary);\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"424b0811c7309a660798cd4e2939a8adee546665","date":1495551772,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#encodeSnippets(String[],String[],Map[String,String[]]).mjava","sourceNew":null,"sourceOld":"  /** \n   * Encodes the resulting snippets into a namedlist\n   * @param keys the document unique keys\n   * @param fieldNames field names to highlight in the order\n   * @param snippets map from field name to snippet array for the docs\n   * @return encoded namedlist of summaries\n   */\n  protected NamedList<Object> encodeSnippets(String[] keys, String[] fieldNames, Map<String,String[]> snippets) {\n    NamedList<Object> list = new SimpleOrderedMap<>();\n    for (int i = 0; i < keys.length; i++) {\n      NamedList<Object> summary = new SimpleOrderedMap<>();\n      for (String field : fieldNames) {\n        String snippet = snippets.get(field)[i];\n        // box in an array to match the format of existing highlighters, \n        // even though it's always one element.\n        if (snippet == null) {\n          summary.add(field, new String[0]);\n        } else {\n          summary.add(field, new String[] { snippet });\n        }\n      }\n      list.add(keys[i], summary);\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#encodeSnippets(String[],String[],Map[String,String[]]).mjava","sourceNew":null,"sourceOld":"  /** \n   * Encodes the resulting snippets into a namedlist\n   * @param keys the document unique keys\n   * @param fieldNames field names to highlight in the order\n   * @param snippets map from field name to snippet array for the docs\n   * @return encoded namedlist of summaries\n   */\n  protected NamedList<Object> encodeSnippets(String[] keys, String[] fieldNames, Map<String,String[]> snippets) {\n    NamedList<Object> list = new SimpleOrderedMap<>();\n    for (int i = 0; i < keys.length; i++) {\n      NamedList<Object> summary = new SimpleOrderedMap<>();\n      for (String field : fieldNames) {\n        String snippet = snippets.get(field)[i];\n        // box in an array to match the format of existing highlighters, \n        // even though it's always one element.\n        if (snippet == null) {\n          summary.add(field, new String[0]);\n        } else {\n          summary.add(field, new String[] { snippet });\n        }\n      }\n      list.add(keys[i], summary);\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","424b0811c7309a660798cd4e2939a8adee546665"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"424b0811c7309a660798cd4e2939a8adee546665":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["424b0811c7309a660798cd4e2939a8adee546665"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["e9017cf144952056066919f1ebc7897ff9bd71b1","424b0811c7309a660798cd4e2939a8adee546665"],"424b0811c7309a660798cd4e2939a8adee546665":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}