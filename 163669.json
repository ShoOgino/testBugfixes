{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#split(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#split(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SplitShardCmd#split(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String collectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    log.info(\"Split shard invoked\");\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n\n    // find the leader for the shard\n    Replica parentShardLeader = null;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n\n    // let's record the ephemeralOwner of the parent leader node\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      // we just got to know the leader but its live node is gone already!\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    String rangesStr = fillRanges(ocmh.cloudManager, message, collection, parentSlice, subRanges, subSlices, subShardNames);\n\n    try {\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY) {\n            // delete the shards\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"deleteshard\");\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              ocmh.commandMap.get(DELETESHARD).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        // refresh the locally cached cluster state\n        // we know we have the latest because otherwise deleteshard would have failed\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      final String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = new HashMap<>();\n      String nodeName = parentShardLeader.getNodeName();\n\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.info(\"Creating slice \" + subSlice + \" of collection \" + collectionName + \" on \" + nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", parentShardLeader.getNodeName());\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n\n        // wait until we are able to see the new shard in cluster state\n        ocmh.waitForNewShard(collectionName, subSlice);\n\n        // refresh cluster state\n        clusterState = zkStateReader.getClusterState();\n\n        log.info(\"Adding replica \" + subShardName + \" as part of slice \" + subSlice + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        ocmh.addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n      ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard leaders\", asyncId, requestMap);\n\n      for (String subShardName : subShardNames) {\n        // wait for parent leader to acknowledge the sub-shard core\n        log.info(\"Asking parent leader to wait for: \" + subShardName + \" to be alive on: \" + nodeName);\n        String coreNodeName = ocmh.waitForCoreNodeName(collectionName, nodeName, subShardName);\n        CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n        cmd.setCoreName(subShardName);\n        cmd.setNodeName(nodeName);\n        cmd.setCoreNodeName(coreNodeName);\n        cmd.setState(Replica.State.ACTIVE);\n        cmd.setCheckLive(true);\n        cmd.setOnlyIfLeader(true);\n\n        ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n        ocmh.sendShardRequest(nodeName, p, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD timed out waiting for subshard leaders to come up\",\n          asyncId, requestMap);\n\n      log.info(\"Successfully created all sub-shards for collection \" + collectionName + \" parent shard: \" + slice\n          + \" on: \" + parentShardLeader);\n\n      log.info(\"Splitting shard \" + parentShardLeader.getName() + \" as part of slice \" + slice + \" of collection \"\n          + collectionName + \" on \" + parentShardLeader);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      ocmh.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to invoke SPLIT core admin command\", asyncId,\n          requestMap);\n\n      log.info(\"Index on shard: \" + nodeName + \" split into two successfully\");\n\n      // apply buffered updates on sub-shards\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n\n        log.info(\"Applying buffered updates on : \" + subShardName);\n\n        params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n        params.set(CoreAdminParams.NAME, subShardName);\n\n        ocmh.sendShardRequest(nodeName, params, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed while asking sub shard leaders\" +\n          \" to apply buffered updates\", asyncId, requestMap);\n\n      log.info(\"Successfully applied buffered updates on : \" + subShardNames);\n\n      // Replica creation for the new Slices\n\n      // look at the replication factor and see if it matches reality\n      // if it does not, find best nodes to create more cores\n\n      // TODO: Have replication factor decided in some other way instead of numShards for the parent\n\n      int repFactor = parentSlice.getReplicas().size();\n\n      // we need to look at every node and see how many cores it serves\n      // add our new cores to existing nodes serving the least number of cores\n      // but (for now) require that each core goes on a distinct node.\n\n      // TODO: add smarter options that look at the current number of cores per\n      // node?\n      // for now we just go random\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      // TODO: Have maxShardsPerNode param for this operation?\n\n      // Remove the node that hosts the parent shard for replica creation.\n      nodeList.remove(nodeName);\n\n      // TODO: change this to handle sharding a slice into > 2 sub-shards.\n\n      List<ReplicaPosition> replicaPositions = Assign.identifyNodes(ocmh.cloudManager,\n          clusterState,\n          new ArrayList<>(clusterState.getLiveNodes()),\n          collectionName,\n          new ZkNodeProps(collection.getProperties()),\n          subSlices, repFactor - 1, 0, 0);\n      sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n\n      List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = collectionName + \"_\" + sliceName + \"_replica\" + (replicaPosition.index);\n\n        log.info(\"Creating replica shard \" + solrCoreName + \" as part of slice \" + sliceName + \" of collection \"\n            + collectionName + \" on \" + subShardNodeName);\n\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(subShardNodeName),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        // special flag param to instruct addReplica not to create the replica in cluster state again\n        propMap.put(OverseerCollectionMessageHandler.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      // compare against the ephemeralOwner of the parent leader node\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        // put sub-shards in recovery_failed state\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n\n        if (leaderZnodeStat == null)  {\n          // the leader is not live anymore, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else if (ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n          // there's a new leader, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      // we must set the slice state into recovery before actually creating the replica cores\n      // this ensures that the logic inside Overseer to update sub-shard state to 'active'\n      // always gets a chance to execute. See SOLR-7673\n\n      if (repFactor == 1) {\n        // switch sub shard states to 'active'\n        log.info(\"Replication factor is 1 so switching shard states\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      } else {\n        log.info(\"Requesting shard state be set to 'recovery'\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      }\n\n      // now actually create replica cores on sub shard nodes\n      for (Map<String, Object> replica : replicas) {\n        ocmh.addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard replicas\", asyncId, requestMap);\n\n      log.info(\"Successfully created all replica shards for all sub-slices \" + subSlices);\n\n      ocmh.commit(results, slice.get(), parentShardLeader);\n\n      return true;\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: \" + collectionName + \" parent shard: \" + slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (sessionWrapper != null) sessionWrapper.release();\n    }\n  }\n\n","sourceOld":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String collectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    log.info(\"Split shard invoked\");\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n\n    // find the leader for the shard\n    Replica parentShardLeader = null;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n\n    // let's record the ephemeralOwner of the parent leader node\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      // we just got to know the leader but its live node is gone already!\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    String rangesStr = fillRanges(ocmh.cloudManager, message, collection, parentSlice, subRanges, subSlices, subShardNames);\n\n    try {\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY) {\n            // delete the shards\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"deleteshard\");\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              ocmh.commandMap.get(DELETESHARD).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        // refresh the locally cached cluster state\n        // we know we have the latest because otherwise deleteshard would have failed\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      final String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = new HashMap<>();\n      String nodeName = parentShardLeader.getNodeName();\n\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.info(\"Creating slice \" + subSlice + \" of collection \" + collectionName + \" on \" + nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", parentShardLeader.getNodeName());\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n\n        // wait until we are able to see the new shard in cluster state\n        ocmh.waitForNewShard(collectionName, subSlice);\n\n        // refresh cluster state\n        clusterState = zkStateReader.getClusterState();\n\n        log.info(\"Adding replica \" + subShardName + \" as part of slice \" + subSlice + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        ocmh.addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n      ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard leaders\", asyncId, requestMap);\n\n      for (String subShardName : subShardNames) {\n        // wait for parent leader to acknowledge the sub-shard core\n        log.info(\"Asking parent leader to wait for: \" + subShardName + \" to be alive on: \" + nodeName);\n        String coreNodeName = ocmh.waitForCoreNodeName(collectionName, nodeName, subShardName);\n        CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n        cmd.setCoreName(subShardName);\n        cmd.setNodeName(nodeName);\n        cmd.setCoreNodeName(coreNodeName);\n        cmd.setState(Replica.State.ACTIVE);\n        cmd.setCheckLive(true);\n        cmd.setOnlyIfLeader(true);\n\n        ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n        ocmh.sendShardRequest(nodeName, p, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD timed out waiting for subshard leaders to come up\",\n          asyncId, requestMap);\n\n      log.info(\"Successfully created all sub-shards for collection \" + collectionName + \" parent shard: \" + slice\n          + \" on: \" + parentShardLeader);\n\n      log.info(\"Splitting shard \" + parentShardLeader.getName() + \" as part of slice \" + slice + \" of collection \"\n          + collectionName + \" on \" + parentShardLeader);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      ocmh.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to invoke SPLIT core admin command\", asyncId,\n          requestMap);\n\n      log.info(\"Index on shard: \" + nodeName + \" split into two successfully\");\n\n      // apply buffered updates on sub-shards\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n\n        log.info(\"Applying buffered updates on : \" + subShardName);\n\n        params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n        params.set(CoreAdminParams.NAME, subShardName);\n\n        ocmh.sendShardRequest(nodeName, params, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed while asking sub shard leaders\" +\n          \" to apply buffered updates\", asyncId, requestMap);\n\n      log.info(\"Successfully applied buffered updates on : \" + subShardNames);\n\n      // Replica creation for the new Slices\n\n      // look at the replication factor and see if it matches reality\n      // if it does not, find best nodes to create more cores\n\n      // TODO: Have replication factor decided in some other way instead of numShards for the parent\n\n      int repFactor = parentSlice.getReplicas().size();\n\n      // we need to look at every node and see how many cores it serves\n      // add our new cores to existing nodes serving the least number of cores\n      // but (for now) require that each core goes on a distinct node.\n\n      // TODO: add smarter options that look at the current number of cores per\n      // node?\n      // for now we just go random\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      // TODO: Have maxShardsPerNode param for this operation?\n\n      // Remove the node that hosts the parent shard for replica creation.\n      nodeList.remove(nodeName);\n\n      // TODO: change this to handle sharding a slice into > 2 sub-shards.\n\n      List<ReplicaPosition> replicaPositions = Assign.identifyNodes(ocmh.cloudManager,\n          clusterState,\n          new ArrayList<>(clusterState.getLiveNodes()),\n          collectionName,\n          new ZkNodeProps(collection.getProperties()),\n          subSlices, repFactor - 1, 0, 0);\n      sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n\n      List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = collectionName + \"_\" + sliceName + \"_replica\" + (replicaPosition.index);\n\n        log.info(\"Creating replica shard \" + solrCoreName + \" as part of slice \" + sliceName + \" of collection \"\n            + collectionName + \" on \" + subShardNodeName);\n\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(subShardNodeName),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        // special flag param to instruct addReplica not to create the replica in cluster state again\n        propMap.put(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      // compare against the ephemeralOwner of the parent leader node\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        // put sub-shards in recovery_failed state\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n\n        if (leaderZnodeStat == null)  {\n          // the leader is not live anymore, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else if (ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n          // there's a new leader, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      // we must set the slice state into recovery before actually creating the replica cores\n      // this ensures that the logic inside Overseer to update sub-shard state to 'active'\n      // always gets a chance to execute. See SOLR-7673\n\n      if (repFactor == 1) {\n        // switch sub shard states to 'active'\n        log.info(\"Replication factor is 1 so switching shard states\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      } else {\n        log.info(\"Requesting shard state be set to 'recovery'\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      }\n\n      // now actually create replica cores on sub shard nodes\n      for (Map<String, Object> replica : replicas) {\n        ocmh.addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard replicas\", asyncId, requestMap);\n\n      log.info(\"Successfully created all replica shards for all sub-slices \" + subSlices);\n\n      ocmh.commit(results, slice.get(), parentShardLeader);\n\n      return true;\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: \" + collectionName + \" parent shard: \" + slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (sessionWrapper != null) sessionWrapper.release();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#split(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String collectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    log.info(\"Split shard invoked\");\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n\n    // find the leader for the shard\n    Replica parentShardLeader = null;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n\n    // let's record the ephemeralOwner of the parent leader node\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      // we just got to know the leader but its live node is gone already!\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    String rangesStr = fillRanges(ocmh.cloudManager, message, collection, parentSlice, subRanges, subSlices, subShardNames);\n\n    try {\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY) {\n            // delete the shards\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"deleteshard\");\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              ocmh.commandMap.get(DELETESHARD).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        // refresh the locally cached cluster state\n        // we know we have the latest because otherwise deleteshard would have failed\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      final String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = new HashMap<>();\n      String nodeName = parentShardLeader.getNodeName();\n\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.info(\"Creating slice \" + subSlice + \" of collection \" + collectionName + \" on \" + nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", parentShardLeader.getNodeName());\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n\n        // wait until we are able to see the new shard in cluster state\n        ocmh.waitForNewShard(collectionName, subSlice);\n\n        // refresh cluster state\n        clusterState = zkStateReader.getClusterState();\n\n        log.info(\"Adding replica \" + subShardName + \" as part of slice \" + subSlice + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        ocmh.addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n      ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard leaders\", asyncId, requestMap);\n\n      for (String subShardName : subShardNames) {\n        // wait for parent leader to acknowledge the sub-shard core\n        log.info(\"Asking parent leader to wait for: \" + subShardName + \" to be alive on: \" + nodeName);\n        String coreNodeName = ocmh.waitForCoreNodeName(collectionName, nodeName, subShardName);\n        CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n        cmd.setCoreName(subShardName);\n        cmd.setNodeName(nodeName);\n        cmd.setCoreNodeName(coreNodeName);\n        cmd.setState(Replica.State.ACTIVE);\n        cmd.setCheckLive(true);\n        cmd.setOnlyIfLeader(true);\n\n        ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n        ocmh.sendShardRequest(nodeName, p, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD timed out waiting for subshard leaders to come up\",\n          asyncId, requestMap);\n\n      log.info(\"Successfully created all sub-shards for collection \" + collectionName + \" parent shard: \" + slice\n          + \" on: \" + parentShardLeader);\n\n      log.info(\"Splitting shard \" + parentShardLeader.getName() + \" as part of slice \" + slice + \" of collection \"\n          + collectionName + \" on \" + parentShardLeader);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      ocmh.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to invoke SPLIT core admin command\", asyncId,\n          requestMap);\n\n      log.info(\"Index on shard: \" + nodeName + \" split into two successfully\");\n\n      // apply buffered updates on sub-shards\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n\n        log.info(\"Applying buffered updates on : \" + subShardName);\n\n        params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n        params.set(CoreAdminParams.NAME, subShardName);\n\n        ocmh.sendShardRequest(nodeName, params, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed while asking sub shard leaders\" +\n          \" to apply buffered updates\", asyncId, requestMap);\n\n      log.info(\"Successfully applied buffered updates on : \" + subShardNames);\n\n      // Replica creation for the new Slices\n\n      // look at the replication factor and see if it matches reality\n      // if it does not, find best nodes to create more cores\n\n      // TODO: Have replication factor decided in some other way instead of numShards for the parent\n\n      int repFactor = parentSlice.getReplicas().size();\n\n      // we need to look at every node and see how many cores it serves\n      // add our new cores to existing nodes serving the least number of cores\n      // but (for now) require that each core goes on a distinct node.\n\n      // TODO: add smarter options that look at the current number of cores per\n      // node?\n      // for now we just go random\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      // TODO: Have maxShardsPerNode param for this operation?\n\n      // Remove the node that hosts the parent shard for replica creation.\n      nodeList.remove(nodeName);\n\n      // TODO: change this to handle sharding a slice into > 2 sub-shards.\n\n      List<ReplicaPosition> replicaPositions = Assign.identifyNodes(ocmh.cloudManager,\n          clusterState,\n          new ArrayList<>(clusterState.getLiveNodes()),\n          collectionName,\n          new ZkNodeProps(collection.getProperties()),\n          subSlices, repFactor - 1, 0, 0);\n      sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n\n      List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = collectionName + \"_\" + sliceName + \"_replica\" + (replicaPosition.index);\n\n        log.info(\"Creating replica shard \" + solrCoreName + \" as part of slice \" + sliceName + \" of collection \"\n            + collectionName + \" on \" + subShardNodeName);\n\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(subShardNodeName),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        // special flag param to instruct addReplica not to create the replica in cluster state again\n        propMap.put(OverseerCollectionMessageHandler.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      // compare against the ephemeralOwner of the parent leader node\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        // put sub-shards in recovery_failed state\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n\n        if (leaderZnodeStat == null)  {\n          // the leader is not live anymore, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else if (ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n          // there's a new leader, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      // we must set the slice state into recovery before actually creating the replica cores\n      // this ensures that the logic inside Overseer to update sub-shard state to 'active'\n      // always gets a chance to execute. See SOLR-7673\n\n      if (repFactor == 1) {\n        // switch sub shard states to 'active'\n        log.info(\"Replication factor is 1 so switching shard states\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      } else {\n        log.info(\"Requesting shard state be set to 'recovery'\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      }\n\n      // now actually create replica cores on sub shard nodes\n      for (Map<String, Object> replica : replicas) {\n        ocmh.addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard replicas\", asyncId, requestMap);\n\n      log.info(\"Successfully created all replica shards for all sub-slices \" + subSlices);\n\n      ocmh.commit(results, slice.get(), parentShardLeader);\n\n      return true;\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: \" + collectionName + \" parent shard: \" + slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (sessionWrapper != null) sessionWrapper.release();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"685af99397b6da31116a2cac747ed255d217d080","date":1530038134,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#split(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#split(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String collectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    log.info(\"Split shard invoked\");\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n\n    // find the leader for the shard\n    Replica parentShardLeader = null;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted.\");\n    }\n\n    checkDiskSpace(collectionName, slice.get(), parentShardLeader);\n\n    // let's record the ephemeralOwner of the parent leader node\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      // we just got to know the leader but its live node is gone already!\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    // reproduce the currently existing number of replicas per type\n    AtomicInteger numNrt = new AtomicInteger();\n    AtomicInteger numTlog = new AtomicInteger();\n    AtomicInteger numPull = new AtomicInteger();\n    parentSlice.getReplicas().forEach(r -> {\n      switch (r.getType()) {\n        case NRT:\n          numNrt.incrementAndGet();\n          break;\n        case TLOG:\n          numTlog.incrementAndGet();\n          break;\n        case PULL:\n          numPull.incrementAndGet();\n      }\n    });\n    int repFactor = numNrt.get() + numTlog.get() + numPull.get();\n\n    // type of the first subreplica will be the same as leader\n    boolean firstNrtReplica = parentShardLeader.getType() == Replica.Type.NRT;\n    // verify that we indeed have the right number of correct replica types\n    if ((firstNrtReplica && numNrt.get() < 1) || (!firstNrtReplica && numTlog.get() < 1)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"aborting split - inconsistent replica types in collection \" + collectionName +\n          \": nrt=\" + numNrt.get() + \", tlog=\" + numTlog.get() + \", pull=\" + numPull.get() + \", shard leader type is \" +\n      parentShardLeader.getType());\n    }\n\n    List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n    String rangesStr = fillRanges(ocmh.cloudManager, message, collection, parentSlice, subRanges, subSlices, subShardNames, firstNrtReplica);\n\n    try {\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else {\n            // delete the shards\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"deleteshard\");\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              ocmh.commandMap.get(DELETESHARD).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        // refresh the locally cached cluster state\n        // we know we have the latest because otherwise deleteshard would have failed\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      final String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = new HashMap<>();\n      String nodeName = parentShardLeader.getNodeName();\n\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.info(\"Creating slice \" + subSlice + \" of collection \" + collectionName + \" on \" + nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", parentShardLeader.getNodeName());\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n\n        // wait until we are able to see the new shard in cluster state\n        ocmh.waitForNewShard(collectionName, subSlice);\n\n        // refresh cluster state\n        clusterState = zkStateReader.getClusterState();\n\n        log.info(\"Adding replica \" + subShardName + \" as part of slice \" + subSlice + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(REPLICA_TYPE, firstNrtReplica ? Replica.Type.NRT.toString() : Replica.Type.TLOG.toString());\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        ocmh.addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n      ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard leaders\", asyncId, requestMap);\n\n      for (String subShardName : subShardNames) {\n        // wait for parent leader to acknowledge the sub-shard core\n        log.info(\"Asking parent leader to wait for: \" + subShardName + \" to be alive on: \" + nodeName);\n        String coreNodeName = ocmh.waitForCoreNodeName(collectionName, nodeName, subShardName);\n        CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n        cmd.setCoreName(subShardName);\n        cmd.setNodeName(nodeName);\n        cmd.setCoreNodeName(coreNodeName);\n        cmd.setState(Replica.State.ACTIVE);\n        cmd.setCheckLive(true);\n        cmd.setOnlyIfLeader(true);\n\n        ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n        ocmh.sendShardRequest(nodeName, p, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD timed out waiting for subshard leaders to come up\",\n          asyncId, requestMap);\n\n      log.info(\"Successfully created all sub-shards for collection \" + collectionName + \" parent shard: \" + slice\n          + \" on: \" + parentShardLeader);\n\n      log.info(\"Splitting shard \" + parentShardLeader.getName() + \" as part of slice \" + slice + \" of collection \"\n          + collectionName + \" on \" + parentShardLeader);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      ocmh.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to invoke SPLIT core admin command\", asyncId,\n          requestMap);\n\n      log.info(\"Index on shard: \" + nodeName + \" split into two successfully\");\n\n      // apply buffered updates on sub-shards\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n\n        log.info(\"Applying buffered updates on : \" + subShardName);\n\n        params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n        params.set(CoreAdminParams.NAME, subShardName);\n\n        ocmh.sendShardRequest(nodeName, params, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed while asking sub shard leaders\" +\n          \" to apply buffered updates\", asyncId, requestMap);\n\n      log.info(\"Successfully applied buffered updates on : \" + subShardNames);\n\n      // Replica creation for the new Slices\n      // replica placement is controlled by the autoscaling policy framework\n\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      // TODO: Have maxShardsPerNode param for this operation?\n\n      // Remove the node that hosts the parent shard for replica creation.\n      nodeList.remove(nodeName);\n\n      // TODO: change this to handle sharding a slice into > 2 sub-shards.\n\n      // we have already created one subReplica for each subShard on the parent node.\n      // identify locations for the remaining replicas\n      if (firstNrtReplica) {\n        numNrt.decrementAndGet();\n      } else {\n        numTlog.decrementAndGet();\n      }\n\n      List<ReplicaPosition> replicaPositions = Assign.identifyNodes(ocmh.cloudManager,\n          clusterState,\n          new ArrayList<>(clusterState.getLiveNodes()),\n          collectionName,\n          new ZkNodeProps(collection.getProperties()),\n          subSlices, numNrt.get(), numTlog.get(), numPull.get());\n      sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = Assign.buildSolrCoreName(collectionName, sliceName, replicaPosition.type, replicaPosition.index);\n\n        log.info(\"Creating replica shard \" + solrCoreName + \" as part of slice \" + sliceName + \" of collection \"\n            + collectionName + \" on \" + subShardNodeName);\n\n        // we first create all replicas in DOWN state without actually creating their cores in order to\n        // avoid a race condition where Overseer may prematurely activate the new sub-slices (and deactivate\n        // the parent slice) before all new replicas are added. This situation may lead to a loss of performance\n        // because the new shards will be activated with possibly many fewer replicas.\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.REPLICA_TYPE, replicaPosition.type.name(),\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(subShardNodeName),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(REPLICA_TYPE, replicaPosition.type.name());\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        // special flag param to instruct addReplica not to create the replica in cluster state again\n        propMap.put(OverseerCollectionMessageHandler.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      // compare against the ephemeralOwner of the parent leader node\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        // put sub-shards in recovery_failed state\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n\n        if (leaderZnodeStat == null)  {\n          // the leader is not live anymore, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else if (ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n          // there's a new leader, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      // we must set the slice state into recovery before actually creating the replica cores\n      // this ensures that the logic inside Overseer to update sub-shard state to 'active'\n      // always gets a chance to execute. See SOLR-7673\n\n      if (repFactor == 1) {\n        // switch sub shard states to 'active'\n        log.info(\"Replication factor is 1 so switching shard states\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      } else {\n        log.info(\"Requesting shard state be set to 'recovery'\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      }\n\n      // now actually create replica cores on sub shard nodes\n      for (Map<String, Object> replica : replicas) {\n        ocmh.addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      assert TestInjection.injectSplitFailureAfterReplicaCreation();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard replicas\", asyncId, requestMap);\n\n      log.info(\"Successfully created all replica shards for all sub-slices \" + subSlices);\n\n      ocmh.commit(results, slice.get(), parentShardLeader);\n\n      return true;\n    } catch (SolrException e) {\n      cleanupAfterFailure(zkStateReader, collectionName, parentSlice.getName(), subSlices);\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: \" + collectionName + \" parent shard: \" + slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (sessionWrapper != null) sessionWrapper.release();\n    }\n  }\n\n","sourceOld":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String collectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    log.info(\"Split shard invoked\");\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n\n    // find the leader for the shard\n    Replica parentShardLeader = null;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n\n    // let's record the ephemeralOwner of the parent leader node\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      // we just got to know the leader but its live node is gone already!\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    String rangesStr = fillRanges(ocmh.cloudManager, message, collection, parentSlice, subRanges, subSlices, subShardNames);\n\n    try {\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY) {\n            // delete the shards\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"deleteshard\");\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              ocmh.commandMap.get(DELETESHARD).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        // refresh the locally cached cluster state\n        // we know we have the latest because otherwise deleteshard would have failed\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      final String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = new HashMap<>();\n      String nodeName = parentShardLeader.getNodeName();\n\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.info(\"Creating slice \" + subSlice + \" of collection \" + collectionName + \" on \" + nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", parentShardLeader.getNodeName());\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n\n        // wait until we are able to see the new shard in cluster state\n        ocmh.waitForNewShard(collectionName, subSlice);\n\n        // refresh cluster state\n        clusterState = zkStateReader.getClusterState();\n\n        log.info(\"Adding replica \" + subShardName + \" as part of slice \" + subSlice + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        ocmh.addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n      ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard leaders\", asyncId, requestMap);\n\n      for (String subShardName : subShardNames) {\n        // wait for parent leader to acknowledge the sub-shard core\n        log.info(\"Asking parent leader to wait for: \" + subShardName + \" to be alive on: \" + nodeName);\n        String coreNodeName = ocmh.waitForCoreNodeName(collectionName, nodeName, subShardName);\n        CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n        cmd.setCoreName(subShardName);\n        cmd.setNodeName(nodeName);\n        cmd.setCoreNodeName(coreNodeName);\n        cmd.setState(Replica.State.ACTIVE);\n        cmd.setCheckLive(true);\n        cmd.setOnlyIfLeader(true);\n\n        ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n        ocmh.sendShardRequest(nodeName, p, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD timed out waiting for subshard leaders to come up\",\n          asyncId, requestMap);\n\n      log.info(\"Successfully created all sub-shards for collection \" + collectionName + \" parent shard: \" + slice\n          + \" on: \" + parentShardLeader);\n\n      log.info(\"Splitting shard \" + parentShardLeader.getName() + \" as part of slice \" + slice + \" of collection \"\n          + collectionName + \" on \" + parentShardLeader);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      ocmh.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to invoke SPLIT core admin command\", asyncId,\n          requestMap);\n\n      log.info(\"Index on shard: \" + nodeName + \" split into two successfully\");\n\n      // apply buffered updates on sub-shards\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n\n        log.info(\"Applying buffered updates on : \" + subShardName);\n\n        params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n        params.set(CoreAdminParams.NAME, subShardName);\n\n        ocmh.sendShardRequest(nodeName, params, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed while asking sub shard leaders\" +\n          \" to apply buffered updates\", asyncId, requestMap);\n\n      log.info(\"Successfully applied buffered updates on : \" + subShardNames);\n\n      // Replica creation for the new Slices\n\n      // look at the replication factor and see if it matches reality\n      // if it does not, find best nodes to create more cores\n\n      // TODO: Have replication factor decided in some other way instead of numShards for the parent\n\n      int repFactor = parentSlice.getReplicas().size();\n\n      // we need to look at every node and see how many cores it serves\n      // add our new cores to existing nodes serving the least number of cores\n      // but (for now) require that each core goes on a distinct node.\n\n      // TODO: add smarter options that look at the current number of cores per\n      // node?\n      // for now we just go random\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      // TODO: Have maxShardsPerNode param for this operation?\n\n      // Remove the node that hosts the parent shard for replica creation.\n      nodeList.remove(nodeName);\n\n      // TODO: change this to handle sharding a slice into > 2 sub-shards.\n\n      List<ReplicaPosition> replicaPositions = Assign.identifyNodes(ocmh.cloudManager,\n          clusterState,\n          new ArrayList<>(clusterState.getLiveNodes()),\n          collectionName,\n          new ZkNodeProps(collection.getProperties()),\n          subSlices, repFactor - 1, 0, 0);\n      sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n\n      List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = collectionName + \"_\" + sliceName + \"_replica\" + (replicaPosition.index);\n\n        log.info(\"Creating replica shard \" + solrCoreName + \" as part of slice \" + sliceName + \" of collection \"\n            + collectionName + \" on \" + subShardNodeName);\n\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(subShardNodeName),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        // special flag param to instruct addReplica not to create the replica in cluster state again\n        propMap.put(OverseerCollectionMessageHandler.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      // compare against the ephemeralOwner of the parent leader node\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        // put sub-shards in recovery_failed state\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n\n        if (leaderZnodeStat == null)  {\n          // the leader is not live anymore, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else if (ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n          // there's a new leader, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      // we must set the slice state into recovery before actually creating the replica cores\n      // this ensures that the logic inside Overseer to update sub-shard state to 'active'\n      // always gets a chance to execute. See SOLR-7673\n\n      if (repFactor == 1) {\n        // switch sub shard states to 'active'\n        log.info(\"Replication factor is 1 so switching shard states\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      } else {\n        log.info(\"Requesting shard state be set to 'recovery'\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      }\n\n      // now actually create replica cores on sub shard nodes\n      for (Map<String, Object> replica : replicas) {\n        ocmh.addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard replicas\", asyncId, requestMap);\n\n      log.info(\"Successfully created all replica shards for all sub-slices \" + subSlices);\n\n      ocmh.commit(results, slice.get(), parentShardLeader);\n\n      return true;\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: \" + collectionName + \" parent shard: \" + slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (sessionWrapper != null) sessionWrapper.release();\n    }\n  }\n\n","bugFix":["04c8df3f10a676c3de5dbf390f17a2de2d45cacd","5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132","8b81868c96ab084d96d4589dd330753c529bc450","61c45e99cf6676da48f19d7511c73712ad39402b","439c63ae5d22132fca810a0029a854e97d2c1a3e","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"bugIntro":["8f79e6c597ec19b2f9669589153faac2f803462a","8f79e6c597ec19b2f9669589153faac2f803462a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#split(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#split(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String collectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    log.info(\"Split shard invoked\");\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n\n    // find the leader for the shard\n    Replica parentShardLeader = null;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted.\");\n    }\n\n    checkDiskSpace(collectionName, slice.get(), parentShardLeader);\n\n    // let's record the ephemeralOwner of the parent leader node\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      // we just got to know the leader but its live node is gone already!\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    // reproduce the currently existing number of replicas per type\n    AtomicInteger numNrt = new AtomicInteger();\n    AtomicInteger numTlog = new AtomicInteger();\n    AtomicInteger numPull = new AtomicInteger();\n    parentSlice.getReplicas().forEach(r -> {\n      switch (r.getType()) {\n        case NRT:\n          numNrt.incrementAndGet();\n          break;\n        case TLOG:\n          numTlog.incrementAndGet();\n          break;\n        case PULL:\n          numPull.incrementAndGet();\n      }\n    });\n    int repFactor = numNrt.get() + numTlog.get() + numPull.get();\n\n    // type of the first subreplica will be the same as leader\n    boolean firstNrtReplica = parentShardLeader.getType() == Replica.Type.NRT;\n    // verify that we indeed have the right number of correct replica types\n    if ((firstNrtReplica && numNrt.get() < 1) || (!firstNrtReplica && numTlog.get() < 1)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"aborting split - inconsistent replica types in collection \" + collectionName +\n          \": nrt=\" + numNrt.get() + \", tlog=\" + numTlog.get() + \", pull=\" + numPull.get() + \", shard leader type is \" +\n      parentShardLeader.getType());\n    }\n\n    List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n    String rangesStr = fillRanges(ocmh.cloudManager, message, collection, parentSlice, subRanges, subSlices, subShardNames, firstNrtReplica);\n\n    try {\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else {\n            // delete the shards\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"deleteshard\");\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              ocmh.commandMap.get(DELETESHARD).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        // refresh the locally cached cluster state\n        // we know we have the latest because otherwise deleteshard would have failed\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      final String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = new HashMap<>();\n      String nodeName = parentShardLeader.getNodeName();\n\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.info(\"Creating slice \" + subSlice + \" of collection \" + collectionName + \" on \" + nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", parentShardLeader.getNodeName());\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n\n        // wait until we are able to see the new shard in cluster state\n        ocmh.waitForNewShard(collectionName, subSlice);\n\n        // refresh cluster state\n        clusterState = zkStateReader.getClusterState();\n\n        log.info(\"Adding replica \" + subShardName + \" as part of slice \" + subSlice + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(REPLICA_TYPE, firstNrtReplica ? Replica.Type.NRT.toString() : Replica.Type.TLOG.toString());\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        ocmh.addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n      ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard leaders\", asyncId, requestMap);\n\n      for (String subShardName : subShardNames) {\n        // wait for parent leader to acknowledge the sub-shard core\n        log.info(\"Asking parent leader to wait for: \" + subShardName + \" to be alive on: \" + nodeName);\n        String coreNodeName = ocmh.waitForCoreNodeName(collectionName, nodeName, subShardName);\n        CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n        cmd.setCoreName(subShardName);\n        cmd.setNodeName(nodeName);\n        cmd.setCoreNodeName(coreNodeName);\n        cmd.setState(Replica.State.ACTIVE);\n        cmd.setCheckLive(true);\n        cmd.setOnlyIfLeader(true);\n\n        ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n        ocmh.sendShardRequest(nodeName, p, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD timed out waiting for subshard leaders to come up\",\n          asyncId, requestMap);\n\n      log.info(\"Successfully created all sub-shards for collection \" + collectionName + \" parent shard: \" + slice\n          + \" on: \" + parentShardLeader);\n\n      log.info(\"Splitting shard \" + parentShardLeader.getName() + \" as part of slice \" + slice + \" of collection \"\n          + collectionName + \" on \" + parentShardLeader);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      ocmh.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to invoke SPLIT core admin command\", asyncId,\n          requestMap);\n\n      log.info(\"Index on shard: \" + nodeName + \" split into two successfully\");\n\n      // apply buffered updates on sub-shards\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n\n        log.info(\"Applying buffered updates on : \" + subShardName);\n\n        params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n        params.set(CoreAdminParams.NAME, subShardName);\n\n        ocmh.sendShardRequest(nodeName, params, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed while asking sub shard leaders\" +\n          \" to apply buffered updates\", asyncId, requestMap);\n\n      log.info(\"Successfully applied buffered updates on : \" + subShardNames);\n\n      // Replica creation for the new Slices\n      // replica placement is controlled by the autoscaling policy framework\n\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      // TODO: Have maxShardsPerNode param for this operation?\n\n      // Remove the node that hosts the parent shard for replica creation.\n      nodeList.remove(nodeName);\n\n      // TODO: change this to handle sharding a slice into > 2 sub-shards.\n\n      // we have already created one subReplica for each subShard on the parent node.\n      // identify locations for the remaining replicas\n      if (firstNrtReplica) {\n        numNrt.decrementAndGet();\n      } else {\n        numTlog.decrementAndGet();\n      }\n\n      List<ReplicaPosition> replicaPositions = Assign.identifyNodes(ocmh.cloudManager,\n          clusterState,\n          new ArrayList<>(clusterState.getLiveNodes()),\n          collectionName,\n          new ZkNodeProps(collection.getProperties()),\n          subSlices, numNrt.get(), numTlog.get(), numPull.get());\n      sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = Assign.buildSolrCoreName(collectionName, sliceName, replicaPosition.type, replicaPosition.index);\n\n        log.info(\"Creating replica shard \" + solrCoreName + \" as part of slice \" + sliceName + \" of collection \"\n            + collectionName + \" on \" + subShardNodeName);\n\n        // we first create all replicas in DOWN state without actually creating their cores in order to\n        // avoid a race condition where Overseer may prematurely activate the new sub-slices (and deactivate\n        // the parent slice) before all new replicas are added. This situation may lead to a loss of performance\n        // because the new shards will be activated with possibly many fewer replicas.\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.REPLICA_TYPE, replicaPosition.type.name(),\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(subShardNodeName),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(REPLICA_TYPE, replicaPosition.type.name());\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        // special flag param to instruct addReplica not to create the replica in cluster state again\n        propMap.put(OverseerCollectionMessageHandler.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      // compare against the ephemeralOwner of the parent leader node\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        // put sub-shards in recovery_failed state\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n\n        if (leaderZnodeStat == null)  {\n          // the leader is not live anymore, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else if (ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n          // there's a new leader, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      // we must set the slice state into recovery before actually creating the replica cores\n      // this ensures that the logic inside Overseer to update sub-shard state to 'active'\n      // always gets a chance to execute. See SOLR-7673\n\n      if (repFactor == 1) {\n        // switch sub shard states to 'active'\n        log.info(\"Replication factor is 1 so switching shard states\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      } else {\n        log.info(\"Requesting shard state be set to 'recovery'\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      }\n\n      // now actually create replica cores on sub shard nodes\n      for (Map<String, Object> replica : replicas) {\n        ocmh.addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      assert TestInjection.injectSplitFailureAfterReplicaCreation();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard replicas\", asyncId, requestMap);\n\n      log.info(\"Successfully created all replica shards for all sub-slices \" + subSlices);\n\n      ocmh.commit(results, slice.get(), parentShardLeader);\n\n      return true;\n    } catch (SolrException e) {\n      cleanupAfterFailure(zkStateReader, collectionName, parentSlice.getName(), subSlices);\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: \" + collectionName + \" parent shard: \" + slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (sessionWrapper != null) sessionWrapper.release();\n    }\n  }\n\n","sourceOld":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String collectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    log.info(\"Split shard invoked\");\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n\n    // find the leader for the shard\n    Replica parentShardLeader = null;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n\n    // let's record the ephemeralOwner of the parent leader node\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      // we just got to know the leader but its live node is gone already!\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    String rangesStr = fillRanges(ocmh.cloudManager, message, collection, parentSlice, subRanges, subSlices, subShardNames);\n\n    try {\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY) {\n            // delete the shards\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"deleteshard\");\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              ocmh.commandMap.get(DELETESHARD).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        // refresh the locally cached cluster state\n        // we know we have the latest because otherwise deleteshard would have failed\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      final String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = new HashMap<>();\n      String nodeName = parentShardLeader.getNodeName();\n\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.info(\"Creating slice \" + subSlice + \" of collection \" + collectionName + \" on \" + nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", parentShardLeader.getNodeName());\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n\n        // wait until we are able to see the new shard in cluster state\n        ocmh.waitForNewShard(collectionName, subSlice);\n\n        // refresh cluster state\n        clusterState = zkStateReader.getClusterState();\n\n        log.info(\"Adding replica \" + subShardName + \" as part of slice \" + subSlice + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        ocmh.addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n      ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard leaders\", asyncId, requestMap);\n\n      for (String subShardName : subShardNames) {\n        // wait for parent leader to acknowledge the sub-shard core\n        log.info(\"Asking parent leader to wait for: \" + subShardName + \" to be alive on: \" + nodeName);\n        String coreNodeName = ocmh.waitForCoreNodeName(collectionName, nodeName, subShardName);\n        CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n        cmd.setCoreName(subShardName);\n        cmd.setNodeName(nodeName);\n        cmd.setCoreNodeName(coreNodeName);\n        cmd.setState(Replica.State.ACTIVE);\n        cmd.setCheckLive(true);\n        cmd.setOnlyIfLeader(true);\n\n        ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n        ocmh.sendShardRequest(nodeName, p, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD timed out waiting for subshard leaders to come up\",\n          asyncId, requestMap);\n\n      log.info(\"Successfully created all sub-shards for collection \" + collectionName + \" parent shard: \" + slice\n          + \" on: \" + parentShardLeader);\n\n      log.info(\"Splitting shard \" + parentShardLeader.getName() + \" as part of slice \" + slice + \" of collection \"\n          + collectionName + \" on \" + parentShardLeader);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      ocmh.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to invoke SPLIT core admin command\", asyncId,\n          requestMap);\n\n      log.info(\"Index on shard: \" + nodeName + \" split into two successfully\");\n\n      // apply buffered updates on sub-shards\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n\n        log.info(\"Applying buffered updates on : \" + subShardName);\n\n        params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n        params.set(CoreAdminParams.NAME, subShardName);\n\n        ocmh.sendShardRequest(nodeName, params, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed while asking sub shard leaders\" +\n          \" to apply buffered updates\", asyncId, requestMap);\n\n      log.info(\"Successfully applied buffered updates on : \" + subShardNames);\n\n      // Replica creation for the new Slices\n\n      // look at the replication factor and see if it matches reality\n      // if it does not, find best nodes to create more cores\n\n      // TODO: Have replication factor decided in some other way instead of numShards for the parent\n\n      int repFactor = parentSlice.getReplicas().size();\n\n      // we need to look at every node and see how many cores it serves\n      // add our new cores to existing nodes serving the least number of cores\n      // but (for now) require that each core goes on a distinct node.\n\n      // TODO: add smarter options that look at the current number of cores per\n      // node?\n      // for now we just go random\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      // TODO: Have maxShardsPerNode param for this operation?\n\n      // Remove the node that hosts the parent shard for replica creation.\n      nodeList.remove(nodeName);\n\n      // TODO: change this to handle sharding a slice into > 2 sub-shards.\n\n      List<ReplicaPosition> replicaPositions = Assign.identifyNodes(ocmh.cloudManager,\n          clusterState,\n          new ArrayList<>(clusterState.getLiveNodes()),\n          collectionName,\n          new ZkNodeProps(collection.getProperties()),\n          subSlices, repFactor - 1, 0, 0);\n      sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n\n      List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = collectionName + \"_\" + sliceName + \"_replica\" + (replicaPosition.index);\n\n        log.info(\"Creating replica shard \" + solrCoreName + \" as part of slice \" + sliceName + \" of collection \"\n            + collectionName + \" on \" + subShardNodeName);\n\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(subShardNodeName),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        // special flag param to instruct addReplica not to create the replica in cluster state again\n        propMap.put(OverseerCollectionMessageHandler.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      // compare against the ephemeralOwner of the parent leader node\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        // put sub-shards in recovery_failed state\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n\n        if (leaderZnodeStat == null)  {\n          // the leader is not live anymore, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else if (ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n          // there's a new leader, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      // we must set the slice state into recovery before actually creating the replica cores\n      // this ensures that the logic inside Overseer to update sub-shard state to 'active'\n      // always gets a chance to execute. See SOLR-7673\n\n      if (repFactor == 1) {\n        // switch sub shard states to 'active'\n        log.info(\"Replication factor is 1 so switching shard states\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      } else {\n        log.info(\"Requesting shard state be set to 'recovery'\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      }\n\n      // now actually create replica cores on sub shard nodes\n      for (Map<String, Object> replica : replicas) {\n        ocmh.addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard replicas\", asyncId, requestMap);\n\n      log.info(\"Successfully created all replica shards for all sub-slices \" + subSlices);\n\n      ocmh.commit(results, slice.get(), parentShardLeader);\n\n      return true;\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: \" + collectionName + \" parent shard: \" + slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (sessionWrapper != null) sessionWrapper.release();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#split(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#split(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String collectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    log.info(\"Split shard invoked\");\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n\n    // find the leader for the shard\n    Replica parentShardLeader = null;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted.\");\n    }\n\n    checkDiskSpace(collectionName, slice.get(), parentShardLeader);\n\n    // let's record the ephemeralOwner of the parent leader node\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      // we just got to know the leader but its live node is gone already!\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    // reproduce the currently existing number of replicas per type\n    AtomicInteger numNrt = new AtomicInteger();\n    AtomicInteger numTlog = new AtomicInteger();\n    AtomicInteger numPull = new AtomicInteger();\n    parentSlice.getReplicas().forEach(r -> {\n      switch (r.getType()) {\n        case NRT:\n          numNrt.incrementAndGet();\n          break;\n        case TLOG:\n          numTlog.incrementAndGet();\n          break;\n        case PULL:\n          numPull.incrementAndGet();\n      }\n    });\n    int repFactor = numNrt.get() + numTlog.get() + numPull.get();\n\n    // type of the first subreplica will be the same as leader\n    boolean firstNrtReplica = parentShardLeader.getType() == Replica.Type.NRT;\n    // verify that we indeed have the right number of correct replica types\n    if ((firstNrtReplica && numNrt.get() < 1) || (!firstNrtReplica && numTlog.get() < 1)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"aborting split - inconsistent replica types in collection \" + collectionName +\n          \": nrt=\" + numNrt.get() + \", tlog=\" + numTlog.get() + \", pull=\" + numPull.get() + \", shard leader type is \" +\n      parentShardLeader.getType());\n    }\n\n    List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n    String rangesStr = fillRanges(ocmh.cloudManager, message, collection, parentSlice, subRanges, subSlices, subShardNames, firstNrtReplica);\n\n    try {\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else {\n            // delete the shards\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"deleteshard\");\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              ocmh.commandMap.get(DELETESHARD).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        // refresh the locally cached cluster state\n        // we know we have the latest because otherwise deleteshard would have failed\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      final String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = new HashMap<>();\n      String nodeName = parentShardLeader.getNodeName();\n\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.info(\"Creating slice \" + subSlice + \" of collection \" + collectionName + \" on \" + nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", parentShardLeader.getNodeName());\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n\n        // wait until we are able to see the new shard in cluster state\n        ocmh.waitForNewShard(collectionName, subSlice);\n\n        // refresh cluster state\n        clusterState = zkStateReader.getClusterState();\n\n        log.info(\"Adding replica \" + subShardName + \" as part of slice \" + subSlice + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(REPLICA_TYPE, firstNrtReplica ? Replica.Type.NRT.toString() : Replica.Type.TLOG.toString());\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        ocmh.addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n      ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard leaders\", asyncId, requestMap);\n\n      for (String subShardName : subShardNames) {\n        // wait for parent leader to acknowledge the sub-shard core\n        log.info(\"Asking parent leader to wait for: \" + subShardName + \" to be alive on: \" + nodeName);\n        String coreNodeName = ocmh.waitForCoreNodeName(collectionName, nodeName, subShardName);\n        CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n        cmd.setCoreName(subShardName);\n        cmd.setNodeName(nodeName);\n        cmd.setCoreNodeName(coreNodeName);\n        cmd.setState(Replica.State.ACTIVE);\n        cmd.setCheckLive(true);\n        cmd.setOnlyIfLeader(true);\n\n        ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n        ocmh.sendShardRequest(nodeName, p, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD timed out waiting for subshard leaders to come up\",\n          asyncId, requestMap);\n\n      log.info(\"Successfully created all sub-shards for collection \" + collectionName + \" parent shard: \" + slice\n          + \" on: \" + parentShardLeader);\n\n      log.info(\"Splitting shard \" + parentShardLeader.getName() + \" as part of slice \" + slice + \" of collection \"\n          + collectionName + \" on \" + parentShardLeader);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      ocmh.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to invoke SPLIT core admin command\", asyncId,\n          requestMap);\n\n      log.info(\"Index on shard: \" + nodeName + \" split into two successfully\");\n\n      // apply buffered updates on sub-shards\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n\n        log.info(\"Applying buffered updates on : \" + subShardName);\n\n        params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n        params.set(CoreAdminParams.NAME, subShardName);\n\n        ocmh.sendShardRequest(nodeName, params, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed while asking sub shard leaders\" +\n          \" to apply buffered updates\", asyncId, requestMap);\n\n      log.info(\"Successfully applied buffered updates on : \" + subShardNames);\n\n      // Replica creation for the new Slices\n      // replica placement is controlled by the autoscaling policy framework\n\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      // TODO: Have maxShardsPerNode param for this operation?\n\n      // Remove the node that hosts the parent shard for replica creation.\n      nodeList.remove(nodeName);\n\n      // TODO: change this to handle sharding a slice into > 2 sub-shards.\n\n      // we have already created one subReplica for each subShard on the parent node.\n      // identify locations for the remaining replicas\n      if (firstNrtReplica) {\n        numNrt.decrementAndGet();\n      } else {\n        numTlog.decrementAndGet();\n      }\n\n      List<ReplicaPosition> replicaPositions = Assign.identifyNodes(ocmh.cloudManager,\n          clusterState,\n          new ArrayList<>(clusterState.getLiveNodes()),\n          collectionName,\n          new ZkNodeProps(collection.getProperties()),\n          subSlices, numNrt.get(), numTlog.get(), numPull.get());\n      sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = Assign.buildSolrCoreName(collectionName, sliceName, replicaPosition.type, replicaPosition.index);\n\n        log.info(\"Creating replica shard \" + solrCoreName + \" as part of slice \" + sliceName + \" of collection \"\n            + collectionName + \" on \" + subShardNodeName);\n\n        // we first create all replicas in DOWN state without actually creating their cores in order to\n        // avoid a race condition where Overseer may prematurely activate the new sub-slices (and deactivate\n        // the parent slice) before all new replicas are added. This situation may lead to a loss of performance\n        // because the new shards will be activated with possibly many fewer replicas.\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.REPLICA_TYPE, replicaPosition.type.name(),\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(subShardNodeName),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(REPLICA_TYPE, replicaPosition.type.name());\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        // special flag param to instruct addReplica not to create the replica in cluster state again\n        propMap.put(OverseerCollectionMessageHandler.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      // compare against the ephemeralOwner of the parent leader node\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        // put sub-shards in recovery_failed state\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n\n        if (leaderZnodeStat == null)  {\n          // the leader is not live anymore, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else if (ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n          // there's a new leader, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      // we must set the slice state into recovery before actually creating the replica cores\n      // this ensures that the logic inside Overseer to update sub-shard state to 'active'\n      // always gets a chance to execute. See SOLR-7673\n\n      if (repFactor == 1) {\n        // switch sub shard states to 'active'\n        log.info(\"Replication factor is 1 so switching shard states\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      } else {\n        log.info(\"Requesting shard state be set to 'recovery'\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      }\n\n      // now actually create replica cores on sub shard nodes\n      for (Map<String, Object> replica : replicas) {\n        ocmh.addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      assert TestInjection.injectSplitFailureAfterReplicaCreation();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard replicas\", asyncId, requestMap);\n\n      log.info(\"Successfully created all replica shards for all sub-slices \" + subSlices);\n\n      ocmh.commit(results, slice.get(), parentShardLeader);\n\n      return true;\n    } catch (SolrException e) {\n      cleanupAfterFailure(zkStateReader, collectionName, parentSlice.getName(), subSlices);\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: \" + collectionName + \" parent shard: \" + slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (sessionWrapper != null) sessionWrapper.release();\n    }\n  }\n\n","sourceOld":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String collectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    log.info(\"Split shard invoked\");\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n\n    // find the leader for the shard\n    Replica parentShardLeader = null;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n\n    // let's record the ephemeralOwner of the parent leader node\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      // we just got to know the leader but its live node is gone already!\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    String rangesStr = fillRanges(ocmh.cloudManager, message, collection, parentSlice, subRanges, subSlices, subShardNames);\n\n    try {\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY) {\n            // delete the shards\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"deleteshard\");\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              ocmh.commandMap.get(DELETESHARD).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        // refresh the locally cached cluster state\n        // we know we have the latest because otherwise deleteshard would have failed\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      final String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = new HashMap<>();\n      String nodeName = parentShardLeader.getNodeName();\n\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.info(\"Creating slice \" + subSlice + \" of collection \" + collectionName + \" on \" + nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", parentShardLeader.getNodeName());\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n\n        // wait until we are able to see the new shard in cluster state\n        ocmh.waitForNewShard(collectionName, subSlice);\n\n        // refresh cluster state\n        clusterState = zkStateReader.getClusterState();\n\n        log.info(\"Adding replica \" + subShardName + \" as part of slice \" + subSlice + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        ocmh.addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n      ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard leaders\", asyncId, requestMap);\n\n      for (String subShardName : subShardNames) {\n        // wait for parent leader to acknowledge the sub-shard core\n        log.info(\"Asking parent leader to wait for: \" + subShardName + \" to be alive on: \" + nodeName);\n        String coreNodeName = ocmh.waitForCoreNodeName(collectionName, nodeName, subShardName);\n        CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n        cmd.setCoreName(subShardName);\n        cmd.setNodeName(nodeName);\n        cmd.setCoreNodeName(coreNodeName);\n        cmd.setState(Replica.State.ACTIVE);\n        cmd.setCheckLive(true);\n        cmd.setOnlyIfLeader(true);\n\n        ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n        ocmh.sendShardRequest(nodeName, p, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD timed out waiting for subshard leaders to come up\",\n          asyncId, requestMap);\n\n      log.info(\"Successfully created all sub-shards for collection \" + collectionName + \" parent shard: \" + slice\n          + \" on: \" + parentShardLeader);\n\n      log.info(\"Splitting shard \" + parentShardLeader.getName() + \" as part of slice \" + slice + \" of collection \"\n          + collectionName + \" on \" + parentShardLeader);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      ocmh.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to invoke SPLIT core admin command\", asyncId,\n          requestMap);\n\n      log.info(\"Index on shard: \" + nodeName + \" split into two successfully\");\n\n      // apply buffered updates on sub-shards\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n\n        log.info(\"Applying buffered updates on : \" + subShardName);\n\n        params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n        params.set(CoreAdminParams.NAME, subShardName);\n\n        ocmh.sendShardRequest(nodeName, params, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed while asking sub shard leaders\" +\n          \" to apply buffered updates\", asyncId, requestMap);\n\n      log.info(\"Successfully applied buffered updates on : \" + subShardNames);\n\n      // Replica creation for the new Slices\n\n      // look at the replication factor and see if it matches reality\n      // if it does not, find best nodes to create more cores\n\n      // TODO: Have replication factor decided in some other way instead of numShards for the parent\n\n      int repFactor = parentSlice.getReplicas().size();\n\n      // we need to look at every node and see how many cores it serves\n      // add our new cores to existing nodes serving the least number of cores\n      // but (for now) require that each core goes on a distinct node.\n\n      // TODO: add smarter options that look at the current number of cores per\n      // node?\n      // for now we just go random\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      // TODO: Have maxShardsPerNode param for this operation?\n\n      // Remove the node that hosts the parent shard for replica creation.\n      nodeList.remove(nodeName);\n\n      // TODO: change this to handle sharding a slice into > 2 sub-shards.\n\n      List<ReplicaPosition> replicaPositions = Assign.identifyNodes(ocmh.cloudManager,\n          clusterState,\n          new ArrayList<>(clusterState.getLiveNodes()),\n          collectionName,\n          new ZkNodeProps(collection.getProperties()),\n          subSlices, repFactor - 1, 0, 0);\n      sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n\n      List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = collectionName + \"_\" + sliceName + \"_replica\" + (replicaPosition.index);\n\n        log.info(\"Creating replica shard \" + solrCoreName + \" as part of slice \" + sliceName + \" of collection \"\n            + collectionName + \" on \" + subShardNodeName);\n\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(subShardNodeName),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        // special flag param to instruct addReplica not to create the replica in cluster state again\n        propMap.put(OverseerCollectionMessageHandler.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      // compare against the ephemeralOwner of the parent leader node\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        // put sub-shards in recovery_failed state\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n\n        if (leaderZnodeStat == null)  {\n          // the leader is not live anymore, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else if (ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n          // there's a new leader, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      // we must set the slice state into recovery before actually creating the replica cores\n      // this ensures that the logic inside Overseer to update sub-shard state to 'active'\n      // always gets a chance to execute. See SOLR-7673\n\n      if (repFactor == 1) {\n        // switch sub shard states to 'active'\n        log.info(\"Replication factor is 1 so switching shard states\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      } else {\n        log.info(\"Requesting shard state be set to 'recovery'\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      }\n\n      // now actually create replica cores on sub shard nodes\n      for (Map<String, Object> replica : replicas) {\n        ocmh.addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard replicas\", asyncId, requestMap);\n\n      log.info(\"Successfully created all replica shards for all sub-slices \" + subSlices);\n\n      ocmh.commit(results, slice.get(), parentShardLeader);\n\n      return true;\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: \" + collectionName + \" parent shard: \" + slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (sessionWrapper != null) sessionWrapper.release();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20c968c14aace7cf49843bf2c1fafc7fd3845659","date":1533133859,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#split(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#split(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String methodStr = message.getStr(CommonAdminParams.SPLIT_METHOD, SolrIndexSplitter.SplitMethod.REWRITE.toLower());\n    SolrIndexSplitter.SplitMethod splitMethod = SolrIndexSplitter.SplitMethod.get(methodStr);\n    if (splitMethod == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown value '\" + CommonAdminParams.SPLIT_METHOD +\n          \": \" + methodStr);\n    }\n    boolean withTiming = message.getBool(CommonParams.TIMING, false);\n\n    String collectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    log.debug(\"Split shard invoked: {}\", message);\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n    Set<String> offlineSlices = new HashSet<>();\n    RTimerTree timings = new RTimerTree();\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n    if (parentSlice.getState() != Slice.State.ACTIVE) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Parent slice is not active: \" + parentSlice.getState());\n    }\n\n    // find the leader for the shard\n    Replica parentShardLeader = null;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted.\");\n    }\n\n    RTimerTree t = timings.sub(\"checkDiskSpace\");\n    checkDiskSpace(collectionName, slice.get(), parentShardLeader);\n    t.stop();\n\n    // let's record the ephemeralOwner of the parent leader node\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      // we just got to know the leader but its live node is gone already!\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    // reproduce the currently existing number of replicas per type\n    AtomicInteger numNrt = new AtomicInteger();\n    AtomicInteger numTlog = new AtomicInteger();\n    AtomicInteger numPull = new AtomicInteger();\n    parentSlice.getReplicas().forEach(r -> {\n      switch (r.getType()) {\n        case NRT:\n          numNrt.incrementAndGet();\n          break;\n        case TLOG:\n          numTlog.incrementAndGet();\n          break;\n        case PULL:\n          numPull.incrementAndGet();\n      }\n    });\n    int repFactor = numNrt.get() + numTlog.get() + numPull.get();\n\n    boolean success = false;\n    try {\n      // type of the first subreplica will be the same as leader\n      boolean firstNrtReplica = parentShardLeader.getType() == Replica.Type.NRT;\n      // verify that we indeed have the right number of correct replica types\n      if ((firstNrtReplica && numNrt.get() < 1) || (!firstNrtReplica && numTlog.get() < 1)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"aborting split - inconsistent replica types in collection \" + collectionName +\n            \": nrt=\" + numNrt.get() + \", tlog=\" + numTlog.get() + \", pull=\" + numPull.get() + \", shard leader type is \" +\n            parentShardLeader.getType());\n      }\n\n      List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n      t = timings.sub(\"fillRanges\");\n      String rangesStr = fillRanges(ocmh.cloudManager, message, collection, parentSlice, subRanges, subSlices, subShardNames, firstNrtReplica);\n      t.stop();\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else {\n            // delete the shards\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"deleteshard\");\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              ocmh.commandMap.get(DELETESHARD).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        // refresh the locally cached cluster state\n        // we know we have the latest because otherwise deleteshard would have failed\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      final String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = new HashMap<>();\n      String nodeName = parentShardLeader.getNodeName();\n\n      t = timings.sub(\"createSubSlicesAndLeadersInState\");\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.debug(\"Creating slice \" + subSlice + \" of collection \" + collectionName + \" on \" + nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", nodeName);\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n\n        // wait until we are able to see the new shard in cluster state\n        ocmh.waitForNewShard(collectionName, subSlice);\n\n        // refresh cluster state\n        clusterState = zkStateReader.getClusterState();\n\n        log.debug(\"Adding first replica \" + subShardName + \" as part of slice \" + subSlice + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(REPLICA_TYPE, firstNrtReplica ? Replica.Type.NRT.toString() : Replica.Type.TLOG.toString());\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        ocmh.addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n      ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard leaders\", asyncId, requestMap);\n\n      t.stop();\n      t = timings.sub(\"waitForSubSliceLeadersAlive\");\n      for (String subShardName : subShardNames) {\n        // wait for parent leader to acknowledge the sub-shard core\n        log.debug(\"Asking parent leader to wait for: \" + subShardName + \" to be alive on: \" + nodeName);\n        String coreNodeName = ocmh.waitForCoreNodeName(collectionName, nodeName, subShardName);\n        CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n        cmd.setCoreName(subShardName);\n        cmd.setNodeName(nodeName);\n        cmd.setCoreNodeName(coreNodeName);\n        cmd.setState(Replica.State.ACTIVE);\n        cmd.setCheckLive(true);\n        cmd.setOnlyIfLeader(true);\n\n        ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n        ocmh.sendShardRequest(nodeName, p, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD timed out waiting for subshard leaders to come up\",\n          asyncId, requestMap);\n      t.stop();\n\n      log.debug(\"Successfully created all sub-shards for collection \" + collectionName + \" parent shard: \" + slice\n          + \" on: \" + parentShardLeader);\n\n      log.info(\"Splitting shard \" + parentShardLeader.getName() + \" as part of slice \" + slice + \" of collection \"\n          + collectionName + \" on \" + parentShardLeader);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CommonAdminParams.SPLIT_METHOD, splitMethod.toLower());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      t = timings.sub(\"splitParentCore\");\n\n      ocmh.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to invoke SPLIT core admin command\", asyncId,\n          requestMap);\n      t.stop();\n\n      log.debug(\"Index on shard: \" + nodeName + \" split into two successfully\");\n\n      t = timings.sub(\"applyBufferedUpdates\");\n      // apply buffered updates on sub-shards\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n\n        log.debug(\"Applying buffered updates on : \" + subShardName);\n\n        params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n        params.set(CoreAdminParams.NAME, subShardName);\n\n        ocmh.sendShardRequest(nodeName, params, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed while asking sub shard leaders\" +\n          \" to apply buffered updates\", asyncId, requestMap);\n      t.stop();\n\n      log.debug(\"Successfully applied buffered updates on : \" + subShardNames);\n\n      // Replica creation for the new Slices\n      // replica placement is controlled by the autoscaling policy framework\n\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      // TODO: Have maxShardsPerNode param for this operation?\n\n      // Remove the node that hosts the parent shard for replica creation.\n      nodeList.remove(nodeName);\n\n      // TODO: change this to handle sharding a slice into > 2 sub-shards.\n\n      // we have already created one subReplica for each subShard on the parent node.\n      // identify locations for the remaining replicas\n      if (firstNrtReplica) {\n        numNrt.decrementAndGet();\n      } else {\n        numTlog.decrementAndGet();\n      }\n\n      t = timings.sub(\"identifyNodesForReplicas\");\n      List<ReplicaPosition> replicaPositions = Assign.identifyNodes(ocmh.cloudManager,\n          clusterState,\n          new ArrayList<>(clusterState.getLiveNodes()),\n          collectionName,\n          new ZkNodeProps(collection.getProperties()),\n          subSlices, numNrt.get(), numTlog.get(), numPull.get());\n      sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n      t.stop();\n\n      t = timings.sub(\"createReplicaPlaceholders\");\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = Assign.buildSolrCoreName(collectionName, sliceName, replicaPosition.type, replicaPosition.index);\n\n        log.debug(\"Creating replica shard \" + solrCoreName + \" as part of slice \" + sliceName + \" of collection \"\n            + collectionName + \" on \" + subShardNodeName);\n\n        // we first create all replicas in DOWN state without actually creating their cores in order to\n        // avoid a race condition where Overseer may prematurely activate the new sub-slices (and deactivate\n        // the parent slice) before all new replicas are added. This situation may lead to a loss of performance\n        // because the new shards will be activated with possibly many fewer replicas.\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.REPLICA_TYPE, replicaPosition.type.name(),\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(subShardNodeName),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(REPLICA_TYPE, replicaPosition.type.name());\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        // special flag param to instruct addReplica not to create the replica in cluster state again\n        propMap.put(OverseerCollectionMessageHandler.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n      t.stop();\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      // compare against the ephemeralOwner of the parent leader node\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        // put sub-shards in recovery_failed state\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n\n        if (leaderZnodeStat == null)  {\n          // the leader is not live anymore, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else if (ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n          // there's a new leader, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      // we must set the slice state into recovery before actually creating the replica cores\n      // this ensures that the logic inside ReplicaMutator to update sub-shard state to 'active'\n      // always gets a chance to execute. See SOLR-7673\n\n      if (repFactor == 1) {\n        // switch sub shard states to 'active'\n        log.debug(\"Replication factor is 1 so switching shard states\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      } else {\n        log.debug(\"Requesting shard state be set to 'recovery'\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      }\n\n      t = timings.sub(\"createCoresForReplicas\");\n      // now actually create replica cores on sub shard nodes\n      for (Map<String, Object> replica : replicas) {\n        ocmh.addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      assert TestInjection.injectSplitFailureAfterReplicaCreation();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard replicas\", asyncId, requestMap);\n      t.stop();\n\n      log.info(\"Successfully created all replica shards for all sub-slices \" + subSlices);\n\n      t = timings.sub(\"finalCommit\");\n      ocmh.commit(results, slice.get(), parentShardLeader);\n      t.stop();\n      if (withTiming) {\n        results.add(CommonParams.TIMING, timings.asNamedList());\n      }\n      success = true;\n      return true;\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: \" + collectionName + \" parent shard: \" + slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (sessionWrapper != null) sessionWrapper.release();\n      if (!success) {\n        cleanupAfterFailure(zkStateReader, collectionName, parentSlice.getName(), subSlices, offlineSlices);\n      }\n    }\n  }\n\n","sourceOld":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String collectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    log.info(\"Split shard invoked\");\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n\n    // find the leader for the shard\n    Replica parentShardLeader = null;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted.\");\n    }\n\n    checkDiskSpace(collectionName, slice.get(), parentShardLeader);\n\n    // let's record the ephemeralOwner of the parent leader node\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      // we just got to know the leader but its live node is gone already!\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    // reproduce the currently existing number of replicas per type\n    AtomicInteger numNrt = new AtomicInteger();\n    AtomicInteger numTlog = new AtomicInteger();\n    AtomicInteger numPull = new AtomicInteger();\n    parentSlice.getReplicas().forEach(r -> {\n      switch (r.getType()) {\n        case NRT:\n          numNrt.incrementAndGet();\n          break;\n        case TLOG:\n          numTlog.incrementAndGet();\n          break;\n        case PULL:\n          numPull.incrementAndGet();\n      }\n    });\n    int repFactor = numNrt.get() + numTlog.get() + numPull.get();\n\n    // type of the first subreplica will be the same as leader\n    boolean firstNrtReplica = parentShardLeader.getType() == Replica.Type.NRT;\n    // verify that we indeed have the right number of correct replica types\n    if ((firstNrtReplica && numNrt.get() < 1) || (!firstNrtReplica && numTlog.get() < 1)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"aborting split - inconsistent replica types in collection \" + collectionName +\n          \": nrt=\" + numNrt.get() + \", tlog=\" + numTlog.get() + \", pull=\" + numPull.get() + \", shard leader type is \" +\n      parentShardLeader.getType());\n    }\n\n    List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n    String rangesStr = fillRanges(ocmh.cloudManager, message, collection, parentSlice, subRanges, subSlices, subShardNames, firstNrtReplica);\n\n    try {\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else {\n            // delete the shards\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"deleteshard\");\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              ocmh.commandMap.get(DELETESHARD).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        // refresh the locally cached cluster state\n        // we know we have the latest because otherwise deleteshard would have failed\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      final String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = new HashMap<>();\n      String nodeName = parentShardLeader.getNodeName();\n\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.info(\"Creating slice \" + subSlice + \" of collection \" + collectionName + \" on \" + nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", parentShardLeader.getNodeName());\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n\n        // wait until we are able to see the new shard in cluster state\n        ocmh.waitForNewShard(collectionName, subSlice);\n\n        // refresh cluster state\n        clusterState = zkStateReader.getClusterState();\n\n        log.info(\"Adding replica \" + subShardName + \" as part of slice \" + subSlice + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(REPLICA_TYPE, firstNrtReplica ? Replica.Type.NRT.toString() : Replica.Type.TLOG.toString());\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        ocmh.addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n      ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard leaders\", asyncId, requestMap);\n\n      for (String subShardName : subShardNames) {\n        // wait for parent leader to acknowledge the sub-shard core\n        log.info(\"Asking parent leader to wait for: \" + subShardName + \" to be alive on: \" + nodeName);\n        String coreNodeName = ocmh.waitForCoreNodeName(collectionName, nodeName, subShardName);\n        CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n        cmd.setCoreName(subShardName);\n        cmd.setNodeName(nodeName);\n        cmd.setCoreNodeName(coreNodeName);\n        cmd.setState(Replica.State.ACTIVE);\n        cmd.setCheckLive(true);\n        cmd.setOnlyIfLeader(true);\n\n        ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n        ocmh.sendShardRequest(nodeName, p, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD timed out waiting for subshard leaders to come up\",\n          asyncId, requestMap);\n\n      log.info(\"Successfully created all sub-shards for collection \" + collectionName + \" parent shard: \" + slice\n          + \" on: \" + parentShardLeader);\n\n      log.info(\"Splitting shard \" + parentShardLeader.getName() + \" as part of slice \" + slice + \" of collection \"\n          + collectionName + \" on \" + parentShardLeader);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      ocmh.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to invoke SPLIT core admin command\", asyncId,\n          requestMap);\n\n      log.info(\"Index on shard: \" + nodeName + \" split into two successfully\");\n\n      // apply buffered updates on sub-shards\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n\n        log.info(\"Applying buffered updates on : \" + subShardName);\n\n        params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n        params.set(CoreAdminParams.NAME, subShardName);\n\n        ocmh.sendShardRequest(nodeName, params, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed while asking sub shard leaders\" +\n          \" to apply buffered updates\", asyncId, requestMap);\n\n      log.info(\"Successfully applied buffered updates on : \" + subShardNames);\n\n      // Replica creation for the new Slices\n      // replica placement is controlled by the autoscaling policy framework\n\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      // TODO: Have maxShardsPerNode param for this operation?\n\n      // Remove the node that hosts the parent shard for replica creation.\n      nodeList.remove(nodeName);\n\n      // TODO: change this to handle sharding a slice into > 2 sub-shards.\n\n      // we have already created one subReplica for each subShard on the parent node.\n      // identify locations for the remaining replicas\n      if (firstNrtReplica) {\n        numNrt.decrementAndGet();\n      } else {\n        numTlog.decrementAndGet();\n      }\n\n      List<ReplicaPosition> replicaPositions = Assign.identifyNodes(ocmh.cloudManager,\n          clusterState,\n          new ArrayList<>(clusterState.getLiveNodes()),\n          collectionName,\n          new ZkNodeProps(collection.getProperties()),\n          subSlices, numNrt.get(), numTlog.get(), numPull.get());\n      sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = Assign.buildSolrCoreName(collectionName, sliceName, replicaPosition.type, replicaPosition.index);\n\n        log.info(\"Creating replica shard \" + solrCoreName + \" as part of slice \" + sliceName + \" of collection \"\n            + collectionName + \" on \" + subShardNodeName);\n\n        // we first create all replicas in DOWN state without actually creating their cores in order to\n        // avoid a race condition where Overseer may prematurely activate the new sub-slices (and deactivate\n        // the parent slice) before all new replicas are added. This situation may lead to a loss of performance\n        // because the new shards will be activated with possibly many fewer replicas.\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.REPLICA_TYPE, replicaPosition.type.name(),\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(subShardNodeName),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(REPLICA_TYPE, replicaPosition.type.name());\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        // special flag param to instruct addReplica not to create the replica in cluster state again\n        propMap.put(OverseerCollectionMessageHandler.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      // compare against the ephemeralOwner of the parent leader node\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        // put sub-shards in recovery_failed state\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n\n        if (leaderZnodeStat == null)  {\n          // the leader is not live anymore, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else if (ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n          // there's a new leader, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      // we must set the slice state into recovery before actually creating the replica cores\n      // this ensures that the logic inside Overseer to update sub-shard state to 'active'\n      // always gets a chance to execute. See SOLR-7673\n\n      if (repFactor == 1) {\n        // switch sub shard states to 'active'\n        log.info(\"Replication factor is 1 so switching shard states\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      } else {\n        log.info(\"Requesting shard state be set to 'recovery'\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      }\n\n      // now actually create replica cores on sub shard nodes\n      for (Map<String, Object> replica : replicas) {\n        ocmh.addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      assert TestInjection.injectSplitFailureAfterReplicaCreation();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard replicas\", asyncId, requestMap);\n\n      log.info(\"Successfully created all replica shards for all sub-slices \" + subSlices);\n\n      ocmh.commit(results, slice.get(), parentShardLeader);\n\n      return true;\n    } catch (SolrException e) {\n      cleanupAfterFailure(zkStateReader, collectionName, parentSlice.getName(), subSlices);\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: \" + collectionName + \" parent shard: \" + slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (sessionWrapper != null) sessionWrapper.release();\n    }\n  }\n\n","bugFix":null,"bugIntro":["8a8f0700353755635a948651e84c152bff39d8dc","8a8f0700353755635a948651e84c152bff39d8dc","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea","date":1538045138,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#split(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#split(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String methodStr = message.getStr(CommonAdminParams.SPLIT_METHOD, SolrIndexSplitter.SplitMethod.REWRITE.toLower());\n    SolrIndexSplitter.SplitMethod splitMethod = SolrIndexSplitter.SplitMethod.get(methodStr);\n    if (splitMethod == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown value '\" + CommonAdminParams.SPLIT_METHOD +\n          \": \" + methodStr);\n    }\n    boolean withTiming = message.getBool(CommonParams.TIMING, false);\n\n    String collectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    log.debug(\"Split shard invoked: {}\", message);\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n    Set<String> offlineSlices = new HashSet<>();\n    RTimerTree timings = new RTimerTree();\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n    if (parentSlice.getState() != Slice.State.ACTIVE) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Parent slice is not active: \" + parentSlice.getState());\n    }\n\n    // find the leader for the shard\n    Replica parentShardLeader = null;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted.\");\n    }\n\n    RTimerTree t = timings.sub(\"checkDiskSpace\");\n    checkDiskSpace(collectionName, slice.get(), parentShardLeader);\n    t.stop();\n\n    // let's record the ephemeralOwner of the parent leader node\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      // we just got to know the leader but its live node is gone already!\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    // reproduce the currently existing number of replicas per type\n    AtomicInteger numNrt = new AtomicInteger();\n    AtomicInteger numTlog = new AtomicInteger();\n    AtomicInteger numPull = new AtomicInteger();\n    parentSlice.getReplicas().forEach(r -> {\n      switch (r.getType()) {\n        case NRT:\n          numNrt.incrementAndGet();\n          break;\n        case TLOG:\n          numTlog.incrementAndGet();\n          break;\n        case PULL:\n          numPull.incrementAndGet();\n      }\n    });\n    int repFactor = numNrt.get() + numTlog.get() + numPull.get();\n\n    boolean success = false;\n    try {\n      // type of the first subreplica will be the same as leader\n      boolean firstNrtReplica = parentShardLeader.getType() == Replica.Type.NRT;\n      // verify that we indeed have the right number of correct replica types\n      if ((firstNrtReplica && numNrt.get() < 1) || (!firstNrtReplica && numTlog.get() < 1)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"aborting split - inconsistent replica types in collection \" + collectionName +\n            \": nrt=\" + numNrt.get() + \", tlog=\" + numTlog.get() + \", pull=\" + numPull.get() + \", shard leader type is \" +\n            parentShardLeader.getType());\n      }\n\n      List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n      t = timings.sub(\"fillRanges\");\n      String rangesStr = fillRanges(ocmh.cloudManager, message, collection, parentSlice, subRanges, subSlices, subShardNames, firstNrtReplica);\n      t.stop();\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else {\n            // delete the shards\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"deleteshard\");\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              ocmh.commandMap.get(DELETESHARD).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        // refresh the locally cached cluster state\n        // we know we have the latest because otherwise deleteshard would have failed\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      final String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = new HashMap<>();\n      String nodeName = parentShardLeader.getNodeName();\n\n      t = timings.sub(\"createSubSlicesAndLeadersInState\");\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.debug(\"Creating slice \" + subSlice + \" of collection \" + collectionName + \" on \" + nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", nodeName);\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n\n        // wait until we are able to see the new shard in cluster state\n        ocmh.waitForNewShard(collectionName, subSlice);\n\n        // refresh cluster state\n        clusterState = zkStateReader.getClusterState();\n\n        log.debug(\"Adding first replica \" + subShardName + \" as part of slice \" + subSlice + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(REPLICA_TYPE, firstNrtReplica ? Replica.Type.NRT.toString() : Replica.Type.TLOG.toString());\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        ocmh.addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n      ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard leaders\", asyncId, requestMap);\n\n      t.stop();\n      t = timings.sub(\"waitForSubSliceLeadersAlive\");\n      for (String subShardName : subShardNames) {\n        // wait for parent leader to acknowledge the sub-shard core\n        log.debug(\"Asking parent leader to wait for: \" + subShardName + \" to be alive on: \" + nodeName);\n        String coreNodeName = ocmh.waitForCoreNodeName(collectionName, nodeName, subShardName);\n        CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n        cmd.setCoreName(subShardName);\n        cmd.setNodeName(nodeName);\n        cmd.setCoreNodeName(coreNodeName);\n        cmd.setState(Replica.State.ACTIVE);\n        cmd.setCheckLive(true);\n        cmd.setOnlyIfLeader(true);\n\n        ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n        ocmh.sendShardRequest(nodeName, p, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD timed out waiting for subshard leaders to come up\",\n          asyncId, requestMap);\n      t.stop();\n\n      log.debug(\"Successfully created all sub-shards for collection \" + collectionName + \" parent shard: \" + slice\n          + \" on: \" + parentShardLeader);\n\n      log.info(\"Splitting shard \" + parentShardLeader.getName() + \" as part of slice \" + slice + \" of collection \"\n          + collectionName + \" on \" + parentShardLeader);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CommonAdminParams.SPLIT_METHOD, splitMethod.toLower());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      t = timings.sub(\"splitParentCore\");\n\n      ocmh.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to invoke SPLIT core admin command\", asyncId,\n          requestMap);\n      t.stop();\n\n      log.debug(\"Index on shard: \" + nodeName + \" split into two successfully\");\n\n      t = timings.sub(\"applyBufferedUpdates\");\n      // apply buffered updates on sub-shards\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n\n        log.debug(\"Applying buffered updates on : \" + subShardName);\n\n        params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n        params.set(CoreAdminParams.NAME, subShardName);\n\n        ocmh.sendShardRequest(nodeName, params, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed while asking sub shard leaders\" +\n          \" to apply buffered updates\", asyncId, requestMap);\n      t.stop();\n\n      log.debug(\"Successfully applied buffered updates on : \" + subShardNames);\n\n      // Replica creation for the new Slices\n      // replica placement is controlled by the autoscaling policy framework\n\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      // TODO: Have maxShardsPerNode param for this operation?\n\n      // Remove the node that hosts the parent shard for replica creation.\n      nodeList.remove(nodeName);\n\n      // TODO: change this to handle sharding a slice into > 2 sub-shards.\n\n      // we have already created one subReplica for each subShard on the parent node.\n      // identify locations for the remaining replicas\n      if (firstNrtReplica) {\n        numNrt.decrementAndGet();\n      } else {\n        numTlog.decrementAndGet();\n      }\n\n      t = timings.sub(\"identifyNodesForReplicas\");\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(subSlices)\n          .assignNrtReplicas(numNrt.get())\n          .assignTlogReplicas(numTlog.get())\n          .assignPullReplicas(numPull.get())\n          .onNodes(new ArrayList<>(clusterState.getLiveNodes()))\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(ocmh.cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, collection);\n      List<ReplicaPosition> replicaPositions = assignStrategy.assign(ocmh.cloudManager, assignRequest);\n      sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n      t.stop();\n\n      t = timings.sub(\"createReplicaPlaceholders\");\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = Assign.buildSolrCoreName(collectionName, sliceName, replicaPosition.type, replicaPosition.index);\n\n        log.debug(\"Creating replica shard \" + solrCoreName + \" as part of slice \" + sliceName + \" of collection \"\n            + collectionName + \" on \" + subShardNodeName);\n\n        // we first create all replicas in DOWN state without actually creating their cores in order to\n        // avoid a race condition where Overseer may prematurely activate the new sub-slices (and deactivate\n        // the parent slice) before all new replicas are added. This situation may lead to a loss of performance\n        // because the new shards will be activated with possibly many fewer replicas.\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.REPLICA_TYPE, replicaPosition.type.name(),\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(subShardNodeName),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(REPLICA_TYPE, replicaPosition.type.name());\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        // special flag param to instruct addReplica not to create the replica in cluster state again\n        propMap.put(OverseerCollectionMessageHandler.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n      t.stop();\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      // compare against the ephemeralOwner of the parent leader node\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        // put sub-shards in recovery_failed state\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n\n        if (leaderZnodeStat == null)  {\n          // the leader is not live anymore, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else if (ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n          // there's a new leader, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      // we must set the slice state into recovery before actually creating the replica cores\n      // this ensures that the logic inside ReplicaMutator to update sub-shard state to 'active'\n      // always gets a chance to execute. See SOLR-7673\n\n      if (repFactor == 1) {\n        // switch sub shard states to 'active'\n        log.debug(\"Replication factor is 1 so switching shard states\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      } else {\n        log.debug(\"Requesting shard state be set to 'recovery'\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      }\n\n      t = timings.sub(\"createCoresForReplicas\");\n      // now actually create replica cores on sub shard nodes\n      for (Map<String, Object> replica : replicas) {\n        ocmh.addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      assert TestInjection.injectSplitFailureAfterReplicaCreation();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard replicas\", asyncId, requestMap);\n      t.stop();\n\n      log.info(\"Successfully created all replica shards for all sub-slices \" + subSlices);\n\n      t = timings.sub(\"finalCommit\");\n      ocmh.commit(results, slice.get(), parentShardLeader);\n      t.stop();\n      if (withTiming) {\n        results.add(CommonParams.TIMING, timings.asNamedList());\n      }\n      success = true;\n      return true;\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: \" + collectionName + \" parent shard: \" + slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (sessionWrapper != null) sessionWrapper.release();\n      if (!success) {\n        cleanupAfterFailure(zkStateReader, collectionName, parentSlice.getName(), subSlices, offlineSlices);\n      }\n    }\n  }\n\n","sourceOld":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String methodStr = message.getStr(CommonAdminParams.SPLIT_METHOD, SolrIndexSplitter.SplitMethod.REWRITE.toLower());\n    SolrIndexSplitter.SplitMethod splitMethod = SolrIndexSplitter.SplitMethod.get(methodStr);\n    if (splitMethod == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown value '\" + CommonAdminParams.SPLIT_METHOD +\n          \": \" + methodStr);\n    }\n    boolean withTiming = message.getBool(CommonParams.TIMING, false);\n\n    String collectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    log.debug(\"Split shard invoked: {}\", message);\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n    Set<String> offlineSlices = new HashSet<>();\n    RTimerTree timings = new RTimerTree();\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n    if (parentSlice.getState() != Slice.State.ACTIVE) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Parent slice is not active: \" + parentSlice.getState());\n    }\n\n    // find the leader for the shard\n    Replica parentShardLeader = null;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted.\");\n    }\n\n    RTimerTree t = timings.sub(\"checkDiskSpace\");\n    checkDiskSpace(collectionName, slice.get(), parentShardLeader);\n    t.stop();\n\n    // let's record the ephemeralOwner of the parent leader node\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      // we just got to know the leader but its live node is gone already!\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    // reproduce the currently existing number of replicas per type\n    AtomicInteger numNrt = new AtomicInteger();\n    AtomicInteger numTlog = new AtomicInteger();\n    AtomicInteger numPull = new AtomicInteger();\n    parentSlice.getReplicas().forEach(r -> {\n      switch (r.getType()) {\n        case NRT:\n          numNrt.incrementAndGet();\n          break;\n        case TLOG:\n          numTlog.incrementAndGet();\n          break;\n        case PULL:\n          numPull.incrementAndGet();\n      }\n    });\n    int repFactor = numNrt.get() + numTlog.get() + numPull.get();\n\n    boolean success = false;\n    try {\n      // type of the first subreplica will be the same as leader\n      boolean firstNrtReplica = parentShardLeader.getType() == Replica.Type.NRT;\n      // verify that we indeed have the right number of correct replica types\n      if ((firstNrtReplica && numNrt.get() < 1) || (!firstNrtReplica && numTlog.get() < 1)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"aborting split - inconsistent replica types in collection \" + collectionName +\n            \": nrt=\" + numNrt.get() + \", tlog=\" + numTlog.get() + \", pull=\" + numPull.get() + \", shard leader type is \" +\n            parentShardLeader.getType());\n      }\n\n      List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n      t = timings.sub(\"fillRanges\");\n      String rangesStr = fillRanges(ocmh.cloudManager, message, collection, parentSlice, subRanges, subSlices, subShardNames, firstNrtReplica);\n      t.stop();\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else {\n            // delete the shards\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"deleteshard\");\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              ocmh.commandMap.get(DELETESHARD).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        // refresh the locally cached cluster state\n        // we know we have the latest because otherwise deleteshard would have failed\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      final String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = new HashMap<>();\n      String nodeName = parentShardLeader.getNodeName();\n\n      t = timings.sub(\"createSubSlicesAndLeadersInState\");\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.debug(\"Creating slice \" + subSlice + \" of collection \" + collectionName + \" on \" + nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", nodeName);\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n\n        // wait until we are able to see the new shard in cluster state\n        ocmh.waitForNewShard(collectionName, subSlice);\n\n        // refresh cluster state\n        clusterState = zkStateReader.getClusterState();\n\n        log.debug(\"Adding first replica \" + subShardName + \" as part of slice \" + subSlice + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(REPLICA_TYPE, firstNrtReplica ? Replica.Type.NRT.toString() : Replica.Type.TLOG.toString());\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        ocmh.addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n      ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard leaders\", asyncId, requestMap);\n\n      t.stop();\n      t = timings.sub(\"waitForSubSliceLeadersAlive\");\n      for (String subShardName : subShardNames) {\n        // wait for parent leader to acknowledge the sub-shard core\n        log.debug(\"Asking parent leader to wait for: \" + subShardName + \" to be alive on: \" + nodeName);\n        String coreNodeName = ocmh.waitForCoreNodeName(collectionName, nodeName, subShardName);\n        CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n        cmd.setCoreName(subShardName);\n        cmd.setNodeName(nodeName);\n        cmd.setCoreNodeName(coreNodeName);\n        cmd.setState(Replica.State.ACTIVE);\n        cmd.setCheckLive(true);\n        cmd.setOnlyIfLeader(true);\n\n        ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n        ocmh.sendShardRequest(nodeName, p, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD timed out waiting for subshard leaders to come up\",\n          asyncId, requestMap);\n      t.stop();\n\n      log.debug(\"Successfully created all sub-shards for collection \" + collectionName + \" parent shard: \" + slice\n          + \" on: \" + parentShardLeader);\n\n      log.info(\"Splitting shard \" + parentShardLeader.getName() + \" as part of slice \" + slice + \" of collection \"\n          + collectionName + \" on \" + parentShardLeader);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CommonAdminParams.SPLIT_METHOD, splitMethod.toLower());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      t = timings.sub(\"splitParentCore\");\n\n      ocmh.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to invoke SPLIT core admin command\", asyncId,\n          requestMap);\n      t.stop();\n\n      log.debug(\"Index on shard: \" + nodeName + \" split into two successfully\");\n\n      t = timings.sub(\"applyBufferedUpdates\");\n      // apply buffered updates on sub-shards\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n\n        log.debug(\"Applying buffered updates on : \" + subShardName);\n\n        params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n        params.set(CoreAdminParams.NAME, subShardName);\n\n        ocmh.sendShardRequest(nodeName, params, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed while asking sub shard leaders\" +\n          \" to apply buffered updates\", asyncId, requestMap);\n      t.stop();\n\n      log.debug(\"Successfully applied buffered updates on : \" + subShardNames);\n\n      // Replica creation for the new Slices\n      // replica placement is controlled by the autoscaling policy framework\n\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      // TODO: Have maxShardsPerNode param for this operation?\n\n      // Remove the node that hosts the parent shard for replica creation.\n      nodeList.remove(nodeName);\n\n      // TODO: change this to handle sharding a slice into > 2 sub-shards.\n\n      // we have already created one subReplica for each subShard on the parent node.\n      // identify locations for the remaining replicas\n      if (firstNrtReplica) {\n        numNrt.decrementAndGet();\n      } else {\n        numTlog.decrementAndGet();\n      }\n\n      t = timings.sub(\"identifyNodesForReplicas\");\n      List<ReplicaPosition> replicaPositions = Assign.identifyNodes(ocmh.cloudManager,\n          clusterState,\n          new ArrayList<>(clusterState.getLiveNodes()),\n          collectionName,\n          new ZkNodeProps(collection.getProperties()),\n          subSlices, numNrt.get(), numTlog.get(), numPull.get());\n      sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n      t.stop();\n\n      t = timings.sub(\"createReplicaPlaceholders\");\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = Assign.buildSolrCoreName(collectionName, sliceName, replicaPosition.type, replicaPosition.index);\n\n        log.debug(\"Creating replica shard \" + solrCoreName + \" as part of slice \" + sliceName + \" of collection \"\n            + collectionName + \" on \" + subShardNodeName);\n\n        // we first create all replicas in DOWN state without actually creating their cores in order to\n        // avoid a race condition where Overseer may prematurely activate the new sub-slices (and deactivate\n        // the parent slice) before all new replicas are added. This situation may lead to a loss of performance\n        // because the new shards will be activated with possibly many fewer replicas.\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.REPLICA_TYPE, replicaPosition.type.name(),\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(subShardNodeName),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(REPLICA_TYPE, replicaPosition.type.name());\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        // special flag param to instruct addReplica not to create the replica in cluster state again\n        propMap.put(OverseerCollectionMessageHandler.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n      t.stop();\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      // compare against the ephemeralOwner of the parent leader node\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        // put sub-shards in recovery_failed state\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n\n        if (leaderZnodeStat == null)  {\n          // the leader is not live anymore, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else if (ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n          // there's a new leader, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      // we must set the slice state into recovery before actually creating the replica cores\n      // this ensures that the logic inside ReplicaMutator to update sub-shard state to 'active'\n      // always gets a chance to execute. See SOLR-7673\n\n      if (repFactor == 1) {\n        // switch sub shard states to 'active'\n        log.debug(\"Replication factor is 1 so switching shard states\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      } else {\n        log.debug(\"Requesting shard state be set to 'recovery'\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      }\n\n      t = timings.sub(\"createCoresForReplicas\");\n      // now actually create replica cores on sub shard nodes\n      for (Map<String, Object> replica : replicas) {\n        ocmh.addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      assert TestInjection.injectSplitFailureAfterReplicaCreation();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard replicas\", asyncId, requestMap);\n      t.stop();\n\n      log.info(\"Successfully created all replica shards for all sub-slices \" + subSlices);\n\n      t = timings.sub(\"finalCommit\");\n      ocmh.commit(results, slice.get(), parentShardLeader);\n      t.stop();\n      if (withTiming) {\n        results.add(CommonParams.TIMING, timings.asNamedList());\n      }\n      success = true;\n      return true;\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: \" + collectionName + \" parent shard: \" + slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (sessionWrapper != null) sessionWrapper.release();\n      if (!success) {\n        cleanupAfterFailure(zkStateReader, collectionName, parentSlice.getName(), subSlices, offlineSlices);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae70f2df00762dfce0455c0e39381848762662e5","date":1539113410,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#split(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#split(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String methodStr = message.getStr(CommonAdminParams.SPLIT_METHOD, SolrIndexSplitter.SplitMethod.REWRITE.toLower());\n    SolrIndexSplitter.SplitMethod splitMethod = SolrIndexSplitter.SplitMethod.get(methodStr);\n    if (splitMethod == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown value '\" + CommonAdminParams.SPLIT_METHOD +\n          \": \" + methodStr);\n    }\n    boolean withTiming = message.getBool(CommonParams.TIMING, false);\n\n    String collectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    log.debug(\"Split shard invoked: {}\", message);\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n    Set<String> offlineSlices = new HashSet<>();\n    RTimerTree timings = new RTimerTree();\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n    if (parentSlice.getState() != Slice.State.ACTIVE) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Parent slice is not active: \" +\n          collectionName + \"/ \" + parentSlice.getName() + \", state=\" + parentSlice.getState());\n    }\n\n    // find the leader for the shard\n    Replica parentShardLeader = null;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted.\");\n    }\n\n    RTimerTree t = timings.sub(\"checkDiskSpace\");\n    checkDiskSpace(collectionName, slice.get(), parentShardLeader);\n    t.stop();\n\n    // let's record the ephemeralOwner of the parent leader node\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      // we just got to know the leader but its live node is gone already!\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    // reproduce the currently existing number of replicas per type\n    AtomicInteger numNrt = new AtomicInteger();\n    AtomicInteger numTlog = new AtomicInteger();\n    AtomicInteger numPull = new AtomicInteger();\n    parentSlice.getReplicas().forEach(r -> {\n      switch (r.getType()) {\n        case NRT:\n          numNrt.incrementAndGet();\n          break;\n        case TLOG:\n          numTlog.incrementAndGet();\n          break;\n        case PULL:\n          numPull.incrementAndGet();\n      }\n    });\n    int repFactor = numNrt.get() + numTlog.get() + numPull.get();\n\n    boolean success = false;\n    try {\n      // type of the first subreplica will be the same as leader\n      boolean firstNrtReplica = parentShardLeader.getType() == Replica.Type.NRT;\n      // verify that we indeed have the right number of correct replica types\n      if ((firstNrtReplica && numNrt.get() < 1) || (!firstNrtReplica && numTlog.get() < 1)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"aborting split - inconsistent replica types in collection \" + collectionName +\n            \": nrt=\" + numNrt.get() + \", tlog=\" + numTlog.get() + \", pull=\" + numPull.get() + \", shard leader type is \" +\n            parentShardLeader.getType());\n      }\n\n      // check for the lock\n      if (!lockForSplit(ocmh.cloudManager, collectionName, parentSlice.getName())) {\n        // mark as success to avoid clearing the lock in the \"finally\" block\n        success = true;\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Can't lock parent slice for splitting (another split operation running?): \" +\n            collectionName + \"/\" + parentSlice.getName());\n      }\n\n      List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n      t = timings.sub(\"fillRanges\");\n      String rangesStr = fillRanges(ocmh.cloudManager, message, collection, parentSlice, subRanges, subSlices, subShardNames, firstNrtReplica);\n      t.stop();\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else {\n            // delete the shards\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"deleteshard\");\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              ocmh.commandMap.get(DELETESHARD).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        // refresh the locally cached cluster state\n        // we know we have the latest because otherwise deleteshard would have failed\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      final String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = new HashMap<>();\n      String nodeName = parentShardLeader.getNodeName();\n\n      t = timings.sub(\"createSubSlicesAndLeadersInState\");\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.debug(\"Creating slice \" + subSlice + \" of collection \" + collectionName + \" on \" + nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", nodeName);\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n\n        // wait until we are able to see the new shard in cluster state\n        ocmh.waitForNewShard(collectionName, subSlice);\n\n        // refresh cluster state\n        clusterState = zkStateReader.getClusterState();\n\n        log.debug(\"Adding first replica \" + subShardName + \" as part of slice \" + subSlice + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(REPLICA_TYPE, firstNrtReplica ? Replica.Type.NRT.toString() : Replica.Type.TLOG.toString());\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        ocmh.addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n      ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard leaders\", asyncId, requestMap);\n\n      t.stop();\n      t = timings.sub(\"waitForSubSliceLeadersAlive\");\n      for (String subShardName : subShardNames) {\n        // wait for parent leader to acknowledge the sub-shard core\n        log.debug(\"Asking parent leader to wait for: \" + subShardName + \" to be alive on: \" + nodeName);\n        String coreNodeName = ocmh.waitForCoreNodeName(collectionName, nodeName, subShardName);\n        CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n        cmd.setCoreName(subShardName);\n        cmd.setNodeName(nodeName);\n        cmd.setCoreNodeName(coreNodeName);\n        cmd.setState(Replica.State.ACTIVE);\n        cmd.setCheckLive(true);\n        cmd.setOnlyIfLeader(true);\n\n        ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n        ocmh.sendShardRequest(nodeName, p, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD timed out waiting for subshard leaders to come up\",\n          asyncId, requestMap);\n      t.stop();\n\n      log.debug(\"Successfully created all sub-shards for collection \" + collectionName + \" parent shard: \" + slice\n          + \" on: \" + parentShardLeader);\n\n      log.info(\"Splitting shard \" + parentShardLeader.getName() + \" as part of slice \" + slice + \" of collection \"\n          + collectionName + \" on \" + parentShardLeader);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CommonAdminParams.SPLIT_METHOD, splitMethod.toLower());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      t = timings.sub(\"splitParentCore\");\n\n      ocmh.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to invoke SPLIT core admin command\", asyncId,\n          requestMap);\n      t.stop();\n\n      log.debug(\"Index on shard: \" + nodeName + \" split into two successfully\");\n\n      t = timings.sub(\"applyBufferedUpdates\");\n      // apply buffered updates on sub-shards\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n\n        log.debug(\"Applying buffered updates on : \" + subShardName);\n\n        params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n        params.set(CoreAdminParams.NAME, subShardName);\n\n        ocmh.sendShardRequest(nodeName, params, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed while asking sub shard leaders\" +\n          \" to apply buffered updates\", asyncId, requestMap);\n      t.stop();\n\n      log.debug(\"Successfully applied buffered updates on : \" + subShardNames);\n\n      // Replica creation for the new Slices\n      // replica placement is controlled by the autoscaling policy framework\n\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      // TODO: Have maxShardsPerNode param for this operation?\n\n      // Remove the node that hosts the parent shard for replica creation.\n      nodeList.remove(nodeName);\n\n      // TODO: change this to handle sharding a slice into > 2 sub-shards.\n\n      // we have already created one subReplica for each subShard on the parent node.\n      // identify locations for the remaining replicas\n      if (firstNrtReplica) {\n        numNrt.decrementAndGet();\n      } else {\n        numTlog.decrementAndGet();\n      }\n\n      t = timings.sub(\"identifyNodesForReplicas\");\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(subSlices)\n          .assignNrtReplicas(numNrt.get())\n          .assignTlogReplicas(numTlog.get())\n          .assignPullReplicas(numPull.get())\n          .onNodes(new ArrayList<>(clusterState.getLiveNodes()))\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(ocmh.cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, collection);\n      List<ReplicaPosition> replicaPositions = assignStrategy.assign(ocmh.cloudManager, assignRequest);\n      sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n      t.stop();\n\n      t = timings.sub(\"createReplicaPlaceholders\");\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = Assign.buildSolrCoreName(collectionName, sliceName, replicaPosition.type, replicaPosition.index);\n\n        log.debug(\"Creating replica shard \" + solrCoreName + \" as part of slice \" + sliceName + \" of collection \"\n            + collectionName + \" on \" + subShardNodeName);\n\n        // we first create all replicas in DOWN state without actually creating their cores in order to\n        // avoid a race condition where Overseer may prematurely activate the new sub-slices (and deactivate\n        // the parent slice) before all new replicas are added. This situation may lead to a loss of performance\n        // because the new shards will be activated with possibly many fewer replicas.\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.REPLICA_TYPE, replicaPosition.type.name(),\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(subShardNodeName),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(REPLICA_TYPE, replicaPosition.type.name());\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        // special flag param to instruct addReplica not to create the replica in cluster state again\n        propMap.put(OverseerCollectionMessageHandler.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n      t.stop();\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      // compare against the ephemeralOwner of the parent leader node\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        // put sub-shards in recovery_failed state\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n\n        if (leaderZnodeStat == null)  {\n          // the leader is not live anymore, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else if (ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n          // there's a new leader, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      // we must set the slice state into recovery before actually creating the replica cores\n      // this ensures that the logic inside ReplicaMutator to update sub-shard state to 'active'\n      // always gets a chance to execute. See SOLR-7673\n\n      if (repFactor == 1) {\n        // switch sub shard states to 'active'\n        log.debug(\"Replication factor is 1 so switching shard states\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      } else {\n        log.debug(\"Requesting shard state be set to 'recovery'\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      }\n\n      t = timings.sub(\"createCoresForReplicas\");\n      // now actually create replica cores on sub shard nodes\n      for (Map<String, Object> replica : replicas) {\n        ocmh.addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      assert TestInjection.injectSplitFailureAfterReplicaCreation();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard replicas\", asyncId, requestMap);\n      t.stop();\n\n      log.info(\"Successfully created all replica shards for all sub-slices \" + subSlices);\n\n      t = timings.sub(\"finalCommit\");\n      ocmh.commit(results, slice.get(), parentShardLeader);\n      t.stop();\n      if (withTiming) {\n        results.add(CommonParams.TIMING, timings.asNamedList());\n      }\n      success = true;\n      // don't unlock the shard yet - only do this if the final switch-over in\n      // ReplicaMutator succeeds (or fails)\n      return true;\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: \" + collectionName + \" parent shard: \" + slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (sessionWrapper != null) sessionWrapper.release();\n      if (!success) {\n        cleanupAfterFailure(zkStateReader, collectionName, parentSlice.getName(), subSlices, offlineSlices);\n        unlockForSplit(ocmh.cloudManager, collectionName, parentSlice.getName());\n      }\n    }\n  }\n\n","sourceOld":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String methodStr = message.getStr(CommonAdminParams.SPLIT_METHOD, SolrIndexSplitter.SplitMethod.REWRITE.toLower());\n    SolrIndexSplitter.SplitMethod splitMethod = SolrIndexSplitter.SplitMethod.get(methodStr);\n    if (splitMethod == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown value '\" + CommonAdminParams.SPLIT_METHOD +\n          \": \" + methodStr);\n    }\n    boolean withTiming = message.getBool(CommonParams.TIMING, false);\n\n    String collectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    log.debug(\"Split shard invoked: {}\", message);\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n    Set<String> offlineSlices = new HashSet<>();\n    RTimerTree timings = new RTimerTree();\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n    if (parentSlice.getState() != Slice.State.ACTIVE) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Parent slice is not active: \" + parentSlice.getState());\n    }\n\n    // find the leader for the shard\n    Replica parentShardLeader = null;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted.\");\n    }\n\n    RTimerTree t = timings.sub(\"checkDiskSpace\");\n    checkDiskSpace(collectionName, slice.get(), parentShardLeader);\n    t.stop();\n\n    // let's record the ephemeralOwner of the parent leader node\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      // we just got to know the leader but its live node is gone already!\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    // reproduce the currently existing number of replicas per type\n    AtomicInteger numNrt = new AtomicInteger();\n    AtomicInteger numTlog = new AtomicInteger();\n    AtomicInteger numPull = new AtomicInteger();\n    parentSlice.getReplicas().forEach(r -> {\n      switch (r.getType()) {\n        case NRT:\n          numNrt.incrementAndGet();\n          break;\n        case TLOG:\n          numTlog.incrementAndGet();\n          break;\n        case PULL:\n          numPull.incrementAndGet();\n      }\n    });\n    int repFactor = numNrt.get() + numTlog.get() + numPull.get();\n\n    boolean success = false;\n    try {\n      // type of the first subreplica will be the same as leader\n      boolean firstNrtReplica = parentShardLeader.getType() == Replica.Type.NRT;\n      // verify that we indeed have the right number of correct replica types\n      if ((firstNrtReplica && numNrt.get() < 1) || (!firstNrtReplica && numTlog.get() < 1)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"aborting split - inconsistent replica types in collection \" + collectionName +\n            \": nrt=\" + numNrt.get() + \", tlog=\" + numTlog.get() + \", pull=\" + numPull.get() + \", shard leader type is \" +\n            parentShardLeader.getType());\n      }\n\n      List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n      t = timings.sub(\"fillRanges\");\n      String rangesStr = fillRanges(ocmh.cloudManager, message, collection, parentSlice, subRanges, subSlices, subShardNames, firstNrtReplica);\n      t.stop();\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else {\n            // delete the shards\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"deleteshard\");\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              ocmh.commandMap.get(DELETESHARD).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        // refresh the locally cached cluster state\n        // we know we have the latest because otherwise deleteshard would have failed\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      final String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = new HashMap<>();\n      String nodeName = parentShardLeader.getNodeName();\n\n      t = timings.sub(\"createSubSlicesAndLeadersInState\");\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.debug(\"Creating slice \" + subSlice + \" of collection \" + collectionName + \" on \" + nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", nodeName);\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n\n        // wait until we are able to see the new shard in cluster state\n        ocmh.waitForNewShard(collectionName, subSlice);\n\n        // refresh cluster state\n        clusterState = zkStateReader.getClusterState();\n\n        log.debug(\"Adding first replica \" + subShardName + \" as part of slice \" + subSlice + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(REPLICA_TYPE, firstNrtReplica ? Replica.Type.NRT.toString() : Replica.Type.TLOG.toString());\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        ocmh.addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n      ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard leaders\", asyncId, requestMap);\n\n      t.stop();\n      t = timings.sub(\"waitForSubSliceLeadersAlive\");\n      for (String subShardName : subShardNames) {\n        // wait for parent leader to acknowledge the sub-shard core\n        log.debug(\"Asking parent leader to wait for: \" + subShardName + \" to be alive on: \" + nodeName);\n        String coreNodeName = ocmh.waitForCoreNodeName(collectionName, nodeName, subShardName);\n        CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n        cmd.setCoreName(subShardName);\n        cmd.setNodeName(nodeName);\n        cmd.setCoreNodeName(coreNodeName);\n        cmd.setState(Replica.State.ACTIVE);\n        cmd.setCheckLive(true);\n        cmd.setOnlyIfLeader(true);\n\n        ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n        ocmh.sendShardRequest(nodeName, p, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD timed out waiting for subshard leaders to come up\",\n          asyncId, requestMap);\n      t.stop();\n\n      log.debug(\"Successfully created all sub-shards for collection \" + collectionName + \" parent shard: \" + slice\n          + \" on: \" + parentShardLeader);\n\n      log.info(\"Splitting shard \" + parentShardLeader.getName() + \" as part of slice \" + slice + \" of collection \"\n          + collectionName + \" on \" + parentShardLeader);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CommonAdminParams.SPLIT_METHOD, splitMethod.toLower());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      t = timings.sub(\"splitParentCore\");\n\n      ocmh.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to invoke SPLIT core admin command\", asyncId,\n          requestMap);\n      t.stop();\n\n      log.debug(\"Index on shard: \" + nodeName + \" split into two successfully\");\n\n      t = timings.sub(\"applyBufferedUpdates\");\n      // apply buffered updates on sub-shards\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n\n        log.debug(\"Applying buffered updates on : \" + subShardName);\n\n        params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n        params.set(CoreAdminParams.NAME, subShardName);\n\n        ocmh.sendShardRequest(nodeName, params, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed while asking sub shard leaders\" +\n          \" to apply buffered updates\", asyncId, requestMap);\n      t.stop();\n\n      log.debug(\"Successfully applied buffered updates on : \" + subShardNames);\n\n      // Replica creation for the new Slices\n      // replica placement is controlled by the autoscaling policy framework\n\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      // TODO: Have maxShardsPerNode param for this operation?\n\n      // Remove the node that hosts the parent shard for replica creation.\n      nodeList.remove(nodeName);\n\n      // TODO: change this to handle sharding a slice into > 2 sub-shards.\n\n      // we have already created one subReplica for each subShard on the parent node.\n      // identify locations for the remaining replicas\n      if (firstNrtReplica) {\n        numNrt.decrementAndGet();\n      } else {\n        numTlog.decrementAndGet();\n      }\n\n      t = timings.sub(\"identifyNodesForReplicas\");\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(subSlices)\n          .assignNrtReplicas(numNrt.get())\n          .assignTlogReplicas(numTlog.get())\n          .assignPullReplicas(numPull.get())\n          .onNodes(new ArrayList<>(clusterState.getLiveNodes()))\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(ocmh.cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, collection);\n      List<ReplicaPosition> replicaPositions = assignStrategy.assign(ocmh.cloudManager, assignRequest);\n      sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n      t.stop();\n\n      t = timings.sub(\"createReplicaPlaceholders\");\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = Assign.buildSolrCoreName(collectionName, sliceName, replicaPosition.type, replicaPosition.index);\n\n        log.debug(\"Creating replica shard \" + solrCoreName + \" as part of slice \" + sliceName + \" of collection \"\n            + collectionName + \" on \" + subShardNodeName);\n\n        // we first create all replicas in DOWN state without actually creating their cores in order to\n        // avoid a race condition where Overseer may prematurely activate the new sub-slices (and deactivate\n        // the parent slice) before all new replicas are added. This situation may lead to a loss of performance\n        // because the new shards will be activated with possibly many fewer replicas.\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.REPLICA_TYPE, replicaPosition.type.name(),\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(subShardNodeName),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(REPLICA_TYPE, replicaPosition.type.name());\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        // special flag param to instruct addReplica not to create the replica in cluster state again\n        propMap.put(OverseerCollectionMessageHandler.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n      t.stop();\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      // compare against the ephemeralOwner of the parent leader node\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        // put sub-shards in recovery_failed state\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n\n        if (leaderZnodeStat == null)  {\n          // the leader is not live anymore, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else if (ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n          // there's a new leader, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      // we must set the slice state into recovery before actually creating the replica cores\n      // this ensures that the logic inside ReplicaMutator to update sub-shard state to 'active'\n      // always gets a chance to execute. See SOLR-7673\n\n      if (repFactor == 1) {\n        // switch sub shard states to 'active'\n        log.debug(\"Replication factor is 1 so switching shard states\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      } else {\n        log.debug(\"Requesting shard state be set to 'recovery'\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      }\n\n      t = timings.sub(\"createCoresForReplicas\");\n      // now actually create replica cores on sub shard nodes\n      for (Map<String, Object> replica : replicas) {\n        ocmh.addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      assert TestInjection.injectSplitFailureAfterReplicaCreation();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard replicas\", asyncId, requestMap);\n      t.stop();\n\n      log.info(\"Successfully created all replica shards for all sub-slices \" + subSlices);\n\n      t = timings.sub(\"finalCommit\");\n      ocmh.commit(results, slice.get(), parentShardLeader);\n      t.stop();\n      if (withTiming) {\n        results.add(CommonParams.TIMING, timings.asNamedList());\n      }\n      success = true;\n      return true;\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: \" + collectionName + \" parent shard: \" + slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (sessionWrapper != null) sessionWrapper.release();\n      if (!success) {\n        cleanupAfterFailure(zkStateReader, collectionName, parentSlice.getName(), subSlices, offlineSlices);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"beea534dfd393d03270d1508d61d6b5edc2df27f","date":1540245684,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#split(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#split(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String methodStr = message.getStr(CommonAdminParams.SPLIT_METHOD, SolrIndexSplitter.SplitMethod.REWRITE.toLower());\n    SolrIndexSplitter.SplitMethod splitMethod = SolrIndexSplitter.SplitMethod.get(methodStr);\n    if (splitMethod == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown value '\" + CommonAdminParams.SPLIT_METHOD +\n          \": \" + methodStr);\n    }\n    boolean withTiming = message.getBool(CommonParams.TIMING, false);\n\n    String collectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    log.debug(\"Split shard invoked: {}\", message);\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n    Set<String> offlineSlices = new HashSet<>();\n    RTimerTree timings = new RTimerTree();\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n    if (parentSlice.getState() != Slice.State.ACTIVE) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Parent slice is not active: \" +\n          collectionName + \"/ \" + parentSlice.getName() + \", state=\" + parentSlice.getState());\n    }\n\n    // find the leader for the shard\n    Replica parentShardLeader;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted.\");\n    }\n\n    RTimerTree t = timings.sub(\"checkDiskSpace\");\n    checkDiskSpace(collectionName, slice.get(), parentShardLeader);\n    t.stop();\n\n    // let's record the ephemeralOwner of the parent leader node\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      // we just got to know the leader but its live node is gone already!\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    // reproduce the currently existing number of replicas per type\n    AtomicInteger numNrt = new AtomicInteger();\n    AtomicInteger numTlog = new AtomicInteger();\n    AtomicInteger numPull = new AtomicInteger();\n    parentSlice.getReplicas().forEach(r -> {\n      switch (r.getType()) {\n        case NRT:\n          numNrt.incrementAndGet();\n          break;\n        case TLOG:\n          numTlog.incrementAndGet();\n          break;\n        case PULL:\n          numPull.incrementAndGet();\n      }\n    });\n    int repFactor = numNrt.get() + numTlog.get() + numPull.get();\n\n    boolean success = false;\n    try {\n      // type of the first subreplica will be the same as leader\n      boolean firstNrtReplica = parentShardLeader.getType() == Replica.Type.NRT;\n      // verify that we indeed have the right number of correct replica types\n      if ((firstNrtReplica && numNrt.get() < 1) || (!firstNrtReplica && numTlog.get() < 1)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"aborting split - inconsistent replica types in collection \" + collectionName +\n            \": nrt=\" + numNrt.get() + \", tlog=\" + numTlog.get() + \", pull=\" + numPull.get() + \", shard leader type is \" +\n            parentShardLeader.getType());\n      }\n\n      // check for the lock\n      if (!lockForSplit(ocmh.cloudManager, collectionName, parentSlice.getName())) {\n        // mark as success to avoid clearing the lock in the \"finally\" block\n        success = true;\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Can't lock parent slice for splitting (another split operation running?): \" +\n            collectionName + \"/\" + parentSlice.getName());\n      }\n\n      List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n      t = timings.sub(\"fillRanges\");\n      String rangesStr = fillRanges(ocmh.cloudManager, message, collection, parentSlice, subRanges, subSlices, subShardNames, firstNrtReplica);\n      t.stop();\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else {\n            // delete the shards\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"deleteshard\");\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              ocmh.commandMap.get(DELETESHARD).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        // refresh the locally cached cluster state\n        // we know we have the latest because otherwise deleteshard would have failed\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      final String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = new HashMap<>();\n      String nodeName = parentShardLeader.getNodeName();\n\n      t = timings.sub(\"createSubSlicesAndLeadersInState\");\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.debug(\"Creating slice \" + subSlice + \" of collection \" + collectionName + \" on \" + nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", nodeName);\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n\n        // wait until we are able to see the new shard in cluster state\n        ocmh.waitForNewShard(collectionName, subSlice);\n\n        // refresh cluster state\n        clusterState = zkStateReader.getClusterState();\n\n        log.debug(\"Adding first replica \" + subShardName + \" as part of slice \" + subSlice + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(REPLICA_TYPE, firstNrtReplica ? Replica.Type.NRT.toString() : Replica.Type.TLOG.toString());\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        ocmh.addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n      ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard leaders\", asyncId, requestMap);\n\n      t.stop();\n      t = timings.sub(\"waitForSubSliceLeadersAlive\");\n      for (String subShardName : subShardNames) {\n        // wait for parent leader to acknowledge the sub-shard core\n        log.debug(\"Asking parent leader to wait for: \" + subShardName + \" to be alive on: \" + nodeName);\n        String coreNodeName = ocmh.waitForCoreNodeName(collectionName, nodeName, subShardName);\n        CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n        cmd.setCoreName(subShardName);\n        cmd.setNodeName(nodeName);\n        cmd.setCoreNodeName(coreNodeName);\n        cmd.setState(Replica.State.ACTIVE);\n        cmd.setCheckLive(true);\n        cmd.setOnlyIfLeader(true);\n\n        ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n        ocmh.sendShardRequest(nodeName, p, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD timed out waiting for subshard leaders to come up\",\n          asyncId, requestMap);\n      t.stop();\n\n      log.debug(\"Successfully created all sub-shards for collection \" + collectionName + \" parent shard: \" + slice\n          + \" on: \" + parentShardLeader);\n\n      log.info(\"Splitting shard \" + parentShardLeader.getName() + \" as part of slice \" + slice + \" of collection \"\n          + collectionName + \" on \" + parentShardLeader);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CommonAdminParams.SPLIT_METHOD, splitMethod.toLower());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      t = timings.sub(\"splitParentCore\");\n\n      ocmh.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to invoke SPLIT core admin command\", asyncId,\n          requestMap);\n      t.stop();\n\n      log.debug(\"Index on shard: {} split into {} successfully\", nodeName, subShardNames.size());\n\n      t = timings.sub(\"applyBufferedUpdates\");\n      // apply buffered updates on sub-shards\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n\n        log.debug(\"Applying buffered updates on : \" + subShardName);\n\n        params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n        params.set(CoreAdminParams.NAME, subShardName);\n\n        ocmh.sendShardRequest(nodeName, params, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed while asking sub shard leaders\" +\n          \" to apply buffered updates\", asyncId, requestMap);\n      t.stop();\n\n      log.debug(\"Successfully applied buffered updates on : \" + subShardNames);\n\n      // Replica creation for the new Slices\n      // replica placement is controlled by the autoscaling policy framework\n\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      // TODO: Have maxShardsPerNode param for this operation?\n\n      // Remove the node that hosts the parent shard for replica creation.\n      nodeList.remove(nodeName);\n\n      // TODO: change this to handle sharding a slice into > 2 sub-shards.\n\n      // we have already created one subReplica for each subShard on the parent node.\n      // identify locations for the remaining replicas\n      if (firstNrtReplica) {\n        numNrt.decrementAndGet();\n      } else {\n        numTlog.decrementAndGet();\n      }\n\n      t = timings.sub(\"identifyNodesForReplicas\");\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(subSlices)\n          .assignNrtReplicas(numNrt.get())\n          .assignTlogReplicas(numTlog.get())\n          .assignPullReplicas(numPull.get())\n          .onNodes(new ArrayList<>(clusterState.getLiveNodes()))\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(ocmh.cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, collection);\n      List<ReplicaPosition> replicaPositions = assignStrategy.assign(ocmh.cloudManager, assignRequest);\n      sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n      t.stop();\n\n      t = timings.sub(\"createReplicaPlaceholders\");\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = Assign.buildSolrCoreName(collectionName, sliceName, replicaPosition.type, replicaPosition.index);\n\n        log.debug(\"Creating replica shard \" + solrCoreName + \" as part of slice \" + sliceName + \" of collection \"\n            + collectionName + \" on \" + subShardNodeName);\n\n        // we first create all replicas in DOWN state without actually creating their cores in order to\n        // avoid a race condition where Overseer may prematurely activate the new sub-slices (and deactivate\n        // the parent slice) before all new replicas are added. This situation may lead to a loss of performance\n        // because the new shards will be activated with possibly many fewer replicas.\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.REPLICA_TYPE, replicaPosition.type.name(),\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(subShardNodeName),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(REPLICA_TYPE, replicaPosition.type.name());\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        // special flag param to instruct addReplica not to create the replica in cluster state again\n        propMap.put(OverseerCollectionMessageHandler.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n      t.stop();\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      // compare against the ephemeralOwner of the parent leader node\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        // put sub-shards in recovery_failed state\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n\n        if (leaderZnodeStat == null)  {\n          // the leader is not live anymore, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else if (ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n          // there's a new leader, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      // we must set the slice state into recovery before actually creating the replica cores\n      // this ensures that the logic inside ReplicaMutator to update sub-shard state to 'active'\n      // always gets a chance to execute. See SOLR-7673\n\n      if (repFactor == 1) {\n        // switch sub shard states to 'active'\n        log.debug(\"Replication factor is 1 so switching shard states\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      } else {\n        log.debug(\"Requesting shard state be set to 'recovery'\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      }\n\n      t = timings.sub(\"createCoresForReplicas\");\n      // now actually create replica cores on sub shard nodes\n      for (Map<String, Object> replica : replicas) {\n        ocmh.addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      assert TestInjection.injectSplitFailureAfterReplicaCreation();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard replicas\", asyncId, requestMap);\n      t.stop();\n\n      log.info(\"Successfully created all replica shards for all sub-slices \" + subSlices);\n\n      t = timings.sub(\"finalCommit\");\n      ocmh.commit(results, slice.get(), parentShardLeader);\n      t.stop();\n      if (withTiming) {\n        results.add(CommonParams.TIMING, timings.asNamedList());\n      }\n      success = true;\n      // don't unlock the shard yet - only do this if the final switch-over in\n      // ReplicaMutator succeeds (or fails)\n      return true;\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: \" + collectionName + \" parent shard: \" + slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (sessionWrapper != null) sessionWrapper.release();\n      if (!success) {\n        cleanupAfterFailure(zkStateReader, collectionName, parentSlice.getName(), subSlices, offlineSlices);\n        unlockForSplit(ocmh.cloudManager, collectionName, parentSlice.getName());\n      }\n    }\n  }\n\n","sourceOld":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String methodStr = message.getStr(CommonAdminParams.SPLIT_METHOD, SolrIndexSplitter.SplitMethod.REWRITE.toLower());\n    SolrIndexSplitter.SplitMethod splitMethod = SolrIndexSplitter.SplitMethod.get(methodStr);\n    if (splitMethod == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown value '\" + CommonAdminParams.SPLIT_METHOD +\n          \": \" + methodStr);\n    }\n    boolean withTiming = message.getBool(CommonParams.TIMING, false);\n\n    String collectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    log.debug(\"Split shard invoked: {}\", message);\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n    Set<String> offlineSlices = new HashSet<>();\n    RTimerTree timings = new RTimerTree();\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n    if (parentSlice.getState() != Slice.State.ACTIVE) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Parent slice is not active: \" +\n          collectionName + \"/ \" + parentSlice.getName() + \", state=\" + parentSlice.getState());\n    }\n\n    // find the leader for the shard\n    Replica parentShardLeader = null;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted.\");\n    }\n\n    RTimerTree t = timings.sub(\"checkDiskSpace\");\n    checkDiskSpace(collectionName, slice.get(), parentShardLeader);\n    t.stop();\n\n    // let's record the ephemeralOwner of the parent leader node\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      // we just got to know the leader but its live node is gone already!\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    // reproduce the currently existing number of replicas per type\n    AtomicInteger numNrt = new AtomicInteger();\n    AtomicInteger numTlog = new AtomicInteger();\n    AtomicInteger numPull = new AtomicInteger();\n    parentSlice.getReplicas().forEach(r -> {\n      switch (r.getType()) {\n        case NRT:\n          numNrt.incrementAndGet();\n          break;\n        case TLOG:\n          numTlog.incrementAndGet();\n          break;\n        case PULL:\n          numPull.incrementAndGet();\n      }\n    });\n    int repFactor = numNrt.get() + numTlog.get() + numPull.get();\n\n    boolean success = false;\n    try {\n      // type of the first subreplica will be the same as leader\n      boolean firstNrtReplica = parentShardLeader.getType() == Replica.Type.NRT;\n      // verify that we indeed have the right number of correct replica types\n      if ((firstNrtReplica && numNrt.get() < 1) || (!firstNrtReplica && numTlog.get() < 1)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"aborting split - inconsistent replica types in collection \" + collectionName +\n            \": nrt=\" + numNrt.get() + \", tlog=\" + numTlog.get() + \", pull=\" + numPull.get() + \", shard leader type is \" +\n            parentShardLeader.getType());\n      }\n\n      // check for the lock\n      if (!lockForSplit(ocmh.cloudManager, collectionName, parentSlice.getName())) {\n        // mark as success to avoid clearing the lock in the \"finally\" block\n        success = true;\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Can't lock parent slice for splitting (another split operation running?): \" +\n            collectionName + \"/\" + parentSlice.getName());\n      }\n\n      List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n      t = timings.sub(\"fillRanges\");\n      String rangesStr = fillRanges(ocmh.cloudManager, message, collection, parentSlice, subRanges, subSlices, subShardNames, firstNrtReplica);\n      t.stop();\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else {\n            // delete the shards\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"deleteshard\");\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              ocmh.commandMap.get(DELETESHARD).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        // refresh the locally cached cluster state\n        // we know we have the latest because otherwise deleteshard would have failed\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      final String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = new HashMap<>();\n      String nodeName = parentShardLeader.getNodeName();\n\n      t = timings.sub(\"createSubSlicesAndLeadersInState\");\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.debug(\"Creating slice \" + subSlice + \" of collection \" + collectionName + \" on \" + nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", nodeName);\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n\n        // wait until we are able to see the new shard in cluster state\n        ocmh.waitForNewShard(collectionName, subSlice);\n\n        // refresh cluster state\n        clusterState = zkStateReader.getClusterState();\n\n        log.debug(\"Adding first replica \" + subShardName + \" as part of slice \" + subSlice + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(REPLICA_TYPE, firstNrtReplica ? Replica.Type.NRT.toString() : Replica.Type.TLOG.toString());\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        ocmh.addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n      ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard leaders\", asyncId, requestMap);\n\n      t.stop();\n      t = timings.sub(\"waitForSubSliceLeadersAlive\");\n      for (String subShardName : subShardNames) {\n        // wait for parent leader to acknowledge the sub-shard core\n        log.debug(\"Asking parent leader to wait for: \" + subShardName + \" to be alive on: \" + nodeName);\n        String coreNodeName = ocmh.waitForCoreNodeName(collectionName, nodeName, subShardName);\n        CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n        cmd.setCoreName(subShardName);\n        cmd.setNodeName(nodeName);\n        cmd.setCoreNodeName(coreNodeName);\n        cmd.setState(Replica.State.ACTIVE);\n        cmd.setCheckLive(true);\n        cmd.setOnlyIfLeader(true);\n\n        ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n        ocmh.sendShardRequest(nodeName, p, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD timed out waiting for subshard leaders to come up\",\n          asyncId, requestMap);\n      t.stop();\n\n      log.debug(\"Successfully created all sub-shards for collection \" + collectionName + \" parent shard: \" + slice\n          + \" on: \" + parentShardLeader);\n\n      log.info(\"Splitting shard \" + parentShardLeader.getName() + \" as part of slice \" + slice + \" of collection \"\n          + collectionName + \" on \" + parentShardLeader);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CommonAdminParams.SPLIT_METHOD, splitMethod.toLower());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      t = timings.sub(\"splitParentCore\");\n\n      ocmh.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to invoke SPLIT core admin command\", asyncId,\n          requestMap);\n      t.stop();\n\n      log.debug(\"Index on shard: \" + nodeName + \" split into two successfully\");\n\n      t = timings.sub(\"applyBufferedUpdates\");\n      // apply buffered updates on sub-shards\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n\n        log.debug(\"Applying buffered updates on : \" + subShardName);\n\n        params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n        params.set(CoreAdminParams.NAME, subShardName);\n\n        ocmh.sendShardRequest(nodeName, params, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed while asking sub shard leaders\" +\n          \" to apply buffered updates\", asyncId, requestMap);\n      t.stop();\n\n      log.debug(\"Successfully applied buffered updates on : \" + subShardNames);\n\n      // Replica creation for the new Slices\n      // replica placement is controlled by the autoscaling policy framework\n\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      // TODO: Have maxShardsPerNode param for this operation?\n\n      // Remove the node that hosts the parent shard for replica creation.\n      nodeList.remove(nodeName);\n\n      // TODO: change this to handle sharding a slice into > 2 sub-shards.\n\n      // we have already created one subReplica for each subShard on the parent node.\n      // identify locations for the remaining replicas\n      if (firstNrtReplica) {\n        numNrt.decrementAndGet();\n      } else {\n        numTlog.decrementAndGet();\n      }\n\n      t = timings.sub(\"identifyNodesForReplicas\");\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(subSlices)\n          .assignNrtReplicas(numNrt.get())\n          .assignTlogReplicas(numTlog.get())\n          .assignPullReplicas(numPull.get())\n          .onNodes(new ArrayList<>(clusterState.getLiveNodes()))\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(ocmh.cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, collection);\n      List<ReplicaPosition> replicaPositions = assignStrategy.assign(ocmh.cloudManager, assignRequest);\n      sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n      t.stop();\n\n      t = timings.sub(\"createReplicaPlaceholders\");\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = Assign.buildSolrCoreName(collectionName, sliceName, replicaPosition.type, replicaPosition.index);\n\n        log.debug(\"Creating replica shard \" + solrCoreName + \" as part of slice \" + sliceName + \" of collection \"\n            + collectionName + \" on \" + subShardNodeName);\n\n        // we first create all replicas in DOWN state without actually creating their cores in order to\n        // avoid a race condition where Overseer may prematurely activate the new sub-slices (and deactivate\n        // the parent slice) before all new replicas are added. This situation may lead to a loss of performance\n        // because the new shards will be activated with possibly many fewer replicas.\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.REPLICA_TYPE, replicaPosition.type.name(),\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(subShardNodeName),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(REPLICA_TYPE, replicaPosition.type.name());\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        // special flag param to instruct addReplica not to create the replica in cluster state again\n        propMap.put(OverseerCollectionMessageHandler.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n      t.stop();\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      // compare against the ephemeralOwner of the parent leader node\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        // put sub-shards in recovery_failed state\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n\n        if (leaderZnodeStat == null)  {\n          // the leader is not live anymore, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else if (ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n          // there's a new leader, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      // we must set the slice state into recovery before actually creating the replica cores\n      // this ensures that the logic inside ReplicaMutator to update sub-shard state to 'active'\n      // always gets a chance to execute. See SOLR-7673\n\n      if (repFactor == 1) {\n        // switch sub shard states to 'active'\n        log.debug(\"Replication factor is 1 so switching shard states\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      } else {\n        log.debug(\"Requesting shard state be set to 'recovery'\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      }\n\n      t = timings.sub(\"createCoresForReplicas\");\n      // now actually create replica cores on sub shard nodes\n      for (Map<String, Object> replica : replicas) {\n        ocmh.addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      assert TestInjection.injectSplitFailureAfterReplicaCreation();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard replicas\", asyncId, requestMap);\n      t.stop();\n\n      log.info(\"Successfully created all replica shards for all sub-slices \" + subSlices);\n\n      t = timings.sub(\"finalCommit\");\n      ocmh.commit(results, slice.get(), parentShardLeader);\n      t.stop();\n      if (withTiming) {\n        results.add(CommonParams.TIMING, timings.asNamedList());\n      }\n      success = true;\n      // don't unlock the shard yet - only do this if the final switch-over in\n      // ReplicaMutator succeeds (or fails)\n      return true;\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: \" + collectionName + \" parent shard: \" + slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (sessionWrapper != null) sessionWrapper.release();\n      if (!success) {\n        cleanupAfterFailure(zkStateReader, collectionName, parentSlice.getName(), subSlices, offlineSlices);\n        unlockForSplit(ocmh.cloudManager, collectionName, parentSlice.getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#split(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#split(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String methodStr = message.getStr(CommonAdminParams.SPLIT_METHOD, SolrIndexSplitter.SplitMethod.REWRITE.toLower());\n    SolrIndexSplitter.SplitMethod splitMethod = SolrIndexSplitter.SplitMethod.get(methodStr);\n    if (splitMethod == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown value '\" + CommonAdminParams.SPLIT_METHOD +\n          \": \" + methodStr);\n    }\n    boolean withTiming = message.getBool(CommonParams.TIMING, false);\n\n    String collectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    log.debug(\"Split shard invoked: {}\", message);\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n    Set<String> offlineSlices = new HashSet<>();\n    RTimerTree timings = new RTimerTree();\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n    if (parentSlice.getState() != Slice.State.ACTIVE) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Parent slice is not active: \" +\n          collectionName + \"/ \" + parentSlice.getName() + \", state=\" + parentSlice.getState());\n    }\n\n    // find the leader for the shard\n    Replica parentShardLeader;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted.\");\n    }\n\n    RTimerTree t = timings.sub(\"checkDiskSpace\");\n    checkDiskSpace(collectionName, slice.get(), parentShardLeader);\n    t.stop();\n\n    // let's record the ephemeralOwner of the parent leader node\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      // we just got to know the leader but its live node is gone already!\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    // reproduce the currently existing number of replicas per type\n    AtomicInteger numNrt = new AtomicInteger();\n    AtomicInteger numTlog = new AtomicInteger();\n    AtomicInteger numPull = new AtomicInteger();\n    parentSlice.getReplicas().forEach(r -> {\n      switch (r.getType()) {\n        case NRT:\n          numNrt.incrementAndGet();\n          break;\n        case TLOG:\n          numTlog.incrementAndGet();\n          break;\n        case PULL:\n          numPull.incrementAndGet();\n      }\n    });\n    int repFactor = numNrt.get() + numTlog.get() + numPull.get();\n\n    boolean success = false;\n    try {\n      // type of the first subreplica will be the same as leader\n      boolean firstNrtReplica = parentShardLeader.getType() == Replica.Type.NRT;\n      // verify that we indeed have the right number of correct replica types\n      if ((firstNrtReplica && numNrt.get() < 1) || (!firstNrtReplica && numTlog.get() < 1)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"aborting split - inconsistent replica types in collection \" + collectionName +\n            \": nrt=\" + numNrt.get() + \", tlog=\" + numTlog.get() + \", pull=\" + numPull.get() + \", shard leader type is \" +\n            parentShardLeader.getType());\n      }\n\n      // check for the lock\n      if (!lockForSplit(ocmh.cloudManager, collectionName, parentSlice.getName())) {\n        // mark as success to avoid clearing the lock in the \"finally\" block\n        success = true;\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Can't lock parent slice for splitting (another split operation running?): \" +\n            collectionName + \"/\" + parentSlice.getName());\n      }\n\n      List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n      t = timings.sub(\"fillRanges\");\n      String rangesStr = fillRanges(ocmh.cloudManager, message, collection, parentSlice, subRanges, subSlices, subShardNames, firstNrtReplica);\n      t.stop();\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else {\n            // delete the shards\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"deleteshard\");\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              ocmh.commandMap.get(DELETESHARD).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        // refresh the locally cached cluster state\n        // we know we have the latest because otherwise deleteshard would have failed\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      final String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = new HashMap<>();\n      String nodeName = parentShardLeader.getNodeName();\n\n      t = timings.sub(\"createSubSlicesAndLeadersInState\");\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.debug(\"Creating slice \" + subSlice + \" of collection \" + collectionName + \" on \" + nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", nodeName);\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(new ZkNodeProps(propMap)));\n\n        // wait until we are able to see the new shard in cluster state\n        ocmh.waitForNewShard(collectionName, subSlice);\n\n        // refresh cluster state\n        clusterState = zkStateReader.getClusterState();\n\n        log.debug(\"Adding first replica \" + subShardName + \" as part of slice \" + subSlice + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(REPLICA_TYPE, firstNrtReplica ? Replica.Type.NRT.toString() : Replica.Type.TLOG.toString());\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        ocmh.addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n      ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler(ocmh.overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient());\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard leaders\", asyncId, requestMap);\n\n      t.stop();\n      t = timings.sub(\"waitForSubSliceLeadersAlive\");\n      for (String subShardName : subShardNames) {\n        // wait for parent leader to acknowledge the sub-shard core\n        log.debug(\"Asking parent leader to wait for: \" + subShardName + \" to be alive on: \" + nodeName);\n        String coreNodeName = ocmh.waitForCoreNodeName(collectionName, nodeName, subShardName);\n        CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n        cmd.setCoreName(subShardName);\n        cmd.setNodeName(nodeName);\n        cmd.setCoreNodeName(coreNodeName);\n        cmd.setState(Replica.State.ACTIVE);\n        cmd.setCheckLive(true);\n        cmd.setOnlyIfLeader(true);\n\n        ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n        ocmh.sendShardRequest(nodeName, p, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD timed out waiting for subshard leaders to come up\",\n          asyncId, requestMap);\n      t.stop();\n\n      log.debug(\"Successfully created all sub-shards for collection \" + collectionName + \" parent shard: \" + slice\n          + \" on: \" + parentShardLeader);\n\n      log.info(\"Splitting shard \" + parentShardLeader.getName() + \" as part of slice \" + slice + \" of collection \"\n          + collectionName + \" on \" + parentShardLeader);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CommonAdminParams.SPLIT_METHOD, splitMethod.toLower());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      t = timings.sub(\"splitParentCore\");\n\n      ocmh.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to invoke SPLIT core admin command\", asyncId,\n          requestMap);\n      t.stop();\n\n      log.debug(\"Index on shard: {} split into {} successfully\", nodeName, subShardNames.size());\n\n      t = timings.sub(\"applyBufferedUpdates\");\n      // apply buffered updates on sub-shards\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n\n        log.debug(\"Applying buffered updates on : \" + subShardName);\n\n        params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n        params.set(CoreAdminParams.NAME, subShardName);\n\n        ocmh.sendShardRequest(nodeName, params, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed while asking sub shard leaders\" +\n          \" to apply buffered updates\", asyncId, requestMap);\n      t.stop();\n\n      log.debug(\"Successfully applied buffered updates on : \" + subShardNames);\n\n      // Replica creation for the new Slices\n      // replica placement is controlled by the autoscaling policy framework\n\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      // TODO: Have maxShardsPerNode param for this operation?\n\n      // Remove the node that hosts the parent shard for replica creation.\n      nodeList.remove(nodeName);\n\n      // TODO: change this to handle sharding a slice into > 2 sub-shards.\n\n      // we have already created one subReplica for each subShard on the parent node.\n      // identify locations for the remaining replicas\n      if (firstNrtReplica) {\n        numNrt.decrementAndGet();\n      } else {\n        numTlog.decrementAndGet();\n      }\n\n      t = timings.sub(\"identifyNodesForReplicas\");\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(subSlices)\n          .assignNrtReplicas(numNrt.get())\n          .assignTlogReplicas(numTlog.get())\n          .assignPullReplicas(numPull.get())\n          .onNodes(new ArrayList<>(clusterState.getLiveNodes()))\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(ocmh.cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, collection);\n      List<ReplicaPosition> replicaPositions = assignStrategy.assign(ocmh.cloudManager, assignRequest);\n      sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n      t.stop();\n\n      t = timings.sub(\"createReplicaPlaceholders\");\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = Assign.buildSolrCoreName(collectionName, sliceName, replicaPosition.type, replicaPosition.index);\n\n        log.debug(\"Creating replica shard \" + solrCoreName + \" as part of slice \" + sliceName + \" of collection \"\n            + collectionName + \" on \" + subShardNodeName);\n\n        // we first create all replicas in DOWN state without actually creating their cores in order to\n        // avoid a race condition where Overseer may prematurely activate the new sub-slices (and deactivate\n        // the parent slice) before all new replicas are added. This situation may lead to a loss of performance\n        // because the new shards will be activated with possibly many fewer replicas.\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.REPLICA_TYPE, replicaPosition.type.name(),\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(subShardNodeName),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(REPLICA_TYPE, replicaPosition.type.name());\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        // special flag param to instruct addReplica not to create the replica in cluster state again\n        propMap.put(OverseerCollectionMessageHandler.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n      t.stop();\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      // compare against the ephemeralOwner of the parent leader node\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        // put sub-shards in recovery_failed state\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n\n        if (leaderZnodeStat == null)  {\n          // the leader is not live anymore, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else if (ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n          // there's a new leader, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      // we must set the slice state into recovery before actually creating the replica cores\n      // this ensures that the logic inside ReplicaMutator to update sub-shard state to 'active'\n      // always gets a chance to execute. See SOLR-7673\n\n      if (repFactor == 1) {\n        // switch sub shard states to 'active'\n        log.info(\"Replication factor is 1 so switching shard states\");\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n      } else {\n        log.info(\"Requesting shard state be set to 'recovery'\");\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n      }\n\n      t = timings.sub(\"createCoresForReplicas\");\n      // now actually create replica cores on sub shard nodes\n      for (Map<String, Object> replica : replicas) {\n        ocmh.addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      assert TestInjection.injectSplitFailureAfterReplicaCreation();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard replicas\", asyncId, requestMap);\n      t.stop();\n\n      log.info(\"Successfully created all replica shards for all sub-slices \" + subSlices);\n\n      t = timings.sub(\"finalCommit\");\n      ocmh.commit(results, slice.get(), parentShardLeader);\n      t.stop();\n      if (withTiming) {\n        results.add(CommonParams.TIMING, timings.asNamedList());\n      }\n      success = true;\n      // don't unlock the shard yet - only do this if the final switch-over in\n      // ReplicaMutator succeeds (or fails)\n      return true;\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: \" + collectionName + \" parent shard: \" + slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (sessionWrapper != null) sessionWrapper.release();\n      if (!success) {\n        cleanupAfterFailure(zkStateReader, collectionName, parentSlice.getName(), subSlices, offlineSlices);\n        unlockForSplit(ocmh.cloudManager, collectionName, parentSlice.getName());\n      }\n    }\n  }\n\n","sourceOld":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String methodStr = message.getStr(CommonAdminParams.SPLIT_METHOD, SolrIndexSplitter.SplitMethod.REWRITE.toLower());\n    SolrIndexSplitter.SplitMethod splitMethod = SolrIndexSplitter.SplitMethod.get(methodStr);\n    if (splitMethod == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown value '\" + CommonAdminParams.SPLIT_METHOD +\n          \": \" + methodStr);\n    }\n    boolean withTiming = message.getBool(CommonParams.TIMING, false);\n\n    String collectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    log.debug(\"Split shard invoked: {}\", message);\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n    Set<String> offlineSlices = new HashSet<>();\n    RTimerTree timings = new RTimerTree();\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n    if (parentSlice.getState() != Slice.State.ACTIVE) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Parent slice is not active: \" +\n          collectionName + \"/ \" + parentSlice.getName() + \", state=\" + parentSlice.getState());\n    }\n\n    // find the leader for the shard\n    Replica parentShardLeader;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted.\");\n    }\n\n    RTimerTree t = timings.sub(\"checkDiskSpace\");\n    checkDiskSpace(collectionName, slice.get(), parentShardLeader);\n    t.stop();\n\n    // let's record the ephemeralOwner of the parent leader node\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      // we just got to know the leader but its live node is gone already!\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    // reproduce the currently existing number of replicas per type\n    AtomicInteger numNrt = new AtomicInteger();\n    AtomicInteger numTlog = new AtomicInteger();\n    AtomicInteger numPull = new AtomicInteger();\n    parentSlice.getReplicas().forEach(r -> {\n      switch (r.getType()) {\n        case NRT:\n          numNrt.incrementAndGet();\n          break;\n        case TLOG:\n          numTlog.incrementAndGet();\n          break;\n        case PULL:\n          numPull.incrementAndGet();\n      }\n    });\n    int repFactor = numNrt.get() + numTlog.get() + numPull.get();\n\n    boolean success = false;\n    try {\n      // type of the first subreplica will be the same as leader\n      boolean firstNrtReplica = parentShardLeader.getType() == Replica.Type.NRT;\n      // verify that we indeed have the right number of correct replica types\n      if ((firstNrtReplica && numNrt.get() < 1) || (!firstNrtReplica && numTlog.get() < 1)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"aborting split - inconsistent replica types in collection \" + collectionName +\n            \": nrt=\" + numNrt.get() + \", tlog=\" + numTlog.get() + \", pull=\" + numPull.get() + \", shard leader type is \" +\n            parentShardLeader.getType());\n      }\n\n      // check for the lock\n      if (!lockForSplit(ocmh.cloudManager, collectionName, parentSlice.getName())) {\n        // mark as success to avoid clearing the lock in the \"finally\" block\n        success = true;\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Can't lock parent slice for splitting (another split operation running?): \" +\n            collectionName + \"/\" + parentSlice.getName());\n      }\n\n      List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n      t = timings.sub(\"fillRanges\");\n      String rangesStr = fillRanges(ocmh.cloudManager, message, collection, parentSlice, subRanges, subSlices, subShardNames, firstNrtReplica);\n      t.stop();\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else {\n            // delete the shards\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"deleteshard\");\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              ocmh.commandMap.get(DELETESHARD).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        // refresh the locally cached cluster state\n        // we know we have the latest because otherwise deleteshard would have failed\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      final String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = new HashMap<>();\n      String nodeName = parentShardLeader.getNodeName();\n\n      t = timings.sub(\"createSubSlicesAndLeadersInState\");\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.debug(\"Creating slice \" + subSlice + \" of collection \" + collectionName + \" on \" + nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", nodeName);\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n\n        // wait until we are able to see the new shard in cluster state\n        ocmh.waitForNewShard(collectionName, subSlice);\n\n        // refresh cluster state\n        clusterState = zkStateReader.getClusterState();\n\n        log.debug(\"Adding first replica \" + subShardName + \" as part of slice \" + subSlice + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(REPLICA_TYPE, firstNrtReplica ? Replica.Type.NRT.toString() : Replica.Type.TLOG.toString());\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        ocmh.addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n      ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard leaders\", asyncId, requestMap);\n\n      t.stop();\n      t = timings.sub(\"waitForSubSliceLeadersAlive\");\n      for (String subShardName : subShardNames) {\n        // wait for parent leader to acknowledge the sub-shard core\n        log.debug(\"Asking parent leader to wait for: \" + subShardName + \" to be alive on: \" + nodeName);\n        String coreNodeName = ocmh.waitForCoreNodeName(collectionName, nodeName, subShardName);\n        CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n        cmd.setCoreName(subShardName);\n        cmd.setNodeName(nodeName);\n        cmd.setCoreNodeName(coreNodeName);\n        cmd.setState(Replica.State.ACTIVE);\n        cmd.setCheckLive(true);\n        cmd.setOnlyIfLeader(true);\n\n        ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n        ocmh.sendShardRequest(nodeName, p, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD timed out waiting for subshard leaders to come up\",\n          asyncId, requestMap);\n      t.stop();\n\n      log.debug(\"Successfully created all sub-shards for collection \" + collectionName + \" parent shard: \" + slice\n          + \" on: \" + parentShardLeader);\n\n      log.info(\"Splitting shard \" + parentShardLeader.getName() + \" as part of slice \" + slice + \" of collection \"\n          + collectionName + \" on \" + parentShardLeader);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CommonAdminParams.SPLIT_METHOD, splitMethod.toLower());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      t = timings.sub(\"splitParentCore\");\n\n      ocmh.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to invoke SPLIT core admin command\", asyncId,\n          requestMap);\n      t.stop();\n\n      log.debug(\"Index on shard: {} split into {} successfully\", nodeName, subShardNames.size());\n\n      t = timings.sub(\"applyBufferedUpdates\");\n      // apply buffered updates on sub-shards\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n\n        log.debug(\"Applying buffered updates on : \" + subShardName);\n\n        params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n        params.set(CoreAdminParams.NAME, subShardName);\n\n        ocmh.sendShardRequest(nodeName, params, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed while asking sub shard leaders\" +\n          \" to apply buffered updates\", asyncId, requestMap);\n      t.stop();\n\n      log.debug(\"Successfully applied buffered updates on : \" + subShardNames);\n\n      // Replica creation for the new Slices\n      // replica placement is controlled by the autoscaling policy framework\n\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      // TODO: Have maxShardsPerNode param for this operation?\n\n      // Remove the node that hosts the parent shard for replica creation.\n      nodeList.remove(nodeName);\n\n      // TODO: change this to handle sharding a slice into > 2 sub-shards.\n\n      // we have already created one subReplica for each subShard on the parent node.\n      // identify locations for the remaining replicas\n      if (firstNrtReplica) {\n        numNrt.decrementAndGet();\n      } else {\n        numTlog.decrementAndGet();\n      }\n\n      t = timings.sub(\"identifyNodesForReplicas\");\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(subSlices)\n          .assignNrtReplicas(numNrt.get())\n          .assignTlogReplicas(numTlog.get())\n          .assignPullReplicas(numPull.get())\n          .onNodes(new ArrayList<>(clusterState.getLiveNodes()))\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(ocmh.cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, collection);\n      List<ReplicaPosition> replicaPositions = assignStrategy.assign(ocmh.cloudManager, assignRequest);\n      sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n      t.stop();\n\n      t = timings.sub(\"createReplicaPlaceholders\");\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = Assign.buildSolrCoreName(collectionName, sliceName, replicaPosition.type, replicaPosition.index);\n\n        log.debug(\"Creating replica shard \" + solrCoreName + \" as part of slice \" + sliceName + \" of collection \"\n            + collectionName + \" on \" + subShardNodeName);\n\n        // we first create all replicas in DOWN state without actually creating their cores in order to\n        // avoid a race condition where Overseer may prematurely activate the new sub-slices (and deactivate\n        // the parent slice) before all new replicas are added. This situation may lead to a loss of performance\n        // because the new shards will be activated with possibly many fewer replicas.\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.REPLICA_TYPE, replicaPosition.type.name(),\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(subShardNodeName),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(REPLICA_TYPE, replicaPosition.type.name());\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        // special flag param to instruct addReplica not to create the replica in cluster state again\n        propMap.put(OverseerCollectionMessageHandler.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n      t.stop();\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      // compare against the ephemeralOwner of the parent leader node\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        // put sub-shards in recovery_failed state\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n\n        if (leaderZnodeStat == null)  {\n          // the leader is not live anymore, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else if (ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n          // there's a new leader, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      // we must set the slice state into recovery before actually creating the replica cores\n      // this ensures that the logic inside ReplicaMutator to update sub-shard state to 'active'\n      // always gets a chance to execute. See SOLR-7673\n\n      if (repFactor == 1) {\n        // switch sub shard states to 'active'\n        log.debug(\"Replication factor is 1 so switching shard states\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      } else {\n        log.debug(\"Requesting shard state be set to 'recovery'\");\n        DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkStateReader.getZkClient());\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        inQueue.offer(Utils.toJSON(m));\n      }\n\n      t = timings.sub(\"createCoresForReplicas\");\n      // now actually create replica cores on sub shard nodes\n      for (Map<String, Object> replica : replicas) {\n        ocmh.addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      assert TestInjection.injectSplitFailureAfterReplicaCreation();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard replicas\", asyncId, requestMap);\n      t.stop();\n\n      log.info(\"Successfully created all replica shards for all sub-slices \" + subSlices);\n\n      t = timings.sub(\"finalCommit\");\n      ocmh.commit(results, slice.get(), parentShardLeader);\n      t.stop();\n      if (withTiming) {\n        results.add(CommonParams.TIMING, timings.asNamedList());\n      }\n      success = true;\n      // don't unlock the shard yet - only do this if the final switch-over in\n      // ReplicaMutator succeeds (or fails)\n      return true;\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: \" + collectionName + \" parent shard: \" + slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (sessionWrapper != null) sessionWrapper.release();\n      if (!success) {\n        cleanupAfterFailure(zkStateReader, collectionName, parentSlice.getName(), subSlices, offlineSlices);\n        unlockForSplit(ocmh.cloudManager, collectionName, parentSlice.getName());\n      }\n    }\n  }\n\n","bugFix":["6a23ab64d81a448ad6ec571cbfc9599cc09b4e4b","b693a83132c9e45afcd564fd65a25b60ed80388b","20c968c14aace7cf49843bf2c1fafc7fd3845659","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","19498030e0adab22f604f935cae3c03dcf0952a6","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"59bad1cc1e7f90125a140496e79b06afcedb68ec","date":1554915399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#split(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#split(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String methodStr = message.getStr(CommonAdminParams.SPLIT_METHOD, SolrIndexSplitter.SplitMethod.REWRITE.toLower());\n    SolrIndexSplitter.SplitMethod splitMethod = SolrIndexSplitter.SplitMethod.get(methodStr);\n    if (splitMethod == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown value '\" + CommonAdminParams.SPLIT_METHOD +\n          \": \" + methodStr);\n    }\n    boolean withTiming = message.getBool(CommonParams.TIMING, false);\n\n    String extCollectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    String collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n\n    log.debug(\"Split shard invoked: {}\", message);\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n    Set<String> offlineSlices = new HashSet<>();\n    RTimerTree timings = new RTimerTree();\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n    if (parentSlice.getState() != Slice.State.ACTIVE) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Parent slice is not active: \" +\n          collectionName + \"/ \" + parentSlice.getName() + \", state=\" + parentSlice.getState());\n    }\n\n    // find the leader for the shard\n    Replica parentShardLeader;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted.\");\n    }\n\n    RTimerTree t = timings.sub(\"checkDiskSpace\");\n    checkDiskSpace(collectionName, slice.get(), parentShardLeader);\n    t.stop();\n\n    // let's record the ephemeralOwner of the parent leader node\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      // we just got to know the leader but its live node is gone already!\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    // reproduce the currently existing number of replicas per type\n    AtomicInteger numNrt = new AtomicInteger();\n    AtomicInteger numTlog = new AtomicInteger();\n    AtomicInteger numPull = new AtomicInteger();\n    parentSlice.getReplicas().forEach(r -> {\n      switch (r.getType()) {\n        case NRT:\n          numNrt.incrementAndGet();\n          break;\n        case TLOG:\n          numTlog.incrementAndGet();\n          break;\n        case PULL:\n          numPull.incrementAndGet();\n      }\n    });\n    int repFactor = numNrt.get() + numTlog.get() + numPull.get();\n\n    boolean success = false;\n    try {\n      // type of the first subreplica will be the same as leader\n      boolean firstNrtReplica = parentShardLeader.getType() == Replica.Type.NRT;\n      // verify that we indeed have the right number of correct replica types\n      if ((firstNrtReplica && numNrt.get() < 1) || (!firstNrtReplica && numTlog.get() < 1)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"aborting split - inconsistent replica types in collection \" + collectionName +\n            \": nrt=\" + numNrt.get() + \", tlog=\" + numTlog.get() + \", pull=\" + numPull.get() + \", shard leader type is \" +\n            parentShardLeader.getType());\n      }\n\n      // check for the lock\n      if (!lockForSplit(ocmh.cloudManager, collectionName, parentSlice.getName())) {\n        // mark as success to avoid clearing the lock in the \"finally\" block\n        success = true;\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Can't lock parent slice for splitting (another split operation running?): \" +\n            collectionName + \"/\" + parentSlice.getName());\n      }\n\n      List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n      t = timings.sub(\"fillRanges\");\n      String rangesStr = fillRanges(ocmh.cloudManager, message, collection, parentSlice, subRanges, subSlices, subShardNames, firstNrtReplica);\n      t.stop();\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else {\n            // delete the shards\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"deleteshard\");\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              ocmh.commandMap.get(DELETESHARD).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        // refresh the locally cached cluster state\n        // we know we have the latest because otherwise deleteshard would have failed\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      final String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = new HashMap<>();\n      String nodeName = parentShardLeader.getNodeName();\n\n      t = timings.sub(\"createSubSlicesAndLeadersInState\");\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.debug(\"Creating slice \" + subSlice + \" of collection \" + collectionName + \" on \" + nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", nodeName);\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(new ZkNodeProps(propMap)));\n\n        // wait until we are able to see the new shard in cluster state\n        ocmh.waitForNewShard(collectionName, subSlice);\n\n        // refresh cluster state\n        clusterState = zkStateReader.getClusterState();\n\n        log.debug(\"Adding first replica \" + subShardName + \" as part of slice \" + subSlice + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(REPLICA_TYPE, firstNrtReplica ? Replica.Type.NRT.toString() : Replica.Type.TLOG.toString());\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        ocmh.addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n      ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler(ocmh.overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient());\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard leaders\", asyncId, requestMap);\n\n      t.stop();\n      t = timings.sub(\"waitForSubSliceLeadersAlive\");\n      for (String subShardName : subShardNames) {\n        // wait for parent leader to acknowledge the sub-shard core\n        log.debug(\"Asking parent leader to wait for: \" + subShardName + \" to be alive on: \" + nodeName);\n        String coreNodeName = ocmh.waitForCoreNodeName(collectionName, nodeName, subShardName);\n        CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n        cmd.setCoreName(subShardName);\n        cmd.setNodeName(nodeName);\n        cmd.setCoreNodeName(coreNodeName);\n        cmd.setState(Replica.State.ACTIVE);\n        cmd.setCheckLive(true);\n        cmd.setOnlyIfLeader(true);\n\n        ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n        ocmh.sendShardRequest(nodeName, p, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD timed out waiting for subshard leaders to come up\",\n          asyncId, requestMap);\n      t.stop();\n\n      log.debug(\"Successfully created all sub-shards for collection \" + collectionName + \" parent shard: \" + slice\n          + \" on: \" + parentShardLeader);\n\n      log.info(\"Splitting shard \" + parentShardLeader.getName() + \" as part of slice \" + slice + \" of collection \"\n          + collectionName + \" on \" + parentShardLeader);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CommonAdminParams.SPLIT_METHOD, splitMethod.toLower());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      t = timings.sub(\"splitParentCore\");\n\n      ocmh.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to invoke SPLIT core admin command\", asyncId,\n          requestMap);\n      t.stop();\n\n      log.debug(\"Index on shard: {} split into {} successfully\", nodeName, subShardNames.size());\n\n      t = timings.sub(\"applyBufferedUpdates\");\n      // apply buffered updates on sub-shards\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n\n        log.debug(\"Applying buffered updates on : \" + subShardName);\n\n        params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n        params.set(CoreAdminParams.NAME, subShardName);\n\n        ocmh.sendShardRequest(nodeName, params, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed while asking sub shard leaders\" +\n          \" to apply buffered updates\", asyncId, requestMap);\n      t.stop();\n\n      log.debug(\"Successfully applied buffered updates on : \" + subShardNames);\n\n      // Replica creation for the new Slices\n      // replica placement is controlled by the autoscaling policy framework\n\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      // TODO: Have maxShardsPerNode param for this operation?\n\n      // Remove the node that hosts the parent shard for replica creation.\n      nodeList.remove(nodeName);\n\n      // TODO: change this to handle sharding a slice into > 2 sub-shards.\n\n      // we have already created one subReplica for each subShard on the parent node.\n      // identify locations for the remaining replicas\n      if (firstNrtReplica) {\n        numNrt.decrementAndGet();\n      } else {\n        numTlog.decrementAndGet();\n      }\n\n      t = timings.sub(\"identifyNodesForReplicas\");\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(subSlices)\n          .assignNrtReplicas(numNrt.get())\n          .assignTlogReplicas(numTlog.get())\n          .assignPullReplicas(numPull.get())\n          .onNodes(new ArrayList<>(clusterState.getLiveNodes()))\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(ocmh.cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, collection);\n      List<ReplicaPosition> replicaPositions = assignStrategy.assign(ocmh.cloudManager, assignRequest);\n      sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n      t.stop();\n\n      t = timings.sub(\"createReplicaPlaceholders\");\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = Assign.buildSolrCoreName(collectionName, sliceName, replicaPosition.type, replicaPosition.index);\n\n        log.debug(\"Creating replica shard \" + solrCoreName + \" as part of slice \" + sliceName + \" of collection \"\n            + collectionName + \" on \" + subShardNodeName);\n\n        // we first create all replicas in DOWN state without actually creating their cores in order to\n        // avoid a race condition where Overseer may prematurely activate the new sub-slices (and deactivate\n        // the parent slice) before all new replicas are added. This situation may lead to a loss of performance\n        // because the new shards will be activated with possibly many fewer replicas.\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.REPLICA_TYPE, replicaPosition.type.name(),\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(subShardNodeName),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(REPLICA_TYPE, replicaPosition.type.name());\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        // special flag param to instruct addReplica not to create the replica in cluster state again\n        propMap.put(OverseerCollectionMessageHandler.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n      t.stop();\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      // compare against the ephemeralOwner of the parent leader node\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        // put sub-shards in recovery_failed state\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n\n        if (leaderZnodeStat == null)  {\n          // the leader is not live anymore, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else if (ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n          // there's a new leader, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      // we must set the slice state into recovery before actually creating the replica cores\n      // this ensures that the logic inside ReplicaMutator to update sub-shard state to 'active'\n      // always gets a chance to execute. See SOLR-7673\n\n      if (repFactor == 1) {\n        // switch sub shard states to 'active'\n        log.info(\"Replication factor is 1 so switching shard states\");\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n      } else {\n        log.info(\"Requesting shard state be set to 'recovery'\");\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n      }\n\n      t = timings.sub(\"createCoresForReplicas\");\n      // now actually create replica cores on sub shard nodes\n      for (Map<String, Object> replica : replicas) {\n        ocmh.addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      assert TestInjection.injectSplitFailureAfterReplicaCreation();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard replicas\", asyncId, requestMap);\n      t.stop();\n\n      log.info(\"Successfully created all replica shards for all sub-slices \" + subSlices);\n\n      t = timings.sub(\"finalCommit\");\n      ocmh.commit(results, slice.get(), parentShardLeader);\n      t.stop();\n      if (withTiming) {\n        results.add(CommonParams.TIMING, timings.asNamedList());\n      }\n      success = true;\n      // don't unlock the shard yet - only do this if the final switch-over in\n      // ReplicaMutator succeeds (or fails)\n      return true;\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: \" + collectionName + \" parent shard: \" + slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (sessionWrapper != null) sessionWrapper.release();\n      if (!success) {\n        cleanupAfterFailure(zkStateReader, collectionName, parentSlice.getName(), subSlices, offlineSlices);\n        unlockForSplit(ocmh.cloudManager, collectionName, parentSlice.getName());\n      }\n    }\n  }\n\n","sourceOld":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String methodStr = message.getStr(CommonAdminParams.SPLIT_METHOD, SolrIndexSplitter.SplitMethod.REWRITE.toLower());\n    SolrIndexSplitter.SplitMethod splitMethod = SolrIndexSplitter.SplitMethod.get(methodStr);\n    if (splitMethod == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown value '\" + CommonAdminParams.SPLIT_METHOD +\n          \": \" + methodStr);\n    }\n    boolean withTiming = message.getBool(CommonParams.TIMING, false);\n\n    String collectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    log.debug(\"Split shard invoked: {}\", message);\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n    Set<String> offlineSlices = new HashSet<>();\n    RTimerTree timings = new RTimerTree();\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n    if (parentSlice.getState() != Slice.State.ACTIVE) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Parent slice is not active: \" +\n          collectionName + \"/ \" + parentSlice.getName() + \", state=\" + parentSlice.getState());\n    }\n\n    // find the leader for the shard\n    Replica parentShardLeader;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted.\");\n    }\n\n    RTimerTree t = timings.sub(\"checkDiskSpace\");\n    checkDiskSpace(collectionName, slice.get(), parentShardLeader);\n    t.stop();\n\n    // let's record the ephemeralOwner of the parent leader node\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      // we just got to know the leader but its live node is gone already!\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    // reproduce the currently existing number of replicas per type\n    AtomicInteger numNrt = new AtomicInteger();\n    AtomicInteger numTlog = new AtomicInteger();\n    AtomicInteger numPull = new AtomicInteger();\n    parentSlice.getReplicas().forEach(r -> {\n      switch (r.getType()) {\n        case NRT:\n          numNrt.incrementAndGet();\n          break;\n        case TLOG:\n          numTlog.incrementAndGet();\n          break;\n        case PULL:\n          numPull.incrementAndGet();\n      }\n    });\n    int repFactor = numNrt.get() + numTlog.get() + numPull.get();\n\n    boolean success = false;\n    try {\n      // type of the first subreplica will be the same as leader\n      boolean firstNrtReplica = parentShardLeader.getType() == Replica.Type.NRT;\n      // verify that we indeed have the right number of correct replica types\n      if ((firstNrtReplica && numNrt.get() < 1) || (!firstNrtReplica && numTlog.get() < 1)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"aborting split - inconsistent replica types in collection \" + collectionName +\n            \": nrt=\" + numNrt.get() + \", tlog=\" + numTlog.get() + \", pull=\" + numPull.get() + \", shard leader type is \" +\n            parentShardLeader.getType());\n      }\n\n      // check for the lock\n      if (!lockForSplit(ocmh.cloudManager, collectionName, parentSlice.getName())) {\n        // mark as success to avoid clearing the lock in the \"finally\" block\n        success = true;\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Can't lock parent slice for splitting (another split operation running?): \" +\n            collectionName + \"/\" + parentSlice.getName());\n      }\n\n      List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n      t = timings.sub(\"fillRanges\");\n      String rangesStr = fillRanges(ocmh.cloudManager, message, collection, parentSlice, subRanges, subSlices, subShardNames, firstNrtReplica);\n      t.stop();\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else {\n            // delete the shards\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"deleteshard\");\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              ocmh.commandMap.get(DELETESHARD).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        // refresh the locally cached cluster state\n        // we know we have the latest because otherwise deleteshard would have failed\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      final String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = new HashMap<>();\n      String nodeName = parentShardLeader.getNodeName();\n\n      t = timings.sub(\"createSubSlicesAndLeadersInState\");\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.debug(\"Creating slice \" + subSlice + \" of collection \" + collectionName + \" on \" + nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", nodeName);\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(new ZkNodeProps(propMap)));\n\n        // wait until we are able to see the new shard in cluster state\n        ocmh.waitForNewShard(collectionName, subSlice);\n\n        // refresh cluster state\n        clusterState = zkStateReader.getClusterState();\n\n        log.debug(\"Adding first replica \" + subShardName + \" as part of slice \" + subSlice + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(REPLICA_TYPE, firstNrtReplica ? Replica.Type.NRT.toString() : Replica.Type.TLOG.toString());\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        ocmh.addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n      ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler(ocmh.overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient());\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard leaders\", asyncId, requestMap);\n\n      t.stop();\n      t = timings.sub(\"waitForSubSliceLeadersAlive\");\n      for (String subShardName : subShardNames) {\n        // wait for parent leader to acknowledge the sub-shard core\n        log.debug(\"Asking parent leader to wait for: \" + subShardName + \" to be alive on: \" + nodeName);\n        String coreNodeName = ocmh.waitForCoreNodeName(collectionName, nodeName, subShardName);\n        CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n        cmd.setCoreName(subShardName);\n        cmd.setNodeName(nodeName);\n        cmd.setCoreNodeName(coreNodeName);\n        cmd.setState(Replica.State.ACTIVE);\n        cmd.setCheckLive(true);\n        cmd.setOnlyIfLeader(true);\n\n        ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n        ocmh.sendShardRequest(nodeName, p, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD timed out waiting for subshard leaders to come up\",\n          asyncId, requestMap);\n      t.stop();\n\n      log.debug(\"Successfully created all sub-shards for collection \" + collectionName + \" parent shard: \" + slice\n          + \" on: \" + parentShardLeader);\n\n      log.info(\"Splitting shard \" + parentShardLeader.getName() + \" as part of slice \" + slice + \" of collection \"\n          + collectionName + \" on \" + parentShardLeader);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CommonAdminParams.SPLIT_METHOD, splitMethod.toLower());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      t = timings.sub(\"splitParentCore\");\n\n      ocmh.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to invoke SPLIT core admin command\", asyncId,\n          requestMap);\n      t.stop();\n\n      log.debug(\"Index on shard: {} split into {} successfully\", nodeName, subShardNames.size());\n\n      t = timings.sub(\"applyBufferedUpdates\");\n      // apply buffered updates on sub-shards\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n\n        log.debug(\"Applying buffered updates on : \" + subShardName);\n\n        params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n        params.set(CoreAdminParams.NAME, subShardName);\n\n        ocmh.sendShardRequest(nodeName, params, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed while asking sub shard leaders\" +\n          \" to apply buffered updates\", asyncId, requestMap);\n      t.stop();\n\n      log.debug(\"Successfully applied buffered updates on : \" + subShardNames);\n\n      // Replica creation for the new Slices\n      // replica placement is controlled by the autoscaling policy framework\n\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      // TODO: Have maxShardsPerNode param for this operation?\n\n      // Remove the node that hosts the parent shard for replica creation.\n      nodeList.remove(nodeName);\n\n      // TODO: change this to handle sharding a slice into > 2 sub-shards.\n\n      // we have already created one subReplica for each subShard on the parent node.\n      // identify locations for the remaining replicas\n      if (firstNrtReplica) {\n        numNrt.decrementAndGet();\n      } else {\n        numTlog.decrementAndGet();\n      }\n\n      t = timings.sub(\"identifyNodesForReplicas\");\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(subSlices)\n          .assignNrtReplicas(numNrt.get())\n          .assignTlogReplicas(numTlog.get())\n          .assignPullReplicas(numPull.get())\n          .onNodes(new ArrayList<>(clusterState.getLiveNodes()))\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(ocmh.cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, collection);\n      List<ReplicaPosition> replicaPositions = assignStrategy.assign(ocmh.cloudManager, assignRequest);\n      sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n      t.stop();\n\n      t = timings.sub(\"createReplicaPlaceholders\");\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = Assign.buildSolrCoreName(collectionName, sliceName, replicaPosition.type, replicaPosition.index);\n\n        log.debug(\"Creating replica shard \" + solrCoreName + \" as part of slice \" + sliceName + \" of collection \"\n            + collectionName + \" on \" + subShardNodeName);\n\n        // we first create all replicas in DOWN state without actually creating their cores in order to\n        // avoid a race condition where Overseer may prematurely activate the new sub-slices (and deactivate\n        // the parent slice) before all new replicas are added. This situation may lead to a loss of performance\n        // because the new shards will be activated with possibly many fewer replicas.\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.REPLICA_TYPE, replicaPosition.type.name(),\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(subShardNodeName),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(REPLICA_TYPE, replicaPosition.type.name());\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        // special flag param to instruct addReplica not to create the replica in cluster state again\n        propMap.put(OverseerCollectionMessageHandler.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n      t.stop();\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      // compare against the ephemeralOwner of the parent leader node\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        // put sub-shards in recovery_failed state\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n\n        if (leaderZnodeStat == null)  {\n          // the leader is not live anymore, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else if (ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n          // there's a new leader, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      // we must set the slice state into recovery before actually creating the replica cores\n      // this ensures that the logic inside ReplicaMutator to update sub-shard state to 'active'\n      // always gets a chance to execute. See SOLR-7673\n\n      if (repFactor == 1) {\n        // switch sub shard states to 'active'\n        log.info(\"Replication factor is 1 so switching shard states\");\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n      } else {\n        log.info(\"Requesting shard state be set to 'recovery'\");\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n      }\n\n      t = timings.sub(\"createCoresForReplicas\");\n      // now actually create replica cores on sub shard nodes\n      for (Map<String, Object> replica : replicas) {\n        ocmh.addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      assert TestInjection.injectSplitFailureAfterReplicaCreation();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard replicas\", asyncId, requestMap);\n      t.stop();\n\n      log.info(\"Successfully created all replica shards for all sub-slices \" + subSlices);\n\n      t = timings.sub(\"finalCommit\");\n      ocmh.commit(results, slice.get(), parentShardLeader);\n      t.stop();\n      if (withTiming) {\n        results.add(CommonParams.TIMING, timings.asNamedList());\n      }\n      success = true;\n      // don't unlock the shard yet - only do this if the final switch-over in\n      // ReplicaMutator succeeds (or fails)\n      return true;\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: \" + collectionName + \" parent shard: \" + slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (sessionWrapper != null) sessionWrapper.release();\n      if (!success) {\n        cleanupAfterFailure(zkStateReader, collectionName, parentSlice.getName(), subSlices, offlineSlices);\n        unlockForSplit(ocmh.cloudManager, collectionName, parentSlice.getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69e6520a21709190413a63084ed135271aab1a7c","date":1556607462,"type":5,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#split(ClusterState,ZkNodeProps,NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#split(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList<Object> results) throws Exception {\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String methodStr = message.getStr(CommonAdminParams.SPLIT_METHOD, SolrIndexSplitter.SplitMethod.REWRITE.toLower());\n    SolrIndexSplitter.SplitMethod splitMethod = SolrIndexSplitter.SplitMethod.get(methodStr);\n    if (splitMethod == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown value '\" + CommonAdminParams.SPLIT_METHOD +\n          \": \" + methodStr);\n    }\n    boolean withTiming = message.getBool(CommonParams.TIMING, false);\n\n    String extCollectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    String collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n\n    log.debug(\"Split shard invoked: {}\", message);\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n    Set<String> offlineSlices = new HashSet<>();\n    RTimerTree timings = new RTimerTree();\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n    if (parentSlice.getState() != Slice.State.ACTIVE) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Parent slice is not active: \" +\n          collectionName + \"/ \" + parentSlice.getName() + \", state=\" + parentSlice.getState());\n    }\n\n    // find the leader for the shard\n    Replica parentShardLeader;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted.\");\n    }\n\n    RTimerTree t = timings.sub(\"checkDiskSpace\");\n    checkDiskSpace(collectionName, slice.get(), parentShardLeader);\n    t.stop();\n\n    // let's record the ephemeralOwner of the parent leader node\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      // we just got to know the leader but its live node is gone already!\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    // reproduce the currently existing number of replicas per type\n    AtomicInteger numNrt = new AtomicInteger();\n    AtomicInteger numTlog = new AtomicInteger();\n    AtomicInteger numPull = new AtomicInteger();\n    parentSlice.getReplicas().forEach(r -> {\n      switch (r.getType()) {\n        case NRT:\n          numNrt.incrementAndGet();\n          break;\n        case TLOG:\n          numTlog.incrementAndGet();\n          break;\n        case PULL:\n          numPull.incrementAndGet();\n      }\n    });\n    int repFactor = numNrt.get() + numTlog.get() + numPull.get();\n\n    boolean success = false;\n    try {\n      // type of the first subreplica will be the same as leader\n      boolean firstNrtReplica = parentShardLeader.getType() == Replica.Type.NRT;\n      // verify that we indeed have the right number of correct replica types\n      if ((firstNrtReplica && numNrt.get() < 1) || (!firstNrtReplica && numTlog.get() < 1)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"aborting split - inconsistent replica types in collection \" + collectionName +\n            \": nrt=\" + numNrt.get() + \", tlog=\" + numTlog.get() + \", pull=\" + numPull.get() + \", shard leader type is \" +\n            parentShardLeader.getType());\n      }\n\n      // check for the lock\n      if (!lockForSplit(ocmh.cloudManager, collectionName, parentSlice.getName())) {\n        // mark as success to avoid clearing the lock in the \"finally\" block\n        success = true;\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Can't lock parent slice for splitting (another split operation running?): \" +\n            collectionName + \"/\" + parentSlice.getName());\n      }\n\n      List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n      t = timings.sub(\"fillRanges\");\n      String rangesStr = fillRanges(ocmh.cloudManager, message, collection, parentSlice, subRanges, subSlices, subShardNames, firstNrtReplica);\n      t.stop();\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else {\n            // delete the shards\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"deleteshard\");\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              ocmh.commandMap.get(DELETESHARD).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        // refresh the locally cached cluster state\n        // we know we have the latest because otherwise deleteshard would have failed\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      final String asyncId = message.getStr(ASYNC);\n      String nodeName = parentShardLeader.getNodeName();\n\n      t = timings.sub(\"createSubSlicesAndLeadersInState\");\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.debug(\"Creating slice \" + subSlice + \" of collection \" + collectionName + \" on \" + nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", nodeName);\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(new ZkNodeProps(propMap)));\n\n        // wait until we are able to see the new shard in cluster state\n        ocmh.waitForNewShard(collectionName, subSlice);\n\n        // refresh cluster state\n        clusterState = zkStateReader.getClusterState();\n\n        log.debug(\"Adding first replica \" + subShardName + \" as part of slice \" + subSlice + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(REPLICA_TYPE, firstNrtReplica ? Replica.Type.NRT.toString() : Replica.Type.TLOG.toString());\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        ocmh.addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n      @SuppressWarnings(\"deprecation\")\n      ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler(ocmh.overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient());\n      {\n        final ShardRequestTracker syncRequestTracker = ocmh.syncRequestTracker();\n        syncRequestTracker.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard leaders\");\n      }\n      t.stop();\n      t = timings.sub(\"waitForSubSliceLeadersAlive\");\n      {\n        final ShardRequestTracker shardRequestTracker = ocmh.asyncRequestTracker(asyncId);\n        for (String subShardName : subShardNames) {\n          // wait for parent leader to acknowledge the sub-shard core\n          log.debug(\"Asking parent leader to wait for: \" + subShardName + \" to be alive on: \" + nodeName);\n          String coreNodeName = ocmh.waitForCoreNodeName(collectionName, nodeName, subShardName);\n          CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n          cmd.setCoreName(subShardName);\n          cmd.setNodeName(nodeName);\n          cmd.setCoreNodeName(coreNodeName);\n          cmd.setState(Replica.State.ACTIVE);\n          cmd.setCheckLive(true);\n          cmd.setOnlyIfLeader(true);\n\n          ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n          shardRequestTracker.sendShardRequest(nodeName, p, shardHandler);\n        }\n\n        shardRequestTracker.processResponses(results, shardHandler, true, \"SPLITSHARD timed out waiting for subshard leaders to come up\");\n      }\n      t.stop();\n\n      log.debug(\"Successfully created all sub-shards for collection \" + collectionName + \" parent shard: \" + slice\n          + \" on: \" + parentShardLeader);\n\n      log.info(\"Splitting shard \" + parentShardLeader.getName() + \" as part of slice \" + slice + \" of collection \"\n          + collectionName + \" on \" + parentShardLeader);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CommonAdminParams.SPLIT_METHOD, splitMethod.toLower());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      t = timings.sub(\"splitParentCore\");\n      {\n        final ShardRequestTracker shardRequestTracker = ocmh.asyncRequestTracker(asyncId);\n        shardRequestTracker.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler);\n\n        shardRequestTracker.processResponses(results, shardHandler, true, \"SPLITSHARD failed to invoke SPLIT core admin command\");\n      }\n      t.stop();\n\n      log.debug(\"Index on shard: {} split into {} successfully\", nodeName, subShardNames.size());\n\n      t = timings.sub(\"applyBufferedUpdates\");\n      // apply buffered updates on sub-shards\n      {\n        final ShardRequestTracker shardRequestTracker = ocmh.asyncRequestTracker(asyncId);\n\n        for (int i = 0; i < subShardNames.size(); i++) {\n          String subShardName = subShardNames.get(i);\n\n          log.debug(\"Applying buffered updates on : \" + subShardName);\n\n          params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n          params.set(CoreAdminParams.NAME, subShardName);\n\n          shardRequestTracker.sendShardRequest(nodeName, params, shardHandler);\n        }\n\n        shardRequestTracker.processResponses(results, shardHandler, true,\n            \"SPLITSHARD failed while asking sub shard leaders\" +\n                \" to apply buffered updates\");\n      }\n      t.stop();\n\n      log.debug(\"Successfully applied buffered updates on : \" + subShardNames);\n\n      // Replica creation for the new Slices\n      // replica placement is controlled by the autoscaling policy framework\n\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      // TODO: Have maxShardsPerNode param for this operation?\n\n      // Remove the node that hosts the parent shard for replica creation.\n      nodeList.remove(nodeName);\n\n      // TODO: change this to handle sharding a slice into > 2 sub-shards.\n\n      // we have already created one subReplica for each subShard on the parent node.\n      // identify locations for the remaining replicas\n      if (firstNrtReplica) {\n        numNrt.decrementAndGet();\n      } else {\n        numTlog.decrementAndGet();\n      }\n\n      t = timings.sub(\"identifyNodesForReplicas\");\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(subSlices)\n          .assignNrtReplicas(numNrt.get())\n          .assignTlogReplicas(numTlog.get())\n          .assignPullReplicas(numPull.get())\n          .onNodes(new ArrayList<>(clusterState.getLiveNodes()))\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(ocmh.cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, collection);\n      List<ReplicaPosition> replicaPositions = assignStrategy.assign(ocmh.cloudManager, assignRequest);\n      sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n      t.stop();\n\n      t = timings.sub(\"createReplicaPlaceholders\");\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = Assign.buildSolrCoreName(collectionName, sliceName, replicaPosition.type, replicaPosition.index);\n\n        log.debug(\"Creating replica shard \" + solrCoreName + \" as part of slice \" + sliceName + \" of collection \"\n            + collectionName + \" on \" + subShardNodeName);\n\n        // we first create all replicas in DOWN state without actually creating their cores in order to\n        // avoid a race condition where Overseer may prematurely activate the new sub-slices (and deactivate\n        // the parent slice) before all new replicas are added. This situation may lead to a loss of performance\n        // because the new shards will be activated with possibly many fewer replicas.\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.REPLICA_TYPE, replicaPosition.type.name(),\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(subShardNodeName),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(REPLICA_TYPE, replicaPosition.type.name());\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        // special flag param to instruct addReplica not to create the replica in cluster state again\n        propMap.put(OverseerCollectionMessageHandler.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n      t.stop();\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      // compare against the ephemeralOwner of the parent leader node\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        // put sub-shards in recovery_failed state\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n\n        if (leaderZnodeStat == null)  {\n          // the leader is not live anymore, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else if (ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n          // there's a new leader, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      // we must set the slice state into recovery before actually creating the replica cores\n      // this ensures that the logic inside ReplicaMutator to update sub-shard state to 'active'\n      // always gets a chance to execute. See SOLR-7673\n\n      if (repFactor == 1) {\n        // switch sub shard states to 'active'\n        log.info(\"Replication factor is 1 so switching shard states\");\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n      } else {\n        log.info(\"Requesting shard state be set to 'recovery'\");\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n      }\n\n      t = timings.sub(\"createCoresForReplicas\");\n      // now actually create replica cores on sub shard nodes\n      for (Map<String, Object> replica : replicas) {\n        ocmh.addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      assert TestInjection.injectSplitFailureAfterReplicaCreation();\n\n      {\n        final ShardRequestTracker syncRequestTracker = ocmh.syncRequestTracker();\n        syncRequestTracker.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard replicas\");\n      }\n      t.stop();\n\n      log.info(\"Successfully created all replica shards for all sub-slices \" + subSlices);\n\n      t = timings.sub(\"finalCommit\");\n      ocmh.commit(results, slice.get(), parentShardLeader);\n      t.stop();\n      if (withTiming) {\n        results.add(CommonParams.TIMING, timings.asNamedList());\n      }\n      success = true;\n      // don't unlock the shard yet - only do this if the final switch-over in\n      // ReplicaMutator succeeds (or fails)\n      return true;\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: \" + collectionName + \" parent shard: \" + slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (sessionWrapper != null) sessionWrapper.release();\n      if (!success) {\n        cleanupAfterFailure(zkStateReader, collectionName, parentSlice.getName(), subSlices, offlineSlices);\n        unlockForSplit(ocmh.cloudManager, collectionName, parentSlice.getName());\n      }\n    }\n  }\n\n","sourceOld":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String methodStr = message.getStr(CommonAdminParams.SPLIT_METHOD, SolrIndexSplitter.SplitMethod.REWRITE.toLower());\n    SolrIndexSplitter.SplitMethod splitMethod = SolrIndexSplitter.SplitMethod.get(methodStr);\n    if (splitMethod == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown value '\" + CommonAdminParams.SPLIT_METHOD +\n          \": \" + methodStr);\n    }\n    boolean withTiming = message.getBool(CommonParams.TIMING, false);\n\n    String extCollectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    String collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n\n    log.debug(\"Split shard invoked: {}\", message);\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n    Set<String> offlineSlices = new HashSet<>();\n    RTimerTree timings = new RTimerTree();\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n    if (parentSlice.getState() != Slice.State.ACTIVE) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Parent slice is not active: \" +\n          collectionName + \"/ \" + parentSlice.getName() + \", state=\" + parentSlice.getState());\n    }\n\n    // find the leader for the shard\n    Replica parentShardLeader;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted.\");\n    }\n\n    RTimerTree t = timings.sub(\"checkDiskSpace\");\n    checkDiskSpace(collectionName, slice.get(), parentShardLeader);\n    t.stop();\n\n    // let's record the ephemeralOwner of the parent leader node\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      // we just got to know the leader but its live node is gone already!\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    // reproduce the currently existing number of replicas per type\n    AtomicInteger numNrt = new AtomicInteger();\n    AtomicInteger numTlog = new AtomicInteger();\n    AtomicInteger numPull = new AtomicInteger();\n    parentSlice.getReplicas().forEach(r -> {\n      switch (r.getType()) {\n        case NRT:\n          numNrt.incrementAndGet();\n          break;\n        case TLOG:\n          numTlog.incrementAndGet();\n          break;\n        case PULL:\n          numPull.incrementAndGet();\n      }\n    });\n    int repFactor = numNrt.get() + numTlog.get() + numPull.get();\n\n    boolean success = false;\n    try {\n      // type of the first subreplica will be the same as leader\n      boolean firstNrtReplica = parentShardLeader.getType() == Replica.Type.NRT;\n      // verify that we indeed have the right number of correct replica types\n      if ((firstNrtReplica && numNrt.get() < 1) || (!firstNrtReplica && numTlog.get() < 1)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"aborting split - inconsistent replica types in collection \" + collectionName +\n            \": nrt=\" + numNrt.get() + \", tlog=\" + numTlog.get() + \", pull=\" + numPull.get() + \", shard leader type is \" +\n            parentShardLeader.getType());\n      }\n\n      // check for the lock\n      if (!lockForSplit(ocmh.cloudManager, collectionName, parentSlice.getName())) {\n        // mark as success to avoid clearing the lock in the \"finally\" block\n        success = true;\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Can't lock parent slice for splitting (another split operation running?): \" +\n            collectionName + \"/\" + parentSlice.getName());\n      }\n\n      List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n      t = timings.sub(\"fillRanges\");\n      String rangesStr = fillRanges(ocmh.cloudManager, message, collection, parentSlice, subRanges, subSlices, subShardNames, firstNrtReplica);\n      t.stop();\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else {\n            // delete the shards\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"deleteshard\");\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              ocmh.commandMap.get(DELETESHARD).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        // refresh the locally cached cluster state\n        // we know we have the latest because otherwise deleteshard would have failed\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      final String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = new HashMap<>();\n      String nodeName = parentShardLeader.getNodeName();\n\n      t = timings.sub(\"createSubSlicesAndLeadersInState\");\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.debug(\"Creating slice \" + subSlice + \" of collection \" + collectionName + \" on \" + nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", nodeName);\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(new ZkNodeProps(propMap)));\n\n        // wait until we are able to see the new shard in cluster state\n        ocmh.waitForNewShard(collectionName, subSlice);\n\n        // refresh cluster state\n        clusterState = zkStateReader.getClusterState();\n\n        log.debug(\"Adding first replica \" + subShardName + \" as part of slice \" + subSlice + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(REPLICA_TYPE, firstNrtReplica ? Replica.Type.NRT.toString() : Replica.Type.TLOG.toString());\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        ocmh.addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n      ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler(ocmh.overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient());\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard leaders\", asyncId, requestMap);\n\n      t.stop();\n      t = timings.sub(\"waitForSubSliceLeadersAlive\");\n      for (String subShardName : subShardNames) {\n        // wait for parent leader to acknowledge the sub-shard core\n        log.debug(\"Asking parent leader to wait for: \" + subShardName + \" to be alive on: \" + nodeName);\n        String coreNodeName = ocmh.waitForCoreNodeName(collectionName, nodeName, subShardName);\n        CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n        cmd.setCoreName(subShardName);\n        cmd.setNodeName(nodeName);\n        cmd.setCoreNodeName(coreNodeName);\n        cmd.setState(Replica.State.ACTIVE);\n        cmd.setCheckLive(true);\n        cmd.setOnlyIfLeader(true);\n\n        ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n        ocmh.sendShardRequest(nodeName, p, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD timed out waiting for subshard leaders to come up\",\n          asyncId, requestMap);\n      t.stop();\n\n      log.debug(\"Successfully created all sub-shards for collection \" + collectionName + \" parent shard: \" + slice\n          + \" on: \" + parentShardLeader);\n\n      log.info(\"Splitting shard \" + parentShardLeader.getName() + \" as part of slice \" + slice + \" of collection \"\n          + collectionName + \" on \" + parentShardLeader);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CommonAdminParams.SPLIT_METHOD, splitMethod.toLower());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      t = timings.sub(\"splitParentCore\");\n\n      ocmh.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to invoke SPLIT core admin command\", asyncId,\n          requestMap);\n      t.stop();\n\n      log.debug(\"Index on shard: {} split into {} successfully\", nodeName, subShardNames.size());\n\n      t = timings.sub(\"applyBufferedUpdates\");\n      // apply buffered updates on sub-shards\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n\n        log.debug(\"Applying buffered updates on : \" + subShardName);\n\n        params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n        params.set(CoreAdminParams.NAME, subShardName);\n\n        ocmh.sendShardRequest(nodeName, params, shardHandler, asyncId, requestMap);\n      }\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed while asking sub shard leaders\" +\n          \" to apply buffered updates\", asyncId, requestMap);\n      t.stop();\n\n      log.debug(\"Successfully applied buffered updates on : \" + subShardNames);\n\n      // Replica creation for the new Slices\n      // replica placement is controlled by the autoscaling policy framework\n\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      // TODO: Have maxShardsPerNode param for this operation?\n\n      // Remove the node that hosts the parent shard for replica creation.\n      nodeList.remove(nodeName);\n\n      // TODO: change this to handle sharding a slice into > 2 sub-shards.\n\n      // we have already created one subReplica for each subShard on the parent node.\n      // identify locations for the remaining replicas\n      if (firstNrtReplica) {\n        numNrt.decrementAndGet();\n      } else {\n        numTlog.decrementAndGet();\n      }\n\n      t = timings.sub(\"identifyNodesForReplicas\");\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(subSlices)\n          .assignNrtReplicas(numNrt.get())\n          .assignTlogReplicas(numTlog.get())\n          .assignPullReplicas(numPull.get())\n          .onNodes(new ArrayList<>(clusterState.getLiveNodes()))\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(ocmh.cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, collection);\n      List<ReplicaPosition> replicaPositions = assignStrategy.assign(ocmh.cloudManager, assignRequest);\n      sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n      t.stop();\n\n      t = timings.sub(\"createReplicaPlaceholders\");\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = Assign.buildSolrCoreName(collectionName, sliceName, replicaPosition.type, replicaPosition.index);\n\n        log.debug(\"Creating replica shard \" + solrCoreName + \" as part of slice \" + sliceName + \" of collection \"\n            + collectionName + \" on \" + subShardNodeName);\n\n        // we first create all replicas in DOWN state without actually creating their cores in order to\n        // avoid a race condition where Overseer may prematurely activate the new sub-slices (and deactivate\n        // the parent slice) before all new replicas are added. This situation may lead to a loss of performance\n        // because the new shards will be activated with possibly many fewer replicas.\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.REPLICA_TYPE, replicaPosition.type.name(),\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(subShardNodeName),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(REPLICA_TYPE, replicaPosition.type.name());\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        // copy over property params:\n        for (String key : message.keySet()) {\n          if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        // add async param\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        // special flag param to instruct addReplica not to create the replica in cluster state again\n        propMap.put(OverseerCollectionMessageHandler.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n      t.stop();\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      // compare against the ephemeralOwner of the parent leader node\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        // put sub-shards in recovery_failed state\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n\n        if (leaderZnodeStat == null)  {\n          // the leader is not live anymore, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else if (ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n          // there's a new leader, fail the split!\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      // we must set the slice state into recovery before actually creating the replica cores\n      // this ensures that the logic inside ReplicaMutator to update sub-shard state to 'active'\n      // always gets a chance to execute. See SOLR-7673\n\n      if (repFactor == 1) {\n        // switch sub shard states to 'active'\n        log.info(\"Replication factor is 1 so switching shard states\");\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n      } else {\n        log.info(\"Requesting shard state be set to 'recovery'\");\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n      }\n\n      t = timings.sub(\"createCoresForReplicas\");\n      // now actually create replica cores on sub shard nodes\n      for (Map<String, Object> replica : replicas) {\n        ocmh.addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      assert TestInjection.injectSplitFailureAfterReplicaCreation();\n\n      ocmh.processResponses(results, shardHandler, true, \"SPLITSHARD failed to create subshard replicas\", asyncId, requestMap);\n      t.stop();\n\n      log.info(\"Successfully created all replica shards for all sub-slices \" + subSlices);\n\n      t = timings.sub(\"finalCommit\");\n      ocmh.commit(results, slice.get(), parentShardLeader);\n      t.stop();\n      if (withTiming) {\n        results.add(CommonParams.TIMING, timings.asNamedList());\n      }\n      success = true;\n      // don't unlock the shard yet - only do this if the final switch-over in\n      // ReplicaMutator succeeds (or fails)\n      return true;\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: \" + collectionName + \" parent shard: \" + slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (sessionWrapper != null) sessionWrapper.release();\n      if (!success) {\n        cleanupAfterFailure(zkStateReader, collectionName, parentSlice.getName(), subSlices, offlineSlices);\n        unlockForSplit(ocmh.cloudManager, collectionName, parentSlice.getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"beea534dfd393d03270d1508d61d6b5edc2df27f":["ae70f2df00762dfce0455c0e39381848762662e5"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["beea534dfd393d03270d1508d61d6b5edc2df27f"],"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"685af99397b6da31116a2cac747ed255d217d080":["b94236357aaa22b76c10629851fe4e376e0cea82"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["685af99397b6da31116a2cac747ed255d217d080"],"ae70f2df00762dfce0455c0e39381848762662e5":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b94236357aaa22b76c10629851fe4e376e0cea82","685af99397b6da31116a2cac747ed255d217d080"],"69e6520a21709190413a63084ed135271aab1a7c":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["69e6520a21709190413a63084ed135271aab1a7c"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b94236357aaa22b76c10629851fe4e376e0cea82","685af99397b6da31116a2cac747ed255d217d080"]},"commit2Childs":{"beea534dfd393d03270d1508d61d6b5edc2df27f":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"b94236357aaa22b76c10629851fe4e376e0cea82":["685af99397b6da31116a2cac747ed255d217d080","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["69e6520a21709190413a63084ed135271aab1a7c"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["ae70f2df00762dfce0455c0e39381848762662e5"],"685af99397b6da31116a2cac747ed255d217d080":["20c968c14aace7cf49843bf2c1fafc7fd3845659","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"],"ae70f2df00762dfce0455c0e39381848762662e5":["beea534dfd393d03270d1508d61d6b5edc2df27f"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"69e6520a21709190413a63084ed135271aab1a7c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}