{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/geopoint/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","commits":[{"id":"8a093d23e938d132b81b5f2de3d6b168afe3608e","date":1455076308,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/geopoint/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","sourceNew":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    if (GeoEncodingUtils.compare(pointLon, rect.minLon) == 0.0 ||\n        GeoEncodingUtils.compare(pointLon, rect.maxLon) == 0.0 ||\n        GeoEncodingUtils.compare(pointLat, rect.minLat) == 0.0 ||\n        GeoEncodingUtils.compare(pointLat, rect.maxLat) == 0.0) {\n      // Point is very close to rect boundary\n      return null;\n    }\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, rect.maxLon, rect.maxLat);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, -180.0, rect.minLat, rect.maxLon, rect.maxLat)\n          || GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, 180.0, rect.maxLat);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    if (GeoEncodingUtils.compare(pointLon, rect.minLon) == 0.0 ||\n        GeoEncodingUtils.compare(pointLon, rect.maxLon) == 0.0 ||\n        GeoEncodingUtils.compare(pointLat, rect.minLat) == 0.0 ||\n        GeoEncodingUtils.compare(pointLat, rect.maxLat) == 0.0) {\n      // Point is very close to rect boundary\n      return null;\n    }\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, rect.maxLon, rect.maxLat);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, -180.0, rect.minLat, rect.maxLon, rect.maxLat)\n          || GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, 180.0, rect.maxLat);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/geopoint/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/geopoint/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","sourceNew":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    if (GeoEncodingUtils.compare(pointLon, rect.minLon) == 0.0 ||\n        GeoEncodingUtils.compare(pointLon, rect.maxLon) == 0.0 ||\n        GeoEncodingUtils.compare(pointLat, rect.minLat) == 0.0 ||\n        GeoEncodingUtils.compare(pointLat, rect.maxLat) == 0.0) {\n      // Point is very close to rect boundary\n      return null;\n    }\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRectPrecise(pointLat, pointLon, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRectPrecise(pointLat, pointLon, rect.minLat, rect.maxLat, -180.0, rect.maxLon)\n        || GeoRelationUtils.pointInRectPrecise(pointLat, pointLon, rect.minLat, rect.maxLat, rect.minLon, 180.0);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    if (GeoEncodingUtils.compare(pointLon, rect.minLon) == 0.0 ||\n        GeoEncodingUtils.compare(pointLon, rect.maxLon) == 0.0 ||\n        GeoEncodingUtils.compare(pointLat, rect.minLat) == 0.0 ||\n        GeoEncodingUtils.compare(pointLat, rect.maxLat) == 0.0) {\n      // Point is very close to rect boundary\n      return null;\n    }\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, rect.maxLon, rect.maxLat);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, -180.0, rect.minLat, rect.maxLon, rect.maxLat)\n          || GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, 180.0, rect.maxLat);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3","date":1458680048,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/geopoint/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    if (GeoEncodingUtils.compare(pointLon, rect.minLon) == 0.0 ||\n        GeoEncodingUtils.compare(pointLon, rect.maxLon) == 0.0 ||\n        GeoEncodingUtils.compare(pointLat, rect.minLat) == 0.0 ||\n        GeoEncodingUtils.compare(pointLat, rect.maxLat) == 0.0) {\n      // Point is very close to rect boundary\n      return null;\n    }\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRectPrecise(pointLat, pointLon, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRectPrecise(pointLat, pointLon, rect.minLat, rect.maxLat, -180.0, rect.maxLon)\n        || GeoRelationUtils.pointInRectPrecise(pointLat, pointLon, rect.minLat, rect.maxLat, rect.minLon, 180.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec996bf2daff09d61a876319e8fae4aebbea58e3":["8a093d23e938d132b81b5f2de3d6b168afe3608e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a093d23e938d132b81b5f2de3d6b168afe3608e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb4875e9db9b77346c36b7fe0d4b8759a1e095d3"]},"commit2Childs":{"ec996bf2daff09d61a876319e8fae4aebbea58e3":["cb4875e9db9b77346c36b7fe0d4b8759a1e095d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a093d23e938d132b81b5f2de3d6b168afe3608e"],"8a093d23e938d132b81b5f2de3d6b168afe3608e":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}