{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#acquireWriteLocks(Directory...).mjava","commits":[{"id":"0fcdcf196523675146a4df3193e91413533857ab","date":1390686560,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#acquireWriteLocks(Directory...).mjava","pathOld":"/dev/null","sourceNew":"  /** Acquires write locks on all the directories; be sure\n   *  to match with a call to {@link IOUtils#close} in a\n   *  finally clause. */\n  private List<Lock> acquireWriteLocks(Directory... dirs) throws IOException {\n    List<Lock> locks = new ArrayList<Lock>();\n    for(int i=0;i<dirs.length;i++) {\n      boolean success = false;\n      try {\n        Lock lock = dirs[i].makeLock(WRITE_LOCK_NAME);\n        locks.add(lock);\n        lock.obtain(config.getWriteLockTimeout());\n        success = true;\n      } finally {\n        if (success == false) {\n          // Release all previously acquired locks:\n          IOUtils.closeWhileHandlingException(locks);\n        }\n      }\n    }\n    return locks;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#acquireWriteLocks(Directory...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#acquireWriteLocks(Directory...).mjava","sourceNew":"  /** Acquires write locks on all the directories; be sure\n   *  to match with a call to {@link IOUtils#close} in a\n   *  finally clause. */\n  private List<Lock> acquireWriteLocks(Directory... dirs) throws IOException {\n    List<Lock> locks = new ArrayList<>();\n    for(int i=0;i<dirs.length;i++) {\n      boolean success = false;\n      try {\n        Lock lock = dirs[i].makeLock(WRITE_LOCK_NAME);\n        locks.add(lock);\n        lock.obtain(config.getWriteLockTimeout());\n        success = true;\n      } finally {\n        if (success == false) {\n          // Release all previously acquired locks:\n          IOUtils.closeWhileHandlingException(locks);\n        }\n      }\n    }\n    return locks;\n  }\n\n","sourceOld":"  /** Acquires write locks on all the directories; be sure\n   *  to match with a call to {@link IOUtils#close} in a\n   *  finally clause. */\n  private List<Lock> acquireWriteLocks(Directory... dirs) throws IOException {\n    List<Lock> locks = new ArrayList<Lock>();\n    for(int i=0;i<dirs.length;i++) {\n      boolean success = false;\n      try {\n        Lock lock = dirs[i].makeLock(WRITE_LOCK_NAME);\n        locks.add(lock);\n        lock.obtain(config.getWriteLockTimeout());\n        success = true;\n      } finally {\n        if (success == false) {\n          // Release all previously acquired locks:\n          IOUtils.closeWhileHandlingException(locks);\n        }\n      }\n    }\n    return locks;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#acquireWriteLocks(Directory...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#acquireWriteLocks(Directory...).mjava","sourceNew":"  /** Acquires write locks on all the directories; be sure\n   *  to match with a call to {@link IOUtils#close} in a\n   *  finally clause. */\n  private List<Lock> acquireWriteLocks(Directory... dirs) throws IOException {\n    List<Lock> locks = new ArrayList<>();\n    for(int i=0;i<dirs.length;i++) {\n      boolean success = false;\n      try {\n        Lock lock = dirs[i].obtainLock(WRITE_LOCK_NAME);\n        locks.add(lock);\n        success = true;\n      } finally {\n        if (success == false) {\n          // Release all previously acquired locks:\n          // TODO: addSuppressed? it could be many...\n          IOUtils.closeWhileHandlingException(locks);\n        }\n      }\n    }\n    return locks;\n  }\n\n","sourceOld":"  /** Acquires write locks on all the directories; be sure\n   *  to match with a call to {@link IOUtils#close} in a\n   *  finally clause. */\n  private List<Lock> acquireWriteLocks(Directory... dirs) throws IOException {\n    List<Lock> locks = new ArrayList<>();\n    for(int i=0;i<dirs.length;i++) {\n      boolean success = false;\n      try {\n        Lock lock = dirs[i].makeLock(WRITE_LOCK_NAME);\n        locks.add(lock);\n        lock.obtain(config.getWriteLockTimeout());\n        success = true;\n      } finally {\n        if (success == false) {\n          // Release all previously acquired locks:\n          IOUtils.closeWhileHandlingException(locks);\n        }\n      }\n    }\n    return locks;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7277addaa5100a3b464703b0a0efb5a993ff5999","date":1447264320,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#acquireWriteLocks(Directory...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#acquireWriteLocks(Directory...).mjava","sourceNew":"  /** Acquires write locks on all the directories; be sure\n   *  to match with a call to {@link IOUtils#close} in a\n   *  finally clause. */\n  private List<Lock> acquireWriteLocks(Directory... dirs) throws IOException {\n    List<Lock> locks = new ArrayList<>(dirs.length);\n    for(int i=0;i<dirs.length;i++) {\n      boolean success = false;\n      try {\n        Lock lock = dirs[i].obtainLock(WRITE_LOCK_NAME);\n        locks.add(lock);\n        success = true;\n      } finally {\n        if (success == false) {\n          // Release all previously acquired locks:\n          // TODO: addSuppressed? it could be many...\n          IOUtils.closeWhileHandlingException(locks);\n        }\n      }\n    }\n    return locks;\n  }\n\n","sourceOld":"  /** Acquires write locks on all the directories; be sure\n   *  to match with a call to {@link IOUtils#close} in a\n   *  finally clause. */\n  private List<Lock> acquireWriteLocks(Directory... dirs) throws IOException {\n    List<Lock> locks = new ArrayList<>();\n    for(int i=0;i<dirs.length;i++) {\n      boolean success = false;\n      try {\n        Lock lock = dirs[i].obtainLock(WRITE_LOCK_NAME);\n        locks.add(lock);\n        success = true;\n      } finally {\n        if (success == false) {\n          // Release all previously acquired locks:\n          // TODO: addSuppressed? it could be many...\n          IOUtils.closeWhileHandlingException(locks);\n        }\n      }\n    }\n    return locks;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"618635065f043788c9e034f96ca5cd5cea1b4592":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0fcdcf196523675146a4df3193e91413533857ab"],"7277addaa5100a3b464703b0a0efb5a993ff5999":["618635065f043788c9e034f96ca5cd5cea1b4592"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0fcdcf196523675146a4df3193e91413533857ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7277addaa5100a3b464703b0a0efb5a993ff5999"]},"commit2Childs":{"618635065f043788c9e034f96ca5cd5cea1b4592":["7277addaa5100a3b464703b0a0efb5a993ff5999"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["618635065f043788c9e034f96ca5cd5cea1b4592"],"7277addaa5100a3b464703b0a0efb5a993ff5999":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0fcdcf196523675146a4df3193e91413533857ab"],"0fcdcf196523675146a4df3193e91413533857ab":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}