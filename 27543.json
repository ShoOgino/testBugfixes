{"path":"sandbox/contributions/taglib/WEB-INF/classes/com/netwebapps/taglib/search/SearchTag#setStopWords(String).mjava","commits":[{"id":"62d0fdff2a149d9e624677cac749c52b42f68ed7","date":1054228819,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/taglib/WEB-INF/classes/com/netwebapps/taglib/search/SearchTag#setStopWords(String).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * @param string -- a comma seperated list of stop words.\n\t */\n\tpublic void setStopWords(String swords) throws JspException{\n\t\tHashtable wordTable = new Hashtable();\n\t\tString[] temp = new String[wordTable.size()];\n\t\tif(swords.split(\",\").length > 0){\n\t\t\tString[] words = swords.split(\",\");\n\t\t\tfor (int i = 0; i < words.length; i++) {\n\t\t\t\tif(new File(words[i]).isFile()){\n\t\t\t\t\twordTable.putAll(WordlistLoader.getWordtable(words[i]));\n\t\t\t\t}else{\n\t\t\t\t\twordTable.put(words[i], words[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\ttemp = new String[wordTable.size()];\n\n\t\t\tint count = 0;\n\t\t\tif(wordTable.size() > 0){\n\t\t\t\tIterator wtIter = wordTable.keySet().iterator();\n\t\t\t\twhile (wtIter.hasNext()){\n\t\t\t\t\ttemp[count++] = (String) wtIter.next();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstopWords = temp;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73cd40a131227b5da820f72787809a5dd3d273f0","date":1073925716,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/taglib/WEB-INF/classes/com/netwebapps/taglib/search/SearchTag#setStopWords(String).mjava","pathOld":"sandbox/contributions/taglib/WEB-INF/classes/com/netwebapps/taglib/search/SearchTag#setStopWords(String).mjava","sourceNew":"\tpublic void setStopWords(String swords) throws JspException{\n\t\tHashtable wordTable = new Hashtable();\n\t\tString[] temp = new String[wordTable.size()];\n\t\tif(swords.split(\",\").length > 0){\n\t\t\tString[] words = swords.split(\",\");\n\t\t\tfor (int i = 0; i < words.length; i++) {\n\t\t\t\tif(new File(words[i]).isFile()){\n\t\t\t\t\twordTable.putAll(WordlistLoader.getWordtable(words[i]));\n\t\t\t\t}else{\n\t\t\t\t\twordTable.put(words[i], words[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\ttemp = new String[wordTable.size()];\n\n\t\t\tint count = 0;\n\t\t\tif(wordTable.size() > 0){\n\t\t\t\tIterator wtIter = wordTable.keySet().iterator();\n\t\t\t\twhile (wtIter.hasNext()){\n\t\t\t\t\ttemp[count++] = (String) wtIter.next();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstopWords = temp;\n\t}\n\n","sourceOld":"\t/**\n\t * @param string -- a comma seperated list of stop words.\n\t */\n\tpublic void setStopWords(String swords) throws JspException{\n\t\tHashtable wordTable = new Hashtable();\n\t\tString[] temp = new String[wordTable.size()];\n\t\tif(swords.split(\",\").length > 0){\n\t\t\tString[] words = swords.split(\",\");\n\t\t\tfor (int i = 0; i < words.length; i++) {\n\t\t\t\tif(new File(words[i]).isFile()){\n\t\t\t\t\twordTable.putAll(WordlistLoader.getWordtable(words[i]));\n\t\t\t\t}else{\n\t\t\t\t\twordTable.put(words[i], words[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\ttemp = new String[wordTable.size()];\n\n\t\t\tint count = 0;\n\t\t\tif(wordTable.size() > 0){\n\t\t\t\tIterator wtIter = wordTable.keySet().iterator();\n\t\t\t\twhile (wtIter.hasNext()){\n\t\t\t\t\ttemp[count++] = (String) wtIter.next();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstopWords = temp;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cb46bdf4f3ba6a3060f464a9ef460db279c9cc2","date":1108145376,"type":4,"author":"Erik Hatcher","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/taglib/WEB-INF/classes/com/netwebapps/taglib/search/SearchTag#setStopWords(String).mjava","sourceNew":null,"sourceOld":"\tpublic void setStopWords(String swords) throws JspException{\n\t\tHashtable wordTable = new Hashtable();\n\t\tString[] temp = new String[wordTable.size()];\n\t\tif(swords.split(\",\").length > 0){\n\t\t\tString[] words = swords.split(\",\");\n\t\t\tfor (int i = 0; i < words.length; i++) {\n\t\t\t\tif(new File(words[i]).isFile()){\n\t\t\t\t\twordTable.putAll(WordlistLoader.getWordtable(words[i]));\n\t\t\t\t}else{\n\t\t\t\t\twordTable.put(words[i], words[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\ttemp = new String[wordTable.size()];\n\n\t\t\tint count = 0;\n\t\t\tif(wordTable.size() > 0){\n\t\t\t\tIterator wtIter = wordTable.keySet().iterator();\n\t\t\t\twhile (wtIter.hasNext()){\n\t\t\t\t\ttemp[count++] = (String) wtIter.next();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstopWords = temp;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"62d0fdff2a149d9e624677cac749c52b42f68ed7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73cd40a131227b5da820f72787809a5dd3d273f0":["62d0fdff2a149d9e624677cac749c52b42f68ed7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9cb46bdf4f3ba6a3060f464a9ef460db279c9cc2"],"9cb46bdf4f3ba6a3060f464a9ef460db279c9cc2":["73cd40a131227b5da820f72787809a5dd3d273f0"]},"commit2Childs":{"62d0fdff2a149d9e624677cac749c52b42f68ed7":["73cd40a131227b5da820f72787809a5dd3d273f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["62d0fdff2a149d9e624677cac749c52b42f68ed7"],"73cd40a131227b5da820f72787809a5dd3d273f0":["9cb46bdf4f3ba6a3060f464a9ef460db279c9cc2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9cb46bdf4f3ba6a3060f464a9ef460db279c9cc2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}