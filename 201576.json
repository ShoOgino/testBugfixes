{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkFields(Fields,Bits,int,FieldInfos,NormsProducer,boolean,boolean,PrintStream,boolean,boolean).mjava","commits":[{"id":"071935ce120b55517dcd86b9f985dbda028ba94e","date":1525265372,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkFields(Fields,Bits,int,FieldInfos,NormsProducer,boolean,boolean,PrintStream,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkFields(Fields,Bits,int,FieldInfos,boolean,boolean,PrintStream,boolean,boolean).mjava","sourceNew":"  /**\n   * checks Fields api is consistent with itself.\n   * searcher is optional, to verify with queries. Can be null.\n   */\n  private static Status.TermIndexStatus checkFields(Fields fields, Bits liveDocs, int maxDoc, FieldInfos fieldInfos,\n      NormsProducer normsProducer, boolean doPrint, boolean isVectors, PrintStream infoStream, boolean verbose, boolean doSlowChecks) throws IOException {\n    // TODO: we should probably return our own stats thing...?!\n    long startNS;\n    if (doPrint) {\n      startNS = System.nanoTime();\n    } else {\n      startNS = 0;\n    }\n    \n    final Status.TermIndexStatus status = new Status.TermIndexStatus();\n    int computedFieldCount = 0;\n\n    PostingsEnum postings = null;\n    \n    String lastField = null;\n    for (String field : fields) {\n\n      // MultiFieldsEnum relies upon this order...\n      if (lastField != null && field.compareTo(lastField) <= 0) {\n        throw new RuntimeException(\"fields out of order: lastField=\" + lastField + \" field=\" + field);\n      }\n      lastField = field;\n      \n      // check that the field is in fieldinfos, and is indexed.\n      // TODO: add a separate test to check this for different reader impls\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      if (fieldInfo == null) {\n        throw new RuntimeException(\"fieldsEnum inconsistent with fieldInfos, no fieldInfos for: \" + field);\n      }\n      if (fieldInfo.getIndexOptions() == IndexOptions.NONE) {\n        throw new RuntimeException(\"fieldsEnum inconsistent with fieldInfos, isIndexed == false for: \" + field);\n      }\n      \n      // TODO: really the codec should not return a field\n      // from FieldsEnum if it has no Terms... but we do\n      // this today:\n      // assert fields.terms(field) != null;\n      computedFieldCount++;\n      \n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      \n      if (terms.getDocCount() > maxDoc) {\n        throw new RuntimeException(\"docCount > maxDoc for field: \" + field + \", docCount=\" + terms.getDocCount() + \", maxDoc=\" + maxDoc);\n      }\n      \n      final boolean hasFreqs = terms.hasFreqs();\n      final boolean hasPositions = terms.hasPositions();\n      final boolean hasPayloads = terms.hasPayloads();\n      final boolean hasOffsets = terms.hasOffsets();\n      \n      BytesRef maxTerm;\n      BytesRef minTerm;\n      if (isVectors) {\n        // Term vectors impls can be very slow for getMax\n        maxTerm = null;\n        minTerm = null;\n      } else {\n        BytesRef bb = terms.getMin();\n        if (bb != null) {\n          assert bb.isValid();\n          minTerm = BytesRef.deepCopyOf(bb);\n        } else {\n          minTerm = null;\n        }\n\n        bb = terms.getMax();\n        if (bb != null) {\n          assert bb.isValid();\n          maxTerm = BytesRef.deepCopyOf(bb);\n          if (minTerm == null) {\n            throw new RuntimeException(\"field \\\"\" + field + \"\\\" has null minTerm but non-null maxTerm\");\n          }\n        } else {\n          maxTerm = null;\n          if (minTerm != null) {\n            throw new RuntimeException(\"field \\\"\" + field + \"\\\" has non-null minTerm but null maxTerm\");\n          }\n        }\n      }\n\n      // term vectors cannot omit TF:\n      final boolean expectedHasFreqs = (isVectors || fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0);\n\n      if (hasFreqs != expectedHasFreqs) {\n        throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasFreqs=\" + expectedHasFreqs + \" but got \" + hasFreqs);\n      }\n\n      if (!isVectors) {\n        final boolean expectedHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        if (hasPositions != expectedHasPositions) {\n          throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasPositions=\" + expectedHasPositions + \" but got \" + hasPositions);\n        }\n\n        final boolean expectedHasPayloads = fieldInfo.hasPayloads();\n        if (hasPayloads != expectedHasPayloads) {\n          throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasPayloads=\" + expectedHasPayloads + \" but got \" + hasPayloads);\n        }\n\n        final boolean expectedHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        if (hasOffsets != expectedHasOffsets) {\n          throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasOffsets=\" + expectedHasOffsets + \" but got \" + hasOffsets);\n        }\n      }\n\n      final TermsEnum termsEnum = terms.iterator();\n\n      boolean hasOrd = true;\n      final long termCountStart = status.delTermCount + status.termCount;\n      \n      BytesRefBuilder lastTerm = null;\n      \n      long sumTotalTermFreq = 0;\n      long sumDocFreq = 0;\n      FixedBitSet visitedDocs = new FixedBitSet(maxDoc);\n      while(true) {\n        \n        final BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        // System.out.println(\"CI: field=\" + field + \" check term=\" + term + \" docFreq=\" + termsEnum.docFreq());\n        \n        assert term.isValid();\n        \n        // make sure terms arrive in order according to\n        // the comp\n        if (lastTerm == null) {\n          lastTerm = new BytesRefBuilder();\n          lastTerm.copyBytes(term);\n        } else {\n          if (lastTerm.get().compareTo(term) >= 0) {\n            throw new RuntimeException(\"terms out of order: lastTerm=\" + lastTerm.get() + \" term=\" + term);\n          }\n          lastTerm.copyBytes(term);\n        }\n\n        if (isVectors == false) {\n          if (minTerm == null) {\n            // We checked this above:\n            assert maxTerm == null;\n            throw new RuntimeException(\"field=\\\"\" + field + \"\\\": invalid term: term=\" + term + \", minTerm=\" + minTerm);\n          }\n        \n          if (term.compareTo(minTerm) < 0) {\n            throw new RuntimeException(\"field=\\\"\" + field + \"\\\": invalid term: term=\" + term + \", minTerm=\" + minTerm);\n          }\n        \n          if (term.compareTo(maxTerm) > 0) {\n            throw new RuntimeException(\"field=\\\"\" + field + \"\\\": invalid term: term=\" + term + \", maxTerm=\" + maxTerm);\n          }\n        }\n        \n        final int docFreq = termsEnum.docFreq();\n        if (docFreq <= 0) {\n          throw new RuntimeException(\"docfreq: \" + docFreq + \" is out of bounds\");\n        }\n        sumDocFreq += docFreq;\n\n        postings = termsEnum.postings(postings, PostingsEnum.ALL);\n\n        if (hasFreqs == false) {\n          if (termsEnum.totalTermFreq() != termsEnum.docFreq()) {\n            throw new RuntimeException(\"field \\\"\" + field + \"\\\" hasFreqs is false, but TermsEnum.totalTermFreq()=\" + termsEnum.totalTermFreq() + \" (should be \" + termsEnum.docFreq() + \")\");\n          }\n        }\n        \n        if (hasOrd) {\n          long ord = -1;\n          try {\n            ord = termsEnum.ord();\n          } catch (UnsupportedOperationException uoe) {\n            hasOrd = false;\n          }\n          \n          if (hasOrd) {\n            final long ordExpected = status.delTermCount + status.termCount - termCountStart;\n            if (ord != ordExpected) {\n              throw new RuntimeException(\"ord mismatch: TermsEnum has ord=\" + ord + \" vs actual=\" + ordExpected);\n            }\n          }\n        }\n        \n        int lastDoc = -1;\n        int docCount = 0;\n        boolean hasNonDeletedDocs = false;\n        long totalTermFreq = 0;\n        while(true) {\n          final int doc = postings.nextDoc();\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          visitedDocs.set(doc);\n          int freq = postings.freq();\n          if (freq <= 0) {\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": freq \" + freq + \" is out of bounds\");\n          }\n          if (hasFreqs == false) {\n            // When a field didn't index freq, it must\n            // consistently \"lie\" and pretend that freq was\n            // 1:\n            if (postings.freq() != 1) {\n              throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": freq \" + freq + \" != 1 when Terms.hasFreqs() is false\");\n            }\n          }\n          totalTermFreq += freq;\n\n          if (liveDocs == null || liveDocs.get(doc)) {\n            hasNonDeletedDocs = true;\n            status.totFreq++;\n            if (freq >= 0) {\n              status.totPos += freq;\n            }\n          }\n          docCount++;\n          \n          if (doc <= lastDoc) {\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" <= lastDoc \" + lastDoc);\n          }\n          if (doc >= maxDoc) {\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" >= maxDoc \" + maxDoc);\n          }\n          \n          lastDoc = doc;\n          \n          int lastPos = -1;\n          int lastOffset = 0;\n          if (hasPositions) {\n            for(int j=0;j<freq;j++) {\n              final int pos = postings.nextPosition();\n\n              if (pos < 0) {\n                throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" is out of bounds\");\n              }\n              if (pos > IndexWriter.MAX_POSITION) {\n                throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" > IndexWriter.MAX_POSITION=\" + IndexWriter.MAX_POSITION);\n              }\n              if (pos < lastPos) {\n                throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" < lastPos \" + lastPos);\n              }\n              lastPos = pos;\n              BytesRef payload = postings.getPayload();\n              if (payload != null) {\n                assert payload.isValid();\n              }\n              if (payload != null && payload.length < 1) {\n                throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" payload length is out of bounds \" + payload.length);\n              }\n              if (hasOffsets) {\n                int startOffset = postings.startOffset();\n                int endOffset = postings.endOffset();\n                if (startOffset < 0) {\n                  throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \": startOffset \" + startOffset + \" is out of bounds\");\n                }\n                if (startOffset < lastOffset) {\n                  throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \": startOffset \" + startOffset + \" < lastStartOffset \" + lastOffset + \"; consider using the FixBrokenOffsets tool in Lucene's backward-codecs module to correct your index\");\n                }\n                if (endOffset < 0) {\n                  throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \": endOffset \" + endOffset + \" is out of bounds\");\n                }\n                if (endOffset < startOffset) {\n                  throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \": endOffset \" + endOffset + \" < startOffset \" + startOffset);\n                }\n                lastOffset = startOffset;\n              }\n            }\n          }\n        }\n        \n        if (hasNonDeletedDocs) {\n          status.termCount++;\n        } else {\n          status.delTermCount++;\n        }\n        \n        final long totalTermFreq2 = termsEnum.totalTermFreq();\n        \n        if (docCount != docFreq) {\n          throw new RuntimeException(\"term \" + term + \" docFreq=\" + docFreq + \" != tot docs w/o deletions \" + docCount);\n        }\n        if (docFreq > terms.getDocCount()) {\n          throw new RuntimeException(\"term \" + term + \" docFreq=\" + docFreq + \" > docCount=\" + terms.getDocCount());\n        }\n        if (totalTermFreq2 <= 0) {\n          throw new RuntimeException(\"totalTermFreq: \" + totalTermFreq2 + \" is out of bounds\");\n        }\n        sumTotalTermFreq += totalTermFreq;\n        if (totalTermFreq != totalTermFreq2) {\n          throw new RuntimeException(\"term \" + term + \" totalTermFreq=\" + totalTermFreq2 + \" != recomputed totalTermFreq=\" + totalTermFreq);\n        }\n        if (totalTermFreq2 < docFreq) {\n          throw new RuntimeException(\"totalTermFreq: \" + totalTermFreq2 + \" is out of bounds, docFreq=\" + docFreq);\n        }\n        if (hasFreqs == false && totalTermFreq != docFreq) {\n          throw new RuntimeException(\"term \" + term + \" totalTermFreq=\" + totalTermFreq + \" !=  docFreq=\" + docFreq);\n        }\n        \n        // Test skipping\n        if (hasPositions) {\n          for(int idx=0;idx<7;idx++) {\n            final int skipDocID = (int) (((idx+1)*(long) maxDoc)/8);\n            postings = termsEnum.postings(postings, PostingsEnum.ALL);\n            final int docID = postings.advance(skipDocID);\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            } else {\n              if (docID < skipDocID) {\n                throw new RuntimeException(\"term \" + term + \": advance(docID=\" + skipDocID + \") returned docID=\" + docID);\n              }\n              final int freq = postings.freq();\n              if (freq <= 0) {\n                throw new RuntimeException(\"termFreq \" + freq + \" is out of bounds\");\n              }\n              int lastPosition = -1;\n              int lastOffset = 0;\n              for(int posUpto=0;posUpto<freq;posUpto++) {\n                final int pos = postings.nextPosition();\n\n                if (pos < 0) {\n                  throw new RuntimeException(\"position \" + pos + \" is out of bounds\");\n                }\n                if (pos < lastPosition) {\n                  throw new RuntimeException(\"position \" + pos + \" is < lastPosition \" + lastPosition);\n                }\n                lastPosition = pos;\n                if (hasOffsets) {\n                  int startOffset = postings.startOffset();\n                  int endOffset = postings.endOffset();\n                  // NOTE: we cannot enforce any bounds whatsoever on vectors... they were a free-for-all before?\n                  // but for offsets in the postings lists these checks are fine: they were always enforced by IndexWriter\n                  if (!isVectors) {\n                    if (startOffset < 0) {\n                      throw new RuntimeException(\"term \" + term + \": doc \" + docID + \": pos \" + pos + \": startOffset \" + startOffset + \" is out of bounds\");\n                    }\n                    if (startOffset < lastOffset) {\n                      throw new RuntimeException(\"term \" + term + \": doc \" + docID + \": pos \" + pos + \": startOffset \" + startOffset + \" < lastStartOffset \" + lastOffset);\n                    }\n                    if (endOffset < 0) {\n                      throw new RuntimeException(\"term \" + term + \": doc \" + docID + \": pos \" + pos + \": endOffset \" + endOffset + \" is out of bounds\");\n                    }\n                    if (endOffset < startOffset) {\n                      throw new RuntimeException(\"term \" + term + \": doc \" + docID + \": pos \" + pos + \": endOffset \" + endOffset + \" < startOffset \" + startOffset);\n                    }\n                  }\n                  lastOffset = startOffset;\n                }\n              } \n              \n              final int nextDocID = postings.nextDoc();\n              if (nextDocID == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n              if (nextDocID <= docID) {\n                throw new RuntimeException(\"term \" + term + \": advance(docID=\" + skipDocID + \"), then .next() returned docID=\" + nextDocID + \" vs prev docID=\" + docID);\n              }\n            }\n\n            if (isVectors) {\n              // Only 1 doc in the postings for term vectors, so we only test 1 advance:\n              break;\n            }\n          }\n        } else {\n          for(int idx=0;idx<7;idx++) {\n            final int skipDocID = (int) (((idx+1)*(long) maxDoc)/8);\n            postings = termsEnum.postings(postings, PostingsEnum.NONE);\n            final int docID = postings.advance(skipDocID);\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            } else {\n              if (docID < skipDocID) {\n                throw new RuntimeException(\"term \" + term + \": advance(docID=\" + skipDocID + \") returned docID=\" + docID);\n              }\n              final int nextDocID = postings.nextDoc();\n              if (nextDocID == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n              if (nextDocID <= docID) {\n                throw new RuntimeException(\"term \" + term + \": advance(docID=\" + skipDocID + \"), then .next() returned docID=\" + nextDocID + \" vs prev docID=\" + docID);\n              }\n            }\n            if (isVectors) {\n              // Only 1 doc in the postings for term vectors, so we only test 1 advance:\n              break;\n            }\n          }\n        }\n\n        // Checking score blocks is heavy, we only do it on long postings lists, on every 1024th term\n        // or if slow checks are enabled.\n        if (doSlowChecks || docFreq > 1024 || (status.termCount + status.delTermCount) % 1024 == 0) {\n          // First check max scores and block uptos\n          // But only if slok checks are enabled since we visit all docs\n          if (doSlowChecks) {\n            int max = -1;\n            int maxFreq = 0;\n            ImpactsEnum impactsEnum = termsEnum.impacts(PostingsEnum.FREQS);\n            postings = termsEnum.postings(postings, PostingsEnum.FREQS);\n            for (int doc = impactsEnum.nextDoc(); ; doc = impactsEnum.nextDoc()) {\n              if (postings.nextDoc() != doc) {\n                throw new RuntimeException(\"Wrong next doc: \" + doc + \", expected \" + postings.docID());\n              }\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n              if (postings.freq() != impactsEnum.freq()) {\n                throw new RuntimeException(\"Wrong freq, expected \" + postings.freq() + \", but got \" + impactsEnum.freq());\n              }\n              if (doc > max) {\n                impactsEnum.advanceShallow(doc);\n                Impacts impacts = impactsEnum.getImpacts();\n                checkImpacts(impacts, doc);\n                max = impacts.getDocIdUpTo(0);\n                List<Impact> impacts0 = impacts.getImpacts(0);\n                maxFreq = impacts0.get(impacts0.size() - 1).freq;\n              }\n              if (impactsEnum.freq() > maxFreq) {\n                throw new RuntimeException(\"freq \" + impactsEnum.freq() + \" is greater than the max freq according to impacts \" + maxFreq);\n              }\n            }\n          }\n\n          // Now check advancing\n          ImpactsEnum impactsEnum = termsEnum.impacts(PostingsEnum.FREQS);\n          postings = termsEnum.postings(postings, PostingsEnum.FREQS);\n\n          int max = -1;\n          int maxFreq = 0;\n          while (true) {\n            int doc = impactsEnum.docID();\n            boolean advance;\n            int target;\n            if (((field.hashCode() + doc) & 1) == 1) {\n              advance = false;\n              target = doc + 1;\n            } else {\n              advance = true;\n              int delta = Math.min(1 + ((31 * field.hashCode() + doc) & 0x1ff), DocIdSetIterator.NO_MORE_DOCS - doc);\n              target = impactsEnum.docID() + delta;\n            }\n\n            if (target > max && target % 2 == 1) {\n              int delta = Math.min((31 * field.hashCode() + target) & 0x1ff, DocIdSetIterator.NO_MORE_DOCS - target);\n              max = target + delta;\n              impactsEnum.advanceShallow(target);\n              Impacts impacts = impactsEnum.getImpacts();\n              checkImpacts(impacts, doc);\n              maxFreq = Integer.MAX_VALUE;\n              for (int level = 0; level < impacts.numLevels(); ++level) {\n                if (impacts.getDocIdUpTo(level) >= max) {\n                  List<Impact> perLevelImpacts = impacts.getImpacts(level);\n                  maxFreq = perLevelImpacts.get(perLevelImpacts.size() - 1).freq;\n                  break;\n                }\n              }\n            }\n\n            if (advance) {\n              doc = impactsEnum.advance(target);\n            } else {\n              doc = impactsEnum.nextDoc();\n            }\n\n            if (postings.advance(target) != doc) {\n              throw new RuntimeException(\"Impacts do not advance to the same document as postings for target \" + target + \", postings: \" + postings.docID() + \", impacts: \" + doc);\n            }\n            if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            if (postings.freq() != impactsEnum.freq()) {\n              throw new RuntimeException(\"Wrong freq, expected \" + postings.freq() + \", but got \" + impactsEnum.freq());\n            }\n  \n            if (doc >= max) {\n              int delta = Math.min((31 * field.hashCode() + target & 0x1ff), DocIdSetIterator.NO_MORE_DOCS - doc);\n              max = doc + delta;\n              impactsEnum.advanceShallow(doc);\n              Impacts impacts = impactsEnum.getImpacts();\n              checkImpacts(impacts, doc);\n              maxFreq = Integer.MAX_VALUE;\n              for (int level = 0; level < impacts.numLevels(); ++level) {\n                if (impacts.getDocIdUpTo(level) >= max) {\n                  List<Impact> perLevelImpacts = impacts.getImpacts(level);\n                  maxFreq = perLevelImpacts.get(perLevelImpacts.size() - 1).freq;\n                  break;\n                }\n              }\n            }\n\n            if (impactsEnum.freq() > maxFreq) {\n              throw new RuntimeException(\"Term frequency \" + impactsEnum.freq() + \" is greater than the max freq according to impacts \" + maxFreq);\n            }\n          }\n        }\n      }\n\n      if (minTerm != null && status.termCount + status.delTermCount == 0) {\n        throw new RuntimeException(\"field=\\\"\" + field + \"\\\": minTerm is non-null yet we saw no terms: \" + minTerm);\n      }\n\n      final Terms fieldTerms = fields.terms(field);\n      if (fieldTerms == null) {\n        // Unusual: the FieldsEnum returned a field but\n        // the Terms for that field is null; this should\n        // only happen if it's a ghost field (field with\n        // no terms, eg there used to be terms but all\n        // docs got deleted and then merged away):\n        \n      } else {\n\n        long fieldTermCount = (status.delTermCount+status.termCount)-termCountStart;\n\n        // LUCENE-5879: this is just too slow for now:\n        if (false && hasFreqs == false) {\n          // For DOCS_ONLY fields we recursively test term ranges:\n          checkTermRanges(field, maxDoc, fieldTerms, fieldTermCount);\n        }\n\n        final Object stats = fieldTerms.getStats();\n        assert stats != null;\n        if (status.blockTreeStats == null) {\n          status.blockTreeStats = new HashMap<>();\n        }\n        status.blockTreeStats.put(field, stats);\n\n        final long actualSumDocFreq = fields.terms(field).getSumDocFreq();\n        if (sumDocFreq != actualSumDocFreq) {\n          throw new RuntimeException(\"sumDocFreq for field \" + field + \"=\" + actualSumDocFreq + \" != recomputed sumDocFreq=\" + sumDocFreq);\n        }\n\n        final long actualSumTotalTermFreq = fields.terms(field).getSumTotalTermFreq();\n        if (sumTotalTermFreq != actualSumTotalTermFreq) {\n          throw new RuntimeException(\"sumTotalTermFreq for field \" + field + \"=\" + actualSumTotalTermFreq + \" != recomputed sumTotalTermFreq=\" + sumTotalTermFreq);\n        } \n        \n        if (hasFreqs == false && sumTotalTermFreq != sumDocFreq) {\n          throw new RuntimeException(\"sumTotalTermFreq for field \" + field + \" should be \" + sumDocFreq + \", got sumTotalTermFreq=\" + sumTotalTermFreq);\n        }\n        \n        final int v = fieldTerms.getDocCount();\n        if (visitedDocs.cardinality() != v) {\n          throw new RuntimeException(\"docCount for field \" + field + \"=\" + v + \" != recomputed docCount=\" + visitedDocs.cardinality());\n        }\n\n        if (fieldInfo.hasNorms() && isVectors == false) {\n          final NumericDocValues norms = normsProducer.getNorms(fieldInfo);\n          // Cross-check terms with norms\n          for (int doc = norms.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = norms.nextDoc()) {\n            if (liveDocs != null && liveDocs.get(doc) == false) {\n              // Norms may only be out of sync with terms on deleted documents.\n              // This happens when a document fails indexing and in that case it\n              // should be immediately marked as deleted by the IndexWriter.\n              continue;\n            }\n            final long norm = norms.longValue();\n            if (norm != 0 && visitedDocs.get(doc) == false) {\n              throw new RuntimeException(\"Document \" + doc + \" doesn't have terms according to postings but has a norm value that is not zero: \" + norm);\n            } else if (norm == 0 && visitedDocs.get(doc)) {\n              throw new RuntimeException(\"Document \" + doc + \" has terms according to postings but its norm value is 0, which may only be used on documents that have no terms\");\n            }\n          }\n        }\n\n        // Test seek to last term:\n        if (lastTerm != null) {\n          if (termsEnum.seekCeil(lastTerm.get()) != TermsEnum.SeekStatus.FOUND) { \n            throw new RuntimeException(\"seek to last term \" + lastTerm.get() + \" failed\");\n          }\n          if (termsEnum.term().equals(lastTerm.get()) == false) {\n            throw new RuntimeException(\"seek to last term \" + lastTerm.get() + \" returned FOUND but seeked to the wrong term \" + termsEnum.term());\n          }\n          \n          int expectedDocFreq = termsEnum.docFreq();\n          PostingsEnum d = termsEnum.postings(null, PostingsEnum.NONE);\n          int docFreq = 0;\n          while (d.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            docFreq++;\n          }\n          if (docFreq != expectedDocFreq) {\n            throw new RuntimeException(\"docFreq for last term \" + lastTerm.get() + \"=\" + expectedDocFreq + \" != recomputed docFreq=\" + docFreq);\n          }\n        }\n        \n        // check unique term count\n        long termCount = -1;\n        \n        if (fieldTermCount > 0) {\n          termCount = fields.terms(field).size();\n          \n          if (termCount != -1 && termCount != fieldTermCount) {\n            throw new RuntimeException(\"termCount mismatch \" + termCount + \" vs \" + fieldTermCount);\n          }\n        }\n\n        // Test seeking by ord\n        if (hasOrd && status.termCount-termCountStart > 0) {\n          int seekCount = (int) Math.min(10000L, termCount);\n          if (seekCount > 0) {\n            BytesRef[] seekTerms = new BytesRef[seekCount];\n            \n            // Seek by ord\n            for(int i=seekCount-1;i>=0;i--) {\n              long ord = i*(termCount/seekCount);\n              termsEnum.seekExact(ord);\n              long actualOrd = termsEnum.ord();\n              if (actualOrd != ord) {\n                throw new RuntimeException(\"seek to ord \" + ord + \" returned ord \" + actualOrd);\n              }\n              seekTerms[i] = BytesRef.deepCopyOf(termsEnum.term());\n            }\n            \n            // Seek by term\n            for(int i=seekCount-1;i>=0;i--) {\n              if (termsEnum.seekCeil(seekTerms[i]) != TermsEnum.SeekStatus.FOUND) {\n                throw new RuntimeException(\"seek to existing term \" + seekTerms[i] + \" failed\");\n              }\n              if (termsEnum.term().equals(seekTerms[i]) == false) {\n                throw new RuntimeException(\"seek to existing term \" + seekTerms[i] + \" returned FOUND but seeked to the wrong term \" + termsEnum.term());\n              }\n              \n              postings = termsEnum.postings(postings, PostingsEnum.NONE);\n              if (postings == null) {\n                throw new RuntimeException(\"null DocsEnum from to existing term \" + seekTerms[i]);\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    int fieldCount = fields.size();\n    \n    if (fieldCount != -1) {\n      if (fieldCount < 0) {\n        throw new RuntimeException(\"invalid fieldCount: \" + fieldCount);\n      }\n      if (fieldCount != computedFieldCount) {\n        throw new RuntimeException(\"fieldCount mismatch \" + fieldCount + \" vs recomputed field count \" + computedFieldCount);\n      }\n    }\n\n    if (doPrint) {\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d terms; %d terms/docs pairs; %d tokens] [took %.3f sec]\",\n                                    status.termCount, status.totFreq, status.totPos, nsToSec(System.nanoTime()-startNS)));\n    }\n    \n    if (verbose && status.blockTreeStats != null && infoStream != null && status.termCount > 0) {\n      for(Map.Entry<String, Object> ent : status.blockTreeStats.entrySet()) {\n        infoStream.println(\"      field \\\"\" + ent.getKey() + \"\\\":\");\n        infoStream.println(\"      \" + ent.getValue().toString().replace(\"\\n\", \"\\n      \"));\n      }\n    }\n    \n    return status;\n  }\n\n","sourceOld":"  /**\n   * checks Fields api is consistent with itself.\n   * searcher is optional, to verify with queries. Can be null.\n   */\n  private static Status.TermIndexStatus checkFields(Fields fields, Bits liveDocs, int maxDoc, FieldInfos fieldInfos, boolean doPrint, boolean isVectors, PrintStream infoStream, boolean verbose, boolean doSlowChecks) throws IOException {\n    // TODO: we should probably return our own stats thing...?!\n    long startNS;\n    if (doPrint) {\n      startNS = System.nanoTime();\n    } else {\n      startNS = 0;\n    }\n    \n    final Status.TermIndexStatus status = new Status.TermIndexStatus();\n    int computedFieldCount = 0;\n\n    PostingsEnum postings = null;\n    \n    String lastField = null;\n    for (String field : fields) {\n\n      // MultiFieldsEnum relies upon this order...\n      if (lastField != null && field.compareTo(lastField) <= 0) {\n        throw new RuntimeException(\"fields out of order: lastField=\" + lastField + \" field=\" + field);\n      }\n      lastField = field;\n      \n      // check that the field is in fieldinfos, and is indexed.\n      // TODO: add a separate test to check this for different reader impls\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      if (fieldInfo == null) {\n        throw new RuntimeException(\"fieldsEnum inconsistent with fieldInfos, no fieldInfos for: \" + field);\n      }\n      if (fieldInfo.getIndexOptions() == IndexOptions.NONE) {\n        throw new RuntimeException(\"fieldsEnum inconsistent with fieldInfos, isIndexed == false for: \" + field);\n      }\n      \n      // TODO: really the codec should not return a field\n      // from FieldsEnum if it has no Terms... but we do\n      // this today:\n      // assert fields.terms(field) != null;\n      computedFieldCount++;\n      \n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      \n      if (terms.getDocCount() > maxDoc) {\n        throw new RuntimeException(\"docCount > maxDoc for field: \" + field + \", docCount=\" + terms.getDocCount() + \", maxDoc=\" + maxDoc);\n      }\n      \n      final boolean hasFreqs = terms.hasFreqs();\n      final boolean hasPositions = terms.hasPositions();\n      final boolean hasPayloads = terms.hasPayloads();\n      final boolean hasOffsets = terms.hasOffsets();\n      \n      BytesRef maxTerm;\n      BytesRef minTerm;\n      if (isVectors) {\n        // Term vectors impls can be very slow for getMax\n        maxTerm = null;\n        minTerm = null;\n      } else {\n        BytesRef bb = terms.getMin();\n        if (bb != null) {\n          assert bb.isValid();\n          minTerm = BytesRef.deepCopyOf(bb);\n        } else {\n          minTerm = null;\n        }\n\n        bb = terms.getMax();\n        if (bb != null) {\n          assert bb.isValid();\n          maxTerm = BytesRef.deepCopyOf(bb);\n          if (minTerm == null) {\n            throw new RuntimeException(\"field \\\"\" + field + \"\\\" has null minTerm but non-null maxTerm\");\n          }\n        } else {\n          maxTerm = null;\n          if (minTerm != null) {\n            throw new RuntimeException(\"field \\\"\" + field + \"\\\" has non-null minTerm but null maxTerm\");\n          }\n        }\n      }\n\n      // term vectors cannot omit TF:\n      final boolean expectedHasFreqs = (isVectors || fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0);\n\n      if (hasFreqs != expectedHasFreqs) {\n        throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasFreqs=\" + expectedHasFreqs + \" but got \" + hasFreqs);\n      }\n\n      if (!isVectors) {\n        final boolean expectedHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        if (hasPositions != expectedHasPositions) {\n          throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasPositions=\" + expectedHasPositions + \" but got \" + hasPositions);\n        }\n\n        final boolean expectedHasPayloads = fieldInfo.hasPayloads();\n        if (hasPayloads != expectedHasPayloads) {\n          throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasPayloads=\" + expectedHasPayloads + \" but got \" + hasPayloads);\n        }\n\n        final boolean expectedHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        if (hasOffsets != expectedHasOffsets) {\n          throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasOffsets=\" + expectedHasOffsets + \" but got \" + hasOffsets);\n        }\n      }\n\n      final TermsEnum termsEnum = terms.iterator();\n\n      boolean hasOrd = true;\n      final long termCountStart = status.delTermCount + status.termCount;\n      \n      BytesRefBuilder lastTerm = null;\n      \n      long sumTotalTermFreq = 0;\n      long sumDocFreq = 0;\n      FixedBitSet visitedDocs = new FixedBitSet(maxDoc);\n      while(true) {\n        \n        final BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        // System.out.println(\"CI: field=\" + field + \" check term=\" + term + \" docFreq=\" + termsEnum.docFreq());\n        \n        assert term.isValid();\n        \n        // make sure terms arrive in order according to\n        // the comp\n        if (lastTerm == null) {\n          lastTerm = new BytesRefBuilder();\n          lastTerm.copyBytes(term);\n        } else {\n          if (lastTerm.get().compareTo(term) >= 0) {\n            throw new RuntimeException(\"terms out of order: lastTerm=\" + lastTerm.get() + \" term=\" + term);\n          }\n          lastTerm.copyBytes(term);\n        }\n\n        if (isVectors == false) {\n          if (minTerm == null) {\n            // We checked this above:\n            assert maxTerm == null;\n            throw new RuntimeException(\"field=\\\"\" + field + \"\\\": invalid term: term=\" + term + \", minTerm=\" + minTerm);\n          }\n        \n          if (term.compareTo(minTerm) < 0) {\n            throw new RuntimeException(\"field=\\\"\" + field + \"\\\": invalid term: term=\" + term + \", minTerm=\" + minTerm);\n          }\n        \n          if (term.compareTo(maxTerm) > 0) {\n            throw new RuntimeException(\"field=\\\"\" + field + \"\\\": invalid term: term=\" + term + \", maxTerm=\" + maxTerm);\n          }\n        }\n        \n        final int docFreq = termsEnum.docFreq();\n        if (docFreq <= 0) {\n          throw new RuntimeException(\"docfreq: \" + docFreq + \" is out of bounds\");\n        }\n        sumDocFreq += docFreq;\n\n        postings = termsEnum.postings(postings, PostingsEnum.ALL);\n\n        if (hasFreqs == false) {\n          if (termsEnum.totalTermFreq() != termsEnum.docFreq()) {\n            throw new RuntimeException(\"field \\\"\" + field + \"\\\" hasFreqs is false, but TermsEnum.totalTermFreq()=\" + termsEnum.totalTermFreq() + \" (should be \" + termsEnum.docFreq() + \")\");\n          }\n        }\n        \n        if (hasOrd) {\n          long ord = -1;\n          try {\n            ord = termsEnum.ord();\n          } catch (UnsupportedOperationException uoe) {\n            hasOrd = false;\n          }\n          \n          if (hasOrd) {\n            final long ordExpected = status.delTermCount + status.termCount - termCountStart;\n            if (ord != ordExpected) {\n              throw new RuntimeException(\"ord mismatch: TermsEnum has ord=\" + ord + \" vs actual=\" + ordExpected);\n            }\n          }\n        }\n        \n        int lastDoc = -1;\n        int docCount = 0;\n        boolean hasNonDeletedDocs = false;\n        long totalTermFreq = 0;\n        while(true) {\n          final int doc = postings.nextDoc();\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          visitedDocs.set(doc);\n          int freq = postings.freq();\n          if (freq <= 0) {\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": freq \" + freq + \" is out of bounds\");\n          }\n          if (hasFreqs == false) {\n            // When a field didn't index freq, it must\n            // consistently \"lie\" and pretend that freq was\n            // 1:\n            if (postings.freq() != 1) {\n              throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": freq \" + freq + \" != 1 when Terms.hasFreqs() is false\");\n            }\n          }\n          totalTermFreq += freq;\n\n          if (liveDocs == null || liveDocs.get(doc)) {\n            hasNonDeletedDocs = true;\n            status.totFreq++;\n            if (freq >= 0) {\n              status.totPos += freq;\n            }\n          }\n          docCount++;\n          \n          if (doc <= lastDoc) {\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" <= lastDoc \" + lastDoc);\n          }\n          if (doc >= maxDoc) {\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" >= maxDoc \" + maxDoc);\n          }\n          \n          lastDoc = doc;\n          \n          int lastPos = -1;\n          int lastOffset = 0;\n          if (hasPositions) {\n            for(int j=0;j<freq;j++) {\n              final int pos = postings.nextPosition();\n\n              if (pos < 0) {\n                throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" is out of bounds\");\n              }\n              if (pos > IndexWriter.MAX_POSITION) {\n                throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" > IndexWriter.MAX_POSITION=\" + IndexWriter.MAX_POSITION);\n              }\n              if (pos < lastPos) {\n                throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" < lastPos \" + lastPos);\n              }\n              lastPos = pos;\n              BytesRef payload = postings.getPayload();\n              if (payload != null) {\n                assert payload.isValid();\n              }\n              if (payload != null && payload.length < 1) {\n                throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" payload length is out of bounds \" + payload.length);\n              }\n              if (hasOffsets) {\n                int startOffset = postings.startOffset();\n                int endOffset = postings.endOffset();\n                if (startOffset < 0) {\n                  throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \": startOffset \" + startOffset + \" is out of bounds\");\n                }\n                if (startOffset < lastOffset) {\n                  throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \": startOffset \" + startOffset + \" < lastStartOffset \" + lastOffset + \"; consider using the FixBrokenOffsets tool in Lucene's backward-codecs module to correct your index\");\n                }\n                if (endOffset < 0) {\n                  throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \": endOffset \" + endOffset + \" is out of bounds\");\n                }\n                if (endOffset < startOffset) {\n                  throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \": endOffset \" + endOffset + \" < startOffset \" + startOffset);\n                }\n                lastOffset = startOffset;\n              }\n            }\n          }\n        }\n        \n        if (hasNonDeletedDocs) {\n          status.termCount++;\n        } else {\n          status.delTermCount++;\n        }\n        \n        final long totalTermFreq2 = termsEnum.totalTermFreq();\n        \n        if (docCount != docFreq) {\n          throw new RuntimeException(\"term \" + term + \" docFreq=\" + docFreq + \" != tot docs w/o deletions \" + docCount);\n        }\n        if (docFreq > terms.getDocCount()) {\n          throw new RuntimeException(\"term \" + term + \" docFreq=\" + docFreq + \" > docCount=\" + terms.getDocCount());\n        }\n        if (totalTermFreq2 <= 0) {\n          throw new RuntimeException(\"totalTermFreq: \" + totalTermFreq2 + \" is out of bounds\");\n        }\n        sumTotalTermFreq += totalTermFreq;\n        if (totalTermFreq != totalTermFreq2) {\n          throw new RuntimeException(\"term \" + term + \" totalTermFreq=\" + totalTermFreq2 + \" != recomputed totalTermFreq=\" + totalTermFreq);\n        }\n        if (totalTermFreq2 < docFreq) {\n          throw new RuntimeException(\"totalTermFreq: \" + totalTermFreq2 + \" is out of bounds, docFreq=\" + docFreq);\n        }\n        if (hasFreqs == false && totalTermFreq != docFreq) {\n          throw new RuntimeException(\"term \" + term + \" totalTermFreq=\" + totalTermFreq + \" !=  docFreq=\" + docFreq);\n        }\n        \n        // Test skipping\n        if (hasPositions) {\n          for(int idx=0;idx<7;idx++) {\n            final int skipDocID = (int) (((idx+1)*(long) maxDoc)/8);\n            postings = termsEnum.postings(postings, PostingsEnum.ALL);\n            final int docID = postings.advance(skipDocID);\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            } else {\n              if (docID < skipDocID) {\n                throw new RuntimeException(\"term \" + term + \": advance(docID=\" + skipDocID + \") returned docID=\" + docID);\n              }\n              final int freq = postings.freq();\n              if (freq <= 0) {\n                throw new RuntimeException(\"termFreq \" + freq + \" is out of bounds\");\n              }\n              int lastPosition = -1;\n              int lastOffset = 0;\n              for(int posUpto=0;posUpto<freq;posUpto++) {\n                final int pos = postings.nextPosition();\n\n                if (pos < 0) {\n                  throw new RuntimeException(\"position \" + pos + \" is out of bounds\");\n                }\n                if (pos < lastPosition) {\n                  throw new RuntimeException(\"position \" + pos + \" is < lastPosition \" + lastPosition);\n                }\n                lastPosition = pos;\n                if (hasOffsets) {\n                  int startOffset = postings.startOffset();\n                  int endOffset = postings.endOffset();\n                  // NOTE: we cannot enforce any bounds whatsoever on vectors... they were a free-for-all before?\n                  // but for offsets in the postings lists these checks are fine: they were always enforced by IndexWriter\n                  if (!isVectors) {\n                    if (startOffset < 0) {\n                      throw new RuntimeException(\"term \" + term + \": doc \" + docID + \": pos \" + pos + \": startOffset \" + startOffset + \" is out of bounds\");\n                    }\n                    if (startOffset < lastOffset) {\n                      throw new RuntimeException(\"term \" + term + \": doc \" + docID + \": pos \" + pos + \": startOffset \" + startOffset + \" < lastStartOffset \" + lastOffset);\n                    }\n                    if (endOffset < 0) {\n                      throw new RuntimeException(\"term \" + term + \": doc \" + docID + \": pos \" + pos + \": endOffset \" + endOffset + \" is out of bounds\");\n                    }\n                    if (endOffset < startOffset) {\n                      throw new RuntimeException(\"term \" + term + \": doc \" + docID + \": pos \" + pos + \": endOffset \" + endOffset + \" < startOffset \" + startOffset);\n                    }\n                  }\n                  lastOffset = startOffset;\n                }\n              } \n              \n              final int nextDocID = postings.nextDoc();\n              if (nextDocID == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n              if (nextDocID <= docID) {\n                throw new RuntimeException(\"term \" + term + \": advance(docID=\" + skipDocID + \"), then .next() returned docID=\" + nextDocID + \" vs prev docID=\" + docID);\n              }\n            }\n\n            if (isVectors) {\n              // Only 1 doc in the postings for term vectors, so we only test 1 advance:\n              break;\n            }\n          }\n        } else {\n          for(int idx=0;idx<7;idx++) {\n            final int skipDocID = (int) (((idx+1)*(long) maxDoc)/8);\n            postings = termsEnum.postings(postings, PostingsEnum.NONE);\n            final int docID = postings.advance(skipDocID);\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            } else {\n              if (docID < skipDocID) {\n                throw new RuntimeException(\"term \" + term + \": advance(docID=\" + skipDocID + \") returned docID=\" + docID);\n              }\n              final int nextDocID = postings.nextDoc();\n              if (nextDocID == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n              if (nextDocID <= docID) {\n                throw new RuntimeException(\"term \" + term + \": advance(docID=\" + skipDocID + \"), then .next() returned docID=\" + nextDocID + \" vs prev docID=\" + docID);\n              }\n            }\n            if (isVectors) {\n              // Only 1 doc in the postings for term vectors, so we only test 1 advance:\n              break;\n            }\n          }\n        }\n\n        // Checking score blocks is heavy, we only do it on long postings lists, on every 1024th term\n        // or if slow checks are enabled.\n        if (doSlowChecks || docFreq > 1024 || (status.termCount + status.delTermCount) % 1024 == 0) {\n          // First check max scores and block uptos\n          // But only if slok checks are enabled since we visit all docs\n          if (doSlowChecks) {\n            int max = -1;\n            int maxFreq = 0;\n            ImpactsEnum impactsEnum = termsEnum.impacts(PostingsEnum.FREQS);\n            postings = termsEnum.postings(postings, PostingsEnum.FREQS);\n            for (int doc = impactsEnum.nextDoc(); ; doc = impactsEnum.nextDoc()) {\n              if (postings.nextDoc() != doc) {\n                throw new RuntimeException(\"Wrong next doc: \" + doc + \", expected \" + postings.docID());\n              }\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n              if (postings.freq() != impactsEnum.freq()) {\n                throw new RuntimeException(\"Wrong freq, expected \" + postings.freq() + \", but got \" + impactsEnum.freq());\n              }\n              if (doc > max) {\n                impactsEnum.advanceShallow(doc);\n                Impacts impacts = impactsEnum.getImpacts();\n                checkImpacts(impacts, doc);\n                max = impacts.getDocIdUpTo(0);\n                List<Impact> impacts0 = impacts.getImpacts(0);\n                maxFreq = impacts0.get(impacts0.size() - 1).freq;\n              }\n              if (impactsEnum.freq() > maxFreq) {\n                throw new RuntimeException(\"freq \" + impactsEnum.freq() + \" is greater than the max freq according to impacts \" + maxFreq);\n              }\n            }\n          }\n\n          // Now check advancing\n          ImpactsEnum impactsEnum = termsEnum.impacts(PostingsEnum.FREQS);\n          postings = termsEnum.postings(postings, PostingsEnum.FREQS);\n\n          int max = -1;\n          int maxFreq = 0;\n          while (true) {\n            int doc = impactsEnum.docID();\n            boolean advance;\n            int target;\n            if (((field.hashCode() + doc) & 1) == 1) {\n              advance = false;\n              target = doc + 1;\n            } else {\n              advance = true;\n              int delta = Math.min(1 + ((31 * field.hashCode() + doc) & 0x1ff), DocIdSetIterator.NO_MORE_DOCS - doc);\n              target = impactsEnum.docID() + delta;\n            }\n\n            if (target > max && target % 2 == 1) {\n              int delta = Math.min((31 * field.hashCode() + target) & 0x1ff, DocIdSetIterator.NO_MORE_DOCS - target);\n              max = target + delta;\n              impactsEnum.advanceShallow(target);\n              Impacts impacts = impactsEnum.getImpacts();\n              checkImpacts(impacts, doc);\n              maxFreq = Integer.MAX_VALUE;\n              for (int level = 0; level < impacts.numLevels(); ++level) {\n                if (impacts.getDocIdUpTo(level) >= max) {\n                  List<Impact> perLevelImpacts = impacts.getImpacts(level);\n                  maxFreq = perLevelImpacts.get(perLevelImpacts.size() - 1).freq;\n                  break;\n                }\n              }\n            }\n\n            if (advance) {\n              doc = impactsEnum.advance(target);\n            } else {\n              doc = impactsEnum.nextDoc();\n            }\n\n            if (postings.advance(target) != doc) {\n              throw new RuntimeException(\"Impacts do not advance to the same document as postings for target \" + target + \", postings: \" + postings.docID() + \", impacts: \" + doc);\n            }\n            if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            if (postings.freq() != impactsEnum.freq()) {\n              throw new RuntimeException(\"Wrong freq, expected \" + postings.freq() + \", but got \" + impactsEnum.freq());\n            }\n  \n            if (doc >= max) {\n              int delta = Math.min((31 * field.hashCode() + target & 0x1ff), DocIdSetIterator.NO_MORE_DOCS - doc);\n              max = doc + delta;\n              impactsEnum.advanceShallow(doc);\n              Impacts impacts = impactsEnum.getImpacts();\n              checkImpacts(impacts, doc);\n              maxFreq = Integer.MAX_VALUE;\n              for (int level = 0; level < impacts.numLevels(); ++level) {\n                if (impacts.getDocIdUpTo(level) >= max) {\n                  List<Impact> perLevelImpacts = impacts.getImpacts(level);\n                  maxFreq = perLevelImpacts.get(perLevelImpacts.size() - 1).freq;\n                  break;\n                }\n              }\n            }\n\n            if (impactsEnum.freq() > maxFreq) {\n              throw new RuntimeException(\"Term frequency \" + impactsEnum.freq() + \" is greater than the max freq according to impacts \" + maxFreq);\n            }\n          }\n        }\n      }\n\n      if (minTerm != null && status.termCount + status.delTermCount == 0) {\n        throw new RuntimeException(\"field=\\\"\" + field + \"\\\": minTerm is non-null yet we saw no terms: \" + minTerm);\n      }\n\n      final Terms fieldTerms = fields.terms(field);\n      if (fieldTerms == null) {\n        // Unusual: the FieldsEnum returned a field but\n        // the Terms for that field is null; this should\n        // only happen if it's a ghost field (field with\n        // no terms, eg there used to be terms but all\n        // docs got deleted and then merged away):\n        \n      } else {\n\n        long fieldTermCount = (status.delTermCount+status.termCount)-termCountStart;\n\n        // LUCENE-5879: this is just too slow for now:\n        if (false && hasFreqs == false) {\n          // For DOCS_ONLY fields we recursively test term ranges:\n          checkTermRanges(field, maxDoc, fieldTerms, fieldTermCount);\n        }\n\n        final Object stats = fieldTerms.getStats();\n        assert stats != null;\n        if (status.blockTreeStats == null) {\n          status.blockTreeStats = new HashMap<>();\n        }\n        status.blockTreeStats.put(field, stats);\n\n        final long actualSumDocFreq = fields.terms(field).getSumDocFreq();\n        if (sumDocFreq != actualSumDocFreq) {\n          throw new RuntimeException(\"sumDocFreq for field \" + field + \"=\" + actualSumDocFreq + \" != recomputed sumDocFreq=\" + sumDocFreq);\n        }\n\n        final long actualSumTotalTermFreq = fields.terms(field).getSumTotalTermFreq();\n        if (sumTotalTermFreq != actualSumTotalTermFreq) {\n          throw new RuntimeException(\"sumTotalTermFreq for field \" + field + \"=\" + actualSumTotalTermFreq + \" != recomputed sumTotalTermFreq=\" + sumTotalTermFreq);\n        } \n        \n        if (hasFreqs == false && sumTotalTermFreq != sumDocFreq) {\n          throw new RuntimeException(\"sumTotalTermFreq for field \" + field + \" should be \" + sumDocFreq + \", got sumTotalTermFreq=\" + sumTotalTermFreq);\n        }\n        \n        final int v = fieldTerms.getDocCount();\n        if (visitedDocs.cardinality() != v) {\n          throw new RuntimeException(\"docCount for field \" + field + \"=\" + v + \" != recomputed docCount=\" + visitedDocs.cardinality());\n        }\n        \n        // Test seek to last term:\n        if (lastTerm != null) {\n          if (termsEnum.seekCeil(lastTerm.get()) != TermsEnum.SeekStatus.FOUND) { \n            throw new RuntimeException(\"seek to last term \" + lastTerm.get() + \" failed\");\n          }\n          if (termsEnum.term().equals(lastTerm.get()) == false) {\n            throw new RuntimeException(\"seek to last term \" + lastTerm.get() + \" returned FOUND but seeked to the wrong term \" + termsEnum.term());\n          }\n          \n          int expectedDocFreq = termsEnum.docFreq();\n          PostingsEnum d = termsEnum.postings(null, PostingsEnum.NONE);\n          int docFreq = 0;\n          while (d.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            docFreq++;\n          }\n          if (docFreq != expectedDocFreq) {\n            throw new RuntimeException(\"docFreq for last term \" + lastTerm.get() + \"=\" + expectedDocFreq + \" != recomputed docFreq=\" + docFreq);\n          }\n        }\n        \n        // check unique term count\n        long termCount = -1;\n        \n        if (fieldTermCount > 0) {\n          termCount = fields.terms(field).size();\n          \n          if (termCount != -1 && termCount != fieldTermCount) {\n            throw new RuntimeException(\"termCount mismatch \" + termCount + \" vs \" + fieldTermCount);\n          }\n        }\n\n        // Test seeking by ord\n        if (hasOrd && status.termCount-termCountStart > 0) {\n          int seekCount = (int) Math.min(10000L, termCount);\n          if (seekCount > 0) {\n            BytesRef[] seekTerms = new BytesRef[seekCount];\n            \n            // Seek by ord\n            for(int i=seekCount-1;i>=0;i--) {\n              long ord = i*(termCount/seekCount);\n              termsEnum.seekExact(ord);\n              long actualOrd = termsEnum.ord();\n              if (actualOrd != ord) {\n                throw new RuntimeException(\"seek to ord \" + ord + \" returned ord \" + actualOrd);\n              }\n              seekTerms[i] = BytesRef.deepCopyOf(termsEnum.term());\n            }\n            \n            // Seek by term\n            for(int i=seekCount-1;i>=0;i--) {\n              if (termsEnum.seekCeil(seekTerms[i]) != TermsEnum.SeekStatus.FOUND) {\n                throw new RuntimeException(\"seek to existing term \" + seekTerms[i] + \" failed\");\n              }\n              if (termsEnum.term().equals(seekTerms[i]) == false) {\n                throw new RuntimeException(\"seek to existing term \" + seekTerms[i] + \" returned FOUND but seeked to the wrong term \" + termsEnum.term());\n              }\n              \n              postings = termsEnum.postings(postings, PostingsEnum.NONE);\n              if (postings == null) {\n                throw new RuntimeException(\"null DocsEnum from to existing term \" + seekTerms[i]);\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    int fieldCount = fields.size();\n    \n    if (fieldCount != -1) {\n      if (fieldCount < 0) {\n        throw new RuntimeException(\"invalid fieldCount: \" + fieldCount);\n      }\n      if (fieldCount != computedFieldCount) {\n        throw new RuntimeException(\"fieldCount mismatch \" + fieldCount + \" vs recomputed field count \" + computedFieldCount);\n      }\n    }\n\n    if (doPrint) {\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d terms; %d terms/docs pairs; %d tokens] [took %.3f sec]\",\n                                    status.termCount, status.totFreq, status.totPos, nsToSec(System.nanoTime()-startNS)));\n    }\n    \n    if (verbose && status.blockTreeStats != null && infoStream != null && status.termCount > 0) {\n      for(Map.Entry<String, Object> ent : status.blockTreeStats.entrySet()) {\n        infoStream.println(\"      field \\\"\" + ent.getKey() + \"\\\":\");\n        infoStream.println(\"      \" + ent.getValue().toString().replace(\"\\n\", \"\\n      \"));\n      }\n    }\n    \n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd96a930cc08d72beee719cc11ce465b9d9861c3","date":1535640296,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkFields(Fields,Bits,int,FieldInfos,NormsProducer,boolean,boolean,PrintStream,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkFields(Fields,Bits,int,FieldInfos,NormsProducer,boolean,boolean,PrintStream,boolean,boolean).mjava","sourceNew":"  /**\n   * checks Fields api is consistent with itself.\n   * searcher is optional, to verify with queries. Can be null.\n   */\n  private static Status.TermIndexStatus checkFields(Fields fields, Bits liveDocs, int maxDoc, FieldInfos fieldInfos,\n      NormsProducer normsProducer, boolean doPrint, boolean isVectors, PrintStream infoStream, boolean verbose, boolean doSlowChecks) throws IOException {\n    // TODO: we should probably return our own stats thing...?!\n    long startNS;\n    if (doPrint) {\n      startNS = System.nanoTime();\n    } else {\n      startNS = 0;\n    }\n    \n    final Status.TermIndexStatus status = new Status.TermIndexStatus();\n    int computedFieldCount = 0;\n\n    PostingsEnum postings = null;\n    \n    String lastField = null;\n    for (String field : fields) {\n\n      // MultiFieldsEnum relies upon this order...\n      if (lastField != null && field.compareTo(lastField) <= 0) {\n        throw new RuntimeException(\"fields out of order: lastField=\" + lastField + \" field=\" + field);\n      }\n      lastField = field;\n      \n      // check that the field is in fieldinfos, and is indexed.\n      // TODO: add a separate test to check this for different reader impls\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      if (fieldInfo == null) {\n        throw new RuntimeException(\"fieldsEnum inconsistent with fieldInfos, no fieldInfos for: \" + field);\n      }\n      if (fieldInfo.getIndexOptions() == IndexOptions.NONE) {\n        throw new RuntimeException(\"fieldsEnum inconsistent with fieldInfos, isIndexed == false for: \" + field);\n      }\n      \n      // TODO: really the codec should not return a field\n      // from FieldsEnum if it has no Terms... but we do\n      // this today:\n      // assert fields.terms(field) != null;\n      computedFieldCount++;\n      \n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      \n      if (terms.getDocCount() > maxDoc) {\n        throw new RuntimeException(\"docCount > maxDoc for field: \" + field + \", docCount=\" + terms.getDocCount() + \", maxDoc=\" + maxDoc);\n      }\n      \n      final boolean hasFreqs = terms.hasFreqs();\n      final boolean hasPositions = terms.hasPositions();\n      final boolean hasPayloads = terms.hasPayloads();\n      final boolean hasOffsets = terms.hasOffsets();\n      \n      BytesRef maxTerm;\n      BytesRef minTerm;\n      if (isVectors) {\n        // Term vectors impls can be very slow for getMax\n        maxTerm = null;\n        minTerm = null;\n      } else {\n        BytesRef bb = terms.getMin();\n        if (bb != null) {\n          assert bb.isValid();\n          minTerm = BytesRef.deepCopyOf(bb);\n        } else {\n          minTerm = null;\n        }\n\n        bb = terms.getMax();\n        if (bb != null) {\n          assert bb.isValid();\n          maxTerm = BytesRef.deepCopyOf(bb);\n          if (minTerm == null) {\n            throw new RuntimeException(\"field \\\"\" + field + \"\\\" has null minTerm but non-null maxTerm\");\n          }\n        } else {\n          maxTerm = null;\n          if (minTerm != null) {\n            throw new RuntimeException(\"field \\\"\" + field + \"\\\" has non-null minTerm but null maxTerm\");\n          }\n        }\n      }\n\n      // term vectors cannot omit TF:\n      final boolean expectedHasFreqs = (isVectors || fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0);\n\n      if (hasFreqs != expectedHasFreqs) {\n        throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasFreqs=\" + expectedHasFreqs + \" but got \" + hasFreqs);\n      }\n\n      if (!isVectors) {\n        final boolean expectedHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        if (hasPositions != expectedHasPositions) {\n          throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasPositions=\" + expectedHasPositions + \" but got \" + hasPositions);\n        }\n\n        final boolean expectedHasPayloads = fieldInfo.hasPayloads();\n        if (hasPayloads != expectedHasPayloads) {\n          throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasPayloads=\" + expectedHasPayloads + \" but got \" + hasPayloads);\n        }\n\n        final boolean expectedHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        if (hasOffsets != expectedHasOffsets) {\n          throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasOffsets=\" + expectedHasOffsets + \" but got \" + hasOffsets);\n        }\n      }\n\n      final TermsEnum termsEnum = terms.iterator();\n\n      boolean hasOrd = true;\n      final long termCountStart = status.delTermCount + status.termCount;\n      \n      BytesRefBuilder lastTerm = null;\n      \n      long sumTotalTermFreq = 0;\n      long sumDocFreq = 0;\n      FixedBitSet visitedDocs = new FixedBitSet(maxDoc);\n      while(true) {\n        \n        final BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        // System.out.println(\"CI: field=\" + field + \" check term=\" + term + \" docFreq=\" + termsEnum.docFreq());\n        \n        assert term.isValid();\n        \n        // make sure terms arrive in order according to\n        // the comp\n        if (lastTerm == null) {\n          lastTerm = new BytesRefBuilder();\n          lastTerm.copyBytes(term);\n        } else {\n          if (lastTerm.get().compareTo(term) >= 0) {\n            throw new RuntimeException(\"terms out of order: lastTerm=\" + lastTerm.get() + \" term=\" + term);\n          }\n          lastTerm.copyBytes(term);\n        }\n\n        if (isVectors == false) {\n          if (minTerm == null) {\n            // We checked this above:\n            assert maxTerm == null;\n            throw new RuntimeException(\"field=\\\"\" + field + \"\\\": invalid term: term=\" + term + \", minTerm=\" + minTerm);\n          }\n        \n          if (term.compareTo(minTerm) < 0) {\n            throw new RuntimeException(\"field=\\\"\" + field + \"\\\": invalid term: term=\" + term + \", minTerm=\" + minTerm);\n          }\n        \n          if (term.compareTo(maxTerm) > 0) {\n            throw new RuntimeException(\"field=\\\"\" + field + \"\\\": invalid term: term=\" + term + \", maxTerm=\" + maxTerm);\n          }\n        }\n        \n        final int docFreq = termsEnum.docFreq();\n        if (docFreq <= 0) {\n          throw new RuntimeException(\"docfreq: \" + docFreq + \" is out of bounds\");\n        }\n        sumDocFreq += docFreq;\n\n        postings = termsEnum.postings(postings, PostingsEnum.ALL);\n\n        if (hasFreqs == false) {\n          if (termsEnum.totalTermFreq() != termsEnum.docFreq()) {\n            throw new RuntimeException(\"field \\\"\" + field + \"\\\" hasFreqs is false, but TermsEnum.totalTermFreq()=\" + termsEnum.totalTermFreq() + \" (should be \" + termsEnum.docFreq() + \")\");\n          }\n        }\n        \n        if (hasOrd) {\n          long ord = -1;\n          try {\n            ord = termsEnum.ord();\n          } catch (UnsupportedOperationException uoe) {\n            hasOrd = false;\n          }\n          \n          if (hasOrd) {\n            final long ordExpected = status.delTermCount + status.termCount - termCountStart;\n            if (ord != ordExpected) {\n              throw new RuntimeException(\"ord mismatch: TermsEnum has ord=\" + ord + \" vs actual=\" + ordExpected);\n            }\n          }\n        }\n        \n        int lastDoc = -1;\n        int docCount = 0;\n        boolean hasNonDeletedDocs = false;\n        long totalTermFreq = 0;\n        while(true) {\n          final int doc = postings.nextDoc();\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          visitedDocs.set(doc);\n          int freq = postings.freq();\n          if (freq <= 0) {\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": freq \" + freq + \" is out of bounds\");\n          }\n          if (hasFreqs == false) {\n            // When a field didn't index freq, it must\n            // consistently \"lie\" and pretend that freq was\n            // 1:\n            if (postings.freq() != 1) {\n              throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": freq \" + freq + \" != 1 when Terms.hasFreqs() is false\");\n            }\n          }\n          totalTermFreq += freq;\n\n          if (liveDocs == null || liveDocs.get(doc)) {\n            hasNonDeletedDocs = true;\n            status.totFreq++;\n            if (freq >= 0) {\n              status.totPos += freq;\n            }\n          }\n          docCount++;\n          \n          if (doc <= lastDoc) {\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" <= lastDoc \" + lastDoc);\n          }\n          if (doc >= maxDoc) {\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" >= maxDoc \" + maxDoc);\n          }\n          \n          lastDoc = doc;\n          \n          int lastPos = -1;\n          int lastOffset = 0;\n          if (hasPositions) {\n            for(int j=0;j<freq;j++) {\n              final int pos = postings.nextPosition();\n\n              if (pos < 0) {\n                throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" is out of bounds\");\n              }\n              if (pos > IndexWriter.MAX_POSITION) {\n                throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" > IndexWriter.MAX_POSITION=\" + IndexWriter.MAX_POSITION);\n              }\n              if (pos < lastPos) {\n                throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" < lastPos \" + lastPos);\n              }\n              lastPos = pos;\n              BytesRef payload = postings.getPayload();\n              if (payload != null) {\n                assert payload.isValid();\n              }\n              if (payload != null && payload.length < 1) {\n                throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" payload length is out of bounds \" + payload.length);\n              }\n              if (hasOffsets) {\n                int startOffset = postings.startOffset();\n                int endOffset = postings.endOffset();\n                if (startOffset < 0) {\n                  throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \": startOffset \" + startOffset + \" is out of bounds\");\n                }\n                if (startOffset < lastOffset) {\n                  throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \": startOffset \" + startOffset + \" < lastStartOffset \" + lastOffset + \"; consider using the FixBrokenOffsets tool in Lucene's backward-codecs module to correct your index\");\n                }\n                if (endOffset < 0) {\n                  throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \": endOffset \" + endOffset + \" is out of bounds\");\n                }\n                if (endOffset < startOffset) {\n                  throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \": endOffset \" + endOffset + \" < startOffset \" + startOffset);\n                }\n                lastOffset = startOffset;\n              }\n            }\n          }\n        }\n        \n        if (hasNonDeletedDocs) {\n          status.termCount++;\n        } else {\n          status.delTermCount++;\n        }\n        \n        final long totalTermFreq2 = termsEnum.totalTermFreq();\n        \n        if (docCount != docFreq) {\n          throw new RuntimeException(\"term \" + term + \" docFreq=\" + docFreq + \" != tot docs w/o deletions \" + docCount);\n        }\n        if (docFreq > terms.getDocCount()) {\n          throw new RuntimeException(\"term \" + term + \" docFreq=\" + docFreq + \" > docCount=\" + terms.getDocCount());\n        }\n        if (totalTermFreq2 <= 0) {\n          throw new RuntimeException(\"totalTermFreq: \" + totalTermFreq2 + \" is out of bounds\");\n        }\n        sumTotalTermFreq += totalTermFreq;\n        if (totalTermFreq != totalTermFreq2) {\n          throw new RuntimeException(\"term \" + term + \" totalTermFreq=\" + totalTermFreq2 + \" != recomputed totalTermFreq=\" + totalTermFreq);\n        }\n        if (totalTermFreq2 < docFreq) {\n          throw new RuntimeException(\"totalTermFreq: \" + totalTermFreq2 + \" is out of bounds, docFreq=\" + docFreq);\n        }\n        if (hasFreqs == false && totalTermFreq != docFreq) {\n          throw new RuntimeException(\"term \" + term + \" totalTermFreq=\" + totalTermFreq + \" !=  docFreq=\" + docFreq);\n        }\n        \n        // Test skipping\n        if (hasPositions) {\n          for(int idx=0;idx<7;idx++) {\n            final int skipDocID = (int) (((idx+1)*(long) maxDoc)/8);\n            postings = termsEnum.postings(postings, PostingsEnum.ALL);\n            final int docID = postings.advance(skipDocID);\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            } else {\n              if (docID < skipDocID) {\n                throw new RuntimeException(\"term \" + term + \": advance(docID=\" + skipDocID + \") returned docID=\" + docID);\n              }\n              final int freq = postings.freq();\n              if (freq <= 0) {\n                throw new RuntimeException(\"termFreq \" + freq + \" is out of bounds\");\n              }\n              int lastPosition = -1;\n              int lastOffset = 0;\n              for(int posUpto=0;posUpto<freq;posUpto++) {\n                final int pos = postings.nextPosition();\n\n                if (pos < 0) {\n                  throw new RuntimeException(\"position \" + pos + \" is out of bounds\");\n                }\n                if (pos < lastPosition) {\n                  throw new RuntimeException(\"position \" + pos + \" is < lastPosition \" + lastPosition);\n                }\n                lastPosition = pos;\n                if (hasOffsets) {\n                  int startOffset = postings.startOffset();\n                  int endOffset = postings.endOffset();\n                  // NOTE: we cannot enforce any bounds whatsoever on vectors... they were a free-for-all before?\n                  // but for offsets in the postings lists these checks are fine: they were always enforced by IndexWriter\n                  if (!isVectors) {\n                    if (startOffset < 0) {\n                      throw new RuntimeException(\"term \" + term + \": doc \" + docID + \": pos \" + pos + \": startOffset \" + startOffset + \" is out of bounds\");\n                    }\n                    if (startOffset < lastOffset) {\n                      throw new RuntimeException(\"term \" + term + \": doc \" + docID + \": pos \" + pos + \": startOffset \" + startOffset + \" < lastStartOffset \" + lastOffset);\n                    }\n                    if (endOffset < 0) {\n                      throw new RuntimeException(\"term \" + term + \": doc \" + docID + \": pos \" + pos + \": endOffset \" + endOffset + \" is out of bounds\");\n                    }\n                    if (endOffset < startOffset) {\n                      throw new RuntimeException(\"term \" + term + \": doc \" + docID + \": pos \" + pos + \": endOffset \" + endOffset + \" < startOffset \" + startOffset);\n                    }\n                  }\n                  lastOffset = startOffset;\n                }\n              } \n              \n              final int nextDocID = postings.nextDoc();\n              if (nextDocID == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n              if (nextDocID <= docID) {\n                throw new RuntimeException(\"term \" + term + \": advance(docID=\" + skipDocID + \"), then .next() returned docID=\" + nextDocID + \" vs prev docID=\" + docID);\n              }\n            }\n\n            if (isVectors) {\n              // Only 1 doc in the postings for term vectors, so we only test 1 advance:\n              break;\n            }\n          }\n        } else {\n          for(int idx=0;idx<7;idx++) {\n            final int skipDocID = (int) (((idx+1)*(long) maxDoc)/8);\n            postings = termsEnum.postings(postings, PostingsEnum.NONE);\n            final int docID = postings.advance(skipDocID);\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            } else {\n              if (docID < skipDocID) {\n                throw new RuntimeException(\"term \" + term + \": advance(docID=\" + skipDocID + \") returned docID=\" + docID);\n              }\n              final int nextDocID = postings.nextDoc();\n              if (nextDocID == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n              if (nextDocID <= docID) {\n                throw new RuntimeException(\"term \" + term + \": advance(docID=\" + skipDocID + \"), then .next() returned docID=\" + nextDocID + \" vs prev docID=\" + docID);\n              }\n            }\n            if (isVectors) {\n              // Only 1 doc in the postings for term vectors, so we only test 1 advance:\n              break;\n            }\n          }\n        }\n\n        // Checking score blocks is heavy, we only do it on long postings lists, on every 1024th term\n        // or if slow checks are enabled.\n        if (doSlowChecks || docFreq > 1024 || (status.termCount + status.delTermCount) % 1024 == 0) {\n          // First check max scores and block uptos\n          // But only if slok checks are enabled since we visit all docs\n          if (doSlowChecks) {\n            int max = -1;\n            int maxFreq = 0;\n            ImpactsEnum impactsEnum = termsEnum.impacts(PostingsEnum.FREQS);\n            postings = termsEnum.postings(postings, PostingsEnum.FREQS);\n            for (int doc = impactsEnum.nextDoc(); ; doc = impactsEnum.nextDoc()) {\n              if (postings.nextDoc() != doc) {\n                throw new RuntimeException(\"Wrong next doc: \" + doc + \", expected \" + postings.docID());\n              }\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n              if (postings.freq() != impactsEnum.freq()) {\n                throw new RuntimeException(\"Wrong freq, expected \" + postings.freq() + \", but got \" + impactsEnum.freq());\n              }\n              if (doc > max) {\n                impactsEnum.advanceShallow(doc);\n                Impacts impacts = impactsEnum.getImpacts();\n                checkImpacts(impacts, doc);\n                max = impacts.getDocIdUpTo(0);\n                List<Impact> impacts0 = impacts.getImpacts(0);\n                maxFreq = impacts0.get(impacts0.size() - 1).freq;\n              }\n              if (impactsEnum.freq() > maxFreq) {\n                throw new RuntimeException(\"freq \" + impactsEnum.freq() + \" is greater than the max freq according to impacts \" + maxFreq);\n              }\n            }\n          }\n\n          // Now check advancing\n          ImpactsEnum impactsEnum = termsEnum.impacts(PostingsEnum.FREQS);\n          postings = termsEnum.postings(postings, PostingsEnum.FREQS);\n\n          int max = -1;\n          int maxFreq = 0;\n          while (true) {\n            int doc = impactsEnum.docID();\n            boolean advance;\n            int target;\n            if (((field.hashCode() + doc) & 1) == 1) {\n              advance = false;\n              target = doc + 1;\n            } else {\n              advance = true;\n              int delta = Math.min(1 + ((31 * field.hashCode() + doc) & 0x1ff), DocIdSetIterator.NO_MORE_DOCS - doc);\n              target = impactsEnum.docID() + delta;\n            }\n\n            if (target > max && target % 2 == 1) {\n              int delta = Math.min((31 * field.hashCode() + target) & 0x1ff, DocIdSetIterator.NO_MORE_DOCS - target);\n              max = target + delta;\n              impactsEnum.advanceShallow(target);\n              Impacts impacts = impactsEnum.getImpacts();\n              checkImpacts(impacts, doc);\n              maxFreq = Integer.MAX_VALUE;\n              for (int level = 0; level < impacts.numLevels(); ++level) {\n                if (impacts.getDocIdUpTo(level) >= max) {\n                  List<Impact> perLevelImpacts = impacts.getImpacts(level);\n                  maxFreq = perLevelImpacts.get(perLevelImpacts.size() - 1).freq;\n                  break;\n                }\n              }\n            }\n\n            if (advance) {\n              doc = impactsEnum.advance(target);\n            } else {\n              doc = impactsEnum.nextDoc();\n            }\n\n            if (postings.advance(target) != doc) {\n              throw new RuntimeException(\"Impacts do not advance to the same document as postings for target \" + target + \", postings: \" + postings.docID() + \", impacts: \" + doc);\n            }\n            if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            if (postings.freq() != impactsEnum.freq()) {\n              throw new RuntimeException(\"Wrong freq, expected \" + postings.freq() + \", but got \" + impactsEnum.freq());\n            }\n  \n            if (doc >= max) {\n              int delta = Math.min((31 * field.hashCode() + target & 0x1ff), DocIdSetIterator.NO_MORE_DOCS - doc);\n              max = doc + delta;\n              impactsEnum.advanceShallow(doc);\n              Impacts impacts = impactsEnum.getImpacts();\n              checkImpacts(impacts, doc);\n              maxFreq = Integer.MAX_VALUE;\n              for (int level = 0; level < impacts.numLevels(); ++level) {\n                if (impacts.getDocIdUpTo(level) >= max) {\n                  List<Impact> perLevelImpacts = impacts.getImpacts(level);\n                  maxFreq = perLevelImpacts.get(perLevelImpacts.size() - 1).freq;\n                  break;\n                }\n              }\n            }\n\n            if (impactsEnum.freq() > maxFreq) {\n              throw new RuntimeException(\"Term frequency \" + impactsEnum.freq() + \" is greater than the max freq according to impacts \" + maxFreq);\n            }\n          }\n        }\n      }\n\n      if (minTerm != null && status.termCount + status.delTermCount == 0) {\n        throw new RuntimeException(\"field=\\\"\" + field + \"\\\": minTerm is non-null yet we saw no terms: \" + minTerm);\n      }\n\n      final Terms fieldTerms = fields.terms(field);\n      if (fieldTerms == null) {\n        // Unusual: the FieldsEnum returned a field but\n        // the Terms for that field is null; this should\n        // only happen if it's a ghost field (field with\n        // no terms, eg there used to be terms but all\n        // docs got deleted and then merged away):\n        \n      } else {\n\n        long fieldTermCount = (status.delTermCount+status.termCount)-termCountStart;\n\n        final Object stats = fieldTerms.getStats();\n        assert stats != null;\n        if (status.blockTreeStats == null) {\n          status.blockTreeStats = new HashMap<>();\n        }\n        status.blockTreeStats.put(field, stats);\n\n        final long actualSumDocFreq = fields.terms(field).getSumDocFreq();\n        if (sumDocFreq != actualSumDocFreq) {\n          throw new RuntimeException(\"sumDocFreq for field \" + field + \"=\" + actualSumDocFreq + \" != recomputed sumDocFreq=\" + sumDocFreq);\n        }\n\n        final long actualSumTotalTermFreq = fields.terms(field).getSumTotalTermFreq();\n        if (sumTotalTermFreq != actualSumTotalTermFreq) {\n          throw new RuntimeException(\"sumTotalTermFreq for field \" + field + \"=\" + actualSumTotalTermFreq + \" != recomputed sumTotalTermFreq=\" + sumTotalTermFreq);\n        } \n        \n        if (hasFreqs == false && sumTotalTermFreq != sumDocFreq) {\n          throw new RuntimeException(\"sumTotalTermFreq for field \" + field + \" should be \" + sumDocFreq + \", got sumTotalTermFreq=\" + sumTotalTermFreq);\n        }\n        \n        final int v = fieldTerms.getDocCount();\n        if (visitedDocs.cardinality() != v) {\n          throw new RuntimeException(\"docCount for field \" + field + \"=\" + v + \" != recomputed docCount=\" + visitedDocs.cardinality());\n        }\n\n        if (fieldInfo.hasNorms() && isVectors == false) {\n          final NumericDocValues norms = normsProducer.getNorms(fieldInfo);\n          // Cross-check terms with norms\n          for (int doc = norms.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = norms.nextDoc()) {\n            if (liveDocs != null && liveDocs.get(doc) == false) {\n              // Norms may only be out of sync with terms on deleted documents.\n              // This happens when a document fails indexing and in that case it\n              // should be immediately marked as deleted by the IndexWriter.\n              continue;\n            }\n            final long norm = norms.longValue();\n            if (norm != 0 && visitedDocs.get(doc) == false) {\n              throw new RuntimeException(\"Document \" + doc + \" doesn't have terms according to postings but has a norm value that is not zero: \" + norm);\n            } else if (norm == 0 && visitedDocs.get(doc)) {\n              throw new RuntimeException(\"Document \" + doc + \" has terms according to postings but its norm value is 0, which may only be used on documents that have no terms\");\n            }\n          }\n        }\n\n        // Test seek to last term:\n        if (lastTerm != null) {\n          if (termsEnum.seekCeil(lastTerm.get()) != TermsEnum.SeekStatus.FOUND) { \n            throw new RuntimeException(\"seek to last term \" + lastTerm.get() + \" failed\");\n          }\n          if (termsEnum.term().equals(lastTerm.get()) == false) {\n            throw new RuntimeException(\"seek to last term \" + lastTerm.get() + \" returned FOUND but seeked to the wrong term \" + termsEnum.term());\n          }\n          \n          int expectedDocFreq = termsEnum.docFreq();\n          PostingsEnum d = termsEnum.postings(null, PostingsEnum.NONE);\n          int docFreq = 0;\n          while (d.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            docFreq++;\n          }\n          if (docFreq != expectedDocFreq) {\n            throw new RuntimeException(\"docFreq for last term \" + lastTerm.get() + \"=\" + expectedDocFreq + \" != recomputed docFreq=\" + docFreq);\n          }\n        }\n        \n        // check unique term count\n        long termCount = -1;\n        \n        if (fieldTermCount > 0) {\n          termCount = fields.terms(field).size();\n          \n          if (termCount != -1 && termCount != fieldTermCount) {\n            throw new RuntimeException(\"termCount mismatch \" + termCount + \" vs \" + fieldTermCount);\n          }\n        }\n\n        // Test seeking by ord\n        if (hasOrd && status.termCount-termCountStart > 0) {\n          int seekCount = (int) Math.min(10000L, termCount);\n          if (seekCount > 0) {\n            BytesRef[] seekTerms = new BytesRef[seekCount];\n            \n            // Seek by ord\n            for(int i=seekCount-1;i>=0;i--) {\n              long ord = i*(termCount/seekCount);\n              termsEnum.seekExact(ord);\n              long actualOrd = termsEnum.ord();\n              if (actualOrd != ord) {\n                throw new RuntimeException(\"seek to ord \" + ord + \" returned ord \" + actualOrd);\n              }\n              seekTerms[i] = BytesRef.deepCopyOf(termsEnum.term());\n            }\n            \n            // Seek by term\n            for(int i=seekCount-1;i>=0;i--) {\n              if (termsEnum.seekCeil(seekTerms[i]) != TermsEnum.SeekStatus.FOUND) {\n                throw new RuntimeException(\"seek to existing term \" + seekTerms[i] + \" failed\");\n              }\n              if (termsEnum.term().equals(seekTerms[i]) == false) {\n                throw new RuntimeException(\"seek to existing term \" + seekTerms[i] + \" returned FOUND but seeked to the wrong term \" + termsEnum.term());\n              }\n              \n              postings = termsEnum.postings(postings, PostingsEnum.NONE);\n              if (postings == null) {\n                throw new RuntimeException(\"null DocsEnum from to existing term \" + seekTerms[i]);\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    int fieldCount = fields.size();\n    \n    if (fieldCount != -1) {\n      if (fieldCount < 0) {\n        throw new RuntimeException(\"invalid fieldCount: \" + fieldCount);\n      }\n      if (fieldCount != computedFieldCount) {\n        throw new RuntimeException(\"fieldCount mismatch \" + fieldCount + \" vs recomputed field count \" + computedFieldCount);\n      }\n    }\n\n    if (doPrint) {\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d terms; %d terms/docs pairs; %d tokens] [took %.3f sec]\",\n                                    status.termCount, status.totFreq, status.totPos, nsToSec(System.nanoTime()-startNS)));\n    }\n    \n    if (verbose && status.blockTreeStats != null && infoStream != null && status.termCount > 0) {\n      for(Map.Entry<String, Object> ent : status.blockTreeStats.entrySet()) {\n        infoStream.println(\"      field \\\"\" + ent.getKey() + \"\\\":\");\n        infoStream.println(\"      \" + ent.getValue().toString().replace(\"\\n\", \"\\n      \"));\n      }\n    }\n    \n    return status;\n  }\n\n","sourceOld":"  /**\n   * checks Fields api is consistent with itself.\n   * searcher is optional, to verify with queries. Can be null.\n   */\n  private static Status.TermIndexStatus checkFields(Fields fields, Bits liveDocs, int maxDoc, FieldInfos fieldInfos,\n      NormsProducer normsProducer, boolean doPrint, boolean isVectors, PrintStream infoStream, boolean verbose, boolean doSlowChecks) throws IOException {\n    // TODO: we should probably return our own stats thing...?!\n    long startNS;\n    if (doPrint) {\n      startNS = System.nanoTime();\n    } else {\n      startNS = 0;\n    }\n    \n    final Status.TermIndexStatus status = new Status.TermIndexStatus();\n    int computedFieldCount = 0;\n\n    PostingsEnum postings = null;\n    \n    String lastField = null;\n    for (String field : fields) {\n\n      // MultiFieldsEnum relies upon this order...\n      if (lastField != null && field.compareTo(lastField) <= 0) {\n        throw new RuntimeException(\"fields out of order: lastField=\" + lastField + \" field=\" + field);\n      }\n      lastField = field;\n      \n      // check that the field is in fieldinfos, and is indexed.\n      // TODO: add a separate test to check this for different reader impls\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      if (fieldInfo == null) {\n        throw new RuntimeException(\"fieldsEnum inconsistent with fieldInfos, no fieldInfos for: \" + field);\n      }\n      if (fieldInfo.getIndexOptions() == IndexOptions.NONE) {\n        throw new RuntimeException(\"fieldsEnum inconsistent with fieldInfos, isIndexed == false for: \" + field);\n      }\n      \n      // TODO: really the codec should not return a field\n      // from FieldsEnum if it has no Terms... but we do\n      // this today:\n      // assert fields.terms(field) != null;\n      computedFieldCount++;\n      \n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      \n      if (terms.getDocCount() > maxDoc) {\n        throw new RuntimeException(\"docCount > maxDoc for field: \" + field + \", docCount=\" + terms.getDocCount() + \", maxDoc=\" + maxDoc);\n      }\n      \n      final boolean hasFreqs = terms.hasFreqs();\n      final boolean hasPositions = terms.hasPositions();\n      final boolean hasPayloads = terms.hasPayloads();\n      final boolean hasOffsets = terms.hasOffsets();\n      \n      BytesRef maxTerm;\n      BytesRef minTerm;\n      if (isVectors) {\n        // Term vectors impls can be very slow for getMax\n        maxTerm = null;\n        minTerm = null;\n      } else {\n        BytesRef bb = terms.getMin();\n        if (bb != null) {\n          assert bb.isValid();\n          minTerm = BytesRef.deepCopyOf(bb);\n        } else {\n          minTerm = null;\n        }\n\n        bb = terms.getMax();\n        if (bb != null) {\n          assert bb.isValid();\n          maxTerm = BytesRef.deepCopyOf(bb);\n          if (minTerm == null) {\n            throw new RuntimeException(\"field \\\"\" + field + \"\\\" has null minTerm but non-null maxTerm\");\n          }\n        } else {\n          maxTerm = null;\n          if (minTerm != null) {\n            throw new RuntimeException(\"field \\\"\" + field + \"\\\" has non-null minTerm but null maxTerm\");\n          }\n        }\n      }\n\n      // term vectors cannot omit TF:\n      final boolean expectedHasFreqs = (isVectors || fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0);\n\n      if (hasFreqs != expectedHasFreqs) {\n        throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasFreqs=\" + expectedHasFreqs + \" but got \" + hasFreqs);\n      }\n\n      if (!isVectors) {\n        final boolean expectedHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        if (hasPositions != expectedHasPositions) {\n          throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasPositions=\" + expectedHasPositions + \" but got \" + hasPositions);\n        }\n\n        final boolean expectedHasPayloads = fieldInfo.hasPayloads();\n        if (hasPayloads != expectedHasPayloads) {\n          throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasPayloads=\" + expectedHasPayloads + \" but got \" + hasPayloads);\n        }\n\n        final boolean expectedHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        if (hasOffsets != expectedHasOffsets) {\n          throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasOffsets=\" + expectedHasOffsets + \" but got \" + hasOffsets);\n        }\n      }\n\n      final TermsEnum termsEnum = terms.iterator();\n\n      boolean hasOrd = true;\n      final long termCountStart = status.delTermCount + status.termCount;\n      \n      BytesRefBuilder lastTerm = null;\n      \n      long sumTotalTermFreq = 0;\n      long sumDocFreq = 0;\n      FixedBitSet visitedDocs = new FixedBitSet(maxDoc);\n      while(true) {\n        \n        final BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        // System.out.println(\"CI: field=\" + field + \" check term=\" + term + \" docFreq=\" + termsEnum.docFreq());\n        \n        assert term.isValid();\n        \n        // make sure terms arrive in order according to\n        // the comp\n        if (lastTerm == null) {\n          lastTerm = new BytesRefBuilder();\n          lastTerm.copyBytes(term);\n        } else {\n          if (lastTerm.get().compareTo(term) >= 0) {\n            throw new RuntimeException(\"terms out of order: lastTerm=\" + lastTerm.get() + \" term=\" + term);\n          }\n          lastTerm.copyBytes(term);\n        }\n\n        if (isVectors == false) {\n          if (minTerm == null) {\n            // We checked this above:\n            assert maxTerm == null;\n            throw new RuntimeException(\"field=\\\"\" + field + \"\\\": invalid term: term=\" + term + \", minTerm=\" + minTerm);\n          }\n        \n          if (term.compareTo(minTerm) < 0) {\n            throw new RuntimeException(\"field=\\\"\" + field + \"\\\": invalid term: term=\" + term + \", minTerm=\" + minTerm);\n          }\n        \n          if (term.compareTo(maxTerm) > 0) {\n            throw new RuntimeException(\"field=\\\"\" + field + \"\\\": invalid term: term=\" + term + \", maxTerm=\" + maxTerm);\n          }\n        }\n        \n        final int docFreq = termsEnum.docFreq();\n        if (docFreq <= 0) {\n          throw new RuntimeException(\"docfreq: \" + docFreq + \" is out of bounds\");\n        }\n        sumDocFreq += docFreq;\n\n        postings = termsEnum.postings(postings, PostingsEnum.ALL);\n\n        if (hasFreqs == false) {\n          if (termsEnum.totalTermFreq() != termsEnum.docFreq()) {\n            throw new RuntimeException(\"field \\\"\" + field + \"\\\" hasFreqs is false, but TermsEnum.totalTermFreq()=\" + termsEnum.totalTermFreq() + \" (should be \" + termsEnum.docFreq() + \")\");\n          }\n        }\n        \n        if (hasOrd) {\n          long ord = -1;\n          try {\n            ord = termsEnum.ord();\n          } catch (UnsupportedOperationException uoe) {\n            hasOrd = false;\n          }\n          \n          if (hasOrd) {\n            final long ordExpected = status.delTermCount + status.termCount - termCountStart;\n            if (ord != ordExpected) {\n              throw new RuntimeException(\"ord mismatch: TermsEnum has ord=\" + ord + \" vs actual=\" + ordExpected);\n            }\n          }\n        }\n        \n        int lastDoc = -1;\n        int docCount = 0;\n        boolean hasNonDeletedDocs = false;\n        long totalTermFreq = 0;\n        while(true) {\n          final int doc = postings.nextDoc();\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          visitedDocs.set(doc);\n          int freq = postings.freq();\n          if (freq <= 0) {\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": freq \" + freq + \" is out of bounds\");\n          }\n          if (hasFreqs == false) {\n            // When a field didn't index freq, it must\n            // consistently \"lie\" and pretend that freq was\n            // 1:\n            if (postings.freq() != 1) {\n              throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": freq \" + freq + \" != 1 when Terms.hasFreqs() is false\");\n            }\n          }\n          totalTermFreq += freq;\n\n          if (liveDocs == null || liveDocs.get(doc)) {\n            hasNonDeletedDocs = true;\n            status.totFreq++;\n            if (freq >= 0) {\n              status.totPos += freq;\n            }\n          }\n          docCount++;\n          \n          if (doc <= lastDoc) {\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" <= lastDoc \" + lastDoc);\n          }\n          if (doc >= maxDoc) {\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" >= maxDoc \" + maxDoc);\n          }\n          \n          lastDoc = doc;\n          \n          int lastPos = -1;\n          int lastOffset = 0;\n          if (hasPositions) {\n            for(int j=0;j<freq;j++) {\n              final int pos = postings.nextPosition();\n\n              if (pos < 0) {\n                throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" is out of bounds\");\n              }\n              if (pos > IndexWriter.MAX_POSITION) {\n                throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" > IndexWriter.MAX_POSITION=\" + IndexWriter.MAX_POSITION);\n              }\n              if (pos < lastPos) {\n                throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" < lastPos \" + lastPos);\n              }\n              lastPos = pos;\n              BytesRef payload = postings.getPayload();\n              if (payload != null) {\n                assert payload.isValid();\n              }\n              if (payload != null && payload.length < 1) {\n                throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" payload length is out of bounds \" + payload.length);\n              }\n              if (hasOffsets) {\n                int startOffset = postings.startOffset();\n                int endOffset = postings.endOffset();\n                if (startOffset < 0) {\n                  throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \": startOffset \" + startOffset + \" is out of bounds\");\n                }\n                if (startOffset < lastOffset) {\n                  throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \": startOffset \" + startOffset + \" < lastStartOffset \" + lastOffset + \"; consider using the FixBrokenOffsets tool in Lucene's backward-codecs module to correct your index\");\n                }\n                if (endOffset < 0) {\n                  throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \": endOffset \" + endOffset + \" is out of bounds\");\n                }\n                if (endOffset < startOffset) {\n                  throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \": endOffset \" + endOffset + \" < startOffset \" + startOffset);\n                }\n                lastOffset = startOffset;\n              }\n            }\n          }\n        }\n        \n        if (hasNonDeletedDocs) {\n          status.termCount++;\n        } else {\n          status.delTermCount++;\n        }\n        \n        final long totalTermFreq2 = termsEnum.totalTermFreq();\n        \n        if (docCount != docFreq) {\n          throw new RuntimeException(\"term \" + term + \" docFreq=\" + docFreq + \" != tot docs w/o deletions \" + docCount);\n        }\n        if (docFreq > terms.getDocCount()) {\n          throw new RuntimeException(\"term \" + term + \" docFreq=\" + docFreq + \" > docCount=\" + terms.getDocCount());\n        }\n        if (totalTermFreq2 <= 0) {\n          throw new RuntimeException(\"totalTermFreq: \" + totalTermFreq2 + \" is out of bounds\");\n        }\n        sumTotalTermFreq += totalTermFreq;\n        if (totalTermFreq != totalTermFreq2) {\n          throw new RuntimeException(\"term \" + term + \" totalTermFreq=\" + totalTermFreq2 + \" != recomputed totalTermFreq=\" + totalTermFreq);\n        }\n        if (totalTermFreq2 < docFreq) {\n          throw new RuntimeException(\"totalTermFreq: \" + totalTermFreq2 + \" is out of bounds, docFreq=\" + docFreq);\n        }\n        if (hasFreqs == false && totalTermFreq != docFreq) {\n          throw new RuntimeException(\"term \" + term + \" totalTermFreq=\" + totalTermFreq + \" !=  docFreq=\" + docFreq);\n        }\n        \n        // Test skipping\n        if (hasPositions) {\n          for(int idx=0;idx<7;idx++) {\n            final int skipDocID = (int) (((idx+1)*(long) maxDoc)/8);\n            postings = termsEnum.postings(postings, PostingsEnum.ALL);\n            final int docID = postings.advance(skipDocID);\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            } else {\n              if (docID < skipDocID) {\n                throw new RuntimeException(\"term \" + term + \": advance(docID=\" + skipDocID + \") returned docID=\" + docID);\n              }\n              final int freq = postings.freq();\n              if (freq <= 0) {\n                throw new RuntimeException(\"termFreq \" + freq + \" is out of bounds\");\n              }\n              int lastPosition = -1;\n              int lastOffset = 0;\n              for(int posUpto=0;posUpto<freq;posUpto++) {\n                final int pos = postings.nextPosition();\n\n                if (pos < 0) {\n                  throw new RuntimeException(\"position \" + pos + \" is out of bounds\");\n                }\n                if (pos < lastPosition) {\n                  throw new RuntimeException(\"position \" + pos + \" is < lastPosition \" + lastPosition);\n                }\n                lastPosition = pos;\n                if (hasOffsets) {\n                  int startOffset = postings.startOffset();\n                  int endOffset = postings.endOffset();\n                  // NOTE: we cannot enforce any bounds whatsoever on vectors... they were a free-for-all before?\n                  // but for offsets in the postings lists these checks are fine: they were always enforced by IndexWriter\n                  if (!isVectors) {\n                    if (startOffset < 0) {\n                      throw new RuntimeException(\"term \" + term + \": doc \" + docID + \": pos \" + pos + \": startOffset \" + startOffset + \" is out of bounds\");\n                    }\n                    if (startOffset < lastOffset) {\n                      throw new RuntimeException(\"term \" + term + \": doc \" + docID + \": pos \" + pos + \": startOffset \" + startOffset + \" < lastStartOffset \" + lastOffset);\n                    }\n                    if (endOffset < 0) {\n                      throw new RuntimeException(\"term \" + term + \": doc \" + docID + \": pos \" + pos + \": endOffset \" + endOffset + \" is out of bounds\");\n                    }\n                    if (endOffset < startOffset) {\n                      throw new RuntimeException(\"term \" + term + \": doc \" + docID + \": pos \" + pos + \": endOffset \" + endOffset + \" < startOffset \" + startOffset);\n                    }\n                  }\n                  lastOffset = startOffset;\n                }\n              } \n              \n              final int nextDocID = postings.nextDoc();\n              if (nextDocID == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n              if (nextDocID <= docID) {\n                throw new RuntimeException(\"term \" + term + \": advance(docID=\" + skipDocID + \"), then .next() returned docID=\" + nextDocID + \" vs prev docID=\" + docID);\n              }\n            }\n\n            if (isVectors) {\n              // Only 1 doc in the postings for term vectors, so we only test 1 advance:\n              break;\n            }\n          }\n        } else {\n          for(int idx=0;idx<7;idx++) {\n            final int skipDocID = (int) (((idx+1)*(long) maxDoc)/8);\n            postings = termsEnum.postings(postings, PostingsEnum.NONE);\n            final int docID = postings.advance(skipDocID);\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            } else {\n              if (docID < skipDocID) {\n                throw new RuntimeException(\"term \" + term + \": advance(docID=\" + skipDocID + \") returned docID=\" + docID);\n              }\n              final int nextDocID = postings.nextDoc();\n              if (nextDocID == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n              if (nextDocID <= docID) {\n                throw new RuntimeException(\"term \" + term + \": advance(docID=\" + skipDocID + \"), then .next() returned docID=\" + nextDocID + \" vs prev docID=\" + docID);\n              }\n            }\n            if (isVectors) {\n              // Only 1 doc in the postings for term vectors, so we only test 1 advance:\n              break;\n            }\n          }\n        }\n\n        // Checking score blocks is heavy, we only do it on long postings lists, on every 1024th term\n        // or if slow checks are enabled.\n        if (doSlowChecks || docFreq > 1024 || (status.termCount + status.delTermCount) % 1024 == 0) {\n          // First check max scores and block uptos\n          // But only if slok checks are enabled since we visit all docs\n          if (doSlowChecks) {\n            int max = -1;\n            int maxFreq = 0;\n            ImpactsEnum impactsEnum = termsEnum.impacts(PostingsEnum.FREQS);\n            postings = termsEnum.postings(postings, PostingsEnum.FREQS);\n            for (int doc = impactsEnum.nextDoc(); ; doc = impactsEnum.nextDoc()) {\n              if (postings.nextDoc() != doc) {\n                throw new RuntimeException(\"Wrong next doc: \" + doc + \", expected \" + postings.docID());\n              }\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n              if (postings.freq() != impactsEnum.freq()) {\n                throw new RuntimeException(\"Wrong freq, expected \" + postings.freq() + \", but got \" + impactsEnum.freq());\n              }\n              if (doc > max) {\n                impactsEnum.advanceShallow(doc);\n                Impacts impacts = impactsEnum.getImpacts();\n                checkImpacts(impacts, doc);\n                max = impacts.getDocIdUpTo(0);\n                List<Impact> impacts0 = impacts.getImpacts(0);\n                maxFreq = impacts0.get(impacts0.size() - 1).freq;\n              }\n              if (impactsEnum.freq() > maxFreq) {\n                throw new RuntimeException(\"freq \" + impactsEnum.freq() + \" is greater than the max freq according to impacts \" + maxFreq);\n              }\n            }\n          }\n\n          // Now check advancing\n          ImpactsEnum impactsEnum = termsEnum.impacts(PostingsEnum.FREQS);\n          postings = termsEnum.postings(postings, PostingsEnum.FREQS);\n\n          int max = -1;\n          int maxFreq = 0;\n          while (true) {\n            int doc = impactsEnum.docID();\n            boolean advance;\n            int target;\n            if (((field.hashCode() + doc) & 1) == 1) {\n              advance = false;\n              target = doc + 1;\n            } else {\n              advance = true;\n              int delta = Math.min(1 + ((31 * field.hashCode() + doc) & 0x1ff), DocIdSetIterator.NO_MORE_DOCS - doc);\n              target = impactsEnum.docID() + delta;\n            }\n\n            if (target > max && target % 2 == 1) {\n              int delta = Math.min((31 * field.hashCode() + target) & 0x1ff, DocIdSetIterator.NO_MORE_DOCS - target);\n              max = target + delta;\n              impactsEnum.advanceShallow(target);\n              Impacts impacts = impactsEnum.getImpacts();\n              checkImpacts(impacts, doc);\n              maxFreq = Integer.MAX_VALUE;\n              for (int level = 0; level < impacts.numLevels(); ++level) {\n                if (impacts.getDocIdUpTo(level) >= max) {\n                  List<Impact> perLevelImpacts = impacts.getImpacts(level);\n                  maxFreq = perLevelImpacts.get(perLevelImpacts.size() - 1).freq;\n                  break;\n                }\n              }\n            }\n\n            if (advance) {\n              doc = impactsEnum.advance(target);\n            } else {\n              doc = impactsEnum.nextDoc();\n            }\n\n            if (postings.advance(target) != doc) {\n              throw new RuntimeException(\"Impacts do not advance to the same document as postings for target \" + target + \", postings: \" + postings.docID() + \", impacts: \" + doc);\n            }\n            if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            if (postings.freq() != impactsEnum.freq()) {\n              throw new RuntimeException(\"Wrong freq, expected \" + postings.freq() + \", but got \" + impactsEnum.freq());\n            }\n  \n            if (doc >= max) {\n              int delta = Math.min((31 * field.hashCode() + target & 0x1ff), DocIdSetIterator.NO_MORE_DOCS - doc);\n              max = doc + delta;\n              impactsEnum.advanceShallow(doc);\n              Impacts impacts = impactsEnum.getImpacts();\n              checkImpacts(impacts, doc);\n              maxFreq = Integer.MAX_VALUE;\n              for (int level = 0; level < impacts.numLevels(); ++level) {\n                if (impacts.getDocIdUpTo(level) >= max) {\n                  List<Impact> perLevelImpacts = impacts.getImpacts(level);\n                  maxFreq = perLevelImpacts.get(perLevelImpacts.size() - 1).freq;\n                  break;\n                }\n              }\n            }\n\n            if (impactsEnum.freq() > maxFreq) {\n              throw new RuntimeException(\"Term frequency \" + impactsEnum.freq() + \" is greater than the max freq according to impacts \" + maxFreq);\n            }\n          }\n        }\n      }\n\n      if (minTerm != null && status.termCount + status.delTermCount == 0) {\n        throw new RuntimeException(\"field=\\\"\" + field + \"\\\": minTerm is non-null yet we saw no terms: \" + minTerm);\n      }\n\n      final Terms fieldTerms = fields.terms(field);\n      if (fieldTerms == null) {\n        // Unusual: the FieldsEnum returned a field but\n        // the Terms for that field is null; this should\n        // only happen if it's a ghost field (field with\n        // no terms, eg there used to be terms but all\n        // docs got deleted and then merged away):\n        \n      } else {\n\n        long fieldTermCount = (status.delTermCount+status.termCount)-termCountStart;\n\n        // LUCENE-5879: this is just too slow for now:\n        if (false && hasFreqs == false) {\n          // For DOCS_ONLY fields we recursively test term ranges:\n          checkTermRanges(field, maxDoc, fieldTerms, fieldTermCount);\n        }\n\n        final Object stats = fieldTerms.getStats();\n        assert stats != null;\n        if (status.blockTreeStats == null) {\n          status.blockTreeStats = new HashMap<>();\n        }\n        status.blockTreeStats.put(field, stats);\n\n        final long actualSumDocFreq = fields.terms(field).getSumDocFreq();\n        if (sumDocFreq != actualSumDocFreq) {\n          throw new RuntimeException(\"sumDocFreq for field \" + field + \"=\" + actualSumDocFreq + \" != recomputed sumDocFreq=\" + sumDocFreq);\n        }\n\n        final long actualSumTotalTermFreq = fields.terms(field).getSumTotalTermFreq();\n        if (sumTotalTermFreq != actualSumTotalTermFreq) {\n          throw new RuntimeException(\"sumTotalTermFreq for field \" + field + \"=\" + actualSumTotalTermFreq + \" != recomputed sumTotalTermFreq=\" + sumTotalTermFreq);\n        } \n        \n        if (hasFreqs == false && sumTotalTermFreq != sumDocFreq) {\n          throw new RuntimeException(\"sumTotalTermFreq for field \" + field + \" should be \" + sumDocFreq + \", got sumTotalTermFreq=\" + sumTotalTermFreq);\n        }\n        \n        final int v = fieldTerms.getDocCount();\n        if (visitedDocs.cardinality() != v) {\n          throw new RuntimeException(\"docCount for field \" + field + \"=\" + v + \" != recomputed docCount=\" + visitedDocs.cardinality());\n        }\n\n        if (fieldInfo.hasNorms() && isVectors == false) {\n          final NumericDocValues norms = normsProducer.getNorms(fieldInfo);\n          // Cross-check terms with norms\n          for (int doc = norms.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = norms.nextDoc()) {\n            if (liveDocs != null && liveDocs.get(doc) == false) {\n              // Norms may only be out of sync with terms on deleted documents.\n              // This happens when a document fails indexing and in that case it\n              // should be immediately marked as deleted by the IndexWriter.\n              continue;\n            }\n            final long norm = norms.longValue();\n            if (norm != 0 && visitedDocs.get(doc) == false) {\n              throw new RuntimeException(\"Document \" + doc + \" doesn't have terms according to postings but has a norm value that is not zero: \" + norm);\n            } else if (norm == 0 && visitedDocs.get(doc)) {\n              throw new RuntimeException(\"Document \" + doc + \" has terms according to postings but its norm value is 0, which may only be used on documents that have no terms\");\n            }\n          }\n        }\n\n        // Test seek to last term:\n        if (lastTerm != null) {\n          if (termsEnum.seekCeil(lastTerm.get()) != TermsEnum.SeekStatus.FOUND) { \n            throw new RuntimeException(\"seek to last term \" + lastTerm.get() + \" failed\");\n          }\n          if (termsEnum.term().equals(lastTerm.get()) == false) {\n            throw new RuntimeException(\"seek to last term \" + lastTerm.get() + \" returned FOUND but seeked to the wrong term \" + termsEnum.term());\n          }\n          \n          int expectedDocFreq = termsEnum.docFreq();\n          PostingsEnum d = termsEnum.postings(null, PostingsEnum.NONE);\n          int docFreq = 0;\n          while (d.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            docFreq++;\n          }\n          if (docFreq != expectedDocFreq) {\n            throw new RuntimeException(\"docFreq for last term \" + lastTerm.get() + \"=\" + expectedDocFreq + \" != recomputed docFreq=\" + docFreq);\n          }\n        }\n        \n        // check unique term count\n        long termCount = -1;\n        \n        if (fieldTermCount > 0) {\n          termCount = fields.terms(field).size();\n          \n          if (termCount != -1 && termCount != fieldTermCount) {\n            throw new RuntimeException(\"termCount mismatch \" + termCount + \" vs \" + fieldTermCount);\n          }\n        }\n\n        // Test seeking by ord\n        if (hasOrd && status.termCount-termCountStart > 0) {\n          int seekCount = (int) Math.min(10000L, termCount);\n          if (seekCount > 0) {\n            BytesRef[] seekTerms = new BytesRef[seekCount];\n            \n            // Seek by ord\n            for(int i=seekCount-1;i>=0;i--) {\n              long ord = i*(termCount/seekCount);\n              termsEnum.seekExact(ord);\n              long actualOrd = termsEnum.ord();\n              if (actualOrd != ord) {\n                throw new RuntimeException(\"seek to ord \" + ord + \" returned ord \" + actualOrd);\n              }\n              seekTerms[i] = BytesRef.deepCopyOf(termsEnum.term());\n            }\n            \n            // Seek by term\n            for(int i=seekCount-1;i>=0;i--) {\n              if (termsEnum.seekCeil(seekTerms[i]) != TermsEnum.SeekStatus.FOUND) {\n                throw new RuntimeException(\"seek to existing term \" + seekTerms[i] + \" failed\");\n              }\n              if (termsEnum.term().equals(seekTerms[i]) == false) {\n                throw new RuntimeException(\"seek to existing term \" + seekTerms[i] + \" returned FOUND but seeked to the wrong term \" + termsEnum.term());\n              }\n              \n              postings = termsEnum.postings(postings, PostingsEnum.NONE);\n              if (postings == null) {\n                throw new RuntimeException(\"null DocsEnum from to existing term \" + seekTerms[i]);\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    int fieldCount = fields.size();\n    \n    if (fieldCount != -1) {\n      if (fieldCount < 0) {\n        throw new RuntimeException(\"invalid fieldCount: \" + fieldCount);\n      }\n      if (fieldCount != computedFieldCount) {\n        throw new RuntimeException(\"fieldCount mismatch \" + fieldCount + \" vs recomputed field count \" + computedFieldCount);\n      }\n    }\n\n    if (doPrint) {\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d terms; %d terms/docs pairs; %d tokens] [took %.3f sec]\",\n                                    status.termCount, status.totFreq, status.totPos, nsToSec(System.nanoTime()-startNS)));\n    }\n    \n    if (verbose && status.blockTreeStats != null && infoStream != null && status.termCount > 0) {\n      for(Map.Entry<String, Object> ent : status.blockTreeStats.entrySet()) {\n        infoStream.println(\"      field \\\"\" + ent.getKey() + \"\\\":\");\n        infoStream.println(\"      \" + ent.getValue().toString().replace(\"\\n\", \"\\n      \"));\n      }\n    }\n    \n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fee11a7d103096c7a11d1504c3edf5a943630816","date":1596031473,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkFields(Fields,Bits,int,FieldInfos,NormsProducer,boolean,boolean,PrintStream,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkFields(Fields,Bits,int,FieldInfos,NormsProducer,boolean,boolean,PrintStream,boolean,boolean).mjava","sourceNew":"  /**\n   * checks Fields api is consistent with itself.\n   * searcher is optional, to verify with queries. Can be null.\n   */\n  private static Status.TermIndexStatus checkFields(Fields fields, Bits liveDocs, int maxDoc, FieldInfos fieldInfos,\n      NormsProducer normsProducer, boolean doPrint, boolean isVectors, PrintStream infoStream, boolean verbose, boolean doSlowChecks) throws IOException {\n    // TODO: we should probably return our own stats thing...?!\n    long startNS;\n    if (doPrint) {\n      startNS = System.nanoTime();\n    } else {\n      startNS = 0;\n    }\n    \n    final Status.TermIndexStatus status = new Status.TermIndexStatus();\n    int computedFieldCount = 0;\n\n    PostingsEnum postings = null;\n    \n    String lastField = null;\n    for (String field : fields) {\n\n      // MultiFieldsEnum relies upon this order...\n      if (lastField != null && field.compareTo(lastField) <= 0) {\n        throw new RuntimeException(\"fields out of order: lastField=\" + lastField + \" field=\" + field);\n      }\n      lastField = field;\n      \n      // check that the field is in fieldinfos, and is indexed.\n      // TODO: add a separate test to check this for different reader impls\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      if (fieldInfo == null) {\n        throw new RuntimeException(\"fieldsEnum inconsistent with fieldInfos, no fieldInfos for: \" + field);\n      }\n      if (fieldInfo.getIndexOptions() == IndexOptions.NONE) {\n        throw new RuntimeException(\"fieldsEnum inconsistent with fieldInfos, isIndexed == false for: \" + field);\n      }\n      \n      // TODO: really the codec should not return a field\n      // from FieldsEnum if it has no Terms... but we do\n      // this today:\n      // assert fields.terms(field) != null;\n      computedFieldCount++;\n      \n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      \n      if (terms.getDocCount() > maxDoc) {\n        throw new RuntimeException(\"docCount > maxDoc for field: \" + field + \", docCount=\" + terms.getDocCount() + \", maxDoc=\" + maxDoc);\n      }\n      \n      final boolean hasFreqs = terms.hasFreqs();\n      final boolean hasPositions = terms.hasPositions();\n      final boolean hasPayloads = terms.hasPayloads();\n      final boolean hasOffsets = terms.hasOffsets();\n      \n      BytesRef maxTerm;\n      BytesRef minTerm;\n      if (isVectors) {\n        // Term vectors impls can be very slow for getMax\n        maxTerm = null;\n        minTerm = null;\n      } else {\n        BytesRef bb = terms.getMin();\n        if (bb != null) {\n          assert bb.isValid();\n          minTerm = BytesRef.deepCopyOf(bb);\n        } else {\n          minTerm = null;\n        }\n\n        bb = terms.getMax();\n        if (bb != null) {\n          assert bb.isValid();\n          maxTerm = BytesRef.deepCopyOf(bb);\n          if (minTerm == null) {\n            throw new RuntimeException(\"field \\\"\" + field + \"\\\" has null minTerm but non-null maxTerm\");\n          }\n        } else {\n          maxTerm = null;\n          if (minTerm != null) {\n            throw new RuntimeException(\"field \\\"\" + field + \"\\\" has non-null minTerm but null maxTerm\");\n          }\n        }\n      }\n\n      // term vectors cannot omit TF:\n      final boolean expectedHasFreqs = (isVectors || fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0);\n\n      if (hasFreqs != expectedHasFreqs) {\n        throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasFreqs=\" + expectedHasFreqs + \" but got \" + hasFreqs);\n      }\n\n      if (!isVectors) {\n        final boolean expectedHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        if (hasPositions != expectedHasPositions) {\n          throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasPositions=\" + expectedHasPositions + \" but got \" + hasPositions);\n        }\n\n        final boolean expectedHasPayloads = fieldInfo.hasPayloads();\n        if (hasPayloads != expectedHasPayloads) {\n          throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasPayloads=\" + expectedHasPayloads + \" but got \" + hasPayloads);\n        }\n\n        final boolean expectedHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        if (hasOffsets != expectedHasOffsets) {\n          throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasOffsets=\" + expectedHasOffsets + \" but got \" + hasOffsets);\n        }\n      }\n\n      final TermsEnum termsEnum = terms.iterator();\n\n      boolean hasOrd = true;\n      final long termCountStart = status.delTermCount + status.termCount;\n      \n      BytesRefBuilder lastTerm = null;\n      \n      long sumTotalTermFreq = 0;\n      long sumDocFreq = 0;\n      FixedBitSet visitedDocs = new FixedBitSet(maxDoc);\n      while(true) {\n        \n        final BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        // System.out.println(\"CI: field=\" + field + \" check term=\" + term + \" docFreq=\" + termsEnum.docFreq());\n        \n        assert term.isValid();\n        \n        // make sure terms arrive in order according to\n        // the comp\n        if (lastTerm == null) {\n          lastTerm = new BytesRefBuilder();\n          lastTerm.copyBytes(term);\n        } else {\n          if (lastTerm.get().compareTo(term) >= 0) {\n            throw new RuntimeException(\"terms out of order: lastTerm=\" + lastTerm.get() + \" term=\" + term);\n          }\n          lastTerm.copyBytes(term);\n        }\n\n        if (isVectors == false) {\n          if (minTerm == null) {\n            // We checked this above:\n            assert maxTerm == null;\n            throw new RuntimeException(\"field=\\\"\" + field + \"\\\": invalid term: term=\" + term + \", minTerm=\" + minTerm);\n          }\n        \n          if (term.compareTo(minTerm) < 0) {\n            throw new RuntimeException(\"field=\\\"\" + field + \"\\\": invalid term: term=\" + term + \", minTerm=\" + minTerm);\n          }\n        \n          if (term.compareTo(maxTerm) > 0) {\n            throw new RuntimeException(\"field=\\\"\" + field + \"\\\": invalid term: term=\" + term + \", maxTerm=\" + maxTerm);\n          }\n        }\n        \n        final int docFreq = termsEnum.docFreq();\n        if (docFreq <= 0) {\n          throw new RuntimeException(\"docfreq: \" + docFreq + \" is out of bounds\");\n        }\n        sumDocFreq += docFreq;\n\n        postings = termsEnum.postings(postings, PostingsEnum.ALL);\n\n        if (hasFreqs == false) {\n          if (termsEnum.totalTermFreq() != termsEnum.docFreq()) {\n            throw new RuntimeException(\"field \\\"\" + field + \"\\\" hasFreqs is false, but TermsEnum.totalTermFreq()=\" + termsEnum.totalTermFreq() + \" (should be \" + termsEnum.docFreq() + \")\");\n          }\n        }\n        \n        if (hasOrd) {\n          long ord = -1;\n          try {\n            ord = termsEnum.ord();\n          } catch (UnsupportedOperationException uoe) {\n            hasOrd = false;\n          }\n          \n          if (hasOrd) {\n            final long ordExpected = status.delTermCount + status.termCount - termCountStart;\n            if (ord != ordExpected) {\n              throw new RuntimeException(\"ord mismatch: TermsEnum has ord=\" + ord + \" vs actual=\" + ordExpected);\n            }\n          }\n        }\n        \n        int lastDoc = -1;\n        int docCount = 0;\n        boolean hasNonDeletedDocs = false;\n        long totalTermFreq = 0;\n        while(true) {\n          final int doc = postings.nextDoc();\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          visitedDocs.set(doc);\n          int freq = postings.freq();\n          if (freq <= 0) {\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": freq \" + freq + \" is out of bounds\");\n          }\n          if (hasFreqs == false) {\n            // When a field didn't index freq, it must\n            // consistently \"lie\" and pretend that freq was\n            // 1:\n            if (postings.freq() != 1) {\n              throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": freq \" + freq + \" != 1 when Terms.hasFreqs() is false\");\n            }\n          }\n          totalTermFreq += freq;\n\n          if (liveDocs == null || liveDocs.get(doc)) {\n            hasNonDeletedDocs = true;\n            status.totFreq++;\n            if (freq >= 0) {\n              status.totPos += freq;\n            }\n          }\n          docCount++;\n          \n          if (doc <= lastDoc) {\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" <= lastDoc \" + lastDoc);\n          }\n          if (doc >= maxDoc) {\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" >= maxDoc \" + maxDoc);\n          }\n          \n          lastDoc = doc;\n          \n          int lastPos = -1;\n          int lastOffset = 0;\n          if (hasPositions) {\n            for(int j=0;j<freq;j++) {\n              final int pos = postings.nextPosition();\n\n              if (pos < 0) {\n                throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" is out of bounds\");\n              }\n              if (pos > IndexWriter.MAX_POSITION) {\n                throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" > IndexWriter.MAX_POSITION=\" + IndexWriter.MAX_POSITION);\n              }\n              if (pos < lastPos) {\n                throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" < lastPos \" + lastPos);\n              }\n              lastPos = pos;\n              BytesRef payload = postings.getPayload();\n              if (payload != null) {\n                assert payload.isValid();\n              }\n              if (payload != null && payload.length < 1) {\n                throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" payload length is out of bounds \" + payload.length);\n              }\n              if (hasOffsets) {\n                int startOffset = postings.startOffset();\n                int endOffset = postings.endOffset();\n                if (startOffset < 0) {\n                  throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \": startOffset \" + startOffset + \" is out of bounds\");\n                }\n                if (startOffset < lastOffset) {\n                  throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \": startOffset \" + startOffset + \" < lastStartOffset \" + lastOffset + \"; consider using the FixBrokenOffsets tool in Lucene's backward-codecs module to correct your index\");\n                }\n                if (endOffset < 0) {\n                  throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \": endOffset \" + endOffset + \" is out of bounds\");\n                }\n                if (endOffset < startOffset) {\n                  throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \": endOffset \" + endOffset + \" < startOffset \" + startOffset);\n                }\n                lastOffset = startOffset;\n              }\n            }\n          }\n        }\n        \n        if (hasNonDeletedDocs) {\n          status.termCount++;\n        } else {\n          status.delTermCount++;\n        }\n        \n        final long totalTermFreq2 = termsEnum.totalTermFreq();\n        \n        if (docCount != docFreq) {\n          throw new RuntimeException(\"term \" + term + \" docFreq=\" + docFreq + \" != tot docs w/o deletions \" + docCount);\n        }\n        if (docFreq > terms.getDocCount()) {\n          throw new RuntimeException(\"term \" + term + \" docFreq=\" + docFreq + \" > docCount=\" + terms.getDocCount());\n        }\n        if (totalTermFreq2 <= 0) {\n          throw new RuntimeException(\"totalTermFreq: \" + totalTermFreq2 + \" is out of bounds\");\n        }\n        sumTotalTermFreq += totalTermFreq;\n        if (totalTermFreq != totalTermFreq2) {\n          throw new RuntimeException(\"term \" + term + \" totalTermFreq=\" + totalTermFreq2 + \" != recomputed totalTermFreq=\" + totalTermFreq);\n        }\n        if (totalTermFreq2 < docFreq) {\n          throw new RuntimeException(\"totalTermFreq: \" + totalTermFreq2 + \" is out of bounds, docFreq=\" + docFreq);\n        }\n        if (hasFreqs == false && totalTermFreq != docFreq) {\n          throw new RuntimeException(\"term \" + term + \" totalTermFreq=\" + totalTermFreq + \" !=  docFreq=\" + docFreq);\n        }\n        \n        // Test skipping\n        if (hasPositions) {\n          for(int idx=0;idx<7;idx++) {\n            final int skipDocID = (int) (((idx+1)*(long) maxDoc)/8);\n            postings = termsEnum.postings(postings, PostingsEnum.ALL);\n            final int docID = postings.advance(skipDocID);\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            } else {\n              if (docID < skipDocID) {\n                throw new RuntimeException(\"term \" + term + \": advance(docID=\" + skipDocID + \") returned docID=\" + docID);\n              }\n              final int freq = postings.freq();\n              if (freq <= 0) {\n                throw new RuntimeException(\"termFreq \" + freq + \" is out of bounds\");\n              }\n              int lastPosition = -1;\n              int lastOffset = 0;\n              for(int posUpto=0;posUpto<freq;posUpto++) {\n                final int pos = postings.nextPosition();\n\n                if (pos < 0) {\n                  throw new RuntimeException(\"position \" + pos + \" is out of bounds\");\n                }\n                if (pos < lastPosition) {\n                  throw new RuntimeException(\"position \" + pos + \" is < lastPosition \" + lastPosition);\n                }\n                lastPosition = pos;\n                if (hasOffsets) {\n                  int startOffset = postings.startOffset();\n                  int endOffset = postings.endOffset();\n                  // NOTE: we cannot enforce any bounds whatsoever on vectors... they were a free-for-all before?\n                  // but for offsets in the postings lists these checks are fine: they were always enforced by IndexWriter\n                  if (!isVectors) {\n                    if (startOffset < 0) {\n                      throw new RuntimeException(\"term \" + term + \": doc \" + docID + \": pos \" + pos + \": startOffset \" + startOffset + \" is out of bounds\");\n                    }\n                    if (startOffset < lastOffset) {\n                      throw new RuntimeException(\"term \" + term + \": doc \" + docID + \": pos \" + pos + \": startOffset \" + startOffset + \" < lastStartOffset \" + lastOffset);\n                    }\n                    if (endOffset < 0) {\n                      throw new RuntimeException(\"term \" + term + \": doc \" + docID + \": pos \" + pos + \": endOffset \" + endOffset + \" is out of bounds\");\n                    }\n                    if (endOffset < startOffset) {\n                      throw new RuntimeException(\"term \" + term + \": doc \" + docID + \": pos \" + pos + \": endOffset \" + endOffset + \" < startOffset \" + startOffset);\n                    }\n                  }\n                  lastOffset = startOffset;\n                }\n              } \n              \n              final int nextDocID = postings.nextDoc();\n              if (nextDocID == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n              if (nextDocID <= docID) {\n                throw new RuntimeException(\"term \" + term + \": advance(docID=\" + skipDocID + \"), then .next() returned docID=\" + nextDocID + \" vs prev docID=\" + docID);\n              }\n            }\n\n            if (isVectors) {\n              // Only 1 doc in the postings for term vectors, so we only test 1 advance:\n              break;\n            }\n          }\n        } else {\n          for(int idx=0;idx<7;idx++) {\n            final int skipDocID = (int) (((idx+1)*(long) maxDoc)/8);\n            postings = termsEnum.postings(postings, PostingsEnum.NONE);\n            final int docID = postings.advance(skipDocID);\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            } else {\n              if (docID < skipDocID) {\n                throw new RuntimeException(\"term \" + term + \": advance(docID=\" + skipDocID + \") returned docID=\" + docID);\n              }\n              final int nextDocID = postings.nextDoc();\n              if (nextDocID == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n              if (nextDocID <= docID) {\n                throw new RuntimeException(\"term \" + term + \": advance(docID=\" + skipDocID + \"), then .next() returned docID=\" + nextDocID + \" vs prev docID=\" + docID);\n              }\n            }\n            if (isVectors) {\n              // Only 1 doc in the postings for term vectors, so we only test 1 advance:\n              break;\n            }\n          }\n        }\n\n        // Checking score blocks is heavy, we only do it on long postings lists, on every 1024th term\n        // or if slow checks are enabled.\n        if (doSlowChecks || docFreq > 1024 || (status.termCount + status.delTermCount) % 1024 == 0) {\n          // First check max scores and block uptos\n          // But only if slok checks are enabled since we visit all docs\n          if (doSlowChecks) {\n            int max = -1;\n            int maxFreq = 0;\n            ImpactsEnum impactsEnum = termsEnum.impacts(PostingsEnum.FREQS);\n            postings = termsEnum.postings(postings, PostingsEnum.FREQS);\n            for (int doc = impactsEnum.nextDoc(); ; doc = impactsEnum.nextDoc()) {\n              if (postings.nextDoc() != doc) {\n                throw new RuntimeException(\"Wrong next doc: \" + doc + \", expected \" + postings.docID());\n              }\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n              if (postings.freq() != impactsEnum.freq()) {\n                throw new RuntimeException(\"Wrong freq, expected \" + postings.freq() + \", but got \" + impactsEnum.freq());\n              }\n              if (doc > max) {\n                impactsEnum.advanceShallow(doc);\n                Impacts impacts = impactsEnum.getImpacts();\n                checkImpacts(impacts, doc);\n                max = impacts.getDocIdUpTo(0);\n                List<Impact> impacts0 = impacts.getImpacts(0);\n                maxFreq = impacts0.get(impacts0.size() - 1).freq;\n              }\n              if (impactsEnum.freq() > maxFreq) {\n                throw new RuntimeException(\"freq \" + impactsEnum.freq() + \" is greater than the max freq according to impacts \" + maxFreq);\n              }\n            }\n          }\n\n          // Now check advancing\n          ImpactsEnum impactsEnum = termsEnum.impacts(PostingsEnum.FREQS);\n          postings = termsEnum.postings(postings, PostingsEnum.FREQS);\n\n          int max = -1;\n          int maxFreq = 0;\n          while (true) {\n            int doc = impactsEnum.docID();\n            boolean advance;\n            int target;\n            if (((field.hashCode() + doc) & 1) == 1) {\n              advance = false;\n              target = doc + 1;\n            } else {\n              advance = true;\n              int delta = Math.min(1 + ((31 * field.hashCode() + doc) & 0x1ff), DocIdSetIterator.NO_MORE_DOCS - doc);\n              target = impactsEnum.docID() + delta;\n            }\n\n            if (target > max && target % 2 == 1) {\n              int delta = Math.min((31 * field.hashCode() + target) & 0x1ff, DocIdSetIterator.NO_MORE_DOCS - target);\n              max = target + delta;\n              impactsEnum.advanceShallow(target);\n              Impacts impacts = impactsEnum.getImpacts();\n              checkImpacts(impacts, doc);\n              maxFreq = Integer.MAX_VALUE;\n              for (int level = 0; level < impacts.numLevels(); ++level) {\n                if (impacts.getDocIdUpTo(level) >= max) {\n                  List<Impact> perLevelImpacts = impacts.getImpacts(level);\n                  maxFreq = perLevelImpacts.get(perLevelImpacts.size() - 1).freq;\n                  break;\n                }\n              }\n            }\n\n            if (advance) {\n              doc = impactsEnum.advance(target);\n            } else {\n              doc = impactsEnum.nextDoc();\n            }\n\n            if (postings.advance(target) != doc) {\n              throw new RuntimeException(\"Impacts do not advance to the same document as postings for target \" + target + \", postings: \" + postings.docID() + \", impacts: \" + doc);\n            }\n            if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            if (postings.freq() != impactsEnum.freq()) {\n              throw new RuntimeException(\"Wrong freq, expected \" + postings.freq() + \", but got \" + impactsEnum.freq());\n            }\n  \n            if (doc >= max) {\n              int delta = Math.min((31 * field.hashCode() + target & 0x1ff), DocIdSetIterator.NO_MORE_DOCS - doc);\n              max = doc + delta;\n              impactsEnum.advanceShallow(doc);\n              Impacts impacts = impactsEnum.getImpacts();\n              checkImpacts(impacts, doc);\n              maxFreq = Integer.MAX_VALUE;\n              for (int level = 0; level < impacts.numLevels(); ++level) {\n                if (impacts.getDocIdUpTo(level) >= max) {\n                  List<Impact> perLevelImpacts = impacts.getImpacts(level);\n                  maxFreq = perLevelImpacts.get(perLevelImpacts.size() - 1).freq;\n                  break;\n                }\n              }\n            }\n\n            if (impactsEnum.freq() > maxFreq) {\n              throw new RuntimeException(\"Term frequency \" + impactsEnum.freq() + \" is greater than the max freq according to impacts \" + maxFreq);\n            }\n          }\n        }\n      }\n\n      if (minTerm != null && status.termCount + status.delTermCount == 0) {\n        throw new RuntimeException(\"field=\\\"\" + field + \"\\\": minTerm is non-null yet we saw no terms: \" + minTerm);\n      }\n\n      final Terms fieldTerms = fields.terms(field);\n      if (fieldTerms == null) {\n        // Unusual: the FieldsEnum returned a field but\n        // the Terms for that field is null; this should\n        // only happen if it's a ghost field (field with\n        // no terms, eg there used to be terms but all\n        // docs got deleted and then merged away):\n        \n      } else {\n\n        long fieldTermCount = (status.delTermCount+status.termCount)-termCountStart;\n\n        final Object stats = fieldTerms.getStats();\n        assert stats != null;\n        if (status.blockTreeStats == null) {\n          status.blockTreeStats = new HashMap<>();\n        }\n        status.blockTreeStats.put(field, stats);\n\n        final long actualSumDocFreq = fields.terms(field).getSumDocFreq();\n        if (sumDocFreq != actualSumDocFreq) {\n          throw new RuntimeException(\"sumDocFreq for field \" + field + \"=\" + actualSumDocFreq + \" != recomputed sumDocFreq=\" + sumDocFreq);\n        }\n\n        final long actualSumTotalTermFreq = fields.terms(field).getSumTotalTermFreq();\n        if (sumTotalTermFreq != actualSumTotalTermFreq) {\n          throw new RuntimeException(\"sumTotalTermFreq for field \" + field + \"=\" + actualSumTotalTermFreq + \" != recomputed sumTotalTermFreq=\" + sumTotalTermFreq);\n        } \n        \n        if (hasFreqs == false && sumTotalTermFreq != sumDocFreq) {\n          throw new RuntimeException(\"sumTotalTermFreq for field \" + field + \" should be \" + sumDocFreq + \", got sumTotalTermFreq=\" + sumTotalTermFreq);\n        }\n        \n        final int v = fieldTerms.getDocCount();\n        if (visitedDocs.cardinality() != v) {\n          throw new RuntimeException(\"docCount for field \" + field + \"=\" + v + \" != recomputed docCount=\" + visitedDocs.cardinality());\n        }\n\n        if (fieldInfo.hasNorms() && isVectors == false) {\n          final NumericDocValues norms = normsProducer.getNorms(fieldInfo);\n          // Cross-check terms with norms\n          for (int doc = norms.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = norms.nextDoc()) {\n            if (liveDocs != null && liveDocs.get(doc) == false) {\n              // Norms may only be out of sync with terms on deleted documents.\n              // This happens when a document fails indexing and in that case it\n              // should be immediately marked as deleted by the IndexWriter.\n              continue;\n            }\n            final long norm = norms.longValue();\n            if (norm != 0 && visitedDocs.get(doc) == false) {\n              throw new RuntimeException(\"Document \" + doc + \" doesn't have terms according to postings but has a norm value that is not zero: \" + Long.toUnsignedString(norm));\n            } else if (norm == 0 && visitedDocs.get(doc)) {\n              throw new RuntimeException(\"Document \" + doc + \" has terms according to postings but its norm value is 0, which may only be used on documents that have no terms\");\n            }\n          }\n        }\n\n        // Test seek to last term:\n        if (lastTerm != null) {\n          if (termsEnum.seekCeil(lastTerm.get()) != TermsEnum.SeekStatus.FOUND) { \n            throw new RuntimeException(\"seek to last term \" + lastTerm.get() + \" failed\");\n          }\n          if (termsEnum.term().equals(lastTerm.get()) == false) {\n            throw new RuntimeException(\"seek to last term \" + lastTerm.get() + \" returned FOUND but seeked to the wrong term \" + termsEnum.term());\n          }\n          \n          int expectedDocFreq = termsEnum.docFreq();\n          PostingsEnum d = termsEnum.postings(null, PostingsEnum.NONE);\n          int docFreq = 0;\n          while (d.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            docFreq++;\n          }\n          if (docFreq != expectedDocFreq) {\n            throw new RuntimeException(\"docFreq for last term \" + lastTerm.get() + \"=\" + expectedDocFreq + \" != recomputed docFreq=\" + docFreq);\n          }\n        }\n        \n        // check unique term count\n        long termCount = -1;\n        \n        if (fieldTermCount > 0) {\n          termCount = fields.terms(field).size();\n          \n          if (termCount != -1 && termCount != fieldTermCount) {\n            throw new RuntimeException(\"termCount mismatch \" + termCount + \" vs \" + fieldTermCount);\n          }\n        }\n\n        // Test seeking by ord\n        if (hasOrd && status.termCount-termCountStart > 0) {\n          int seekCount = (int) Math.min(10000L, termCount);\n          if (seekCount > 0) {\n            BytesRef[] seekTerms = new BytesRef[seekCount];\n            \n            // Seek by ord\n            for(int i=seekCount-1;i>=0;i--) {\n              long ord = i*(termCount/seekCount);\n              termsEnum.seekExact(ord);\n              long actualOrd = termsEnum.ord();\n              if (actualOrd != ord) {\n                throw new RuntimeException(\"seek to ord \" + ord + \" returned ord \" + actualOrd);\n              }\n              seekTerms[i] = BytesRef.deepCopyOf(termsEnum.term());\n            }\n            \n            // Seek by term\n            for(int i=seekCount-1;i>=0;i--) {\n              if (termsEnum.seekCeil(seekTerms[i]) != TermsEnum.SeekStatus.FOUND) {\n                throw new RuntimeException(\"seek to existing term \" + seekTerms[i] + \" failed\");\n              }\n              if (termsEnum.term().equals(seekTerms[i]) == false) {\n                throw new RuntimeException(\"seek to existing term \" + seekTerms[i] + \" returned FOUND but seeked to the wrong term \" + termsEnum.term());\n              }\n              \n              postings = termsEnum.postings(postings, PostingsEnum.NONE);\n              if (postings == null) {\n                throw new RuntimeException(\"null DocsEnum from to existing term \" + seekTerms[i]);\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    int fieldCount = fields.size();\n    \n    if (fieldCount != -1) {\n      if (fieldCount < 0) {\n        throw new RuntimeException(\"invalid fieldCount: \" + fieldCount);\n      }\n      if (fieldCount != computedFieldCount) {\n        throw new RuntimeException(\"fieldCount mismatch \" + fieldCount + \" vs recomputed field count \" + computedFieldCount);\n      }\n    }\n\n    if (doPrint) {\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d terms; %d terms/docs pairs; %d tokens] [took %.3f sec]\",\n                                    status.termCount, status.totFreq, status.totPos, nsToSec(System.nanoTime()-startNS)));\n    }\n    \n    if (verbose && status.blockTreeStats != null && infoStream != null && status.termCount > 0) {\n      for(Map.Entry<String, Object> ent : status.blockTreeStats.entrySet()) {\n        infoStream.println(\"      field \\\"\" + ent.getKey() + \"\\\":\");\n        infoStream.println(\"      \" + ent.getValue().toString().replace(\"\\n\", \"\\n      \"));\n      }\n    }\n    \n    return status;\n  }\n\n","sourceOld":"  /**\n   * checks Fields api is consistent with itself.\n   * searcher is optional, to verify with queries. Can be null.\n   */\n  private static Status.TermIndexStatus checkFields(Fields fields, Bits liveDocs, int maxDoc, FieldInfos fieldInfos,\n      NormsProducer normsProducer, boolean doPrint, boolean isVectors, PrintStream infoStream, boolean verbose, boolean doSlowChecks) throws IOException {\n    // TODO: we should probably return our own stats thing...?!\n    long startNS;\n    if (doPrint) {\n      startNS = System.nanoTime();\n    } else {\n      startNS = 0;\n    }\n    \n    final Status.TermIndexStatus status = new Status.TermIndexStatus();\n    int computedFieldCount = 0;\n\n    PostingsEnum postings = null;\n    \n    String lastField = null;\n    for (String field : fields) {\n\n      // MultiFieldsEnum relies upon this order...\n      if (lastField != null && field.compareTo(lastField) <= 0) {\n        throw new RuntimeException(\"fields out of order: lastField=\" + lastField + \" field=\" + field);\n      }\n      lastField = field;\n      \n      // check that the field is in fieldinfos, and is indexed.\n      // TODO: add a separate test to check this for different reader impls\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      if (fieldInfo == null) {\n        throw new RuntimeException(\"fieldsEnum inconsistent with fieldInfos, no fieldInfos for: \" + field);\n      }\n      if (fieldInfo.getIndexOptions() == IndexOptions.NONE) {\n        throw new RuntimeException(\"fieldsEnum inconsistent with fieldInfos, isIndexed == false for: \" + field);\n      }\n      \n      // TODO: really the codec should not return a field\n      // from FieldsEnum if it has no Terms... but we do\n      // this today:\n      // assert fields.terms(field) != null;\n      computedFieldCount++;\n      \n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      \n      if (terms.getDocCount() > maxDoc) {\n        throw new RuntimeException(\"docCount > maxDoc for field: \" + field + \", docCount=\" + terms.getDocCount() + \", maxDoc=\" + maxDoc);\n      }\n      \n      final boolean hasFreqs = terms.hasFreqs();\n      final boolean hasPositions = terms.hasPositions();\n      final boolean hasPayloads = terms.hasPayloads();\n      final boolean hasOffsets = terms.hasOffsets();\n      \n      BytesRef maxTerm;\n      BytesRef minTerm;\n      if (isVectors) {\n        // Term vectors impls can be very slow for getMax\n        maxTerm = null;\n        minTerm = null;\n      } else {\n        BytesRef bb = terms.getMin();\n        if (bb != null) {\n          assert bb.isValid();\n          minTerm = BytesRef.deepCopyOf(bb);\n        } else {\n          minTerm = null;\n        }\n\n        bb = terms.getMax();\n        if (bb != null) {\n          assert bb.isValid();\n          maxTerm = BytesRef.deepCopyOf(bb);\n          if (minTerm == null) {\n            throw new RuntimeException(\"field \\\"\" + field + \"\\\" has null minTerm but non-null maxTerm\");\n          }\n        } else {\n          maxTerm = null;\n          if (minTerm != null) {\n            throw new RuntimeException(\"field \\\"\" + field + \"\\\" has non-null minTerm but null maxTerm\");\n          }\n        }\n      }\n\n      // term vectors cannot omit TF:\n      final boolean expectedHasFreqs = (isVectors || fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0);\n\n      if (hasFreqs != expectedHasFreqs) {\n        throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasFreqs=\" + expectedHasFreqs + \" but got \" + hasFreqs);\n      }\n\n      if (!isVectors) {\n        final boolean expectedHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        if (hasPositions != expectedHasPositions) {\n          throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasPositions=\" + expectedHasPositions + \" but got \" + hasPositions);\n        }\n\n        final boolean expectedHasPayloads = fieldInfo.hasPayloads();\n        if (hasPayloads != expectedHasPayloads) {\n          throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasPayloads=\" + expectedHasPayloads + \" but got \" + hasPayloads);\n        }\n\n        final boolean expectedHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        if (hasOffsets != expectedHasOffsets) {\n          throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasOffsets=\" + expectedHasOffsets + \" but got \" + hasOffsets);\n        }\n      }\n\n      final TermsEnum termsEnum = terms.iterator();\n\n      boolean hasOrd = true;\n      final long termCountStart = status.delTermCount + status.termCount;\n      \n      BytesRefBuilder lastTerm = null;\n      \n      long sumTotalTermFreq = 0;\n      long sumDocFreq = 0;\n      FixedBitSet visitedDocs = new FixedBitSet(maxDoc);\n      while(true) {\n        \n        final BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        // System.out.println(\"CI: field=\" + field + \" check term=\" + term + \" docFreq=\" + termsEnum.docFreq());\n        \n        assert term.isValid();\n        \n        // make sure terms arrive in order according to\n        // the comp\n        if (lastTerm == null) {\n          lastTerm = new BytesRefBuilder();\n          lastTerm.copyBytes(term);\n        } else {\n          if (lastTerm.get().compareTo(term) >= 0) {\n            throw new RuntimeException(\"terms out of order: lastTerm=\" + lastTerm.get() + \" term=\" + term);\n          }\n          lastTerm.copyBytes(term);\n        }\n\n        if (isVectors == false) {\n          if (minTerm == null) {\n            // We checked this above:\n            assert maxTerm == null;\n            throw new RuntimeException(\"field=\\\"\" + field + \"\\\": invalid term: term=\" + term + \", minTerm=\" + minTerm);\n          }\n        \n          if (term.compareTo(minTerm) < 0) {\n            throw new RuntimeException(\"field=\\\"\" + field + \"\\\": invalid term: term=\" + term + \", minTerm=\" + minTerm);\n          }\n        \n          if (term.compareTo(maxTerm) > 0) {\n            throw new RuntimeException(\"field=\\\"\" + field + \"\\\": invalid term: term=\" + term + \", maxTerm=\" + maxTerm);\n          }\n        }\n        \n        final int docFreq = termsEnum.docFreq();\n        if (docFreq <= 0) {\n          throw new RuntimeException(\"docfreq: \" + docFreq + \" is out of bounds\");\n        }\n        sumDocFreq += docFreq;\n\n        postings = termsEnum.postings(postings, PostingsEnum.ALL);\n\n        if (hasFreqs == false) {\n          if (termsEnum.totalTermFreq() != termsEnum.docFreq()) {\n            throw new RuntimeException(\"field \\\"\" + field + \"\\\" hasFreqs is false, but TermsEnum.totalTermFreq()=\" + termsEnum.totalTermFreq() + \" (should be \" + termsEnum.docFreq() + \")\");\n          }\n        }\n        \n        if (hasOrd) {\n          long ord = -1;\n          try {\n            ord = termsEnum.ord();\n          } catch (UnsupportedOperationException uoe) {\n            hasOrd = false;\n          }\n          \n          if (hasOrd) {\n            final long ordExpected = status.delTermCount + status.termCount - termCountStart;\n            if (ord != ordExpected) {\n              throw new RuntimeException(\"ord mismatch: TermsEnum has ord=\" + ord + \" vs actual=\" + ordExpected);\n            }\n          }\n        }\n        \n        int lastDoc = -1;\n        int docCount = 0;\n        boolean hasNonDeletedDocs = false;\n        long totalTermFreq = 0;\n        while(true) {\n          final int doc = postings.nextDoc();\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          visitedDocs.set(doc);\n          int freq = postings.freq();\n          if (freq <= 0) {\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": freq \" + freq + \" is out of bounds\");\n          }\n          if (hasFreqs == false) {\n            // When a field didn't index freq, it must\n            // consistently \"lie\" and pretend that freq was\n            // 1:\n            if (postings.freq() != 1) {\n              throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": freq \" + freq + \" != 1 when Terms.hasFreqs() is false\");\n            }\n          }\n          totalTermFreq += freq;\n\n          if (liveDocs == null || liveDocs.get(doc)) {\n            hasNonDeletedDocs = true;\n            status.totFreq++;\n            if (freq >= 0) {\n              status.totPos += freq;\n            }\n          }\n          docCount++;\n          \n          if (doc <= lastDoc) {\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" <= lastDoc \" + lastDoc);\n          }\n          if (doc >= maxDoc) {\n            throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" >= maxDoc \" + maxDoc);\n          }\n          \n          lastDoc = doc;\n          \n          int lastPos = -1;\n          int lastOffset = 0;\n          if (hasPositions) {\n            for(int j=0;j<freq;j++) {\n              final int pos = postings.nextPosition();\n\n              if (pos < 0) {\n                throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" is out of bounds\");\n              }\n              if (pos > IndexWriter.MAX_POSITION) {\n                throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" > IndexWriter.MAX_POSITION=\" + IndexWriter.MAX_POSITION);\n              }\n              if (pos < lastPos) {\n                throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" < lastPos \" + lastPos);\n              }\n              lastPos = pos;\n              BytesRef payload = postings.getPayload();\n              if (payload != null) {\n                assert payload.isValid();\n              }\n              if (payload != null && payload.length < 1) {\n                throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \" payload length is out of bounds \" + payload.length);\n              }\n              if (hasOffsets) {\n                int startOffset = postings.startOffset();\n                int endOffset = postings.endOffset();\n                if (startOffset < 0) {\n                  throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \": startOffset \" + startOffset + \" is out of bounds\");\n                }\n                if (startOffset < lastOffset) {\n                  throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \": startOffset \" + startOffset + \" < lastStartOffset \" + lastOffset + \"; consider using the FixBrokenOffsets tool in Lucene's backward-codecs module to correct your index\");\n                }\n                if (endOffset < 0) {\n                  throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \": endOffset \" + endOffset + \" is out of bounds\");\n                }\n                if (endOffset < startOffset) {\n                  throw new RuntimeException(\"term \" + term + \": doc \" + doc + \": pos \" + pos + \": endOffset \" + endOffset + \" < startOffset \" + startOffset);\n                }\n                lastOffset = startOffset;\n              }\n            }\n          }\n        }\n        \n        if (hasNonDeletedDocs) {\n          status.termCount++;\n        } else {\n          status.delTermCount++;\n        }\n        \n        final long totalTermFreq2 = termsEnum.totalTermFreq();\n        \n        if (docCount != docFreq) {\n          throw new RuntimeException(\"term \" + term + \" docFreq=\" + docFreq + \" != tot docs w/o deletions \" + docCount);\n        }\n        if (docFreq > terms.getDocCount()) {\n          throw new RuntimeException(\"term \" + term + \" docFreq=\" + docFreq + \" > docCount=\" + terms.getDocCount());\n        }\n        if (totalTermFreq2 <= 0) {\n          throw new RuntimeException(\"totalTermFreq: \" + totalTermFreq2 + \" is out of bounds\");\n        }\n        sumTotalTermFreq += totalTermFreq;\n        if (totalTermFreq != totalTermFreq2) {\n          throw new RuntimeException(\"term \" + term + \" totalTermFreq=\" + totalTermFreq2 + \" != recomputed totalTermFreq=\" + totalTermFreq);\n        }\n        if (totalTermFreq2 < docFreq) {\n          throw new RuntimeException(\"totalTermFreq: \" + totalTermFreq2 + \" is out of bounds, docFreq=\" + docFreq);\n        }\n        if (hasFreqs == false && totalTermFreq != docFreq) {\n          throw new RuntimeException(\"term \" + term + \" totalTermFreq=\" + totalTermFreq + \" !=  docFreq=\" + docFreq);\n        }\n        \n        // Test skipping\n        if (hasPositions) {\n          for(int idx=0;idx<7;idx++) {\n            final int skipDocID = (int) (((idx+1)*(long) maxDoc)/8);\n            postings = termsEnum.postings(postings, PostingsEnum.ALL);\n            final int docID = postings.advance(skipDocID);\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            } else {\n              if (docID < skipDocID) {\n                throw new RuntimeException(\"term \" + term + \": advance(docID=\" + skipDocID + \") returned docID=\" + docID);\n              }\n              final int freq = postings.freq();\n              if (freq <= 0) {\n                throw new RuntimeException(\"termFreq \" + freq + \" is out of bounds\");\n              }\n              int lastPosition = -1;\n              int lastOffset = 0;\n              for(int posUpto=0;posUpto<freq;posUpto++) {\n                final int pos = postings.nextPosition();\n\n                if (pos < 0) {\n                  throw new RuntimeException(\"position \" + pos + \" is out of bounds\");\n                }\n                if (pos < lastPosition) {\n                  throw new RuntimeException(\"position \" + pos + \" is < lastPosition \" + lastPosition);\n                }\n                lastPosition = pos;\n                if (hasOffsets) {\n                  int startOffset = postings.startOffset();\n                  int endOffset = postings.endOffset();\n                  // NOTE: we cannot enforce any bounds whatsoever on vectors... they were a free-for-all before?\n                  // but for offsets in the postings lists these checks are fine: they were always enforced by IndexWriter\n                  if (!isVectors) {\n                    if (startOffset < 0) {\n                      throw new RuntimeException(\"term \" + term + \": doc \" + docID + \": pos \" + pos + \": startOffset \" + startOffset + \" is out of bounds\");\n                    }\n                    if (startOffset < lastOffset) {\n                      throw new RuntimeException(\"term \" + term + \": doc \" + docID + \": pos \" + pos + \": startOffset \" + startOffset + \" < lastStartOffset \" + lastOffset);\n                    }\n                    if (endOffset < 0) {\n                      throw new RuntimeException(\"term \" + term + \": doc \" + docID + \": pos \" + pos + \": endOffset \" + endOffset + \" is out of bounds\");\n                    }\n                    if (endOffset < startOffset) {\n                      throw new RuntimeException(\"term \" + term + \": doc \" + docID + \": pos \" + pos + \": endOffset \" + endOffset + \" < startOffset \" + startOffset);\n                    }\n                  }\n                  lastOffset = startOffset;\n                }\n              } \n              \n              final int nextDocID = postings.nextDoc();\n              if (nextDocID == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n              if (nextDocID <= docID) {\n                throw new RuntimeException(\"term \" + term + \": advance(docID=\" + skipDocID + \"), then .next() returned docID=\" + nextDocID + \" vs prev docID=\" + docID);\n              }\n            }\n\n            if (isVectors) {\n              // Only 1 doc in the postings for term vectors, so we only test 1 advance:\n              break;\n            }\n          }\n        } else {\n          for(int idx=0;idx<7;idx++) {\n            final int skipDocID = (int) (((idx+1)*(long) maxDoc)/8);\n            postings = termsEnum.postings(postings, PostingsEnum.NONE);\n            final int docID = postings.advance(skipDocID);\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            } else {\n              if (docID < skipDocID) {\n                throw new RuntimeException(\"term \" + term + \": advance(docID=\" + skipDocID + \") returned docID=\" + docID);\n              }\n              final int nextDocID = postings.nextDoc();\n              if (nextDocID == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n              if (nextDocID <= docID) {\n                throw new RuntimeException(\"term \" + term + \": advance(docID=\" + skipDocID + \"), then .next() returned docID=\" + nextDocID + \" vs prev docID=\" + docID);\n              }\n            }\n            if (isVectors) {\n              // Only 1 doc in the postings for term vectors, so we only test 1 advance:\n              break;\n            }\n          }\n        }\n\n        // Checking score blocks is heavy, we only do it on long postings lists, on every 1024th term\n        // or if slow checks are enabled.\n        if (doSlowChecks || docFreq > 1024 || (status.termCount + status.delTermCount) % 1024 == 0) {\n          // First check max scores and block uptos\n          // But only if slok checks are enabled since we visit all docs\n          if (doSlowChecks) {\n            int max = -1;\n            int maxFreq = 0;\n            ImpactsEnum impactsEnum = termsEnum.impacts(PostingsEnum.FREQS);\n            postings = termsEnum.postings(postings, PostingsEnum.FREQS);\n            for (int doc = impactsEnum.nextDoc(); ; doc = impactsEnum.nextDoc()) {\n              if (postings.nextDoc() != doc) {\n                throw new RuntimeException(\"Wrong next doc: \" + doc + \", expected \" + postings.docID());\n              }\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n              if (postings.freq() != impactsEnum.freq()) {\n                throw new RuntimeException(\"Wrong freq, expected \" + postings.freq() + \", but got \" + impactsEnum.freq());\n              }\n              if (doc > max) {\n                impactsEnum.advanceShallow(doc);\n                Impacts impacts = impactsEnum.getImpacts();\n                checkImpacts(impacts, doc);\n                max = impacts.getDocIdUpTo(0);\n                List<Impact> impacts0 = impacts.getImpacts(0);\n                maxFreq = impacts0.get(impacts0.size() - 1).freq;\n              }\n              if (impactsEnum.freq() > maxFreq) {\n                throw new RuntimeException(\"freq \" + impactsEnum.freq() + \" is greater than the max freq according to impacts \" + maxFreq);\n              }\n            }\n          }\n\n          // Now check advancing\n          ImpactsEnum impactsEnum = termsEnum.impacts(PostingsEnum.FREQS);\n          postings = termsEnum.postings(postings, PostingsEnum.FREQS);\n\n          int max = -1;\n          int maxFreq = 0;\n          while (true) {\n            int doc = impactsEnum.docID();\n            boolean advance;\n            int target;\n            if (((field.hashCode() + doc) & 1) == 1) {\n              advance = false;\n              target = doc + 1;\n            } else {\n              advance = true;\n              int delta = Math.min(1 + ((31 * field.hashCode() + doc) & 0x1ff), DocIdSetIterator.NO_MORE_DOCS - doc);\n              target = impactsEnum.docID() + delta;\n            }\n\n            if (target > max && target % 2 == 1) {\n              int delta = Math.min((31 * field.hashCode() + target) & 0x1ff, DocIdSetIterator.NO_MORE_DOCS - target);\n              max = target + delta;\n              impactsEnum.advanceShallow(target);\n              Impacts impacts = impactsEnum.getImpacts();\n              checkImpacts(impacts, doc);\n              maxFreq = Integer.MAX_VALUE;\n              for (int level = 0; level < impacts.numLevels(); ++level) {\n                if (impacts.getDocIdUpTo(level) >= max) {\n                  List<Impact> perLevelImpacts = impacts.getImpacts(level);\n                  maxFreq = perLevelImpacts.get(perLevelImpacts.size() - 1).freq;\n                  break;\n                }\n              }\n            }\n\n            if (advance) {\n              doc = impactsEnum.advance(target);\n            } else {\n              doc = impactsEnum.nextDoc();\n            }\n\n            if (postings.advance(target) != doc) {\n              throw new RuntimeException(\"Impacts do not advance to the same document as postings for target \" + target + \", postings: \" + postings.docID() + \", impacts: \" + doc);\n            }\n            if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            if (postings.freq() != impactsEnum.freq()) {\n              throw new RuntimeException(\"Wrong freq, expected \" + postings.freq() + \", but got \" + impactsEnum.freq());\n            }\n  \n            if (doc >= max) {\n              int delta = Math.min((31 * field.hashCode() + target & 0x1ff), DocIdSetIterator.NO_MORE_DOCS - doc);\n              max = doc + delta;\n              impactsEnum.advanceShallow(doc);\n              Impacts impacts = impactsEnum.getImpacts();\n              checkImpacts(impacts, doc);\n              maxFreq = Integer.MAX_VALUE;\n              for (int level = 0; level < impacts.numLevels(); ++level) {\n                if (impacts.getDocIdUpTo(level) >= max) {\n                  List<Impact> perLevelImpacts = impacts.getImpacts(level);\n                  maxFreq = perLevelImpacts.get(perLevelImpacts.size() - 1).freq;\n                  break;\n                }\n              }\n            }\n\n            if (impactsEnum.freq() > maxFreq) {\n              throw new RuntimeException(\"Term frequency \" + impactsEnum.freq() + \" is greater than the max freq according to impacts \" + maxFreq);\n            }\n          }\n        }\n      }\n\n      if (minTerm != null && status.termCount + status.delTermCount == 0) {\n        throw new RuntimeException(\"field=\\\"\" + field + \"\\\": minTerm is non-null yet we saw no terms: \" + minTerm);\n      }\n\n      final Terms fieldTerms = fields.terms(field);\n      if (fieldTerms == null) {\n        // Unusual: the FieldsEnum returned a field but\n        // the Terms for that field is null; this should\n        // only happen if it's a ghost field (field with\n        // no terms, eg there used to be terms but all\n        // docs got deleted and then merged away):\n        \n      } else {\n\n        long fieldTermCount = (status.delTermCount+status.termCount)-termCountStart;\n\n        final Object stats = fieldTerms.getStats();\n        assert stats != null;\n        if (status.blockTreeStats == null) {\n          status.blockTreeStats = new HashMap<>();\n        }\n        status.blockTreeStats.put(field, stats);\n\n        final long actualSumDocFreq = fields.terms(field).getSumDocFreq();\n        if (sumDocFreq != actualSumDocFreq) {\n          throw new RuntimeException(\"sumDocFreq for field \" + field + \"=\" + actualSumDocFreq + \" != recomputed sumDocFreq=\" + sumDocFreq);\n        }\n\n        final long actualSumTotalTermFreq = fields.terms(field).getSumTotalTermFreq();\n        if (sumTotalTermFreq != actualSumTotalTermFreq) {\n          throw new RuntimeException(\"sumTotalTermFreq for field \" + field + \"=\" + actualSumTotalTermFreq + \" != recomputed sumTotalTermFreq=\" + sumTotalTermFreq);\n        } \n        \n        if (hasFreqs == false && sumTotalTermFreq != sumDocFreq) {\n          throw new RuntimeException(\"sumTotalTermFreq for field \" + field + \" should be \" + sumDocFreq + \", got sumTotalTermFreq=\" + sumTotalTermFreq);\n        }\n        \n        final int v = fieldTerms.getDocCount();\n        if (visitedDocs.cardinality() != v) {\n          throw new RuntimeException(\"docCount for field \" + field + \"=\" + v + \" != recomputed docCount=\" + visitedDocs.cardinality());\n        }\n\n        if (fieldInfo.hasNorms() && isVectors == false) {\n          final NumericDocValues norms = normsProducer.getNorms(fieldInfo);\n          // Cross-check terms with norms\n          for (int doc = norms.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = norms.nextDoc()) {\n            if (liveDocs != null && liveDocs.get(doc) == false) {\n              // Norms may only be out of sync with terms on deleted documents.\n              // This happens when a document fails indexing and in that case it\n              // should be immediately marked as deleted by the IndexWriter.\n              continue;\n            }\n            final long norm = norms.longValue();\n            if (norm != 0 && visitedDocs.get(doc) == false) {\n              throw new RuntimeException(\"Document \" + doc + \" doesn't have terms according to postings but has a norm value that is not zero: \" + norm);\n            } else if (norm == 0 && visitedDocs.get(doc)) {\n              throw new RuntimeException(\"Document \" + doc + \" has terms according to postings but its norm value is 0, which may only be used on documents that have no terms\");\n            }\n          }\n        }\n\n        // Test seek to last term:\n        if (lastTerm != null) {\n          if (termsEnum.seekCeil(lastTerm.get()) != TermsEnum.SeekStatus.FOUND) { \n            throw new RuntimeException(\"seek to last term \" + lastTerm.get() + \" failed\");\n          }\n          if (termsEnum.term().equals(lastTerm.get()) == false) {\n            throw new RuntimeException(\"seek to last term \" + lastTerm.get() + \" returned FOUND but seeked to the wrong term \" + termsEnum.term());\n          }\n          \n          int expectedDocFreq = termsEnum.docFreq();\n          PostingsEnum d = termsEnum.postings(null, PostingsEnum.NONE);\n          int docFreq = 0;\n          while (d.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            docFreq++;\n          }\n          if (docFreq != expectedDocFreq) {\n            throw new RuntimeException(\"docFreq for last term \" + lastTerm.get() + \"=\" + expectedDocFreq + \" != recomputed docFreq=\" + docFreq);\n          }\n        }\n        \n        // check unique term count\n        long termCount = -1;\n        \n        if (fieldTermCount > 0) {\n          termCount = fields.terms(field).size();\n          \n          if (termCount != -1 && termCount != fieldTermCount) {\n            throw new RuntimeException(\"termCount mismatch \" + termCount + \" vs \" + fieldTermCount);\n          }\n        }\n\n        // Test seeking by ord\n        if (hasOrd && status.termCount-termCountStart > 0) {\n          int seekCount = (int) Math.min(10000L, termCount);\n          if (seekCount > 0) {\n            BytesRef[] seekTerms = new BytesRef[seekCount];\n            \n            // Seek by ord\n            for(int i=seekCount-1;i>=0;i--) {\n              long ord = i*(termCount/seekCount);\n              termsEnum.seekExact(ord);\n              long actualOrd = termsEnum.ord();\n              if (actualOrd != ord) {\n                throw new RuntimeException(\"seek to ord \" + ord + \" returned ord \" + actualOrd);\n              }\n              seekTerms[i] = BytesRef.deepCopyOf(termsEnum.term());\n            }\n            \n            // Seek by term\n            for(int i=seekCount-1;i>=0;i--) {\n              if (termsEnum.seekCeil(seekTerms[i]) != TermsEnum.SeekStatus.FOUND) {\n                throw new RuntimeException(\"seek to existing term \" + seekTerms[i] + \" failed\");\n              }\n              if (termsEnum.term().equals(seekTerms[i]) == false) {\n                throw new RuntimeException(\"seek to existing term \" + seekTerms[i] + \" returned FOUND but seeked to the wrong term \" + termsEnum.term());\n              }\n              \n              postings = termsEnum.postings(postings, PostingsEnum.NONE);\n              if (postings == null) {\n                throw new RuntimeException(\"null DocsEnum from to existing term \" + seekTerms[i]);\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    int fieldCount = fields.size();\n    \n    if (fieldCount != -1) {\n      if (fieldCount < 0) {\n        throw new RuntimeException(\"invalid fieldCount: \" + fieldCount);\n      }\n      if (fieldCount != computedFieldCount) {\n        throw new RuntimeException(\"fieldCount mismatch \" + fieldCount + \" vs recomputed field count \" + computedFieldCount);\n      }\n    }\n\n    if (doPrint) {\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d terms; %d terms/docs pairs; %d tokens] [took %.3f sec]\",\n                                    status.termCount, status.totFreq, status.totPos, nsToSec(System.nanoTime()-startNS)));\n    }\n    \n    if (verbose && status.blockTreeStats != null && infoStream != null && status.termCount > 0) {\n      for(Map.Entry<String, Object> ent : status.blockTreeStats.entrySet()) {\n        infoStream.println(\"      field \\\"\" + ent.getKey() + \"\\\":\");\n        infoStream.println(\"      \" + ent.getValue().toString().replace(\"\\n\", \"\\n      \"));\n      }\n    }\n    \n    return status;\n  }\n\n","bugFix":["071935ce120b55517dcd86b9f985dbda028ba94e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fee11a7d103096c7a11d1504c3edf5a943630816":["dd96a930cc08d72beee719cc11ce465b9d9861c3"],"dd96a930cc08d72beee719cc11ce465b9d9861c3":["071935ce120b55517dcd86b9f985dbda028ba94e"],"071935ce120b55517dcd86b9f985dbda028ba94e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fee11a7d103096c7a11d1504c3edf5a943630816"]},"commit2Childs":{"fee11a7d103096c7a11d1504c3edf5a943630816":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd96a930cc08d72beee719cc11ce465b9d9861c3":["fee11a7d103096c7a11d1504c3edf5a943630816"],"071935ce120b55517dcd86b9f985dbda028ba94e":["dd96a930cc08d72beee719cc11ce465b9d9861c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["071935ce120b55517dcd86b9f985dbda028ba94e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}