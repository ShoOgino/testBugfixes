{"path":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","pathOld":"/dev/null","sourceNew":"  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = (DocList) rsp.getValues().get(\"response\");\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","sourceNew":null,"sourceOld":"  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = (DocList) rsp.getValues().get(\"response\");\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","sourceNew":"  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = (DocList) rsp.getValues().get(\"response\");\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n  }\n\n","sourceOld":"  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = (DocList) rsp.getValues().get(\"response\");\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","pathOld":"/dev/null","sourceNew":"  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = (DocList) rsp.getValues().get(\"response\");\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"398bfcb539107b92d9af0013294b442326b314a6","date":1269035614,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","sourceNew":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = (DocList) rsp.getValues().get(\"response\");\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n  }\n\n","sourceOld":"  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = (DocList) rsp.getValues().get(\"response\");\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"209f4dce80607194530cf4db90de9a5cfe897f59","date":1287104974,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","sourceNew":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = (DocList) rsp.getValues().get(\"response\");\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = (DocList) rsp.getValues().get(\"response\");\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","sourceNew":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = (DocList) rsp.getValues().get(\"response\");\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = (DocList) rsp.getValues().get(\"response\");\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","sourceNew":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = (DocList) rsp.getValues().get(\"response\");\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = (DocList) rsp.getValues().get(\"response\");\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","sourceNew":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = (DocList) rsp.getValues().get(\"response\");\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","sourceNew":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = (DocList) rsp.getValues().get(\"response\");\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","sourceNew":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = (DocList) rsp.getValues().get(\"response\");\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab0e9f7ce724e6aea1fea746dded19e76d231cf8","date":1304774078,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","sourceNew":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy, only works for Non-Numeric fields currently (if you change schema behind test, this may fail)\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":["39899cd24f88f2d580857d57be8aebc1f467f5c6","39899cd24f88f2d580857d57be8aebc1f467f5c6","39899cd24f88f2d580857d57be8aebc1f467f5c6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","sourceNew":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy, only works for Non-Numeric fields currently (if you change schema behind test, this may fail)\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","sourceNew":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy, only works for Non-Numeric fields currently (if you change schema behind test, this may fail)\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","sourceNew":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy, only works for Non-Numeric fields currently (if you change schema behind test, this may fail)\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy, only works for Non-Numeric fields currently (if you change schema behind test, this may fail)\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","sourceNew":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy, only works for Non-Numeric fields currently (if you change schema behind test, this may fail)\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy, only works for Non-Numeric fields currently (if you change schema behind test, this may fail)\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","sourceNew":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy, only works for Non-Numeric fields currently (if you change schema behind test, this may fail)\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy, only works for Non-Numeric fields currently (if you change schema behind test, this may fail)\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"209f4dce80607194530cf4db90de9a5cfe897f59":["398bfcb539107b92d9af0013294b442326b314a6"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab0e9f7ce724e6aea1fea746dded19e76d231cf8":["6aedf81f068e430dec27d94310415cc6ff52731c"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"398bfcb539107b92d9af0013294b442326b314a6":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["398bfcb539107b92d9af0013294b442326b314a6","209f4dce80607194530cf4db90de9a5cfe897f59"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","6aedf81f068e430dec27d94310415cc6ff52731c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","6aedf81f068e430dec27d94310415cc6ff52731c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["6aedf81f068e430dec27d94310415cc6ff52731c","ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["d619839baa8ce5503e496b94a9e42ad6f079293f","ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["398bfcb539107b92d9af0013294b442326b314a6","209f4dce80607194530cf4db90de9a5cfe897f59"],"6aedf81f068e430dec27d94310415cc6ff52731c":["209f4dce80607194530cf4db90de9a5cfe897f59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"209f4dce80607194530cf4db90de9a5cfe897f59":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","6aedf81f068e430dec27d94310415cc6ff52731c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"ab0e9f7ce724e6aea1fea746dded19e76d231cf8":["c26f00b574427b55127e869b935845554afde1fa","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"398bfcb539107b92d9af0013294b442326b314a6":["209f4dce80607194530cf4db90de9a5cfe897f59","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"1da8d55113b689b06716246649de6f62430f15c0":["398bfcb539107b92d9af0013294b442326b314a6"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"6aedf81f068e430dec27d94310415cc6ff52731c":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}