{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#pauseCnxn(long).mjava","commits":[{"id":"a05887fc144c1e694781b42187949be4cd6e5347","date":1348158734,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#pauseCnxn(long).mjava","pathOld":"solr/solrj/src/java/org/apache/zookeeper/SolrZooKeeper#pauseCnxn(long).mjava","sourceNew":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    Thread t = new Thread() {\n      public void run() {\n        try {\n          synchronized (cnxn) {\n            try {\n              // nocommit: reflect me, move me somewehre else as static method,\n              // something. i am only used by tests! the rest of this file is clean.\n              ((SocketChannel) cnxn.sendThread.sockKey.channel()).socket()\n                  .close();\n            } catch (Exception e) {\n            }\n            Thread.sleep(ms);\n          }\n\n          // Wait a long while to make sure we properly clean up these threads.\n          Thread.sleep(500000);\n        } catch (InterruptedException e) {}\n      }\n    };\n    t.start();\n    spawnedThreads.add(t);\n  }\n\n","sourceOld":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    Thread t = new Thread() {\n      public void run() {\n        try {\n          synchronized (cnxn) {\n            try {\n              ((SocketChannel) cnxn.sendThread.sockKey.channel()).socket()\n                  .close();\n            } catch (Exception e) {\n            }\n            Thread.sleep(ms);\n          }\n\n          // Wait a long while to make sure we properly clean up these threads.\n          Thread.sleep(500000);\n        } catch (InterruptedException e) {}\n      }\n    };\n    t.start();\n    spawnedThreads.add(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52695347f1696bdd6f5f1d0c69179bc6a70f5cc","date":1348162279,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#pauseCnxn(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#pauseCnxn(long).mjava","sourceNew":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    Thread t = new Thread() {\n      public void run() {\n        try {\n          synchronized (cnxn) {\n            try {\n              getSendThreadChannel().close();\n            } catch (Exception e) {\n              throw new RuntimeException(\"Closing zookeper send channel failed.\", e);\n            }\n            Thread.sleep(ms);\n          }\n        } catch (InterruptedException e) {}\n      }\n    };\n    t.start();\n    spawnedThreads.add(t);\n  }\n\n","sourceOld":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    Thread t = new Thread() {\n      public void run() {\n        try {\n          synchronized (cnxn) {\n            try {\n              // nocommit: reflect me, move me somewehre else as static method,\n              // something. i am only used by tests! the rest of this file is clean.\n              ((SocketChannel) cnxn.sendThread.sockKey.channel()).socket()\n                  .close();\n            } catch (Exception e) {\n            }\n            Thread.sleep(ms);\n          }\n\n          // Wait a long while to make sure we properly clean up these threads.\n          Thread.sleep(500000);\n        } catch (InterruptedException e) {}\n      }\n    };\n    t.start();\n    spawnedThreads.add(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df38d1e5208cab704e643f34edca9fb2003b7d7a","date":1348162346,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#pauseCnxn(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#pauseCnxn(long).mjava","sourceNew":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    Thread t = new Thread() {\n      public void run() {\n        try {\n          synchronized (cnxn) {\n            try {\n              getSendThreadChannel().close();\n            } catch (Exception e) {\n              throw new RuntimeException(\"Closing Zookeeper send channel failed.\", e);\n            }\n            Thread.sleep(ms);\n          }\n        } catch (InterruptedException e) {}\n      }\n    };\n    t.start();\n    spawnedThreads.add(t);\n  }\n\n","sourceOld":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    Thread t = new Thread() {\n      public void run() {\n        try {\n          synchronized (cnxn) {\n            try {\n              getSendThreadChannel().close();\n            } catch (Exception e) {\n              throw new RuntimeException(\"Closing zookeper send channel failed.\", e);\n            }\n            Thread.sleep(ms);\n          }\n        } catch (InterruptedException e) {}\n      }\n    };\n    t.start();\n    spawnedThreads.add(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64ef9ca83263a38a120387f811d9425779cf5b0c","date":1348163081,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#pauseCnxn(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#pauseCnxn(long).mjava","sourceNew":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    final Thread t = new Thread() {\n      public void run() {\n        try {\n          synchronized (cnxn) {\n            try {\n              getSendThreadChannel().close();\n            } catch (Exception e) {\n              throw new RuntimeException(\"Closing Zookeeper send channel failed.\", e);\n            }\n            Thread.sleep(ms);\n          }\n        } catch (InterruptedException e) {\n          // ignore\n        } finally {\n          spawnedThreads.remove(this);\n        }\n      }\n    };\n    spawnedThreads.add(t);\n    t.start();\n  }\n\n","sourceOld":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    Thread t = new Thread() {\n      public void run() {\n        try {\n          synchronized (cnxn) {\n            try {\n              getSendThreadChannel().close();\n            } catch (Exception e) {\n              throw new RuntimeException(\"Closing Zookeeper send channel failed.\", e);\n            }\n            Thread.sleep(ms);\n          }\n        } catch (InterruptedException e) {}\n      }\n    };\n    t.start();\n    spawnedThreads.add(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bca360503fe2bcb991e66a954e744b5ce12f189","date":1348164808,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#pauseCnxn(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#pauseCnxn(long).mjava","sourceNew":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    final Thread t = new Thread() {\n      public void run() {\n        try {\n          final ClientCnxn cnxn = getConnection();\n          synchronized (cnxn) {\n            try {\n              final Field sendThreadFld = cnxn.getClass().getDeclaredField(\"sendThread\");\n              sendThreadFld.setAccessible(true);\n              Object sendThread = sendThreadFld.get(cnxn);\n              if (sendThread != null) {\n                final Field sockKeyFld = sendThread.getClass().getDeclaredField(\"sockKey\");\n                sockKeyFld.setAccessible(true);\n                final SelectionKey sockKey = (SelectionKey) sockKeyFld.get(sendThread);\n                if (sockKey != null) {\n                  sockKey.channel().close();\n                }\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(\"Closing Zookeeper send channel failed.\", e);\n            }\n            Thread.sleep(ms);\n          }\n        } catch (InterruptedException e) {\n          // ignore\n        } finally {\n          spawnedThreads.remove(this);\n        }\n      }\n    };\n    spawnedThreads.add(t);\n    t.start();\n  }\n\n","sourceOld":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    final Thread t = new Thread() {\n      public void run() {\n        try {\n          synchronized (cnxn) {\n            try {\n              getSendThreadChannel().close();\n            } catch (Exception e) {\n              throw new RuntimeException(\"Closing Zookeeper send channel failed.\", e);\n            }\n            Thread.sleep(ms);\n          }\n        } catch (InterruptedException e) {\n          // ignore\n        } finally {\n          spawnedThreads.remove(this);\n        }\n      }\n    };\n    spawnedThreads.add(t);\n    t.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2b646be8c735de0184f7ba665b25204ad7091c2","date":1348184278,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#pauseCnxn(long).mjava","pathOld":"solr/solrj/src/java/org/apache/zookeeper/SolrZooKeeper#pauseCnxn(long).mjava","sourceNew":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    final Thread t = new Thread() {\n      public void run() {\n        try {\n          final ClientCnxn cnxn = getConnection();\n          synchronized (cnxn) {\n            try {\n              final Field sendThreadFld = cnxn.getClass().getDeclaredField(\"sendThread\");\n              sendThreadFld.setAccessible(true);\n              Object sendThread = sendThreadFld.get(cnxn);\n              if (sendThread != null) {\n                final Field sockKeyFld = sendThread.getClass().getDeclaredField(\"sockKey\");\n                sockKeyFld.setAccessible(true);\n                final SelectionKey sockKey = (SelectionKey) sockKeyFld.get(sendThread);\n                if (sockKey != null) {\n                  sockKey.channel().close();\n                }\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(\"Closing Zookeeper send channel failed.\", e);\n            }\n            Thread.sleep(ms);\n          }\n        } catch (InterruptedException e) {\n          // ignore\n        } finally {\n          spawnedThreads.remove(this);\n        }\n      }\n    };\n    spawnedThreads.add(t);\n    t.start();\n  }\n\n","sourceOld":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    Thread t = new Thread() {\n      public void run() {\n        try {\n          synchronized (cnxn) {\n            try {\n              ((SocketChannel) cnxn.sendThread.sockKey.channel()).socket()\n                  .close();\n            } catch (Exception e) {\n            }\n            Thread.sleep(ms);\n          }\n\n          // Wait a long while to make sure we properly clean up these threads.\n          Thread.sleep(500000);\n        } catch (InterruptedException e) {}\n      }\n    };\n    t.start();\n    spawnedThreads.add(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c05c6a4f999960536d6b23302feffb8a50227466","date":1353382574,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#pauseCnxn(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#pauseCnxn(long).mjava","sourceNew":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    final Thread t = new Thread() {\n      public void run() {\n        try {\n          final ClientCnxn cnxn = getConnection();\n          synchronized (cnxn) {\n            try {\n              final Field sendThreadFld = cnxn.getClass().getDeclaredField(\"sendThread\");\n              sendThreadFld.setAccessible(true);\n              Object sendThread = sendThreadFld.get(cnxn);\n              if (sendThread != null) {\n                Method method = sendThread.getClass().getDeclaredMethod(\"testableCloseSocket\");\n                method.setAccessible(true);\n                try {\n                  method.invoke(sendThread);\n                } catch (InvocationTargetException e) {\n                  // is fine\n                }\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(\"Closing Zookeeper send channel failed.\", e);\n            }\n            Thread.sleep(ms);\n          }\n        } catch (InterruptedException e) {\n          // ignore\n        } finally {\n          spawnedThreads.remove(this);\n        }\n      }\n    };\n    spawnedThreads.add(t);\n    t.start();\n  }\n\n","sourceOld":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    final Thread t = new Thread() {\n      public void run() {\n        try {\n          final ClientCnxn cnxn = getConnection();\n          synchronized (cnxn) {\n            try {\n              final Field sendThreadFld = cnxn.getClass().getDeclaredField(\"sendThread\");\n              sendThreadFld.setAccessible(true);\n              Object sendThread = sendThreadFld.get(cnxn);\n              if (sendThread != null) {\n                final Field sockKeyFld = sendThread.getClass().getDeclaredField(\"sockKey\");\n                sockKeyFld.setAccessible(true);\n                final SelectionKey sockKey = (SelectionKey) sockKeyFld.get(sendThread);\n                if (sockKey != null) {\n                  sockKey.channel().close();\n                }\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(\"Closing Zookeeper send channel failed.\", e);\n            }\n            Thread.sleep(ms);\n          }\n        } catch (InterruptedException e) {\n          // ignore\n        } finally {\n          spawnedThreads.remove(this);\n        }\n      }\n    };\n    spawnedThreads.add(t);\n    t.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#pauseCnxn(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#pauseCnxn(long).mjava","sourceNew":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    final Thread t = new Thread() {\n      public void run() {\n        try {\n          final ClientCnxn cnxn = getConnection();\n          synchronized (cnxn) {\n            try {\n              final Field sendThreadFld = cnxn.getClass().getDeclaredField(\"sendThread\");\n              sendThreadFld.setAccessible(true);\n              Object sendThread = sendThreadFld.get(cnxn);\n              if (sendThread != null) {\n                Method method = sendThread.getClass().getDeclaredMethod(\"testableCloseSocket\");\n                method.setAccessible(true);\n                try {\n                  method.invoke(sendThread);\n                } catch (InvocationTargetException e) {\n                  // is fine\n                }\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(\"Closing Zookeeper send channel failed.\", e);\n            }\n            Thread.sleep(ms);\n          }\n        } catch (InterruptedException e) {\n          // ignore\n        } finally {\n          spawnedThreads.remove(this);\n        }\n      }\n    };\n    spawnedThreads.add(t);\n    t.start();\n  }\n\n","sourceOld":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    final Thread t = new Thread() {\n      public void run() {\n        try {\n          final ClientCnxn cnxn = getConnection();\n          synchronized (cnxn) {\n            try {\n              final Field sendThreadFld = cnxn.getClass().getDeclaredField(\"sendThread\");\n              sendThreadFld.setAccessible(true);\n              Object sendThread = sendThreadFld.get(cnxn);\n              if (sendThread != null) {\n                final Field sockKeyFld = sendThread.getClass().getDeclaredField(\"sockKey\");\n                sockKeyFld.setAccessible(true);\n                final SelectionKey sockKey = (SelectionKey) sockKeyFld.get(sendThread);\n                if (sockKey != null) {\n                  sockKey.channel().close();\n                }\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(\"Closing Zookeeper send channel failed.\", e);\n            }\n            Thread.sleep(ms);\n          }\n        } catch (InterruptedException e) {\n          // ignore\n        } finally {\n          spawnedThreads.remove(this);\n        }\n      }\n    };\n    spawnedThreads.add(t);\n    t.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#pauseCnxn(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#pauseCnxn(long).mjava","sourceNew":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    final Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          final ClientCnxn cnxn = getConnection();\n          synchronized (cnxn) {\n            try {\n              final Field sendThreadFld = cnxn.getClass().getDeclaredField(\"sendThread\");\n              sendThreadFld.setAccessible(true);\n              Object sendThread = sendThreadFld.get(cnxn);\n              if (sendThread != null) {\n                Method method = sendThread.getClass().getDeclaredMethod(\"testableCloseSocket\");\n                method.setAccessible(true);\n                try {\n                  method.invoke(sendThread);\n                } catch (InvocationTargetException e) {\n                  // is fine\n                }\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(\"Closing Zookeeper send channel failed.\", e);\n            }\n            Thread.sleep(ms);\n          }\n        } catch (InterruptedException e) {\n          // ignore\n        } finally {\n          spawnedThreads.remove(this);\n        }\n      }\n    };\n    spawnedThreads.add(t);\n    t.start();\n  }\n\n","sourceOld":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    final Thread t = new Thread() {\n      public void run() {\n        try {\n          final ClientCnxn cnxn = getConnection();\n          synchronized (cnxn) {\n            try {\n              final Field sendThreadFld = cnxn.getClass().getDeclaredField(\"sendThread\");\n              sendThreadFld.setAccessible(true);\n              Object sendThread = sendThreadFld.get(cnxn);\n              if (sendThread != null) {\n                Method method = sendThread.getClass().getDeclaredMethod(\"testableCloseSocket\");\n                method.setAccessible(true);\n                try {\n                  method.invoke(sendThread);\n                } catch (InvocationTargetException e) {\n                  // is fine\n                }\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(\"Closing Zookeeper send channel failed.\", e);\n            }\n            Thread.sleep(ms);\n          }\n        } catch (InterruptedException e) {\n          // ignore\n        } finally {\n          spawnedThreads.remove(this);\n        }\n      }\n    };\n    spawnedThreads.add(t);\n    t.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#pauseCnxn(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#pauseCnxn(long).mjava","sourceNew":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    final Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          final ClientCnxn cnxn = getConnection();\n          synchronized (cnxn) {\n            try {\n              final Field sendThreadFld = cnxn.getClass().getDeclaredField(\"sendThread\");\n              sendThreadFld.setAccessible(true);\n              Object sendThread = sendThreadFld.get(cnxn);\n              if (sendThread != null) {\n                Method method = sendThread.getClass().getDeclaredMethod(\"testableCloseSocket\");\n                method.setAccessible(true);\n                try {\n                  method.invoke(sendThread);\n                } catch (InvocationTargetException e) {\n                  // is fine\n                }\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(\"Closing Zookeeper send channel failed.\", e);\n            }\n            Thread.sleep(ms);\n          }\n        } catch (InterruptedException e) {\n          // ignore\n        } finally {\n          spawnedThreads.remove(this);\n        }\n      }\n    };\n    spawnedThreads.add(t);\n    t.start();\n  }\n\n","sourceOld":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    final Thread t = new Thread() {\n      public void run() {\n        try {\n          final ClientCnxn cnxn = getConnection();\n          synchronized (cnxn) {\n            try {\n              final Field sendThreadFld = cnxn.getClass().getDeclaredField(\"sendThread\");\n              sendThreadFld.setAccessible(true);\n              Object sendThread = sendThreadFld.get(cnxn);\n              if (sendThread != null) {\n                Method method = sendThread.getClass().getDeclaredMethod(\"testableCloseSocket\");\n                method.setAccessible(true);\n                try {\n                  method.invoke(sendThread);\n                } catch (InvocationTargetException e) {\n                  // is fine\n                }\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(\"Closing Zookeeper send channel failed.\", e);\n            }\n            Thread.sleep(ms);\n          }\n        } catch (InterruptedException e) {\n          // ignore\n        } finally {\n          spawnedThreads.remove(this);\n        }\n      }\n    };\n    spawnedThreads.add(t);\n    t.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be9f7175e1703e31f8d8de32612b7212db6acf76","date":1408660152,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#closeCnxn().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#pauseCnxn(long).mjava","sourceNew":"  public void closeCnxn() {\n    final Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          final ClientCnxn cnxn = getConnection();\n          synchronized (cnxn) {\n            try {\n              final Field sendThreadFld = cnxn.getClass().getDeclaredField(\"sendThread\");\n              sendThreadFld.setAccessible(true);\n              Object sendThread = sendThreadFld.get(cnxn);\n              if (sendThread != null) {\n                Method method = sendThread.getClass().getDeclaredMethod(\"testableCloseSocket\");\n                method.setAccessible(true);\n                try {\n                  method.invoke(sendThread);\n                } catch (InvocationTargetException e) {\n                  // is fine\n                }\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(\"Closing Zookeeper send channel failed.\", e);\n            }\n          }\n        } finally {\n          spawnedThreads.remove(this);\n        }\n      }\n    };\n    spawnedThreads.add(t);\n    t.start();\n  }\n\n","sourceOld":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    final Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          final ClientCnxn cnxn = getConnection();\n          synchronized (cnxn) {\n            try {\n              final Field sendThreadFld = cnxn.getClass().getDeclaredField(\"sendThread\");\n              sendThreadFld.setAccessible(true);\n              Object sendThread = sendThreadFld.get(cnxn);\n              if (sendThread != null) {\n                Method method = sendThread.getClass().getDeclaredMethod(\"testableCloseSocket\");\n                method.setAccessible(true);\n                try {\n                  method.invoke(sendThread);\n                } catch (InvocationTargetException e) {\n                  // is fine\n                }\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(\"Closing Zookeeper send channel failed.\", e);\n            }\n            Thread.sleep(ms);\n          }\n        } catch (InterruptedException e) {\n          // ignore\n        } finally {\n          spawnedThreads.remove(this);\n        }\n      }\n    };\n    spawnedThreads.add(t);\n    t.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","7530de27b87b961b51f01bd1299b7004d46e8823"],"f2b646be8c735de0184f7ba665b25204ad7091c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9bca360503fe2bcb991e66a954e744b5ce12f189"],"9bca360503fe2bcb991e66a954e744b5ce12f189":["64ef9ca83263a38a120387f811d9425779cf5b0c"],"407687e67faf6e1f02a211ca078d8e3eed631027":["f2b646be8c735de0184f7ba665b25204ad7091c2","c05c6a4f999960536d6b23302feffb8a50227466"],"c05c6a4f999960536d6b23302feffb8a50227466":["f2b646be8c735de0184f7ba665b25204ad7091c2"],"be9f7175e1703e31f8d8de32612b7212db6acf76":["7530de27b87b961b51f01bd1299b7004d46e8823"],"e52695347f1696bdd6f5f1d0c69179bc6a70f5cc":["a05887fc144c1e694781b42187949be4cd6e5347"],"64ef9ca83263a38a120387f811d9425779cf5b0c":["df38d1e5208cab704e643f34edca9fb2003b7d7a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05887fc144c1e694781b42187949be4cd6e5347":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"df38d1e5208cab704e643f34edca9fb2003b7d7a":["e52695347f1696bdd6f5f1d0c69179bc6a70f5cc"],"7530de27b87b961b51f01bd1299b7004d46e8823":["c05c6a4f999960536d6b23302feffb8a50227466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["be9f7175e1703e31f8d8de32612b7212db6acf76"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"f2b646be8c735de0184f7ba665b25204ad7091c2":["407687e67faf6e1f02a211ca078d8e3eed631027","c05c6a4f999960536d6b23302feffb8a50227466"],"9bca360503fe2bcb991e66a954e744b5ce12f189":["f2b646be8c735de0184f7ba665b25204ad7091c2"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"c05c6a4f999960536d6b23302feffb8a50227466":["407687e67faf6e1f02a211ca078d8e3eed631027","7530de27b87b961b51f01bd1299b7004d46e8823"],"be9f7175e1703e31f8d8de32612b7212db6acf76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e52695347f1696bdd6f5f1d0c69179bc6a70f5cc":["df38d1e5208cab704e643f34edca9fb2003b7d7a"],"64ef9ca83263a38a120387f811d9425779cf5b0c":["9bca360503fe2bcb991e66a954e744b5ce12f189"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f2b646be8c735de0184f7ba665b25204ad7091c2","a05887fc144c1e694781b42187949be4cd6e5347"],"a05887fc144c1e694781b42187949be4cd6e5347":["e52695347f1696bdd6f5f1d0c69179bc6a70f5cc"],"df38d1e5208cab704e643f34edca9fb2003b7d7a":["64ef9ca83263a38a120387f811d9425779cf5b0c"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","be9f7175e1703e31f8d8de32612b7212db6acf76"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}