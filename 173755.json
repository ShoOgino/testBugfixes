{"path":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/kuromoji/util/TokenInfoDictionaryBuilder#formatEntry(String[]).mjava","commits":[{"id":"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2","date":1326399048,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/kuromoji/util/TokenInfoDictionaryBuilder#formatEntry(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public String[] formatEntry(String[] features) {\n    if (this.format == DictionaryFormat.IPADIC) {\n      return features;\n    } else {\n      String[] features2 = new String[13];\n      features2[0] = features[0];\n      features2[1] = features[1];\n      features2[2] = features[2];\n      features2[3] = features[3];\n      features2[4] = features[4];\n      features2[5] = features[5];\n      features2[6] = features[6];\n      features2[7] = features[7];\n      features2[8] = features[8];\n      features2[9] = features[9];\n      features2[10] = features[11];\n      \n      // If the surface reading is non-existent, use surface form for reading and pronunciation.\n      // This happens with punctuation in UniDic and there are possibly other cases as well\n      if (features[13].length() == 0) {\n        features2[11] = features[0];\n        features2[12] = features[0];\n      } else {\n        features2[11] = features[13];\n        features2[12] = features[13];\n      }\t\t\t\n      return features2;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d45c1ff2c99694b6de2201175f9b8b8b27b597","date":1332757908,"type":5,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/TokenInfoDictionaryBuilder#formatEntry(String[]).mjava","pathOld":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/kuromoji/util/TokenInfoDictionaryBuilder#formatEntry(String[]).mjava","sourceNew":"  public String[] formatEntry(String[] features) {\n    if (this.format == DictionaryFormat.IPADIC) {\n      return features;\n    } else {\n      String[] features2 = new String[13];\n      features2[0] = features[0];\n      features2[1] = features[1];\n      features2[2] = features[2];\n      features2[3] = features[3];\n      features2[4] = features[4];\n      features2[5] = features[5];\n      features2[6] = features[6];\n      features2[7] = features[7];\n      features2[8] = features[8];\n      features2[9] = features[9];\n      features2[10] = features[11];\n      \n      // If the surface reading is non-existent, use surface form for reading and pronunciation.\n      // This happens with punctuation in UniDic and there are possibly other cases as well\n      if (features[13].length() == 0) {\n        features2[11] = features[0];\n        features2[12] = features[0];\n      } else {\n        features2[11] = features[13];\n        features2[12] = features[13];\n      }\t\t\t\n      return features2;\n    }\n  }\n\n","sourceOld":"  public String[] formatEntry(String[] features) {\n    if (this.format == DictionaryFormat.IPADIC) {\n      return features;\n    } else {\n      String[] features2 = new String[13];\n      features2[0] = features[0];\n      features2[1] = features[1];\n      features2[2] = features[2];\n      features2[3] = features[3];\n      features2[4] = features[4];\n      features2[5] = features[5];\n      features2[6] = features[6];\n      features2[7] = features[7];\n      features2[8] = features[8];\n      features2[9] = features[9];\n      features2[10] = features[11];\n      \n      // If the surface reading is non-existent, use surface form for reading and pronunciation.\n      // This happens with punctuation in UniDic and there are possibly other cases as well\n      if (features[13].length() == 0) {\n        features2[11] = features[0];\n        features2[12] = features[0];\n      } else {\n        features2[11] = features[13];\n        features2[12] = features[13];\n      }\t\t\t\n      return features2;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}