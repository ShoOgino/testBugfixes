{"path":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryWrapper#indexPossiblyExists().mjava","commits":[{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryWrapper#indexPossiblyExists().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#indexPossiblyExists(Directory).mjava","sourceNew":"  /** \n   * don't rely upon DirectoryReader.fileExists to determine if we should\n   * checkIndex() or not. It might mask real problems, where we silently\n   * don't checkindex at all. instead we look for a segments file.\n   */\n  protected boolean indexPossiblyExists() {\n    String files[];\n    try {\n      files = listAll();\n    } catch (IOException ex) {\n      // this means directory doesn't exist, which is ok. return false\n      return false;\n    }\n    for (String f : files) {\n      if (f.startsWith(\"segments_\")) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /** don't rely upon DirectoryReader.fileExists to determine if we should\n   *  checkIndex() or not. It might mask real problems, where we silently\n   *  don't checkindex at all. instead we look for a segments file.\n   */\n  private boolean indexPossiblyExists(Directory d) {\n    String files[];\n    try {\n      files = d.listAll();\n    } catch (IOException ex) {\n      // this means directory doesn't exist, which is ok. return false\n      return false;\n    }\n    for (String f : files) {\n      if (f.startsWith(\"segments_\")) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryWrapper#indexPossiblyExists().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#indexPossiblyExists(Directory).mjava","sourceNew":"  /** \n   * don't rely upon DirectoryReader.fileExists to determine if we should\n   * checkIndex() or not. It might mask real problems, where we silently\n   * don't checkindex at all. instead we look for a segments file.\n   */\n  protected boolean indexPossiblyExists() {\n    String files[];\n    try {\n      files = listAll();\n    } catch (IOException ex) {\n      // this means directory doesn't exist, which is ok. return false\n      return false;\n    }\n    for (String f : files) {\n      if (f.startsWith(\"segments_\")) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /** don't rely upon DirectoryReader.fileExists to determine if we should\n   *  checkIndex() or not. It might mask real problems, where we silently\n   *  don't checkindex at all. instead we look for a segments file.\n   */\n  private boolean indexPossiblyExists(Directory d) {\n    String files[];\n    try {\n      files = d.listAll();\n    } catch (IOException ex) {\n      // this means directory doesn't exist, which is ok. return false\n      return false;\n    }\n    for (String f : files) {\n      if (f.startsWith(\"segments_\")) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryWrapper#indexPossiblyExists().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * don't rely upon DirectoryReader.fileExists to determine if we should\n   * checkIndex() or not. It might mask real problems, where we silently\n   * don't checkindex at all. instead we look for a segments file.\n   */\n  protected boolean indexPossiblyExists() {\n    String files[];\n    try {\n      files = listAll();\n    } catch (IOException ex) {\n      // this means directory doesn't exist, which is ok. return false\n      return false;\n    }\n    for (String f : files) {\n      if (f.startsWith(\"segments_\")) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30e0912f3a3069b115cfea44ff612c44d6906386","date":1365631344,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryWrapper#indexPossiblyExists().mjava","sourceNew":null,"sourceOld":"  /** \n   * don't rely upon DirectoryReader.fileExists to determine if we should\n   * checkIndex() or not. It might mask real problems, where we silently\n   * don't checkindex at all. instead we look for a segments file.\n   */\n  protected boolean indexPossiblyExists() {\n    String files[];\n    try {\n      files = listAll();\n    } catch (IOException ex) {\n      // this means directory doesn't exist, which is ok. return false\n      return false;\n    }\n    for (String f : files) {\n      if (f.startsWith(\"segments_\")) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d19974432be9aed28ee7dca73bdf01d139e763a9"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30e0912f3a3069b115cfea44ff612c44d6906386":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d19974432be9aed28ee7dca73bdf01d139e763a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30e0912f3a3069b115cfea44ff612c44d6906386"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d19974432be9aed28ee7dca73bdf01d139e763a9":["aba371508186796cc6151d8223a5b4e16d02e26e","30e0912f3a3069b115cfea44ff612c44d6906386","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"30e0912f3a3069b115cfea44ff612c44d6906386":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}