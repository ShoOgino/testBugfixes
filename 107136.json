{"path":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  public void testAdvanced() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"allowDups\", \"true\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add allowDups=\\\"true\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,\"version\",\"2.1\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","sourceNew":null,"sourceOld":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  public void testAdvanced() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"allowDups\", \"true\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add allowDups=\\\"true\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,\"version\",\"2.1\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"src/test/org/apache/solr/SampleTest#testAdvanced().mjava","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  public void testAdvanced() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"allowDups\", \"true\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add allowDups=\\\"true\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,\"version\",\"2.1\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  public void testAdvanced() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"allowDups\", \"true\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add allowDups=\\\"true\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,\"version\",\"2.1\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  public void testAdvanced() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"allowDups\", \"true\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add allowDups=\\\"true\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,\"version\",\"2.1\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afeb033b2bd36d8ce9d82142b197da4dde13068b","date":1269115863,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"allowDups\", \"true\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add allowDups=\\\"true\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,\"version\",\"2.1\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  public void testAdvanced() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"allowDups\", \"true\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add allowDups=\\\"true\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,\"version\",\"2.1\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5653af107efef582afd0bc6aff175972359fdd6","date":1293390698,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,\"version\",\"2.1\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"allowDups\", \"true\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add allowDups=\\\"true\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,\"version\",\"2.1\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,\"version\",\"2.1\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"allowDups\", \"true\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add allowDups=\\\"true\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,\"version\",\"2.1\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,\"version\",\"2.1\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"allowDups\", \"true\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add allowDups=\\\"true\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,\"version\",\"2.1\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ce6aae13e6441cf187f083d13afaf8e9a2884e3","date":1299700113,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,\"version\",\"2.1\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,\"version\",\"2.1\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,\"version\",\"2.1\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["afeb033b2bd36d8ce9d82142b197da4dde13068b","b5653af107efef582afd0bc6aff175972359fdd6"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"2ce6aae13e6441cf187f083d13afaf8e9a2884e3":["b5653af107efef582afd0bc6aff175972359fdd6"],"c26f00b574427b55127e869b935845554afde1fa":["2ce6aae13e6441cf187f083d13afaf8e9a2884e3","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["afeb033b2bd36d8ce9d82142b197da4dde13068b","b5653af107efef582afd0bc6aff175972359fdd6"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","2ce6aae13e6441cf187f083d13afaf8e9a2884e3"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2ce6aae13e6441cf187f083d13afaf8e9a2884e3"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","2ce6aae13e6441cf187f083d13afaf8e9a2884e3"],"b5653af107efef582afd0bc6aff175972359fdd6":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["2ce6aae13e6441cf187f083d13afaf8e9a2884e3"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"2ce6aae13e6441cf187f083d13afaf8e9a2884e3":["c26f00b574427b55127e869b935845554afde1fa","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"b5653af107efef582afd0bc6aff175972359fdd6":["70ad682703b8585f5d0a637efec044d57ec05efb","2ce6aae13e6441cf187f083d13afaf8e9a2884e3","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","b5653af107efef582afd0bc6aff175972359fdd6"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}