{"path":"solr/core/src/java/org/apache/solr/search/facet/UniqueSlotAcc[SlotAcc]#getShardValue(int).mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueSlotAcc[SlotAcc]#getShardValue(int).mjava","pathOld":"/dev/null","sourceNew":"  public Object getShardValue(int slot) throws IOException {\n    FixedBitSet ords = arr[slot];\n    int unique;\n    if (counts != null) {\n      unique = counts[slot];\n    } else {\n      unique = ords==null ? 0 : ords.cardinality();\n    }\n\n    SimpleOrderedMap map = new SimpleOrderedMap();\n    map.add(\"unique\", unique);\n    map.add(\"nTerms\", nTerms);\n\n    int maxExplicit=100;\n    // TODO: make configurable\n    // TODO: share values across buckets\n    if (unique <= maxExplicit) {\n      List lst = new ArrayList( Math.min(unique, maxExplicit) );\n\n      if (ords != null) {\n        for (int ord=-1;;) {\n          if (++ord >= unique) break;\n          ord = ords.nextSetBit(ord);\n          if (ord == DocIdSetIterator.NO_MORE_DOCS) break;\n          BytesRef val = lookupOrd(ord);\n          Object o = field.getType().toObject(field, val);\n          lst.add(o);\n        }\n      }\n\n      map.add(\"vals\", lst);\n    }\n\n    return map;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2350f91b2ef67a3fe85dc56c6fa0630586abf442"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueSlotAcc[SlotAcc]#getShardValue(int).mjava","pathOld":"/dev/null","sourceNew":"  public Object getShardValue(int slot) throws IOException {\n    FixedBitSet ords = arr[slot];\n    int unique;\n    if (counts != null) {\n      unique = counts[slot];\n    } else {\n      unique = ords==null ? 0 : ords.cardinality();\n    }\n\n    SimpleOrderedMap map = new SimpleOrderedMap();\n    map.add(\"unique\", unique);\n    map.add(\"nTerms\", nTerms);\n\n    int maxExplicit=100;\n    // TODO: make configurable\n    // TODO: share values across buckets\n    if (unique <= maxExplicit) {\n      List lst = new ArrayList( Math.min(unique, maxExplicit) );\n\n      if (ords != null) {\n        for (int ord=-1;;) {\n          if (++ord >= unique) break;\n          ord = ords.nextSetBit(ord);\n          if (ord == DocIdSetIterator.NO_MORE_DOCS) break;\n          BytesRef val = lookupOrd(ord);\n          Object o = field.getType().toObject(field, val);\n          lst.add(o);\n        }\n      }\n\n      map.add(\"vals\", lst);\n    }\n\n    return map;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2350f91b2ef67a3fe85dc56c6fa0630586abf442","date":1430446502,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueSlotAcc[SlotAcc]#getShardValue(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueSlotAcc[SlotAcc]#getShardValue(int).mjava","sourceNew":"  public Object getShardValue(int slot) throws IOException {\n    FixedBitSet ords = arr[slot];\n    int unique;\n    if (counts != null) {\n      unique = counts[slot];\n    } else {\n      unique = ords==null ? 0 : ords.cardinality();\n    }\n\n    SimpleOrderedMap map = new SimpleOrderedMap();\n    map.add(\"unique\", unique);\n    map.add(\"nTerms\", nTerms);\n\n    int maxExplicit=100;\n    // TODO: make configurable\n    // TODO: share values across buckets\n    if (unique > 0) {\n\n      List lst = new ArrayList( Math.min(unique, maxExplicit) );\n\n      long maxOrd = ords.length();\n      if (ords != null && ords.length() > 0) {\n        for (int ord=0; lst.size() < maxExplicit;) {\n          ord = ords.nextSetBit(ord);\n          if (ord == DocIdSetIterator.NO_MORE_DOCS) break;\n          BytesRef val = lookupOrd(ord);\n          Object o = field.getType().toObject(field, val);\n          lst.add(o);\n          if (++ord >= maxOrd) break;\n        }\n      }\n\n      map.add(\"vals\", lst);\n    }\n\n    return map;\n  }\n\n","sourceOld":"  public Object getShardValue(int slot) throws IOException {\n    FixedBitSet ords = arr[slot];\n    int unique;\n    if (counts != null) {\n      unique = counts[slot];\n    } else {\n      unique = ords==null ? 0 : ords.cardinality();\n    }\n\n    SimpleOrderedMap map = new SimpleOrderedMap();\n    map.add(\"unique\", unique);\n    map.add(\"nTerms\", nTerms);\n\n    int maxExplicit=100;\n    // TODO: make configurable\n    // TODO: share values across buckets\n    if (unique <= maxExplicit) {\n      List lst = new ArrayList( Math.min(unique, maxExplicit) );\n\n      if (ords != null) {\n        for (int ord=-1;;) {\n          if (++ord >= unique) break;\n          ord = ords.nextSetBit(ord);\n          if (ord == DocIdSetIterator.NO_MORE_DOCS) break;\n          BytesRef val = lookupOrd(ord);\n          Object o = field.getType().toObject(field, val);\n          lst.add(o);\n        }\n      }\n\n      map.add(\"vals\", lst);\n    }\n\n    return map;\n  }\n\n","bugFix":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ddd9456ddbc1edc62d5a14a84ad0e4fcd74a008","date":1431878853,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueSlotAcc#getShardValue(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueSlotAcc[SlotAcc]#getShardValue(int).mjava","sourceNew":"  private Object getShardValue(int slot) throws IOException {\n    if (factory != null) return getShardHLL(slot);\n    FixedBitSet ords = arr[slot];\n    int unique;\n    if (counts != null) {\n      unique = counts[slot];\n    } else {\n      unique = ords==null ? 0 : ords.cardinality();\n    }\n\n    SimpleOrderedMap map = new SimpleOrderedMap();\n    map.add(\"unique\", unique);\n    map.add(\"nTerms\", nTerms);\n\n    int maxExplicit=100;\n    // TODO: make configurable\n    // TODO: share values across buckets\n    if (unique > 0) {\n\n      List lst = new ArrayList( Math.min(unique, maxExplicit) );\n\n      long maxOrd = ords.length();\n      if (ords != null && ords.length() > 0) {\n        for (int ord=0; lst.size() < maxExplicit;) {\n          ord = ords.nextSetBit(ord);\n          if (ord == DocIdSetIterator.NO_MORE_DOCS) break;\n          BytesRef val = lookupOrd(ord);\n          Object o = field.getType().toObject(field, val);\n          lst.add(o);\n          if (++ord >= maxOrd) break;\n        }\n      }\n\n      map.add(\"vals\", lst);\n    }\n\n    return map;\n  }\n\n","sourceOld":"  public Object getShardValue(int slot) throws IOException {\n    FixedBitSet ords = arr[slot];\n    int unique;\n    if (counts != null) {\n      unique = counts[slot];\n    } else {\n      unique = ords==null ? 0 : ords.cardinality();\n    }\n\n    SimpleOrderedMap map = new SimpleOrderedMap();\n    map.add(\"unique\", unique);\n    map.add(\"nTerms\", nTerms);\n\n    int maxExplicit=100;\n    // TODO: make configurable\n    // TODO: share values across buckets\n    if (unique > 0) {\n\n      List lst = new ArrayList( Math.min(unique, maxExplicit) );\n\n      long maxOrd = ords.length();\n      if (ords != null && ords.length() > 0) {\n        for (int ord=0; lst.size() < maxExplicit;) {\n          ord = ords.nextSetBit(ord);\n          if (ord == DocIdSetIterator.NO_MORE_DOCS) break;\n          BytesRef val = lookupOrd(ord);\n          Object o = field.getType().toObject(field, val);\n          lst.add(o);\n          if (++ord >= maxOrd) break;\n        }\n      }\n\n      map.add(\"vals\", lst);\n    }\n\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"2350f91b2ef67a3fe85dc56c6fa0630586abf442":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ddd9456ddbc1edc62d5a14a84ad0e4fcd74a008":["2350f91b2ef67a3fe85dc56c6fa0630586abf442"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ddd9456ddbc1edc62d5a14a84ad0e4fcd74a008"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"2350f91b2ef67a3fe85dc56c6fa0630586abf442":["2ddd9456ddbc1edc62d5a14a84ad0e4fcd74a008"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"2ddd9456ddbc1edc62d5a14a84ad0e4fcd74a008":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2350f91b2ef67a3fe85dc56c6fa0630586abf442"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}