{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudPhrasesIdentificationComponent#testBasicPhrases().mjava","commits":[{"id":"0d1411e62d30c460b09c6f3643df82daa10a27cc","date":1536256256,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPhrasesIdentificationComponent#testBasicPhrases().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasicPhrases() throws Exception {\n    final String input = \" did  a Quick    brown FOX perniciously jump over the lazy dog\";\n    final String expected = \" did  a Quick    {brown FOX} perniciously jump over {the lazy dog}\";\n    \n    // based on the documents indexed, these assertions should all pass regardless of\n    // how many shards we have, or wether the request is done via /phrases or /select...\n    for (String path : Arrays.asList(\"/select\", \"/phrases\")) {\n      // ... or if we muck with \"q\" and use the alternative phrases.q for the bits we care about...\n      for (SolrParams p : Arrays.asList(params(\"q\", input, \"phrases\", \"true\"),\n                                        params(\"q\", \"*:*\", \"phrases.q\", input, \"phrases\", \"true\"),\n                                        params(\"q\", \"-*:*\", \"phrases.q\", input, \"phrases\", \"true\"))) {\n        final QueryRequest req = new QueryRequest(p);\n        req.setPath(path);\n        final QueryResponse rsp = req.process(getRandClient(random()));\n        try {\n          NamedList<Object> phrases = (NamedList<Object>) rsp.getResponse().get(\"phrases\");\n          assertEquals(\"input\", input, phrases.get(\"input\"));\n          assertEquals(\"summary\", expected, phrases.get(\"summary\"));\n          \n          final List<NamedList<Object>> details = (List<NamedList<Object>>) phrases.get(\"details\");\n          assertNotNull(\"null details\", details);\n          assertEquals(\"num phrases found\", 2, details.size());\n          \n          final NamedList<Object> lazy_dog = details.get(0);\n          assertEquals(\"dog text\", \"the lazy dog\", lazy_dog.get(\"text\"));\n          assertEquals(\"dog score\", 0.166666D, ((Double)lazy_dog.get(\"score\")).doubleValue(), 0.000001D);\n          \n          final NamedList<Object> brown_fox = details.get(1);\n          assertEquals(\"fox text\", \"brown FOX\", brown_fox.get(\"text\"));\n          assertEquals(\"fox score\", 0.083333D, ((Double)brown_fox.get(\"score\")).doubleValue(), 0.000001D);\n          \n        } catch (AssertionError e) {\n          throw new AssertionError(e.getMessage() + \" ::: \" + path + \" ==> \" + rsp, e);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPhrasesIdentificationComponent#testBasicPhrases().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudPhrasesIdentificationComponent#testBasicPhrases().mjava","sourceNew":"  public void testBasicPhrases() throws Exception {\n    final String input = \" did  a Quick    brown FOX perniciously jump over the lazy dog\";\n    final String expected = \" did  a Quick    {brown FOX} perniciously jump over {the lazy dog}\";\n    \n    // based on the documents indexed, these assertions should all pass regardless of\n    // how many shards we have, or wether the request is done via /phrases or /select...\n    for (String path : Arrays.asList(\"/select\", \"/phrases\")) {\n      // ... or if we muck with \"q\" and use the alternative phrases.q for the bits we care about...\n      for (SolrParams p : Arrays.asList(params(\"q\", input, \"phrases\", \"true\"),\n                                        params(\"q\", \"*:*\", \"phrases.q\", input, \"phrases\", \"true\"),\n                                        params(\"q\", \"-*:*\", \"phrases.q\", input, \"phrases\", \"true\"))) {\n        final QueryRequest req = new QueryRequest(p);\n        req.setPath(path);\n        final QueryResponse rsp = req.process(getRandClient(random()));\n        try {\n          @SuppressWarnings({\"unchecked\"})\n          NamedList<Object> phrases = (NamedList<Object>) rsp.getResponse().get(\"phrases\");\n          assertEquals(\"input\", input, phrases.get(\"input\"));\n          assertEquals(\"summary\", expected, phrases.get(\"summary\"));\n          \n          @SuppressWarnings({\"unchecked\"})\n          final List<NamedList<Object>> details = (List<NamedList<Object>>) phrases.get(\"details\");\n          assertNotNull(\"null details\", details);\n          assertEquals(\"num phrases found\", 2, details.size());\n          \n          final NamedList<Object> lazy_dog = details.get(0);\n          assertEquals(\"dog text\", \"the lazy dog\", lazy_dog.get(\"text\"));\n          assertEquals(\"dog score\", 0.166666D, ((Double)lazy_dog.get(\"score\")).doubleValue(), 0.000001D);\n          \n          final NamedList<Object> brown_fox = details.get(1);\n          assertEquals(\"fox text\", \"brown FOX\", brown_fox.get(\"text\"));\n          assertEquals(\"fox score\", 0.083333D, ((Double)brown_fox.get(\"score\")).doubleValue(), 0.000001D);\n          \n        } catch (AssertionError e) {\n          throw new AssertionError(e.getMessage() + \" ::: \" + path + \" ==> \" + rsp, e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testBasicPhrases() throws Exception {\n    final String input = \" did  a Quick    brown FOX perniciously jump over the lazy dog\";\n    final String expected = \" did  a Quick    {brown FOX} perniciously jump over {the lazy dog}\";\n    \n    // based on the documents indexed, these assertions should all pass regardless of\n    // how many shards we have, or wether the request is done via /phrases or /select...\n    for (String path : Arrays.asList(\"/select\", \"/phrases\")) {\n      // ... or if we muck with \"q\" and use the alternative phrases.q for the bits we care about...\n      for (SolrParams p : Arrays.asList(params(\"q\", input, \"phrases\", \"true\"),\n                                        params(\"q\", \"*:*\", \"phrases.q\", input, \"phrases\", \"true\"),\n                                        params(\"q\", \"-*:*\", \"phrases.q\", input, \"phrases\", \"true\"))) {\n        final QueryRequest req = new QueryRequest(p);\n        req.setPath(path);\n        final QueryResponse rsp = req.process(getRandClient(random()));\n        try {\n          NamedList<Object> phrases = (NamedList<Object>) rsp.getResponse().get(\"phrases\");\n          assertEquals(\"input\", input, phrases.get(\"input\"));\n          assertEquals(\"summary\", expected, phrases.get(\"summary\"));\n          \n          final List<NamedList<Object>> details = (List<NamedList<Object>>) phrases.get(\"details\");\n          assertNotNull(\"null details\", details);\n          assertEquals(\"num phrases found\", 2, details.size());\n          \n          final NamedList<Object> lazy_dog = details.get(0);\n          assertEquals(\"dog text\", \"the lazy dog\", lazy_dog.get(\"text\"));\n          assertEquals(\"dog score\", 0.166666D, ((Double)lazy_dog.get(\"score\")).doubleValue(), 0.000001D);\n          \n          final NamedList<Object> brown_fox = details.get(1);\n          assertEquals(\"fox text\", \"brown FOX\", brown_fox.get(\"text\"));\n          assertEquals(\"fox score\", 0.083333D, ((Double)brown_fox.get(\"score\")).doubleValue(), 0.000001D);\n          \n        } catch (AssertionError e) {\n          throw new AssertionError(e.getMessage() + \" ::: \" + path + \" ==> \" + rsp, e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["0d1411e62d30c460b09c6f3643df82daa10a27cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d1411e62d30c460b09c6f3643df82daa10a27cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d1411e62d30c460b09c6f3643df82daa10a27cc"],"0d1411e62d30c460b09c6f3643df82daa10a27cc":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}