{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/TaxonomyIndexArrays#initParents(IndexReader,int).mjava","commits":[{"id":"f2ae7e371df56ccde467b71db7e82066f05a5972","date":1363620258,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/TaxonomyIndexArrays#initParents(IndexReader,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParallelTaxonomyArrays#initParents(IndexReader,int).mjava","sourceNew":"  // Read the parents of the new categories\n  private void initParents(IndexReader reader, int first) throws IOException {\n    if (reader.maxDoc() == first) {\n      return;\n    }\n    \n    // it's ok to use MultiFields because we only iterate on one posting list.\n    // breaking it to loop over the leaves() only complicates code for no\n    // apparent gain.\n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader, null,\n        Consts.FIELD_PAYLOADS, Consts.PAYLOAD_PARENT_BYTES_REF,\n        DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    // shouldn't really happen, if it does, something's wrong\n    if (positions == null || positions.advance(first) == DocIdSetIterator.NO_MORE_DOCS) {\n      throw new CorruptIndexException(\"Missing parent data for category \" + first);\n    }\n    \n    int num = reader.maxDoc();\n    for (int i = first; i < num; i++) {\n      if (positions.docID() == i) {\n        if (positions.freq() == 0) { // shouldn't happen\n          throw new CorruptIndexException(\"Missing parent data for category \" + i);\n        }\n        \n        parents[i] = positions.nextPosition();\n        \n        if (positions.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n          if (i + 1 < num) {\n            throw new CorruptIndexException(\"Missing parent data for category \"+ (i + 1));\n          }\n          break;\n        }\n      } else { // this shouldn't happen\n        throw new CorruptIndexException(\"Missing parent data for category \" + i);\n      }\n    }\n  }\n\n","sourceOld":"  // Read the parents of the new categories\n  private void initParents(IndexReader reader, int first) throws IOException {\n    if (reader.maxDoc() == first) {\n      return;\n    }\n    \n    // it's ok to use MultiFields because we only iterate on one posting list.\n    // breaking it to loop over the leaves() only complicates code for no\n    // apparent gain.\n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader, null,\n        Consts.FIELD_PAYLOADS, Consts.PAYLOAD_PARENT_BYTES_REF,\n        DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    // shouldn't really happen, if it does, something's wrong\n    if (positions == null || positions.advance(first) == DocIdSetIterator.NO_MORE_DOCS) {\n      throw new CorruptIndexException(\"Missing parent data for category \" + first);\n    }\n    \n    int num = reader.maxDoc();\n    for (int i = first; i < num; i++) {\n      if (positions.docID() == i) {\n        if (positions.freq() == 0) { // shouldn't happen\n          throw new CorruptIndexException(\"Missing parent data for category \" + i);\n        }\n        \n        parents[i] = positions.nextPosition();\n        \n        if (positions.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n          if (i + 1 < num) {\n            throw new CorruptIndexException(\"Missing parent data for category \"+ (i + 1));\n          }\n          break;\n        }\n      } else { // this shouldn't happen\n        throw new CorruptIndexException(\"Missing parent data for category \" + i);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/TaxonomyIndexArrays#initParents(IndexReader,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/TaxonomyIndexArrays#initParents(IndexReader,int).mjava","sourceNew":"  // Read the parents of the new categories\n  private void initParents(IndexReader reader, int first) throws IOException {\n    if (reader.maxDoc() == first) {\n      return;\n    }\n    \n    // it's ok to use MultiFields because we only iterate on one posting list.\n    // breaking it to loop over the leaves() only complicates code for no\n    // apparent gain.\n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader, null,\n        Consts.FIELD_PAYLOADS, Consts.PAYLOAD_PARENT_BYTES_REF,\n        DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    // shouldn't really happen, if it does, something's wrong\n    if (positions == null || positions.advance(first) == DocIdSetIterator.NO_MORE_DOCS) {\n      throw new CorruptIndexException(\"Missing parent data for category \" + first, reader.toString());\n    }\n    \n    int num = reader.maxDoc();\n    for (int i = first; i < num; i++) {\n      if (positions.docID() == i) {\n        if (positions.freq() == 0) { // shouldn't happen\n          throw new CorruptIndexException(\"Missing parent data for category \" + i, reader.toString());\n        }\n        \n        parents[i] = positions.nextPosition();\n        \n        if (positions.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n          if (i + 1 < num) {\n            throw new CorruptIndexException(\"Missing parent data for category \"+ (i + 1), reader.toString());\n          }\n          break;\n        }\n      } else { // this shouldn't happen\n        throw new CorruptIndexException(\"Missing parent data for category \" + i, reader.toString());\n      }\n    }\n  }\n\n","sourceOld":"  // Read the parents of the new categories\n  private void initParents(IndexReader reader, int first) throws IOException {\n    if (reader.maxDoc() == first) {\n      return;\n    }\n    \n    // it's ok to use MultiFields because we only iterate on one posting list.\n    // breaking it to loop over the leaves() only complicates code for no\n    // apparent gain.\n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader, null,\n        Consts.FIELD_PAYLOADS, Consts.PAYLOAD_PARENT_BYTES_REF,\n        DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    // shouldn't really happen, if it does, something's wrong\n    if (positions == null || positions.advance(first) == DocIdSetIterator.NO_MORE_DOCS) {\n      throw new CorruptIndexException(\"Missing parent data for category \" + first);\n    }\n    \n    int num = reader.maxDoc();\n    for (int i = first; i < num; i++) {\n      if (positions.docID() == i) {\n        if (positions.freq() == 0) { // shouldn't happen\n          throw new CorruptIndexException(\"Missing parent data for category \" + i);\n        }\n        \n        parents[i] = positions.nextPosition();\n        \n        if (positions.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n          if (i + 1 < num) {\n            throw new CorruptIndexException(\"Missing parent data for category \"+ (i + 1));\n          }\n          break;\n        }\n      } else { // this shouldn't happen\n        throw new CorruptIndexException(\"Missing parent data for category \" + i);\n      }\n    }\n  }\n\n","bugFix":["6d354a31eacacdfbc478eaa22e9cf021a2972280"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/TaxonomyIndexArrays#initParents(IndexReader,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/TaxonomyIndexArrays#initParents(IndexReader,int).mjava","sourceNew":"  // Read the parents of the new categories\n  private void initParents(IndexReader reader, int first) throws IOException {\n    if (reader.maxDoc() == first) {\n      return;\n    }\n    \n    // it's ok to use MultiFields because we only iterate on one posting list.\n    // breaking it to loop over the leaves() only complicates code for no\n    // apparent gain.\n    PostingsEnum positions = MultiFields.getTermPositionsEnum(reader, null,\n        Consts.FIELD_PAYLOADS, Consts.PAYLOAD_PARENT_BYTES_REF,\n        PostingsEnum.FLAG_PAYLOADS);\n\n    // shouldn't really happen, if it does, something's wrong\n    if (positions == null || positions.advance(first) == DocIdSetIterator.NO_MORE_DOCS) {\n      throw new CorruptIndexException(\"Missing parent data for category \" + first, reader.toString());\n    }\n    \n    int num = reader.maxDoc();\n    for (int i = first; i < num; i++) {\n      if (positions.docID() == i) {\n        if (positions.freq() == 0) { // shouldn't happen\n          throw new CorruptIndexException(\"Missing parent data for category \" + i, reader.toString());\n        }\n        \n        parents[i] = positions.nextPosition();\n        \n        if (positions.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n          if (i + 1 < num) {\n            throw new CorruptIndexException(\"Missing parent data for category \"+ (i + 1), reader.toString());\n          }\n          break;\n        }\n      } else { // this shouldn't happen\n        throw new CorruptIndexException(\"Missing parent data for category \" + i, reader.toString());\n      }\n    }\n  }\n\n","sourceOld":"  // Read the parents of the new categories\n  private void initParents(IndexReader reader, int first) throws IOException {\n    if (reader.maxDoc() == first) {\n      return;\n    }\n    \n    // it's ok to use MultiFields because we only iterate on one posting list.\n    // breaking it to loop over the leaves() only complicates code for no\n    // apparent gain.\n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader, null,\n        Consts.FIELD_PAYLOADS, Consts.PAYLOAD_PARENT_BYTES_REF,\n        DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    // shouldn't really happen, if it does, something's wrong\n    if (positions == null || positions.advance(first) == DocIdSetIterator.NO_MORE_DOCS) {\n      throw new CorruptIndexException(\"Missing parent data for category \" + first, reader.toString());\n    }\n    \n    int num = reader.maxDoc();\n    for (int i = first; i < num; i++) {\n      if (positions.docID() == i) {\n        if (positions.freq() == 0) { // shouldn't happen\n          throw new CorruptIndexException(\"Missing parent data for category \" + i, reader.toString());\n        }\n        \n        parents[i] = positions.nextPosition();\n        \n        if (positions.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n          if (i + 1 < num) {\n            throw new CorruptIndexException(\"Missing parent data for category \"+ (i + 1), reader.toString());\n          }\n          break;\n        }\n      } else { // this shouldn't happen\n        throw new CorruptIndexException(\"Missing parent data for category \" + i, reader.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/TaxonomyIndexArrays#initParents(IndexReader,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/TaxonomyIndexArrays#initParents(IndexReader,int).mjava","sourceNew":"  // Read the parents of the new categories\n  private void initParents(IndexReader reader, int first) throws IOException {\n    if (reader.maxDoc() == first) {\n      return;\n    }\n    \n    // it's ok to use MultiFields because we only iterate on one posting list.\n    // breaking it to loop over the leaves() only complicates code for no\n    // apparent gain.\n    PostingsEnum positions = MultiFields.getTermPositionsEnum(reader, null,\n        Consts.FIELD_PAYLOADS, Consts.PAYLOAD_PARENT_BYTES_REF,\n        PostingsEnum.PAYLOADS);\n\n    // shouldn't really happen, if it does, something's wrong\n    if (positions == null || positions.advance(first) == DocIdSetIterator.NO_MORE_DOCS) {\n      throw new CorruptIndexException(\"Missing parent data for category \" + first, reader.toString());\n    }\n    \n    int num = reader.maxDoc();\n    for (int i = first; i < num; i++) {\n      if (positions.docID() == i) {\n        if (positions.freq() == 0) { // shouldn't happen\n          throw new CorruptIndexException(\"Missing parent data for category \" + i, reader.toString());\n        }\n        \n        parents[i] = positions.nextPosition();\n        \n        if (positions.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n          if (i + 1 < num) {\n            throw new CorruptIndexException(\"Missing parent data for category \"+ (i + 1), reader.toString());\n          }\n          break;\n        }\n      } else { // this shouldn't happen\n        throw new CorruptIndexException(\"Missing parent data for category \" + i, reader.toString());\n      }\n    }\n  }\n\n","sourceOld":"  // Read the parents of the new categories\n  private void initParents(IndexReader reader, int first) throws IOException {\n    if (reader.maxDoc() == first) {\n      return;\n    }\n    \n    // it's ok to use MultiFields because we only iterate on one posting list.\n    // breaking it to loop over the leaves() only complicates code for no\n    // apparent gain.\n    PostingsEnum positions = MultiFields.getTermPositionsEnum(reader, null,\n        Consts.FIELD_PAYLOADS, Consts.PAYLOAD_PARENT_BYTES_REF,\n        PostingsEnum.FLAG_PAYLOADS);\n\n    // shouldn't really happen, if it does, something's wrong\n    if (positions == null || positions.advance(first) == DocIdSetIterator.NO_MORE_DOCS) {\n      throw new CorruptIndexException(\"Missing parent data for category \" + first, reader.toString());\n    }\n    \n    int num = reader.maxDoc();\n    for (int i = first; i < num; i++) {\n      if (positions.docID() == i) {\n        if (positions.freq() == 0) { // shouldn't happen\n          throw new CorruptIndexException(\"Missing parent data for category \" + i, reader.toString());\n        }\n        \n        parents[i] = positions.nextPosition();\n        \n        if (positions.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n          if (i + 1 < num) {\n            throw new CorruptIndexException(\"Missing parent data for category \"+ (i + 1), reader.toString());\n          }\n          break;\n        }\n      } else { // this shouldn't happen\n        throw new CorruptIndexException(\"Missing parent data for category \" + i, reader.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/TaxonomyIndexArrays#initParents(IndexReader,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/TaxonomyIndexArrays#initParents(IndexReader,int).mjava","sourceNew":"  // Read the parents of the new categories\n  private void initParents(IndexReader reader, int first) throws IOException {\n    if (reader.maxDoc() == first) {\n      return;\n    }\n    \n    // it's ok to use MultiFields because we only iterate on one posting list.\n    // breaking it to loop over the leaves() only complicates code for no\n    // apparent gain.\n    PostingsEnum positions = MultiFields.getTermPositionsEnum(reader,\n        Consts.FIELD_PAYLOADS, Consts.PAYLOAD_PARENT_BYTES_REF,\n        PostingsEnum.PAYLOADS);\n\n    // shouldn't really happen, if it does, something's wrong\n    if (positions == null || positions.advance(first) == DocIdSetIterator.NO_MORE_DOCS) {\n      throw new CorruptIndexException(\"Missing parent data for category \" + first, reader.toString());\n    }\n    \n    int num = reader.maxDoc();\n    for (int i = first; i < num; i++) {\n      if (positions.docID() == i) {\n        if (positions.freq() == 0) { // shouldn't happen\n          throw new CorruptIndexException(\"Missing parent data for category \" + i, reader.toString());\n        }\n        \n        parents[i] = positions.nextPosition();\n        \n        if (positions.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n          if (i + 1 < num) {\n            throw new CorruptIndexException(\"Missing parent data for category \"+ (i + 1), reader.toString());\n          }\n          break;\n        }\n      } else { // this shouldn't happen\n        throw new CorruptIndexException(\"Missing parent data for category \" + i, reader.toString());\n      }\n    }\n  }\n\n","sourceOld":"  // Read the parents of the new categories\n  private void initParents(IndexReader reader, int first) throws IOException {\n    if (reader.maxDoc() == first) {\n      return;\n    }\n    \n    // it's ok to use MultiFields because we only iterate on one posting list.\n    // breaking it to loop over the leaves() only complicates code for no\n    // apparent gain.\n    PostingsEnum positions = MultiFields.getTermPositionsEnum(reader, null,\n        Consts.FIELD_PAYLOADS, Consts.PAYLOAD_PARENT_BYTES_REF,\n        PostingsEnum.PAYLOADS);\n\n    // shouldn't really happen, if it does, something's wrong\n    if (positions == null || positions.advance(first) == DocIdSetIterator.NO_MORE_DOCS) {\n      throw new CorruptIndexException(\"Missing parent data for category \" + first, reader.toString());\n    }\n    \n    int num = reader.maxDoc();\n    for (int i = first; i < num; i++) {\n      if (positions.docID() == i) {\n        if (positions.freq() == 0) { // shouldn't happen\n          throw new CorruptIndexException(\"Missing parent data for category \" + i, reader.toString());\n        }\n        \n        parents[i] = positions.nextPosition();\n        \n        if (positions.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n          if (i + 1 < num) {\n            throw new CorruptIndexException(\"Missing parent data for category \"+ (i + 1), reader.toString());\n          }\n          break;\n        }\n      } else { // this shouldn't happen\n        throw new CorruptIndexException(\"Missing parent data for category \" + i, reader.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/TaxonomyIndexArrays#initParents(IndexReader,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/TaxonomyIndexArrays#initParents(IndexReader,int).mjava","sourceNew":"  // Read the parents of the new categories\n  private void initParents(IndexReader reader, int first) throws IOException {\n    if (reader.maxDoc() == first) {\n      return;\n    }\n    \n    // it's ok to use MultiTerms because we only iterate on one posting list.\n    // breaking it to loop over the leaves() only complicates code for no\n    // apparent gain.\n    PostingsEnum positions = MultiTerms.getTermPostingsEnum(reader,\n        Consts.FIELD_PAYLOADS, Consts.PAYLOAD_PARENT_BYTES_REF,\n        PostingsEnum.PAYLOADS);\n\n    // shouldn't really happen, if it does, something's wrong\n    if (positions == null || positions.advance(first) == DocIdSetIterator.NO_MORE_DOCS) {\n      throw new CorruptIndexException(\"Missing parent data for category \" + first, reader.toString());\n    }\n    \n    int num = reader.maxDoc();\n    for (int i = first; i < num; i++) {\n      if (positions.docID() == i) {\n        if (positions.freq() == 0) { // shouldn't happen\n          throw new CorruptIndexException(\"Missing parent data for category \" + i, reader.toString());\n        }\n        \n        parents[i] = positions.nextPosition();\n        \n        if (positions.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n          if (i + 1 < num) {\n            throw new CorruptIndexException(\"Missing parent data for category \"+ (i + 1), reader.toString());\n          }\n          break;\n        }\n      } else { // this shouldn't happen\n        throw new CorruptIndexException(\"Missing parent data for category \" + i, reader.toString());\n      }\n    }\n  }\n\n","sourceOld":"  // Read the parents of the new categories\n  private void initParents(IndexReader reader, int first) throws IOException {\n    if (reader.maxDoc() == first) {\n      return;\n    }\n    \n    // it's ok to use MultiFields because we only iterate on one posting list.\n    // breaking it to loop over the leaves() only complicates code for no\n    // apparent gain.\n    PostingsEnum positions = MultiFields.getTermPositionsEnum(reader,\n        Consts.FIELD_PAYLOADS, Consts.PAYLOAD_PARENT_BYTES_REF,\n        PostingsEnum.PAYLOADS);\n\n    // shouldn't really happen, if it does, something's wrong\n    if (positions == null || positions.advance(first) == DocIdSetIterator.NO_MORE_DOCS) {\n      throw new CorruptIndexException(\"Missing parent data for category \" + first, reader.toString());\n    }\n    \n    int num = reader.maxDoc();\n    for (int i = first; i < num; i++) {\n      if (positions.docID() == i) {\n        if (positions.freq() == 0) { // shouldn't happen\n          throw new CorruptIndexException(\"Missing parent data for category \" + i, reader.toString());\n        }\n        \n        parents[i] = positions.nextPosition();\n        \n        if (positions.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n          if (i + 1 < num) {\n            throw new CorruptIndexException(\"Missing parent data for category \"+ (i + 1), reader.toString());\n          }\n          break;\n        }\n      } else { // this shouldn't happen\n        throw new CorruptIndexException(\"Missing parent data for category \" + i, reader.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f2ae7e371df56ccde467b71db7e82066f05a5972":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["f2ae7e371df56ccde467b71db7e82066f05a5972"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"51f5280f31484820499077f41fcdfe92d527d9dc":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"f2ae7e371df56ccde467b71db7e82066f05a5972":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f2ae7e371df56ccde467b71db7e82066f05a5972"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}