{"path":"src/java/org/apache/lucene/util/PriorityQueue#insertWithOverflow(T).mjava","commits":[{"id":"8d48430886f0d62ca63d20bf2a8bc01acee0c12f","date":1254504483,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/PriorityQueue#insertWithOverflow(T).mjava","pathOld":"src/java/org/apache/lucene/util/PriorityQueue#insertWithOverflow(Object).mjava","sourceNew":"  /**\n   * insertWithOverflow() is the same as insert() except its\n   * return value: it returns the object (if any) that was\n   * dropped off the heap because it was full. This can be\n   * the given parameter (in case it is smaller than the\n   * full heap's minimum, and couldn't be added), or another\n   * object that was previously the smallest value in the\n   * heap and now has been replaced by a larger one, or null\n   * if the queue wasn't yet full with maxSize elements.\n   */\n  public T insertWithOverflow(T element) {\n    if (size < maxSize) {\n      put(element);\n      return null;\n    } else if (size > 0 && !lessThan(element, heap[1])) {\n      T ret = heap[1];\n      heap[1] = element;\n      adjustTop();\n      return ret;\n    } else {\n      return element;\n    }\n  }\n\n","sourceOld":"  /**\n   * insertWithOverflow() is the same as insert() except its\n   * return value: it returns the object (if any) that was\n   * dropped off the heap because it was full. This can be\n   * the given parameter (in case it is smaller than the\n   * full heap's minimum, and couldn't be added), or another\n   * object that was previously the smallest value in the\n   * heap and now has been replaced by a larger one, or null\n   * if the queue wasn't yet full with maxSize elements.\n   */\n  public Object insertWithOverflow(Object element) {\n    if (size < maxSize) {\n      put(element);\n      return null;\n    } else if (size > 0 && !lessThan(element, heap[1])) {\n      Object ret = heap[1];\n      heap[1] = element;\n      adjustTop();\n      return ret;\n    } else {\n      return element;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0731e137bcbb58121034de6ddaa67332fbe6e5d1","date":1255233265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/PriorityQueue#insertWithOverflow(T).mjava","pathOld":"src/java/org/apache/lucene/util/PriorityQueue#insertWithOverflow(T).mjava","sourceNew":"  /**\n   * insertWithOverflow() is the same as insert() except its\n   * return value: it returns the object (if any) that was\n   * dropped off the heap because it was full. This can be\n   * the given parameter (in case it is smaller than the\n   * full heap's minimum, and couldn't be added), or another\n   * object that was previously the smallest value in the\n   * heap and now has been replaced by a larger one, or null\n   * if the queue wasn't yet full with maxSize elements.\n   */\n  public T insertWithOverflow(T element) {\n    if (size < maxSize) {\n      add(element);\n      return null;\n    } else if (size > 0 && !lessThan(element, heap[1])) {\n      T ret = heap[1];\n      heap[1] = element;\n      updateTop();\n      return ret;\n    } else {\n      return element;\n    }\n  }\n\n","sourceOld":"  /**\n   * insertWithOverflow() is the same as insert() except its\n   * return value: it returns the object (if any) that was\n   * dropped off the heap because it was full. This can be\n   * the given parameter (in case it is smaller than the\n   * full heap's minimum, and couldn't be added), or another\n   * object that was previously the smallest value in the\n   * heap and now has been replaced by a larger one, or null\n   * if the queue wasn't yet full with maxSize elements.\n   */\n  public T insertWithOverflow(T element) {\n    if (size < maxSize) {\n      put(element);\n      return null;\n    } else if (size > 0 && !lessThan(element, heap[1])) {\n      T ret = heap[1];\n      heap[1] = element;\n      adjustTop();\n      return ret;\n    } else {\n      return element;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"524e6f7397170560d653db19c2fcf7a75c868464","date":1255266959,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/PriorityQueue#insertWithOverflow(T).mjava","pathOld":"src/java/org/apache/lucene/util/PriorityQueue#insertWithOverflow(T).mjava","sourceNew":"  /**\n   * Adds an Object to a PriorityQueue in log(size) time.\n   * It returns the object (if any) that was\n   * dropped off the heap because it was full. This can be\n   * the given parameter (in case it is smaller than the\n   * full heap's minimum, and couldn't be added), or another\n   * object that was previously the smallest value in the\n   * heap and now has been replaced by a larger one, or null\n   * if the queue wasn't yet full with maxSize elements.\n   */\n  public T insertWithOverflow(T element) {\n    if (size < maxSize) {\n      add(element);\n      return null;\n    } else if (size > 0 && !lessThan(element, heap[1])) {\n      T ret = heap[1];\n      heap[1] = element;\n      updateTop();\n      return ret;\n    } else {\n      return element;\n    }\n  }\n\n","sourceOld":"  /**\n   * insertWithOverflow() is the same as insert() except its\n   * return value: it returns the object (if any) that was\n   * dropped off the heap because it was full. This can be\n   * the given parameter (in case it is smaller than the\n   * full heap's minimum, and couldn't be added), or another\n   * object that was previously the smallest value in the\n   * heap and now has been replaced by a larger one, or null\n   * if the queue wasn't yet full with maxSize elements.\n   */\n  public T insertWithOverflow(T element) {\n    if (size < maxSize) {\n      add(element);\n      return null;\n    } else if (size > 0 && !lessThan(element, heap[1])) {\n      T ret = heap[1];\n      heap[1] = element;\n      updateTop();\n      return ret;\n    } else {\n      return element;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PriorityQueue#insertWithOverflow(T).mjava","pathOld":"src/java/org/apache/lucene/util/PriorityQueue#insertWithOverflow(T).mjava","sourceNew":"  /**\n   * Adds an Object to a PriorityQueue in log(size) time.\n   * It returns the object (if any) that was\n   * dropped off the heap because it was full. This can be\n   * the given parameter (in case it is smaller than the\n   * full heap's minimum, and couldn't be added), or another\n   * object that was previously the smallest value in the\n   * heap and now has been replaced by a larger one, or null\n   * if the queue wasn't yet full with maxSize elements.\n   */\n  public T insertWithOverflow(T element) {\n    if (size < maxSize) {\n      add(element);\n      return null;\n    } else if (size > 0 && !lessThan(element, heap[1])) {\n      T ret = heap[1];\n      heap[1] = element;\n      updateTop();\n      return ret;\n    } else {\n      return element;\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds an Object to a PriorityQueue in log(size) time.\n   * It returns the object (if any) that was\n   * dropped off the heap because it was full. This can be\n   * the given parameter (in case it is smaller than the\n   * full heap's minimum, and couldn't be added), or another\n   * object that was previously the smallest value in the\n   * heap and now has been replaced by a larger one, or null\n   * if the queue wasn't yet full with maxSize elements.\n   */\n  public T insertWithOverflow(T element) {\n    if (size < maxSize) {\n      add(element);\n      return null;\n    } else if (size > 0 && !lessThan(element, heap[1])) {\n      T ret = heap[1];\n      heap[1] = element;\n      updateTop();\n      return ret;\n    } else {\n      return element;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"524e6f7397170560d653db19c2fcf7a75c868464":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["8d48430886f0d62ca63d20bf2a8bc01acee0c12f"],"8d48430886f0d62ca63d20bf2a8bc01acee0c12f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["524e6f7397170560d653db19c2fcf7a75c868464"]},"commit2Childs":{"524e6f7397170560d653db19c2fcf7a75c868464":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8d48430886f0d62ca63d20bf2a8bc01acee0c12f"],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["524e6f7397170560d653db19c2fcf7a75c868464"],"8d48430886f0d62ca63d20bf2a8bc01acee0c12f":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}