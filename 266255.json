{"path":"lucene/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#idfExplain(TermContext,IndexSearcher).mjava","commits":[{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#idfExplain(TermContext,IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TFIDFSimilarity#idfExplain(TermContext,IndexSearcher).mjava","sourceNew":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link IndexSearcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link IndexSearcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link IndexSearcher#maxDoc()}, and in the same direction.\n   * In addition, {@link IndexSearcher#maxDoc()} is more efficient to compute\n   *   \n   * @param stats statistics of the term in question\n   * @param searcher the document collection being searched\n   * @return an Explain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public Explanation idfExplain(TermContext stats, final IndexSearcher searcher) throws IOException {\n    final int df = stats.docFreq();\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new Explanation(idf, \"idf(docFreq=\" + df + \", maxDocs=\" + max + \")\");\n  }\n\n","sourceOld":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link IndexSearcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link IndexSearcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link IndexSearcher#maxDoc()}, and in the same direction.\n   * In addition, {@link IndexSearcher#maxDoc()} is more efficient to compute\n   *   \n   * @param stats statistics of the term in question\n   * @param searcher the document collection being searched\n   * @return an Explain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public Explanation idfExplain(TermContext stats, final IndexSearcher searcher) throws IOException {\n    final int df = stats.docFreq();\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new Explanation(idf, \"idf(docFreq=\" + df + \", maxDocs=\" + max + \")\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d","date":1320398636,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#idfExplain(CollectionStatistics,TermStatistics).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#idfExplain(TermContext,IndexSearcher).mjava","sourceNew":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link IndexSearcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link IndexSearcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link IndexSearcher#maxDoc()}, and in the same direction.\n   * In addition, {@link IndexSearcher#maxDoc()} is more efficient to compute\n   *   \n   * @param collectionStats collection-level statistics\n   * @param termStats term-level statistics for the term\n   * @return an Explain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats) {\n    final int df = termStats.docFreq();\n    final int max = collectionStats.maxDoc();\n    final float idf = idf(df, max);\n    return new Explanation(idf, \"idf(docFreq=\" + df + \", maxDocs=\" + max + \")\");\n  }\n\n","sourceOld":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link IndexSearcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link IndexSearcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link IndexSearcher#maxDoc()}, and in the same direction.\n   * In addition, {@link IndexSearcher#maxDoc()} is more efficient to compute\n   *   \n   * @param stats statistics of the term in question\n   * @param searcher the document collection being searched\n   * @return an Explain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public Explanation idfExplain(TermContext stats, final IndexSearcher searcher) throws IOException {\n    final int df = stats.docFreq();\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new Explanation(idf, \"idf(docFreq=\" + df + \", maxDocs=\" + max + \")\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d"]},"commit2Childs":{"9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}