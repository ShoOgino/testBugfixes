{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#deleteChildrenRecursively(String).mjava","commits":[{"id":"c32a8448145a74a8902798f2e63e322827757ff2","date":1496834422,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#deleteChildrenRecursively(String).mjava","pathOld":"/dev/null","sourceNew":"  private void deleteChildrenRecursively(String path) throws Exception {\n    List<String> paths = zkClient().getChildren(path, null, true);\n    paths.forEach(n -> {\n      try {\n        ZKUtil.deleteRecursive(zkClient().getSolrZooKeeper(), path + \"/\" + n);\n      } catch (KeeperException.NoNodeException e) {\n        // ignore\n      } catch (KeeperException | InterruptedException e) {\n        log.warn(\"Error deleting old data\", e);\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"664ff2b928393480d9655010aa700656b0fcade0","date":1496842764,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#deleteChildrenRecursively(String).mjava","pathOld":"/dev/null","sourceNew":"  private void deleteChildrenRecursively(String path) throws Exception {\n    List<String> paths = zkClient().getChildren(path, null, true);\n    paths.forEach(n -> {\n      try {\n        ZKUtil.deleteRecursive(zkClient().getSolrZooKeeper(), path + \"/\" + n);\n      } catch (KeeperException.NoNodeException e) {\n        // ignore\n      } catch (KeeperException | InterruptedException e) {\n        log.warn(\"Error deleting old data\", e);\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#deleteChildrenRecursively(String).mjava","pathOld":"/dev/null","sourceNew":"  private void deleteChildrenRecursively(String path) throws Exception {\n    List<String> paths = zkClient().getChildren(path, null, true);\n    paths.forEach(n -> {\n      try {\n        ZKUtil.deleteRecursive(zkClient().getSolrZooKeeper(), path + \"/\" + n);\n      } catch (KeeperException.NoNodeException e) {\n        // ignore\n      } catch (KeeperException | InterruptedException e) {\n        log.warn(\"Error deleting old data\", e);\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#deleteChildrenRecursively(String).mjava","pathOld":"/dev/null","sourceNew":"  private void deleteChildrenRecursively(String path) throws Exception {\n    List<String> paths = zkClient().getChildren(path, null, true);\n    paths.forEach(n -> {\n      try {\n        ZKUtil.deleteRecursive(zkClient().getSolrZooKeeper(), path + \"/\" + n);\n      } catch (KeeperException.NoNodeException e) {\n        // ignore\n      } catch (KeeperException | InterruptedException e) {\n        log.warn(\"Error deleting old data\", e);\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e3e55745c6667006f67aaa604466b9974425f4","date":1518776937,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#deleteChildrenRecursively(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#deleteChildrenRecursively(String).mjava","sourceNew":"  private void deleteChildrenRecursively(String path) throws Exception {\n    cloudManager.getDistribStateManager().removeRecursively(path, true, false);\n  }\n\n","sourceOld":"  private void deleteChildrenRecursively(String path) throws Exception {\n    List<String> paths = zkClient().getChildren(path, null, true);\n    paths.forEach(n -> {\n      try {\n        ZKUtil.deleteRecursive(zkClient().getSolrZooKeeper(), path + \"/\" + n);\n      } catch (KeeperException.NoNodeException e) {\n        // ignore\n      } catch (KeeperException | InterruptedException e) {\n        log.warn(\"Error deleting old data\", e);\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#deleteChildrenRecursively(String).mjava","sourceNew":null,"sourceOld":"  private void deleteChildrenRecursively(String path) throws Exception {\n    cloudManager.getDistribStateManager().removeRecursively(path, true, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","664ff2b928393480d9655010aa700656b0fcade0"],"3f504512a03d978990cbff30db0522b354e846db":["01e3e55745c6667006f67aaa604466b9974425f4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c32a8448145a74a8902798f2e63e322827757ff2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"01e3e55745c6667006f67aaa604466b9974425f4":["560c18d71dad43d675158783c3840f8c80d6d39c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"664ff2b928393480d9655010aa700656b0fcade0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c32a8448145a74a8902798f2e63e322827757ff2"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","c32a8448145a74a8902798f2e63e322827757ff2","560c18d71dad43d675158783c3840f8c80d6d39c","664ff2b928393480d9655010aa700656b0fcade0"],"c32a8448145a74a8902798f2e63e322827757ff2":["664ff2b928393480d9655010aa700656b0fcade0"],"560c18d71dad43d675158783c3840f8c80d6d39c":["01e3e55745c6667006f67aaa604466b9974425f4"],"01e3e55745c6667006f67aaa604466b9974425f4":["3f504512a03d978990cbff30db0522b354e846db"],"664ff2b928393480d9655010aa700656b0fcade0":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}