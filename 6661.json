{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#initIter(Shape).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#initIter(Shape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#initIter(Shape).mjava","sourceNew":"    private void initIter(Shape filter) {\n      cellNumber = -1;\n      if (filter instanceof UnitNRShape && ((UnitNRShape) filter).getLevel() == 0)\n        filter = null;//world means everything -- no filter\n      iterFilter = filter;\n\n      NRCell parent = getShapeAtLevel(getLevel() - 1);\n\n      // Initialize iter* members.\n\n      //no filter means all subcells\n      if (filter == null) {\n        iterFirstCellNumber = 0;\n        iterFirstIsIntersects = false;\n        iterLastCellNumber = getNumSubCells(parent) - 1;\n        iterLastIsIntersects = false;\n        return;\n      }\n\n      final UnitNRShape minLV;\n      final UnitNRShape maxLV;\n      final int lastLevelInCommon;//between minLV & maxLV\n      if (filter instanceof SpanUnitsNRShape) {\n        SpanUnitsNRShape spanShape = (SpanUnitsNRShape) iterFilter;\n        minLV = spanShape.getMinUnit();\n        maxLV = spanShape.getMaxUnit();\n        lastLevelInCommon = spanShape.getLevelsInCommon();\n      } else {\n        minLV = (UnitNRShape) iterFilter;\n        maxLV = minLV;\n        lastLevelInCommon = minLV.getLevel();\n      }\n\n      //fast path optimization that is usually true, but never first level\n      if (iterFilter == parent.iterFilter &&\n          (getLevel() <= lastLevelInCommon || parent.iterFirstCellNumber != parent.iterLastCellNumber)) {\n        //TODO benchmark if this optimization pays off. We avoid two comparePrefixLV calls.\n        if (parent.iterFirstIsIntersects && parent.cellNumber == parent.iterFirstCellNumber\n            && minLV.getLevel() >= getLevel()) {\n          iterFirstCellNumber = minLV.getValAtLevel(getLevel());\n          iterFirstIsIntersects = (minLV.getLevel() > getLevel());\n        } else {\n          iterFirstCellNumber = 0;\n          iterFirstIsIntersects = false;\n        }\n        if (parent.iterLastIsIntersects && parent.cellNumber == parent.iterLastCellNumber\n            && maxLV.getLevel() >= getLevel()) {\n          iterLastCellNumber = maxLV.getValAtLevel(getLevel());\n          iterLastIsIntersects = (maxLV.getLevel() > getLevel());\n        } else {\n          iterLastCellNumber = getNumSubCells(parent) - 1;\n          iterLastIsIntersects = false;\n        }\n        if (iterFirstCellNumber == iterLastCellNumber) {\n          if (iterLastIsIntersects)\n            iterFirstIsIntersects = true;\n          else if (iterFirstIsIntersects)\n            iterLastIsIntersects = true;\n        }\n        return;\n      }\n\n      //not common to get here, except for level 1 which always happens\n\n      int startCmp = comparePrefix(minLV, parent);\n      if (startCmp > 0) {//start comes after this cell\n        iterFirstCellNumber = 0;\n        iterFirstIsIntersects = false;\n        iterLastCellNumber = -1;//so ends early (no cells)\n        iterLastIsIntersects = false;\n        return;\n      }\n      int endCmp = comparePrefix(maxLV, parent);//compare to end cell\n      if (endCmp < 0) {//end comes before this cell\n        iterFirstCellNumber = 0;\n        iterFirstIsIntersects = false;\n        iterLastCellNumber = -1;//so ends early (no cells)\n        iterLastIsIntersects = false;\n        return;\n      }\n      if (startCmp < 0 || minLV.getLevel() < getLevel()) {\n        //start comes before...\n        iterFirstCellNumber = 0;\n        iterFirstIsIntersects = false;\n      } else {\n        iterFirstCellNumber = minLV.getValAtLevel(getLevel());\n        iterFirstIsIntersects = (minLV.getLevel() > getLevel());\n      }\n      if (endCmp > 0 || maxLV.getLevel() < getLevel()) {\n        //end comes after...\n        iterLastCellNumber = getNumSubCells(parent) - 1;\n        iterLastIsIntersects = false;\n      } else {\n        iterLastCellNumber = maxLV.getValAtLevel(getLevel());\n        iterLastIsIntersects = (maxLV.getLevel() > getLevel());\n      }\n      if (iterFirstCellNumber == iterLastCellNumber) {\n        if (iterLastIsIntersects)\n          iterFirstIsIntersects = true;\n        else if (iterFirstIsIntersects)\n          iterLastIsIntersects = true;\n      }\n    }\n\n","sourceOld":"    private void initIter(Shape filter) {\n      cellNumber = -1;\n      if (filter instanceof UnitNRShape && ((UnitNRShape) filter).getLevel() == 0)\n        filter = null;//world means everything -- no filter\n      iterFilter = filter;\n\n      NRCell parent = getShapeAtLevel(getLevel() - 1);\n\n      // Initialize iter* members.\n\n      //no filter means all subcells\n      if (filter == null) {\n        iterFirstCellNumber = 0;\n        iterFirstIsIntersects = false;\n        iterLastCellNumber = getNumSubCells(parent) - 1;\n        iterLastIsIntersects = false;\n        return;\n      }\n\n      final UnitNRShape minLV;\n      final UnitNRShape maxLV;\n      final int lastLevelInCommon;//between minLV & maxLV\n      if (filter instanceof SpanUnitsNRShape) {\n        SpanUnitsNRShape spanShape = (SpanUnitsNRShape) iterFilter;\n        minLV = spanShape.getMinUnit();\n        maxLV = spanShape.getMaxUnit();\n        lastLevelInCommon = spanShape.getLevelsInCommon();\n      } else {\n        minLV = (UnitNRShape) iterFilter;\n        maxLV = minLV;\n        lastLevelInCommon = minLV.getLevel();\n      }\n\n      //fast path optimization that is usually true, but never first level\n      if (iterFilter == parent.iterFilter &&\n          (getLevel() <= lastLevelInCommon || parent.iterFirstCellNumber != parent.iterLastCellNumber)) {\n        //TODO benchmark if this optimization pays off. We avoid two comparePrefixLV calls.\n        if (parent.iterFirstIsIntersects && parent.cellNumber == parent.iterFirstCellNumber\n            && minLV.getLevel() >= getLevel()) {\n          iterFirstCellNumber = minLV.getValAtLevel(getLevel());\n          iterFirstIsIntersects = (minLV.getLevel() > getLevel());\n        } else {\n          iterFirstCellNumber = 0;\n          iterFirstIsIntersects = false;\n        }\n        if (parent.iterLastIsIntersects && parent.cellNumber == parent.iterLastCellNumber\n            && maxLV.getLevel() >= getLevel()) {\n          iterLastCellNumber = maxLV.getValAtLevel(getLevel());\n          iterLastIsIntersects = (maxLV.getLevel() > getLevel());\n        } else {\n          iterLastCellNumber = getNumSubCells(parent) - 1;\n          iterLastIsIntersects = false;\n        }\n        if (iterFirstCellNumber == iterLastCellNumber) {\n          if (iterLastIsIntersects)\n            iterFirstIsIntersects = true;\n          else if (iterFirstIsIntersects)\n            iterLastIsIntersects = true;\n        }\n        return;\n      }\n\n      //not common to get here, except for level 1 which always happens\n\n      int startCmp = comparePrefix(minLV, parent);\n      if (startCmp > 0) {//start comes after this cell\n        iterFirstCellNumber = 0;\n        iterFirstIsIntersects = false;\n        iterLastCellNumber = -1;//so ends early (no cells)\n        iterLastIsIntersects = false;\n        return;\n      }\n      int endCmp = comparePrefix(maxLV, parent);//compare to end cell\n      if (endCmp < 0) {//end comes before this cell\n        iterFirstCellNumber = 0;\n        iterFirstIsIntersects = false;\n        iterLastCellNumber = -1;//so ends early (no cells)\n        iterLastIsIntersects = false;\n        return;\n      }\n      if (startCmp < 0 || minLV.getLevel() < getLevel()) {\n        //start comes before...\n        iterFirstCellNumber = 0;\n        iterFirstIsIntersects = false;\n      } else {\n        iterFirstCellNumber = minLV.getValAtLevel(getLevel());\n        iterFirstIsIntersects = (minLV.getLevel() > getLevel());\n      }\n      if (endCmp > 0 || maxLV.getLevel() < getLevel()) {\n        //end comes after...\n        iterLastCellNumber = getNumSubCells(parent) - 1;\n        iterLastIsIntersects = false;\n      } else {\n        iterLastCellNumber = maxLV.getValAtLevel(getLevel());\n        iterLastIsIntersects = (maxLV.getLevel() > getLevel());\n      }\n      if (iterFirstCellNumber == iterLastCellNumber) {\n        if (iterLastIsIntersects)\n          iterFirstIsIntersects = true;\n        else if (iterFirstIsIntersects)\n          iterLastIsIntersects = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#initIter(Shape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#initIter(Shape).mjava","sourceNew":"    private void initIter(Shape filter) {\n      cellNumber = -1;\n      if (filter instanceof UnitNRShape && ((UnitNRShape) filter).getLevel() == 0)\n        filter = null;//world means everything -- no filter\n      iterFilter = filter;\n\n      NRCell parent = getShapeAtLevel(getLevel() - 1);\n\n      // Initialize iter* members.\n\n      //no filter means all subcells\n      if (filter == null) {\n        iterFirstCellNumber = 0;\n        iterFirstIsIntersects = false;\n        iterLastCellNumber = getNumSubCells(parent) - 1;\n        iterLastIsIntersects = false;\n        return;\n      }\n\n      final UnitNRShape minLV;\n      final UnitNRShape maxLV;\n      final int lastLevelInCommon;//between minLV & maxLV\n      if (filter instanceof SpanUnitsNRShape) {\n        SpanUnitsNRShape spanShape = (SpanUnitsNRShape) iterFilter;\n        minLV = spanShape.getMinUnit();\n        maxLV = spanShape.getMaxUnit();\n        lastLevelInCommon = spanShape.getLevelsInCommon();\n      } else {\n        minLV = (UnitNRShape) iterFilter;\n        maxLV = minLV;\n        lastLevelInCommon = minLV.getLevel();\n      }\n\n      //fast path optimization that is usually true, but never first level\n      if (iterFilter == parent.iterFilter &&\n          (getLevel() <= lastLevelInCommon || parent.iterFirstCellNumber != parent.iterLastCellNumber)) {\n        //TODO benchmark if this optimization pays off. We avoid two comparePrefixLV calls.\n        if (parent.iterFirstIsIntersects && parent.cellNumber == parent.iterFirstCellNumber\n            && minLV.getLevel() >= getLevel()) {\n          iterFirstCellNumber = minLV.getValAtLevel(getLevel());\n          iterFirstIsIntersects = (minLV.getLevel() > getLevel());\n        } else {\n          iterFirstCellNumber = 0;\n          iterFirstIsIntersects = false;\n        }\n        if (parent.iterLastIsIntersects && parent.cellNumber == parent.iterLastCellNumber\n            && maxLV.getLevel() >= getLevel()) {\n          iterLastCellNumber = maxLV.getValAtLevel(getLevel());\n          iterLastIsIntersects = (maxLV.getLevel() > getLevel());\n        } else {\n          iterLastCellNumber = getNumSubCells(parent) - 1;\n          iterLastIsIntersects = false;\n        }\n        if (iterFirstCellNumber == iterLastCellNumber) {\n          if (iterLastIsIntersects)\n            iterFirstIsIntersects = true;\n          else if (iterFirstIsIntersects)\n            iterLastIsIntersects = true;\n        }\n        return;\n      }\n\n      //not common to get here, except for level 1 which always happens\n\n      int startCmp = comparePrefix(minLV, parent);\n      if (startCmp > 0) {//start comes after this cell\n        iterFirstCellNumber = 0;\n        iterFirstIsIntersects = false;\n        iterLastCellNumber = -1;//so ends early (no cells)\n        iterLastIsIntersects = false;\n        return;\n      }\n      int endCmp = comparePrefix(maxLV, parent);//compare to end cell\n      if (endCmp < 0) {//end comes before this cell\n        iterFirstCellNumber = 0;\n        iterFirstIsIntersects = false;\n        iterLastCellNumber = -1;//so ends early (no cells)\n        iterLastIsIntersects = false;\n        return;\n      }\n      if (startCmp < 0 || minLV.getLevel() < getLevel()) {\n        //start comes before...\n        iterFirstCellNumber = 0;\n        iterFirstIsIntersects = false;\n      } else {\n        iterFirstCellNumber = minLV.getValAtLevel(getLevel());\n        iterFirstIsIntersects = (minLV.getLevel() > getLevel());\n      }\n      if (endCmp > 0 || maxLV.getLevel() < getLevel()) {\n        //end comes after...\n        iterLastCellNumber = getNumSubCells(parent) - 1;\n        iterLastIsIntersects = false;\n      } else {\n        iterLastCellNumber = maxLV.getValAtLevel(getLevel());\n        iterLastIsIntersects = (maxLV.getLevel() > getLevel());\n      }\n      if (iterFirstCellNumber == iterLastCellNumber) {\n        if (iterLastIsIntersects)\n          iterFirstIsIntersects = true;\n        else if (iterFirstIsIntersects)\n          iterLastIsIntersects = true;\n      }\n    }\n\n","sourceOld":"    private void initIter(Shape filter) {\n      cellNumber = -1;\n      if (filter instanceof UnitNRShape && ((UnitNRShape) filter).getLevel() == 0)\n        filter = null;//world means everything -- no filter\n      iterFilter = filter;\n\n      NRCell parent = getShapeAtLevel(getLevel() - 1);\n\n      // Initialize iter* members.\n\n      //no filter means all subcells\n      if (filter == null) {\n        iterFirstCellNumber = 0;\n        iterFirstIsIntersects = false;\n        iterLastCellNumber = getNumSubCells(parent) - 1;\n        iterLastIsIntersects = false;\n        return;\n      }\n\n      final UnitNRShape minLV;\n      final UnitNRShape maxLV;\n      final int lastLevelInCommon;//between minLV & maxLV\n      if (filter instanceof SpanUnitsNRShape) {\n        SpanUnitsNRShape spanShape = (SpanUnitsNRShape) iterFilter;\n        minLV = spanShape.getMinUnit();\n        maxLV = spanShape.getMaxUnit();\n        lastLevelInCommon = spanShape.getLevelsInCommon();\n      } else {\n        minLV = (UnitNRShape) iterFilter;\n        maxLV = minLV;\n        lastLevelInCommon = minLV.getLevel();\n      }\n\n      //fast path optimization that is usually true, but never first level\n      if (iterFilter == parent.iterFilter &&\n          (getLevel() <= lastLevelInCommon || parent.iterFirstCellNumber != parent.iterLastCellNumber)) {\n        //TODO benchmark if this optimization pays off. We avoid two comparePrefixLV calls.\n        if (parent.iterFirstIsIntersects && parent.cellNumber == parent.iterFirstCellNumber\n            && minLV.getLevel() >= getLevel()) {\n          iterFirstCellNumber = minLV.getValAtLevel(getLevel());\n          iterFirstIsIntersects = (minLV.getLevel() > getLevel());\n        } else {\n          iterFirstCellNumber = 0;\n          iterFirstIsIntersects = false;\n        }\n        if (parent.iterLastIsIntersects && parent.cellNumber == parent.iterLastCellNumber\n            && maxLV.getLevel() >= getLevel()) {\n          iterLastCellNumber = maxLV.getValAtLevel(getLevel());\n          iterLastIsIntersects = (maxLV.getLevel() > getLevel());\n        } else {\n          iterLastCellNumber = getNumSubCells(parent) - 1;\n          iterLastIsIntersects = false;\n        }\n        if (iterFirstCellNumber == iterLastCellNumber) {\n          if (iterLastIsIntersects)\n            iterFirstIsIntersects = true;\n          else if (iterFirstIsIntersects)\n            iterLastIsIntersects = true;\n        }\n        return;\n      }\n\n      //not common to get here, except for level 1 which always happens\n\n      int startCmp = comparePrefix(minLV, parent);\n      if (startCmp > 0) {//start comes after this cell\n        iterFirstCellNumber = 0;\n        iterFirstIsIntersects = false;\n        iterLastCellNumber = -1;//so ends early (no cells)\n        iterLastIsIntersects = false;\n        return;\n      }\n      int endCmp = comparePrefix(maxLV, parent);//compare to end cell\n      if (endCmp < 0) {//end comes before this cell\n        iterFirstCellNumber = 0;\n        iterFirstIsIntersects = false;\n        iterLastCellNumber = -1;//so ends early (no cells)\n        iterLastIsIntersects = false;\n        return;\n      }\n      if (startCmp < 0 || minLV.getLevel() < getLevel()) {\n        //start comes before...\n        iterFirstCellNumber = 0;\n        iterFirstIsIntersects = false;\n      } else {\n        iterFirstCellNumber = minLV.getValAtLevel(getLevel());\n        iterFirstIsIntersects = (minLV.getLevel() > getLevel());\n      }\n      if (endCmp > 0 || maxLV.getLevel() < getLevel()) {\n        //end comes after...\n        iterLastCellNumber = getNumSubCells(parent) - 1;\n        iterLastIsIntersects = false;\n      } else {\n        iterLastCellNumber = maxLV.getValAtLevel(getLevel());\n        iterLastIsIntersects = (maxLV.getLevel() > getLevel());\n      }\n      if (iterFirstCellNumber == iterLastCellNumber) {\n        if (iterLastIsIntersects)\n          iterFirstIsIntersects = true;\n        else if (iterFirstIsIntersects)\n          iterLastIsIntersects = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}