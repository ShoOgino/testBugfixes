{"path":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","commits":[{"id":"edc9ac4bba51b8acbb06a7fcd75347f7fb8b10d9","date":1318854139,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","pathOld":"/dev/null","sourceNew":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random, rd1);\n    Document doc = new Document();\n    doc.add(newField(fieldName, \"content1\", StringField.TYPE_STORED));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random, rd2);\n    doc = new Document();\n    doc.add(newField(fieldName, \"content2\", StringField.TYPE_STORED));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"content1\"));\n    \n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (IndexReader.AtomicReaderContext context : ReaderUtil.leaves(multi.getTopReaderContext())) {\n      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context);\n      assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf","04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","sourceNew":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random, rd1);\n    Document doc = new Document();\n    doc.add(newField(fieldName, \"content1\", StringField.TYPE_STORED));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random, rd2);\n    doc = new Document();\n    doc.add(newField(fieldName, \"content2\", StringField.TYPE_STORED));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"content1\"));\n    \n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (IndexReader.AtomicReaderContext context : ReaderUtil.leaves(multi.getTopReaderContext())) {\n      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader.getLiveDocs());\n      assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random, rd1);\n    Document doc = new Document();\n    doc.add(newField(fieldName, \"content1\", StringField.TYPE_STORED));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random, rd2);\n    doc = new Document();\n    doc.add(newField(fieldName, \"content2\", StringField.TYPE_STORED));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"content1\"));\n    \n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (IndexReader.AtomicReaderContext context : ReaderUtil.leaves(multi.getTopReaderContext())) {\n      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context);\n      assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61e20f33ce8ff701576366fdb03955eded5f209b","date":1327852832,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","sourceNew":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random, rd1);\n    Document doc = new Document();\n    doc.add(newField(fieldName, \"content1\", StringField.TYPE_STORED));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random, rd2);\n    doc = new Document();\n    doc.add(newField(fieldName, \"content2\", StringField.TYPE_STORED));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"content1\"));\n    \n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : ReaderUtil.leaves(multi.getTopReaderContext())) {\n      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n      assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random, rd1);\n    Document doc = new Document();\n    doc.add(newField(fieldName, \"content1\", StringField.TYPE_STORED));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random, rd2);\n    doc = new Document();\n    doc.add(newField(fieldName, \"content2\", StringField.TYPE_STORED));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"content1\"));\n    \n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (IndexReader.AtomicReaderContext context : ReaderUtil.leaves(multi.getTopReaderContext())) {\n      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader.getLiveDocs());\n      assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":null,"bugIntro":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","sourceNew":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random, rd1);\n    Document doc = new Document();\n    doc.add(newField(fieldName, \"content1\", StringField.TYPE_STORED));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random, rd2);\n    doc = new Document();\n    doc.add(newField(fieldName, \"content2\", StringField.TYPE_STORED));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"content1\"));\n    \n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : ReaderUtil.leaves(multi.getTopReaderContext())) {\n      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n      assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random, rd1);\n    Document doc = new Document();\n    doc.add(newField(fieldName, \"content1\", StringField.TYPE_STORED));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random, rd2);\n    doc = new Document();\n    doc.add(newField(fieldName, \"content2\", StringField.TYPE_STORED));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"content1\"));\n    \n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (IndexReader.AtomicReaderContext context : ReaderUtil.leaves(multi.getTopReaderContext())) {\n      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader.getLiveDocs());\n      assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8","date":1328775259,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","sourceNew":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random, rd1);\n    Document doc = new Document();\n    doc.add(newField(fieldName, \"content1\", StringField.TYPE_STORED));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random, rd2);\n    doc = new Document();\n    doc.add(newField(fieldName, \"content2\", StringField.TYPE_STORED));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"content1\"));\n    \n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : multi.getTopReaderContext().leaves()) {\n      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n      assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random, rd1);\n    Document doc = new Document();\n    doc.add(newField(fieldName, \"content1\", StringField.TYPE_STORED));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random, rd2);\n    doc = new Document();\n    doc.add(newField(fieldName, \"content2\", StringField.TYPE_STORED));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"content1\"));\n    \n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : ReaderUtil.leaves(multi.getTopReaderContext())) {\n      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n      assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":null,"bugIntro":["d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","sourceNew":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newField(fieldName, \"content1\", StringField.TYPE_STORED));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newField(fieldName, \"content2\", StringField.TYPE_STORED));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"content1\"));\n    \n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : multi.getTopReaderContext().leaves()) {\n      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n      assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random, rd1);\n    Document doc = new Document();\n    doc.add(newField(fieldName, \"content1\", StringField.TYPE_STORED));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random, rd2);\n    doc = new Document();\n    doc.add(newField(fieldName, \"content2\", StringField.TYPE_STORED));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"content1\"));\n    \n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : multi.getTopReaderContext().leaves()) {\n      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n      assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","sourceNew":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newField(fieldName, \"content1\", StringField.TYPE_STORED));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newField(fieldName, \"content2\", StringField.TYPE_STORED));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"content1\"));\n    \n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : multi.getTopReaderContext().leaves()) {\n      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n      assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newField(fieldName, \"content1\", StringField.TYPE_STORED));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newField(fieldName, \"content2\", StringField.TYPE_STORED));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"content1\"));\n    \n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : multi.getTopReaderContext().leaves()) {\n      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n      assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"edc9ac4bba51b8acbb06a7fcd75347f7fb8b10d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6620df8541b174097b1133a4fc370adb2e570524":["edc9ac4bba51b8acbb06a7fcd75347f7fb8b10d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61e20f33ce8ff701576366fdb03955eded5f209b":["6620df8541b174097b1133a4fc370adb2e570524"],"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["6620df8541b174097b1133a4fc370adb2e570524","61e20f33ce8ff701576366fdb03955eded5f209b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"edc9ac4bba51b8acbb06a7fcd75347f7fb8b10d9":["6620df8541b174097b1133a4fc370adb2e570524"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6620df8541b174097b1133a4fc370adb2e570524":["61e20f33ce8ff701576366fdb03955eded5f209b","5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edc9ac4bba51b8acbb06a7fcd75347f7fb8b10d9"],"61e20f33ce8ff701576366fdb03955eded5f209b":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}