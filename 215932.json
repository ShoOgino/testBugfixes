{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","sourceNew":"  /**\n   * Creates a searcher searching the provided top-level {@link IndexReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see IndexReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(IndexReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = ReaderUtil.leaves(context);\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","sourceOld":"  /**\n   * Creates a searcher searching the provided top-level {@link IndexReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see IndexReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(IndexReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = ReaderUtil.leaves(context);\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8","date":1328775259,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","sourceNew":"  /**\n   * Creates a searcher searching the provided top-level {@link IndexReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see IndexReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(IndexReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = context.leaves();\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","sourceOld":"  /**\n   * Creates a searcher searching the provided top-level {@link IndexReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see IndexReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(IndexReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = ReaderUtil.leaves(context);\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"211b1506e56f7860762fbd4698f6d1d1b57f672c","date":1344976996,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","sourceNew":"  /**\n   * Creates a searcher searching the provided top-level {@link IndexReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see IndexReaderContext\n   * @see IndexReader#getContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(IndexReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = context.leaves();\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","sourceOld":"  /**\n   * Creates a searcher searching the provided top-level {@link IndexReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see IndexReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(IndexReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = context.leaves();\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","sourceNew":"  /**\n   * Creates a searcher searching the provided top-level {@link IndexReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see IndexReaderContext\n   * @see IndexReader#getContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(IndexReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = context.leaves();\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","sourceOld":"  /**\n   * Creates a searcher searching the provided top-level {@link IndexReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see IndexReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(IndexReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = context.leaves();\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","sourceNew":"  /**\n   * Creates a searcher searching the provided top-level {@link IndexReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see IndexReaderContext\n   * @see IndexReader#getContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(IndexReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = context.leaves();\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","sourceOld":"  /**\n   * Creates a searcher searching the provided top-level {@link IndexReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see IndexReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(IndexReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = context.leaves();\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","sourceNew":"  /**\n   * Creates a searcher searching the provided top-level {@link IndexReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see IndexReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(IndexReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = context.leaves();\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","sourceOld":"  /**\n   * Creates a searcher searching the provided top-level {@link IndexReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see IndexReaderContext\n   * @see IndexReader#getContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(IndexReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = context.leaves();\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","sourceNew":"  /**\n   * Creates a searcher searching the provided top-level {@link IndexReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see IndexReaderContext\n   * @see IndexReader#getContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(IndexReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = context.leaves();\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","sourceOld":"  /**\n   * Creates a searcher searching the provided top-level {@link IndexReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see IndexReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(IndexReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = context.leaves();\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","sourceNew":"  /**\n   * Creates a searcher searching the provided top-level {@link IndexReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not close/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see IndexReaderContext\n   * @see IndexReader#getContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(IndexReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = context.leaves();\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","sourceOld":"  /**\n   * Creates a searcher searching the provided top-level {@link IndexReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see IndexReaderContext\n   * @see IndexReader#getContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(IndexReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = context.leaves();\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"692c45378601dcea39367ca75ae7d34ceed0aae3","date":1561033600,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,Executor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","sourceNew":"  /**\n   * Creates a searcher searching the provided top-level {@link IndexReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link Executor} this method runs\n   * searches for each segment separately, using the provided Executor.\n   * NOTE: if you are using {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see IndexReaderContext\n   * @see IndexReader#getContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(IndexReaderContext context, Executor executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = context.leaves();\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","sourceOld":"  /**\n   * Creates a searcher searching the provided top-level {@link IndexReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not close/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see IndexReaderContext\n   * @see IndexReader#getContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(IndexReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = context.leaves();\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c188105a9aae04f56c24996f98f8333fc825d2e":["0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["211b1506e56f7860762fbd4698f6d1d1b57f672c"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8"],"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["692c45378601dcea39367ca75ae7d34ceed0aae3"],"692c45378601dcea39367ca75ae7d34ceed0aae3":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["692c45378601dcea39367ca75ae7d34ceed0aae3"],"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8":["3c188105a9aae04f56c24996f98f8333fc825d2e","211b1506e56f7860762fbd4698f6d1d1b57f672c","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","d0ef034a4f10871667ae75181537775ddcf8ade4","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"692c45378601dcea39367ca75ae7d34ceed0aae3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}