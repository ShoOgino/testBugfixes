{"path":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribHandleResponse(LinkedHashMap[String,HeatmapFacet],NamedList).mjava","commits":[{"id":"59d82b0be40ecfcc2c94c776b324e0903a62b844","date":1423535462,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribHandleResponse(LinkedHashMap[String,HeatmapFacet],NamedList).mjava","pathOld":"/dev/null","sourceNew":"  /** Called by FacetComponent.countFacets which is in turn called by FC's impl of\n   * {@link org.apache.solr.handler.component.SearchComponent#handleResponses(ResponseBuilder, ShardRequest)}. */\n  @SuppressWarnings(\"unchecked\")\n  public static void distribHandleResponse(LinkedHashMap<String, HeatmapFacet> heatmapFacets, NamedList srsp_facet_counts) {\n    NamedList<NamedList<Object>> facet_heatmaps = (NamedList<NamedList<Object>>) srsp_facet_counts.get(RESPONSE_KEY);\n    if (facet_heatmaps == null) {\n      return;\n    }\n    // (should the caller handle the above logic?  Arguably yes.)\n    for (Map.Entry<String, NamedList<Object>> entry : facet_heatmaps) {\n      String fieldKey = entry.getKey();\n      NamedList<Object> shardNamedList = entry.getValue();\n      final HeatmapFacet facet = heatmapFacets.get(fieldKey);\n      if (facet == null) {\n        log.error(\"received heatmap for field/key {} that we weren't expecting\", fieldKey);\n        continue;\n      }\n      facet.counts = addPngToIntArray((byte[]) shardNamedList.remove(\"counts_\" + FORMAT_PNG), facet.counts);\n      if (facet.namedList == null) {\n        // First shard\n        facet.namedList = shardNamedList;\n      } else {\n        assert facet.namedList.equals(shardNamedList);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ab027bdfe663227636ccbeda13ae82add302939","date":1529980633,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribHandleResponse(LinkedHashMap[String,HeatmapFacet],NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribHandleResponse(LinkedHashMap[String,HeatmapFacet],NamedList).mjava","sourceNew":"  /** Called by FacetComponent.countFacets which is in turn called by FC's impl of\n   * {@link org.apache.solr.handler.component.SearchComponent#handleResponses(ResponseBuilder, ShardRequest)}. */\n  @SuppressWarnings(\"unchecked\")\n  public static void distribHandleResponse(LinkedHashMap<String, HeatmapFacet> heatmapFacets, NamedList srsp_facet_counts) {\n    NamedList<NamedList<Object>> facet_heatmaps = (NamedList<NamedList<Object>>) srsp_facet_counts.get(RESPONSE_KEY);\n    if (facet_heatmaps == null) {\n      return;\n    }\n    // (should the caller handle the above logic?  Arguably yes.)\n    for (Map.Entry<String, NamedList<Object>> entry : facet_heatmaps) {\n      String fieldKey = entry.getKey();\n      NamedList<Object> shardNamedList = entry.getValue();\n      final HeatmapFacet facet = heatmapFacets.get(fieldKey);\n      if (facet == null) {\n        log.error(\"received heatmap for field/key {} that we weren't expecting\", fieldKey);\n        continue;\n      }\n      facet.jsonFacetMerger.merge(shardNamedList, null);//merge context not needed (null)\n    }\n  }\n\n","sourceOld":"  /** Called by FacetComponent.countFacets which is in turn called by FC's impl of\n   * {@link org.apache.solr.handler.component.SearchComponent#handleResponses(ResponseBuilder, ShardRequest)}. */\n  @SuppressWarnings(\"unchecked\")\n  public static void distribHandleResponse(LinkedHashMap<String, HeatmapFacet> heatmapFacets, NamedList srsp_facet_counts) {\n    NamedList<NamedList<Object>> facet_heatmaps = (NamedList<NamedList<Object>>) srsp_facet_counts.get(RESPONSE_KEY);\n    if (facet_heatmaps == null) {\n      return;\n    }\n    // (should the caller handle the above logic?  Arguably yes.)\n    for (Map.Entry<String, NamedList<Object>> entry : facet_heatmaps) {\n      String fieldKey = entry.getKey();\n      NamedList<Object> shardNamedList = entry.getValue();\n      final HeatmapFacet facet = heatmapFacets.get(fieldKey);\n      if (facet == null) {\n        log.error(\"received heatmap for field/key {} that we weren't expecting\", fieldKey);\n        continue;\n      }\n      facet.counts = addPngToIntArray((byte[]) shardNamedList.remove(\"counts_\" + FORMAT_PNG), facet.counts);\n      if (facet.namedList == null) {\n        // First shard\n        facet.namedList = shardNamedList;\n      } else {\n        assert facet.namedList.equals(shardNamedList);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribHandleResponse(LinkedHashMap[String,HeatmapFacet],NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribHandleResponse(LinkedHashMap[String,HeatmapFacet],NamedList).mjava","sourceNew":"  /** Called by FacetComponent.countFacets which is in turn called by FC's impl of\n   * {@link org.apache.solr.handler.component.SearchComponent#handleResponses(ResponseBuilder, ShardRequest)}. */\n  @SuppressWarnings(\"unchecked\")\n  public static void distribHandleResponse(LinkedHashMap<String, HeatmapFacet> heatmapFacets, NamedList srsp_facet_counts) {\n    NamedList<NamedList<Object>> facet_heatmaps = (NamedList<NamedList<Object>>) srsp_facet_counts.get(RESPONSE_KEY);\n    if (facet_heatmaps == null) {\n      return;\n    }\n    // (should the caller handle the above logic?  Arguably yes.)\n    for (Map.Entry<String, NamedList<Object>> entry : facet_heatmaps) {\n      String fieldKey = entry.getKey();\n      NamedList<Object> shardNamedList = entry.getValue();\n      final HeatmapFacet facet = heatmapFacets.get(fieldKey);\n      if (facet == null) {\n        log.error(\"received heatmap for field/key {} that we weren't expecting\", fieldKey);\n        continue;\n      }\n      facet.jsonFacetMerger.merge(shardNamedList, null);//merge context not needed (null)\n    }\n  }\n\n","sourceOld":"  /** Called by FacetComponent.countFacets which is in turn called by FC's impl of\n   * {@link org.apache.solr.handler.component.SearchComponent#handleResponses(ResponseBuilder, ShardRequest)}. */\n  @SuppressWarnings(\"unchecked\")\n  public static void distribHandleResponse(LinkedHashMap<String, HeatmapFacet> heatmapFacets, NamedList srsp_facet_counts) {\n    NamedList<NamedList<Object>> facet_heatmaps = (NamedList<NamedList<Object>>) srsp_facet_counts.get(RESPONSE_KEY);\n    if (facet_heatmaps == null) {\n      return;\n    }\n    // (should the caller handle the above logic?  Arguably yes.)\n    for (Map.Entry<String, NamedList<Object>> entry : facet_heatmaps) {\n      String fieldKey = entry.getKey();\n      NamedList<Object> shardNamedList = entry.getValue();\n      final HeatmapFacet facet = heatmapFacets.get(fieldKey);\n      if (facet == null) {\n        log.error(\"received heatmap for field/key {} that we weren't expecting\", fieldKey);\n        continue;\n      }\n      facet.counts = addPngToIntArray((byte[]) shardNamedList.remove(\"counts_\" + FORMAT_PNG), facet.counts);\n      if (facet.namedList == null) {\n        // First shard\n        facet.namedList = shardNamedList;\n      } else {\n        assert facet.namedList.equals(shardNamedList);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribHandleResponse(LinkedHashMap[String,HeatmapFacet],NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribHandleResponse(LinkedHashMap[String,HeatmapFacet],NamedList).mjava","sourceNew":"  /** Called by FacetComponent.countFacets which is in turn called by FC's impl of\n   * {@link org.apache.solr.handler.component.SearchComponent#handleResponses(ResponseBuilder, ShardRequest)}. */\n  @SuppressWarnings(\"unchecked\")\n  public static void distribHandleResponse(LinkedHashMap<String, HeatmapFacet> heatmapFacets, NamedList srsp_facet_counts) {\n    NamedList<NamedList<Object>> facet_heatmaps = (NamedList<NamedList<Object>>) srsp_facet_counts.get(RESPONSE_KEY);\n    if (facet_heatmaps == null) {\n      return;\n    }\n    // (should the caller handle the above logic?  Arguably yes.)\n    for (Map.Entry<String, NamedList<Object>> entry : facet_heatmaps) {\n      String fieldKey = entry.getKey();\n      NamedList<Object> shardNamedList = entry.getValue();\n      final HeatmapFacet facet = heatmapFacets.get(fieldKey);\n      if (facet == null) {\n        log.error(\"received heatmap for field/key {} that we weren't expecting\", fieldKey);\n        continue;\n      }\n      facet.jsonFacetMerger.merge(shardNamedList, null);//merge context not needed (null)\n    }\n  }\n\n","sourceOld":"  /** Called by FacetComponent.countFacets which is in turn called by FC's impl of\n   * {@link org.apache.solr.handler.component.SearchComponent#handleResponses(ResponseBuilder, ShardRequest)}. */\n  @SuppressWarnings(\"unchecked\")\n  public static void distribHandleResponse(LinkedHashMap<String, HeatmapFacet> heatmapFacets, NamedList srsp_facet_counts) {\n    NamedList<NamedList<Object>> facet_heatmaps = (NamedList<NamedList<Object>>) srsp_facet_counts.get(RESPONSE_KEY);\n    if (facet_heatmaps == null) {\n      return;\n    }\n    // (should the caller handle the above logic?  Arguably yes.)\n    for (Map.Entry<String, NamedList<Object>> entry : facet_heatmaps) {\n      String fieldKey = entry.getKey();\n      NamedList<Object> shardNamedList = entry.getValue();\n      final HeatmapFacet facet = heatmapFacets.get(fieldKey);\n      if (facet == null) {\n        log.error(\"received heatmap for field/key {} that we weren't expecting\", fieldKey);\n        continue;\n      }\n      facet.counts = addPngToIntArray((byte[]) shardNamedList.remove(\"counts_\" + FORMAT_PNG), facet.counts);\n      if (facet.namedList == null) {\n        // First shard\n        facet.namedList = shardNamedList;\n      } else {\n        assert facet.namedList.equals(shardNamedList);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribHandleResponse(LinkedHashMap[String,HeatmapFacet],NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribHandleResponse(LinkedHashMap[String,HeatmapFacet],NamedList).mjava","sourceNew":"  /** Called by FacetComponent.countFacets which is in turn called by FC's impl of\n   * {@link org.apache.solr.handler.component.SearchComponent#handleResponses(ResponseBuilder, ShardRequest)}. */\n  @SuppressWarnings(\"unchecked\")\n  public static void distribHandleResponse(LinkedHashMap<String, HeatmapFacet> heatmapFacets, @SuppressWarnings({\"rawtypes\"})NamedList srsp_facet_counts) {\n    NamedList<NamedList<Object>> facet_heatmaps = (NamedList<NamedList<Object>>) srsp_facet_counts.get(RESPONSE_KEY);\n    if (facet_heatmaps == null) {\n      return;\n    }\n    // (should the caller handle the above logic?  Arguably yes.)\n    for (Map.Entry<String, NamedList<Object>> entry : facet_heatmaps) {\n      String fieldKey = entry.getKey();\n      NamedList<Object> shardNamedList = entry.getValue();\n      final HeatmapFacet facet = heatmapFacets.get(fieldKey);\n      if (facet == null) {\n        log.error(\"received heatmap for field/key {} that we weren't expecting\", fieldKey);\n        continue;\n      }\n      facet.jsonFacetMerger.merge(shardNamedList, null);//merge context not needed (null)\n    }\n  }\n\n","sourceOld":"  /** Called by FacetComponent.countFacets which is in turn called by FC's impl of\n   * {@link org.apache.solr.handler.component.SearchComponent#handleResponses(ResponseBuilder, ShardRequest)}. */\n  @SuppressWarnings(\"unchecked\")\n  public static void distribHandleResponse(LinkedHashMap<String, HeatmapFacet> heatmapFacets, NamedList srsp_facet_counts) {\n    NamedList<NamedList<Object>> facet_heatmaps = (NamedList<NamedList<Object>>) srsp_facet_counts.get(RESPONSE_KEY);\n    if (facet_heatmaps == null) {\n      return;\n    }\n    // (should the caller handle the above logic?  Arguably yes.)\n    for (Map.Entry<String, NamedList<Object>> entry : facet_heatmaps) {\n      String fieldKey = entry.getKey();\n      NamedList<Object> shardNamedList = entry.getValue();\n      final HeatmapFacet facet = heatmapFacets.get(fieldKey);\n      if (facet == null) {\n        log.error(\"received heatmap for field/key {} that we weren't expecting\", fieldKey);\n        continue;\n      }\n      facet.jsonFacetMerger.merge(shardNamedList, null);//merge context not needed (null)\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ab027bdfe663227636ccbeda13ae82add302939":["59d82b0be40ecfcc2c94c776b324e0903a62b844"],"59d82b0be40ecfcc2c94c776b324e0903a62b844":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["59d82b0be40ecfcc2c94c776b324e0903a62b844","2ab027bdfe663227636ccbeda13ae82add302939"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["2ab027bdfe663227636ccbeda13ae82add302939"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["59d82b0be40ecfcc2c94c776b324e0903a62b844","2ab027bdfe663227636ccbeda13ae82add302939"]},"commit2Childs":{"2ab027bdfe663227636ccbeda13ae82add302939":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","8582f07e9350eaeb33bf6c4617b8c9895d99c839","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"59d82b0be40ecfcc2c94c776b324e0903a62b844":["2ab027bdfe663227636ccbeda13ae82add302939","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["59d82b0be40ecfcc2c94c776b324e0903a62b844"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}