{"path":"solr/core/src/java/org/apache/solr/analytics/accumulator/facet/FieldFacetAccumulator#collect(int).mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/accumulator/facet/FieldFacetAccumulator#collect(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tell the FacetingAccumulator to collect the doc with the \n   * given fieldFacet and value(s).\n   */\n  @Override\n  public void collect(int doc) throws IOException {\n    if (multiValued) {\n      boolean exists = false;\n      if (setValues!=null) {\n        setValues.setDocument(doc);\n        int term;\n        while ((term = (int)setValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          exists = true;\n          setValues.lookupOrd(term, value);\n          parent.collectField(doc, name, parser.parse(value) );\n        }\n      }\n      if (!exists) {\n        parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n      }\n    } else {\n      if(numField){\n        long v = numValues.get(doc);\n        if( v != 0 || numValuesBits.get(doc) ){\n          parent.collectField(doc, name, ((NumericParser)parser).parseNum(numValues.get(doc)));\n        } else {\n          parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n        }\n      } else {\n        sortValues.get(doc,value);\n        if( BytesRef.EMPTY_BYTES == value.bytes ){\n          parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n        } else {\n          parent.collectField(doc, name, parser.parse(value) );\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analytics/accumulator/facet/FieldFacetAccumulator#collect(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tell the FacetingAccumulator to collect the doc with the \n   * given fieldFacet and value(s).\n   */\n  @Override\n  public void collect(int doc) throws IOException {\n    if (multiValued) {\n      boolean exists = false;\n      if (setValues!=null) {\n        setValues.setDocument(doc);\n        int term;\n        while ((term = (int)setValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          exists = true;\n          setValues.lookupOrd(term, value);\n          parent.collectField(doc, name, parser.parse(value) );\n        }\n      }\n      if (!exists) {\n        parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n      }\n    } else {\n      if(numField){\n        long v = numValues.get(doc);\n        if( v != 0 || numValuesBits.get(doc) ){\n          parent.collectField(doc, name, ((NumericParser)parser).parseNum(numValues.get(doc)));\n        } else {\n          parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n        }\n      } else {\n        sortValues.get(doc,value);\n        if( BytesRef.EMPTY_BYTES == value.bytes ){\n          parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n        } else {\n          parent.collectField(doc, name, parser.parse(value) );\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90bbd2252058a0cb49db25622e33c979ff961a16","date":1391187546,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/accumulator/facet/FieldFacetAccumulator#collect(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/accumulator/facet/FieldFacetAccumulator#collect(int).mjava","sourceNew":"  /**\n   * Tell the FacetingAccumulator to collect the doc with the \n   * given fieldFacet and value(s).\n   */\n  @Override\n  public void collect(int doc) throws IOException {\n    if (multiValued) {\n      boolean exists = false;\n      if (setValues!=null) {\n        setValues.setDocument(doc);\n        int term;\n        while ((term = (int)setValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          exists = true;\n          setValues.lookupOrd(term, value);\n          parent.collectField(doc, name, parser.parse(value) );\n        }\n      }\n      if (!exists) {\n        parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n      }\n    } else {\n      if(numField){\n        if(numValues != null) {\n          long v = numValues.get(doc);\n          if( v != 0 || numValuesBits.get(doc) ){\n            parent.collectField(doc, name, ((NumericParser)parser).parseNum(v));\n          } else {\n            parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n          }\n        } else {\n          parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n        }\n      } else {\n        if(sortValues != null) {\n          sortValues.get(doc,value);\n          if( BytesRef.EMPTY_BYTES == value.bytes ){\n            parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n          } else {\n            parent.collectField(doc, name, parser.parse(value) );\n          }\n        } else {\n          parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tell the FacetingAccumulator to collect the doc with the \n   * given fieldFacet and value(s).\n   */\n  @Override\n  public void collect(int doc) throws IOException {\n    if (multiValued) {\n      boolean exists = false;\n      if (setValues!=null) {\n        setValues.setDocument(doc);\n        int term;\n        while ((term = (int)setValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          exists = true;\n          setValues.lookupOrd(term, value);\n          parent.collectField(doc, name, parser.parse(value) );\n        }\n      }\n      if (!exists) {\n        parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n      }\n    } else {\n      if(numField){\n        long v = numValues.get(doc);\n        if( v != 0 || numValuesBits.get(doc) ){\n          parent.collectField(doc, name, ((NumericParser)parser).parseNum(numValues.get(doc)));\n        } else {\n          parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n        }\n      } else {\n        sortValues.get(doc,value);\n        if( BytesRef.EMPTY_BYTES == value.bytes ){\n          parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n        } else {\n          parent.collectField(doc, name, parser.parse(value) );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/accumulator/facet/FieldFacetAccumulator#collect(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/accumulator/facet/FieldFacetAccumulator#collect(int).mjava","sourceNew":"  /**\n   * Tell the FacetingAccumulator to collect the doc with the \n   * given fieldFacet and value(s).\n   */\n  @Override\n  public void collect(int doc) throws IOException {\n    if (multiValued) {\n      boolean exists = false;\n      if (setValues!=null) {\n        setValues.setDocument(doc);\n        int term;\n        while ((term = (int)setValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          exists = true;\n          final BytesRef value = setValues.lookupOrd(term);\n          parent.collectField(doc, name, parser.parse(value) );\n        }\n      }\n      if (!exists) {\n        parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n      }\n    } else {\n      if(numField){\n        if(numValues != null) {\n          long v = numValues.get(doc);\n          if( v != 0 || numValuesBits.get(doc) ){\n            parent.collectField(doc, name, ((NumericParser)parser).parseNum(v));\n          } else {\n            parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n          }\n        } else {\n          parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n        }\n      } else {\n        if(sortValues != null) {\n          final int ord = sortValues.getOrd(doc);\n          if (ord < 0) {\n            parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n          } else {\n            parent.collectField(doc, name, parser.parse(sortValues.lookupOrd(ord)) );\n          }\n        } else {\n          parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tell the FacetingAccumulator to collect the doc with the \n   * given fieldFacet and value(s).\n   */\n  @Override\n  public void collect(int doc) throws IOException {\n    if (multiValued) {\n      boolean exists = false;\n      if (setValues!=null) {\n        setValues.setDocument(doc);\n        int term;\n        while ((term = (int)setValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          exists = true;\n          setValues.lookupOrd(term, value);\n          parent.collectField(doc, name, parser.parse(value) );\n        }\n      }\n      if (!exists) {\n        parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n      }\n    } else {\n      if(numField){\n        if(numValues != null) {\n          long v = numValues.get(doc);\n          if( v != 0 || numValuesBits.get(doc) ){\n            parent.collectField(doc, name, ((NumericParser)parser).parseNum(v));\n          } else {\n            parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n          }\n        } else {\n          parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n        }\n      } else {\n        if(sortValues != null) {\n          sortValues.get(doc,value);\n          if( BytesRef.EMPTY_BYTES == value.bytes ){\n            parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n          } else {\n            parent.collectField(doc, name, parser.parse(value) );\n          }\n        } else {\n          parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/facet/FieldFacetAccumulator#collect(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/accumulator/facet/FieldFacetAccumulator#collect(int).mjava","sourceNew":"  /**\n   * Tell the FacetingAccumulator to collect the doc with the \n   * given fieldFacet and value(s).\n   */\n  @Override\n  public void collect(int doc) throws IOException {\n    if (multiValued) {\n      boolean exists = false;\n      if (setValues!=null) {\n        setValues.setDocument(doc);\n        int term;\n        while ((term = (int)setValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          exists = true;\n          final BytesRef value = setValues.lookupOrd(term);\n          parent.collectField(doc, name, parser.parse(value) );\n        }\n      }\n      if (!exists) {\n        parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n      }\n    } else {\n      if(numField){\n        if(numValues != null) {\n          long v = numValues.get(doc);\n          if( v != 0 || numValuesBits.get(doc) ){\n            parent.collectField(doc, name, ((NumericParser)parser).parseNum(v));\n          } else {\n            parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n          }\n        } else {\n          parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n        }\n      } else {\n        if(sortValues != null) {\n          final int ord = sortValues.getOrd(doc);\n          if (ord < 0) {\n            parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n          } else {\n            parent.collectField(doc, name, parser.parse(sortValues.lookupOrd(ord)) );\n          }\n        } else {\n          parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tell the FacetingAccumulator to collect the doc with the \n   * given fieldFacet and value(s).\n   */\n  @Override\n  public void collect(int doc) throws IOException {\n    if (multiValued) {\n      boolean exists = false;\n      if (setValues!=null) {\n        setValues.setDocument(doc);\n        int term;\n        while ((term = (int)setValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          exists = true;\n          final BytesRef value = setValues.lookupOrd(term);\n          parent.collectField(doc, name, parser.parse(value) );\n        }\n      }\n      if (!exists) {\n        parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n      }\n    } else {\n      if(numField){\n        if(numValues != null) {\n          long v = numValues.get(doc);\n          if( v != 0 || numValuesBits.get(doc) ){\n            parent.collectField(doc, name, ((NumericParser)parser).parseNum(v));\n          } else {\n            parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n          }\n        } else {\n          parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n        }\n      } else {\n        if(sortValues != null) {\n          final int ord = sortValues.getOrd(doc);\n          if (ord < 0) {\n            parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n          } else {\n            parent.collectField(doc, name, parser.parse(sortValues.lookupOrd(ord)) );\n          }\n        } else {\n          parent.collectField(doc, name, FacetingAccumulator.MISSING_VALUE );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90bbd2252058a0cb49db25622e33c979ff961a16":["ff403346522eaa9de75403763e297e83a3ea585c"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["90bbd2252058a0cb49db25622e33c979ff961a16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff403346522eaa9de75403763e297e83a3ea585c"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"90bbd2252058a0cb49db25622e33c979ff961a16":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["90bbd2252058a0cb49db25622e33c979ff961a16","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}