{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/PlotStream#PlotStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"3d635d99fef6495f949f7bbac12fd269db070ee5","date":1499965547,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/PlotStream#PlotStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public PlotStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    fieldNames.add(\"plot\");\n    fieldNames.add(\"data\");\n    fieldLabels.put(\"plot\",\"plot\");\n    fieldLabels.put(\"data\", \"data\");\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    //Get all the named params\n    for(StreamExpressionNamedParameter np : namedParams) {\n      String name = np.getName();\n      //fieldNames.add(name);\n      //fieldLabels.put(name, name);\n      StreamExpressionParameter param = np.getParameter();\n\n      // we're going to split these up here so we only make the choice once\n      // order of these in read() doesn't matter\n      if(param instanceof StreamExpressionValue) {\n        stringParams.put(name, ((StreamExpressionValue)param).getValue());\n      } else if (factory.isEvaluator((StreamExpression) param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        evaluatorParams.put(name, evaluator);\n      } else if(factory.isStream((StreamExpression)param)) {\n        TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n        streamParams.put(name, tupleStream);\n      }\n      else{\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - only string, evaluator, or stream named parameters are supported, but param %d is none of those\",expression, name));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/PlotStream#PlotStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public PlotStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    fieldNames.add(\"plot\");\n    fieldNames.add(\"data\");\n    fieldLabels.put(\"plot\",\"plot\");\n    fieldLabels.put(\"data\", \"data\");\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    //Get all the named params\n    for(StreamExpressionNamedParameter np : namedParams) {\n      String name = np.getName();\n      //fieldNames.add(name);\n      //fieldLabels.put(name, name);\n      StreamExpressionParameter param = np.getParameter();\n\n      // we're going to split these up here so we only make the choice once\n      // order of these in read() doesn't matter\n      if(param instanceof StreamExpressionValue) {\n        stringParams.put(name, ((StreamExpressionValue)param).getValue());\n      } else if (factory.isEvaluator((StreamExpression) param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        evaluatorParams.put(name, evaluator);\n      } else if(factory.isStream((StreamExpression)param)) {\n        TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n        streamParams.put(name, tupleStream);\n      }\n      else{\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - only string, evaluator, or stream named parameters are supported, but param %d is none of those\",expression, name));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aaf90fc29510e72665ac7934f34c3d1c25efad64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d635d99fef6495f949f7bbac12fd269db070ee5"],"3d635d99fef6495f949f7bbac12fd269db070ee5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3d635d99fef6495f949f7bbac12fd269db070ee5"]},"commit2Childs":{"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aaf90fc29510e72665ac7934f34c3d1c25efad64","3d635d99fef6495f949f7bbac12fd269db070ee5"],"3d635d99fef6495f949f7bbac12fd269db070ee5":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}