{"path":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#doTestRank(String,boolean).mjava","commits":[{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#doTestRank(String,boolean).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestRank(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n\n    Query q = new FunctionQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(random(), q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n\n    Query q = new FunctionQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(random(), q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#doTestRank(String,boolean).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestRank(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n\n    Query q = new FunctionQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(random(), q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n\n    Query q = new FunctionQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(random(), q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#doTestRank(String,boolean).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestRank(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n\n    Query q = new FunctionQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(random(), q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n\n    Query q = new FunctionQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(random(), q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#doTestRank(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#doTestRank(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n\n    Query q = new FunctionQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(random(), q, s);\n    ScoreDoc[] h = s.search(q, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n\n    Query q = new FunctionQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(random(), q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9274621789ce990dbfef455dabdf026bb3184821":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9274621789ce990dbfef455dabdf026bb3184821"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9274621789ce990dbfef455dabdf026bb3184821","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}