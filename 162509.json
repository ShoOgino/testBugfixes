{"path":"src/java/org/apache/lucene/search/PhrasePrefixQuery#add(Term[],int).mjava","commits":[{"id":"4988178cfbf5117763a956901f39d3efa3282e72","date":1095241130,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery#add(Term[],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @ see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n      if (termArrays.size() == 0)\n          field = terms[0].field();\n        \n        for (int i=0; i<terms.length; i++) {\n          if (terms[i].field() != field) {\n            throw new IllegalArgumentException\n              (\"All phrase terms must be in the same field (\" + field + \"): \"\n               + terms[i]);\n          }\n        }\n\n        termArrays.add(terms);\n        positions.addElement(new Integer(position));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"925e99fa73cfffbe6508130d9c8f68d46e1ba3a3","date":1095282540,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery#add(Term[],int).mjava","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery#add(Term[],int).mjava","sourceNew":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n      if (termArrays.size() == 0)\n          field = terms[0].field();\n        \n        for (int i=0; i<terms.length; i++) {\n          if (terms[i].field() != field) {\n            throw new IllegalArgumentException\n              (\"All phrase terms must be in the same field (\" + field + \"): \"\n               + terms[i]);\n          }\n        }\n\n        termArrays.add(terms);\n        positions.addElement(new Integer(position));\n  }\n\n","sourceOld":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @ see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n      if (termArrays.size() == 0)\n          field = terms[0].field();\n        \n        for (int i=0; i<terms.length; i++) {\n          if (terms[i].field() != field) {\n            throw new IllegalArgumentException\n              (\"All phrase terms must be in the same field (\" + field + \"): \"\n               + terms[i]);\n          }\n        }\n\n        termArrays.add(terms);\n        positions.addElement(new Integer(position));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4bf1148b1d254fc1532e611c3fa24f404a262af","date":1095449054,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery#add(Term[],int).mjava","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery#add(Term[],int).mjava","sourceNew":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (terms[i].field() != field) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.addElement(new Integer(position));\n  }\n\n","sourceOld":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n      if (termArrays.size() == 0)\n          field = terms[0].field();\n        \n        for (int i=0; i<terms.length; i++) {\n          if (terms[i].field() != field) {\n            throw new IllegalArgumentException\n              (\"All phrase terms must be in the same field (\" + field + \"): \"\n               + terms[i]);\n          }\n        }\n\n        termArrays.add(terms);\n        positions.addElement(new Integer(position));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery#add(Term[],int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (terms[i].field() != field) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.addElement(new Integer(position));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"925e99fa73cfffbe6508130d9c8f68d46e1ba3a3":["4988178cfbf5117763a956901f39d3efa3282e72"],"c4bf1148b1d254fc1532e611c3fa24f404a262af":["925e99fa73cfffbe6508130d9c8f68d46e1ba3a3"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["c4bf1148b1d254fc1532e611c3fa24f404a262af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"4988178cfbf5117763a956901f39d3efa3282e72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"925e99fa73cfffbe6508130d9c8f68d46e1ba3a3":["c4bf1148b1d254fc1532e611c3fa24f404a262af"],"c4bf1148b1d254fc1532e611c3fa24f404a262af":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4988178cfbf5117763a956901f39d3efa3282e72"],"4988178cfbf5117763a956901f39d3efa3282e72":["925e99fa73cfffbe6508130d9c8f68d46e1ba3a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}