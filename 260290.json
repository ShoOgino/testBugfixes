{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testWildcardAlone().mjava","commits":[{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testWildcardAlone().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testWildcardAlone().mjava","sourceNew":"  public void testWildcardAlone() throws ParseException {\n    //seems like crazy edge case, but can be useful in concordance \n    QueryParser parser = new QueryParser(FIELD, new ASCIIAnalyzer());\n    parser.setAllowLeadingWildcard(false);\n    expectThrows(ParseException.class, () -> {\n      parser.parse(\"*\");\n    });\n\n    QueryParser parser2 = new QueryParser(\"*\", new ASCIIAnalyzer());\n    parser2.setAllowLeadingWildcard(false);\n    assertEquals(new MatchAllDocsQuery(), parser2.parse(\"*\"));\n  }\n\n","sourceOld":"  public void testWildcardAlone() throws ParseException {\n    //seems like crazy edge case, but can be useful in concordance \n    expectThrows(ParseException.class, () -> {\n      getAnalyzedQuery(\"*\", a, false);\n    });\n      \n    String qString = parseWithAnalyzingQueryParser(\"*\", a, true);\n    assertEquals(\"Every word\", \"*\", qString);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testWildcardAlone().mjava","pathOld":"/dev/null","sourceNew":"  public void testWildcardAlone() throws ParseException {\n    //seems like crazy edge case, but can be useful in concordance \n    QueryParser parser = new QueryParser(FIELD, new ASCIIAnalyzer());\n    parser.setAllowLeadingWildcard(false);\n    expectThrows(ParseException.class, () -> {\n      parser.parse(\"*\");\n    });\n\n    QueryParser parser2 = new QueryParser(\"*\", new ASCIIAnalyzer());\n    parser2.setAllowLeadingWildcard(false);\n    assertEquals(new MatchAllDocsQuery(), parser2.parse(\"*\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea4107f60b9f95623c16025c9c247412ff809092":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}