{"path":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    Directory directory = newDirectory();\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    Directory directory = newDirectory();\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527cc14542789f47d75da436cb4287d1ab887e34","date":1391705548,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    Directory directory = newDirectory();\n    if (directory instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(true);\n    }\n\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    Directory directory = newDirectory();\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34d6426cef006e0c3625cabe7a7ec1c2b08bc501","date":1454683374,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    Directory directory = newMaybeVirusCheckingDirectory();\n    if (directory instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(true);\n    }\n\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    Directory directory = newDirectory();\n    if (directory instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(true);\n    }\n\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    Directory directory = newMaybeVirusCheckingDirectory();\n    if (directory instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(true);\n    }\n\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    Directory directory = newDirectory();\n    if (directory instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(true);\n    }\n\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    Directory directory = newMaybeVirusCheckingDirectory();\n    if (directory instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(true);\n    }\n\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    Directory directory = newDirectory();\n    if (directory instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(true);\n    }\n\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    Directory directory = newMaybeVirusCheckingDirectory();\n    if (directory instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(true);\n    }\n\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    Directory directory = newDirectory();\n    if (directory instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(true);\n    }\n\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","sourceNew":"  /* */\n  public void testStressIndexAndSearching() throws Exception {\n    Directory directory = newMaybeVirusCheckingDirectory();\n    if (directory instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(true);\n    }\n\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    Directory directory = newMaybeVirusCheckingDirectory();\n    if (directory instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(true);\n    }\n\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"527cc14542789f47d75da436cb4287d1ab887e34":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["527cc14542789f47d75da436cb4287d1ab887e34"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["527cc14542789f47d75da436cb4287d1ab887e34","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["527cc14542789f47d75da436cb4287d1ab887e34","34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["527cc14542789f47d75da436cb4287d1ab887e34","b470f36a9372c97283360b1304eacbde22df6c0d"],"d77dafd89756a5161d244985903e3487ca109182":["5a207d19eac354d649c3f0e2cce070017c78125e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"527cc14542789f47d75da436cb4287d1ab887e34":["34d6426cef006e0c3625cabe7a7ec1c2b08bc501","5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["b470f36a9372c97283360b1304eacbde22df6c0d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["527cc14542789f47d75da436cb4287d1ab887e34"],"5a207d19eac354d649c3f0e2cce070017c78125e":["d77dafd89756a5161d244985903e3487ca109182"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}