{"path":"lucene/core/src/java/org/apache/lucene/store/GrowableByteArrayDataOutput#writeString(String).mjava","commits":[{"id":"f7a2e1716e01d8e64da1eaa94cbba1dfde2863cf","date":1481240091,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/GrowableByteArrayDataOutput#writeString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/GrowableByteArrayDataOutput#writeString(String).mjava","sourceNew":"  @Override\n  public void writeString(String string) throws IOException {\n    int maxLen = UnicodeUtil.maxUTF8Length(string.length());\n    if (maxLen <= MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING)  {\n      // string is small enough that we don't need to save memory by falling back to double-pass approach\n      // this is just an optimized writeString() that re-uses scratchBytes.\n      if (scratchBytes == null) {\n        scratchBytes = new byte[ArrayUtil.oversize(maxLen, Character.BYTES)];\n      } else {\n        scratchBytes = ArrayUtil.grow(scratchBytes, maxLen);\n      }\n      int len = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), scratchBytes);\n      writeVInt(len);\n      writeBytes(scratchBytes, len);\n    } else  {\n      // use a double pass approach to avoid allocating a large intermediate buffer for string encoding\n      int numBytes = UnicodeUtil.calcUTF16toUTF8Length(string, 0, string.length());\n      writeVInt(numBytes);\n      bytes = ArrayUtil.grow(bytes, length + numBytes);\n      length = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), bytes, length);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeString(String string) throws IOException {\n    int maxLen = UnicodeUtil.maxUTF8Length(string.length());\n    if (maxLen <= MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING)  {\n      // string is small enough that we don't need to save memory by falling back to double-pass approach\n      // this is just an optimized writeString() that re-uses scratchBytes.\n      if (scratchBytes == null) {\n        scratchBytes = new byte[ArrayUtil.oversize(maxLen, Character.BYTES)];\n      } else {\n        scratchBytes = ArrayUtil.grow(scratchBytes, maxLen);\n      }\n      int len = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), scratchBytes);\n      writeVInt(len);\n      writeBytes(scratchBytes, len);\n    } else  {\n      // use a double pass approach to avoid allocating a large intermediate buffer for string encoding\n      int numBytes = UnicodeUtil.calcUTF16toUTF8Length(string, 0, string.length());\n      writeVInt(numBytes);\n      bytes = ArrayUtil.grow(bytes, length + numBytes);\n      length = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), bytes, length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/GrowableByteArrayDataOutput#writeString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/GrowableByteArrayDataOutput#writeString(String).mjava","sourceNew":"  @Override\n  public void writeString(String string) throws IOException {\n    int maxLen = UnicodeUtil.maxUTF8Length(string.length());\n    if (maxLen <= MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING)  {\n      // string is small enough that we don't need to save memory by falling back to double-pass approach\n      // this is just an optimized writeString() that re-uses scratchBytes.\n      if (scratchBytes == null) {\n        scratchBytes = new byte[ArrayUtil.oversize(maxLen, Character.BYTES)];\n      } else {\n        scratchBytes = ArrayUtil.grow(scratchBytes, maxLen);\n      }\n      int len = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), scratchBytes);\n      writeVInt(len);\n      writeBytes(scratchBytes, len);\n    } else  {\n      // use a double pass approach to avoid allocating a large intermediate buffer for string encoding\n      int numBytes = UnicodeUtil.calcUTF16toUTF8Length(string, 0, string.length());\n      writeVInt(numBytes);\n      bytes = ArrayUtil.grow(bytes, length + numBytes);\n      length = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), bytes, length);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeString(String string) throws IOException {\n    int maxLen = UnicodeUtil.maxUTF8Length(string.length());\n    if (maxLen <= MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING)  {\n      // string is small enough that we don't need to save memory by falling back to double-pass approach\n      // this is just an optimized writeString() that re-uses scratchBytes.\n      scratchBytes = ArrayUtil.grow(scratchBytes, maxLen);\n      int len = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), scratchBytes);\n      writeVInt(len);\n      writeBytes(scratchBytes, len);\n    } else  {\n      // use a double pass approach to avoid allocating a large intermediate buffer for string encoding\n      int numBytes = UnicodeUtil.calcUTF16toUTF8Length(string, 0, string.length());\n      writeVInt(numBytes);\n      bytes = ArrayUtil.grow(bytes, length + numBytes);\n      length = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), bytes, length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/GrowableByteArrayDataOutput#writeString(String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeString(String string) throws IOException {\n    int maxLen = UnicodeUtil.maxUTF8Length(string.length());\n    if (maxLen <= MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING)  {\n      // string is small enough that we don't need to save memory by falling back to double-pass approach\n      // this is just an optimized writeString() that re-uses scratchBytes.\n      if (scratchBytes == null) {\n        scratchBytes = new byte[ArrayUtil.oversize(maxLen, Character.BYTES)];\n      } else {\n        scratchBytes = ArrayUtil.grow(scratchBytes, maxLen);\n      }\n      int len = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), scratchBytes);\n      writeVInt(len);\n      writeBytes(scratchBytes, len);\n    } else  {\n      // use a double pass approach to avoid allocating a large intermediate buffer for string encoding\n      int numBytes = UnicodeUtil.calcUTF16toUTF8Length(string, 0, string.length());\n      writeVInt(numBytes);\n      bytes = ArrayUtil.grow(bytes, length + numBytes);\n      length = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), bytes, length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7a2e1716e01d8e64da1eaa94cbba1dfde2863cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"409da428f28953cf35fddd5c9ff5c7e4f5439863":["f7a2e1716e01d8e64da1eaa94cbba1dfde2863cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f7a2e1716e01d8e64da1eaa94cbba1dfde2863cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["409da428f28953cf35fddd5c9ff5c7e4f5439863"]},"commit2Childs":{"f7a2e1716e01d8e64da1eaa94cbba1dfde2863cf":["409da428f28953cf35fddd5c9ff5c7e4f5439863","9856095f7afb5a607bf5e65077615ed91273508c"],"409da428f28953cf35fddd5c9ff5c7e4f5439863":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7a2e1716e01d8e64da1eaa94cbba1dfde2863cf","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}