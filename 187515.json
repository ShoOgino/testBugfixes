{"path":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","commits":[{"id":"cf4e43a4d7a969632d4bec76fd5bba149cb81487","date":1342043143,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   * \n   * @param args\n   * @throws IOException\n   * @throws TimeoutException\n   * @throws InterruptedException\n   * @throws SAXException\n   * @throws ParserConfigurationException\n   * @throws KeeperException\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + CLEAR + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 15000, 5000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n          \n          InputSource cfgis = new InputSource(new File(solrHome, SOLR_XML)\n              .toURI().toASCIIString());\n          Config cfg = new Config(loader, null, cfgis, null, false);\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7c245aee571549d7e0d913276bf8494d1b5116fe","b2a795bd549d550ea0b0a1aea32f247704ededcb","d6b51620f35c0770a564d2f294607e3bdca18015"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   * \n   * @param args\n   * @throws IOException\n   * @throws TimeoutException\n   * @throws InterruptedException\n   * @throws SAXException\n   * @throws ParserConfigurationException\n   * @throws KeeperException\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + CLEAR + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 15000, 5000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n          \n          InputSource cfgis = new InputSource(new File(solrHome, SOLR_XML)\n              .toURI().toASCIIString());\n          Config cfg = new Config(loader, null, cfgis, null, false);\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7350bd24c4e3331c214ecc73207e6555bbfc3c03","date":1342794512,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   * \n   * @param args\n   * @throws IOException\n   * @throws TimeoutException\n   * @throws InterruptedException\n   * @throws SAXException\n   * @throws ParserConfigurationException\n   * @throws KeeperException\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + CLEAR + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n          \n          InputSource cfgis = new InputSource(new File(solrHome, SOLR_XML)\n              .toURI().toASCIIString());\n          Config cfg = new Config(loader, null, cfgis, null, false);\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   * \n   * @param args\n   * @throws IOException\n   * @throws TimeoutException\n   * @throws InterruptedException\n   * @throws SAXException\n   * @throws ParserConfigurationException\n   * @throws KeeperException\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + CLEAR + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 15000, 5000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n          \n          InputSource cfgis = new InputSource(new File(solrHome, SOLR_XML)\n              .toURI().toASCIIString());\n          Config cfg = new Config(loader, null, cfgis, null, false);\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   * \n   * @param args\n   * @throws IOException\n   * @throws TimeoutException\n   * @throws InterruptedException\n   * @throws SAXException\n   * @throws ParserConfigurationException\n   * @throws KeeperException\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + CLEAR + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n          \n          InputSource cfgis = new InputSource(new File(solrHome, SOLR_XML)\n              .toURI().toASCIIString());\n          Config cfg = new Config(loader, null, cfgis, null, false);\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   * \n   * @param args\n   * @throws IOException\n   * @throws TimeoutException\n   * @throws InterruptedException\n   * @throws SAXException\n   * @throws ParserConfigurationException\n   * @throws KeeperException\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + CLEAR + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 15000, 5000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n          \n          InputSource cfgis = new InputSource(new File(solrHome, SOLR_XML)\n              .toURI().toASCIIString());\n          Config cfg = new Config(loader, null, cfgis, null, false);\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   * \n   * @param args\n   * @throws IOException\n   * @throws TimeoutException\n   * @throws InterruptedException\n   * @throws SAXException\n   * @throws ParserConfigurationException\n   * @throws KeeperException\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + CLEAR + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n          \n          InputSource cfgis = new InputSource(new File(solrHome, SOLR_XML)\n              .toURI().toASCIIString());\n          Config cfg = new Config(loader, null, cfgis, null, false);\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + CLEAR + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n          \n          InputSource cfgis = new InputSource(new File(solrHome, SOLR_XML)\n              .toURI().toASCIIString());\n          Config cfg = new Config(loader, null, cfgis, null, false);\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   * \n   * @param args\n   * @throws IOException\n   * @throws TimeoutException\n   * @throws InterruptedException\n   * @throws SAXException\n   * @throws ParserConfigurationException\n   * @throws KeeperException\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + CLEAR + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n          \n          InputSource cfgis = new InputSource(new File(solrHome, SOLR_XML)\n              .toURI().toASCIIString());\n          Config cfg = new Config(loader, null, cfgis, null, false);\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0e70591e1e23afedf79324b42591f71a3e711b5","date":1355181494,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + CLEAR + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n          \n          InputSource cfgis = new InputSource(new File(solrHome, SOLR_XML)\n              .toURI().toASCIIString());\n          Config cfg = new Config(loader, null, cfgis, null, false);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + CLEAR + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n          \n          InputSource cfgis = new InputSource(new File(solrHome, SOLR_XML)\n              .toURI().toASCIIString());\n          Config cfg = new Config(loader, null, cfgis, null, false);\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c245aee571549d7e0d913276bf8494d1b5116fe","date":1355183455,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n          \n          InputSource cfgis = new InputSource(new File(solrHome, SOLR_XML)\n              .toURI().toASCIIString());\n          Config cfg = new Config(loader, null, cfgis, null, false);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + CLEAR + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n          \n          InputSource cfgis = new InputSource(new File(solrHome, SOLR_XML)\n              .toURI().toASCIIString());\n          Config cfg = new Config(loader, null, cfgis, null, false);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":["cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n          \n          InputSource cfgis = new InputSource(new File(solrHome, SOLR_XML)\n              .toURI().toASCIIString());\n          Config cfg = new Config(loader, null, cfgis, null, false);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -cmd \" + CLEAR + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n          \n          InputSource cfgis = new InputSource(new File(solrHome, SOLR_XML)\n              .toURI().toASCIIString());\n          Config cfg = new Config(loader, null, cfgis, null, false);\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f836b975e771ba6f5943f3b18589daa79b98191c","date":1361755761,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ LIST + \", \" +CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n          \n          InputSource cfgis = new InputSource(new File(solrHome, SOLR_XML)\n              .toURI().toASCIIString());\n          Config cfg = new Config(loader, null, cfgis, null, false);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n          \n          InputSource cfgis = new InputSource(new File(solrHome, SOLR_XML)\n              .toURI().toASCIIString());\n          Config cfg = new Config(loader, null, cfgis, null, false);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["d6b51620f35c0770a564d2f294607e3bdca18015"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ LIST + \", \" +CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n\n          File configFile = new File(solrHome, SOLR_XML);\n          boolean isXml = true;\n          if (! configFile.exists()) {\n            configFile = new File(solrHome, SolrProperties.SOLR_PROPERTIES_FILE);\n            isXml = false;\n          }\n          InputStream is = new FileInputStream(configFile);\n\n          //ConfigSolrXmlThunk cfg = new ConfigSolrXmlThunk(null, loader, is, false, true);\n\n          ConfigSolr cfg;\n            if (isXml) {\n              cfg = new ConfigSolrXmlBackCompat(loader, null, is, null, false);\n            } else {\n              cfg = new SolrProperties(null, is, null);\n            }\n\n\n            if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ LIST + \", \" +CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n          \n          InputSource cfgis = new InputSource(new File(solrHome, SOLR_XML)\n              .toURI().toASCIIString());\n          Config cfg = new Config(loader, null, cfgis, null, false);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93523051b3768fb7b388dc97cf568b37b1aa40fa","date":1362406839,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ LIST + \", \" +CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n\n          File configFile = new File(solrHome, SOLR_XML);\n          boolean isXml = true;\n          if (! configFile.exists()) {\n            configFile = new File(solrHome, SolrProperties.SOLR_PROPERTIES_FILE);\n            isXml = false;\n          }\n          InputStream is = new FileInputStream(configFile);\n\n          ConfigSolr cfg;\n\n          try {\n            if (isXml) {\n              cfg = new ConfigSolrXmlBackCompat(loader, null, is, null, false);\n            } else {\n              cfg = new SolrProperties(null, is, null);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ LIST + \", \" +CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n\n          File configFile = new File(solrHome, SOLR_XML);\n          boolean isXml = true;\n          if (! configFile.exists()) {\n            configFile = new File(solrHome, SolrProperties.SOLR_PROPERTIES_FILE);\n            isXml = false;\n          }\n          InputStream is = new FileInputStream(configFile);\n\n          //ConfigSolrXmlThunk cfg = new ConfigSolrXmlThunk(null, loader, is, false, true);\n\n          ConfigSolr cfg;\n            if (isXml) {\n              cfg = new ConfigSolrXmlBackCompat(loader, null, is, null, false);\n            } else {\n              cfg = new SolrProperties(null, is, null);\n            }\n\n\n            if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0937e467e3a2e44c636e2b022b816b21257acb26","date":1363268855,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ LIST + \", \" +CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n\n          File configFile = new File(solrHome, SOLR_XML);\n          boolean isXml = true;\n          if (! configFile.exists()) {\n            configFile = new File(solrHome, SolrProperties.SOLR_PROPERTIES_FILE);\n            isXml = false;\n          }\n          InputStream is = new FileInputStream(configFile);\n\n          ConfigSolr cfg;\n\n          try {\n            if (isXml) {\n              cfg = new ConfigSolrXmlBackCompat(loader, null, is, null, false);\n            } else {\n              cfg = new SolrProperties(null, loader, is, null);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ LIST + \", \" +CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n\n          File configFile = new File(solrHome, SOLR_XML);\n          boolean isXml = true;\n          if (! configFile.exists()) {\n            configFile = new File(solrHome, SolrProperties.SOLR_PROPERTIES_FILE);\n            isXml = false;\n          }\n          InputStream is = new FileInputStream(configFile);\n\n          ConfigSolr cfg;\n\n          try {\n            if (isXml) {\n              cfg = new ConfigSolrXmlBackCompat(loader, null, is, null, false);\n            } else {\n              cfg = new SolrProperties(null, is, null);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9818efa55563ddfecdecafbdd43f4bee9f252e7d","date":1364853872,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ LIST + \", \" +CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n\n          File configFile = new File(solrHome, SOLR_XML);\n          InputStream is = new FileInputStream(configFile);\n\n          ConfigSolr cfg;\n\n          try {\n            cfg = new ConfigSolrXml(loader, null, is, null, false, null);\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ LIST + \", \" +CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n\n          File configFile = new File(solrHome, SOLR_XML);\n          boolean isXml = true;\n          if (! configFile.exists()) {\n            configFile = new File(solrHome, SolrProperties.SOLR_PROPERTIES_FILE);\n            isXml = false;\n          }\n          InputStream is = new FileInputStream(configFile);\n\n          ConfigSolr cfg;\n\n          try {\n            if (isXml) {\n              cfg = new ConfigSolrXmlBackCompat(loader, null, is, null, false);\n            } else {\n              cfg = new SolrProperties(null, loader, is, null);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0","date":1366659310,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ LIST + \", \" +CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n\n          File configFile = new File(solrHome, SOLR_XML);\n          InputStream is = new FileInputStream(configFile);\n\n          ConfigSolr cfg;\n\n          try {\n            Config config = new Config(loader, null, new InputSource(is), null, false);\n            \n            boolean oldStyle = (config.getNode(\"solr/cores\", false) != null);\n            // cfg = new ConfigSolrXml(loader, null, is, null, false, this);\n             if (oldStyle) {\n               cfg = new ConfigSolrXmlOld(config, null);\n             } else {\n               cfg = new ConfigSolrXml(config, null);\n             }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ LIST + \", \" +CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n\n          File configFile = new File(solrHome, SOLR_XML);\n          InputStream is = new FileInputStream(configFile);\n\n          ConfigSolr cfg;\n\n          try {\n            cfg = new ConfigSolrXml(loader, null, is, null, false, null);\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9","date":1366986755,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ LIST + \", \" +CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n\n          File configFile = new File(solrHome, SOLR_XML);\n          InputStream is = new FileInputStream(configFile);\n\n          ConfigSolr cfg;\n\n          try {\n            Config config = new Config(loader, null, new InputSource(is), null, false);\n            \n            boolean oldStyle = (config.getNode(\"solr/cores\", false) != null);\n\n             if (oldStyle) {\n               cfg = new ConfigSolrXmlOld(config, null);\n             } else {\n               cfg = new ConfigSolrXml(config, null);\n             }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ LIST + \", \" +CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n\n          File configFile = new File(solrHome, SOLR_XML);\n          InputStream is = new FileInputStream(configFile);\n\n          ConfigSolr cfg;\n\n          try {\n            Config config = new Config(loader, null, new InputSource(is), null, false);\n            \n            boolean oldStyle = (config.getNode(\"solr/cores\", false) != null);\n            // cfg = new ConfigSolrXml(loader, null, is, null, false, this);\n             if (oldStyle) {\n               cfg = new ConfigSolrXmlOld(config, null);\n             } else {\n               cfg = new ConfigSolrXml(config, null);\n             }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d264f386d864b5751209060e8886ca9845f70469","date":1372172126,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ LIST + \", \" +CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n\n          ConfigSolr cfg = ConfigSolr.fromSolrHome(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ LIST + \", \" +CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n\n          File configFile = new File(solrHome, SOLR_XML);\n          InputStream is = new FileInputStream(configFile);\n\n          ConfigSolr cfg;\n\n          try {\n            Config config = new Config(loader, null, new InputSource(is), null, false);\n            \n            boolean oldStyle = (config.getNode(\"solr/cores\", false) != null);\n\n             if (oldStyle) {\n               cfg = new ConfigSolrXmlOld(config, null);\n             } else {\n               cfg = new ConfigSolrXml(config, null);\n             }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"354983dcdf70c800bf2573d10b54a7391b1dc167","date":1372183171,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ LIST + \", \" +CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n\n          File configFile = new File(solrHome, SOLR_XML);\n          InputStream is = new FileInputStream(configFile);\n\n          ConfigSolr cfg;\n\n          try {\n            Config config = new Config(loader, null, new InputSource(is), null, false);\n            \n            boolean oldStyle = (config.getNode(\"solr/cores\", false) != null);\n\n             if (oldStyle) {\n               cfg = new ConfigSolrXmlOld(config, null);\n             } else {\n               cfg = new ConfigSolrXml(config, null);\n             }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ LIST + \", \" +CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n\n          ConfigSolr cfg = ConfigSolr.fromSolrHome(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b03236193219d5533fd4b859a4602267c9c79c0","date":1372359820,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ PUT + \", \"+ LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr/data.txt 'config data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n\n          File configFile = new File(solrHome, SOLR_XML);\n          InputStream is = new FileInputStream(configFile);\n\n          ConfigSolr cfg;\n\n          try {\n            Config config = new Config(loader, null, new InputSource(is), null, false);\n            \n            boolean oldStyle = (config.getNode(\"solr/cores\", false) != null);\n\n             if (oldStyle) {\n               cfg = new ConfigSolrXmlOld(config, null);\n             } else {\n               cfg = new ConfigSolrXml(config, null);\n             }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(\"UTF-8\"),\n                          acl, CreateMode.PERSISTENT, true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ LIST + \", \" +CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n\n          File configFile = new File(solrHome, SOLR_XML);\n          InputStream is = new FileInputStream(configFile);\n\n          ConfigSolr cfg;\n\n          try {\n            Config config = new Config(loader, null, new InputSource(is), null, false);\n            \n            boolean oldStyle = (config.getNode(\"solr/cores\", false) != null);\n\n             if (oldStyle) {\n               cfg = new ConfigSolrXmlOld(config, null);\n             } else {\n               cfg = new ConfigSolrXml(config, null);\n             }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["5beca8a4be3b7ec89a056a849027205cc41987a2","d6b51620f35c0770a564d2f294607e3bdca18015"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7116474e2e390259937401cf928323e0cbc75e60","date":1372780249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ PUT + \", \"+ LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr/data.txt 'config data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n\n          ConfigSolr cfg = ConfigSolr.fromSolrHome(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(\"UTF-8\"),\n                          acl, CreateMode.PERSISTENT, true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ PUT + \", \"+ LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr/data.txt 'config data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n\n          File configFile = new File(solrHome, SOLR_XML);\n          InputStream is = new FileInputStream(configFile);\n\n          ConfigSolr cfg;\n\n          try {\n            Config config = new Config(loader, null, new InputSource(is), null, false);\n            \n            boolean oldStyle = (config.getNode(\"solr/cores\", false) != null);\n\n             if (oldStyle) {\n               cfg = new ConfigSolrXmlOld(config, null);\n             } else {\n               cfg = new ConfigSolrXml(config, null);\n             }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(\"UTF-8\"),\n                          acl, CreateMode.PERSISTENT, true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7c43bd440d08d05f1c7db15f7f4001790db5859","date":1373064328,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ PUT + \", \"+ LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr/data.txt 'config data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n\n          ConfigSolr cfg = ConfigSolr.fromSolrHome(loader, solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(\"UTF-8\"),\n                          acl, CreateMode.PERSISTENT, true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ PUT + \", \"+ LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr/data.txt 'config data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n\n          ConfigSolr cfg = ConfigSolr.fromSolrHome(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(\"UTF-8\"),\n                          acl, CreateMode.PERSISTENT, true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ PUT + \", \"+ LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr/data.txt 'config data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to shutdown the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(\"UTF-8\"),\n                          acl, CreateMode.PERSISTENT, true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ PUT + \", \"+ LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr/data.txt 'config data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n\n          ConfigSolr cfg = ConfigSolr.fromSolrHome(loader, solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(\"UTF-8\"),\n                          acl, CreateMode.PERSISTENT, true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ PUT + \", \"+ LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr/data.txt 'config data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to shutdown the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(\"UTF-8\"),\n                          acl, CreateMode.PERSISTENT, true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ LIST + \", \" +CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n          SolrResourceLoader loader = new SolrResourceLoader(solrHome);\n          solrHome = loader.getInstanceDir();\n\n          File configFile = new File(solrHome, SOLR_XML);\n          InputStream is = new FileInputStream(configFile);\n\n          ConfigSolr cfg;\n\n          try {\n            Config config = new Config(loader, null, new InputSource(is), null, false);\n            \n            boolean oldStyle = (config.getNode(\"solr/cores\", false) != null);\n\n             if (oldStyle) {\n               cfg = new ConfigSolrXmlOld(config, null);\n             } else {\n               cfg = new ConfigSolrXml(config, null);\n             }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cfg, solrHome);\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5beca8a4be3b7ec89a056a849027205cc41987a2","date":1376073123,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ PUT + \", \"+ LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to shutdown the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(\"UTF-8\"),\n                          acl, CreateMode.PERSISTENT, true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ PUT + \", \"+ LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr/data.txt 'config data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to shutdown the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(\"UTF-8\"),\n                          acl, CreateMode.PERSISTENT, true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":["3b03236193219d5533fd4b859a4602267c9c79c0"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ PUT + \", \"+ LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to shutdown the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(\"UTF-8\"),\n                          acl, CreateMode.PERSISTENT, true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ PUT + \", \"+ LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr/data.txt 'config data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to shutdown the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(\"UTF-8\"),\n                          acl, CreateMode.PERSISTENT, true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dee259562bdd34641f66e8583cbcc05018283f72","date":1376670617,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to shutdown the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(\"UTF-8\"),\n                          acl, CreateMode.PERSISTENT, true);\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            zkClient.create(arglist.get(0).toString(), IOUtils.toByteArray(is),\n                ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, true);\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ PUT + \", \"+ LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to shutdown the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(\"UTF-8\"),\n                          acl, CreateMode.PERSISTENT, true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["d6b51620f35c0770a564d2f294607e3bdca18015"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to shutdown the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(\"UTF-8\"),\n                          acl, CreateMode.PERSISTENT, true);\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            zkClient.create(arglist.get(0).toString(), IOUtils.toByteArray(is),\n                ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, true);\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ PUT + \", \"+ LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to shutdown the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(\"UTF-8\"),\n                          acl, CreateMode.PERSISTENT, true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to shutdown the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(\"UTF-8\"),\n                          acl, CreateMode.PERSISTENT, true);\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            zkClient.create(arglist.get(0).toString(), IOUtils.toByteArray(is),\n                ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, true);\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \"+ PUT + \", \"+ LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to shutdown the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(\"UTF-8\"),\n                          acl, CreateMode.PERSISTENT, true);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2baf1cdf7061808d4fe0dadc6f327893cf9024e8","date":1388433703,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to shutdown the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(\"UTF-8\"),\n                          acl, CreateMode.PERSISTENT, true);\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            zkClient.create(arglist.get(0).toString(), IOUtils.toByteArray(is),\n                ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, true);\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equals(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, \"UTF-8\"));\n        } else if (line.getOptionValue(CMD).equals(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to shutdown the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(\"UTF-8\"),\n                          acl, CreateMode.PERSISTENT, true);\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            zkClient.create(arglist.get(0).toString(), IOUtils.toByteArray(is),\n                ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, true);\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["d6b51620f35c0770a564d2f294607e3bdca18015"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b2a795bd549d550ea0b0a1aea32f247704ededcb","date":1391656036,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to shutdown the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(\"UTF-8\"),\n                          acl, CreateMode.PERSISTENT, true);\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            zkClient.create(arglist.get(0).toString(), IOUtils.toByteArray(is),\n                ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, true);\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equals(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, \"UTF-8\"));\n        } else if (line.getOptionValue(CMD).equals(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to shutdown the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(\"UTF-8\"),\n                          acl, CreateMode.PERSISTENT, true);\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            zkClient.create(arglist.get(0).toString(), IOUtils.toByteArray(is),\n                ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, true);\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equals(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, \"UTF-8\"));\n        } else if (line.getOptionValue(CMD).equals(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":["cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to shutdown the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(StandardCharsets.UTF_8),\n                          acl, CreateMode.PERSISTENT, true);\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            zkClient.create(arglist.get(0).toString(), IOUtils.toByteArray(is),\n                ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, true);\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equals(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equals(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to shutdown the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(\"UTF-8\"),\n                          acl, CreateMode.PERSISTENT, true);\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            zkClient.create(arglist.get(0).toString(), IOUtils.toByteArray(is),\n                ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, true);\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equals(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, \"UTF-8\"));\n        } else if (line.getOptionValue(CMD).equals(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to shutdown the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(StandardCharsets.UTF_8),\n                          acl, CreateMode.PERSISTENT, true);\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            zkClient.create(arglist.get(0).toString(), IOUtils.toByteArray(is),\n                ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, true);\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equals(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equals(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to shutdown the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(\"UTF-8\"),\n                          acl, CreateMode.PERSISTENT, true);\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            zkClient.create(arglist.get(0).toString(), IOUtils.toByteArray(is),\n                ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, true);\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equals(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, \"UTF-8\"));\n        } else if (line.getOptionValue(CMD).equals(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(StandardCharsets.UTF_8),\n                          acl, CreateMode.PERSISTENT, true);\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            zkClient.create(arglist.get(0).toString(), IOUtils.toByteArray(is),\n                ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, true);\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equals(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equals(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to shutdown the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(StandardCharsets.UTF_8),\n                          acl, CreateMode.PERSISTENT, true);\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            zkClient.create(arglist.get(0).toString(), IOUtils.toByteArray(is),\n                ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, true);\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equals(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equals(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c83f985d9828d30801541f1eed26aa3169646baf","date":1409315453,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            zkClient.create(arglist.get(0).toString(), IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equals(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equals(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(StandardCharsets.UTF_8),\n                          acl, CreateMode.PERSISTENT, true);\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            zkClient.create(arglist.get(0).toString(), IOUtils.toByteArray(is),\n                ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, true);\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equals(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equals(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["e7592992adbfd800a366615c7fc506ae10aeef39"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7592992adbfd800a366615c7fc506ae10aeef39","date":1419446642,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equals(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equals(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          zkClient.create(arglist.get(0).toString(), arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            zkClient.create(arglist.get(0).toString(), IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equals(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equals(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":["c83f985d9828d30801541f1eed26aa3169646baf"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c8a2521797f14d1d697a17a0069f5619cd211a6","date":1424361535,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.uploadConfigDir(Paths.get(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equals(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equals(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          \n          ZkController.uploadConfigDir(zkClient, new File(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.downloadConfigDir(zkClient, confName, new File(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equals(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equals(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e15199583d3635cb940942caed05132dd6c4c7c6","date":1424875551,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.uploadConfigDir(Paths.get(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equals(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equals(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.uploadConfigDir(Paths.get(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equals(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equals(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.uploadConfigDir(Paths.get(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equals(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equals(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, solrPort);\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.uploadConfigDir(Paths.get(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equals(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equals(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b6398c01b0e06ba3aa3a96d549077877414f9f8","date":1429701153,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.uploadConfigDir(Paths.get(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equals(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equals(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (CollectionAction.get(line.getOptionValue(CMD)) == CLUSTERPROP) {\n          if(!line.hasOption(NAME)) {\n            System.out.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ZkStateReader reader = new ZkStateReader(zkClient);\n          try {\n            reader.setClusterProperty(propertyName, propertyValue);\n          } catch (SolrException ex) {\n            //This can happen if two concurrent invocations of this command collide\n            //with each other. Here we are just adding a defensive check to see if\n            //the value is already set to expected value. If yes, then we don't\n            //fail the command.\n            Throwable cause = ex.getCause();\n            if(cause instanceof KeeperException.NodeExistsException\n                || cause instanceof KeeperException.BadVersionException) {\n                String currentValue = (String)reader.getClusterProps().get(propertyName);\n                if((currentValue == propertyValue) || (currentValue != null && currentValue.equals(propertyValue))) {\n                  return;\n                }\n            }\n            System.out.println(\"Unable to set the cluster property due to following error : \" +\n                ex.getLocalizedMessage() +\n                ((cause instanceof KeeperException.BadVersionException)?\". Try again\":\"\"));\n            System.exit(1);\n          } finally {\n            reader.close();\n          }\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    \n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.uploadConfigDir(Paths.get(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equals(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equals(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["d6b51620f35c0770a564d2f294607e3bdca18015"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6b51620f35c0770a564d2f294607e3bdca18015","date":1438604310,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.uploadConfigDir(Paths.get(confDir), confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            System.out.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ZkStateReader reader = new ZkStateReader(zkClient);\n          try {\n            reader.setClusterProperty(propertyName, propertyValue);\n          } catch (SolrException ex) {\n            //This can happen if two concurrent invocations of this command collide\n            //with each other. Here we are just adding a defensive check to see if\n            //the value is already set to expected value. If yes, then we don't\n            //fail the command.\n            Throwable cause = ex.getCause();\n            if(cause instanceof KeeperException.NodeExistsException\n                || cause instanceof KeeperException.BadVersionException) {\n                String currentValue = (String)reader.getClusterProps().get(propertyName);\n                if((currentValue == propertyValue) || (currentValue != null && currentValue.equals(propertyValue))) {\n                  return;\n                }\n            }\n            System.out.println(\"Unable to set the cluster property due to following error : \" +\n                ex.getLocalizedMessage() +\n                ((cause instanceof KeeperException.BadVersionException)?\". Try again\":\"\"));\n            System.exit(1);\n          } finally {\n            reader.close();\n          }\n        } else {\n          // If not cmd matches\n          System.out.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.uploadConfigDir(Paths.get(confDir), confName);\n        } else if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equals(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equals(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equals(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equals(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equals(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equals(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equals(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equals(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (CollectionAction.get(line.getOptionValue(CMD)) == CLUSTERPROP) {\n          if(!line.hasOption(NAME)) {\n            System.out.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ZkStateReader reader = new ZkStateReader(zkClient);\n          try {\n            reader.setClusterProperty(propertyName, propertyValue);\n          } catch (SolrException ex) {\n            //This can happen if two concurrent invocations of this command collide\n            //with each other. Here we are just adding a defensive check to see if\n            //the value is already set to expected value. If yes, then we don't\n            //fail the command.\n            Throwable cause = ex.getCause();\n            if(cause instanceof KeeperException.NodeExistsException\n                || cause instanceof KeeperException.BadVersionException) {\n                String currentValue = (String)reader.getClusterProps().get(propertyName);\n                if((currentValue == propertyValue) || (currentValue != null && currentValue.equals(propertyValue))) {\n                  return;\n                }\n            }\n            System.out.println(\"Unable to set the cluster property due to following error : \" +\n                ex.getLocalizedMessage() +\n                ((cause instanceof KeeperException.BadVersionException)?\". Try again\":\"\"));\n            System.exit(1);\n          } finally {\n            reader.close();\n          }\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":["3b03236193219d5533fd4b859a4602267c9c79c0","3b6398c01b0e06ba3aa3a96d549077877414f9f8","dee259562bdd34641f66e8583cbcc05018283f72","cf4e43a4d7a969632d4bec76fd5bba149cb81487","2baf1cdf7061808d4fe0dadc6f327893cf9024e8","f836b975e771ba6f5943f3b18589daa79b98191c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67cf727e72c71906ffd390c61b50a1c60f2ebd49","date":1452731614,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.uploadConfigDir(Paths.get(confDir), confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            System.out.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ZkStateReader reader = new ZkStateReader(zkClient);\n          try {\n            reader.setClusterProperty(propertyName, propertyValue);\n          } catch (SolrException ex) {\n            //This can happen if two concurrent invocations of this command collide\n            //with each other. Here we are just adding a defensive check to see if\n            //the value is already set to expected value. If yes, then we don't\n            //fail the command.\n            Throwable cause = ex.getCause();\n            if(cause instanceof KeeperException.NodeExistsException\n                || cause instanceof KeeperException.BadVersionException) {\n                String currentValue = (String)reader.getClusterProps().get(propertyName);\n                if((currentValue == propertyValue) || (currentValue != null && currentValue.equals(propertyValue))) {\n                  return;\n                }\n            }\n            System.out.println(\"Unable to set the cluster property due to following error : \" +\n                ex.getLocalizedMessage() +\n                ((cause instanceof KeeperException.BadVersionException)?\". Try again\":\"\"));\n            System.exit(1);\n          } finally {\n            reader.close();\n          }\n        } else {\n          // If not cmd matches\n          System.out.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.uploadConfigDir(Paths.get(confDir), confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            System.out.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ZkStateReader reader = new ZkStateReader(zkClient);\n          try {\n            reader.setClusterProperty(propertyName, propertyValue);\n          } catch (SolrException ex) {\n            //This can happen if two concurrent invocations of this command collide\n            //with each other. Here we are just adding a defensive check to see if\n            //the value is already set to expected value. If yes, then we don't\n            //fail the command.\n            Throwable cause = ex.getCause();\n            if(cause instanceof KeeperException.NodeExistsException\n                || cause instanceof KeeperException.BadVersionException) {\n                String currentValue = (String)reader.getClusterProps().get(propertyName);\n                if((currentValue == propertyValue) || (currentValue != null && currentValue.equals(propertyValue))) {\n                  return;\n                }\n            }\n            System.out.println(\"Unable to set the cluster property due to following error : \" +\n                ex.getLocalizedMessage() +\n                ((cause instanceof KeeperException.BadVersionException)?\". Try again\":\"\"));\n            System.exit(1);\n          } finally {\n            reader.close();\n          }\n        } else {\n          // If not cmd matches\n          System.out.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a0c04b71951333291abc7f317109a6a5957bd28","date":1457097827,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n        \n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.uploadConfigDir(Paths.get(confDir), confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            System.out.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ZkStateReader reader = new ZkStateReader(zkClient);\n          try {\n            reader.setClusterProperty(propertyName, propertyValue);\n          } catch (SolrException ex) {\n            //This can happen if two concurrent invocations of this command collide\n            //with each other. Here we are just adding a defensive check to see if\n            //the value is already set to expected value. If yes, then we don't\n            //fail the command.\n            Throwable cause = ex.getCause();\n            if(cause instanceof KeeperException.NodeExistsException\n                || cause instanceof KeeperException.BadVersionException) {\n                String currentValue = (String)reader.getClusterProps().get(propertyName);\n                if((currentValue == propertyValue) || (currentValue != null && currentValue.equals(propertyValue))) {\n                  return;\n                }\n            }\n            System.out.println(\"Unable to set the cluster property due to following error : \" +\n                ex.getLocalizedMessage() +\n                ((cause instanceof KeeperException.BadVersionException)?\". Try again\":\"\"));\n            System.exit(1);\n          } finally {\n            reader.close();\n          }\n        } else {\n          // If not cmd matches\n          System.out.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            new OnReconnect() {\n              @Override\n              public void command() {}\n            });\n        \n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.uploadConfigDir(Paths.get(confDir), confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            System.out.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ZkStateReader reader = new ZkStateReader(zkClient);\n          try {\n            reader.setClusterProperty(propertyName, propertyValue);\n          } catch (SolrException ex) {\n            //This can happen if two concurrent invocations of this command collide\n            //with each other. Here we are just adding a defensive check to see if\n            //the value is already set to expected value. If yes, then we don't\n            //fail the command.\n            Throwable cause = ex.getCause();\n            if(cause instanceof KeeperException.NodeExistsException\n                || cause instanceof KeeperException.BadVersionException) {\n                String currentValue = (String)reader.getClusterProps().get(propertyName);\n                if((currentValue == propertyValue) || (currentValue != null && currentValue.equals(propertyValue))) {\n                  return;\n                }\n            }\n            System.out.println(\"Unable to set the cluster property due to following error : \" +\n                ex.getLocalizedMessage() +\n                ((cause instanceof KeeperException.BadVersionException)?\". Try again\":\"\"));\n            System.exit(1);\n          } finally {\n            reader.close();\n          }\n        } else {\n          // If not cmd matches\n          System.out.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"198966886b1666a28e299aeb05a224d8579ee1da","date":1460030082,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options.addOption(EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n        \n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            System.out.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ZkStateReader reader = new ZkStateReader(zkClient);\n          try {\n            reader.setClusterProperty(propertyName, propertyValue);\n          } catch (SolrException ex) {\n            //This can happen if two concurrent invocations of this command collide\n            //with each other. Here we are just adding a defensive check to see if\n            //the value is already set to expected value. If yes, then we don't\n            //fail the command.\n            Throwable cause = ex.getCause();\n            if(cause instanceof KeeperException.NodeExistsException\n                || cause instanceof KeeperException.BadVersionException) {\n                String currentValue = (String)reader.getClusterProps().get(propertyName);\n                if((currentValue == propertyValue) || (currentValue != null && currentValue.equals(propertyValue))) {\n                  return;\n                }\n            }\n            System.out.println(\"Unable to set the cluster property due to following error : \" +\n                ex.getLocalizedMessage() +\n                ((cause instanceof KeeperException.BadVersionException)?\". Try again\":\"\"));\n            System.exit(1);\n          } finally {\n            reader.close();\n          }\n        } else {\n          // If not cmd matches\n          System.out.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n        \n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.uploadConfigDir(Paths.get(confDir), confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            System.out.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ZkStateReader reader = new ZkStateReader(zkClient);\n          try {\n            reader.setClusterProperty(propertyName, propertyValue);\n          } catch (SolrException ex) {\n            //This can happen if two concurrent invocations of this command collide\n            //with each other. Here we are just adding a defensive check to see if\n            //the value is already set to expected value. If yes, then we don't\n            //fail the command.\n            Throwable cause = ex.getCause();\n            if(cause instanceof KeeperException.NodeExistsException\n                || cause instanceof KeeperException.BadVersionException) {\n                String currentValue = (String)reader.getClusterProps().get(propertyName);\n                if((currentValue == propertyValue) || (currentValue != null && currentValue.equals(propertyValue))) {\n                  return;\n                }\n            }\n            System.out.println(\"Unable to set the cluster property due to following error : \" +\n                ex.getLocalizedMessage() +\n                ((cause instanceof KeeperException.BadVersionException)?\". Try again\":\"\"));\n            System.exit(1);\n          } finally {\n            reader.close();\n          }\n        } else {\n          // If not cmd matches\n          System.out.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dae68c5bb580df181adfdab7a117ffc1103fbca","date":1460731973,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options.addOption(EXCLUDE_REGEX_SHORT, EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n        \n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            System.out.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ZkStateReader reader = new ZkStateReader(zkClient);\n          try {\n            reader.setClusterProperty(propertyName, propertyValue);\n          } catch (SolrException ex) {\n            //This can happen if two concurrent invocations of this command collide\n            //with each other. Here we are just adding a defensive check to see if\n            //the value is already set to expected value. If yes, then we don't\n            //fail the command.\n            Throwable cause = ex.getCause();\n            if(cause instanceof KeeperException.NodeExistsException\n                || cause instanceof KeeperException.BadVersionException) {\n                String currentValue = (String)reader.getClusterProps().get(propertyName);\n                if((currentValue == propertyValue) || (currentValue != null && currentValue.equals(propertyValue))) {\n                  return;\n                }\n            }\n            System.out.println(\"Unable to set the cluster property due to following error : \" +\n                ex.getLocalizedMessage() +\n                ((cause instanceof KeeperException.BadVersionException)?\". Try again\":\"\"));\n            System.exit(1);\n          } finally {\n            reader.close();\n          }\n        } else {\n          // If not cmd matches\n          System.out.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options.addOption(EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n        \n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            System.out.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ZkStateReader reader = new ZkStateReader(zkClient);\n          try {\n            reader.setClusterProperty(propertyName, propertyValue);\n          } catch (SolrException ex) {\n            //This can happen if two concurrent invocations of this command collide\n            //with each other. Here we are just adding a defensive check to see if\n            //the value is already set to expected value. If yes, then we don't\n            //fail the command.\n            Throwable cause = ex.getCause();\n            if(cause instanceof KeeperException.NodeExistsException\n                || cause instanceof KeeperException.BadVersionException) {\n                String currentValue = (String)reader.getClusterProps().get(propertyName);\n                if((currentValue == propertyValue) || (currentValue != null && currentValue.equals(propertyValue))) {\n                  return;\n                }\n            }\n            System.out.println(\"Unable to set the cluster property due to following error : \" +\n                ex.getLocalizedMessage() +\n                ((cause instanceof KeeperException.BadVersionException)?\". Try again\":\"\"));\n            System.exit(1);\n          } finally {\n            reader.close();\n          }\n        } else {\n          // If not cmd matches\n          System.out.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73457c9372b4f2f962ca916788a5fe9e1f644a9f","date":1460794059,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options.addOption(EXCLUDE_REGEX_SHORT, EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n        \n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            System.out.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ZkStateReader reader = new ZkStateReader(zkClient);\n          try {\n            reader.setClusterProperty(propertyName, propertyValue);\n          } catch (SolrException ex) {\n            //This can happen if two concurrent invocations of this command collide\n            //with each other. Here we are just adding a defensive check to see if\n            //the value is already set to expected value. If yes, then we don't\n            //fail the command.\n            Throwable cause = ex.getCause();\n            if(cause instanceof KeeperException.NodeExistsException\n                || cause instanceof KeeperException.BadVersionException) {\n                String currentValue = (String)reader.getClusterProps().get(propertyName);\n                if((currentValue == propertyValue) || (currentValue != null && currentValue.equals(propertyValue))) {\n                  return;\n                }\n            }\n            System.out.println(\"Unable to set the cluster property due to following error : \" +\n                ex.getLocalizedMessage() +\n                ((cause instanceof KeeperException.BadVersionException)?\". Try again\":\"\"));\n            System.exit(1);\n          } finally {\n            reader.close();\n          }\n        } else {\n          // If not cmd matches\n          System.out.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options.addOption(EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n        \n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            System.out.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ZkStateReader reader = new ZkStateReader(zkClient);\n          try {\n            reader.setClusterProperty(propertyName, propertyValue);\n          } catch (SolrException ex) {\n            //This can happen if two concurrent invocations of this command collide\n            //with each other. Here we are just adding a defensive check to see if\n            //the value is already set to expected value. If yes, then we don't\n            //fail the command.\n            Throwable cause = ex.getCause();\n            if(cause instanceof KeeperException.NodeExistsException\n                || cause instanceof KeeperException.BadVersionException) {\n                String currentValue = (String)reader.getClusterProps().get(propertyName);\n                if((currentValue == propertyValue) || (currentValue != null && currentValue.equals(propertyValue))) {\n                  return;\n                }\n            }\n            System.out.println(\"Unable to set the cluster property due to following error : \" +\n                ex.getLocalizedMessage() +\n                ((cause instanceof KeeperException.BadVersionException)?\". Try again\":\"\"));\n            System.exit(1);\n          } finally {\n            reader.close();\n          }\n        } else {\n          // If not cmd matches\n          System.out.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"115923bc88e5b1dc4bef049b1ded8486723052ed","date":1463216796,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options.addOption(EXCLUDE_REGEX_SHORT, EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n        \n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            System.out.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ClusterProperties props = new ClusterProperties(zkClient);\n          try {\n            props.setClusterProperty(propertyName, propertyValue);\n          } catch (IOException ex) {\n            System.out.println(\"Unable to set the cluster property due to following error : \" + ex.getLocalizedMessage());\n            System.exit(1);\n          }\n        } else {\n          // If not cmd matches\n          System.out.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options.addOption(EXCLUDE_REGEX_SHORT, EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n        \n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            System.out.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ZkStateReader reader = new ZkStateReader(zkClient);\n          try {\n            reader.setClusterProperty(propertyName, propertyValue);\n          } catch (SolrException ex) {\n            //This can happen if two concurrent invocations of this command collide\n            //with each other. Here we are just adding a defensive check to see if\n            //the value is already set to expected value. If yes, then we don't\n            //fail the command.\n            Throwable cause = ex.getCause();\n            if(cause instanceof KeeperException.NodeExistsException\n                || cause instanceof KeeperException.BadVersionException) {\n                String currentValue = (String)reader.getClusterProps().get(propertyName);\n                if((currentValue == propertyValue) || (currentValue != null && currentValue.equals(propertyValue))) {\n                  return;\n                }\n            }\n            System.out.println(\"Unable to set the cluster property due to following error : \" +\n                ex.getLocalizedMessage() +\n                ((cause instanceof KeeperException.BadVersionException)?\". Try again\":\"\"));\n            System.exit(1);\n          } finally {\n            reader.close();\n          }\n        } else {\n          // If not cmd matches\n          System.out.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options.addOption(EXCLUDE_REGEX_SHORT, EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n        \n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            System.out.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ClusterProperties props = new ClusterProperties(zkClient);\n          try {\n            props.setClusterProperty(propertyName, propertyValue);\n          } catch (IOException ex) {\n            System.out.println(\"Unable to set the cluster property due to following error : \" + ex.getLocalizedMessage());\n            System.exit(1);\n          }\n        } else {\n          // If not cmd matches\n          System.out.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options.addOption(EXCLUDE_REGEX_SHORT, EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n        \n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            System.out.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ZkStateReader reader = new ZkStateReader(zkClient);\n          try {\n            reader.setClusterProperty(propertyName, propertyValue);\n          } catch (SolrException ex) {\n            //This can happen if two concurrent invocations of this command collide\n            //with each other. Here we are just adding a defensive check to see if\n            //the value is already set to expected value. If yes, then we don't\n            //fail the command.\n            Throwable cause = ex.getCause();\n            if(cause instanceof KeeperException.NodeExistsException\n                || cause instanceof KeeperException.BadVersionException) {\n                String currentValue = (String)reader.getClusterProps().get(propertyName);\n                if((currentValue == propertyValue) || (currentValue != null && currentValue.equals(propertyValue))) {\n                  return;\n                }\n            }\n            System.out.println(\"Unable to set the cluster property due to following error : \" +\n                ex.getLocalizedMessage() +\n                ((cause instanceof KeeperException.BadVersionException)?\". Try again\":\"\"));\n            System.exit(1);\n          } finally {\n            reader.close();\n          }\n        } else {\n          // If not cmd matches\n          System.out.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options.addOption(EXCLUDE_REGEX_SHORT, EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n        \n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            System.out.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ClusterProperties props = new ClusterProperties(zkClient);\n          try {\n            props.setClusterProperty(propertyName, propertyValue);\n          } catch (IOException ex) {\n            System.out.println(\"Unable to set the cluster property due to following error : \" + ex.getLocalizedMessage());\n            System.exit(1);\n          }\n        } else {\n          // If not cmd matches\n          System.out.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options.addOption(EXCLUDE_REGEX_SHORT, EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n        \n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            System.out.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ZkStateReader reader = new ZkStateReader(zkClient);\n          try {\n            reader.setClusterProperty(propertyName, propertyValue);\n          } catch (SolrException ex) {\n            //This can happen if two concurrent invocations of this command collide\n            //with each other. Here we are just adding a defensive check to see if\n            //the value is already set to expected value. If yes, then we don't\n            //fail the command.\n            Throwable cause = ex.getCause();\n            if(cause instanceof KeeperException.NodeExistsException\n                || cause instanceof KeeperException.BadVersionException) {\n                String currentValue = (String)reader.getClusterProps().get(propertyName);\n                if((currentValue == propertyValue) || (currentValue != null && currentValue.equals(propertyValue))) {\n                  return;\n                }\n            }\n            System.out.println(\"Unable to set the cluster property due to following error : \" +\n                ex.getLocalizedMessage() +\n                ((cause instanceof KeeperException.BadVersionException)?\". Try again\":\"\"));\n            System.exit(1);\n          } finally {\n            reader.close();\n          }\n        } else {\n          // If not cmd matches\n          System.out.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options.addOption(EXCLUDE_REGEX_SHORT, EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n        \n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            System.out.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ClusterProperties props = new ClusterProperties(zkClient);\n          try {\n            props.setClusterProperty(propertyName, propertyValue);\n          } catch (IOException ex) {\n            System.out.println(\"Unable to set the cluster property due to following error : \" + ex.getLocalizedMessage());\n            System.exit(1);\n          }\n        } else {\n          // If not cmd matches\n          System.out.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options.addOption(EXCLUDE_REGEX_SHORT, EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n        \n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            System.out.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ZkStateReader reader = new ZkStateReader(zkClient);\n          try {\n            reader.setClusterProperty(propertyName, propertyValue);\n          } catch (SolrException ex) {\n            //This can happen if two concurrent invocations of this command collide\n            //with each other. Here we are just adding a defensive check to see if\n            //the value is already set to expected value. If yes, then we don't\n            //fail the command.\n            Throwable cause = ex.getCause();\n            if(cause instanceof KeeperException.NodeExistsException\n                || cause instanceof KeeperException.BadVersionException) {\n                String currentValue = (String)reader.getClusterProps().get(propertyName);\n                if((currentValue == propertyValue) || (currentValue != null && currentValue.equals(propertyValue))) {\n                  return;\n                }\n            }\n            System.out.println(\"Unable to set the cluster property due to following error : \" +\n                ex.getLocalizedMessage() +\n                ((cause instanceof KeeperException.BadVersionException)?\". Try again\":\"\"));\n            System.exit(1);\n          } finally {\n            reader.close();\n          }\n        } else {\n          // If not cmd matches\n          System.out.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9df4f97973cb9b64b79ec8d6041fc05e9327795","date":1493743124,"type":3,"author":"Mark Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS + \", \" + LS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options.addOption(EXCLUDE_REGEX_SHORT, EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        stdout.println(\"Examples:\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LS + \" /solr/live_nodes\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          stdout.println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n        \n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            stdout.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            stdout.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            stdout.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStream(stdout);\n        } else if (line.getOptionValue(CMD).equals(LS)) {\n\n          List argList = line.getArgList();\n          if (argList.size() != 1) {\n            stdout.println(\"-\" + LS + \" requires one arg - the path to list\");\n            System.exit(1);\n          }\n\n          StringBuilder sb = new StringBuilder();\n          String path = argList.get(0).toString();\n          zkClient.printLayout(path == null ? \"/\" : path, 0, sb);\n          stdout.println(sb.toString());\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          stdout.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            stdout.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ClusterProperties props = new ClusterProperties(zkClient);\n          try {\n            props.setClusterProperty(propertyName, propertyValue);\n          } catch (IOException ex) {\n            stdout.println(\"Unable to set the cluster property due to following error : \" + ex.getLocalizedMessage());\n            System.exit(1);\n          }\n        } else {\n          // If not cmd matches\n          stdout.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      stdout.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options.addOption(EXCLUDE_REGEX_SHORT, EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n        \n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            System.out.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ClusterProperties props = new ClusterProperties(zkClient);\n          try {\n            props.setClusterProperty(propertyName, propertyValue);\n          } catch (IOException ex) {\n            System.out.println(\"Unable to set the cluster property due to following error : \" + ex.getLocalizedMessage());\n            System.exit(1);\n          }\n        } else {\n          // If not cmd matches\n          System.out.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS + \", \" + LS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options.addOption(EXCLUDE_REGEX_SHORT, EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        stdout.println(\"Examples:\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LS + \" /solr/live_nodes\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          stdout.println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n        \n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            stdout.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            stdout.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            stdout.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStream(stdout);\n        } else if (line.getOptionValue(CMD).equals(LS)) {\n\n          List argList = line.getArgList();\n          if (argList.size() != 1) {\n            stdout.println(\"-\" + LS + \" requires one arg - the path to list\");\n            System.exit(1);\n          }\n\n          StringBuilder sb = new StringBuilder();\n          String path = argList.get(0).toString();\n          zkClient.printLayout(path == null ? \"/\" : path, 0, sb);\n          stdout.println(sb.toString());\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          stdout.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            stdout.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ClusterProperties props = new ClusterProperties(zkClient);\n          try {\n            props.setClusterProperty(propertyName, propertyValue);\n          } catch (IOException ex) {\n            stdout.println(\"Unable to set the cluster property due to following error : \" + ex.getLocalizedMessage());\n            System.exit(1);\n          }\n        } else {\n          // If not cmd matches\n          stdout.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      stdout.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(zkHostOption);\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options.addOption(EXCLUDE_REGEX_SHORT, EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        System.out.println(\"Examples:\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        System.out.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          System.out\n              .println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n        \n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            System.out.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            System.out.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            System.out.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStdOut();\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          System.out.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            System.out.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            System.out.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            System.out.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ClusterProperties props = new ClusterProperties(zkClient);\n          try {\n            props.setClusterProperty(propertyName, propertyValue);\n          } catch (IOException ex) {\n            System.out.println(\"Unable to set the cluster property due to following error : \" + ex.getLocalizedMessage());\n            System.exit(1);\n          }\n        } else {\n          // If not cmd matches\n          System.out.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      System.out.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   *\n   * Bootstrap the current configs for all collections in solr.xml.\n   *\n   * Upload a named config set from a given directory.\n   *\n   * Link a named config set explicity to a collection.\n   *\n   * Clear ZooKeeper info.\n   *\n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n\n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS + \", \" + LS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(solrHomeOption);\n\n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n\n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n\n    options.addOption(EXCLUDE_REGEX_SHORT, EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n\n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n\n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        stdout.println(\"Examples:\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LS + \" /solr/live_nodes\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n\n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n\n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          stdout.println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n\n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n\n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            stdout.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            stdout.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            stdout.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n\n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStream(stdout);\n        } else if (line.getOptionValue(CMD).equals(LS)) {\n\n          List argList = line.getArgList();\n          if (argList.size() != 1) {\n            stdout.println(\"-\" + LS + \" requires one arg - the path to list\");\n            System.exit(1);\n          }\n\n          StringBuilder sb = new StringBuilder();\n          String path = argList.get(0).toString();\n          zkClient.printLayout(path == null ? \"/\" : path, 0, sb);\n          stdout.println(sb.toString());\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          stdout.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            stdout.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ClusterProperties props = new ClusterProperties(zkClient);\n          try {\n            props.setClusterProperty(propertyName, propertyValue);\n          } catch (IOException ex) {\n            stdout.println(\"Unable to set the cluster property due to following error : \" + ex.getLocalizedMessage());\n            System.exit(1);\n          }\n        } else {\n          // If not cmd matches\n          stdout.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      stdout.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   * \n   * Bootstrap the current configs for all collections in solr.xml.\n   * \n   * Upload a named config set from a given directory.\n   * \n   * Link a named config set explicity to a collection.\n   * \n   * Clear ZooKeeper info.\n   * \n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    \n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS + \", \" + LS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(solrHomeOption);\n    \n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n    \n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n    \n    options.addOption(EXCLUDE_REGEX_SHORT, EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n    \n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n      \n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        stdout.println(\"Examples:\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LS + \" /solr/live_nodes\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n      \n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n      \n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          stdout.println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n      \n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n        \n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            stdout.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            stdout.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n          \n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n          \n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            stdout.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n          \n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStream(stdout);\n        } else if (line.getOptionValue(CMD).equals(LS)) {\n\n          List argList = line.getArgList();\n          if (argList.size() != 1) {\n            stdout.println(\"-\" + LS + \" requires one arg - the path to list\");\n            System.exit(1);\n          }\n\n          StringBuilder sb = new StringBuilder();\n          String path = argList.get(0).toString();\n          zkClient.printLayout(path == null ? \"/\" : path, 0, sb);\n          stdout.println(sb.toString());\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          stdout.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            stdout.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ClusterProperties props = new ClusterProperties(zkClient);\n          try {\n            props.setClusterProperty(propertyName, propertyValue);\n          } catch (IOException ex) {\n            stdout.println(\"Unable to set the cluster property due to following error : \" + ex.getLocalizedMessage());\n            System.exit(1);\n          }\n        } else {\n          // If not cmd matches\n          stdout.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      stdout.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   *\n   * Bootstrap the current configs for all collections in solr.xml.\n   *\n   * Upload a named config set from a given directory.\n   *\n   * Link a named config set explicity to a collection.\n   *\n   * Clear ZooKeeper info.\n   *\n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n\n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS + \", \" + LS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(solrHomeOption);\n\n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n\n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n\n    options.addOption(EXCLUDE_REGEX_SHORT, EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n\n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n\n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        stdout.println(\"Examples:\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LS + \" /solr/live_nodes\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n\n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n\n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          stdout.println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n\n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, new File(solrHome, \"/zoo_data\"),\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n\n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            stdout.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            stdout.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            stdout.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n\n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStream(stdout);\n        } else if (line.getOptionValue(CMD).equals(LS)) {\n\n          List argList = line.getArgList();\n          if (argList.size() != 1) {\n            stdout.println(\"-\" + LS + \" requires one arg - the path to list\");\n            System.exit(1);\n          }\n\n          StringBuilder sb = new StringBuilder();\n          String path = argList.get(0).toString();\n          zkClient.printLayout(path == null ? \"/\" : path, 0, sb);\n          stdout.println(sb.toString());\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          stdout.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            stdout.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ClusterProperties props = new ClusterProperties(zkClient);\n          try {\n            props.setClusterProperty(propertyName, propertyValue);\n          } catch (IOException ex) {\n            stdout.println(\"Unable to set the cluster property due to following error : \" + ex.getLocalizedMessage());\n            System.exit(1);\n          }\n        } else {\n          // If not cmd matches\n          stdout.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      stdout.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   *\n   * Bootstrap the current configs for all collections in solr.xml.\n   *\n   * Upload a named config set from a given directory.\n   *\n   * Link a named config set explicity to a collection.\n   *\n   * Clear ZooKeeper info.\n   *\n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n\n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS + \", \" + LS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(solrHomeOption);\n\n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n\n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n\n    options.addOption(EXCLUDE_REGEX_SHORT, EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n\n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n\n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        stdout.println(\"Examples:\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LS + \" /solr/live_nodes\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n\n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n\n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          stdout.println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n\n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, solrHome + \"/zoo_data\",\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n\n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            stdout.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            stdout.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            stdout.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n\n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStream(stdout);\n        } else if (line.getOptionValue(CMD).equals(LS)) {\n\n          List argList = line.getArgList();\n          if (argList.size() != 1) {\n            stdout.println(\"-\" + LS + \" requires one arg - the path to list\");\n            System.exit(1);\n          }\n\n          StringBuilder sb = new StringBuilder();\n          String path = argList.get(0).toString();\n          zkClient.printLayout(path == null ? \"/\" : path, 0, sb);\n          stdout.println(sb.toString());\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          stdout.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            stdout.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ClusterProperties props = new ClusterProperties(zkClient);\n          try {\n            props.setClusterProperty(propertyName, propertyValue);\n          } catch (IOException ex) {\n            stdout.println(\"Unable to set the cluster property due to following error : \" + ex.getLocalizedMessage());\n            System.exit(1);\n          }\n        } else {\n          // If not cmd matches\n          stdout.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      stdout.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   *\n   * Bootstrap the current configs for all collections in solr.xml.\n   *\n   * Upload a named config set from a given directory.\n   *\n   * Link a named config set explicity to a collection.\n   *\n   * Clear ZooKeeper info.\n   *\n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n\n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS + \", \" + LS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(solrHomeOption);\n\n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n\n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n\n    options.addOption(EXCLUDE_REGEX_SHORT, EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n\n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n\n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        stdout.println(\"Examples:\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LS + \" /solr/live_nodes\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n\n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n\n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          stdout.println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n\n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, new File(solrHome, \"/zoo_data\"),\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n\n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            stdout.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(Paths.get(solrHome), new Properties());\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            stdout.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            stdout.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n\n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStream(stdout);\n        } else if (line.getOptionValue(CMD).equals(LS)) {\n\n          List argList = line.getArgList();\n          if (argList.size() != 1) {\n            stdout.println(\"-\" + LS + \" requires one arg - the path to list\");\n            System.exit(1);\n          }\n\n          StringBuilder sb = new StringBuilder();\n          String path = argList.get(0).toString();\n          zkClient.printLayout(path == null ? \"/\" : path, 0, sb);\n          stdout.println(sb.toString());\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          stdout.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            stdout.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ClusterProperties props = new ClusterProperties(zkClient);\n          try {\n            props.setClusterProperty(propertyName, propertyValue);\n          } catch (IOException ex) {\n            stdout.println(\"Unable to set the cluster property due to following error : \" + ex.getLocalizedMessage());\n            System.exit(1);\n          }\n        } else {\n          // If not cmd matches\n          stdout.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      stdout.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   *\n   * Bootstrap the current configs for all collections in solr.xml.\n   *\n   * Upload a named config set from a given directory.\n   *\n   * Link a named config set explicity to a collection.\n   *\n   * Clear ZooKeeper info.\n   *\n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n\n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS + \", \" + LS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(solrHomeOption);\n\n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n\n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n\n    options.addOption(EXCLUDE_REGEX_SHORT, EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n\n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n\n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        stdout.println(\"Examples:\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LS + \" /solr/live_nodes\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n\n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n\n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          stdout.println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n\n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, new File(solrHome, \"/zoo_data\"),\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n\n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            stdout.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(solrHome);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            stdout.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc, solrHome);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            stdout.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n\n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStream(stdout);\n        } else if (line.getOptionValue(CMD).equals(LS)) {\n\n          List argList = line.getArgList();\n          if (argList.size() != 1) {\n            stdout.println(\"-\" + LS + \" requires one arg - the path to list\");\n            System.exit(1);\n          }\n\n          StringBuilder sb = new StringBuilder();\n          String path = argList.get(0).toString();\n          zkClient.printLayout(path == null ? \"/\" : path, 0, sb);\n          stdout.println(sb.toString());\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          stdout.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            stdout.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ClusterProperties props = new ClusterProperties(zkClient);\n          try {\n            props.setClusterProperty(propertyName, propertyValue);\n          } catch (IOException ex) {\n            stdout.println(\"Unable to set the cluster property due to following error : \" + ex.getLocalizedMessage());\n            System.exit(1);\n          }\n        } else {\n          // If not cmd matches\n          stdout.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      stdout.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dd6cf7e1b30a14801c9e290183b875c6801bbe9","date":1591734817,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   *\n   * Bootstrap the current configs for all collections in solr.xml.\n   *\n   * Upload a named config set from a given directory.\n   *\n   * Link a named config set explicity to a collection.\n   *\n   * Clear ZooKeeper info.\n   *\n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    options.addOption(Option.builder(CMD)\n        .hasArg(true)\n        .desc(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS + \", \" + LS).build());\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(solrHomeOption);\n\n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n\n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n\n    options.addOption(EXCLUDE_REGEX_SHORT, EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n\n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n\n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        stdout.println(\"Examples:\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LS + \" /solr/live_nodes\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n\n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n\n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          stdout.println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n\n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, new File(solrHome, \"/zoo_data\"),\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n\n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            stdout.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(Paths.get(solrHome), new Properties());\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            stdout.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            stdout.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n\n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStream(stdout);\n        } else if (line.getOptionValue(CMD).equals(LS)) {\n\n          List argList = line.getArgList();\n          if (argList.size() != 1) {\n            stdout.println(\"-\" + LS + \" requires one arg - the path to list\");\n            System.exit(1);\n          }\n\n          StringBuilder sb = new StringBuilder();\n          String path = argList.get(0).toString();\n          zkClient.printLayout(path == null ? \"/\" : path, 0, sb);\n          stdout.println(sb.toString());\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          stdout.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            stdout.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ClusterProperties props = new ClusterProperties(zkClient);\n          try {\n            props.setClusterProperty(propertyName, propertyValue);\n          } catch (IOException ex) {\n            stdout.println(\"Unable to set the cluster property due to following error : \" + ex.getLocalizedMessage());\n            System.exit(1);\n          }\n        } else {\n          // If not cmd matches\n          stdout.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      stdout.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   *\n   * Bootstrap the current configs for all collections in solr.xml.\n   *\n   * Upload a named config set from a given directory.\n   *\n   * Link a named config set explicity to a collection.\n   *\n   * Clear ZooKeeper info.\n   *\n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n\n    options.addOption(OptionBuilder\n        .hasArg(true)\n        .withDescription(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS + \", \" + LS).create(CMD));\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(solrHomeOption);\n\n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n\n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n\n    options.addOption(EXCLUDE_REGEX_SHORT, EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n\n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n\n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        stdout.println(\"Examples:\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LS + \" /solr/live_nodes\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n\n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n\n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          stdout.println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n\n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, new File(solrHome, \"/zoo_data\"),\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n\n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            stdout.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(Paths.get(solrHome), new Properties());\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            stdout.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            stdout.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n\n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStream(stdout);\n        } else if (line.getOptionValue(CMD).equals(LS)) {\n\n          List argList = line.getArgList();\n          if (argList.size() != 1) {\n            stdout.println(\"-\" + LS + \" requires one arg - the path to list\");\n            System.exit(1);\n          }\n\n          StringBuilder sb = new StringBuilder();\n          String path = argList.get(0).toString();\n          zkClient.printLayout(path == null ? \"/\" : path, 0, sb);\n          stdout.println(sb.toString());\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          stdout.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            stdout.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ClusterProperties props = new ClusterProperties(zkClient);\n          try {\n            props.setClusterProperty(propertyName, propertyValue);\n          } catch (IOException ex) {\n            stdout.println(\"Unable to set the cluster property due to following error : \" + ex.getLocalizedMessage());\n            System.exit(1);\n          }\n        } else {\n          // If not cmd matches\n          stdout.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      stdout.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkCLI#main(String[]).mjava","sourceNew":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   *\n   * Bootstrap the current configs for all collections in solr.xml.\n   *\n   * Upload a named config set from a given directory.\n   *\n   * Link a named config set explicity to a collection.\n   *\n   * Clear ZooKeeper info.\n   *\n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    options.addOption(Option.builder(CMD)\n        .hasArg(true)\n        .desc(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS + \", \" + LS).build());\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(solrHomeOption);\n\n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n\n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n\n    options.addOption(EXCLUDE_REGEX_SHORT, EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n\n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n\n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        stdout.println(\"Examples:\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LS + \" /solr/live_nodes\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n\n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n\n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          stdout.println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n\n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, new File(solrHome, \"/zoo_data\"),\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n\n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            stdout.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(Paths.get(solrHome), new Properties());\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            stdout.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            stdout.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n\n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStream(stdout);\n        } else if (line.getOptionValue(CMD).equals(LS)) {\n\n          @SuppressWarnings({\"rawtypes\"})\n          List argList = line.getArgList();\n          if (argList.size() != 1) {\n            stdout.println(\"-\" + LS + \" requires one arg - the path to list\");\n            System.exit(1);\n          }\n\n          StringBuilder sb = new StringBuilder();\n          String path = argList.get(0).toString();\n          zkClient.printLayout(path == null ? \"/\" : path, 0, sb);\n          stdout.println(sb.toString());\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          @SuppressWarnings({\"rawtypes\"})\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          @SuppressWarnings({\"rawtypes\"})\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          @SuppressWarnings({\"rawtypes\"})\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          @SuppressWarnings({\"rawtypes\"})\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          @SuppressWarnings({\"rawtypes\"})\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          stdout.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          @SuppressWarnings({\"rawtypes\"})\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          @SuppressWarnings({\"rawtypes\"})\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            stdout.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ClusterProperties props = new ClusterProperties(zkClient);\n          try {\n            props.setClusterProperty(propertyName, propertyValue);\n          } catch (IOException ex) {\n            stdout.println(\"Unable to set the cluster property due to following error : \" + ex.getLocalizedMessage());\n            System.exit(1);\n          }\n        } else {\n          // If not cmd matches\n          stdout.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      stdout.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Allows you to perform a variety of zookeeper related tasks, such as:\n   *\n   * Bootstrap the current configs for all collections in solr.xml.\n   *\n   * Upload a named config set from a given directory.\n   *\n   * Link a named config set explicity to a collection.\n   *\n   * Clear ZooKeeper info.\n   *\n   * If you also pass a solrPort, it will be used to start an embedded zk useful\n   * for single machine, multi node tests.\n   */\n  public static void main(String[] args) throws InterruptedException,\n      TimeoutException, IOException, ParserConfigurationException,\n      SAXException, KeeperException {\n\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n    options.addOption(Option.builder(CMD)\n        .hasArg(true)\n        .desc(\n            \"cmd to run: \" + BOOTSTRAP + \", \" + UPCONFIG + \", \" + DOWNCONFIG\n                + \", \" + LINKCONFIG + \", \" + MAKEPATH + \", \" + PUT + \", \" + PUT_FILE + \",\"\n                + GET + \",\" + GET_FILE + \", \" + LIST + \", \" + CLEAR\n                + \", \" + UPDATEACLS + \", \" + LS).build());\n\n    Option zkHostOption = new Option(\"z\", ZKHOST, true,\n        \"ZooKeeper host address\");\n    options.addOption(zkHostOption);\n    Option solrHomeOption = new Option(\"s\", SOLRHOME, true,\n        \"for \" + BOOTSTRAP + \", \" + RUNZK + \": solrhome location\");\n    options.addOption(solrHomeOption);\n\n    options.addOption(\"d\", CONFDIR, true,\n        \"for \" + UPCONFIG + \": a directory of configuration files\");\n    options.addOption(\"n\", CONFNAME, true,\n        \"for \" + UPCONFIG + \", \" + LINKCONFIG + \": name of the config set\");\n\n\n    options.addOption(\"c\", COLLECTION, true,\n        \"for \" + LINKCONFIG + \": name of the collection\");\n\n    options.addOption(EXCLUDE_REGEX_SHORT, EXCLUDE_REGEX, true,\n        \"for \" + UPCONFIG + \": files matching this regular expression won't be uploaded\");\n\n    options\n        .addOption(\n            \"r\",\n            RUNZK,\n            true,\n            \"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)\");\n\n    options.addOption(\"h\", HELP, false, \"bring up this help page\");\n    options.addOption(NAME, true, \"name of the cluster property to set\");\n    options.addOption(VALUE_LONG, true, \"value of the cluster to set\");\n\n    try {\n      // parse the command line arguments\n      CommandLine line = parser.parse(options, args);\n\n      if (line.hasOption(HELP) || !line.hasOption(ZKHOST)\n          || !line.hasOption(CMD)) {\n        // automatically generate the help statement\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printHelp(ZK_CLI_NAME, options);\n        stdout.println(\"Examples:\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + BOOTSTRAP + \" -\" + SOLRHOME + \" /opt/solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + DOWNCONFIG + \" -\" + CONFDIR + \" /opt/solr/collection1/conf\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LINKCONFIG + \" -\" + COLLECTION + \" collection1\" + \" -\" + CONFNAME + \" myconf\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + MAKEPATH + \" /apache/solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT + \" /solr.conf 'conf data'\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + PUT_FILE + \" /solr.xml /User/myuser/solr/solr.xml\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET + \" /solr.xml\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + GET_FILE + \" /solr.xml solr.xml.file\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLEAR + \" /solr\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LIST);\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + LS + \" /solr/live_nodes\");\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + CLUSTERPROP + \" -\" + NAME + \" urlScheme -\" + VALUE_LONG + \" https\" );\n        stdout.println(\"zkcli.sh -zkhost localhost:9983 -cmd \" + UPDATEACLS + \" /solr\");\n        return;\n      }\n\n      // start up a tmp zk server first\n      String zkServerAddress = line.getOptionValue(ZKHOST);\n      String solrHome = line.getOptionValue(SOLRHOME);\n\n      String solrPort = null;\n      if (line.hasOption(RUNZK)) {\n        if (!line.hasOption(SOLRHOME)) {\n          stdout.println(\"-\" + SOLRHOME + \" is required for \" + RUNZK);\n          System.exit(1);\n        }\n        solrPort = line.getOptionValue(RUNZK);\n      }\n\n      SolrZkServer zkServer = null;\n      if (solrPort != null) {\n        zkServer = new SolrZkServer(\"true\", null, new File(solrHome, \"/zoo_data\"),\n            solrHome, Integer.parseInt(solrPort));\n        zkServer.parseConfig();\n        zkServer.start();\n      }\n      SolrZkClient zkClient = null;\n      try {\n        zkClient = new SolrZkClient(zkServerAddress, 30000, 30000,\n            () -> {\n            });\n\n        if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {\n          if (!line.hasOption(SOLRHOME)) {\n            stdout.println(\"-\" + SOLRHOME\n                + \" is required for \" + BOOTSTRAP);\n            System.exit(1);\n          }\n\n          CoreContainer cc = new CoreContainer(Paths.get(solrHome), new Properties());\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            stdout.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n\n          ZkController.bootstrapConf(zkClient, cc);\n\n          // No need to close the CoreContainer, as it wasn't started\n          // up in the first place...\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + UPCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          final String excludeExpr = line.getOptionValue(EXCLUDE_REGEX, EXCLUDE_REGEX_DEFAULT);\n\n          if(!ZkController.checkChrootPath(zkServerAddress, true)) {\n            stdout.println(\"A chroot was specified in zkHost but the znode doesn't exist. \");\n            System.exit(1);\n          }\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          final Pattern excludePattern = Pattern.compile(excludeExpr);\n          configManager.uploadConfigDir(Paths.get(confDir), confName, excludePattern);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {\n          if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + CONFDIR + \" and -\" + CONFNAME\n                + \" are required for \" + DOWNCONFIG);\n            System.exit(1);\n          }\n          String confDir = line.getOptionValue(CONFDIR);\n          String confName = line.getOptionValue(CONFNAME);\n          ZkConfigManager configManager = new ZkConfigManager(zkClient);\n          configManager.downloadConfigDir(confName, Paths.get(confDir));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {\n          if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {\n            stdout.println(\"-\" + COLLECTION + \" and -\" + CONFNAME\n                + \" are required for \" + LINKCONFIG);\n            System.exit(1);\n          }\n          String collection = line.getOptionValue(COLLECTION);\n          String confName = line.getOptionValue(CONFNAME);\n\n          ZkController.linkConfSet(zkClient, collection, confName);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {\n          zkClient.printLayoutToStream(stdout);\n        } else if (line.getOptionValue(CMD).equals(LS)) {\n\n          List argList = line.getArgList();\n          if (argList.size() != 1) {\n            stdout.println(\"-\" + LS + \" requires one arg - the path to list\");\n            System.exit(1);\n          }\n\n          StringBuilder sb = new StringBuilder();\n          String path = argList.get(0).toString();\n          zkClient.printLayout(path == null ? \"/\" : path, 0, sb);\n          stdout.println(sb.toString());\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + CLEAR + \" requires one arg - the path to clear\");\n            System.exit(1);\n          }\n          zkClient.clean(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + MAKEPATH + \" requires one arg - the path to make\");\n            System.exit(1);\n          }\n          zkClient.makePath(arglist.get(0).toString(), true);\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + PUT + \" requires two args - the path to create and the data string\");\n            System.exit(1);\n          }\n          String path = arglist.get(0).toString();\n          if (zkClient.exists(path, true)) {\n            zkClient.setData(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), true);\n          } else {\n            zkClient.create(path, arglist.get(1).toString().getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n          }\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + PUT_FILE + \" requires two args - the path to create in ZK and the path to the local file\");\n            System.exit(1);\n          }\n\n          String path = arglist.get(0).toString();\n          InputStream is = new FileInputStream(arglist.get(1).toString());\n          try {\n            if (zkClient.exists(path, true)) {\n              zkClient.setData(path, IOUtils.toByteArray(is), true);\n            } else {\n              zkClient.create(path, IOUtils.toByteArray(is), CreateMode.PERSISTENT, true);\n            }\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + GET + \" requires one arg - the path to get\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          stdout.println(new String(data, StandardCharsets.UTF_8));\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 2) {\n            stdout.println(\"-\" + GET_FILE + \"requires two args - the path to get and the file to save it to\");\n            System.exit(1);\n          }\n          byte [] data = zkClient.getData(arglist.get(0).toString(), null, null, true);\n          FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()), data);\n        } else if (line.getOptionValue(CMD).equals(UPDATEACLS)) {\n          List arglist = line.getArgList();\n          if (arglist.size() != 1) {\n            stdout.println(\"-\" + UPDATEACLS + \" requires one arg - the path to update\");\n            System.exit(1);\n          }\n          zkClient.updateACLs(arglist.get(0).toString());\n        } else if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {\n          if(!line.hasOption(NAME)) {\n            stdout.println(\"-\" + NAME + \" is required for \" + CLUSTERPROP);\n          }\n          String propertyName = line.getOptionValue(NAME);\n          //If -val option is missing, we will use the null value. This is required to maintain\n          //compatibility with Collections API.\n          String propertyValue = line.getOptionValue(VALUE_LONG);\n          ClusterProperties props = new ClusterProperties(zkClient);\n          try {\n            props.setClusterProperty(propertyName, propertyValue);\n          } catch (IOException ex) {\n            stdout.println(\"Unable to set the cluster property due to following error : \" + ex.getLocalizedMessage());\n            System.exit(1);\n          }\n        } else {\n          // If not cmd matches\n          stdout.println(\"Unknown command \"+ line.getOptionValue(CMD) + \". Use -h to get help.\");\n          System.exit(1);\n        }\n      } finally {\n        if (solrPort != null) {\n          zkServer.stop();\n        }\n        if (zkClient != null) {\n          zkClient.close();\n        }\n      }\n    } catch (ParseException exp) {\n      stdout.println(\"Unexpected exception:\" + exp.getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7c43bd440d08d05f1c7db15f7f4001790db5859":["7116474e2e390259937401cf928323e0cbc75e60"],"7116474e2e390259937401cf928323e0cbc75e60":["3b03236193219d5533fd4b859a4602267c9c79c0"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"7c245aee571549d7e0d913276bf8494d1b5116fe":["d0e70591e1e23afedf79324b42591f71a3e711b5"],"9dd6cf7e1b30a14801c9e290183b875c6801bbe9":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["d470c8182e92b264680e34081b75e70a9f2b3c89","c9df4f97973cb9b64b79ec8d6041fc05e9327795"],"5beca8a4be3b7ec89a056a849027205cc41987a2":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7350bd24c4e3331c214ecc73207e6555bbfc3c03"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["9dd6cf7e1b30a14801c9e290183b875c6801bbe9"],"d0e70591e1e23afedf79324b42591f71a3e711b5":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"2baf1cdf7061808d4fe0dadc6f327893cf9024e8":["dee259562bdd34641f66e8583cbcc05018283f72"],"3b03236193219d5533fd4b859a4602267c9c79c0":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"198966886b1666a28e299aeb05a224d8579ee1da":["3a0c04b71951333291abc7f317109a6a5957bd28"],"7d89d7e4e5101347833eea558851bf4209218619":["b2a795bd549d550ea0b0a1aea32f247704ededcb"],"3a0c04b71951333291abc7f317109a6a5957bd28":["67cf727e72c71906ffd390c61b50a1c60f2ebd49"],"3b6398c01b0e06ba3aa3a96d549077877414f9f8":["e15199583d3635cb940942caed05132dd6c4c7c6"],"cf4e43a4d7a969632d4bec76fd5bba149cb81487":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"f836b975e771ba6f5943f3b18589daa79b98191c":["7c245aee571549d7e0d913276bf8494d1b5116fe"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["c9df4f97973cb9b64b79ec8d6041fc05e9327795"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"73457c9372b4f2f962ca916788a5fe9e1f644a9f":["198966886b1666a28e299aeb05a224d8579ee1da","0dae68c5bb580df181adfdab7a117ffc1103fbca"],"c83f985d9828d30801541f1eed26aa3169646baf":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","7c245aee571549d7e0d913276bf8494d1b5116fe"],"7350bd24c4e3331c214ecc73207e6555bbfc3c03":["cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"b2a795bd549d550ea0b0a1aea32f247704ededcb":["2baf1cdf7061808d4fe0dadc6f327893cf9024e8"],"0ad30c6a479e764150a3316e57263319775f1df2":["73457c9372b4f2f962ca916788a5fe9e1f644a9f","115923bc88e5b1dc4bef049b1ded8486723052ed"],"dee259562bdd34641f66e8583cbcc05018283f72":["5beca8a4be3b7ec89a056a849027205cc41987a2"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"e15199583d3635cb940942caed05132dd6c4c7c6":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["73457c9372b4f2f962ca916788a5fe9e1f644a9f","0ad30c6a479e764150a3316e57263319775f1df2"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6c8a2521797f14d1d697a17a0069f5619cd211a6","e15199583d3635cb940942caed05132dd6c4c7c6"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"93523051b3768fb7b388dc97cf568b37b1aa40fa":["a837c064b67fa63a9394136e31218b908cdcf783"],"c9df4f97973cb9b64b79ec8d6041fc05e9327795":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","7350bd24c4e3331c214ecc73207e6555bbfc3c03"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["c7c43bd440d08d05f1c7db15f7f4001790db5859"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["7350bd24c4e3331c214ecc73207e6555bbfc3c03"],"5eb2511ababf862ea11e10761c70ee560cd84510":["b2a795bd549d550ea0b0a1aea32f247704ededcb","7d89d7e4e5101347833eea558851bf4209218619"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["37a0f60745e53927c4c876cfe5b5a58170f0646c","5beca8a4be3b7ec89a056a849027205cc41987a2"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","dee259562bdd34641f66e8583cbcc05018283f72"],"31d4861802ca404d78ca1d15f4550eec415b9199":["5beca8a4be3b7ec89a056a849027205cc41987a2","dee259562bdd34641f66e8583cbcc05018283f72"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["e7592992adbfd800a366615c7fc506ae10aeef39"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["d264f386d864b5751209060e8886ca9845f70469"],"d264f386d864b5751209060e8886ca9845f70469":["e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9"],"e7592992adbfd800a366615c7fc506ae10aeef39":["c83f985d9828d30801541f1eed26aa3169646baf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["73457c9372b4f2f962ca916788a5fe9e1f644a9f","d470c8182e92b264680e34081b75e70a9f2b3c89"],"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["0937e467e3a2e44c636e2b022b816b21257acb26"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["73457c9372b4f2f962ca916788a5fe9e1f644a9f"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["7d89d7e4e5101347833eea558851bf4209218619"],"0dae68c5bb580df181adfdab7a117ffc1103fbca":["198966886b1666a28e299aeb05a224d8579ee1da"],"d6b51620f35c0770a564d2f294607e3bdca18015":["3b6398c01b0e06ba3aa3a96d549077877414f9f8"],"0937e467e3a2e44c636e2b022b816b21257acb26":["93523051b3768fb7b388dc97cf568b37b1aa40fa"],"a837c064b67fa63a9394136e31218b908cdcf783":["f836b975e771ba6f5943f3b18589daa79b98191c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"67cf727e72c71906ffd390c61b50a1c60f2ebd49":["d6b51620f35c0770a564d2f294607e3bdca18015"]},"commit2Childs":{"c7c43bd440d08d05f1c7db15f7f4001790db5859":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"7116474e2e390259937401cf928323e0cbc75e60":["c7c43bd440d08d05f1c7db15f7f4001790db5859"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"7c245aee571549d7e0d913276bf8494d1b5116fe":["f836b975e771ba6f5943f3b18589daa79b98191c","d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"9dd6cf7e1b30a14801c9e290183b875c6801bbe9":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"5beca8a4be3b7ec89a056a849027205cc41987a2":["dee259562bdd34641f66e8583cbcc05018283f72","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","31d4861802ca404d78ca1d15f4550eec415b9199"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d0e70591e1e23afedf79324b42591f71a3e711b5":["7c245aee571549d7e0d913276bf8494d1b5116fe"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2baf1cdf7061808d4fe0dadc6f327893cf9024e8":["b2a795bd549d550ea0b0a1aea32f247704ededcb"],"3b03236193219d5533fd4b859a4602267c9c79c0":["7116474e2e390259937401cf928323e0cbc75e60"],"e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d264f386d864b5751209060e8886ca9845f70469"],"198966886b1666a28e299aeb05a224d8579ee1da":["73457c9372b4f2f962ca916788a5fe9e1f644a9f","0dae68c5bb580df181adfdab7a117ffc1103fbca"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a0c04b71951333291abc7f317109a6a5957bd28":["198966886b1666a28e299aeb05a224d8579ee1da"],"3b6398c01b0e06ba3aa3a96d549077877414f9f8":["d6b51620f35c0770a564d2f294607e3bdca18015"],"cf4e43a4d7a969632d4bec76fd5bba149cb81487":["fe33227f6805edab2036cbb80645cc4e2d1fa424","7350bd24c4e3331c214ecc73207e6555bbfc3c03"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"f836b975e771ba6f5943f3b18589daa79b98191c":["a837c064b67fa63a9394136e31218b908cdcf783"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"73457c9372b4f2f962ca916788a5fe9e1f644a9f":["0ad30c6a479e764150a3316e57263319775f1df2","d470c8182e92b264680e34081b75e70a9f2b3c89","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","115923bc88e5b1dc4bef049b1ded8486723052ed"],"c83f985d9828d30801541f1eed26aa3169646baf":["e7592992adbfd800a366615c7fc506ae10aeef39"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"7350bd24c4e3331c214ecc73207e6555bbfc3c03":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"b2a795bd549d550ea0b0a1aea32f247704ededcb":["7d89d7e4e5101347833eea558851bf4209218619","5eb2511ababf862ea11e10761c70ee560cd84510"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"dee259562bdd34641f66e8583cbcc05018283f72":["2baf1cdf7061808d4fe0dadc6f327893cf9024e8","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["e9017cf144952056066919f1ebc7897ff9bd71b1","c9df4f97973cb9b64b79ec8d6041fc05e9327795","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e15199583d3635cb940942caed05132dd6c4c7c6":["3b6398c01b0e06ba3aa3a96d549077877414f9f8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["9dd6cf7e1b30a14801c9e290183b875c6801bbe9"],"93523051b3768fb7b388dc97cf568b37b1aa40fa":["0937e467e3a2e44c636e2b022b816b21257acb26"],"c9df4f97973cb9b64b79ec8d6041fc05e9327795":["e9017cf144952056066919f1ebc7897ff9bd71b1","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","cf4e43a4d7a969632d4bec76fd5bba149cb81487","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","5beca8a4be3b7ec89a056a849027205cc41987a2"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["d0e70591e1e23afedf79324b42591f71a3e711b5","d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["e15199583d3635cb940942caed05132dd6c4c7c6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["3b03236193219d5533fd4b859a4602267c9c79c0"],"d264f386d864b5751209060e8886ca9845f70469":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"e7592992adbfd800a366615c7fc506ae10aeef39":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["0ad30c6a479e764150a3316e57263319775f1df2"],"0dae68c5bb580df181adfdab7a117ffc1103fbca":["73457c9372b4f2f962ca916788a5fe9e1f644a9f"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c83f985d9828d30801541f1eed26aa3169646baf"],"d6b51620f35c0770a564d2f294607e3bdca18015":["67cf727e72c71906ffd390c61b50a1c60f2ebd49"],"a837c064b67fa63a9394136e31218b908cdcf783":["93523051b3768fb7b388dc97cf568b37b1aa40fa"],"0937e467e3a2e44c636e2b022b816b21257acb26":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"67cf727e72c71906ffd390c61b50a1c60f2ebd49":["3a0c04b71951333291abc7f317109a6a5957bd28"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","aba371508186796cc6151d8223a5b4e16d02e26e","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","5eb2511ababf862ea11e10761c70ee560cd84510","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}