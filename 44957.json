{"path":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","sourceNew":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedDeletes packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.delGen() < nextGen;\n    assert deletes.isEmpty() || deletes.get(deletes.size()-1).delGen() < packet.delGen() : \"Delete packets must be in order\";\n    deletes.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"push deletes \" + packet + \" delGen=\" + packet.delGen() + \" packetCount=\" + deletes.size() + \" totBytesUsed=\" + bytesUsed.get());\n    }\n    assert checkDeleteStats();\n    return packet.delGen();\n  }\n\n","sourceOld":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedDeletes packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.delGen() < nextGen;\n    assert deletes.isEmpty() || deletes.get(deletes.size()-1).delGen() < packet.delGen() : \"Delete packets must be in order\";\n    deletes.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"push deletes \" + packet + \" delGen=\" + packet.delGen() + \" packetCount=\" + deletes.size() + \" totBytesUsed=\" + bytesUsed.get());\n    }\n    assert checkDeleteStats();\n    return packet.delGen();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#push(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","sourceNew":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedUpdates packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.delGen() < nextGen;\n    assert updates.isEmpty() || updates.get(updates.size()-1).delGen() < packet.delGen() : \"Delete packets must be in order\";\n    updates.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"push deletes \" + packet + \" delGen=\" + packet.delGen() + \" packetCount=\" + updates.size() + \" totBytesUsed=\" + bytesUsed.get());\n    }\n    assert checkDeleteStats();\n    return packet.delGen();\n  }\n\n","sourceOld":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedDeletes packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.delGen() < nextGen;\n    assert deletes.isEmpty() || deletes.get(deletes.size()-1).delGen() < packet.delGen() : \"Delete packets must be in order\";\n    deletes.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"push deletes \" + packet + \" delGen=\" + packet.delGen() + \" packetCount=\" + deletes.size() + \" totBytesUsed=\" + bytesUsed.get());\n    }\n    assert checkDeleteStats();\n    return packet.delGen();\n  }\n\n","bugFix":null,"bugIntro":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}