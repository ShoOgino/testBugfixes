{"path":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefArray#testSort().mjava","commits":[{"id":"ce73f585d17f53055185a19beb46db23d76e0ad9","date":1353077110,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefArray#testSort().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefList#testSort().mjava","sourceNew":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray();\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = _TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        list.append(spare);\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","sourceOld":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefList list = new BytesRefList();\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = _TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        list.append(spare);\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"caa40272511a69bd4ad04b8242ae420932f5799b","date":1359341326,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefArray#testSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefArray#testSort().mjava","sourceNew":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = _TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        list.append(spare);\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","sourceOld":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray();\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = _TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        list.append(spare);\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"847d1294c8ff2f0172af20892ef98a1c6a952e09","date":1359503775,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefArray#testSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefArray#testSort().mjava","sourceNew":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = _TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        list.append(spare);\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","sourceOld":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = _TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        list.append(spare);\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"36f5a8c57e16c0f801006a52f87c75378427852e","date":1393256707,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefArray#testSort().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefArray#testSort().mjava","sourceNew":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      final int initSize = list.size();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        assertEquals(initSize + i, list.append(spare));\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","sourceOld":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      final int initSize = list.size();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        assertEquals(initSize + i, list.append(spare));\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefArray#testSort().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefArray#testSort().mjava","sourceNew":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      final int initSize = list.size();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        assertEquals(initSize + i, list.append(spare));\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","sourceOld":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      final int initSize = list.size();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        assertEquals(initSize + i, list.append(spare));\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefArray#testSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefArray#testSort().mjava","sourceNew":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      final int initSize = list.size();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        assertEquals(initSize + i, list.append(spare));\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","sourceOld":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      final int initSize = list.size();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        assertEquals(initSize + i, list.append(spare));\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefArray#testSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefArray#testSort().mjava","sourceNew":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRefBuilder spare = new BytesRefBuilder();\n      final int initSize = list.size();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        assertEquals(initSize + i, list.append(spare.get()));\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      BytesRef next;\n      while ((next = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            next.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","sourceOld":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      final int initSize = list.size();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        assertEquals(initSize + i, list.append(spare));\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","bugFix":["dc3c850c5222a1ce7d619563f67bf047a11b32b6","a4e3a7c47e11ff0c156c646c37d20af7249370d2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b51ee14e04858fe1f47f241ac29486de23b215b5","date":1456734355,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefArray#testSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefArray#testSort().mjava","sourceNew":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRefBuilder spare = new BytesRefBuilder();\n      final int initSize = list.size();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        assertEquals(initSize + i, list.append(spare.get()));\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList, TestUtil.STRING_CODEPOINT_COMPARATOR);\n      BytesRefIterator iter = list.iterator(Comparator.naturalOrder());\n      int i = 0;\n      BytesRef next;\n      while ((next = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            next.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","sourceOld":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRefBuilder spare = new BytesRefBuilder();\n      final int initSize = list.size();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        assertEquals(initSize + i, list.append(spare.get()));\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      BytesRef next;\n      while ((next = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            next.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefArray#testSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefArray#testSort().mjava","sourceNew":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRefBuilder spare = new BytesRefBuilder();\n      final int initSize = list.size();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        assertEquals(initSize + i, list.append(spare.get()));\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList, TestUtil.STRING_CODEPOINT_COMPARATOR);\n      BytesRefIterator iter = list.iterator(Comparator.naturalOrder());\n      int i = 0;\n      BytesRef next;\n      while ((next = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            next.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","sourceOld":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRefBuilder spare = new BytesRefBuilder();\n      final int initSize = list.size();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        assertEquals(initSize + i, list.append(spare.get()));\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      BytesRef next;\n      while ((next = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            next.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"af2638813028b254a88b418ebeafb541afb49653":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","b51ee14e04858fe1f47f241ac29486de23b215b5"],"b51ee14e04858fe1f47f241ac29486de23b215b5":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"ce73f585d17f53055185a19beb46db23d76e0ad9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","36f5a8c57e16c0f801006a52f87c75378427852e"],"36f5a8c57e16c0f801006a52f87c75378427852e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"caa40272511a69bd4ad04b8242ae420932f5799b":["ce73f585d17f53055185a19beb46db23d76e0ad9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"847d1294c8ff2f0172af20892ef98a1c6a952e09":["caa40272511a69bd4ad04b8242ae420932f5799b"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b51ee14e04858fe1f47f241ac29486de23b215b5":["af2638813028b254a88b418ebeafb541afb49653"],"ce73f585d17f53055185a19beb46db23d76e0ad9":["caa40272511a69bd4ad04b8242ae420932f5799b"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"36f5a8c57e16c0f801006a52f87c75378427852e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"caa40272511a69bd4ad04b8242ae420932f5799b":["847d1294c8ff2f0172af20892ef98a1c6a952e09"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ce73f585d17f53055185a19beb46db23d76e0ad9","ba791bce8103c79e38f957e9c5a53a75871bd918","36f5a8c57e16c0f801006a52f87c75378427852e"],"847d1294c8ff2f0172af20892ef98a1c6a952e09":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["af2638813028b254a88b418ebeafb541afb49653","b51ee14e04858fe1f47f241ac29486de23b215b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["847d1294c8ff2f0172af20892ef98a1c6a952e09","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}