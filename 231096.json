{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingAtomicReader#verifyResults(Directory,Directory).mjava","commits":[{"id":"eea8c27c2188d3e8ca3bf2d389f1038806956abd","date":1404444860,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingAtomicReader#verifyResults(Directory,Directory).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/OrdinalMappingReaderTest#verifyResults(Directory,Directory).mjava","sourceNew":"  private void verifyResults(Directory indexDir, Directory taxoDir) throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = newSearcher(indexReader);\n    \n    FacetsCollector collector = new FacetsCollector();\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, collector);\n    Facets facets = new FastTaxonomyFacetCounts(taxoReader, facetConfig, collector);\n    FacetResult result = facets.getTopChildren(10, \"tag\");\n    \n    for (LabelAndValue lv: result.labelValues) {\n      if (VERBOSE) {\n        System.out.println(lv);\n      }\n      assertEquals(NUM_DOCS, lv.value.intValue());\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","sourceOld":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    \n    FacetsCollector collector = new FacetsCollector();\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, collector);\n    Facets facets = new FastTaxonomyFacetCounts(taxReader, facetConfig, collector);\n    FacetResult result = facets.getTopChildren(10, \"tag\");\n    \n    for (LabelAndValue lv: result.labelValues) {\n      int weight = lv.value.intValue();\n      String label = lv.label;\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da07b17df48cd6809d50473d39ce15f3c54a7773","date":1405858094,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingAtomicReader#verifyResults(Directory,Directory).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingAtomicReader#verifyResults(Directory,Directory).mjava","sourceNew":"  private void verifyResults(Directory indexDir, Directory taxoDir) throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = newSearcher(indexReader);\n    \n    FacetsCollector collector = new FacetsCollector();\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, collector);\n    Facets facets = new FastTaxonomyFacetCounts(taxoReader, facetConfig, collector);\n    FacetResult result = facets.getTopChildren(10, \"tag\");\n    \n    for (LabelAndValue lv: result.labelValues) {\n      if (VERBOSE) {\n        System.out.println(lv);\n      }\n      assertEquals(NUM_DOCS, lv.value.intValue());\n    }\n    \n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(indexReader, \"bdv\");\n    BinaryDocValues cbdv = MultiDocValues.getBinaryValues(indexReader, \"cbdv\");\n    for (int i = 0; i < indexReader.maxDoc(); i++) {\n      assertEquals(Integer.parseInt(cbdv.get(i).utf8ToString()), Integer.parseInt(bdv.get(i).utf8ToString())*2);\n    }\n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","sourceOld":"  private void verifyResults(Directory indexDir, Directory taxoDir) throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = newSearcher(indexReader);\n    \n    FacetsCollector collector = new FacetsCollector();\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, collector);\n    Facets facets = new FastTaxonomyFacetCounts(taxoReader, facetConfig, collector);\n    FacetResult result = facets.getTopChildren(10, \"tag\");\n    \n    for (LabelAndValue lv: result.labelValues) {\n      if (VERBOSE) {\n        System.out.println(lv);\n      }\n      assertEquals(NUM_DOCS, lv.value.intValue());\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"826915a1a26e283898ce16169b6e05ebeca4287f","date":1405926462,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingAtomicReader#verifyResults(Directory,Directory).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingAtomicReader#verifyResults(Directory,Directory).mjava","sourceNew":"  private void verifyResults(Directory indexDir, Directory taxoDir) throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = newSearcher(indexReader);\n    \n    FacetsCollector collector = new FacetsCollector();\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, collector);\n\n    // tag facets\n    Facets tagFacets = new FastTaxonomyFacetCounts(\"$tags\", taxoReader, facetConfig, collector);\n    FacetResult result = tagFacets.getTopChildren(10, \"tag\");\n    for (LabelAndValue lv: result.labelValues) {\n      if (VERBOSE) {\n        System.out.println(lv);\n      }\n      assertEquals(NUM_DOCS, lv.value.intValue());\n    }\n    \n    // id facets\n    Facets idFacets = new FastTaxonomyFacetCounts(taxoReader, facetConfig, collector);\n    FacetResult idResult = idFacets.getTopChildren(10, \"id\");\n    assertEquals(NUM_DOCS, idResult.childCount);\n    assertEquals(NUM_DOCS * 2, idResult.value); // each \"id\" appears twice\n    \n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(indexReader, \"bdv\");\n    BinaryDocValues cbdv = MultiDocValues.getBinaryValues(indexReader, \"cbdv\");\n    for (int i = 0; i < indexReader.maxDoc(); i++) {\n      assertEquals(Integer.parseInt(cbdv.get(i).utf8ToString()), Integer.parseInt(bdv.get(i).utf8ToString())*2);\n    }\n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","sourceOld":"  private void verifyResults(Directory indexDir, Directory taxoDir) throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = newSearcher(indexReader);\n    \n    FacetsCollector collector = new FacetsCollector();\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, collector);\n    Facets facets = new FastTaxonomyFacetCounts(taxoReader, facetConfig, collector);\n    FacetResult result = facets.getTopChildren(10, \"tag\");\n    \n    for (LabelAndValue lv: result.labelValues) {\n      if (VERBOSE) {\n        System.out.println(lv);\n      }\n      assertEquals(NUM_DOCS, lv.value.intValue());\n    }\n    \n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(indexReader, \"bdv\");\n    BinaryDocValues cbdv = MultiDocValues.getBinaryValues(indexReader, \"cbdv\");\n    for (int i = 0; i < indexReader.maxDoc(); i++) {\n      assertEquals(Integer.parseInt(cbdv.get(i).utf8ToString()), Integer.parseInt(bdv.get(i).utf8ToString())*2);\n    }\n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","bugFix":["eea8c27c2188d3e8ca3bf2d389f1038806956abd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9644a32526f2e2ae87543b00e8be543aa25f29c","date":1411548458,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingLeafReader#verifyResults(Directory,Directory).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingAtomicReader#verifyResults(Directory,Directory).mjava","sourceNew":"  private void verifyResults(Directory indexDir, Directory taxoDir) throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = newSearcher(indexReader);\n    \n    FacetsCollector collector = new FacetsCollector();\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, collector);\n\n    // tag facets\n    Facets tagFacets = new FastTaxonomyFacetCounts(\"$tags\", taxoReader, facetConfig, collector);\n    FacetResult result = tagFacets.getTopChildren(10, \"tag\");\n    for (LabelAndValue lv: result.labelValues) {\n      if (VERBOSE) {\n        System.out.println(lv);\n      }\n      assertEquals(NUM_DOCS, lv.value.intValue());\n    }\n    \n    // id facets\n    Facets idFacets = new FastTaxonomyFacetCounts(taxoReader, facetConfig, collector);\n    FacetResult idResult = idFacets.getTopChildren(10, \"id\");\n    assertEquals(NUM_DOCS, idResult.childCount);\n    assertEquals(NUM_DOCS * 2, idResult.value); // each \"id\" appears twice\n    \n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(indexReader, \"bdv\");\n    BinaryDocValues cbdv = MultiDocValues.getBinaryValues(indexReader, \"cbdv\");\n    for (int i = 0; i < indexReader.maxDoc(); i++) {\n      assertEquals(Integer.parseInt(cbdv.get(i).utf8ToString()), Integer.parseInt(bdv.get(i).utf8ToString())*2);\n    }\n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","sourceOld":"  private void verifyResults(Directory indexDir, Directory taxoDir) throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = newSearcher(indexReader);\n    \n    FacetsCollector collector = new FacetsCollector();\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, collector);\n\n    // tag facets\n    Facets tagFacets = new FastTaxonomyFacetCounts(\"$tags\", taxoReader, facetConfig, collector);\n    FacetResult result = tagFacets.getTopChildren(10, \"tag\");\n    for (LabelAndValue lv: result.labelValues) {\n      if (VERBOSE) {\n        System.out.println(lv);\n      }\n      assertEquals(NUM_DOCS, lv.value.intValue());\n    }\n    \n    // id facets\n    Facets idFacets = new FastTaxonomyFacetCounts(taxoReader, facetConfig, collector);\n    FacetResult idResult = idFacets.getTopChildren(10, \"id\");\n    assertEquals(NUM_DOCS, idResult.childCount);\n    assertEquals(NUM_DOCS * 2, idResult.value); // each \"id\" appears twice\n    \n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(indexReader, \"bdv\");\n    BinaryDocValues cbdv = MultiDocValues.getBinaryValues(indexReader, \"cbdv\");\n    for (int i = 0; i < indexReader.maxDoc(); i++) {\n      assertEquals(Integer.parseInt(cbdv.get(i).utf8ToString()), Integer.parseInt(bdv.get(i).utf8ToString())*2);\n    }\n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da07b17df48cd6809d50473d39ce15f3c54a7773":["eea8c27c2188d3e8ca3bf2d389f1038806956abd"],"c9644a32526f2e2ae87543b00e8be543aa25f29c":["826915a1a26e283898ce16169b6e05ebeca4287f"],"826915a1a26e283898ce16169b6e05ebeca4287f":["da07b17df48cd6809d50473d39ce15f3c54a7773"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eea8c27c2188d3e8ca3bf2d389f1038806956abd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9644a32526f2e2ae87543b00e8be543aa25f29c"]},"commit2Childs":{"da07b17df48cd6809d50473d39ce15f3c54a7773":["826915a1a26e283898ce16169b6e05ebeca4287f"],"c9644a32526f2e2ae87543b00e8be543aa25f29c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"826915a1a26e283898ce16169b6e05ebeca4287f":["c9644a32526f2e2ae87543b00e8be543aa25f29c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eea8c27c2188d3e8ca3bf2d389f1038806956abd"],"eea8c27c2188d3e8ca3bf2d389f1038806956abd":["da07b17df48cd6809d50473d39ce15f3c54a7773"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}