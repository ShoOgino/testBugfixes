{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","commits":[{"id":"54f531dff997ea7763360cb59f5ccadc6811b519","date":1457742562,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9311729585934167418ba9c06524f91f08bacdbe","date":1457749207,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","sourceNew":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n      GeoRect box = GeoUtils.circleToBBox(longitude, latitude, bottom);\n      // pre-encode our box to our integer encoding, so we don't have to decode \n      // to double values for uncompetitive hits. This has some cost!\n      int minLatEncoded = LatLonPoint.encodeLatitude(box.minLat);\n      int maxLatEncoded = LatLonPoint.encodeLatitude(box.maxLat);\n      int minLonEncoded = LatLonPoint.encodeLongitude(box.minLon);\n      int maxLonEncoded = LatLonPoint.encodeLongitude(box.maxLon);\n      // be sure to not introduce quantization error in our optimization, just \n      // round up our encoded box safely in all directions.\n      if (minLatEncoded != Integer.MIN_VALUE) {\n        minLatEncoded--;\n      }\n      if (minLonEncoded != Integer.MIN_VALUE) {\n        minLonEncoded--;\n      }\n      if (maxLatEncoded != Integer.MAX_VALUE) {\n        maxLatEncoded++;\n      }\n      if (maxLonEncoded != Integer.MAX_VALUE) {\n        maxLonEncoded++;\n      }\n      crossesDateLine = box.crossesDateline();\n      // crosses dateline: split\n      if (crossesDateLine) {\n        // box1\n        minLon = Integer.MIN_VALUE;\n        maxLon = maxLonEncoded;\n        minLat = minLatEncoded;\n        maxLat = maxLatEncoded;\n        // box2\n        minLon2 = minLonEncoded;\n        maxLon2 = Integer.MAX_VALUE;\n        minLat2 = minLatEncoded;\n        maxLat2 = maxLatEncoded;\n      } else {\n        minLon = minLonEncoded;\n        maxLon = maxLonEncoded;\n        minLat = minLatEncoded;\n        maxLat = maxLatEncoded;\n      }\n    }\n    setBottomCounter++;\n  }\n\n","sourceOld":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n  }\n\n","bugFix":null,"bugIntro":["fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"575856a9f007b9c35d0113c9e18151b554709ef2","date":1457776622,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n      GeoRect box = GeoUtils.circleToBBox(longitude, latitude, bottom);\n      // pre-encode our box to our integer encoding, so we don't have to decode \n      // to double values for uncompetitive hits. This has some cost!\n      int minLatEncoded = LatLonPoint.encodeLatitude(box.minLat);\n      int maxLatEncoded = LatLonPoint.encodeLatitude(box.maxLat);\n      int minLonEncoded = LatLonPoint.encodeLongitude(box.minLon);\n      int maxLonEncoded = LatLonPoint.encodeLongitude(box.maxLon);\n      // be sure to not introduce quantization error in our optimization, just \n      // round up our encoded box safely in all directions.\n      if (minLatEncoded != Integer.MIN_VALUE) {\n        minLatEncoded--;\n      }\n      if (minLonEncoded != Integer.MIN_VALUE) {\n        minLonEncoded--;\n      }\n      if (maxLatEncoded != Integer.MAX_VALUE) {\n        maxLatEncoded++;\n      }\n      if (maxLonEncoded != Integer.MAX_VALUE) {\n        maxLonEncoded++;\n      }\n      crossesDateLine = box.crossesDateline();\n      // crosses dateline: split\n      if (crossesDateLine) {\n        // box1\n        minLon = Integer.MIN_VALUE;\n        maxLon = maxLonEncoded;\n        minLat = minLatEncoded;\n        maxLat = maxLatEncoded;\n        // box2\n        minLon2 = minLonEncoded;\n        maxLon2 = Integer.MAX_VALUE;\n        minLat2 = minLatEncoded;\n        maxLat2 = maxLatEncoded;\n      } else {\n        minLon = minLonEncoded;\n        maxLon = maxLonEncoded;\n        minLat = minLatEncoded;\n        maxLat = maxLatEncoded;\n      }\n    }\n    setBottomCounter++;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336","date":1457978905,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","sourceNew":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n      // don't pass infinite values to circleToBBox: just make a complete box.\n      if (bottom == missingValue) {\n        minLat = minLon = Integer.MIN_VALUE;\n        maxLat = maxLon = Integer.MAX_VALUE;\n        crossesDateLine = false;\n      } else {\n        assert Double.isFinite(bottom);\n        GeoRect box = GeoUtils.circleToBBox(longitude, latitude, bottom);\n        // pre-encode our box to our integer encoding, so we don't have to decode \n        // to double values for uncompetitive hits. This has some cost!\n        int minLatEncoded = LatLonPoint.encodeLatitude(box.minLat);\n        int maxLatEncoded = LatLonPoint.encodeLatitude(box.maxLat);\n        int minLonEncoded = LatLonPoint.encodeLongitude(box.minLon);\n        int maxLonEncoded = LatLonPoint.encodeLongitude(box.maxLon);\n        // be sure to not introduce quantization error in our optimization, just \n        // round up our encoded box safely in all directions.\n        if (minLatEncoded != Integer.MIN_VALUE) {\n          minLatEncoded--;\n        }\n        if (minLonEncoded != Integer.MIN_VALUE) {\n          minLonEncoded--;\n        }\n        if (maxLatEncoded != Integer.MAX_VALUE) {\n          maxLatEncoded++;\n        }\n        if (maxLonEncoded != Integer.MAX_VALUE) {\n          maxLonEncoded++;\n        }\n        crossesDateLine = box.crossesDateline();\n        // crosses dateline: split\n        if (crossesDateLine) {\n          // box1\n          minLon = Integer.MIN_VALUE;\n          maxLon = maxLonEncoded;\n          minLat = minLatEncoded;\n          maxLat = maxLatEncoded;\n          // box2\n          minLon2 = minLonEncoded;\n          maxLon2 = Integer.MAX_VALUE;\n          minLat2 = minLatEncoded;\n          maxLat2 = maxLatEncoded;\n        } else {\n          minLon = minLonEncoded;\n          maxLon = maxLonEncoded;\n          minLat = minLatEncoded;\n          maxLat = maxLatEncoded;\n        }\n      }\n    }\n    setBottomCounter++;\n  }\n\n","sourceOld":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n      GeoRect box = GeoUtils.circleToBBox(longitude, latitude, bottom);\n      // pre-encode our box to our integer encoding, so we don't have to decode \n      // to double values for uncompetitive hits. This has some cost!\n      int minLatEncoded = LatLonPoint.encodeLatitude(box.minLat);\n      int maxLatEncoded = LatLonPoint.encodeLatitude(box.maxLat);\n      int minLonEncoded = LatLonPoint.encodeLongitude(box.minLon);\n      int maxLonEncoded = LatLonPoint.encodeLongitude(box.maxLon);\n      // be sure to not introduce quantization error in our optimization, just \n      // round up our encoded box safely in all directions.\n      if (minLatEncoded != Integer.MIN_VALUE) {\n        minLatEncoded--;\n      }\n      if (minLonEncoded != Integer.MIN_VALUE) {\n        minLonEncoded--;\n      }\n      if (maxLatEncoded != Integer.MAX_VALUE) {\n        maxLatEncoded++;\n      }\n      if (maxLonEncoded != Integer.MAX_VALUE) {\n        maxLonEncoded++;\n      }\n      crossesDateLine = box.crossesDateline();\n      // crosses dateline: split\n      if (crossesDateLine) {\n        // box1\n        minLon = Integer.MIN_VALUE;\n        maxLon = maxLonEncoded;\n        minLat = minLatEncoded;\n        maxLat = maxLatEncoded;\n        // box2\n        minLon2 = minLonEncoded;\n        maxLon2 = Integer.MAX_VALUE;\n        minLat2 = minLatEncoded;\n        maxLat2 = maxLatEncoded;\n      } else {\n        minLon = minLonEncoded;\n        maxLon = maxLonEncoded;\n        minLat = minLatEncoded;\n        maxLat = maxLatEncoded;\n      }\n    }\n    setBottomCounter++;\n  }\n\n","bugFix":["9311729585934167418ba9c06524f91f08bacdbe"],"bugIntro":["98e0f1aa9ab98b9d47cc76e3d38926353c75b571"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d210c7f333402b4828c1d10dfd5457c9fe312c7d","date":1457987131,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","sourceNew":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n      // don't pass infinite values to circleToBBox: just make a complete box.\n      if (bottom == missingValue) {\n        minLat = minLon = Integer.MIN_VALUE;\n        maxLat = maxLon = Integer.MAX_VALUE;\n        crossesDateLine = false;\n      } else {\n        assert Double.isFinite(bottom);\n        GeoRect box = GeoUtils.circleToBBox(longitude, latitude, haversin2(bottom));\n        // pre-encode our box to our integer encoding, so we don't have to decode \n        // to double values for uncompetitive hits. This has some cost!\n        int minLatEncoded = LatLonPoint.encodeLatitude(box.minLat);\n        int maxLatEncoded = LatLonPoint.encodeLatitude(box.maxLat);\n        int minLonEncoded = LatLonPoint.encodeLongitude(box.minLon);\n        int maxLonEncoded = LatLonPoint.encodeLongitude(box.maxLon);\n        // be sure to not introduce quantization error in our optimization, just \n        // round up our encoded box safely in all directions.\n        if (minLatEncoded != Integer.MIN_VALUE) {\n          minLatEncoded--;\n        }\n        if (minLonEncoded != Integer.MIN_VALUE) {\n          minLonEncoded--;\n        }\n        if (maxLatEncoded != Integer.MAX_VALUE) {\n          maxLatEncoded++;\n        }\n        if (maxLonEncoded != Integer.MAX_VALUE) {\n          maxLonEncoded++;\n        }\n        crossesDateLine = box.crossesDateline();\n        // crosses dateline: split\n        if (crossesDateLine) {\n          // box1\n          minLon = Integer.MIN_VALUE;\n          maxLon = maxLonEncoded;\n          minLat = minLatEncoded;\n          maxLat = maxLatEncoded;\n          // box2\n          minLon2 = minLonEncoded;\n          maxLon2 = Integer.MAX_VALUE;\n          minLat2 = minLatEncoded;\n          maxLat2 = maxLatEncoded;\n        } else {\n          minLon = minLonEncoded;\n          maxLon = maxLonEncoded;\n          minLat = minLatEncoded;\n          maxLat = maxLatEncoded;\n        }\n      }\n    }\n    setBottomCounter++;\n  }\n\n","sourceOld":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n      // don't pass infinite values to circleToBBox: just make a complete box.\n      if (bottom == missingValue) {\n        minLat = minLon = Integer.MIN_VALUE;\n        maxLat = maxLon = Integer.MAX_VALUE;\n        crossesDateLine = false;\n      } else {\n        assert Double.isFinite(bottom);\n        GeoRect box = GeoUtils.circleToBBox(longitude, latitude, bottom);\n        // pre-encode our box to our integer encoding, so we don't have to decode \n        // to double values for uncompetitive hits. This has some cost!\n        int minLatEncoded = LatLonPoint.encodeLatitude(box.minLat);\n        int maxLatEncoded = LatLonPoint.encodeLatitude(box.maxLat);\n        int minLonEncoded = LatLonPoint.encodeLongitude(box.minLon);\n        int maxLonEncoded = LatLonPoint.encodeLongitude(box.maxLon);\n        // be sure to not introduce quantization error in our optimization, just \n        // round up our encoded box safely in all directions.\n        if (minLatEncoded != Integer.MIN_VALUE) {\n          minLatEncoded--;\n        }\n        if (minLonEncoded != Integer.MIN_VALUE) {\n          minLonEncoded--;\n        }\n        if (maxLatEncoded != Integer.MAX_VALUE) {\n          maxLatEncoded++;\n        }\n        if (maxLonEncoded != Integer.MAX_VALUE) {\n          maxLonEncoded++;\n        }\n        crossesDateLine = box.crossesDateline();\n        // crosses dateline: split\n        if (crossesDateLine) {\n          // box1\n          minLon = Integer.MIN_VALUE;\n          maxLon = maxLonEncoded;\n          minLat = minLatEncoded;\n          maxLat = maxLatEncoded;\n          // box2\n          minLon2 = minLonEncoded;\n          maxLon2 = Integer.MAX_VALUE;\n          minLat2 = minLatEncoded;\n          maxLat2 = maxLatEncoded;\n        } else {\n          minLon = minLonEncoded;\n          maxLon = maxLonEncoded;\n          minLat = minLatEncoded;\n          maxLat = maxLatEncoded;\n        }\n      }\n    }\n    setBottomCounter++;\n  }\n\n","bugFix":null,"bugIntro":["98e0f1aa9ab98b9d47cc76e3d38926353c75b571"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98e0f1aa9ab98b9d47cc76e3d38926353c75b571","date":1457996850,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","sourceNew":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n      GeoRect box = GeoUtils.circleToBBox(longitude, latitude, haversin2(bottom));\n      // pre-encode our box to our integer encoding, so we don't have to decode \n      // to double values for uncompetitive hits. This has some cost!\n      minLat = LatLonPoint.encodeLatitude(box.minLat);\n      maxLat = LatLonPoint.encodeLatitude(box.maxLat);\n      if (box.crossesDateline()) {\n        // box1\n        minLon = Integer.MIN_VALUE;\n        maxLon = LatLonPoint.encodeLongitude(box.maxLon);\n        // box2\n        minLon2 = LatLonPoint.encodeLongitude(box.minLon);\n      } else {\n        minLon = LatLonPoint.encodeLongitude(box.minLon);\n        maxLon = LatLonPoint.encodeLongitude(box.maxLon);\n        // disable box2\n        minLon2 = Integer.MAX_VALUE;\n      }\n    }\n    setBottomCounter++;\n  }\n\n","sourceOld":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n      // don't pass infinite values to circleToBBox: just make a complete box.\n      if (bottom == missingValue) {\n        minLat = minLon = Integer.MIN_VALUE;\n        maxLat = maxLon = Integer.MAX_VALUE;\n        crossesDateLine = false;\n      } else {\n        assert Double.isFinite(bottom);\n        GeoRect box = GeoUtils.circleToBBox(longitude, latitude, haversin2(bottom));\n        // pre-encode our box to our integer encoding, so we don't have to decode \n        // to double values for uncompetitive hits. This has some cost!\n        int minLatEncoded = LatLonPoint.encodeLatitude(box.minLat);\n        int maxLatEncoded = LatLonPoint.encodeLatitude(box.maxLat);\n        int minLonEncoded = LatLonPoint.encodeLongitude(box.minLon);\n        int maxLonEncoded = LatLonPoint.encodeLongitude(box.maxLon);\n        // be sure to not introduce quantization error in our optimization, just \n        // round up our encoded box safely in all directions.\n        if (minLatEncoded != Integer.MIN_VALUE) {\n          minLatEncoded--;\n        }\n        if (minLonEncoded != Integer.MIN_VALUE) {\n          minLonEncoded--;\n        }\n        if (maxLatEncoded != Integer.MAX_VALUE) {\n          maxLatEncoded++;\n        }\n        if (maxLonEncoded != Integer.MAX_VALUE) {\n          maxLonEncoded++;\n        }\n        crossesDateLine = box.crossesDateline();\n        // crosses dateline: split\n        if (crossesDateLine) {\n          // box1\n          minLon = Integer.MIN_VALUE;\n          maxLon = maxLonEncoded;\n          minLat = minLatEncoded;\n          maxLat = maxLatEncoded;\n          // box2\n          minLon2 = minLonEncoded;\n          maxLon2 = Integer.MAX_VALUE;\n          minLat2 = minLatEncoded;\n          maxLat2 = maxLatEncoded;\n        } else {\n          minLon = minLonEncoded;\n          maxLon = maxLonEncoded;\n          minLat = minLatEncoded;\n          maxLat = maxLatEncoded;\n        }\n      }\n    }\n    setBottomCounter++;\n  }\n\n","bugFix":["fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336","d210c7f333402b4828c1d10dfd5457c9fe312c7d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","sourceNew":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n      GeoRect box = GeoUtils.circleToBBox(latitude, longitude, haversin2(bottom));\n      // pre-encode our box to our integer encoding, so we don't have to decode \n      // to double values for uncompetitive hits. This has some cost!\n      minLat = LatLonPoint.encodeLatitude(box.minLat);\n      maxLat = LatLonPoint.encodeLatitude(box.maxLat);\n      if (box.crossesDateline()) {\n        // box1\n        minLon = Integer.MIN_VALUE;\n        maxLon = LatLonPoint.encodeLongitude(box.maxLon);\n        // box2\n        minLon2 = LatLonPoint.encodeLongitude(box.minLon);\n      } else {\n        minLon = LatLonPoint.encodeLongitude(box.minLon);\n        maxLon = LatLonPoint.encodeLongitude(box.maxLon);\n        // disable box2\n        minLon2 = Integer.MAX_VALUE;\n      }\n    }\n    setBottomCounter++;\n  }\n\n","sourceOld":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n      GeoRect box = GeoUtils.circleToBBox(longitude, latitude, haversin2(bottom));\n      // pre-encode our box to our integer encoding, so we don't have to decode \n      // to double values for uncompetitive hits. This has some cost!\n      minLat = LatLonPoint.encodeLatitude(box.minLat);\n      maxLat = LatLonPoint.encodeLatitude(box.maxLat);\n      if (box.crossesDateline()) {\n        // box1\n        minLon = Integer.MIN_VALUE;\n        maxLon = LatLonPoint.encodeLongitude(box.maxLon);\n        // box2\n        minLon2 = LatLonPoint.encodeLongitude(box.minLon);\n      } else {\n        minLon = LatLonPoint.encodeLongitude(box.minLon);\n        maxLon = LatLonPoint.encodeLongitude(box.maxLon);\n        // disable box2\n        minLon2 = Integer.MAX_VALUE;\n      }\n    }\n    setBottomCounter++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43ddc1b7a872fafd838d3f3129984ca661e29b36","date":1459526591,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","sourceNew":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n      GeoRect box = GeoRect.fromPointDistance(latitude, longitude, haversin2(bottom));\n      // pre-encode our box to our integer encoding, so we don't have to decode \n      // to double values for uncompetitive hits. This has some cost!\n      minLat = LatLonPoint.encodeLatitude(box.minLat);\n      maxLat = LatLonPoint.encodeLatitude(box.maxLat);\n      if (box.crossesDateline()) {\n        // box1\n        minLon = Integer.MIN_VALUE;\n        maxLon = LatLonPoint.encodeLongitude(box.maxLon);\n        // box2\n        minLon2 = LatLonPoint.encodeLongitude(box.minLon);\n      } else {\n        minLon = LatLonPoint.encodeLongitude(box.minLon);\n        maxLon = LatLonPoint.encodeLongitude(box.maxLon);\n        // disable box2\n        minLon2 = Integer.MAX_VALUE;\n      }\n    }\n    setBottomCounter++;\n  }\n\n","sourceOld":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n      GeoRect box = GeoUtils.circleToBBox(latitude, longitude, haversin2(bottom));\n      // pre-encode our box to our integer encoding, so we don't have to decode \n      // to double values for uncompetitive hits. This has some cost!\n      minLat = LatLonPoint.encodeLatitude(box.minLat);\n      maxLat = LatLonPoint.encodeLatitude(box.maxLat);\n      if (box.crossesDateline()) {\n        // box1\n        minLon = Integer.MIN_VALUE;\n        maxLon = LatLonPoint.encodeLongitude(box.maxLon);\n        // box2\n        minLon2 = LatLonPoint.encodeLongitude(box.minLon);\n      } else {\n        minLon = LatLonPoint.encodeLongitude(box.minLon);\n        maxLon = LatLonPoint.encodeLongitude(box.maxLon);\n        // disable box2\n        minLon2 = Integer.MAX_VALUE;\n      }\n    }\n    setBottomCounter++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe","date":1459623422,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","sourceNew":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n      Rectangle box = Rectangle.fromPointDistance(latitude, longitude, haversin2(bottom));\n      // pre-encode our box to our integer encoding, so we don't have to decode \n      // to double values for uncompetitive hits. This has some cost!\n      minLat = LatLonPoint.encodeLatitude(box.minLat);\n      maxLat = LatLonPoint.encodeLatitude(box.maxLat);\n      if (box.crossesDateline()) {\n        // box1\n        minLon = Integer.MIN_VALUE;\n        maxLon = LatLonPoint.encodeLongitude(box.maxLon);\n        // box2\n        minLon2 = LatLonPoint.encodeLongitude(box.minLon);\n      } else {\n        minLon = LatLonPoint.encodeLongitude(box.minLon);\n        maxLon = LatLonPoint.encodeLongitude(box.maxLon);\n        // disable box2\n        minLon2 = Integer.MAX_VALUE;\n      }\n    }\n    setBottomCounter++;\n  }\n\n","sourceOld":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n      GeoRect box = GeoRect.fromPointDistance(latitude, longitude, haversin2(bottom));\n      // pre-encode our box to our integer encoding, so we don't have to decode \n      // to double values for uncompetitive hits. This has some cost!\n      minLat = LatLonPoint.encodeLatitude(box.minLat);\n      maxLat = LatLonPoint.encodeLatitude(box.maxLat);\n      if (box.crossesDateline()) {\n        // box1\n        minLon = Integer.MIN_VALUE;\n        maxLon = LatLonPoint.encodeLongitude(box.maxLon);\n        // box2\n        minLon2 = LatLonPoint.encodeLongitude(box.minLon);\n      } else {\n        minLon = LatLonPoint.encodeLongitude(box.minLon);\n        maxLon = LatLonPoint.encodeLongitude(box.maxLon);\n        // disable box2\n        minLon2 = Integer.MAX_VALUE;\n      }\n    }\n    setBottomCounter++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed48f9723ad1b29c351ea43b5a2c8f90c3a45737","date":1460056040,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","sourceNew":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n      Rectangle box = Rectangle.fromPointDistance(latitude, longitude, haversin2(bottom));\n      // pre-encode our box to our integer encoding, so we don't have to decode \n      // to double values for uncompetitive hits. This has some cost!\n      minLat = encodeLatitude(box.minLat);\n      maxLat = encodeLatitude(box.maxLat);\n      if (box.crossesDateline()) {\n        // box1\n        minLon = Integer.MIN_VALUE;\n        maxLon = encodeLongitude(box.maxLon);\n        // box2\n        minLon2 = encodeLongitude(box.minLon);\n      } else {\n        minLon = encodeLongitude(box.minLon);\n        maxLon = encodeLongitude(box.maxLon);\n        // disable box2\n        minLon2 = Integer.MAX_VALUE;\n      }\n    }\n    setBottomCounter++;\n  }\n\n","sourceOld":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n      Rectangle box = Rectangle.fromPointDistance(latitude, longitude, haversin2(bottom));\n      // pre-encode our box to our integer encoding, so we don't have to decode \n      // to double values for uncompetitive hits. This has some cost!\n      minLat = LatLonPoint.encodeLatitude(box.minLat);\n      maxLat = LatLonPoint.encodeLatitude(box.maxLat);\n      if (box.crossesDateline()) {\n        // box1\n        minLon = Integer.MIN_VALUE;\n        maxLon = LatLonPoint.encodeLongitude(box.maxLon);\n        // box2\n        minLon2 = LatLonPoint.encodeLongitude(box.minLon);\n      } else {\n        minLon = LatLonPoint.encodeLongitude(box.minLon);\n        maxLon = LatLonPoint.encodeLongitude(box.maxLon);\n        // disable box2\n        minLon2 = Integer.MAX_VALUE;\n      }\n    }\n    setBottomCounter++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09f15823cf5eb6e807005579e875e117d8598f95","date":1460066385,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","sourceNew":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n      Rectangle box = Rectangle.fromPointDistance(latitude, longitude, haversin2(bottom));\n      // pre-encode our box to our integer encoding, so we don't have to decode \n      // to double values for uncompetitive hits. This has some cost!\n      minLat = encodeLatitude(box.minLat);\n      maxLat = encodeLatitude(box.maxLat);\n      if (box.crossesDateline()) {\n        // box1\n        minLon = Integer.MIN_VALUE;\n        maxLon = encodeLongitude(box.maxLon);\n        // box2\n        minLon2 = encodeLongitude(box.minLon);\n      } else {\n        minLon = encodeLongitude(box.minLon);\n        maxLon = encodeLongitude(box.maxLon);\n        // disable box2\n        minLon2 = Integer.MAX_VALUE;\n      }\n    }\n    setBottomCounter++;\n  }\n\n","sourceOld":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n      Rectangle box = Rectangle.fromPointDistance(latitude, longitude, haversin2(bottom));\n      // pre-encode our box to our integer encoding, so we don't have to decode \n      // to double values for uncompetitive hits. This has some cost!\n      minLat = LatLonPoint.encodeLatitude(box.minLat);\n      maxLat = LatLonPoint.encodeLatitude(box.maxLat);\n      if (box.crossesDateline()) {\n        // box1\n        minLon = Integer.MIN_VALUE;\n        maxLon = LatLonPoint.encodeLongitude(box.maxLon);\n        // box2\n        minLon2 = LatLonPoint.encodeLongitude(box.minLon);\n      } else {\n        minLon = LatLonPoint.encodeLongitude(box.minLon);\n        maxLon = LatLonPoint.encodeLongitude(box.maxLon);\n        // disable box2\n        minLon2 = Integer.MAX_VALUE;\n      }\n    }\n    setBottomCounter++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88b0212386fe531136816706dc37dc49b9dbf7dc","date":1532560226,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","sourceNew":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n      Rectangle box = Rectangle.fromPointDistance(latitude, longitude, haversin2(bottom));\n      // pre-encode our box to our integer encoding, so we don't have to decode \n      // to double values for uncompetitive hits. This has some cost!\n      minLat = encodeLatitude(box.minLat);\n      maxLat = encodeLatitude(box.maxLat);\n      if (box.crossesDateline()) {\n        // box1\n        minLon = Integer.MIN_VALUE;\n        maxLon = encodeLongitude(box.maxLon);\n        // box2\n        minLon2 = encodeLongitude(box.minLon);\n      } else {\n        minLon = encodeLongitude(box.minLon);\n        maxLon = encodeLongitude(box.maxLon);\n        // disable box2\n        minLon2 = Integer.MAX_VALUE;\n      }\n    }\n    setBottomCounter++;\n  }\n\n","sourceOld":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n      Rectangle box = Rectangle.fromPointDistance(latitude, longitude, haversin2(bottom));\n      // pre-encode our box to our integer encoding, so we don't have to decode \n      // to double values for uncompetitive hits. This has some cost!\n      minLat = encodeLatitude(box.minLat);\n      maxLat = encodeLatitude(box.maxLat);\n      if (box.crossesDateline()) {\n        // box1\n        minLon = Integer.MIN_VALUE;\n        maxLon = encodeLongitude(box.maxLon);\n        // box2\n        minLon2 = encodeLongitude(box.minLon);\n      } else {\n        minLon = encodeLongitude(box.minLon);\n        maxLon = encodeLongitude(box.maxLon);\n        // disable box2\n        minLon2 = Integer.MAX_VALUE;\n      }\n    }\n    setBottomCounter++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d210c7f333402b4828c1d10dfd5457c9fe312c7d":["fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336"],"9311729585934167418ba9c06524f91f08bacdbe":["54f531dff997ea7763360cb59f5ccadc6811b519"],"575856a9f007b9c35d0113c9e18151b554709ef2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9311729585934167418ba9c06524f91f08bacdbe"],"43ddc1b7a872fafd838d3f3129984ca661e29b36":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"ed48f9723ad1b29c351ea43b5a2c8f90c3a45737":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"98e0f1aa9ab98b9d47cc76e3d38926353c75b571":["d210c7f333402b4828c1d10dfd5457c9fe312c7d"],"fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336":["575856a9f007b9c35d0113c9e18151b554709ef2"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["98e0f1aa9ab98b9d47cc76e3d38926353c75b571"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["09f15823cf5eb6e807005579e875e117d8598f95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"54f531dff997ea7763360cb59f5ccadc6811b519":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["43ddc1b7a872fafd838d3f3129984ca661e29b36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88b0212386fe531136816706dc37dc49b9dbf7dc"],"09f15823cf5eb6e807005579e875e117d8598f95":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe","ed48f9723ad1b29c351ea43b5a2c8f90c3a45737"]},"commit2Childs":{"d210c7f333402b4828c1d10dfd5457c9fe312c7d":["98e0f1aa9ab98b9d47cc76e3d38926353c75b571"],"9311729585934167418ba9c06524f91f08bacdbe":["575856a9f007b9c35d0113c9e18151b554709ef2"],"575856a9f007b9c35d0113c9e18151b554709ef2":["fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336"],"43ddc1b7a872fafd838d3f3129984ca661e29b36":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"ed48f9723ad1b29c351ea43b5a2c8f90c3a45737":["09f15823cf5eb6e807005579e875e117d8598f95"],"98e0f1aa9ab98b9d47cc76e3d38926353c75b571":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336":["d210c7f333402b4828c1d10dfd5457c9fe312c7d"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["43ddc1b7a872fafd838d3f3129984ca661e29b36"],"54f531dff997ea7763360cb59f5ccadc6811b519":["9311729585934167418ba9c06524f91f08bacdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["575856a9f007b9c35d0113c9e18151b554709ef2","54f531dff997ea7763360cb59f5ccadc6811b519"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["ed48f9723ad1b29c351ea43b5a2c8f90c3a45737","09f15823cf5eb6e807005579e875e117d8598f95"],"09f15823cf5eb6e807005579e875e117d8598f95":["88b0212386fe531136816706dc37dc49b9dbf7dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}