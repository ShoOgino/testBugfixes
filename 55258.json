{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#suggestOptimizations(Suggestion.Ctx).mjava","commits":[{"id":"6428b274f6593f368c4f838379620e7f5d196d65","date":1537799661,"type":0,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#suggestOptimizations(Suggestion.Ctx).mjava","pathOld":"/dev/null","sourceNew":"  private static void suggestOptimizations(Suggestion.Ctx ctx) {\n    List<Row> matrix = ctx.session.matrix;\n    if (matrix.isEmpty()) return;\n    for (int i = 0; i < matrix.size(); i++) {\n      Row row = matrix.get(i);\n      Map<String, Collection<String>> collVsShards = new HashMap<>();\n      row.forEachReplica(ri -> collVsShards.computeIfAbsent(ri.getCollection(), s -> new HashSet<>()).add(ri.getShard()));\n      for (Map.Entry<String, Collection<String>> e : collVsShards.entrySet()) {\n        e.setValue(FreeDiskVariable.getSortedShards(Collections.singletonList(row), e.getValue(), e.getKey()));\n      }\n      for (Map.Entry<String, Collection<String>> e : collVsShards.entrySet()) {\n        if (!ctx.needMore()) break;\n        for (String shard : e.getValue()) {\n          if (!ctx.needMore()) break;\n          Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n              .hint(Hint.COLL_SHARD, new Pair<>(e.getKey(), shard))\n              .hint(Hint.SRC_NODE, row.node);\n          ctx.addSuggestion(suggester);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"549864a5317b87de2dd7d4a7d4f8d88eae2c7e58","date":1538573878,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#suggestOptimizations(Suggestion.Ctx,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#suggestOptimizations(Suggestion.Ctx).mjava","sourceNew":"  private static void suggestOptimizations(Suggestion.Ctx ctx, int count) {\n    int maxTotalSuggestions = ctx.getSuggestions().size() + count;\n    List<Row> matrix = ctx.session.matrix;\n    if (matrix.isEmpty()) return;\n    for (int i = 0; i < matrix.size(); i++) {\n      Row row = matrix.get(i);\n      Map<String, Collection<String>> collVsShards = new HashMap<>();\n      row.forEachReplica(ri -> collVsShards.computeIfAbsent(ri.getCollection(), s -> new HashSet<>()).add(ri.getShard()));\n      for (Map.Entry<String, Collection<String>> e : collVsShards.entrySet()) {\n        e.setValue(FreeDiskVariable.getSortedShards(Collections.singletonList(row), e.getValue(), e.getKey()));\n      }\n      for (Map.Entry<String, Collection<String>> e : collVsShards.entrySet()) {\n        if (ctx.getSuggestions().size() >= maxTotalSuggestions) break;\n        for (String shard : e.getValue()) {\n          Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n              .hint(Hint.COLL_SHARD, new Pair<>(e.getKey(), shard))\n              .hint(Hint.SRC_NODE, row.node);\n          ctx.addSuggestion(suggester, \"improvement\");\n          if (ctx.getSuggestions().size() >= maxTotalSuggestions) break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void suggestOptimizations(Suggestion.Ctx ctx) {\n    List<Row> matrix = ctx.session.matrix;\n    if (matrix.isEmpty()) return;\n    for (int i = 0; i < matrix.size(); i++) {\n      Row row = matrix.get(i);\n      Map<String, Collection<String>> collVsShards = new HashMap<>();\n      row.forEachReplica(ri -> collVsShards.computeIfAbsent(ri.getCollection(), s -> new HashSet<>()).add(ri.getShard()));\n      for (Map.Entry<String, Collection<String>> e : collVsShards.entrySet()) {\n        e.setValue(FreeDiskVariable.getSortedShards(Collections.singletonList(row), e.getValue(), e.getKey()));\n      }\n      for (Map.Entry<String, Collection<String>> e : collVsShards.entrySet()) {\n        if (!ctx.needMore()) break;\n        for (String shard : e.getValue()) {\n          if (!ctx.needMore()) break;\n          Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n              .hint(Hint.COLL_SHARD, new Pair<>(e.getKey(), shard))\n              .hint(Hint.SRC_NODE, row.node);\n          ctx.addSuggestion(suggester);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"549864a5317b87de2dd7d4a7d4f8d88eae2c7e58":["6428b274f6593f368c4f838379620e7f5d196d65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6428b274f6593f368c4f838379620e7f5d196d65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["549864a5317b87de2dd7d4a7d4f8d88eae2c7e58"]},"commit2Childs":{"549864a5317b87de2dd7d4a7d4f8d88eae2c7e58":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6428b274f6593f368c4f838379620e7f5d196d65"],"6428b274f6593f368c4f838379620e7f5d196d65":["549864a5317b87de2dd7d4a7d4f8d88eae2c7e58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}