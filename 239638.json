{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/TrimFilter#incrementToken().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/TrimFilter#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/TrimFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int len = termAtt.length();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n    int endOff = 0;\n\n    // eat the first characters\n    //QUESTION: Should we use Character.isWhitespace() instead?\n    for (start = 0; start < len && termBuffer[start] <= ' '; start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && termBuffer[end - 1] <= ' '; end--) {\n      endOff++;\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.copyBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setEmpty();\n      }\n      if (updateOffsets) {\n        int newStart = offsetAtt.startOffset()+start;\n        int newEnd = offsetAtt.endOffset() - (start<end ? endOff:0);\n        offsetAtt.setOffset(newStart, newEnd);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int len = termAtt.length();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n    int endOff = 0;\n\n    // eat the first characters\n    //QUESTION: Should we use Character.isWhitespace() instead?\n    for (start = 0; start < len && termBuffer[start] <= ' '; start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && termBuffer[end - 1] <= ' '; end--) {\n      endOff++;\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.copyBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setEmpty();\n      }\n      if (updateOffsets) {\n        int newStart = offsetAtt.startOffset()+start;\n        int newEnd = offsetAtt.endOffset() - (start<end ? endOff:0);\n        offsetAtt.setOffset(newStart, newEnd);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a43b8655231010bd8d9a1bea43acc6001df4b0dd","date":1327331998,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/TrimFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/TrimFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int len = termAtt.length();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n    int endOff = 0;\n\n    // eat the first characters\n    //QUESTION: Should we use Character.isWhitespace() instead?\n    for (start = 0; start < len && termBuffer[start] <= ' '; start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && termBuffer[end - 1] <= ' '; end--) {\n      endOff++;\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.copyBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setEmpty();\n      }\n      if (updateOffsets && len == offsetAtt.endOffset() - offsetAtt.startOffset()) {\n        int newStart = offsetAtt.startOffset()+start;\n        int newEnd = offsetAtt.endOffset() - (start<end ? endOff:0);\n        offsetAtt.setOffset(newStart, newEnd);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int len = termAtt.length();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n    int endOff = 0;\n\n    // eat the first characters\n    //QUESTION: Should we use Character.isWhitespace() instead?\n    for (start = 0; start < len && termBuffer[start] <= ' '; start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && termBuffer[end - 1] <= ' '; end--) {\n      endOff++;\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.copyBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setEmpty();\n      }\n      if (updateOffsets) {\n        int newStart = offsetAtt.startOffset()+start;\n        int newEnd = offsetAtt.endOffset() - (start<end ? endOff:0);\n        offsetAtt.setOffset(newStart, newEnd);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a89676536a5d3e2e875a9eed6b3f22a63cca643","date":1327356915,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/TrimFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/TrimFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int len = termAtt.length();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n    int endOff = 0;\n\n    // eat the first characters\n    //QUESTION: Should we use Character.isWhitespace() instead?\n    for (start = 0; start < len && termBuffer[start] <= ' '; start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && termBuffer[end - 1] <= ' '; end--) {\n      endOff++;\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.copyBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setEmpty();\n      }\n      if (updateOffsets && len == offsetAtt.endOffset() - offsetAtt.startOffset()) {\n        int newStart = offsetAtt.startOffset()+start;\n        int newEnd = offsetAtt.endOffset() - (start<end ? endOff:0);\n        offsetAtt.setOffset(newStart, newEnd);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int len = termAtt.length();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n    int endOff = 0;\n\n    // eat the first characters\n    //QUESTION: Should we use Character.isWhitespace() instead?\n    for (start = 0; start < len && termBuffer[start] <= ' '; start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && termBuffer[end - 1] <= ' '; end--) {\n      endOff++;\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.copyBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setEmpty();\n      }\n      if (updateOffsets) {\n        int newStart = offsetAtt.startOffset()+start;\n        int newEnd = offsetAtt.endOffset() - (start<end ? endOff:0);\n        offsetAtt.setOffset(newStart, newEnd);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/TrimFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/TrimFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int len = termAtt.length();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n    int endOff = 0;\n\n    // eat the first characters\n    //QUESTION: Should we use Character.isWhitespace() instead?\n    for (start = 0; start < len && termBuffer[start] <= ' '; start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && termBuffer[end - 1] <= ' '; end--) {\n      endOff++;\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.copyBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setEmpty();\n      }\n      if (updateOffsets && len == offsetAtt.endOffset() - offsetAtt.startOffset()) {\n        int newStart = offsetAtt.startOffset()+start;\n        int newEnd = offsetAtt.endOffset() - (start<end ? endOff:0);\n        offsetAtt.setOffset(newStart, newEnd);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int len = termAtt.length();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n    int endOff = 0;\n\n    // eat the first characters\n    //QUESTION: Should we use Character.isWhitespace() instead?\n    for (start = 0; start < len && termBuffer[start] <= ' '; start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && termBuffer[end - 1] <= ' '; end--) {\n      endOff++;\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.copyBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setEmpty();\n      }\n      if (updateOffsets) {\n        int newStart = offsetAtt.startOffset()+start;\n        int newEnd = offsetAtt.endOffset() - (start<end ? endOff:0);\n        offsetAtt.setOffset(newStart, newEnd);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/TrimFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/TrimFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int len = termAtt.length();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n    int endOff = 0;\n\n    // eat the first characters\n    //QUESTION: Should we use Character.isWhitespace() instead?\n    for (start = 0; start < len && termBuffer[start] <= ' '; start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && termBuffer[end - 1] <= ' '; end--) {\n      endOff++;\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.copyBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setEmpty();\n      }\n      if (updateOffsets && len == offsetAtt.endOffset() - offsetAtt.startOffset()) {\n        int newStart = offsetAtt.startOffset()+start;\n        int newEnd = offsetAtt.endOffset() - (start<end ? endOff:0);\n        offsetAtt.setOffset(newStart, newEnd);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int len = termAtt.length();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n    int endOff = 0;\n\n    // eat the first characters\n    //QUESTION: Should we use Character.isWhitespace() instead?\n    for (start = 0; start < len && termBuffer[start] <= ' '; start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && termBuffer[end - 1] <= ' '; end--) {\n      endOff++;\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.copyBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setEmpty();\n      }\n      if (updateOffsets && len == offsetAtt.endOffset() - offsetAtt.startOffset()) {\n        int newStart = offsetAtt.startOffset()+start;\n        int newEnd = offsetAtt.endOffset() - (start<end ? endOff:0);\n        offsetAtt.setOffset(newStart, newEnd);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":["0f080986da691a3bba7b757f43ab72cdc82b57ce","a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["0f080986da691a3bba7b757f43ab72cdc82b57ce","a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a43b8655231010bd8d9a1bea43acc6001df4b0dd":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"a43b8655231010bd8d9a1bea43acc6001df4b0dd":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","b89678825b68eccaf09e6ab71675fc0b0af1e099","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}