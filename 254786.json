{"path":"solr/core/src/test/org/apache/solr/cloud/TestOnReconnectListenerSupport#test().mjava","commits":[{"id":"29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3","date":1460654262,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestOnReconnectListenerSupport#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    waitForThingsToLevelOut(30000);\n\n    String testCollectionName = \"c8n_onreconnect_1x1\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 1, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = getShardLeader(testCollectionName, shardId, 30 /* timeout secs */);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    // get the ZkController for the node hosting the leader\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    String leaderCoreName = leader.getStr(CORE_NAME_PROP);\n    String leaderCoreId;\n    try (SolrCore leaderCore = cores.getCore(leaderCoreName)) {\n      assertNotNull(\"SolrCore for \"+leaderCoreName+\" not found!\", leaderCore);\n      leaderCoreId = leaderCore.getName()+\":\"+leaderCore.getStartNanoTime();\n    }\n\n    // verify the ZkIndexSchemaReader is a registered OnReconnect listener\n    Set<OnReconnect> listeners = zkController.getCurrentOnReconnectListeners();\n    assertNotNull(\"ZkController returned null OnReconnect listeners\", listeners);\n    ZkIndexSchemaReader expectedListener = null;\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (leaderCoreId.equals(reader.getUniqueCoreId())) {\n          expectedListener = reader;\n          break;\n        }\n      }\n    }\n    assertNotNull(\"ZkIndexSchemaReader for core \" + leaderCoreName +\n        \" not registered as an OnReconnect listener and should be\", expectedListener);\n\n    // reload the collection\n    boolean wasReloaded = reloadCollection(leader, testCollectionName);\n    assertTrue(\"Collection '\" + testCollectionName + \"' failed to reload within a reasonable amount of time!\",\n        wasReloaded);\n\n    // after reload, the new core should be registered as an OnReconnect listener and the old should not be\n    String reloadedLeaderCoreId;\n    try (SolrCore leaderCore = cores.getCore(leaderCoreName)) {\n      reloadedLeaderCoreId = leaderCore.getName()+\":\"+leaderCore.getStartNanoTime();\n    }\n\n    // they shouldn't be equal after reload\n    assertTrue(!leaderCoreId.equals(reloadedLeaderCoreId));\n\n    listeners = zkController.getCurrentOnReconnectListeners();\n    assertNotNull(\"ZkController returned null OnReconnect listeners\", listeners);\n\n    expectedListener = null; // reset\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (leaderCoreId.equals(reader.getUniqueCoreId())) {\n          fail(\"Previous core \"+leaderCoreId+\n              \" should no longer be a registered OnReconnect listener! Current listeners: \"+listeners);\n        } else if (reloadedLeaderCoreId.equals(reader.getUniqueCoreId())) {\n          expectedListener = reader;\n          break;\n        }\n      }\n    }\n\n    assertNotNull(\"ZkIndexSchemaReader for core \"+reloadedLeaderCoreId+\n        \" not registered as an OnReconnect listener and should be\", expectedListener);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.deleteCollection(testCollectionName).process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n\n    listeners = zkController.getCurrentOnReconnectListeners();\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (reloadedLeaderCoreId.equals(reader.getUniqueCoreId())) {\n          fail(\"Previous core \"+reloadedLeaderCoreId+\n              \" should no longer be a registered OnReconnect listener after collection delete!\");\n        }\n      }\n    }\n\n    log.info(\"TestOnReconnectListenerSupport succeeded ... shutting down now!\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestOnReconnectListenerSupport#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestOnReconnectListenerSupport#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    waitForThingsToLevelOut(30000);\n\n    String testCollectionName = \"c8n_onreconnect_1x1\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, \"conf1\", 1, 1, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = getShardLeader(testCollectionName, shardId, 30 /* timeout secs */);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    // get the ZkController for the node hosting the leader\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    String leaderCoreName = leader.getStr(CORE_NAME_PROP);\n    String leaderCoreId;\n    try (SolrCore leaderCore = cores.getCore(leaderCoreName)) {\n      assertNotNull(\"SolrCore for \"+leaderCoreName+\" not found!\", leaderCore);\n      leaderCoreId = leaderCore.getName()+\":\"+leaderCore.getStartNanoTime();\n    }\n\n    // verify the ZkIndexSchemaReader is a registered OnReconnect listener\n    Set<OnReconnect> listeners = zkController.getCurrentOnReconnectListeners();\n    assertNotNull(\"ZkController returned null OnReconnect listeners\", listeners);\n    ZkIndexSchemaReader expectedListener = null;\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (leaderCoreId.equals(reader.getUniqueCoreId())) {\n          expectedListener = reader;\n          break;\n        }\n      }\n    }\n    assertNotNull(\"ZkIndexSchemaReader for core \" + leaderCoreName +\n        \" not registered as an OnReconnect listener and should be\", expectedListener);\n\n    // reload the collection\n    boolean wasReloaded = reloadCollection(leader, testCollectionName);\n    assertTrue(\"Collection '\" + testCollectionName + \"' failed to reload within a reasonable amount of time!\",\n        wasReloaded);\n\n    // after reload, the new core should be registered as an OnReconnect listener and the old should not be\n    String reloadedLeaderCoreId;\n    try (SolrCore leaderCore = cores.getCore(leaderCoreName)) {\n      reloadedLeaderCoreId = leaderCore.getName()+\":\"+leaderCore.getStartNanoTime();\n    }\n\n    // they shouldn't be equal after reload\n    assertTrue(!leaderCoreId.equals(reloadedLeaderCoreId));\n\n    listeners = zkController.getCurrentOnReconnectListeners();\n    assertNotNull(\"ZkController returned null OnReconnect listeners\", listeners);\n\n    expectedListener = null; // reset\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (leaderCoreId.equals(reader.getUniqueCoreId())) {\n          fail(\"Previous core \"+leaderCoreId+\n              \" should no longer be a registered OnReconnect listener! Current listeners: \"+listeners);\n        } else if (reloadedLeaderCoreId.equals(reader.getUniqueCoreId())) {\n          expectedListener = reader;\n          break;\n        }\n      }\n    }\n\n    assertNotNull(\"ZkIndexSchemaReader for core \"+reloadedLeaderCoreId+\n        \" not registered as an OnReconnect listener and should be\", expectedListener);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.deleteCollection(testCollectionName).process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n\n    listeners = zkController.getCurrentOnReconnectListeners();\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (reloadedLeaderCoreId.equals(reader.getUniqueCoreId())) {\n          fail(\"Previous core \"+reloadedLeaderCoreId+\n              \" should no longer be a registered OnReconnect listener after collection delete!\");\n        }\n      }\n    }\n\n    log.info(\"TestOnReconnectListenerSupport succeeded ... shutting down now!\");\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    waitForThingsToLevelOut(30000);\n\n    String testCollectionName = \"c8n_onreconnect_1x1\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 1, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = getShardLeader(testCollectionName, shardId, 30 /* timeout secs */);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    // get the ZkController for the node hosting the leader\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    String leaderCoreName = leader.getStr(CORE_NAME_PROP);\n    String leaderCoreId;\n    try (SolrCore leaderCore = cores.getCore(leaderCoreName)) {\n      assertNotNull(\"SolrCore for \"+leaderCoreName+\" not found!\", leaderCore);\n      leaderCoreId = leaderCore.getName()+\":\"+leaderCore.getStartNanoTime();\n    }\n\n    // verify the ZkIndexSchemaReader is a registered OnReconnect listener\n    Set<OnReconnect> listeners = zkController.getCurrentOnReconnectListeners();\n    assertNotNull(\"ZkController returned null OnReconnect listeners\", listeners);\n    ZkIndexSchemaReader expectedListener = null;\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (leaderCoreId.equals(reader.getUniqueCoreId())) {\n          expectedListener = reader;\n          break;\n        }\n      }\n    }\n    assertNotNull(\"ZkIndexSchemaReader for core \" + leaderCoreName +\n        \" not registered as an OnReconnect listener and should be\", expectedListener);\n\n    // reload the collection\n    boolean wasReloaded = reloadCollection(leader, testCollectionName);\n    assertTrue(\"Collection '\" + testCollectionName + \"' failed to reload within a reasonable amount of time!\",\n        wasReloaded);\n\n    // after reload, the new core should be registered as an OnReconnect listener and the old should not be\n    String reloadedLeaderCoreId;\n    try (SolrCore leaderCore = cores.getCore(leaderCoreName)) {\n      reloadedLeaderCoreId = leaderCore.getName()+\":\"+leaderCore.getStartNanoTime();\n    }\n\n    // they shouldn't be equal after reload\n    assertTrue(!leaderCoreId.equals(reloadedLeaderCoreId));\n\n    listeners = zkController.getCurrentOnReconnectListeners();\n    assertNotNull(\"ZkController returned null OnReconnect listeners\", listeners);\n\n    expectedListener = null; // reset\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (leaderCoreId.equals(reader.getUniqueCoreId())) {\n          fail(\"Previous core \"+leaderCoreId+\n              \" should no longer be a registered OnReconnect listener! Current listeners: \"+listeners);\n        } else if (reloadedLeaderCoreId.equals(reader.getUniqueCoreId())) {\n          expectedListener = reader;\n          break;\n        }\n      }\n    }\n\n    assertNotNull(\"ZkIndexSchemaReader for core \"+reloadedLeaderCoreId+\n        \" not registered as an OnReconnect listener and should be\", expectedListener);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.deleteCollection(testCollectionName).process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n\n    listeners = zkController.getCurrentOnReconnectListeners();\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (reloadedLeaderCoreId.equals(reader.getUniqueCoreId())) {\n          fail(\"Previous core \"+reloadedLeaderCoreId+\n              \" should no longer be a registered OnReconnect listener after collection delete!\");\n        }\n      }\n    }\n\n    log.info(\"TestOnReconnectListenerSupport succeeded ... shutting down now!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestOnReconnectListenerSupport#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestOnReconnectListenerSupport#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    waitForThingsToLevelOut(30000);\n\n    String testCollectionName = \"c8n_onreconnect_1x1\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, \"conf1\", 1, 1, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = getShardLeader(testCollectionName, shardId, 30 /* timeout secs */);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    // get the ZkController for the node hosting the leader\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    String leaderCoreName = leader.getStr(CORE_NAME_PROP);\n    String leaderCoreId;\n    try (SolrCore leaderCore = cores.getCore(leaderCoreName)) {\n      assertNotNull(\"SolrCore for \"+leaderCoreName+\" not found!\", leaderCore);\n      leaderCoreId = leaderCore.getName()+\":\"+leaderCore.getStartNanoTime();\n    }\n\n    // verify the ZkIndexSchemaReader is a registered OnReconnect listener\n    Set<OnReconnect> listeners = zkController.getCurrentOnReconnectListeners();\n    assertNotNull(\"ZkController returned null OnReconnect listeners\", listeners);\n    ZkIndexSchemaReader expectedListener = null;\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (leaderCoreId.equals(reader.getUniqueCoreId())) {\n          expectedListener = reader;\n          break;\n        }\n      }\n    }\n    assertNotNull(\"ZkIndexSchemaReader for core \" + leaderCoreName +\n        \" not registered as an OnReconnect listener and should be\", expectedListener);\n\n    // reload the collection\n    boolean wasReloaded = reloadCollection(leader, testCollectionName);\n    assertTrue(\"Collection '\" + testCollectionName + \"' failed to reload within a reasonable amount of time!\",\n        wasReloaded);\n\n    // after reload, the new core should be registered as an OnReconnect listener and the old should not be\n    String reloadedLeaderCoreId;\n    try (SolrCore leaderCore = cores.getCore(leaderCoreName)) {\n      reloadedLeaderCoreId = leaderCore.getName()+\":\"+leaderCore.getStartNanoTime();\n    }\n\n    // they shouldn't be equal after reload\n    assertTrue(!leaderCoreId.equals(reloadedLeaderCoreId));\n\n    listeners = zkController.getCurrentOnReconnectListeners();\n    assertNotNull(\"ZkController returned null OnReconnect listeners\", listeners);\n\n    expectedListener = null; // reset\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (leaderCoreId.equals(reader.getUniqueCoreId())) {\n          fail(\"Previous core \"+leaderCoreId+\n              \" should no longer be a registered OnReconnect listener! Current listeners: \"+listeners);\n        } else if (reloadedLeaderCoreId.equals(reader.getUniqueCoreId())) {\n          expectedListener = reader;\n          break;\n        }\n      }\n    }\n\n    assertNotNull(\"ZkIndexSchemaReader for core \"+reloadedLeaderCoreId+\n        \" not registered as an OnReconnect listener and should be\", expectedListener);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.deleteCollection(testCollectionName).process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n\n    listeners = zkController.getCurrentOnReconnectListeners();\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (reloadedLeaderCoreId.equals(reader.getUniqueCoreId())) {\n          fail(\"Previous core \"+reloadedLeaderCoreId+\n              \" should no longer be a registered OnReconnect listener after collection delete!\");\n        }\n      }\n    }\n\n    log.info(\"TestOnReconnectListenerSupport succeeded ... shutting down now!\");\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    waitForThingsToLevelOut(30000);\n\n    String testCollectionName = \"c8n_onreconnect_1x1\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 1, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = getShardLeader(testCollectionName, shardId, 30 /* timeout secs */);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    // get the ZkController for the node hosting the leader\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    String leaderCoreName = leader.getStr(CORE_NAME_PROP);\n    String leaderCoreId;\n    try (SolrCore leaderCore = cores.getCore(leaderCoreName)) {\n      assertNotNull(\"SolrCore for \"+leaderCoreName+\" not found!\", leaderCore);\n      leaderCoreId = leaderCore.getName()+\":\"+leaderCore.getStartNanoTime();\n    }\n\n    // verify the ZkIndexSchemaReader is a registered OnReconnect listener\n    Set<OnReconnect> listeners = zkController.getCurrentOnReconnectListeners();\n    assertNotNull(\"ZkController returned null OnReconnect listeners\", listeners);\n    ZkIndexSchemaReader expectedListener = null;\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (leaderCoreId.equals(reader.getUniqueCoreId())) {\n          expectedListener = reader;\n          break;\n        }\n      }\n    }\n    assertNotNull(\"ZkIndexSchemaReader for core \" + leaderCoreName +\n        \" not registered as an OnReconnect listener and should be\", expectedListener);\n\n    // reload the collection\n    boolean wasReloaded = reloadCollection(leader, testCollectionName);\n    assertTrue(\"Collection '\" + testCollectionName + \"' failed to reload within a reasonable amount of time!\",\n        wasReloaded);\n\n    // after reload, the new core should be registered as an OnReconnect listener and the old should not be\n    String reloadedLeaderCoreId;\n    try (SolrCore leaderCore = cores.getCore(leaderCoreName)) {\n      reloadedLeaderCoreId = leaderCore.getName()+\":\"+leaderCore.getStartNanoTime();\n    }\n\n    // they shouldn't be equal after reload\n    assertTrue(!leaderCoreId.equals(reloadedLeaderCoreId));\n\n    listeners = zkController.getCurrentOnReconnectListeners();\n    assertNotNull(\"ZkController returned null OnReconnect listeners\", listeners);\n\n    expectedListener = null; // reset\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (leaderCoreId.equals(reader.getUniqueCoreId())) {\n          fail(\"Previous core \"+leaderCoreId+\n              \" should no longer be a registered OnReconnect listener! Current listeners: \"+listeners);\n        } else if (reloadedLeaderCoreId.equals(reader.getUniqueCoreId())) {\n          expectedListener = reader;\n          break;\n        }\n      }\n    }\n\n    assertNotNull(\"ZkIndexSchemaReader for core \"+reloadedLeaderCoreId+\n        \" not registered as an OnReconnect listener and should be\", expectedListener);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.deleteCollection(testCollectionName).process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n\n    listeners = zkController.getCurrentOnReconnectListeners();\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (reloadedLeaderCoreId.equals(reader.getUniqueCoreId())) {\n          fail(\"Previous core \"+reloadedLeaderCoreId+\n              \" should no longer be a registered OnReconnect listener after collection delete!\");\n        }\n      }\n    }\n\n    log.info(\"TestOnReconnectListenerSupport succeeded ... shutting down now!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestOnReconnectListenerSupport#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestOnReconnectListenerSupport#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    waitForThingsToLevelOut(30000);\n\n    String testCollectionName = \"c8n_onreconnect_1x1\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, \"conf1\", 1, 1, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = getShardLeader(testCollectionName, shardId, 30 /* timeout secs */);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    // get the ZkController for the node hosting the leader\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    String leaderCoreName = leader.getStr(CORE_NAME_PROP);\n    String leaderCoreId;\n    try (SolrCore leaderCore = cores.getCore(leaderCoreName)) {\n      assertNotNull(\"SolrCore for \"+leaderCoreName+\" not found!\", leaderCore);\n      leaderCoreId = leaderCore.getName()+\":\"+leaderCore.getStartNanoTime();\n    }\n\n    // verify the ZkIndexSchemaReader is a registered OnReconnect listener\n    Set<OnReconnect> listeners = zkController.getCurrentOnReconnectListeners();\n    assertNotNull(\"ZkController returned null OnReconnect listeners\", listeners);\n    ZkIndexSchemaReader expectedListener = null;\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (leaderCoreId.equals(reader.getUniqueCoreId())) {\n          expectedListener = reader;\n          break;\n        }\n      }\n    }\n    assertNotNull(\"ZkIndexSchemaReader for core \" + leaderCoreName +\n        \" not registered as an OnReconnect listener and should be\", expectedListener);\n\n    // reload the collection\n    boolean wasReloaded = reloadCollection(leader, testCollectionName);\n    assertTrue(\"Collection '\" + testCollectionName + \"' failed to reload within a reasonable amount of time!\",\n        wasReloaded);\n\n    // after reload, the new core should be registered as an OnReconnect listener and the old should not be\n    String reloadedLeaderCoreId;\n    try (SolrCore leaderCore = cores.getCore(leaderCoreName)) {\n      reloadedLeaderCoreId = leaderCore.getName()+\":\"+leaderCore.getStartNanoTime();\n    }\n\n    // they shouldn't be equal after reload\n    assertTrue(!leaderCoreId.equals(reloadedLeaderCoreId));\n\n    listeners = zkController.getCurrentOnReconnectListeners();\n    assertNotNull(\"ZkController returned null OnReconnect listeners\", listeners);\n\n    expectedListener = null; // reset\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (leaderCoreId.equals(reader.getUniqueCoreId())) {\n          fail(\"Previous core \"+leaderCoreId+\n              \" should no longer be a registered OnReconnect listener! Current listeners: \"+listeners);\n        } else if (reloadedLeaderCoreId.equals(reader.getUniqueCoreId())) {\n          expectedListener = reader;\n          break;\n        }\n      }\n    }\n\n    assertNotNull(\"ZkIndexSchemaReader for core \"+reloadedLeaderCoreId+\n        \" not registered as an OnReconnect listener and should be\", expectedListener);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.deleteCollection(testCollectionName).process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n\n    listeners = zkController.getCurrentOnReconnectListeners();\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (reloadedLeaderCoreId.equals(reader.getUniqueCoreId())) {\n          fail(\"Previous core \"+reloadedLeaderCoreId+\n              \" should no longer be a registered OnReconnect listener after collection delete!\");\n        }\n      }\n    }\n\n    log.info(\"TestOnReconnectListenerSupport succeeded ... shutting down now!\");\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    waitForThingsToLevelOut(30000);\n\n    String testCollectionName = \"c8n_onreconnect_1x1\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 1, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = getShardLeader(testCollectionName, shardId, 30 /* timeout secs */);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    // get the ZkController for the node hosting the leader\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    String leaderCoreName = leader.getStr(CORE_NAME_PROP);\n    String leaderCoreId;\n    try (SolrCore leaderCore = cores.getCore(leaderCoreName)) {\n      assertNotNull(\"SolrCore for \"+leaderCoreName+\" not found!\", leaderCore);\n      leaderCoreId = leaderCore.getName()+\":\"+leaderCore.getStartNanoTime();\n    }\n\n    // verify the ZkIndexSchemaReader is a registered OnReconnect listener\n    Set<OnReconnect> listeners = zkController.getCurrentOnReconnectListeners();\n    assertNotNull(\"ZkController returned null OnReconnect listeners\", listeners);\n    ZkIndexSchemaReader expectedListener = null;\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (leaderCoreId.equals(reader.getUniqueCoreId())) {\n          expectedListener = reader;\n          break;\n        }\n      }\n    }\n    assertNotNull(\"ZkIndexSchemaReader for core \" + leaderCoreName +\n        \" not registered as an OnReconnect listener and should be\", expectedListener);\n\n    // reload the collection\n    boolean wasReloaded = reloadCollection(leader, testCollectionName);\n    assertTrue(\"Collection '\" + testCollectionName + \"' failed to reload within a reasonable amount of time!\",\n        wasReloaded);\n\n    // after reload, the new core should be registered as an OnReconnect listener and the old should not be\n    String reloadedLeaderCoreId;\n    try (SolrCore leaderCore = cores.getCore(leaderCoreName)) {\n      reloadedLeaderCoreId = leaderCore.getName()+\":\"+leaderCore.getStartNanoTime();\n    }\n\n    // they shouldn't be equal after reload\n    assertTrue(!leaderCoreId.equals(reloadedLeaderCoreId));\n\n    listeners = zkController.getCurrentOnReconnectListeners();\n    assertNotNull(\"ZkController returned null OnReconnect listeners\", listeners);\n\n    expectedListener = null; // reset\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (leaderCoreId.equals(reader.getUniqueCoreId())) {\n          fail(\"Previous core \"+leaderCoreId+\n              \" should no longer be a registered OnReconnect listener! Current listeners: \"+listeners);\n        } else if (reloadedLeaderCoreId.equals(reader.getUniqueCoreId())) {\n          expectedListener = reader;\n          break;\n        }\n      }\n    }\n\n    assertNotNull(\"ZkIndexSchemaReader for core \"+reloadedLeaderCoreId+\n        \" not registered as an OnReconnect listener and should be\", expectedListener);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.deleteCollection(testCollectionName).process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n\n    listeners = zkController.getCurrentOnReconnectListeners();\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (reloadedLeaderCoreId.equals(reader.getUniqueCoreId())) {\n          fail(\"Previous core \"+reloadedLeaderCoreId+\n              \" should no longer be a registered OnReconnect listener after collection delete!\");\n        }\n      }\n    }\n\n    log.info(\"TestOnReconnectListenerSupport succeeded ... shutting down now!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add1e7dd742ea533ff4318cea83ca0a1f669f662","date":1585262285,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestOnReconnectListenerSupport#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestOnReconnectListenerSupport#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    waitForThingsToLevelOut(30, TimeUnit.SECONDS);\n\n    String testCollectionName = \"c8n_onreconnect_1x1\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, \"conf1\", 1, 1, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = getShardLeader(testCollectionName, shardId, 30 /* timeout secs */);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    // get the ZkController for the node hosting the leader\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    String leaderCoreName = leader.getStr(CORE_NAME_PROP);\n    String leaderCoreId;\n    try (SolrCore leaderCore = cores.getCore(leaderCoreName)) {\n      assertNotNull(\"SolrCore for \"+leaderCoreName+\" not found!\", leaderCore);\n      leaderCoreId = leaderCore.getName()+\":\"+leaderCore.getStartNanoTime();\n    }\n\n    // verify the ZkIndexSchemaReader is a registered OnReconnect listener\n    Set<OnReconnect> listeners = zkController.getCurrentOnReconnectListeners();\n    assertNotNull(\"ZkController returned null OnReconnect listeners\", listeners);\n    ZkIndexSchemaReader expectedListener = null;\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (leaderCoreId.equals(reader.getUniqueCoreId())) {\n          expectedListener = reader;\n          break;\n        }\n      }\n    }\n    assertNotNull(\"ZkIndexSchemaReader for core \" + leaderCoreName +\n        \" not registered as an OnReconnect listener and should be\", expectedListener);\n\n    // reload the collection\n    boolean wasReloaded = reloadCollection(leader, testCollectionName);\n    assertTrue(\"Collection '\" + testCollectionName + \"' failed to reload within a reasonable amount of time!\",\n        wasReloaded);\n\n    // after reload, the new core should be registered as an OnReconnect listener and the old should not be\n    String reloadedLeaderCoreId;\n    try (SolrCore leaderCore = cores.getCore(leaderCoreName)) {\n      reloadedLeaderCoreId = leaderCore.getName()+\":\"+leaderCore.getStartNanoTime();\n    }\n\n    // they shouldn't be equal after reload\n    assertTrue(!leaderCoreId.equals(reloadedLeaderCoreId));\n\n    listeners = zkController.getCurrentOnReconnectListeners();\n    assertNotNull(\"ZkController returned null OnReconnect listeners\", listeners);\n\n    expectedListener = null; // reset\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (leaderCoreId.equals(reader.getUniqueCoreId())) {\n          fail(\"Previous core \"+leaderCoreId+\n              \" should no longer be a registered OnReconnect listener! Current listeners: \"+listeners);\n        } else if (reloadedLeaderCoreId.equals(reader.getUniqueCoreId())) {\n          expectedListener = reader;\n          break;\n        }\n      }\n    }\n\n    assertNotNull(\"ZkIndexSchemaReader for core \"+reloadedLeaderCoreId+\n        \" not registered as an OnReconnect listener and should be\", expectedListener);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.deleteCollection(testCollectionName).process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n\n    listeners = zkController.getCurrentOnReconnectListeners();\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (reloadedLeaderCoreId.equals(reader.getUniqueCoreId())) {\n          fail(\"Previous core \"+reloadedLeaderCoreId+\n              \" should no longer be a registered OnReconnect listener after collection delete!\");\n        }\n      }\n    }\n\n    log.info(\"TestOnReconnectListenerSupport succeeded ... shutting down now!\");\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    waitForThingsToLevelOut(30000);\n\n    String testCollectionName = \"c8n_onreconnect_1x1\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, \"conf1\", 1, 1, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = getShardLeader(testCollectionName, shardId, 30 /* timeout secs */);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    // get the ZkController for the node hosting the leader\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    String leaderCoreName = leader.getStr(CORE_NAME_PROP);\n    String leaderCoreId;\n    try (SolrCore leaderCore = cores.getCore(leaderCoreName)) {\n      assertNotNull(\"SolrCore for \"+leaderCoreName+\" not found!\", leaderCore);\n      leaderCoreId = leaderCore.getName()+\":\"+leaderCore.getStartNanoTime();\n    }\n\n    // verify the ZkIndexSchemaReader is a registered OnReconnect listener\n    Set<OnReconnect> listeners = zkController.getCurrentOnReconnectListeners();\n    assertNotNull(\"ZkController returned null OnReconnect listeners\", listeners);\n    ZkIndexSchemaReader expectedListener = null;\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (leaderCoreId.equals(reader.getUniqueCoreId())) {\n          expectedListener = reader;\n          break;\n        }\n      }\n    }\n    assertNotNull(\"ZkIndexSchemaReader for core \" + leaderCoreName +\n        \" not registered as an OnReconnect listener and should be\", expectedListener);\n\n    // reload the collection\n    boolean wasReloaded = reloadCollection(leader, testCollectionName);\n    assertTrue(\"Collection '\" + testCollectionName + \"' failed to reload within a reasonable amount of time!\",\n        wasReloaded);\n\n    // after reload, the new core should be registered as an OnReconnect listener and the old should not be\n    String reloadedLeaderCoreId;\n    try (SolrCore leaderCore = cores.getCore(leaderCoreName)) {\n      reloadedLeaderCoreId = leaderCore.getName()+\":\"+leaderCore.getStartNanoTime();\n    }\n\n    // they shouldn't be equal after reload\n    assertTrue(!leaderCoreId.equals(reloadedLeaderCoreId));\n\n    listeners = zkController.getCurrentOnReconnectListeners();\n    assertNotNull(\"ZkController returned null OnReconnect listeners\", listeners);\n\n    expectedListener = null; // reset\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (leaderCoreId.equals(reader.getUniqueCoreId())) {\n          fail(\"Previous core \"+leaderCoreId+\n              \" should no longer be a registered OnReconnect listener! Current listeners: \"+listeners);\n        } else if (reloadedLeaderCoreId.equals(reader.getUniqueCoreId())) {\n          expectedListener = reader;\n          break;\n        }\n      }\n    }\n\n    assertNotNull(\"ZkIndexSchemaReader for core \"+reloadedLeaderCoreId+\n        \" not registered as an OnReconnect listener and should be\", expectedListener);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.deleteCollection(testCollectionName).process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n\n    listeners = zkController.getCurrentOnReconnectListeners();\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (reloadedLeaderCoreId.equals(reader.getUniqueCoreId())) {\n          fail(\"Previous core \"+reloadedLeaderCoreId+\n              \" should no longer be a registered OnReconnect listener after collection delete!\");\n        }\n      }\n    }\n\n    log.info(\"TestOnReconnectListenerSupport succeeded ... shutting down now!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestOnReconnectListenerSupport#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestOnReconnectListenerSupport#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    waitForThingsToLevelOut(30, TimeUnit.SECONDS);\n\n    String testCollectionName = \"c8n_onreconnect_1x1\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, \"conf1\", 1, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = getShardLeader(testCollectionName, shardId, 30 /* timeout secs */);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    // get the ZkController for the node hosting the leader\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    String leaderCoreName = leader.getStr(CORE_NAME_PROP);\n    String leaderCoreId;\n    try (SolrCore leaderCore = cores.getCore(leaderCoreName)) {\n      assertNotNull(\"SolrCore for \"+leaderCoreName+\" not found!\", leaderCore);\n      leaderCoreId = leaderCore.getName()+\":\"+leaderCore.getStartNanoTime();\n    }\n\n    // verify the ZkIndexSchemaReader is a registered OnReconnect listener\n    Set<OnReconnect> listeners = zkController.getCurrentOnReconnectListeners();\n    assertNotNull(\"ZkController returned null OnReconnect listeners\", listeners);\n    ZkIndexSchemaReader expectedListener = null;\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (leaderCoreId.equals(reader.getUniqueCoreId())) {\n          expectedListener = reader;\n          break;\n        }\n      }\n    }\n    assertNotNull(\"ZkIndexSchemaReader for core \" + leaderCoreName +\n        \" not registered as an OnReconnect listener and should be\", expectedListener);\n\n    // reload the collection\n    boolean wasReloaded = reloadCollection(leader, testCollectionName);\n    assertTrue(\"Collection '\" + testCollectionName + \"' failed to reload within a reasonable amount of time!\",\n        wasReloaded);\n\n    // after reload, the new core should be registered as an OnReconnect listener and the old should not be\n    String reloadedLeaderCoreId;\n    try (SolrCore leaderCore = cores.getCore(leaderCoreName)) {\n      reloadedLeaderCoreId = leaderCore.getName()+\":\"+leaderCore.getStartNanoTime();\n    }\n\n    // they shouldn't be equal after reload\n    assertTrue(!leaderCoreId.equals(reloadedLeaderCoreId));\n\n    listeners = zkController.getCurrentOnReconnectListeners();\n    assertNotNull(\"ZkController returned null OnReconnect listeners\", listeners);\n\n    expectedListener = null; // reset\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (leaderCoreId.equals(reader.getUniqueCoreId())) {\n          fail(\"Previous core \"+leaderCoreId+\n              \" should no longer be a registered OnReconnect listener! Current listeners: \"+listeners);\n        } else if (reloadedLeaderCoreId.equals(reader.getUniqueCoreId())) {\n          expectedListener = reader;\n          break;\n        }\n      }\n    }\n\n    assertNotNull(\"ZkIndexSchemaReader for core \"+reloadedLeaderCoreId+\n        \" not registered as an OnReconnect listener and should be\", expectedListener);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.deleteCollection(testCollectionName).process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n\n    listeners = zkController.getCurrentOnReconnectListeners();\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (reloadedLeaderCoreId.equals(reader.getUniqueCoreId())) {\n          fail(\"Previous core \"+reloadedLeaderCoreId+\n              \" should no longer be a registered OnReconnect listener after collection delete!\");\n        }\n      }\n    }\n\n    log.info(\"TestOnReconnectListenerSupport succeeded ... shutting down now!\");\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    waitForThingsToLevelOut(30, TimeUnit.SECONDS);\n\n    String testCollectionName = \"c8n_onreconnect_1x1\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, \"conf1\", 1, 1, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = getShardLeader(testCollectionName, shardId, 30 /* timeout secs */);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    // get the ZkController for the node hosting the leader\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    String leaderCoreName = leader.getStr(CORE_NAME_PROP);\n    String leaderCoreId;\n    try (SolrCore leaderCore = cores.getCore(leaderCoreName)) {\n      assertNotNull(\"SolrCore for \"+leaderCoreName+\" not found!\", leaderCore);\n      leaderCoreId = leaderCore.getName()+\":\"+leaderCore.getStartNanoTime();\n    }\n\n    // verify the ZkIndexSchemaReader is a registered OnReconnect listener\n    Set<OnReconnect> listeners = zkController.getCurrentOnReconnectListeners();\n    assertNotNull(\"ZkController returned null OnReconnect listeners\", listeners);\n    ZkIndexSchemaReader expectedListener = null;\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (leaderCoreId.equals(reader.getUniqueCoreId())) {\n          expectedListener = reader;\n          break;\n        }\n      }\n    }\n    assertNotNull(\"ZkIndexSchemaReader for core \" + leaderCoreName +\n        \" not registered as an OnReconnect listener and should be\", expectedListener);\n\n    // reload the collection\n    boolean wasReloaded = reloadCollection(leader, testCollectionName);\n    assertTrue(\"Collection '\" + testCollectionName + \"' failed to reload within a reasonable amount of time!\",\n        wasReloaded);\n\n    // after reload, the new core should be registered as an OnReconnect listener and the old should not be\n    String reloadedLeaderCoreId;\n    try (SolrCore leaderCore = cores.getCore(leaderCoreName)) {\n      reloadedLeaderCoreId = leaderCore.getName()+\":\"+leaderCore.getStartNanoTime();\n    }\n\n    // they shouldn't be equal after reload\n    assertTrue(!leaderCoreId.equals(reloadedLeaderCoreId));\n\n    listeners = zkController.getCurrentOnReconnectListeners();\n    assertNotNull(\"ZkController returned null OnReconnect listeners\", listeners);\n\n    expectedListener = null; // reset\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (leaderCoreId.equals(reader.getUniqueCoreId())) {\n          fail(\"Previous core \"+leaderCoreId+\n              \" should no longer be a registered OnReconnect listener! Current listeners: \"+listeners);\n        } else if (reloadedLeaderCoreId.equals(reader.getUniqueCoreId())) {\n          expectedListener = reader;\n          break;\n        }\n      }\n    }\n\n    assertNotNull(\"ZkIndexSchemaReader for core \"+reloadedLeaderCoreId+\n        \" not registered as an OnReconnect listener and should be\", expectedListener);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.deleteCollection(testCollectionName).process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n\n    listeners = zkController.getCurrentOnReconnectListeners();\n    for (OnReconnect listener : listeners) {\n      if (listener instanceof ZkIndexSchemaReader) {\n        ZkIndexSchemaReader reader = (ZkIndexSchemaReader)listener;\n        if (reloadedLeaderCoreId.equals(reader.getUniqueCoreId())) {\n          fail(\"Previous core \"+reloadedLeaderCoreId+\n              \" should no longer be a registered OnReconnect listener after collection delete!\");\n        }\n      }\n    }\n\n    log.info(\"TestOnReconnectListenerSupport succeeded ... shutting down now!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"197bbedf08450ade98a11f4a0001448059666bec":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"add1e7dd742ea533ff4318cea83ca0a1f669f662":["28288370235ed02234a64753cdbf0c6ec096304a"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3","197bbedf08450ade98a11f4a0001448059666bec"],"29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["add1e7dd742ea533ff4318cea83ca0a1f669f662"],"28288370235ed02234a64753cdbf0c6ec096304a":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3","197bbedf08450ade98a11f4a0001448059666bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"197bbedf08450ade98a11f4a0001448059666bec":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3"],"add1e7dd742ea533ff4318cea83ca0a1f669f662":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3":["197bbedf08450ade98a11f4a0001448059666bec","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["add1e7dd742ea533ff4318cea83ca0a1f669f662"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}