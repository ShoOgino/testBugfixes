{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest].TestHighlightRunner#doStandardHighlights(Analyzer,Hits,Query,Formatter).mjava","commits":[{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest].TestHighlightRunner#doStandardHighlights(Analyzer,Hits,Query,Formatter).mjava","pathOld":"/dev/null","sourceNew":"    void doStandardHighlights(Analyzer analyzer, Hits hits, Query query, Formatter formatter)\n        throws Exception {\n\n      for (int i = 0; i < hits.length(); i++) {\n        String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n        int maxNumFragmentsRequired = 2;\n        String fragmentSeparator = \"...\";\n        Scorer scorer = null;\n        TokenStream tokenStream = null;\n        if (mode == SPAN) {\n          tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n              new StringReader(text)));\n          scorer = new SpanScorer(query, HighlighterTest.FIELD_NAME,\n              (CachingTokenFilter) tokenStream);\n        } else if (mode == STANDARD) {\n          scorer = new QueryScorer(query);\n          tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n        }\n        Highlighter highlighter = new Highlighter(formatter, scorer);\n        if (mode == SPAN) {\n          ((CachingTokenFilter) tokenStream).reset();\n        }\n        highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n        String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n            fragmentSeparator);\n        System.out.println(\"\\t\" + result);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e89ac7460543b39f8de96654421e96790abaa26","date":1239329386,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest].TestHighlightRunner#doStandardHighlights(Analyzer,Hits,Query,Formatter).mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest].TestHighlightRunner#doStandardHighlights(Analyzer,Hits,Query,Formatter).mjava","sourceNew":"    void doStandardHighlights(Analyzer analyzer, Hits hits, Query query, Formatter formatter)\n    throws Exception {\n      doStandardHighlights(analyzer, hits, query, formatter, false);\n    }\n\n","sourceOld":"    void doStandardHighlights(Analyzer analyzer, Hits hits, Query query, Formatter formatter)\n        throws Exception {\n\n      for (int i = 0; i < hits.length(); i++) {\n        String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n        int maxNumFragmentsRequired = 2;\n        String fragmentSeparator = \"...\";\n        Scorer scorer = null;\n        TokenStream tokenStream = null;\n        if (mode == SPAN) {\n          tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n              new StringReader(text)));\n          scorer = new SpanScorer(query, HighlighterTest.FIELD_NAME,\n              (CachingTokenFilter) tokenStream);\n        } else if (mode == STANDARD) {\n          scorer = new QueryScorer(query);\n          tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n        }\n        Highlighter highlighter = new Highlighter(formatter, scorer);\n        if (mode == SPAN) {\n          ((CachingTokenFilter) tokenStream).reset();\n        }\n        highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n        String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n            fragmentSeparator);\n        System.out.println(\"\\t\" + result);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest].TestHighlightRunner#doStandardHighlights(Analyzer,Hits,Query,Formatter).mjava","sourceNew":null,"sourceOld":"    void doStandardHighlights(Analyzer analyzer, Hits hits, Query query, Formatter formatter)\n    throws Exception {\n      doStandardHighlights(analyzer, hits, query, formatter, false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e89ac7460543b39f8de96654421e96790abaa26":["296b8b38a87feb478921f77834a2302dfe77641c"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["1e89ac7460543b39f8de96654421e96790abaa26"],"296b8b38a87feb478921f77834a2302dfe77641c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["296b8b38a87feb478921f77834a2302dfe77641c"],"1e89ac7460543b39f8de96654421e96790abaa26":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"296b8b38a87feb478921f77834a2302dfe77641c":["1e89ac7460543b39f8de96654421e96790abaa26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}