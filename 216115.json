{"path":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#shouldCache(Query).mjava","commits":[{"id":"25f40dbcd244dc82447a23719db34376cdcc9cfe","date":1461323366,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#shouldCache(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#shouldCache(Query,LeafReaderContext).mjava","sourceNew":"  @Override\n  public boolean shouldCache(Query query) throws IOException {\n    if (query instanceof MatchAllDocsQuery\n        // MatchNoDocsQuery currently rewrites to a BooleanQuery,\n        // but who knows, it might get its own Weight one day\n        || query instanceof MatchNoDocsQuery) {\n      return false;\n    }\n    if (query instanceof BooleanQuery) {\n      BooleanQuery bq = (BooleanQuery) query;\n      if (bq.clauses().isEmpty()) {\n        return false;\n      }\n    }\n    if (query instanceof DisjunctionMaxQuery) {\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery) query;\n      if (dmq.getDisjuncts().isEmpty()) {\n        return false;\n      }\n    }\n    final int frequency = frequency(query);\n    final int minFrequency = minFrequencyToCache(query);\n    return frequency >= minFrequency;\n  }\n\n","sourceOld":"  @Override\n  public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n    if (query instanceof MatchAllDocsQuery\n        // MatchNoDocsQuery currently rewrites to a BooleanQuery,\n        // but who knows, it might get its own Weight one day\n        || query instanceof MatchNoDocsQuery) {\n      return false;\n    }\n    if (query instanceof BooleanQuery) {\n      BooleanQuery bq = (BooleanQuery) query;\n      if (bq.clauses().isEmpty()) {\n        return false;\n      }\n    }\n    if (query instanceof DisjunctionMaxQuery) {\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery) query;\n      if (dmq.getDisjuncts().isEmpty()) {\n        return false;\n      }\n    }\n    final int frequency = frequency(query);\n    final int minFrequency = minFrequencyToCache(query);\n    return frequency >= minFrequency;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#shouldCache(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#shouldCache(Query,LeafReaderContext).mjava","sourceNew":"  @Override\n  public boolean shouldCache(Query query) throws IOException {\n    if (query instanceof MatchAllDocsQuery\n        // MatchNoDocsQuery currently rewrites to a BooleanQuery,\n        // but who knows, it might get its own Weight one day\n        || query instanceof MatchNoDocsQuery) {\n      return false;\n    }\n    if (query instanceof BooleanQuery) {\n      BooleanQuery bq = (BooleanQuery) query;\n      if (bq.clauses().isEmpty()) {\n        return false;\n      }\n    }\n    if (query instanceof DisjunctionMaxQuery) {\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery) query;\n      if (dmq.getDisjuncts().isEmpty()) {\n        return false;\n      }\n    }\n    final int frequency = frequency(query);\n    final int minFrequency = minFrequencyToCache(query);\n    return frequency >= minFrequency;\n  }\n\n","sourceOld":"  @Override\n  public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n    if (query instanceof MatchAllDocsQuery\n        // MatchNoDocsQuery currently rewrites to a BooleanQuery,\n        // but who knows, it might get its own Weight one day\n        || query instanceof MatchNoDocsQuery) {\n      return false;\n    }\n    if (query instanceof BooleanQuery) {\n      BooleanQuery bq = (BooleanQuery) query;\n      if (bq.clauses().isEmpty()) {\n        return false;\n      }\n    }\n    if (query instanceof DisjunctionMaxQuery) {\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery) query;\n      if (dmq.getDisjuncts().isEmpty()) {\n        return false;\n      }\n    }\n    final int frequency = frequency(query);\n    final int minFrequency = minFrequencyToCache(query);\n    return frequency >= minFrequency;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b56b6f1da108905632f350a2fcd9545108149dbe","date":1487253427,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#shouldCache(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#shouldCache(Query).mjava","sourceNew":"  @Override\n  public boolean shouldCache(Query query) throws IOException {\n    if (shouldNeverCache(query)) {\n      return false;\n    }\n    final int frequency = frequency(query);\n    final int minFrequency = minFrequencyToCache(query);\n    return frequency >= minFrequency;\n  }\n\n","sourceOld":"  @Override\n  public boolean shouldCache(Query query) throws IOException {\n    if (query instanceof MatchAllDocsQuery\n        // MatchNoDocsQuery currently rewrites to a BooleanQuery,\n        // but who knows, it might get its own Weight one day\n        || query instanceof MatchNoDocsQuery) {\n      return false;\n    }\n    if (query instanceof BooleanQuery) {\n      BooleanQuery bq = (BooleanQuery) query;\n      if (bq.clauses().isEmpty()) {\n        return false;\n      }\n    }\n    if (query instanceof DisjunctionMaxQuery) {\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery) query;\n      if (dmq.getDisjuncts().isEmpty()) {\n        return false;\n      }\n    }\n    final int frequency = frequency(query);\n    final int minFrequency = minFrequencyToCache(query);\n    return frequency >= minFrequency;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b56b6f1da108905632f350a2fcd9545108149dbe":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","25f40dbcd244dc82447a23719db34376cdcc9cfe"],"25f40dbcd244dc82447a23719db34376cdcc9cfe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b56b6f1da108905632f350a2fcd9545108149dbe"]},"commit2Childs":{"b56b6f1da108905632f350a2fcd9545108149dbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["b56b6f1da108905632f350a2fcd9545108149dbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","25f40dbcd244dc82447a23719db34376cdcc9cfe"],"25f40dbcd244dc82447a23719db34376cdcc9cfe":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}