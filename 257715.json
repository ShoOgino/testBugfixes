{"path":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","commits":[{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","pathOld":"/dev/null","sourceNew":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5230f3091f5d18ecb95fb3527991f6fbb36041c5","5230f3091f5d18ecb95fb3527991f6fbb36041c5","5230f3091f5d18ecb95fb3527991f6fbb36041c5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","pathOld":"/dev/null","sourceNew":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","pathOld":"/dev/null","sourceNew":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","sourceNew":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","sourceOld":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","sourceNew":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","sourceOld":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","sourceNew":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","sourceOld":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","sourceNew":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","sourceOld":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","sourceNew":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","sourceOld":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","sourceNew":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","sourceOld":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}