{"path":"lucene/src/java/org/apache/lucene/search/BooleanScorer#BooleanScorer(Similarity,int,List[Scorer],List[Scorer],int).mjava","commits":[{"id":"680afea24788497408a554fb2e56812496e8c7c4","date":1282663439,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer#BooleanScorer(Similarity,int,List[Scorer],List[Scorer],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer#BooleanScorer(Similarity,int,List[Scorer],List[Scorer]).mjava","sourceNew":"  BooleanScorer(Similarity similarity, int minNrShouldMatch,\n      List<Scorer> optionalScorers, List<Scorer> prohibitedScorers, int maxCoord) throws IOException {\n    super(similarity);\n    this.minNrShouldMatch = minNrShouldMatch;\n\n    if (optionalScorers != null && optionalScorers.size() > 0) {\n      for (Scorer scorer : optionalScorers) {\n        if (scorer.nextDoc() != NO_MORE_DOCS) {\n          scorers = new SubScorer(scorer, false, false, bucketTable.newCollector(0), scorers);\n        }\n      }\n    }\n    \n    if (prohibitedScorers != null && prohibitedScorers.size() > 0) {\n      for (Scorer scorer : prohibitedScorers) {\n        int mask = nextMask;\n        nextMask = nextMask << 1;\n        prohibitedMask |= mask;                     // update prohibited mask\n        if (scorer.nextDoc() != NO_MORE_DOCS) {\n          scorers = new SubScorer(scorer, false, true, bucketTable.newCollector(mask), scorers);\n        }\n      }\n    }\n\n    coordFactors = new float[optionalScorers.size() + 1];\n    Similarity sim = getSimilarity();\n    for (int i = 0; i < coordFactors.length; i++) {\n      coordFactors[i] = sim.coord(i, maxCoord); \n    }\n  }\n\n","sourceOld":"  BooleanScorer(Similarity similarity, int minNrShouldMatch,\n      List<Scorer> optionalScorers, List<Scorer> prohibitedScorers) throws IOException {\n    super(similarity);\n    this.minNrShouldMatch = minNrShouldMatch;\n\n    if (optionalScorers != null && optionalScorers.size() > 0) {\n      for (Scorer scorer : optionalScorers) {\n        maxCoord++;\n        if (scorer.nextDoc() != NO_MORE_DOCS) {\n          scorers = new SubScorer(scorer, false, false, bucketTable.newCollector(0), scorers);\n        }\n      }\n    }\n    \n    if (prohibitedScorers != null && prohibitedScorers.size() > 0) {\n      for (Scorer scorer : prohibitedScorers) {\n        int mask = nextMask;\n        nextMask = nextMask << 1;\n        prohibitedMask |= mask;                     // update prohibited mask\n        if (scorer.nextDoc() != NO_MORE_DOCS) {\n          scorers = new SubScorer(scorer, false, true, bucketTable.newCollector(mask), scorers);\n        }\n      }\n    }\n\n    coordFactors = new float[maxCoord];\n    Similarity sim = getSimilarity();\n    for (int i = 0; i < maxCoord; i++) {\n      coordFactors[i] = sim.coord(i, maxCoord - 1); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4946500259641951dbd7f8a61956bf14bef3f60","date":1283284212,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer#BooleanScorer(Weight,Similarity,int,List[Scorer],List[Scorer],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer#BooleanScorer(Similarity,int,List[Scorer],List[Scorer],int).mjava","sourceNew":"  BooleanScorer(Weight weight, Similarity similarity, int minNrShouldMatch,\n      List<Scorer> optionalScorers, List<Scorer> prohibitedScorers, int maxCoord) throws IOException {\n    super(similarity, weight);\n    this.minNrShouldMatch = minNrShouldMatch;\n\n    if (optionalScorers != null && optionalScorers.size() > 0) {\n      for (Scorer scorer : optionalScorers) {\n        if (scorer.nextDoc() != NO_MORE_DOCS) {\n          scorers = new SubScorer(scorer, false, false, bucketTable.newCollector(0), scorers);\n        }\n      }\n    }\n    \n    if (prohibitedScorers != null && prohibitedScorers.size() > 0) {\n      for (Scorer scorer : prohibitedScorers) {\n        int mask = nextMask;\n        nextMask = nextMask << 1;\n        prohibitedMask |= mask;                     // update prohibited mask\n        if (scorer.nextDoc() != NO_MORE_DOCS) {\n          scorers = new SubScorer(scorer, false, true, bucketTable.newCollector(mask), scorers);\n        }\n      }\n    }\n\n    coordFactors = new float[optionalScorers.size() + 1];\n    Similarity sim = getSimilarity();\n    for (int i = 0; i < coordFactors.length; i++) {\n      coordFactors[i] = sim.coord(i, maxCoord); \n    }\n  }\n\n","sourceOld":"  BooleanScorer(Similarity similarity, int minNrShouldMatch,\n      List<Scorer> optionalScorers, List<Scorer> prohibitedScorers, int maxCoord) throws IOException {\n    super(similarity);\n    this.minNrShouldMatch = minNrShouldMatch;\n\n    if (optionalScorers != null && optionalScorers.size() > 0) {\n      for (Scorer scorer : optionalScorers) {\n        if (scorer.nextDoc() != NO_MORE_DOCS) {\n          scorers = new SubScorer(scorer, false, false, bucketTable.newCollector(0), scorers);\n        }\n      }\n    }\n    \n    if (prohibitedScorers != null && prohibitedScorers.size() > 0) {\n      for (Scorer scorer : prohibitedScorers) {\n        int mask = nextMask;\n        nextMask = nextMask << 1;\n        prohibitedMask |= mask;                     // update prohibited mask\n        if (scorer.nextDoc() != NO_MORE_DOCS) {\n          scorers = new SubScorer(scorer, false, true, bucketTable.newCollector(mask), scorers);\n        }\n      }\n    }\n\n    coordFactors = new float[optionalScorers.size() + 1];\n    Similarity sim = getSimilarity();\n    for (int i = 0; i < coordFactors.length; i++) {\n      coordFactors[i] = sim.coord(i, maxCoord); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"680afea24788497408a554fb2e56812496e8c7c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e4946500259641951dbd7f8a61956bf14bef3f60"],"e4946500259641951dbd7f8a61956bf14bef3f60":["680afea24788497408a554fb2e56812496e8c7c4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["680afea24788497408a554fb2e56812496e8c7c4"],"680afea24788497408a554fb2e56812496e8c7c4":["e4946500259641951dbd7f8a61956bf14bef3f60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e4946500259641951dbd7f8a61956bf14bef3f60":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}