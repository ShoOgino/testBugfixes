{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getMissingBits(FieldInfo,long,long).mjava","commits":[{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getMissingBits(FieldInfo,long,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getMissingBits(int,long,long).mjava","sourceNew":"  private Bits getMissingBits(FieldInfo field, final long offset, final long length) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      FixedBitSet instance;\n      synchronized(this) {\n        instance = docsWithFieldInstances.get(field.name);\n        if (instance == null) {\n          IndexInput data = this.data.clone();\n          data.seek(offset);\n          assert length % 8 == 0;\n          long bits[] = new long[(int) length >> 3];\n          for (int i = 0; i < bits.length; i++) {\n            bits[i] = data.readLong();\n          }\n          instance = new FixedBitSet(bits, maxDoc);\n          docsWithFieldInstances.put(field.name, instance);\n        }\n      }\n      return instance;\n    }\n  }\n\n","sourceOld":"  private Bits getMissingBits(int fieldNumber, final long offset, final long length) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      Bits instance;\n      synchronized(this) {\n        instance = docsWithFieldInstances.get(fieldNumber);\n        if (instance == null) {\n          IndexInput data = this.data.clone();\n          data.seek(offset);\n          assert length % 8 == 0;\n          long bits[] = new long[(int) length >> 3];\n          for (int i = 0; i < bits.length; i++) {\n            bits[i] = data.readLong();\n          }\n          instance = new FixedBitSet(bits, maxDoc);\n          docsWithFieldInstances.put(fieldNumber, instance);\n        }\n      }\n      return instance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getMissingBits(FieldInfo,long,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getMissingBits(FieldInfo,long,long).mjava","sourceNew":"  private Bits getMissingBits(FieldInfo field, final long offset, final long length) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      FixedBitSet instance;\n      synchronized(this) {\n        instance = docsWithFieldInstances.get(field.name);\n        if (instance == null) {\n          IndexInput data = this.data.clone();\n          data.seek(offset);\n          assert length % 8 == 0;\n          long bits[] = new long[(int) length >> 3];\n          for (int i = 0; i < bits.length; i++) {\n            bits[i] = data.readLong();\n          }\n          instance = new FixedBitSet(bits, maxDoc);\n          if (!merging) {\n            docsWithFieldInstances.put(field.name, instance);\n            ramBytesUsed.addAndGet(instance.ramBytesUsed());\n          }\n        }\n      }\n      return instance;\n    }\n  }\n\n","sourceOld":"  private Bits getMissingBits(FieldInfo field, final long offset, final long length) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      FixedBitSet instance;\n      synchronized(this) {\n        instance = docsWithFieldInstances.get(field.name);\n        if (instance == null) {\n          IndexInput data = this.data.clone();\n          data.seek(offset);\n          assert length % 8 == 0;\n          long bits[] = new long[(int) length >> 3];\n          for (int i = 0; i < bits.length; i++) {\n            bits[i] = data.readLong();\n          }\n          instance = new FixedBitSet(bits, maxDoc);\n          docsWithFieldInstances.put(field.name, instance);\n        }\n      }\n      return instance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getMissingBits(FieldInfo,long,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getMissingBits(FieldInfo,long,long).mjava","sourceNew":"  private Bits getMissingBits(FieldInfo field, final long offset, final long length) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      FixedBitSet instance;\n      synchronized(this) {\n        instance = docsWithFieldInstances.get(field.name);\n        if (instance == null) {\n          IndexInput data = this.data.clone();\n          data.seek(offset);\n          assert length % 8 == 0;\n          long bits[] = new long[(int) length >> 3];\n          for (int i = 0; i < bits.length; i++) {\n            bits[i] = data.readLong();\n          }\n          instance = new FixedBitSet(bits, maxDoc);\n          if (!merging) {\n            docsWithFieldInstances.put(field.name, instance);\n            ramBytesUsed.addAndGet(instance.ramBytesUsed());\n          }\n        }\n      }\n      return instance;\n    }\n  }\n\n","sourceOld":"  private Bits getMissingBits(FieldInfo field, final long offset, final long length) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      FixedBitSet instance;\n      synchronized(this) {\n        instance = docsWithFieldInstances.get(field.name);\n        if (instance == null) {\n          IndexInput data = this.data.clone();\n          data.seek(offset);\n          assert length % 8 == 0;\n          long bits[] = new long[(int) length >> 3];\n          for (int i = 0; i < bits.length; i++) {\n            bits[i] = data.readLong();\n          }\n          instance = new FixedBitSet(bits, maxDoc);\n          docsWithFieldInstances.put(field.name, instance);\n        }\n      }\n      return instance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f18fb78980c55a781fd9fdc505634171059b1d","date":1567674462,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getMissingBits(FieldInfo,long,long).mjava","sourceNew":null,"sourceOld":"  private Bits getMissingBits(FieldInfo field, final long offset, final long length) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      FixedBitSet instance;\n      synchronized(this) {\n        instance = docsWithFieldInstances.get(field.name);\n        if (instance == null) {\n          IndexInput data = this.data.clone();\n          data.seek(offset);\n          assert length % 8 == 0;\n          long bits[] = new long[(int) length >> 3];\n          for (int i = 0; i < bits.length; i++) {\n            bits[i] = data.readLong();\n          }\n          instance = new FixedBitSet(bits, maxDoc);\n          if (!merging) {\n            docsWithFieldInstances.put(field.name, instance);\n            ramBytesUsed.addAndGet(instance.ramBytesUsed());\n          }\n        }\n      }\n      return instance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc8f80fee115148a0e4a0574560be06b494de821":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["0936055c0eed56be3e4ae5c9db5b0e355390736a","bc8f80fee115148a0e4a0574560be06b494de821"],"74f18fb78980c55a781fd9fdc505634171059b1d":["9bb9a29a5e71a90295f175df8919802993142c9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["74f18fb78980c55a781fd9fdc505634171059b1d"]},"commit2Childs":{"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["74f18fb78980c55a781fd9fdc505634171059b1d"],"74f18fb78980c55a781fd9fdc505634171059b1d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}