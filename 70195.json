{"path":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#MMapIndexInput(RandomAccessFile,int).mjava","commits":[{"id":"68b4c6c95719e3020e407649a20b68538649beeb","date":1308055822,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#MMapIndexInput(RandomAccessFile,int).mjava","pathOld":"/dev/null","sourceNew":"    MMapIndexInput(RandomAccessFile raf, int chunkSizePower) throws IOException {\n      this.length = raf.length();\n      this.chunkSizePower = chunkSizePower;\n      this.chunkSize = 1L << chunkSizePower;\n      this.chunkSizeMask = chunkSize - 1L;\n      \n      if (chunkSizePower < 0 || chunkSizePower > 30)\n        throw new IllegalArgumentException(\"Invalid chunkSizePower used for ByteBuffer size: \" + chunkSizePower);\n      \n      if ((length >>> chunkSizePower) >= Integer.MAX_VALUE)\n        throw new IllegalArgumentException(\"RandomAccessFile too big for chunk size: \" + raf.toString());\n      \n      // we always allocate one more buffer, the last one may be a 0 byte one\n      final int nrBuffers = (int) (length >>> chunkSizePower) + 1;\n      \n      //System.out.println(\"length=\"+length+\", chunkSizePower=\" + chunkSizePower + \", chunkSizeMask=\" + chunkSizeMask + \", nrBuffers=\" + nrBuffers);\n      \n      this.buffers = new ByteBuffer[nrBuffers];\n      \n      long bufferStart = 0L;\n      FileChannel rafc = raf.getChannel();\n      for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n        int bufSize = (int) ( (length > (bufferStart + chunkSize))\n          ? chunkSize\n          : (length - bufferStart)\n        );\n        this.buffers[bufNr] = rafc.map(MapMode.READ_ONLY, bufferStart, bufSize);\n        bufferStart += bufSize;\n      }\n      seek(0L);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#MMapIndexInput(RandomAccessFile,int).mjava","pathOld":"/dev/null","sourceNew":"    MMapIndexInput(RandomAccessFile raf, int chunkSizePower) throws IOException {\n      this.length = raf.length();\n      this.chunkSizePower = chunkSizePower;\n      this.chunkSize = 1L << chunkSizePower;\n      this.chunkSizeMask = chunkSize - 1L;\n      \n      if (chunkSizePower < 0 || chunkSizePower > 30)\n        throw new IllegalArgumentException(\"Invalid chunkSizePower used for ByteBuffer size: \" + chunkSizePower);\n      \n      if ((length >>> chunkSizePower) >= Integer.MAX_VALUE)\n        throw new IllegalArgumentException(\"RandomAccessFile too big for chunk size: \" + raf.toString());\n      \n      // we always allocate one more buffer, the last one may be a 0 byte one\n      final int nrBuffers = (int) (length >>> chunkSizePower) + 1;\n      \n      //System.out.println(\"length=\"+length+\", chunkSizePower=\" + chunkSizePower + \", chunkSizeMask=\" + chunkSizeMask + \", nrBuffers=\" + nrBuffers);\n      \n      this.buffers = new ByteBuffer[nrBuffers];\n      \n      long bufferStart = 0L;\n      FileChannel rafc = raf.getChannel();\n      for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n        int bufSize = (int) ( (length > (bufferStart + chunkSize))\n          ? chunkSize\n          : (length - bufferStart)\n        );\n        this.buffers[bufNr] = rafc.map(MapMode.READ_ONLY, bufferStart, bufSize);\n        bufferStart += bufSize;\n      }\n      seek(0L);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0aab6e810b4b0d3743d6a048be0602801f4b3920","date":1308671625,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#MMapIndexInput(RandomAccessFile,long,long,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#MMapIndexInput(RandomAccessFile,int).mjava","sourceNew":"    MMapIndexInput(RandomAccessFile raf, long offset, long length, int chunkSizePower) throws IOException {\n      this.length = length;\n      this.chunkSizePower = chunkSizePower;\n      this.chunkSize = 1L << chunkSizePower;\n      this.chunkSizeMask = chunkSize - 1L;\n      \n      if (chunkSizePower < 0 || chunkSizePower > 30)\n        throw new IllegalArgumentException(\"Invalid chunkSizePower used for ByteBuffer size: \" + chunkSizePower);\n      \n      if ((length >>> chunkSizePower) >= Integer.MAX_VALUE)\n        throw new IllegalArgumentException(\"RandomAccessFile too big for chunk size: \" + raf.toString());\n      \n      // we always allocate one more buffer, the last one may be a 0 byte one\n      final int nrBuffers = (int) (length >>> chunkSizePower) + 1;\n      \n      //System.out.println(\"length=\"+length+\", chunkSizePower=\" + chunkSizePower + \", chunkSizeMask=\" + chunkSizeMask + \", nrBuffers=\" + nrBuffers);\n      \n      this.buffers = new ByteBuffer[nrBuffers];\n      \n      long bufferStart = 0L;\n      FileChannel rafc = raf.getChannel();\n      for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n        int bufSize = (int) ( (length > (bufferStart + chunkSize))\n          ? chunkSize\n          : (length - bufferStart)\n        );\n        this.buffers[bufNr] = rafc.map(MapMode.READ_ONLY, offset + bufferStart, bufSize);\n        bufferStart += bufSize;\n      }\n      seek(0L);\n    }\n\n","sourceOld":"    MMapIndexInput(RandomAccessFile raf, int chunkSizePower) throws IOException {\n      this.length = raf.length();\n      this.chunkSizePower = chunkSizePower;\n      this.chunkSize = 1L << chunkSizePower;\n      this.chunkSizeMask = chunkSize - 1L;\n      \n      if (chunkSizePower < 0 || chunkSizePower > 30)\n        throw new IllegalArgumentException(\"Invalid chunkSizePower used for ByteBuffer size: \" + chunkSizePower);\n      \n      if ((length >>> chunkSizePower) >= Integer.MAX_VALUE)\n        throw new IllegalArgumentException(\"RandomAccessFile too big for chunk size: \" + raf.toString());\n      \n      // we always allocate one more buffer, the last one may be a 0 byte one\n      final int nrBuffers = (int) (length >>> chunkSizePower) + 1;\n      \n      //System.out.println(\"length=\"+length+\", chunkSizePower=\" + chunkSizePower + \", chunkSizeMask=\" + chunkSizeMask + \", nrBuffers=\" + nrBuffers);\n      \n      this.buffers = new ByteBuffer[nrBuffers];\n      \n      long bufferStart = 0L;\n      FileChannel rafc = raf.getChannel();\n      for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n        int bufSize = (int) ( (length > (bufferStart + chunkSize))\n          ? chunkSize\n          : (length - bufferStart)\n        );\n        this.buffers[bufNr] = rafc.map(MapMode.READ_ONLY, bufferStart, bufSize);\n        bufferStart += bufSize;\n      }\n      seek(0L);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#MMapIndexInput(RandomAccessFile,long,long,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#MMapIndexInput(RandomAccessFile,int).mjava","sourceNew":"    MMapIndexInput(RandomAccessFile raf, long offset, long length, int chunkSizePower) throws IOException {\n      this.length = length;\n      this.chunkSizePower = chunkSizePower;\n      this.chunkSize = 1L << chunkSizePower;\n      this.chunkSizeMask = chunkSize - 1L;\n      \n      if (chunkSizePower < 0 || chunkSizePower > 30)\n        throw new IllegalArgumentException(\"Invalid chunkSizePower used for ByteBuffer size: \" + chunkSizePower);\n      \n      if ((length >>> chunkSizePower) >= Integer.MAX_VALUE)\n        throw new IllegalArgumentException(\"RandomAccessFile too big for chunk size: \" + raf.toString());\n      \n      // we always allocate one more buffer, the last one may be a 0 byte one\n      final int nrBuffers = (int) (length >>> chunkSizePower) + 1;\n      \n      //System.out.println(\"length=\"+length+\", chunkSizePower=\" + chunkSizePower + \", chunkSizeMask=\" + chunkSizeMask + \", nrBuffers=\" + nrBuffers);\n      \n      this.buffers = new ByteBuffer[nrBuffers];\n      \n      long bufferStart = 0L;\n      FileChannel rafc = raf.getChannel();\n      for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n        int bufSize = (int) ( (length > (bufferStart + chunkSize))\n          ? chunkSize\n          : (length - bufferStart)\n        );\n        this.buffers[bufNr] = rafc.map(MapMode.READ_ONLY, offset + bufferStart, bufSize);\n        bufferStart += bufSize;\n      }\n      seek(0L);\n    }\n\n","sourceOld":"    MMapIndexInput(RandomAccessFile raf, int chunkSizePower) throws IOException {\n      this.length = raf.length();\n      this.chunkSizePower = chunkSizePower;\n      this.chunkSize = 1L << chunkSizePower;\n      this.chunkSizeMask = chunkSize - 1L;\n      \n      if (chunkSizePower < 0 || chunkSizePower > 30)\n        throw new IllegalArgumentException(\"Invalid chunkSizePower used for ByteBuffer size: \" + chunkSizePower);\n      \n      if ((length >>> chunkSizePower) >= Integer.MAX_VALUE)\n        throw new IllegalArgumentException(\"RandomAccessFile too big for chunk size: \" + raf.toString());\n      \n      // we always allocate one more buffer, the last one may be a 0 byte one\n      final int nrBuffers = (int) (length >>> chunkSizePower) + 1;\n      \n      //System.out.println(\"length=\"+length+\", chunkSizePower=\" + chunkSizePower + \", chunkSizeMask=\" + chunkSizeMask + \", nrBuffers=\" + nrBuffers);\n      \n      this.buffers = new ByteBuffer[nrBuffers];\n      \n      long bufferStart = 0L;\n      FileChannel rafc = raf.getChannel();\n      for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n        int bufSize = (int) ( (length > (bufferStart + chunkSize))\n          ? chunkSize\n          : (length - bufferStart)\n        );\n        this.buffers[bufNr] = rafc.map(MapMode.READ_ONLY, bufferStart, bufSize);\n        bufferStart += bufSize;\n      }\n      seek(0L);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#MMapIndexInput(RandomAccessFile,int).mjava","sourceNew":null,"sourceOld":"    MMapIndexInput(RandomAccessFile raf, int chunkSizePower) throws IOException {\n      this.length = raf.length();\n      this.chunkSizePower = chunkSizePower;\n      this.chunkSize = 1L << chunkSizePower;\n      this.chunkSizeMask = chunkSize - 1L;\n      \n      if (chunkSizePower < 0 || chunkSizePower > 30)\n        throw new IllegalArgumentException(\"Invalid chunkSizePower used for ByteBuffer size: \" + chunkSizePower);\n      \n      if ((length >>> chunkSizePower) >= Integer.MAX_VALUE)\n        throw new IllegalArgumentException(\"RandomAccessFile too big for chunk size: \" + raf.toString());\n      \n      // we always allocate one more buffer, the last one may be a 0 byte one\n      final int nrBuffers = (int) (length >>> chunkSizePower) + 1;\n      \n      //System.out.println(\"length=\"+length+\", chunkSizePower=\" + chunkSizePower + \", chunkSizeMask=\" + chunkSizeMask + \", nrBuffers=\" + nrBuffers);\n      \n      this.buffers = new ByteBuffer[nrBuffers];\n      \n      long bufferStart = 0L;\n      FileChannel rafc = raf.getChannel();\n      for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n        int bufSize = (int) ( (length > (bufferStart + chunkSize))\n          ? chunkSize\n          : (length - bufferStart)\n        );\n        this.buffers[bufNr] = rafc.map(MapMode.READ_ONLY, bufferStart, bufSize);\n        bufferStart += bufSize;\n      }\n      seek(0L);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"68b4c6c95719e3020e407649a20b68538649beeb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["68b4c6c95719e3020e407649a20b68538649beeb"],"2553b00f699380c64959ccb27991289aae87be2e":["9ed208afa1e7aa98899ddb1dedfddedddf898253","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["68b4c6c95719e3020e407649a20b68538649beeb","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","68b4c6c95719e3020e407649a20b68538649beeb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0aab6e810b4b0d3743d6a048be0602801f4b3920"]},"commit2Childs":{"68b4c6c95719e3020e407649a20b68538649beeb":["0aab6e810b4b0d3743d6a048be0602801f4b3920","d083e83f225b11e5fdd900e83d26ddb385b6955c","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68b4c6c95719e3020e407649a20b68538649beeb","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2553b00f699380c64959ccb27991289aae87be2e":[],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["2553b00f699380c64959ccb27991289aae87be2e"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}