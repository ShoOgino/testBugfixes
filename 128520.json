{"path":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testNodeAdded().mjava","commits":[{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testNodeAdded().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests that when a new node is added to the cluster and autoscaling framework\n   * moves replicas to the new node, we maintain all co-locating guarantees\n   */\n  public void testNodeAdded() throws Exception  {\n    String prefix = \"testNodeAdded\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getRandomJetty(random()).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode, abc);\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode) // randomize to avoid choosing the first node always\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    DocCollection collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    assertEquals(chosenNode, collection.getReplicas().iterator().next().getNodeName());\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'actions' : [\" +\n        \"{'name' : 'compute', 'class' : '\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name' : 'execute', 'class' : '\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name' : 'compute', 'class' : '\" + CapturingAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    solrClient.request(req);\n\n    Optional<JettySolrRunner> other = cluster.getJettySolrRunners()\n        .stream().filter(j -> !chosenNode.equals(j.getNodeName())).findAny();\n    String otherNode = other.orElseThrow(AssertionError::new).getNodeName();\n\n    // add an extra replica of abc collection on a different node\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(abc, \"shard1\")\n        .setNode(otherNode);\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    DocCollection withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    // sanity check\n    assertColocated(collection, otherNode, withCollection);\n\n    assertEquals(1, collection.getReplicas().size());\n    Replica xyzReplica = collection.getReplicas().get(0);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    assertTrue(\"Action was not fired till 30 seconds\", LATCH.await(30, TimeUnit.SECONDS));\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    // sanity check\n    assertColocated(collection, otherNode, withCollection);\n\n    // assert that the replica of xyz collection was not moved\n    assertNotNull(collection.getReplica(xyzReplica.getName()));\n    assertEquals(chosenNode, collection.getReplicas().get(0).getNodeName());\n\n    // add an extra replica of xyz collection -- this should be placed on the 'otherNode'\n    addReplica = CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\");\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    List<Replica> replicas = collection.getReplicas(otherNode);\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n    replicas = withCollection.getReplicas(otherNode);\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n\n    // add an extra replica of xyz collection -- this should be placed on the 'newNode'\n    addReplica = CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\");\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    assertNotNull(collection.getReplicas(newNode.getNodeName()));\n    replicas = collection.getReplicas(newNode.getNodeName());\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n    replicas = withCollection.getReplicas(newNode.getNodeName());\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14076e7b40405aa1f08702d8df762d08b5d44f70","date":1537071979,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testNodeAdded().mjava","sourceNew":"  /**\n   * Tests that when a new node is added to the cluster and autoscaling framework\n   * moves replicas to the new node, we maintain all co-locating guarantees\n   */\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 15-Sep-2018\n  public void testNodeAdded() throws Exception  {\n    String prefix = \"testNodeAdded\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getRandomJetty(random()).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode, abc);\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode) // randomize to avoid choosing the first node always\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    DocCollection collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    assertEquals(chosenNode, collection.getReplicas().iterator().next().getNodeName());\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'actions' : [\" +\n        \"{'name' : 'compute', 'class' : '\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name' : 'execute', 'class' : '\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name' : 'compute', 'class' : '\" + CapturingAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    solrClient.request(req);\n\n    Optional<JettySolrRunner> other = cluster.getJettySolrRunners()\n        .stream().filter(j -> !chosenNode.equals(j.getNodeName())).findAny();\n    String otherNode = other.orElseThrow(AssertionError::new).getNodeName();\n\n    // add an extra replica of abc collection on a different node\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(abc, \"shard1\")\n        .setNode(otherNode);\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    DocCollection withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    // sanity check\n    assertColocated(collection, otherNode, withCollection);\n\n    assertEquals(1, collection.getReplicas().size());\n    Replica xyzReplica = collection.getReplicas().get(0);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    assertTrue(\"Action was not fired till 30 seconds\", LATCH.await(30, TimeUnit.SECONDS));\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    // sanity check\n    assertColocated(collection, otherNode, withCollection);\n\n    // assert that the replica of xyz collection was not moved\n    assertNotNull(collection.getReplica(xyzReplica.getName()));\n    assertEquals(chosenNode, collection.getReplicas().get(0).getNodeName());\n\n    // add an extra replica of xyz collection -- this should be placed on the 'otherNode'\n    addReplica = CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\");\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    List<Replica> replicas = collection.getReplicas(otherNode);\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n    replicas = withCollection.getReplicas(otherNode);\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n\n    // add an extra replica of xyz collection -- this should be placed on the 'newNode'\n    addReplica = CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\");\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    assertNotNull(collection.getReplicas(newNode.getNodeName()));\n    replicas = collection.getReplicas(newNode.getNodeName());\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n    replicas = withCollection.getReplicas(newNode.getNodeName());\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n  }\n\n","sourceOld":"  /**\n   * Tests that when a new node is added to the cluster and autoscaling framework\n   * moves replicas to the new node, we maintain all co-locating guarantees\n   */\n  public void testNodeAdded() throws Exception  {\n    String prefix = \"testNodeAdded\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getRandomJetty(random()).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode, abc);\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode) // randomize to avoid choosing the first node always\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    DocCollection collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    assertEquals(chosenNode, collection.getReplicas().iterator().next().getNodeName());\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'actions' : [\" +\n        \"{'name' : 'compute', 'class' : '\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name' : 'execute', 'class' : '\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name' : 'compute', 'class' : '\" + CapturingAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    solrClient.request(req);\n\n    Optional<JettySolrRunner> other = cluster.getJettySolrRunners()\n        .stream().filter(j -> !chosenNode.equals(j.getNodeName())).findAny();\n    String otherNode = other.orElseThrow(AssertionError::new).getNodeName();\n\n    // add an extra replica of abc collection on a different node\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(abc, \"shard1\")\n        .setNode(otherNode);\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    DocCollection withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    // sanity check\n    assertColocated(collection, otherNode, withCollection);\n\n    assertEquals(1, collection.getReplicas().size());\n    Replica xyzReplica = collection.getReplicas().get(0);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    assertTrue(\"Action was not fired till 30 seconds\", LATCH.await(30, TimeUnit.SECONDS));\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    // sanity check\n    assertColocated(collection, otherNode, withCollection);\n\n    // assert that the replica of xyz collection was not moved\n    assertNotNull(collection.getReplica(xyzReplica.getName()));\n    assertEquals(chosenNode, collection.getReplicas().get(0).getNodeName());\n\n    // add an extra replica of xyz collection -- this should be placed on the 'otherNode'\n    addReplica = CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\");\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    List<Replica> replicas = collection.getReplicas(otherNode);\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n    replicas = withCollection.getReplicas(otherNode);\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n\n    // add an extra replica of xyz collection -- this should be placed on the 'newNode'\n    addReplica = CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\");\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    assertNotNull(collection.getReplicas(newNode.getNodeName()));\n    replicas = collection.getReplicas(newNode.getNodeName());\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n    replicas = withCollection.getReplicas(newNode.getNodeName());\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testNodeAdded().mjava","sourceNew":"  /**\n   * Tests that when a new node is added to the cluster and autoscaling framework\n   * moves replicas to the new node, we maintain all co-locating guarantees\n   */\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 15-Sep-2018\n  public void testNodeAdded() throws Exception  {\n    String prefix = \"testNodeAdded\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getRandomJetty(random()).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode, abc);\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode) // randomize to avoid choosing the first node always\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    DocCollection collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    assertEquals(chosenNode, collection.getReplicas().iterator().next().getNodeName());\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'actions' : [\" +\n        \"{'name' : 'compute', 'class' : '\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name' : 'execute', 'class' : '\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name' : 'compute', 'class' : '\" + CapturingAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    solrClient.request(req);\n\n    Optional<JettySolrRunner> other = cluster.getJettySolrRunners()\n        .stream().filter(j -> !chosenNode.equals(j.getNodeName())).findAny();\n    String otherNode = other.orElseThrow(AssertionError::new).getNodeName();\n\n    // add an extra replica of abc collection on a different node\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(abc, \"shard1\")\n        .setNode(otherNode);\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    DocCollection withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    // sanity check\n    assertColocated(collection, otherNode, withCollection);\n\n    assertEquals(1, collection.getReplicas().size());\n    Replica xyzReplica = collection.getReplicas().get(0);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    assertTrue(\"Action was not fired till 30 seconds\", LATCH.await(30, TimeUnit.SECONDS));\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    // sanity check\n    assertColocated(collection, otherNode, withCollection);\n\n    // assert that the replica of xyz collection was not moved\n    assertNotNull(collection.getReplica(xyzReplica.getName()));\n    assertEquals(chosenNode, collection.getReplicas().get(0).getNodeName());\n\n    // add an extra replica of xyz collection -- this should be placed on the 'otherNode'\n    addReplica = CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\");\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    List<Replica> replicas = collection.getReplicas(otherNode);\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n    replicas = withCollection.getReplicas(otherNode);\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n\n    // add an extra replica of xyz collection -- this should be placed on the 'newNode'\n    addReplica = CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\");\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    assertNotNull(collection.getReplicas(newNode.getNodeName()));\n    replicas = collection.getReplicas(newNode.getNodeName());\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n    replicas = withCollection.getReplicas(newNode.getNodeName());\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n  }\n\n","sourceOld":"  /**\n   * Tests that when a new node is added to the cluster and autoscaling framework\n   * moves replicas to the new node, we maintain all co-locating guarantees\n   */\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 15-Sep-2018\n  public void testNodeAdded() throws Exception  {\n    String prefix = \"testNodeAdded\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getRandomJetty(random()).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode, abc);\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode) // randomize to avoid choosing the first node always\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    DocCollection collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    assertEquals(chosenNode, collection.getReplicas().iterator().next().getNodeName());\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'actions' : [\" +\n        \"{'name' : 'compute', 'class' : '\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name' : 'execute', 'class' : '\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name' : 'compute', 'class' : '\" + CapturingAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    solrClient.request(req);\n\n    Optional<JettySolrRunner> other = cluster.getJettySolrRunners()\n        .stream().filter(j -> !chosenNode.equals(j.getNodeName())).findAny();\n    String otherNode = other.orElseThrow(AssertionError::new).getNodeName();\n\n    // add an extra replica of abc collection on a different node\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(abc, \"shard1\")\n        .setNode(otherNode);\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    DocCollection withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    // sanity check\n    assertColocated(collection, otherNode, withCollection);\n\n    assertEquals(1, collection.getReplicas().size());\n    Replica xyzReplica = collection.getReplicas().get(0);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    assertTrue(\"Action was not fired till 30 seconds\", LATCH.await(30, TimeUnit.SECONDS));\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    // sanity check\n    assertColocated(collection, otherNode, withCollection);\n\n    // assert that the replica of xyz collection was not moved\n    assertNotNull(collection.getReplica(xyzReplica.getName()));\n    assertEquals(chosenNode, collection.getReplicas().get(0).getNodeName());\n\n    // add an extra replica of xyz collection -- this should be placed on the 'otherNode'\n    addReplica = CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\");\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    List<Replica> replicas = collection.getReplicas(otherNode);\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n    replicas = withCollection.getReplicas(otherNode);\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n\n    // add an extra replica of xyz collection -- this should be placed on the 'newNode'\n    addReplica = CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\");\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    assertNotNull(collection.getReplicas(newNode.getNodeName()));\n    replicas = collection.getReplicas(newNode.getNodeName());\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n    replicas = withCollection.getReplicas(newNode.getNodeName());\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b20c6095d6927417de0b4b8161d5b79675ccb906","date":1554136053,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testNodeAdded().mjava","sourceNew":"  /**\n   * Tests that when a new node is added to the cluster and autoscaling framework\n   * moves replicas to the new node, we maintain all co-locating guarantees\n   */\n  // commented out on: 01-Apr-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 15-Sep-2018\n  public void testNodeAdded() throws Exception  {\n    String prefix = \"testNodeAdded\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getRandomJetty(random()).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode, abc);\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode) // randomize to avoid choosing the first node always\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    DocCollection collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    assertEquals(chosenNode, collection.getReplicas().iterator().next().getNodeName());\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'actions' : [\" +\n        \"{'name' : 'compute', 'class' : '\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name' : 'execute', 'class' : '\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name' : 'compute', 'class' : '\" + CapturingAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    solrClient.request(req);\n\n    Optional<JettySolrRunner> other = cluster.getJettySolrRunners()\n        .stream().filter(j -> !chosenNode.equals(j.getNodeName())).findAny();\n    String otherNode = other.orElseThrow(AssertionError::new).getNodeName();\n\n    // add an extra replica of abc collection on a different node\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(abc, \"shard1\")\n        .setNode(otherNode);\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    DocCollection withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    // sanity check\n    assertColocated(collection, otherNode, withCollection);\n\n    assertEquals(1, collection.getReplicas().size());\n    Replica xyzReplica = collection.getReplicas().get(0);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    assertTrue(\"Action was not fired till 30 seconds\", LATCH.await(30, TimeUnit.SECONDS));\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    // sanity check\n    assertColocated(collection, otherNode, withCollection);\n\n    // assert that the replica of xyz collection was not moved\n    assertNotNull(collection.getReplica(xyzReplica.getName()));\n    assertEquals(chosenNode, collection.getReplicas().get(0).getNodeName());\n\n    // add an extra replica of xyz collection -- this should be placed on the 'otherNode'\n    addReplica = CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\");\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    List<Replica> replicas = collection.getReplicas(otherNode);\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n    replicas = withCollection.getReplicas(otherNode);\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n\n    // add an extra replica of xyz collection -- this should be placed on the 'newNode'\n    addReplica = CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\");\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    assertNotNull(collection.getReplicas(newNode.getNodeName()));\n    replicas = collection.getReplicas(newNode.getNodeName());\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n    replicas = withCollection.getReplicas(newNode.getNodeName());\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n  }\n\n","sourceOld":"  /**\n   * Tests that when a new node is added to the cluster and autoscaling framework\n   * moves replicas to the new node, we maintain all co-locating guarantees\n   */\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 15-Sep-2018\n  public void testNodeAdded() throws Exception  {\n    String prefix = \"testNodeAdded\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getRandomJetty(random()).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode, abc);\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode) // randomize to avoid choosing the first node always\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    DocCollection collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    assertEquals(chosenNode, collection.getReplicas().iterator().next().getNodeName());\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'actions' : [\" +\n        \"{'name' : 'compute', 'class' : '\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name' : 'execute', 'class' : '\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name' : 'compute', 'class' : '\" + CapturingAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    solrClient.request(req);\n\n    Optional<JettySolrRunner> other = cluster.getJettySolrRunners()\n        .stream().filter(j -> !chosenNode.equals(j.getNodeName())).findAny();\n    String otherNode = other.orElseThrow(AssertionError::new).getNodeName();\n\n    // add an extra replica of abc collection on a different node\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(abc, \"shard1\")\n        .setNode(otherNode);\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    DocCollection withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    // sanity check\n    assertColocated(collection, otherNode, withCollection);\n\n    assertEquals(1, collection.getReplicas().size());\n    Replica xyzReplica = collection.getReplicas().get(0);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    assertTrue(\"Action was not fired till 30 seconds\", LATCH.await(30, TimeUnit.SECONDS));\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    // sanity check\n    assertColocated(collection, otherNode, withCollection);\n\n    // assert that the replica of xyz collection was not moved\n    assertNotNull(collection.getReplica(xyzReplica.getName()));\n    assertEquals(chosenNode, collection.getReplicas().get(0).getNodeName());\n\n    // add an extra replica of xyz collection -- this should be placed on the 'otherNode'\n    addReplica = CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\");\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    List<Replica> replicas = collection.getReplicas(otherNode);\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n    replicas = withCollection.getReplicas(otherNode);\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n\n    // add an extra replica of xyz collection -- this should be placed on the 'newNode'\n    addReplica = CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\");\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    assertNotNull(collection.getReplicas(newNode.getNodeName()));\n    replicas = collection.getReplicas(newNode.getNodeName());\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n    replicas = withCollection.getReplicas(newNode.getNodeName());\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testNodeAdded().mjava","sourceNew":"  /**\n   * Tests that when a new node is added to the cluster and autoscaling framework\n   * moves replicas to the new node, we maintain all co-locating guarantees\n   */\n  // commented out on: 01-Apr-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 15-Sep-2018\n  public void testNodeAdded() throws Exception  {\n    String prefix = \"testNodeAdded\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getRandomJetty(random()).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode, abc);\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode) // randomize to avoid choosing the first node always\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    DocCollection collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    assertEquals(chosenNode, collection.getReplicas().iterator().next().getNodeName());\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'actions' : [\" +\n        \"{'name' : 'compute', 'class' : '\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name' : 'execute', 'class' : '\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name' : 'compute', 'class' : '\" + CapturingAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    solrClient.request(req);\n\n    Optional<JettySolrRunner> other = cluster.getJettySolrRunners()\n        .stream().filter(j -> !chosenNode.equals(j.getNodeName())).findAny();\n    String otherNode = other.orElseThrow(AssertionError::new).getNodeName();\n\n    // add an extra replica of abc collection on a different node\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(abc, \"shard1\")\n        .setNode(otherNode);\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    DocCollection withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    // sanity check\n    assertColocated(collection, otherNode, withCollection);\n\n    assertEquals(1, collection.getReplicas().size());\n    Replica xyzReplica = collection.getReplicas().get(0);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    assertTrue(\"Action was not fired till 30 seconds\", LATCH.await(30, TimeUnit.SECONDS));\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    // sanity check\n    assertColocated(collection, otherNode, withCollection);\n\n    // assert that the replica of xyz collection was not moved\n    assertNotNull(collection.getReplica(xyzReplica.getName()));\n    assertEquals(chosenNode, collection.getReplicas().get(0).getNodeName());\n\n    // add an extra replica of xyz collection -- this should be placed on the 'otherNode'\n    addReplica = CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\");\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    List<Replica> replicas = collection.getReplicas(otherNode);\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n    replicas = withCollection.getReplicas(otherNode);\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n\n    // add an extra replica of xyz collection -- this should be placed on the 'newNode'\n    addReplica = CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\");\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    assertNotNull(collection.getReplicas(newNode.getNodeName()));\n    replicas = collection.getReplicas(newNode.getNodeName());\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n    replicas = withCollection.getReplicas(newNode.getNodeName());\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n  }\n\n","sourceOld":"  /**\n   * Tests that when a new node is added to the cluster and autoscaling framework\n   * moves replicas to the new node, we maintain all co-locating guarantees\n   */\n  // commented out on: 01-Apr-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 15-Sep-2018\n  public void testNodeAdded() throws Exception  {\n    String prefix = \"testNodeAdded\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getRandomJetty(random()).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode, abc);\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode) // randomize to avoid choosing the first node always\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    DocCollection collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    assertEquals(chosenNode, collection.getReplicas().iterator().next().getNodeName());\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'actions' : [\" +\n        \"{'name' : 'compute', 'class' : '\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name' : 'execute', 'class' : '\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name' : 'compute', 'class' : '\" + CapturingAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    solrClient.request(req);\n\n    Optional<JettySolrRunner> other = cluster.getJettySolrRunners()\n        .stream().filter(j -> !chosenNode.equals(j.getNodeName())).findAny();\n    String otherNode = other.orElseThrow(AssertionError::new).getNodeName();\n\n    // add an extra replica of abc collection on a different node\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(abc, \"shard1\")\n        .setNode(otherNode);\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    DocCollection withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    // sanity check\n    assertColocated(collection, otherNode, withCollection);\n\n    assertEquals(1, collection.getReplicas().size());\n    Replica xyzReplica = collection.getReplicas().get(0);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    assertTrue(\"Action was not fired till 30 seconds\", LATCH.await(30, TimeUnit.SECONDS));\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    // sanity check\n    assertColocated(collection, otherNode, withCollection);\n\n    // assert that the replica of xyz collection was not moved\n    assertNotNull(collection.getReplica(xyzReplica.getName()));\n    assertEquals(chosenNode, collection.getReplicas().get(0).getNodeName());\n\n    // add an extra replica of xyz collection -- this should be placed on the 'otherNode'\n    addReplica = CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\");\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    List<Replica> replicas = collection.getReplicas(otherNode);\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n    replicas = withCollection.getReplicas(otherNode);\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n\n    // add an extra replica of xyz collection -- this should be placed on the 'newNode'\n    addReplica = CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\");\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    assertNotNull(collection.getReplicas(newNode.getNodeName()));\n    replicas = collection.getReplicas(newNode.getNodeName());\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n    replicas = withCollection.getReplicas(newNode.getNodeName());\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testNodeAdded().mjava","sourceNew":null,"sourceOld":"  /**\n   * Tests that when a new node is added to the cluster and autoscaling framework\n   * moves replicas to the new node, we maintain all co-locating guarantees\n   */\n  // commented out on: 01-Apr-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 15-Sep-2018\n  public void testNodeAdded() throws Exception  {\n    String prefix = \"testNodeAdded\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getRandomJetty(random()).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode, abc);\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode) // randomize to avoid choosing the first node always\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    DocCollection collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    assertEquals(chosenNode, collection.getReplicas().iterator().next().getNodeName());\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'actions' : [\" +\n        \"{'name' : 'compute', 'class' : '\" + ComputePlanAction.class.getName() + \"'}\" +\n        \"{'name' : 'execute', 'class' : '\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"{'name' : 'compute', 'class' : '\" + CapturingAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    solrClient.request(req);\n\n    Optional<JettySolrRunner> other = cluster.getJettySolrRunners()\n        .stream().filter(j -> !chosenNode.equals(j.getNodeName())).findAny();\n    String otherNode = other.orElseThrow(AssertionError::new).getNodeName();\n\n    // add an extra replica of abc collection on a different node\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(abc, \"shard1\")\n        .setNode(otherNode);\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    DocCollection withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    // sanity check\n    assertColocated(collection, otherNode, withCollection);\n\n    assertEquals(1, collection.getReplicas().size());\n    Replica xyzReplica = collection.getReplicas().get(0);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    assertTrue(\"Action was not fired till 30 seconds\", LATCH.await(30, TimeUnit.SECONDS));\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    // sanity check\n    assertColocated(collection, otherNode, withCollection);\n\n    // assert that the replica of xyz collection was not moved\n    assertNotNull(collection.getReplica(xyzReplica.getName()));\n    assertEquals(chosenNode, collection.getReplicas().get(0).getNodeName());\n\n    // add an extra replica of xyz collection -- this should be placed on the 'otherNode'\n    addReplica = CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\");\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    List<Replica> replicas = collection.getReplicas(otherNode);\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n    replicas = withCollection.getReplicas(otherNode);\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n\n    // add an extra replica of xyz collection -- this should be placed on the 'newNode'\n    addReplica = CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\");\n    addReplica.setWaitForFinalState(true);\n    addReplica.process(solrClient);\n\n    // refresh\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n\n    assertNotNull(collection.getReplicas(newNode.getNodeName()));\n    replicas = collection.getReplicas(newNode.getNodeName());\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n    replicas = withCollection.getReplicas(newNode.getNodeName());\n    assertNotNull(replicas);\n    assertEquals(1, replicas.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["b20c6095d6927417de0b4b8161d5b79675ccb906"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"b20c6095d6927417de0b4b8161d5b79675ccb906":["89948af0461fead48f44ba8fb7866f107ce83f22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"14076e7b40405aa1f08702d8df762d08b5d44f70":["27639bb5e041490ce599065875dd2f6d8beef62a"],"89948af0461fead48f44ba8fb7866f107ce83f22":["14076e7b40405aa1f08702d8df762d08b5d44f70"],"27639bb5e041490ce599065875dd2f6d8beef62a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"b20c6095d6927417de0b4b8161d5b79675ccb906":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27639bb5e041490ce599065875dd2f6d8beef62a"],"14076e7b40405aa1f08702d8df762d08b5d44f70":["89948af0461fead48f44ba8fb7866f107ce83f22"],"89948af0461fead48f44ba8fb7866f107ce83f22":["b20c6095d6927417de0b4b8161d5b79675ccb906"],"27639bb5e041490ce599065875dd2f6d8beef62a":["14076e7b40405aa1f08702d8df762d08b5d44f70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}