{"path":"solr/core/src/test/org/apache/solr/handler/admin/SegmentsInfoRequestHandlerTest#beforeClass().mjava","commits":[{"id":"26db0fd7da61a97dcbf4558f4fd1ebed330bbd45","date":1425862488,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/SegmentsInfoRequestHandlerTest#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    System.setProperty(\"enable.update.log\", \"false\");\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5db0480cb3badd72054fca072cbc35e8fa656ae2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/SegmentsInfoRequestHandlerTest#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    System.setProperty(\"enable.update.log\", \"false\");\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67b008414df14724ab7e4788787d28c65a1ac59e","date":1482345687,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/SegmentsInfoRequestHandlerTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/SegmentsInfoRequestHandlerTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    System.setProperty(\"enable.update.log\", \"false\");\n    System.setProperty(\"solr.tests.useMergePolicy\", \"false\");\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    System.setProperty(\"enable.update.log\", \"false\");\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n  }\n\n","bugFix":null,"bugIntro":["5db0480cb3badd72054fca072cbc35e8fa656ae2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/SegmentsInfoRequestHandlerTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/SegmentsInfoRequestHandlerTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    System.setProperty(\"enable.update.log\", \"false\");\n    System.setProperty(\"solr.tests.useMergePolicy\", \"false\");\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    System.setProperty(\"enable.update.log\", \"false\");\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5db0480cb3badd72054fca072cbc35e8fa656ae2","date":1484689361,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/SegmentsInfoRequestHandlerTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/SegmentsInfoRequestHandlerTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    // we need a consistent segmentation to ensure we don't get a random\n    // merge that reduces the total num docs in all segments, or the number of deletes\n    //\n    systemSetPropertySolrTestsMergePolicy(LogDocMergePolicy.class.getName());\n    systemSetPropertySolrTestsMergePolicyFactory(LogDocMergePolicyFactory.class.getName());\n    \n    System.setProperty(\"enable.update.log\", \"false\"); // no _version_ in our schema\n    initCore(\"solrconfig.xml\", \"schema12.xml\"); // segments API shouldn't depend on _version_ or ulog\n    \n    // build up an index with at least 2 segments and some deletes\n    for (int i = 0; i < DOC_COUNT; i++) {\n      assertU(adoc(\"id\",\"SOLR100\" + i, \"name\",\"Apache Solr:\" + i));\n    }\n    for (int i = 0; i < DEL_COUNT; i++) {\n      assertU(delI(\"SOLR100\" + i));\n    }\n    assertU(commit());\n    for (int i = 0; i < DOC_COUNT; i++) {\n      assertU(adoc(\"id\",\"SOLR200\" + i, \"name\",\"Apache Solr:\" + i));\n    }\n    assertU(commit());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    System.setProperty(\"enable.update.log\", \"false\");\n    System.setProperty(\"solr.tests.useMergePolicy\", \"false\");\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n  }\n\n","bugFix":["67b008414df14724ab7e4788787d28c65a1ac59e","26db0fd7da61a97dcbf4558f4fd1ebed330bbd45"],"bugIntro":["2f4bd7321b3a8842bf3e8a5835b9892a05f49a19"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/SegmentsInfoRequestHandlerTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/SegmentsInfoRequestHandlerTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    // we need a consistent segmentation to ensure we don't get a random\n    // merge that reduces the total num docs in all segments, or the number of deletes\n    //\n    systemSetPropertySolrTestsMergePolicy(LogDocMergePolicy.class.getName());\n    systemSetPropertySolrTestsMergePolicyFactory(LogDocMergePolicyFactory.class.getName());\n    \n    System.setProperty(\"enable.update.log\", \"false\"); // no _version_ in our schema\n    initCore(\"solrconfig.xml\", \"schema12.xml\"); // segments API shouldn't depend on _version_ or ulog\n    \n    // build up an index with at least 2 segments and some deletes\n    for (int i = 0; i < DOC_COUNT; i++) {\n      assertU(adoc(\"id\",\"SOLR100\" + i, \"name\",\"Apache Solr:\" + i));\n    }\n    for (int i = 0; i < DEL_COUNT; i++) {\n      assertU(delI(\"SOLR100\" + i));\n    }\n    assertU(commit());\n    for (int i = 0; i < DOC_COUNT; i++) {\n      assertU(adoc(\"id\",\"SOLR200\" + i, \"name\",\"Apache Solr:\" + i));\n    }\n    assertU(commit());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    System.setProperty(\"enable.update.log\", \"false\");\n    System.setProperty(\"solr.tests.useMergePolicy\", \"false\");\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d848516a5d0b23d183a2ceb4f4fb8634205956","date":1496408348,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/SegmentsInfoRequestHandlerTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/SegmentsInfoRequestHandlerTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    // we need a consistent segmentation to ensure we don't get a random\n    // merge that reduces the total num docs in all segments, or the number of deletes\n    //\n    systemSetPropertySolrTestsMergePolicyFactory(LogDocMergePolicyFactory.class.getName());\n    \n    System.setProperty(\"enable.update.log\", \"false\"); // no _version_ in our schema\n    initCore(\"solrconfig.xml\", \"schema12.xml\"); // segments API shouldn't depend on _version_ or ulog\n    \n    // build up an index with at least 2 segments and some deletes\n    for (int i = 0; i < DOC_COUNT; i++) {\n      assertU(adoc(\"id\",\"SOLR100\" + i, \"name\",\"Apache Solr:\" + i));\n    }\n    for (int i = 0; i < DEL_COUNT; i++) {\n      assertU(delI(\"SOLR100\" + i));\n    }\n    assertU(commit());\n    for (int i = 0; i < DOC_COUNT; i++) {\n      assertU(adoc(\"id\",\"SOLR200\" + i, \"name\",\"Apache Solr:\" + i));\n    }\n    assertU(commit());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    // we need a consistent segmentation to ensure we don't get a random\n    // merge that reduces the total num docs in all segments, or the number of deletes\n    //\n    systemSetPropertySolrTestsMergePolicy(LogDocMergePolicy.class.getName());\n    systemSetPropertySolrTestsMergePolicyFactory(LogDocMergePolicyFactory.class.getName());\n    \n    System.setProperty(\"enable.update.log\", \"false\"); // no _version_ in our schema\n    initCore(\"solrconfig.xml\", \"schema12.xml\"); // segments API shouldn't depend on _version_ or ulog\n    \n    // build up an index with at least 2 segments and some deletes\n    for (int i = 0; i < DOC_COUNT; i++) {\n      assertU(adoc(\"id\",\"SOLR100\" + i, \"name\",\"Apache Solr:\" + i));\n    }\n    for (int i = 0; i < DEL_COUNT; i++) {\n      assertU(delI(\"SOLR100\" + i));\n    }\n    assertU(commit());\n    for (int i = 0; i < DOC_COUNT; i++) {\n      assertU(adoc(\"id\",\"SOLR200\" + i, \"name\",\"Apache Solr:\" + i));\n    }\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/SegmentsInfoRequestHandlerTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/SegmentsInfoRequestHandlerTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    // we need a consistent segmentation to ensure we don't get a random\n    // merge that reduces the total num docs in all segments, or the number of deletes\n    //\n    systemSetPropertySolrTestsMergePolicyFactory(LogDocMergePolicyFactory.class.getName());\n    \n    System.setProperty(\"enable.update.log\", \"false\"); // no _version_ in our schema\n    initCore(\"solrconfig.xml\", \"schema12.xml\"); // segments API shouldn't depend on _version_ or ulog\n    \n    // build up an index with at least 2 segments and some deletes\n    for (int i = 0; i < DOC_COUNT; i++) {\n      assertU(adoc(\"id\",\"SOLR100\" + i, \"name\",\"Apache Solr:\" + i));\n    }\n    for (int i = 0; i < DEL_COUNT; i++) {\n      assertU(delI(\"SOLR100\" + i));\n    }\n    assertU(commit());\n    for (int i = 0; i < DOC_COUNT; i++) {\n      assertU(adoc(\"id\",\"SOLR200\" + i, \"name\",\"Apache Solr:\" + i));\n    }\n    assertU(commit());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    // we need a consistent segmentation to ensure we don't get a random\n    // merge that reduces the total num docs in all segments, or the number of deletes\n    //\n    systemSetPropertySolrTestsMergePolicy(LogDocMergePolicy.class.getName());\n    systemSetPropertySolrTestsMergePolicyFactory(LogDocMergePolicyFactory.class.getName());\n    \n    System.setProperty(\"enable.update.log\", \"false\"); // no _version_ in our schema\n    initCore(\"solrconfig.xml\", \"schema12.xml\"); // segments API shouldn't depend on _version_ or ulog\n    \n    // build up an index with at least 2 segments and some deletes\n    for (int i = 0; i < DOC_COUNT; i++) {\n      assertU(adoc(\"id\",\"SOLR100\" + i, \"name\",\"Apache Solr:\" + i));\n    }\n    for (int i = 0; i < DEL_COUNT; i++) {\n      assertU(delI(\"SOLR100\" + i));\n    }\n    assertU(commit());\n    for (int i = 0; i < DOC_COUNT; i++) {\n      assertU(adoc(\"id\",\"SOLR200\" + i, \"name\",\"Apache Solr:\" + i));\n    }\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/SegmentsInfoRequestHandlerTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/SegmentsInfoRequestHandlerTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    // we need a consistent segmentation to ensure we don't get a random\n    // merge that reduces the total num docs in all segments, or the number of deletes\n    //\n    systemSetPropertySolrTestsMergePolicyFactory(LogDocMergePolicyFactory.class.getName());\n    \n    System.setProperty(\"enable.update.log\", \"false\"); // no _version_ in our schema\n    initCore(\"solrconfig.xml\", \"schema12.xml\"); // segments API shouldn't depend on _version_ or ulog\n    \n    // build up an index with at least 2 segments and some deletes\n    for (int i = 0; i < DOC_COUNT; i++) {\n      assertU(adoc(\"id\",\"SOLR100\" + i, \"name\",\"Apache Solr:\" + i));\n    }\n    for (int i = 0; i < DEL_COUNT; i++) {\n      assertU(delI(\"SOLR100\" + i));\n    }\n    assertU(commit());\n    for (int i = 0; i < DOC_COUNT; i++) {\n      assertU(adoc(\"id\",\"SOLR200\" + i, \"name\",\"Apache Solr:\" + i));\n    }\n    assertU(commit());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    // we need a consistent segmentation to ensure we don't get a random\n    // merge that reduces the total num docs in all segments, or the number of deletes\n    //\n    systemSetPropertySolrTestsMergePolicy(LogDocMergePolicy.class.getName());\n    systemSetPropertySolrTestsMergePolicyFactory(LogDocMergePolicyFactory.class.getName());\n    \n    System.setProperty(\"enable.update.log\", \"false\"); // no _version_ in our schema\n    initCore(\"solrconfig.xml\", \"schema12.xml\"); // segments API shouldn't depend on _version_ or ulog\n    \n    // build up an index with at least 2 segments and some deletes\n    for (int i = 0; i < DOC_COUNT; i++) {\n      assertU(adoc(\"id\",\"SOLR100\" + i, \"name\",\"Apache Solr:\" + i));\n    }\n    for (int i = 0; i < DEL_COUNT; i++) {\n      assertU(delI(\"SOLR100\" + i));\n    }\n    assertU(commit());\n    for (int i = 0; i < DOC_COUNT; i++) {\n      assertU(adoc(\"id\",\"SOLR200\" + i, \"name\",\"Apache Solr:\" + i));\n    }\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f4bd7321b3a8842bf3e8a5835b9892a05f49a19","date":1535403950,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/SegmentsInfoRequestHandlerTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/SegmentsInfoRequestHandlerTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    // we need a consistent segmentation to ensure we don't get a random\n    // merge that reduces the total num docs in all segments, or the number of deletes\n    //\n    systemSetPropertySolrTestsMergePolicyFactory(NoMergePolicyFactory.class.getName());\n    // Also prevent flushes\n    System.setProperty(\"solr.tests.maxBufferedDocs\", \"1000\");\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", \"5000\");\n    \n    System.setProperty(\"enable.update.log\", \"false\"); // no _version_ in our schema\n    initCore(\"solrconfig.xml\", \"schema12.xml\"); // segments API shouldn't depend on _version_ or ulog\n    \n    // build up an index with at least 2 segments and some deletes\n    for (int i = 0; i < DOC_COUNT; i++) {\n      assertU(adoc(\"id\",\"SOLR100\" + i, \"name\",\"Apache Solr:\" + i));\n    }\n    for (int i = 0; i < DEL_COUNT; i++) {\n      assertU(delI(\"SOLR100\" + i));\n    }\n    assertU(commit());\n    for (int i = 0; i < DOC_COUNT; i++) {\n      assertU(adoc(\"id\",\"SOLR200\" + i, \"name\",\"Apache Solr:\" + i));\n    }\n    assertU(commit());\n    h.getCore().withSearcher((searcher) -> {\n      int numSegments = SegmentInfos.readLatestCommit(searcher.getIndexReader().directory()).size();\n      // if this is not NUM_SEGMENTS, there was some unexpected flush or merge\n      assertEquals(\"Unexpected number of segment in the index: \" + numSegments, \n          NUM_SEGMENTS, numSegments);\n      return null;\n    });\n    \n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    // we need a consistent segmentation to ensure we don't get a random\n    // merge that reduces the total num docs in all segments, or the number of deletes\n    //\n    systemSetPropertySolrTestsMergePolicyFactory(LogDocMergePolicyFactory.class.getName());\n    \n    System.setProperty(\"enable.update.log\", \"false\"); // no _version_ in our schema\n    initCore(\"solrconfig.xml\", \"schema12.xml\"); // segments API shouldn't depend on _version_ or ulog\n    \n    // build up an index with at least 2 segments and some deletes\n    for (int i = 0; i < DOC_COUNT; i++) {\n      assertU(adoc(\"id\",\"SOLR100\" + i, \"name\",\"Apache Solr:\" + i));\n    }\n    for (int i = 0; i < DEL_COUNT; i++) {\n      assertU(delI(\"SOLR100\" + i));\n    }\n    assertU(commit());\n    for (int i = 0; i < DOC_COUNT; i++) {\n      assertU(adoc(\"id\",\"SOLR200\" + i, \"name\",\"Apache Solr:\" + i));\n    }\n    assertU(commit());\n  }\n\n","bugFix":["5db0480cb3badd72054fca072cbc35e8fa656ae2"],"bugIntro":["133525af0aa09d87ef4258fd43eed160b462b313"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"133525af0aa09d87ef4258fd43eed160b462b313","date":1588596241,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/SegmentsInfoRequestHandlerTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/SegmentsInfoRequestHandlerTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    // we need a consistent segmentation to ensure we don't get a random\n    // merge that reduces the total num docs in all segments, or the number of deletes\n    //\n    systemSetPropertySolrTestsMergePolicyFactory(NoMergePolicyFactory.class.getName());\n    // Also prevent flushes\n    System.setProperty(\"solr.tests.maxBufferedDocs\", \"1000\");\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", \"5000\");\n    \n    System.setProperty(\"enable.update.log\", \"false\"); // no _version_ in our schema\n    initCore(\"solrconfig.xml\", \"schema12.xml\"); // segments API shouldn't depend on _version_ or ulog\n    \n    // build up an index with at least 2 segments and some deletes\n    for (int i = 0; i < DOC_COUNT; i++) {\n      assertU(adoc(\"id\",\"SOLR100\" + i, \"name\",\"Apache Solr:\" + i));\n    }\n    for (int i = 0; i < DEL_COUNT; i++) {\n      assertU(delI(\"SOLR100\" + i));\n    }\n    assertU(commit());\n    for (int i = 0; i < DOC_COUNT; i++) {\n      assertU(adoc(\"id\",\"SOLR200\" + i, \"name\",\"Apache Solr:\" + i));\n    }\n    assertU(commit());\n    h.getCore().withSearcher((searcher) -> {\n      int numSegments = SegmentInfos.readLatestCommit(searcher.getIndexReader().directory()).size();\n      // if this is not NUM_SEGMENTS, there was some unexpected flush or merge\n      assertEquals(\"Unexpected number of segment in the index: \" + numSegments, \n          NUM_SEGMENTS, numSegments);\n      return null;\n    });\n    // see SOLR-14431\n    RefCounted<IndexWriter> iwRef = h.getCore().getSolrCoreState().getIndexWriter(h.getCore());\n    initialRefCount = iwRef.getRefcount();\n    iwRef.decref();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    // we need a consistent segmentation to ensure we don't get a random\n    // merge that reduces the total num docs in all segments, or the number of deletes\n    //\n    systemSetPropertySolrTestsMergePolicyFactory(NoMergePolicyFactory.class.getName());\n    // Also prevent flushes\n    System.setProperty(\"solr.tests.maxBufferedDocs\", \"1000\");\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", \"5000\");\n    \n    System.setProperty(\"enable.update.log\", \"false\"); // no _version_ in our schema\n    initCore(\"solrconfig.xml\", \"schema12.xml\"); // segments API shouldn't depend on _version_ or ulog\n    \n    // build up an index with at least 2 segments and some deletes\n    for (int i = 0; i < DOC_COUNT; i++) {\n      assertU(adoc(\"id\",\"SOLR100\" + i, \"name\",\"Apache Solr:\" + i));\n    }\n    for (int i = 0; i < DEL_COUNT; i++) {\n      assertU(delI(\"SOLR100\" + i));\n    }\n    assertU(commit());\n    for (int i = 0; i < DOC_COUNT; i++) {\n      assertU(adoc(\"id\",\"SOLR200\" + i, \"name\",\"Apache Solr:\" + i));\n    }\n    assertU(commit());\n    h.getCore().withSearcher((searcher) -> {\n      int numSegments = SegmentInfos.readLatestCommit(searcher.getIndexReader().directory()).size();\n      // if this is not NUM_SEGMENTS, there was some unexpected flush or merge\n      assertEquals(\"Unexpected number of segment in the index: \" + numSegments, \n          NUM_SEGMENTS, numSegments);\n      return null;\n    });\n    \n  }\n\n","bugFix":["2f4bd7321b3a8842bf3e8a5835b9892a05f49a19"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"133525af0aa09d87ef4258fd43eed160b462b313":["2f4bd7321b3a8842bf3e8a5835b9892a05f49a19"],"2f4bd7321b3a8842bf3e8a5835b9892a05f49a19":["28288370235ed02234a64753cdbf0c6ec096304a"],"67b008414df14724ab7e4788787d28c65a1ac59e":["26db0fd7da61a97dcbf4558f4fd1ebed330bbd45"],"26db0fd7da61a97dcbf4558f4fd1ebed330bbd45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5db0480cb3badd72054fca072cbc35e8fa656ae2":["67b008414df14724ab7e4788787d28c65a1ac59e"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["5db0480cb3badd72054fca072cbc35e8fa656ae2"],"28288370235ed02234a64753cdbf0c6ec096304a":["5db0480cb3badd72054fca072cbc35e8fa656ae2","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["26db0fd7da61a97dcbf4558f4fd1ebed330bbd45","67b008414df14724ab7e4788787d28c65a1ac59e"],"302d34f2c66e8d489ee13078305c330cbf67b226":["f03e4bed5023ec3ef93a771b8888cae991cf448d","5db0480cb3badd72054fca072cbc35e8fa656ae2"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["5db0480cb3badd72054fca072cbc35e8fa656ae2","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","26db0fd7da61a97dcbf4558f4fd1ebed330bbd45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["133525af0aa09d87ef4258fd43eed160b462b313"]},"commit2Childs":{"133525af0aa09d87ef4258fd43eed160b462b313":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2f4bd7321b3a8842bf3e8a5835b9892a05f49a19":["133525af0aa09d87ef4258fd43eed160b462b313"],"67b008414df14724ab7e4788787d28c65a1ac59e":["5db0480cb3badd72054fca072cbc35e8fa656ae2","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"26db0fd7da61a97dcbf4558f4fd1ebed330bbd45":["67b008414df14724ab7e4788787d28c65a1ac59e","f03e4bed5023ec3ef93a771b8888cae991cf448d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"5db0480cb3badd72054fca072cbc35e8fa656ae2":["70d848516a5d0b23d183a2ceb4f4fb8634205956","28288370235ed02234a64753cdbf0c6ec096304a","302d34f2c66e8d489ee13078305c330cbf67b226","e9017cf144952056066919f1ebc7897ff9bd71b1"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"28288370235ed02234a64753cdbf0c6ec096304a":["2f4bd7321b3a8842bf3e8a5835b9892a05f49a19"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["302d34f2c66e8d489ee13078305c330cbf67b226"],"302d34f2c66e8d489ee13078305c330cbf67b226":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["26db0fd7da61a97dcbf4558f4fd1ebed330bbd45","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["302d34f2c66e8d489ee13078305c330cbf67b226","e9017cf144952056066919f1ebc7897ff9bd71b1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}