{"path":"lucene/src/test-framework/java/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton,Set[State]).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton,Set[State]).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton,Set[State]).mjava","sourceNew":"  /** \n   * Simple, original brics implementation of determinize()\n   * Determinizes the given automaton using the given set of initial states. \n   */\n  public static void determinizeSimple(Automaton a, Set<State> initialset) {\n    int[] points = a.getStartPoints();\n    // subset construction\n    Map<Set<State>, Set<State>> sets = new HashMap<Set<State>, Set<State>>();\n    LinkedList<Set<State>> worklist = new LinkedList<Set<State>>();\n    Map<Set<State>, State> newstate = new HashMap<Set<State>, State>();\n    sets.put(initialset, initialset);\n    worklist.add(initialset);\n    a.initial = new State();\n    newstate.put(initialset, a.initial);\n    while (worklist.size() > 0) {\n      Set<State> s = worklist.removeFirst();\n      State r = newstate.get(s);\n      for (State q : s)\n        if (q.accept) {\n          r.accept = true;\n          break;\n        }\n      for (int n = 0; n < points.length; n++) {\n        Set<State> p = new HashSet<State>();\n        for (State q : s)\n          for (Transition t : q.getTransitions())\n            if (t.min <= points[n] && points[n] <= t.max)\n              p.add(t.to);\n        if (!sets.containsKey(p)) {\n          sets.put(p, p);\n          worklist.add(p);\n          newstate.put(p, new State());\n        }\n        State q = newstate.get(p);\n        int min = points[n];\n        int max;\n        if (n + 1 < points.length)\n          max = points[n + 1] - 1;\n        else\n          max = Character.MAX_CODE_POINT;\n        r.addTransition(new Transition(min, max, q));\n      }\n    }\n    a.deterministic = true;\n    a.clearNumberedStates();\n    a.removeDeadTransitions();\n  }\n\n","sourceOld":"  /** \n   * Simple, original brics implementation of determinize()\n   * Determinizes the given automaton using the given set of initial states. \n   */\n  public static void determinizeSimple(Automaton a, Set<State> initialset) {\n    int[] points = a.getStartPoints();\n    // subset construction\n    Map<Set<State>, Set<State>> sets = new HashMap<Set<State>, Set<State>>();\n    LinkedList<Set<State>> worklist = new LinkedList<Set<State>>();\n    Map<Set<State>, State> newstate = new HashMap<Set<State>, State>();\n    sets.put(initialset, initialset);\n    worklist.add(initialset);\n    a.initial = new State();\n    newstate.put(initialset, a.initial);\n    while (worklist.size() > 0) {\n      Set<State> s = worklist.removeFirst();\n      State r = newstate.get(s);\n      for (State q : s)\n        if (q.accept) {\n          r.accept = true;\n          break;\n        }\n      for (int n = 0; n < points.length; n++) {\n        Set<State> p = new HashSet<State>();\n        for (State q : s)\n          for (Transition t : q.getTransitions())\n            if (t.min <= points[n] && points[n] <= t.max)\n              p.add(t.to);\n        if (!sets.containsKey(p)) {\n          sets.put(p, p);\n          worklist.add(p);\n          newstate.put(p, new State());\n        }\n        State q = newstate.get(p);\n        int min = points[n];\n        int max;\n        if (n + 1 < points.length)\n          max = points[n + 1] - 1;\n        else\n          max = Character.MAX_CODE_POINT;\n        r.addTransition(new Transition(min, max, q));\n      }\n    }\n    a.deterministic = true;\n    a.clearNumberedStates();\n    a.removeDeadTransitions();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton,Set[State]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton,Set[State]).mjava","sourceNew":"  /** \n   * Simple, original brics implementation of determinize()\n   * Determinizes the given automaton using the given set of initial states. \n   */\n  public static void determinizeSimple(Automaton a, Set<State> initialset) {\n    int[] points = a.getStartPoints();\n    // subset construction\n    Map<Set<State>, Set<State>> sets = new HashMap<Set<State>, Set<State>>();\n    LinkedList<Set<State>> worklist = new LinkedList<Set<State>>();\n    Map<Set<State>, State> newstate = new HashMap<Set<State>, State>();\n    sets.put(initialset, initialset);\n    worklist.add(initialset);\n    a.initial = new State();\n    newstate.put(initialset, a.initial);\n    while (worklist.size() > 0) {\n      Set<State> s = worklist.removeFirst();\n      State r = newstate.get(s);\n      for (State q : s)\n        if (q.accept) {\n          r.accept = true;\n          break;\n        }\n      for (int n = 0; n < points.length; n++) {\n        Set<State> p = new HashSet<State>();\n        for (State q : s)\n          for (Transition t : q.getTransitions())\n            if (t.min <= points[n] && points[n] <= t.max)\n              p.add(t.to);\n        if (!sets.containsKey(p)) {\n          sets.put(p, p);\n          worklist.add(p);\n          newstate.put(p, new State());\n        }\n        State q = newstate.get(p);\n        int min = points[n];\n        int max;\n        if (n + 1 < points.length)\n          max = points[n + 1] - 1;\n        else\n          max = Character.MAX_CODE_POINT;\n        r.addTransition(new Transition(min, max, q));\n      }\n    }\n    a.deterministic = true;\n    a.clearNumberedStates();\n    a.removeDeadTransitions();\n  }\n\n","sourceOld":"  /** \n   * Simple, original brics implementation of determinize()\n   * Determinizes the given automaton using the given set of initial states. \n   */\n  public static void determinizeSimple(Automaton a, Set<State> initialset) {\n    int[] points = a.getStartPoints();\n    // subset construction\n    Map<Set<State>, Set<State>> sets = new HashMap<Set<State>, Set<State>>();\n    LinkedList<Set<State>> worklist = new LinkedList<Set<State>>();\n    Map<Set<State>, State> newstate = new HashMap<Set<State>, State>();\n    sets.put(initialset, initialset);\n    worklist.add(initialset);\n    a.initial = new State();\n    newstate.put(initialset, a.initial);\n    while (worklist.size() > 0) {\n      Set<State> s = worklist.removeFirst();\n      State r = newstate.get(s);\n      for (State q : s)\n        if (q.accept) {\n          r.accept = true;\n          break;\n        }\n      for (int n = 0; n < points.length; n++) {\n        Set<State> p = new HashSet<State>();\n        for (State q : s)\n          for (Transition t : q.getTransitions())\n            if (t.min <= points[n] && points[n] <= t.max)\n              p.add(t.to);\n        if (!sets.containsKey(p)) {\n          sets.put(p, p);\n          worklist.add(p);\n          newstate.put(p, new State());\n        }\n        State q = newstate.get(p);\n        int min = points[n];\n        int max;\n        if (n + 1 < points.length)\n          max = points[n + 1] - 1;\n        else\n          max = Character.MAX_CODE_POINT;\n        r.addTransition(new Transition(min, max, q));\n      }\n    }\n    a.deterministic = true;\n    a.clearNumberedStates();\n    a.removeDeadTransitions();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}