{"path":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#addDocsToItemWriter(List[LeafReaderContext],IteratorWriter.ItemWriter,SortDoc[],int).mjava","commits":[{"id":"6d36bc9cece6e1287852808de22ef7aa07c2e716","date":1550783148,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#addDocsToItemWriter(List[LeafReaderContext],IteratorWriter.ItemWriter,SortDoc[],int).mjava","pathOld":"/dev/null","sourceNew":"  protected void addDocsToItemWriter(List<LeafReaderContext> leaves, IteratorWriter.ItemWriter writer, SortDoc[] docsToExport, int outDocsIndex) throws IOException {\n    try {\n      for (int i = outDocsIndex; i >= 0; --i) {\n        SortDoc s = docsToExport[i];\n        writer.add((MapWriter) ew -> {\n          writeDoc(s, leaves, ew);\n          s.reset();\n        });\n      }\n    } catch (Throwable e) {\n      Throwable ex = e;\n      while (ex != null) {\n        String m = ex.getMessage();\n        if (m != null && m.contains(\"Broken pipe\")) {\n          throw new IgnoreException();\n        }\n        ex = ex.getCause();\n      }\n\n      if (e instanceof IOException) {\n        throw ((IOException) e);\n      } else {\n        throw new IOException(e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4","date":1551083645,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#addDocsToItemWriter(List[LeafReaderContext],IteratorWriter.ItemWriter,SortDoc[],int).mjava","pathOld":"/dev/null","sourceNew":"  protected void addDocsToItemWriter(List<LeafReaderContext> leaves, IteratorWriter.ItemWriter writer, SortDoc[] docsToExport, int outDocsIndex) throws IOException {\n    try {\n      for (int i = outDocsIndex; i >= 0; --i) {\n        SortDoc s = docsToExport[i];\n        writer.add((MapWriter) ew -> {\n          writeDoc(s, leaves, ew);\n          s.reset();\n        });\n      }\n    } catch (Throwable e) {\n      Throwable ex = e;\n      while (ex != null) {\n        String m = ex.getMessage();\n        if (m != null && m.contains(\"Broken pipe\")) {\n          throw new IgnoreException();\n        }\n        ex = ex.getCause();\n      }\n\n      if (e instanceof IOException) {\n        throw ((IOException) e);\n      } else {\n        throw new IOException(e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee","date":1593704090,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#addDocsToItemWriter(List[LeafReaderContext],IteratorWriter.ItemWriter,SortDoc[],int).mjava","sourceNew":null,"sourceOld":"  protected void addDocsToItemWriter(List<LeafReaderContext> leaves, IteratorWriter.ItemWriter writer, SortDoc[] docsToExport, int outDocsIndex) throws IOException {\n    try {\n      for (int i = outDocsIndex; i >= 0; --i) {\n        SortDoc s = docsToExport[i];\n        writer.add((MapWriter) ew -> {\n          writeDoc(s, leaves, ew);\n          s.reset();\n        });\n      }\n    } catch (Throwable e) {\n      Throwable ex = e;\n      while (ex != null) {\n        String m = ex.getMessage();\n        if (m != null && m.contains(\"Broken pipe\")) {\n          throw new IgnoreException();\n        }\n        ex = ex.getCause();\n      }\n\n      if (e instanceof IOException) {\n        throw ((IOException) e);\n      } else {\n        throw new IOException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"6d36bc9cece6e1287852808de22ef7aa07c2e716":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6d36bc9cece6e1287852808de22ef7aa07c2e716"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee"]},"commit2Childs":{"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d36bc9cece6e1287852808de22ef7aa07c2e716":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6d36bc9cece6e1287852808de22ef7aa07c2e716","0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}