{"path":"lucene/classification/src/java/org/apache/lucene/classification/utils/DatasetSplitter#createNewDoc(IndexReader,FieldType,ScoreDoc,String[]).mjava","commits":[{"id":"444d4b906d0e3398f87d6a5c4967c508f11a7f0b","date":1466507434,"type":1,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/DatasetSplitter#createNewDoc(IndexReader,FieldType,ScoreDoc,String[]).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/utils/DatasetSplitter#createNewDoc(LeafReader,FieldType,ScoreDoc,String[]).mjava","sourceNew":"  private Document createNewDoc(IndexReader originalIndex, FieldType ft, ScoreDoc scoreDoc, String[] fieldNames) throws IOException {\n    Document doc = new Document();\n    Document document = originalIndex.document(scoreDoc.doc);\n    if (fieldNames != null && fieldNames.length > 0) {\n      for (String fieldName : fieldNames) {\n        IndexableField field = document.getField(fieldName);\n        if (field != null) {\n          doc.add(new Field(fieldName, field.stringValue(), ft));\n        }\n      }\n    } else {\n      for (IndexableField field : document.getFields()) {\n        if (field.readerValue() != null) {\n          doc.add(new Field(field.name(), field.readerValue(), ft));\n        } else if (field.binaryValue() != null) {\n          doc.add(new Field(field.name(), field.binaryValue(), ft));\n        } else if (field.stringValue() != null) {\n          doc.add(new Field(field.name(), field.stringValue(), ft));\n        } else if (field.numericValue() != null) {\n          doc.add(new Field(field.name(), field.numericValue().toString(), ft));\n        }\n      }\n    }\n    return doc;\n  }\n\n","sourceOld":"  private Document createNewDoc(LeafReader originalIndex, FieldType ft, ScoreDoc scoreDoc, String[] fieldNames) throws IOException {\n    Document doc = new Document();\n    Document document = originalIndex.document(scoreDoc.doc);\n    if (fieldNames != null && fieldNames.length > 0) {\n      for (String fieldName : fieldNames) {\n        IndexableField field = document.getField(fieldName);\n        if (field != null) {\n          doc.add(new Field(fieldName, field.stringValue(), ft));\n        }\n      }\n    } else {\n      for (IndexableField field : document.getFields()) {\n        if (field.readerValue() != null) {\n          doc.add(new Field(field.name(), field.readerValue(), ft));\n        } else if (field.binaryValue() != null) {\n          doc.add(new Field(field.name(), field.binaryValue(), ft));\n        } else if (field.stringValue() != null) {\n          doc.add(new Field(field.name(), field.stringValue(), ft));\n        } else if (field.numericValue() != null) {\n          doc.add(new Field(field.name(), field.numericValue().toString(), ft));\n        }\n      }\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/DatasetSplitter#createNewDoc(IndexReader,FieldType,ScoreDoc,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private Document createNewDoc(IndexReader originalIndex, FieldType ft, ScoreDoc scoreDoc, String[] fieldNames) throws IOException {\n    Document doc = new Document();\n    Document document = originalIndex.document(scoreDoc.doc);\n    if (fieldNames != null && fieldNames.length > 0) {\n      for (String fieldName : fieldNames) {\n        IndexableField field = document.getField(fieldName);\n        if (field != null) {\n          doc.add(new Field(fieldName, field.stringValue(), ft));\n        }\n      }\n    } else {\n      for (IndexableField field : document.getFields()) {\n        if (field.readerValue() != null) {\n          doc.add(new Field(field.name(), field.readerValue(), ft));\n        } else if (field.binaryValue() != null) {\n          doc.add(new Field(field.name(), field.binaryValue(), ft));\n        } else if (field.stringValue() != null) {\n          doc.add(new Field(field.name(), field.stringValue(), ft));\n        } else if (field.numericValue() != null) {\n          doc.add(new Field(field.name(), field.numericValue().toString(), ft));\n        }\n      }\n    }\n    return doc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"444d4b906d0e3398f87d6a5c4967c508f11a7f0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","444d4b906d0e3398f87d6a5c4967c508f11a7f0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b"]},"commit2Childs":{"444d4b906d0e3398f87d6a5c4967c508f11a7f0b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}