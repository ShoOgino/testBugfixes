{"path":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    LookupFactory factory = (LookupFactory) core.getResourceLoader().newInstance(lookupImpl);\n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    LookupFactory factory = (LookupFactory) core.getResourceLoader().newInstance(lookupImpl);\n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    LookupFactory factory = (LookupFactory) core.getResourceLoader().newInstance(lookupImpl);\n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    LookupFactory factory = (LookupFactory) core.getResourceLoader().newInstance(lookupImpl);\n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    LookupFactory factory = (LookupFactory) core.getResourceLoader().newInstance(lookupImpl);\n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    LookupFactory factory = (LookupFactory) core.getResourceLoader().newInstance(lookupImpl);\n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef7724982540101e7fe429e8eb67b97f3dcac862","date":1316184142,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    LookupFactory factory = (LookupFactory) core.getResourceLoader().newInstance(lookupImpl);\n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    LookupFactory factory = (LookupFactory) core.getResourceLoader().newInstance(lookupImpl);\n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","bugFix":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eda10679962159bc8bccd5b1069ae35d607ace25","date":1331148629,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    factory = (LookupFactory) core.getResourceLoader().newInstance(lookupImpl);\n    \n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(new FileInputStream(new File(storeDir, factory.storeFileName())));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    LookupFactory factory = (LookupFactory) core.getResourceLoader().newInstance(lookupImpl);\n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    factory = (LookupFactory) core.getResourceLoader().newInstance(lookupImpl);\n    \n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(new FileInputStream(new File(storeDir, factory.storeFileName())));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    LookupFactory factory = (LookupFactory) core.getResourceLoader().newInstance(lookupImpl);\n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","date":1334628185,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    \n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(new FileInputStream(new File(storeDir, factory.storeFileName())));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    factory = (LookupFactory) core.getResourceLoader().newInstance(lookupImpl);\n    \n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(new FileInputStream(new File(storeDir, factory.storeFileName())));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19","date":1400739326,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    \n    lookup = factory.create(config, core);\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (lookup != null && lookup instanceof Closeable) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            LOG.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n      }\n      \n      @Override\n      public void postClose(SolrCore core) {}\n    });\n    \n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(new FileInputStream(new File(storeDir, factory.storeFileName())));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    \n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(new FileInputStream(new File(storeDir, factory.storeFileName())));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    \n    lookup = factory.create(config, core);\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (lookup != null && lookup instanceof Closeable) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            LOG.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n      }\n      \n      @Override\n      public void postClose(SolrCore core) {}\n    });\n    \n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(new FileInputStream(new File(storeDir, factory.storeFileName())));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    \n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(new FileInputStream(new File(storeDir, factory.storeFileName())));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    log.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    \n    lookup = factory.create(config, core);\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (lookup != null && lookup instanceof Closeable) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            log.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n      }\n      \n      @Override\n      public void postClose(SolrCore core) {}\n    });\n    \n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(new FileInputStream(new File(storeDir, factory.storeFileName())));\n        } catch (IOException e) {\n          log.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    \n    lookup = factory.create(config, core);\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (lookup != null && lookup instanceof Closeable) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            LOG.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n      }\n      \n      @Override\n      public void postClose(SolrCore core) {}\n    });\n    \n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(new FileInputStream(new File(storeDir, factory.storeFileName())));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    \n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    log.info(\"init: {}\", config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    \n    lookup = factory.create(config, core);\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (lookup != null && lookup instanceof Closeable) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            log.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n      }\n      \n      @Override\n      public void postClose(SolrCore core) {}\n    });\n    \n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(new FileInputStream(new File(storeDir, factory.storeFileName())));\n        } catch (IOException e) {\n          log.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    log.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    \n    lookup = factory.create(config, core);\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (lookup != null && lookup instanceof Closeable) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            log.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n      }\n      \n      @Override\n      public void postClose(SolrCore core) {}\n    });\n    \n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(new FileInputStream(new File(storeDir, factory.storeFileName())));\n        } catch (IOException e) {\n          log.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    \n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(@SuppressWarnings({\"rawtypes\"})NamedList config, SolrCore core) {\n    log.info(\"init: {}\", config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    \n    lookup = factory.create(config, core);\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (lookup != null && lookup instanceof Closeable) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            log.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n      }\n      \n      @Override\n      public void postClose(SolrCore core) {}\n    });\n    \n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(new FileInputStream(new File(storeDir, factory.storeFileName())));\n        } catch (IOException e) {\n          log.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    log.info(\"init: {}\", config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    \n    lookup = factory.create(config, core);\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (lookup != null && lookup instanceof Closeable) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            log.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n      }\n      \n      @Override\n      public void postClose(SolrCore core) {}\n    });\n    \n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(new FileInputStream(new File(storeDir, factory.storeFileName())));\n        } catch (IOException e) {\n          log.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    \n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["ef7724982540101e7fe429e8eb67b97f3dcac862","eda10679962159bc8bccd5b1069ae35d607ace25"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"eda10679962159bc8bccd5b1069ae35d607ace25":["ef7724982540101e7fe429e8eb67b97f3dcac862"],"b7605579001505896d48b07160075a5c8b8e128e":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["eda10679962159bc8bccd5b1069ae35d607ace25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"ef7724982540101e7fe429e8eb67b97f3dcac862":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"c26f00b574427b55127e869b935845554afde1fa":["ef7724982540101e7fe429e8eb67b97f3dcac862"],"eda10679962159bc8bccd5b1069ae35d607ace25":["38e3b736c7ca086d61b7dbb841c905ee115490da","a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"b7605579001505896d48b07160075a5c8b8e128e":[],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["b7605579001505896d48b07160075a5c8b8e128e","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["b7605579001505896d48b07160075a5c8b8e128e","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef7724982540101e7fe429e8eb67b97f3dcac862":["38e3b736c7ca086d61b7dbb841c905ee115490da","eda10679962159bc8bccd5b1069ae35d607ace25"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","b7605579001505896d48b07160075a5c8b8e128e","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}