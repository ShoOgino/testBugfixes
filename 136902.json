{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#request(SolrRequest).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#request(SolrRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Process the request. If\n   * {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is\n   * null, then use {@link #getParser()}\n   * \n   * @param request\n   *          The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws IOException If there is a low-level I/O error.\n   * \n   * @see #request(org.apache.solr.client.solrj.SolrRequest,\n   *      org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n      throws SolrServerException, IOException {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = parser;\n    }\n    return request(request, responseParser);\n  }\n\n","sourceOld":"  /**\n   * Process the request. If\n   * {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is\n   * null, then use {@link #getParser()}\n   * \n   * @param request\n   *          The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws IOException If there is a low-level I/O error.\n   * \n   * @see #request(org.apache.solr.client.solrj.SolrRequest,\n   *      org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n      throws SolrServerException, IOException {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = parser;\n    }\n    return request(request, responseParser);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","date":1425554964,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#request(SolrRequest).mjava","sourceNew":"  /**\n   * Process the request. If\n   * {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is\n   * null, then use {@link #getParser()}\n   * \n   * @param request\n   *          The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws IOException If there is a low-level I/O error.\n   * \n   * @see #request(org.apache.solr.client.solrj.SolrRequest,\n   *      org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = parser;\n    }\n    return request(request, responseParser);\n  }\n\n","sourceOld":"  /**\n   * Process the request. If\n   * {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is\n   * null, then use {@link #getParser()}\n   * \n   * @param request\n   *          The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws IOException If there is a low-level I/O error.\n   * \n   * @see #request(org.apache.solr.client.solrj.SolrRequest,\n   *      org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n      throws SolrServerException, IOException {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = parser;\n    }\n    return request(request, responseParser);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#request(SolrRequest).mjava","sourceNew":null,"sourceOld":"  /**\n   * Process the request. If\n   * {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is\n   * null, then use {@link #getParser()}\n   * \n   * @param request\n   *          The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws IOException If there is a low-level I/O error.\n   * \n   * @see #request(org.apache.solr.client.solrj.SolrRequest,\n   *      org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n      throws SolrServerException, IOException {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = parser;\n    }\n    return request(request, responseParser);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["bafca15d8e408346a67f4282ad1143b88023893b","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}