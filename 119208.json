{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FloatTaxonomyFacets#getTopChildren(int,String,String...).mjava","commits":[{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FloatTaxonomyFacets#getTopChildren(int,String,String...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FloatTaxonomyFacets#getTopChildren(int,String,String...).mjava","sourceNew":"  @Override\n  public FacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    if (topN <= 0) {\n      throw new IllegalArgumentException(\"topN must be > 0 (got: \" + topN + \")\");\n    }\n    DimConfig dimConfig = verifyDim(dim);\n    FacetLabel cp = new FacetLabel(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      return null;\n    }\n\n    TopOrdAndFloatQueue q = new TopOrdAndFloatQueue(Math.min(taxoReader.getSize(), topN));\n    float bottomValue = 0;\n\n    int ord = children[dimOrd];\n    float sumValues = 0;\n    int childCount = 0;\n\n    TopOrdAndFloatQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValues += values[ord];\n        childCount++;\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndFloatQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValues == 0) {\n      return null;\n    }\n\n    if (dimConfig.multiValued) {\n      if (dimConfig.requireDimCount) {\n        sumValues = values[dimOrd];\n      } else {\n        // Our sum'd count is not correct, in general:\n        sumValues = -1;\n      }\n    } else {\n      // Our sum'd dim count is accurate, so we keep it\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndFloatQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[cp.length], ordAndValue.value);\n    }\n\n    return new FacetResult(dim, path, sumValues, labelValues, childCount);\n  }\n\n","sourceOld":"  @Override\n  public FacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    if (topN <= 0) {\n      throw new IllegalArgumentException(\"topN must be > 0 (got: \" + topN + \")\");\n    }\n    DimConfig dimConfig = verifyDim(dim);\n    FacetLabel cp = new FacetLabel(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      return null;\n    }\n\n    TopOrdAndFloatQueue q = new TopOrdAndFloatQueue(Math.min(taxoReader.getSize(), topN));\n    float bottomValue = 0;\n\n    int ord = children[dimOrd];\n    float sumValues = 0;\n    int childCount = 0;\n\n    TopOrdAndFloatQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValues += values[ord];\n        childCount++;\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndFloatQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValues == 0) {\n      return null;\n    }\n\n    if (dimConfig.multiValued) {\n      if (dimConfig.requireDimCount) {\n        sumValues = values[dimOrd];\n      } else {\n        // Our sum'd count is not correct, in general:\n        sumValues = -1;\n      }\n    } else {\n      // Our sum'd dim count is accurate, so we keep it\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndFloatQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[cp.length], ordAndValue.value);\n    }\n\n    return new FacetResult(dim, path, sumValues, labelValues, childCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FloatTaxonomyFacets#getTopChildren(int,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    if (topN <= 0) {\n      throw new IllegalArgumentException(\"topN must be > 0 (got: \" + topN + \")\");\n    }\n    DimConfig dimConfig = verifyDim(dim);\n    FacetLabel cp = new FacetLabel(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      return null;\n    }\n\n    TopOrdAndFloatQueue q = new TopOrdAndFloatQueue(Math.min(taxoReader.getSize(), topN));\n    float bottomValue = 0;\n\n    int ord = children[dimOrd];\n    float sumValues = 0;\n    int childCount = 0;\n\n    TopOrdAndFloatQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValues += values[ord];\n        childCount++;\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndFloatQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValues == 0) {\n      return null;\n    }\n\n    if (dimConfig.multiValued) {\n      if (dimConfig.requireDimCount) {\n        sumValues = values[dimOrd];\n      } else {\n        // Our sum'd count is not correct, in general:\n        sumValues = -1;\n      }\n    } else {\n      // Our sum'd dim count is accurate, so we keep it\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndFloatQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[cp.length], ordAndValue.value);\n    }\n\n    return new FacetResult(dim, path, sumValues, labelValues, childCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10b1c9af2d877ca8d718a359a4e5b285fe33b6f7","date":1509555533,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FloatTaxonomyFacets#getTopChildren(int,String,String...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FloatTaxonomyFacets#getTopChildren(int,String,String...).mjava","sourceNew":"  @Override\n  public FacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    if (topN <= 0) {\n      throw new IllegalArgumentException(\"topN must be > 0 (got: \" + topN + \")\");\n    }\n    DimConfig dimConfig = verifyDim(dim);\n    FacetLabel cp = new FacetLabel(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      return null;\n    }\n\n    TopOrdAndFloatQueue q = new TopOrdAndFloatQueue(Math.min(taxoReader.getSize(), topN));\n    float bottomValue = 0;\n\n    int[] children = getChildren();\n    int[] siblings = getSiblings();\n\n    int ord = children[dimOrd];\n    float sumValues = 0;\n    int childCount = 0;\n\n    TopOrdAndFloatQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValues += values[ord];\n        childCount++;\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndFloatQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValues == 0) {\n      return null;\n    }\n\n    if (dimConfig.multiValued) {\n      if (dimConfig.requireDimCount) {\n        sumValues = values[dimOrd];\n      } else {\n        // Our sum'd count is not correct, in general:\n        sumValues = -1;\n      }\n    } else {\n      // Our sum'd dim count is accurate, so we keep it\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndFloatQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[cp.length], ordAndValue.value);\n    }\n\n    return new FacetResult(dim, path, sumValues, labelValues, childCount);\n  }\n\n","sourceOld":"  @Override\n  public FacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    if (topN <= 0) {\n      throw new IllegalArgumentException(\"topN must be > 0 (got: \" + topN + \")\");\n    }\n    DimConfig dimConfig = verifyDim(dim);\n    FacetLabel cp = new FacetLabel(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      return null;\n    }\n\n    TopOrdAndFloatQueue q = new TopOrdAndFloatQueue(Math.min(taxoReader.getSize(), topN));\n    float bottomValue = 0;\n\n    int ord = children[dimOrd];\n    float sumValues = 0;\n    int childCount = 0;\n\n    TopOrdAndFloatQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValues += values[ord];\n        childCount++;\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndFloatQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValues == 0) {\n      return null;\n    }\n\n    if (dimConfig.multiValued) {\n      if (dimConfig.requireDimCount) {\n        sumValues = values[dimOrd];\n      } else {\n        // Our sum'd count is not correct, in general:\n        sumValues = -1;\n      }\n    } else {\n      // Our sum'd dim count is accurate, so we keep it\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndFloatQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[cp.length], ordAndValue.value);\n    }\n\n    return new FacetResult(dim, path, sumValues, labelValues, childCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4edc984f0f4ac77c37e48ace2932f780f888453c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4edc984f0f4ac77c37e48ace2932f780f888453c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["10b1c9af2d877ca8d718a359a4e5b285fe33b6f7"],"10b1c9af2d877ca8d718a359a4e5b285fe33b6f7":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4edc984f0f4ac77c37e48ace2932f780f888453c","3cc728b07df73b197e6d940d27f9b08b63918f13"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["10b1c9af2d877ca8d718a359a4e5b285fe33b6f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"10b1c9af2d877ca8d718a359a4e5b285fe33b6f7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}