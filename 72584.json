{"path":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#indexedToReadable(String).mjava","sourceNew":"  @Override\n  public String indexedToReadable(String _indexedForm) {\n    final BytesRef indexedForm = new BytesRef(_indexedForm);\n    switch (type) {\n      case INTEGER:\n        return Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n      case FLOAT:\n        return Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n      case LONG:\n        return Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n      case DOUBLE:\n        return Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n      case DATE:\n        return dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) );\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":"  @Override\n  public String indexedToReadable(String _indexedForm) {\n    final BytesRef indexedForm = new BytesRef(_indexedForm);\n    switch (type) {\n      case INTEGER:\n        return Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n      case FLOAT:\n        return Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n      case LONG:\n        return Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n      case DOUBLE:\n        return Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n      case DATE:\n        return dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) );\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#indexedToReadable(String).mjava","sourceNew":"  @Override\n  public String indexedToReadable(String _indexedForm) {\n    final BytesRef indexedForm = new BytesRef(_indexedForm);\n    switch (type) {\n      case INTEGER:\n        return Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n      case FLOAT:\n        return Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n      case LONG:\n        return Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n      case DOUBLE:\n        return Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n      case DATE:\n        return dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) );\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":"  @Override\n  public String indexedToReadable(String _indexedForm) {\n    final BytesRef indexedForm = new BytesRef(_indexedForm);\n    switch (type) {\n      case INTEGER:\n        return Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n      case FLOAT:\n        return Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n      case LONG:\n        return Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n      case DOUBLE:\n        return Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n      case DATE:\n        return dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) );\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#indexedToReadable(String).mjava","sourceNew":"  @Override\n  public String indexedToReadable(String _indexedForm) {\n    final BytesRef indexedForm = new BytesRef(_indexedForm);\n    switch (type) {\n      case INTEGER:\n        return Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n      case FLOAT:\n        return Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n      case LONG:\n        return Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n      case DOUBLE:\n        return Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n      case DATE:\n        return dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) );\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":"  @Override\n  public String indexedToReadable(String _indexedForm) {\n    final BytesRef indexedForm = new BytesRef(_indexedForm);\n    switch (type) {\n      case INTEGER:\n        return Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n      case FLOAT:\n        return Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n      case LONG:\n        return Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n      case DOUBLE:\n        return Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n      case DATE:\n        return dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) );\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331","date":1437383270,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(String).mjava","sourceNew":"  @Override\n  public String indexedToReadable(String _indexedForm) {\n    final BytesRef indexedForm = new BytesRef(_indexedForm);\n    switch (type) {\n      case INTEGER:\n        return Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n      case FLOAT:\n        return Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n      case LONG:\n        return Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n      case DOUBLE:\n        return Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n      case DATE:\n        return DateFormatUtil.formatExternal(new Date(NumericUtils.prefixCodedToLong(indexedForm)));\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":"  @Override\n  public String indexedToReadable(String _indexedForm) {\n    final BytesRef indexedForm = new BytesRef(_indexedForm);\n    switch (type) {\n      case INTEGER:\n        return Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n      case FLOAT:\n        return Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n      case LONG:\n        return Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n      case DOUBLE:\n        return Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n      case DATE:\n        return dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) );\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(String).mjava","sourceNew":"  @Override\n  public String indexedToReadable(String _indexedForm) {\n    final BytesRef indexedForm = new BytesRef(_indexedForm);\n    switch (type) {\n      case INTEGER:\n        return Integer.toString( LegacyNumericUtils.prefixCodedToInt(indexedForm) );\n      case FLOAT:\n        return Float.toString( LegacyNumericUtils.sortableIntToFloat(LegacyNumericUtils.prefixCodedToInt(indexedForm)) );\n      case LONG:\n        return Long.toString( LegacyNumericUtils.prefixCodedToLong(indexedForm) );\n      case DOUBLE:\n        return Double.toString( LegacyNumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(indexedForm)) );\n      case DATE:\n        return DateFormatUtil.formatExternal(new Date(LegacyNumericUtils.prefixCodedToLong(indexedForm)));\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":"  @Override\n  public String indexedToReadable(String _indexedForm) {\n    final BytesRef indexedForm = new BytesRef(_indexedForm);\n    switch (type) {\n      case INTEGER:\n        return Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n      case FLOAT:\n        return Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n      case LONG:\n        return Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n      case DOUBLE:\n        return Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n      case DATE:\n        return DateFormatUtil.formatExternal(new Date(NumericUtils.prefixCodedToLong(indexedForm)));\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":["a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","date":1457059932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(String).mjava","sourceNew":"  @Override\n  public String indexedToReadable(String _indexedForm) {\n    final BytesRef indexedForm = new BytesRef(_indexedForm);\n    switch (type) {\n      case INTEGER:\n        return Integer.toString( LegacyNumericUtils.prefixCodedToInt(indexedForm) );\n      case FLOAT:\n        return Float.toString( NumericUtils.sortableIntToFloat(LegacyNumericUtils.prefixCodedToInt(indexedForm)) );\n      case LONG:\n        return Long.toString( LegacyNumericUtils.prefixCodedToLong(indexedForm) );\n      case DOUBLE:\n        return Double.toString( NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(indexedForm)) );\n      case DATE:\n        return DateFormatUtil.formatExternal(new Date(LegacyNumericUtils.prefixCodedToLong(indexedForm)));\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":"  @Override\n  public String indexedToReadable(String _indexedForm) {\n    final BytesRef indexedForm = new BytesRef(_indexedForm);\n    switch (type) {\n      case INTEGER:\n        return Integer.toString( LegacyNumericUtils.prefixCodedToInt(indexedForm) );\n      case FLOAT:\n        return Float.toString( LegacyNumericUtils.sortableIntToFloat(LegacyNumericUtils.prefixCodedToInt(indexedForm)) );\n      case LONG:\n        return Long.toString( LegacyNumericUtils.prefixCodedToLong(indexedForm) );\n      case DOUBLE:\n        return Double.toString( LegacyNumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(indexedForm)) );\n      case DATE:\n        return DateFormatUtil.formatExternal(new Date(LegacyNumericUtils.prefixCodedToLong(indexedForm)));\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","bugFix":["770342641f7b505eaa8dccdc666158bff2419109"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(String).mjava","sourceNew":"  @Override\n  public String indexedToReadable(String _indexedForm) {\n    final BytesRef indexedForm = new BytesRef(_indexedForm);\n    switch (type) {\n      case INTEGER:\n        return Integer.toString( LegacyNumericUtils.prefixCodedToInt(indexedForm) );\n      case FLOAT:\n        return Float.toString( NumericUtils.sortableIntToFloat(LegacyNumericUtils.prefixCodedToInt(indexedForm)) );\n      case LONG:\n        return Long.toString( LegacyNumericUtils.prefixCodedToLong(indexedForm) );\n      case DOUBLE:\n        return Double.toString( NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(indexedForm)) );\n      case DATE:\n        return DateFormatUtil.formatExternal(new Date(LegacyNumericUtils.prefixCodedToLong(indexedForm)));\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":"  @Override\n  public String indexedToReadable(String _indexedForm) {\n    final BytesRef indexedForm = new BytesRef(_indexedForm);\n    switch (type) {\n      case INTEGER:\n        return Integer.toString( LegacyNumericUtils.prefixCodedToInt(indexedForm) );\n      case FLOAT:\n        return Float.toString( LegacyNumericUtils.sortableIntToFloat(LegacyNumericUtils.prefixCodedToInt(indexedForm)) );\n      case LONG:\n        return Long.toString( LegacyNumericUtils.prefixCodedToLong(indexedForm) );\n      case DOUBLE:\n        return Double.toString( LegacyNumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(indexedForm)) );\n      case DATE:\n        return DateFormatUtil.formatExternal(new Date(LegacyNumericUtils.prefixCodedToLong(indexedForm)));\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(String).mjava","sourceNew":"  @Override\n  public String indexedToReadable(String _indexedForm) {\n    final BytesRef indexedForm = new BytesRef(_indexedForm);\n    switch (type) {\n      case INTEGER:\n        return Integer.toString( LegacyNumericUtils.prefixCodedToInt(indexedForm) );\n      case FLOAT:\n        return Float.toString( NumericUtils.sortableIntToFloat(LegacyNumericUtils.prefixCodedToInt(indexedForm)) );\n      case LONG:\n        return Long.toString( LegacyNumericUtils.prefixCodedToLong(indexedForm) );\n      case DOUBLE:\n        return Double.toString( NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(indexedForm)) );\n      case DATE:\n        return Instant.ofEpochMilli(LegacyNumericUtils.prefixCodedToLong(indexedForm)).toString();\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":"  @Override\n  public String indexedToReadable(String _indexedForm) {\n    final BytesRef indexedForm = new BytesRef(_indexedForm);\n    switch (type) {\n      case INTEGER:\n        return Integer.toString( LegacyNumericUtils.prefixCodedToInt(indexedForm) );\n      case FLOAT:\n        return Float.toString( NumericUtils.sortableIntToFloat(LegacyNumericUtils.prefixCodedToInt(indexedForm)) );\n      case LONG:\n        return Long.toString( LegacyNumericUtils.prefixCodedToLong(indexedForm) );\n      case DOUBLE:\n        return Double.toString( NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(indexedForm)) );\n      case DATE:\n        return DateFormatUtil.formatExternal(new Date(LegacyNumericUtils.prefixCodedToLong(indexedForm)));\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["770342641f7b505eaa8dccdc666158bff2419109","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"770342641f7b505eaa8dccdc666158bff2419109":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"770342641f7b505eaa8dccdc666158bff2419109":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["770342641f7b505eaa8dccdc666158bff2419109"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}