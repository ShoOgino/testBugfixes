{"path":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","commits":[{"id":"292ece8c0acfbfc6126153b17f0c3ca809add4f0","date":1300388028,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","sourceNew":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = (value instanceof Date)\n          ? ((Date)value).getTime()\n          : dateField.parseMath(null, value.toString()).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = (value instanceof Date)\n          ? ((Date)value).getTime()\n          : dateField.parseMath(null, value.toString()).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"beacd02a2fd0d9fb0281b75fb7b3f1b40254f286","date":1301420518,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    TrieFieldHelper.FieldInfo info = new TrieFieldHelper.FieldInfo();\n    info.index = field.indexed();\n    info.store = field.stored();\n    info.precisionStep = precisionStep;\n    info.omitNorms = field.omitNorms();\n    info.omitTF = field.omitTf();\n    \n    if (!info.index && !info.store) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        return TrieFieldHelper.createIntField(field.getName(), i, info, boost);\n\n      case FLOAT:\n        float f = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        return TrieFieldHelper.createFloatField(field.getName(), f, info, boost);\n        \n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        return TrieFieldHelper.createLongField(field.getName(), l, info, boost);\n          \n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        return TrieFieldHelper.createDoubleField(field.getName(), d, info, boost);\n        \n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        return TrieFieldHelper.createDateField(field.getName(), date, info, boost);\n        \n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = (value instanceof Date)\n          ? ((Date)value).getTime()\n          : dateField.parseMath(null, value.toString()).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = (value instanceof Date)\n          ? ((Date)value).getTime()\n          : dateField.parseMath(null, value.toString()).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    TrieFieldHelper.FieldInfo info = new TrieFieldHelper.FieldInfo();\n    info.index = field.indexed();\n    info.store = field.stored();\n    info.precisionStep = precisionStep;\n    info.omitNorms = field.omitNorms();\n    info.omitTF = field.omitTf();\n    \n    if (!info.index && !info.store) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        return TrieFieldHelper.createIntField(field.getName(), i, info, boost);\n\n      case FLOAT:\n        float f = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        return TrieFieldHelper.createFloatField(field.getName(), f, info, boost);\n        \n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        return TrieFieldHelper.createLongField(field.getName(), l, info, boost);\n          \n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        return TrieFieldHelper.createDoubleField(field.getName(), d, info, boost);\n        \n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        return TrieFieldHelper.createDateField(field.getName(), date, info, boost);\n        \n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = (value instanceof Date)\n          ? ((Date)value).getTime()\n          : dateField.parseMath(null, value.toString()).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    TrieFieldHelper.FieldInfo info = new TrieFieldHelper.FieldInfo();\n    info.index = field.indexed();\n    info.store = field.stored();\n    info.precisionStep = precisionStep;\n    info.omitNorms = field.omitNorms();\n    info.omitTF = field.omitTf();\n    \n    if (!info.index && !info.store) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        return TrieFieldHelper.createIntField(field.getName(), i, info, boost);\n\n      case FLOAT:\n        float f = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        return TrieFieldHelper.createFloatField(field.getName(), f, info, boost);\n        \n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        return TrieFieldHelper.createLongField(field.getName(), l, info, boost);\n          \n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        return TrieFieldHelper.createDoubleField(field.getName(), d, info, boost);\n        \n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        return TrieFieldHelper.createDateField(field.getName(), date, info, boost);\n        \n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = (value instanceof Date)\n          ? ((Date)value).getTime()\n          : dateField.parseMath(null, value.toString()).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab0e9f7ce724e6aea1fea746dded19e76d231cf8","date":1304774078,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    final NumericField f = new NumericField(field.getName(), precisionStep, stored ? Field.Store.YES : Field.Store.NO, indexed);\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f.setIntValue(i);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f.setFloatValue(fl);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f.setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f.setDoubleValue(d);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f.setLongValue(date.getTime());\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    TrieFieldHelper.FieldInfo info = new TrieFieldHelper.FieldInfo();\n    info.index = field.indexed();\n    info.store = field.stored();\n    info.precisionStep = precisionStep;\n    info.omitNorms = field.omitNorms();\n    info.omitTF = field.omitTf();\n    \n    if (!info.index && !info.store) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        return TrieFieldHelper.createIntField(field.getName(), i, info, boost);\n\n      case FLOAT:\n        float f = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        return TrieFieldHelper.createFloatField(field.getName(), f, info, boost);\n        \n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        return TrieFieldHelper.createLongField(field.getName(), l, info, boost);\n          \n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        return TrieFieldHelper.createDoubleField(field.getName(), d, info, boost);\n        \n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        return TrieFieldHelper.createDateField(field.getName(), date, info, boost);\n        \n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766","fa0f44f887719e97183771e977cfc4bfb485b766","fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    final NumericField f = new NumericField(field.getName(), precisionStep, stored ? Field.Store.YES : Field.Store.NO, indexed);\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f.setIntValue(i);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f.setFloatValue(fl);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f.setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f.setDoubleValue(d);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f.setLongValue(date.getTime());\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    TrieFieldHelper.FieldInfo info = new TrieFieldHelper.FieldInfo();\n    info.index = field.indexed();\n    info.store = field.stored();\n    info.precisionStep = precisionStep;\n    info.omitNorms = field.omitNorms();\n    info.omitTF = field.omitTf();\n    \n    if (!info.index && !info.store) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        return TrieFieldHelper.createIntField(field.getName(), i, info, boost);\n\n      case FLOAT:\n        float f = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        return TrieFieldHelper.createFloatField(field.getName(), f, info, boost);\n        \n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        return TrieFieldHelper.createLongField(field.getName(), l, info, boost);\n          \n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        return TrieFieldHelper.createDoubleField(field.getName(), d, info, boost);\n        \n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        return TrieFieldHelper.createDateField(field.getName(), date, info, boost);\n        \n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    final NumericField f = new NumericField(field.getName(), precisionStep, stored ? Field.Store.YES : Field.Store.NO, indexed);\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f.setIntValue(i);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f.setFloatValue(fl);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f.setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f.setDoubleValue(d);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f.setLongValue(date.getTime());\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    TrieFieldHelper.FieldInfo info = new TrieFieldHelper.FieldInfo();\n    info.index = field.indexed();\n    info.store = field.stored();\n    info.precisionStep = precisionStep;\n    info.omitNorms = field.omitNorms();\n    info.omitTF = field.omitTf();\n    \n    if (!info.index && !info.store) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        return TrieFieldHelper.createIntField(field.getName(), i, info, boost);\n\n      case FLOAT:\n        float f = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        return TrieFieldHelper.createFloatField(field.getName(), f, info, boost);\n        \n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        return TrieFieldHelper.createLongField(field.getName(), l, info, boost);\n          \n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        return TrieFieldHelper.createDoubleField(field.getName(), d, info, boost);\n        \n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        return TrieFieldHelper.createDateField(field.getName(), date, info, boost);\n        \n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    final NumericField f = new NumericField(field.getName(), precisionStep, stored ? Field.Store.YES : Field.Store.NO, indexed);\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f.setIntValue(i);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f.setFloatValue(fl);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f.setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f.setDoubleValue(d);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f.setLongValue(date.getTime());\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    final NumericField f = new NumericField(field.getName(), precisionStep, stored ? Field.Store.YES : Field.Store.NO, indexed);\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f.setIntValue(i);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f.setFloatValue(fl);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f.setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f.setDoubleValue(d);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f.setLongValue(date.getTime());\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    final NumericField f = new NumericField(field.getName(), precisionStep, stored ? Field.Store.YES : Field.Store.NO, indexed);\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f.setIntValue(i);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f.setFloatValue(fl);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f.setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f.setDoubleValue(d);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f.setLongValue(date.getTime());\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    final NumericField f = new NumericField(field.getName(), precisionStep, stored ? Field.Store.YES : Field.Store.NO, indexed);\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f.setIntValue(i);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f.setFloatValue(fl);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f.setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f.setDoubleValue(d);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f.setLongValue(date.getTime());\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    final NumericField f = new NumericField(field.getName(), precisionStep, stored ? Field.Store.YES : Field.Store.NO, indexed);\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f.setIntValue(i);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f.setFloatValue(fl);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f.setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f.setDoubleValue(d);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f.setLongValue(date.getTime());\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    final NumericField f = new NumericField(field.getName(), precisionStep, stored ? Field.Store.YES : Field.Store.NO, indexed);\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f.setIntValue(i);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f.setFloatValue(fl);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f.setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f.setDoubleValue(d);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f.setLongValue(date.getTime());\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ab0e9f7ce724e6aea1fea746dded19e76d231cf8":["beacd02a2fd0d9fb0281b75fb7b3f1b40254f286"],"beacd02a2fd0d9fb0281b75fb7b3f1b40254f286":["292ece8c0acfbfc6126153b17f0c3ca809add4f0"],"c26f00b574427b55127e869b935845554afde1fa":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","beacd02a2fd0d9fb0281b75fb7b3f1b40254f286"],"292ece8c0acfbfc6126153b17f0c3ca809add4f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","292ece8c0acfbfc6126153b17f0c3ca809add4f0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","292ece8c0acfbfc6126153b17f0c3ca809add4f0"],"a3776dccca01c11e7046323cfad46a3b4a471233":["beacd02a2fd0d9fb0281b75fb7b3f1b40254f286","ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"45669a651c970812a680841b97a77cce06af559f":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","beacd02a2fd0d9fb0281b75fb7b3f1b40254f286"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"ab0e9f7ce724e6aea1fea746dded19e76d231cf8":["c26f00b574427b55127e869b935845554afde1fa","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"beacd02a2fd0d9fb0281b75fb7b3f1b40254f286":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","45669a651c970812a680841b97a77cce06af559f"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"292ece8c0acfbfc6126153b17f0c3ca809add4f0":["beacd02a2fd0d9fb0281b75fb7b3f1b40254f286","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["45669a651c970812a680841b97a77cce06af559f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["292ece8c0acfbfc6126153b17f0c3ca809add4f0","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"45669a651c970812a680841b97a77cce06af559f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","a258fbb26824fd104ed795e5d9033d2d040049ee","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}