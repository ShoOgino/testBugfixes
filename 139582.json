{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.DynamicInterceptor#process(HttpRequest,HttpContext).mjava","commits":[{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.DynamicInterceptor#process(HttpRequest,HttpContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void process(HttpRequest request, HttpContext context) throws HttpException, IOException {\n      interceptors.forEach(new Consumer<HttpRequestInterceptor>() {\n\n        @Override\n        public void accept(HttpRequestInterceptor interceptor) {\n          try {\n            interceptor.process(request, context);\n          } catch (Exception e) {\n            logger.error(\"\", e);\n          }\n        }\n      });\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67d4e5d5bba6aa411a9c00b347ee3f9845dcc83f","date":1487792658,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.DynamicInterceptor#process(HttpRequest,HttpContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.DynamicInterceptor#process(HttpRequest,HttpContext).mjava","sourceNew":"    @Override\n    public void process(HttpRequest request, HttpContext context) throws HttpException, IOException {\n      // don't synchronize traversal - can lead to deadlock - CopyOnWriteArrayList is critical\n      // we also do not want to have to acquire the mutex when the list is empty or put a global\n      // mutex around the process calls\n      interceptors.forEach(new Consumer<HttpRequestInterceptor>() {\n\n        @Override\n        public void accept(HttpRequestInterceptor interceptor) {\n          try {\n            interceptor.process(request, context);\n          } catch (Exception e) {\n            logger.error(\"\", e);\n          }\n        }\n      });\n\n    }\n\n","sourceOld":"    @Override\n    public void process(HttpRequest request, HttpContext context) throws HttpException, IOException {\n      interceptors.forEach(new Consumer<HttpRequestInterceptor>() {\n\n        @Override\n        public void accept(HttpRequestInterceptor interceptor) {\n          try {\n            interceptor.process(request, context);\n          } catch (Exception e) {\n            logger.error(\"\", e);\n          }\n        }\n      });\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.DynamicInterceptor#process(HttpRequest,HttpContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.DynamicInterceptor#process(HttpRequest,HttpContext).mjava","sourceNew":"    @Override\n    public void process(HttpRequest request, HttpContext context) throws HttpException, IOException {\n      // don't synchronize traversal - can lead to deadlock - CopyOnWriteArrayList is critical\n      // we also do not want to have to acquire the mutex when the list is empty or put a global\n      // mutex around the process calls\n      interceptors.forEach(new Consumer<HttpRequestInterceptor>() {\n\n        @Override\n        public void accept(HttpRequestInterceptor interceptor) {\n          try {\n            interceptor.process(request, context);\n          } catch (Exception e) {\n            log.error(\"\", e);\n          }\n        }\n      });\n\n    }\n\n","sourceOld":"    @Override\n    public void process(HttpRequest request, HttpContext context) throws HttpException, IOException {\n      // don't synchronize traversal - can lead to deadlock - CopyOnWriteArrayList is critical\n      // we also do not want to have to acquire the mutex when the list is empty or put a global\n      // mutex around the process calls\n      interceptors.forEach(new Consumer<HttpRequestInterceptor>() {\n\n        @Override\n        public void accept(HttpRequestInterceptor interceptor) {\n          try {\n            interceptor.process(request, context);\n          } catch (Exception e) {\n            logger.error(\"\", e);\n          }\n        }\n      });\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"859081acf00749f5dd462772c571d611d4a4d2db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"67d4e5d5bba6aa411a9c00b347ee3f9845dcc83f":["859081acf00749f5dd462772c571d611d4a4d2db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["67d4e5d5bba6aa411a9c00b347ee3f9845dcc83f"]},"commit2Childs":{"859081acf00749f5dd462772c571d611d4a4d2db":["67d4e5d5bba6aa411a9c00b347ee3f9845dcc83f"],"67d4e5d5bba6aa411a9c00b347ee3f9845dcc83f":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["859081acf00749f5dd462772c571d611d4a4d2db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}