{"path":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/XYZSolidTest#testNonDegenerateRelationships().mjava","commits":[{"id":"f64b7098768253180859cd8faeae6b1a185b06ed","date":1441223971,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/XYZSolidTest#testNonDegenerateRelationships().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNonDegenerateRelationships() {\n    XYZSolid s;\n    GeoShape shape;\n    // Something bigger than the world\n    s = new XYZSolid(PlanetModel.SPHERE, -2.0, 2.0, -2.0, 2.0, -2.0, 2.0);\n    // Any shape, except whole world, should be within.\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.WITHIN, s.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    // An XYZSolid represents a surface shape, which when larger than the world is in fact\n    // the entire world, so it should overlap the world.\n    assertEquals(GeoArea.OVERLAPS, s.getRelationship(shape));\n\n    // Something overlapping the world on only one side\n    s = new XYZSolid(PlanetModel.SPHERE, -2.0, 0.0, -2.0, 2.0, -2.0, 2.0);\n    // Some things should be disjoint...\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, s.getRelationship(shape));\n    // And, some things should be within... \n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    assertEquals(GeoArea.WITHIN, s.getRelationship(shape));\n    // And, some things should overlap.\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, s.getRelationship(shape));\n\n    // Partial world should be contained by GeoWorld object...\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, s.getRelationship(shape));\n    \n    // Something inside the world\n    s = new XYZSolid(PlanetModel.SPHERE, -0.1, 0.1, -0.1, 0.1, -0.1, 0.1);\n    // All shapes should be disjoint\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, s.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, s.getRelationship(shape));\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9891fa1f5a5571b36fbd8a69ccc12f24f5201e48","date":1441921550,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/XYZSolidTest#testNonDegenerateRelationships().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/XYZSolidTest#testNonDegenerateRelationships().mjava","sourceNew":"  @Test\n  public void testNonDegenerateRelationships() {\n    XYZSolid s;\n    GeoShape shape;\n    // Something bigger than the world\n    s = new XYZSolid(PlanetModel.SPHERE, -2.0, 2.0, -2.0, 2.0, -2.0, 2.0);\n    // Any shape, except whole world, should be within.\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.WITHIN, s.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    // An XYZSolid represents a surface shape, which when larger than the world is in fact\n    // the entire world, so it should overlap the world.\n    assertEquals(GeoArea.OVERLAPS, s.getRelationship(shape));\n\n    // Something overlapping the world on only one side\n    s = new XYZSolid(PlanetModel.SPHERE, -2.0, 0.0, -2.0, 2.0, -2.0, 2.0);\n    // Some things should be disjoint...\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, s.getRelationship(shape));\n    // And, some things should be within... \n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    assertEquals(GeoArea.WITHIN, s.getRelationship(shape));\n    // And, some things should overlap.\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, s.getRelationship(shape));\n\n    // Partial world should be contained by GeoWorld object...\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, s.getRelationship(shape));\n    \n    // Something inside the world\n    s = new XYZSolid(PlanetModel.SPHERE, -0.1, 0.1, -0.1, 0.1, -0.1, 0.1);\n    // All shapes should be disjoint\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, s.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, s.getRelationship(shape));\n    \n  }\n\n","sourceOld":"  @Test\n  public void testNonDegenerateRelationships() {\n    XYZSolid s;\n    GeoShape shape;\n    // Something bigger than the world\n    s = new XYZSolid(PlanetModel.SPHERE, -2.0, 2.0, -2.0, 2.0, -2.0, 2.0);\n    // Any shape, except whole world, should be within.\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.WITHIN, s.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    // An XYZSolid represents a surface shape, which when larger than the world is in fact\n    // the entire world, so it should overlap the world.\n    assertEquals(GeoArea.OVERLAPS, s.getRelationship(shape));\n\n    // Something overlapping the world on only one side\n    s = new XYZSolid(PlanetModel.SPHERE, -2.0, 0.0, -2.0, 2.0, -2.0, 2.0);\n    // Some things should be disjoint...\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, s.getRelationship(shape));\n    // And, some things should be within... \n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    assertEquals(GeoArea.WITHIN, s.getRelationship(shape));\n    // And, some things should overlap.\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, s.getRelationship(shape));\n\n    // Partial world should be contained by GeoWorld object...\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, s.getRelationship(shape));\n    \n    // Something inside the world\n    s = new XYZSolid(PlanetModel.SPHERE, -0.1, 0.1, -0.1, 0.1, -0.1, 0.1);\n    // All shapes should be disjoint\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, s.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, s.getRelationship(shape));\n    \n  }\n\n","bugFix":["f64b7098768253180859cd8faeae6b1a185b06ed"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb2e534491f753a302fda3fc99c81120482bba19","date":1441977047,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/XYZSolidTest#testNonDegenerateRelationships().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/XYZSolidTest#testNonDegenerateRelationships().mjava","sourceNew":"  @Test\n  public void testNonDegenerateRelationships() {\n    XYZSolid s;\n    GeoShape shape;\n    // Something bigger than the world\n    s = new StandardXYZSolid(PlanetModel.SPHERE, -2.0, 2.0, -2.0, 2.0, -2.0, 2.0);\n    // Any shape, except whole world, should be within.\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.WITHIN, s.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    // An XYZSolid represents a surface shape, which when larger than the world is in fact\n    // the entire world, so it should overlap the world.\n    assertEquals(GeoArea.OVERLAPS, s.getRelationship(shape));\n\n    // Something overlapping the world on only one side\n    s = new StandardXYZSolid(PlanetModel.SPHERE, -2.0, 0.0, -2.0, 2.0, -2.0, 2.0);\n    // Some things should be disjoint...\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, s.getRelationship(shape));\n    // And, some things should be within... \n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    assertEquals(GeoArea.WITHIN, s.getRelationship(shape));\n    // And, some things should overlap.\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, s.getRelationship(shape));\n\n    // Partial world should be contained by GeoWorld object...\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, s.getRelationship(shape));\n    \n    // Something inside the world\n    s = new StandardXYZSolid(PlanetModel.SPHERE, -0.1, 0.1, -0.1, 0.1, -0.1, 0.1);\n    // All shapes should be disjoint\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, s.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, s.getRelationship(shape));\n    \n  }\n\n","sourceOld":"  @Test\n  public void testNonDegenerateRelationships() {\n    XYZSolid s;\n    GeoShape shape;\n    // Something bigger than the world\n    s = new XYZSolid(PlanetModel.SPHERE, -2.0, 2.0, -2.0, 2.0, -2.0, 2.0);\n    // Any shape, except whole world, should be within.\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.WITHIN, s.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    // An XYZSolid represents a surface shape, which when larger than the world is in fact\n    // the entire world, so it should overlap the world.\n    assertEquals(GeoArea.OVERLAPS, s.getRelationship(shape));\n\n    // Something overlapping the world on only one side\n    s = new XYZSolid(PlanetModel.SPHERE, -2.0, 0.0, -2.0, 2.0, -2.0, 2.0);\n    // Some things should be disjoint...\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, s.getRelationship(shape));\n    // And, some things should be within... \n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    assertEquals(GeoArea.WITHIN, s.getRelationship(shape));\n    // And, some things should overlap.\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, s.getRelationship(shape));\n\n    // Partial world should be contained by GeoWorld object...\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, s.getRelationship(shape));\n    \n    // Something inside the world\n    s = new XYZSolid(PlanetModel.SPHERE, -0.1, 0.1, -0.1, 0.1, -0.1, 0.1);\n    // All shapes should be disjoint\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, s.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, s.getRelationship(shape));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/XYZSolidTest#testNonDegenerateRelationships().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/XYZSolidTest#testNonDegenerateRelationships().mjava","sourceNew":"  @Test\n  public void testNonDegenerateRelationships() {\n    XYZSolid s;\n    GeoShape shape;\n    // Something bigger than the world\n    s = new StandardXYZSolid(PlanetModel.SPHERE, -2.0, 2.0, -2.0, 2.0, -2.0, 2.0);\n    // Any shape, except whole world, should be within.\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.WITHIN, s.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    // An XYZSolid represents a surface shape, which when larger than the world is in fact\n    // the entire world, so it should overlap the world.\n    assertEquals(GeoArea.OVERLAPS, s.getRelationship(shape));\n\n    // Something overlapping the world on only one side\n    s = new StandardXYZSolid(PlanetModel.SPHERE, -2.0, 0.0, -2.0, 2.0, -2.0, 2.0);\n    // Some things should be disjoint...\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, s.getRelationship(shape));\n    // And, some things should be within... \n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    assertEquals(GeoArea.WITHIN, s.getRelationship(shape));\n    // And, some things should overlap.\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, s.getRelationship(shape));\n\n    // Partial world should be contained by GeoWorld object...\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, s.getRelationship(shape));\n    \n    // Something inside the world\n    s = new StandardXYZSolid(PlanetModel.SPHERE, -0.1, 0.1, -0.1, 0.1, -0.1, 0.1);\n    // All shapes should be disjoint\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, s.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, s.getRelationship(shape));\n    \n  }\n\n","sourceOld":"  @Test\n  public void testNonDegenerateRelationships() {\n    XYZSolid s;\n    GeoShape shape;\n    // Something bigger than the world\n    s = new StandardXYZSolid(PlanetModel.SPHERE, -2.0, 2.0, -2.0, 2.0, -2.0, 2.0);\n    // Any shape, except whole world, should be within.\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.WITHIN, s.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    // An XYZSolid represents a surface shape, which when larger than the world is in fact\n    // the entire world, so it should overlap the world.\n    assertEquals(GeoArea.OVERLAPS, s.getRelationship(shape));\n\n    // Something overlapping the world on only one side\n    s = new StandardXYZSolid(PlanetModel.SPHERE, -2.0, 0.0, -2.0, 2.0, -2.0, 2.0);\n    // Some things should be disjoint...\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, s.getRelationship(shape));\n    // And, some things should be within... \n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    assertEquals(GeoArea.WITHIN, s.getRelationship(shape));\n    // And, some things should overlap.\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, s.getRelationship(shape));\n\n    // Partial world should be contained by GeoWorld object...\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, s.getRelationship(shape));\n    \n    // Something inside the world\n    s = new StandardXYZSolid(PlanetModel.SPHERE, -0.1, 0.1, -0.1, 0.1, -0.1, 0.1);\n    // All shapes should be disjoint\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, s.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, s.getRelationship(shape));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb2e534491f753a302fda3fc99c81120482bba19":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48"],"f64b7098768253180859cd8faeae6b1a185b06ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9891fa1f5a5571b36fbd8a69ccc12f24f5201e48":["f64b7098768253180859cd8faeae6b1a185b06ed"],"b4e444678504caf66a8060b1d514383aa4feac0c":["fb2e534491f753a302fda3fc99c81120482bba19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"fb2e534491f753a302fda3fc99c81120482bba19":["b4e444678504caf66a8060b1d514383aa4feac0c"],"f64b7098768253180859cd8faeae6b1a185b06ed":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f64b7098768253180859cd8faeae6b1a185b06ed"],"9891fa1f5a5571b36fbd8a69ccc12f24f5201e48":["fb2e534491f753a302fda3fc99c81120482bba19"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}